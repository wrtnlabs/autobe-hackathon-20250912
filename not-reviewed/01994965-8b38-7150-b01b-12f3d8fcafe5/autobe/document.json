{"operations":[{"specification":"This authorization operation creates a new endUser account, allowing registration by providing necessary credentials such as email and password. It utilizes the telegram_file_downloader_endusers table, which contains columns like id, email, password_hash, created_at, updated_at, and deleted_at for soft deletion. The operation ensures email uniqueness and proper password hashing management. It is exposed as a public registration endpoint under /auth/endUser/join, matching the role kind 'member'. Upon successful registration, initial JWT tokens are issued encapsulated in the ITelegramFileDownloaderEndUser.IAuthorized response. This operation is critical for onboarding new end users and establishing their authentication state within the service.","authorizationType":"join","description":"User registration API for end users who download Telegram channel/group files via the web dashboard. Creates an account with unique email and hashed password in telegram_file_downloader_endusers table. Automatically issues initial JWT tokens on successful registration. Requires no prior authentication and uses secure creation with validation for unique email. Ensures new users are prepared for subsequent authenticated requests. Integrates within the authentication flow for member-kind roles and supports token issuance for session management.","summary":"Register a new endUser account in telegram_file_downloader_endusers with initial token issuance","parameters":[],"requestBody":{"description":"Request body for new endUser registration, including required email and password","typeName":"ITelegramFileDownloaderEndUser.ICreate"},"responseBody":{"description":"Authorized access tokens and account info for registered endUser","typeName":"ITelegramFileDownloaderEndUser.IAuthorized"},"authorizationRole":"endUser","name":"join","path":"/auth/endUser/join","method":"post"},{"specification":"This authorization operation performs login for end users who access the Telegram File Downloader via the web dashboard. It references the telegram_file_downloader_endusers table and verifies the provided credentials (email and password). Upon successful login, it issues a JWT token following the member-kind role authentication flows. The endpoint is public at /auth/endUser/login and requires secure handling of password hashes. The response type follows the pattern ITelegramFileDownloaderEndUser.IAuthorized, ensuring consistent token management within the system.","authorizationType":"login","description":"User login API for end users enabling authentication with email and password. Validates credentials against telegram_file_downloader_endusers data and issues JWT tokens for session management. Endpoint allows members to obtain access tokens necessary for subsequent API calls and dashboard interactions. Handles security by validating password hashes without exposing authentication internals.","summary":"Authenticate endUser and issue JWT tokens from telegram_file_downloader_endusers","parameters":[],"requestBody":{"description":"Request body containing login credentials for endUser","typeName":"ITelegramFileDownloaderEndUser.ILogin"},"responseBody":{"description":"Authorized access tokens after successful login for endUser","typeName":"ITelegramFileDownloaderEndUser.IAuthorized"},"authorizationRole":"endUser","name":"login","path":"/auth/endUser/login","method":"post"},{"specification":"This authorization operation refreshes access tokens for authenticated end users by validating the provided refresh token. It is based on the telegram_file_downloader_endusers schema and assists in session renewal without re-authentication of credentials. The endpoint is available at /auth/endUser/refresh, requiring a valid refresh token to issue new JWT tokens. This supports continuous authenticated sessions for member-kind users with the response type ITelegramFileDownloaderEndUser.IAuthorized.","authorizationType":"refresh","description":"Token refresh API for end users to renew JWT tokens using a valid refresh token. Supports seamless session continuation and adheres to member-kind authentication flow. Ensures refresh tokens are securely accepted and new tokens issued without requiring login credentials repeatedly.","summary":"Refresh JWT tokens for authenticated endUser sessions","parameters":[],"requestBody":{"description":"Request body containing refresh token for endUser session renewal","typeName":"ITelegramFileDownloaderEndUser.IRefresh"},"responseBody":{"description":"Newly issued authorized tokens after refresh for endUser","typeName":"ITelegramFileDownloaderEndUser.IAuthorized"},"authorizationRole":"endUser","name":"refresh","path":"/auth/endUser/refresh","method":"post"},{"specification":"This API operation enables end users to reset their password by providing necessary credentials for password change. It references the telegram_file_downloader_endusers table that includes password_hash and supports password management workflows. The endpoint is designed to secure password reset flow, ensuring that only registered users can update passwords after proper verification. It plays a critical role in member-kind user authentication and account management by enhancing security and recovery.","authorizationType":null,"description":"Password reset operation for end users to securely change their password after verification. Relies on telegram_file_downloader_endusers password_hash field for updating credentials. Supports member-kind users in maintaining account security via password recovery.","summary":"Reset password for endUser account securely","parameters":[],"requestBody":{"description":"Request body for password reset operation for endUser","typeName":"ITelegramFileDownloaderEndUser.IResetPassword"},"responseBody":{"description":"Confirmation of password reset operation success","typeName":"ITelegramFileDownloaderEndUser.IResetPasswordResponse"},"authorizationRole":"endUser","name":"resetPassword","path":"/auth/endUser/password/reset","method":"post"},{"specification":"This API operation allows end users to change their password while authenticated. It leverages the telegram_file_downloader_endusers table fields related to password hashing and account security. The operation ensures users can update credentials securely and is aligned with member-kind user authentication practices. It is critical for maintaining account integrity and avoiding unauthorized access.","authorizationType":null,"description":"Authenticated password change for end users to update existing password securely. Uses telegram_file_downloader_endusers password_hash for secure updates. Supports member-kind user account management and security enhancement.","summary":"Change password for authenticated endUser securely","parameters":[],"requestBody":{"description":"Request body for password change operation for endUser","typeName":"ITelegramFileDownloaderEndUser.IChangePassword"},"responseBody":{"description":"Confirmation of password change operation success","typeName":"ITelegramFileDownloaderEndUser.IChangePasswordResponse"},"authorizationRole":"endUser","name":"changePassword","path":"/auth/endUser/password/change","method":"post"},{"specification":"This API operation enables developers, who are member-kind users, to register an account using email and password. It corresponds to the 'telegram_file_downloader_developers' table in the Prisma DB schema. The registration (join) endpoint creates a new developer user record with unique email and hashed password fields. It issues an initial JWT token upon successful creation to enable authenticated sessions immediately. This operation is public (no prior authentication required) and serves as the entry point for developers to begin using the Telegram File Downloader API's programmatic download and subscription features. The implementation must validate email uniqueness and store a secure hashed password. Validation errors or duplicate emails must result in appropriate error responses. The generated JWT token encapsulates user ID and role info derived from the developer table schema.","authorizationType":"join","description":"This join operation allows developers to register for the Telegram File Downloader API service. It requires input matching the developer user database table, including email and password hash fields. After registration, the system issues an authorization token providing access to the API with developer privileges.\n\nIt leverages the 'email' column for unique identification, uses 'password_hash' for credential validation, and populates 'created_at' and 'updated_at' timestamps automatically. This operation does not require prior authentication, consistent with public access for user registration.\n\nUpon success, the returned object is typed as ITelegramFileDownloaderDeveloper.IAuthorized, reflecting the authorized developer user with JWT tokens.\n\nThis operation serves as the foundational step for all developer interactions with the Telegram File Downloader API, enabling authenticated programmatic access.\n\nProper error handling ensures duplicate email registration attempts are rejected securely and comprehensively.\n\nRelated operations include login and refresh token renewal endpoints for developer users.","summary":"Create a new developer user account with initial JWT authorization token.","parameters":[],"requestBody":{"description":"Request body for developer user registration including email and password hash.","typeName":"ITelegramFileDownloaderDeveloper.ICreate"},"responseBody":{"description":"Authorized developer user information with JWT tokens.","typeName":"ITelegramFileDownloaderDeveloper.IAuthorized"},"authorizationRole":null,"name":"join","path":"/auth/developer/join","method":"post"},{"specification":"This API operation enables developers to log in with their credentials validating against the telegram_file_downloader_developers table. It authenticates by verifying the provided email and password hash and issues a JWT token upon success. This login operation is public and allows developers to receive authenticated access tokens enabling API usage and subscription management. The process checks the 'email' field for identification and 'password_hash' for credential verification. Failure to authenticate must return proper HTTP 401 Unauthorized responses.\n\nUpon successful login, the response contains an IAuthorized type reflecting JWT access and refresh tokens for the developer role.\n\nThis operation is critical in the developer authentication flow, facilitating secure access and token management.\n\nComplementary operations include join (registration) and refresh token renewal endpoints for developers.","authorizationType":"login","description":"Developer login operation authenticating email and password to issue JWT tokens. Utilizes 'email' and 'password_hash' fields from the developer's schema record for credential validation.\n\nSuccessful authentication results in an authorized developer user object containing JWT access and refresh tokens.\n\nThis operation is publicly accessible and forms an essential part of the developer authentication lifecycle.\n\nRejection of invalid credentials is handled with 401 Unauthorized HTTP responses.\n\nWorks in conjunction with registration (join) and token refresh operations.","summary":"Authenticate a developer user and return JWT tokens.","parameters":[],"requestBody":{"description":"Login credentials payload including email and password.","typeName":"ITelegramFileDownloaderDeveloper.ILogin"},"responseBody":{"description":"Authorized developer user information with JWT tokens.","typeName":"ITelegramFileDownloaderDeveloper.IAuthorized"},"authorizationRole":null,"name":"login","path":"/auth/developer/login","method":"post"},{"specification":"This API operation enables developers to refresh their JWT access tokens using a valid refresh token. It validates the refresh token linked to the developer user identity in the telegram_file_downloader_developers table without requiring user credentials. The operation issues a new access token upon successful validation. This protects session continuity and secure API access without re-authentication.\n\nThe refresh endpoint is part of the token lifecycle management for developer users, extending authenticated sessions securely.\n\nThe response returns an IAuthorized type containing renewed tokens consistent with the developer authorization schema.\n\nThis operation requires the presence of a valid refresh token and is protected accordingly.\n\nIt complements the login and join operations forming the authentication triad for the developer role.","authorizationType":"refresh","description":"Refresh JWT access token using a valid refresh token for developers. This operation validates the refresh token status linked to the developer user and issues new JWT tokens for continued authenticated API access.\n\nIt relies on the developer user identification stored in tokens associated with the telegram_file_downloader_developers table.\n\nThe operation does not require user credentials but mandates valid refresh token possession.\n\nSuccessful response includes renewed authorized access reflecting the developer's identity and role.\n\nSupports authentication persistence and security best practices by allowing session renewal without password re-entry.\n\nRelated operations include login (credential authentication) and join (user registration).","summary":"Renew developer JWT access tokens using refresh token.","parameters":[],"requestBody":{"description":"Refresh token payload for renewing developer access tokens.","typeName":"ITelegramFileDownloaderDeveloper.IRefresh"},"responseBody":{"description":"Authorized developer user information with renewed JWT tokens.","typeName":"ITelegramFileDownloaderDeveloper.IAuthorized"},"authorizationRole":null,"name":"refresh","path":"/auth/developer/refresh","method":"post"},{"specification":"This API operation creates a new administrator account in the telegram_file_downloader_administrators table and issues initial JWT tokens for authorization. It is used for the registration (join) process of administrator role users, who are system administrators managing subscriptions, monitoring logs, and handling payments. The essential fields referenced in the schema for this operation include email and password_hash to register the admin user securely. The endpoint accepts email and password credentials, registers the admin, and returns an IAuthorized response with the access credentials in JWT form. Registration is open to the public and does not require any authentication to access this endpoint. Successful registration results in creation of a new record in the telegram_file_downloader_administrators with created_at and updated_at timestamps automatically generated, and null deleted_at indicating an active record. Related audit logs capture the registration action separately, but are not managed by this API operation. This operation is foundational for admin users to authenticate and access admin panel features securely.","authorizationType":"join","description":"This endpoint allows system administrators to register new administrator accounts by providing their email and password. The operation securely stores the password hash and creates a new administrator record in the telegram_file_downloader_administrators table. Upon successful registration, it issues authorization tokens compliant with JWT for subsequent authenticated API access. This ensures that only registered administrators can access protected admin functionalities such as managing subscriptions, monitoring logs, and viewing payment status. The operation strictly references the existing schema columns: email, password_hash, created_at, updated_at, deleted_at. Registration data must comply with the database schema constraints and unique email indices. No assumptions about additional fields are made, ensuring consistency and integrity of administrator data.","summary":"Create a new telegram_file_downloader_administrators account and issue JWT authorization tokens","parameters":[],"requestBody":{"description":"Registration data for the administrator account","typeName":"ITelegramFileDownloaderAdministrator.ICreate"},"responseBody":{"description":"Authorized administrator with JWT tokens","typeName":"ITelegramFileDownloaderAdministrator.IAuthorized"},"authorizationRole":null,"name":"join","path":"/auth/administrator/join","method":"post"},{"specification":"This API operation logs in an existing administrator by verifying provided credentials against the telegram_file_downloader_administrators table. It ensures that the provided email and password_hash match an active administrator record (deleted_at is null) and authenticates the user. Upon successful authentication, the system issues JWT access tokens for secure API interactions. This login operation allows administrators to authenticate and obtain JWT tokens for access to protected admin API features such as subscription management, audit logs, and billing oversight. It references the email and password_hash fields for credential verification. This endpoint requires no prior authentication, being the gateway for administrators to access the system securely. The login operation does not update user records other than last login timestamps handled internally and outside this operation scope. The operation returns an IAuthorized object containing JWT tokens for authorization.","authorizationType":"login","description":"Allows an existing administrator to log in by providing valid credentials. The system validates the email and password_hash fields against the telegram_file_downloader_administrators table where the record is active (deleted_at is null). On successful validation, JWT access tokens are issued to enable secure API access to administrator functionalities including subscription and billing management, system monitoring, and logs. This login function is public and does not require prior authentication. It strictly adheres to the schema properties and does not modify records beyond authentication scope. The operation response follows the IAuthorized JWT format.","summary":"Authenticate administrator and issue JWT access tokens","parameters":[],"requestBody":{"description":"Login credentials for administrator","typeName":"ITelegramFileDownloaderAdministrator.ILogin"},"responseBody":{"description":"Authorized administrator with JWT tokens","typeName":"ITelegramFileDownloaderAdministrator.IAuthorized"},"authorizationRole":null,"name":"login","path":"/auth/administrator/login","method":"post"},{"specification":"This API operation refreshes JWT authorization tokens for an authenticated administrator user. It accepts a valid refresh token and issues a new pair of access and refresh tokens, complying with JWT token lifecycle management. This operation is part of the token refresh flow to maintain secure session continuity without requiring full re-authentication. It references the telegram_file_downloader_administrators role and uses credentials previously issued during login or join operations. The endpoint is protected and requires the refresh token as input for validation. Upon successful validation, new JWT tokens are issued reflecting the administrator's identity and permissions. This operation does not modify the administrator record other than token issuance.","authorizationType":"refresh","description":"Refreshes JWT authorization tokens for an authenticated administrator user. It requires a valid refresh token and returns new access and refresh tokens in compliance with JWT standards. This operation maintains security and session continuity without requiring full login. The operation references existing administrator authentication tokens and is protected by token validation mechanisms. This refresh endpoint is an integral part of the administrator authentication lifecycle, enabling seamless token renewal.","summary":"Refresh JWT tokens for administrator","parameters":[],"requestBody":{"description":"Refresh token request data","typeName":"ITelegramFileDownloaderAdministrator.IRefresh"},"responseBody":{"description":"Authorized administrator with refreshed JWT tokens","typeName":"ITelegramFileDownloaderAdministrator.IAuthorized"},"authorizationRole":null,"name":"refresh","path":"/auth/administrator/refresh","method":"post"},{"specification":"This operation retrieves a filtered and paginated list of Telegram File Downloader API end users from the underlying telegram_file_downloader_endusers Prisma table. It provides extensive filtering, sorting, and pagination capabilities to efficiently search and browse registered end users. The operation supports query parameters for searching by email, filtering by deleted status, and sorting by account creation or update timestamps. The result includes summarized end user information relevant to list views, excluding sensitive details like password hashes. This enables administrative or analytical features requiring user overview.","description":"Retrieve a filtered and paginated list of Telegram File Downloader end users. This operation queries the telegram_file_downloader_endusers table and returns summary information about users. It supports common filters such as deletion status and allows paging through potentially large user bases.\n\nAuthentication and authorization are enforced to restrict access to authorized administrative roles only.\n\nThe response excludes sensitive information such as password hashes for security reasons.\n\nUse this operation to power user management dashboards, administrative monitoring, or bulk user data exports.\n\nErrors are returned for invalid query filters or unauthorized access attempts.","summary":"Search and retrieve a filtered list of Telegram File Downloader end users","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for Telegram File Downloader end user filtering","typeName":"ITelegramFileDownloaderEndUser.IRequest"},"responseBody":{"description":"Paginated list of Telegram File Downloader end user summaries matching search criteria","typeName":"IPageITelegramFileDownloaderEnduser.ISummary"},"authorizationType":null,"authorizationRole":"administrator","path":"/telegramFileDownloader/administrator/endusers","method":"patch","name":"index"},{"specification":"This operation retrieves detailed information for a specific Telegram File Downloader end user by their unique identifier from the telegram_file_downloader_endusers Prisma table. It returns comprehensive user attributes including email, account creation time, update timestamps, and soft-deletion status indications. This endpoint deliberately excludes sensitive authentication data such as password hashes.\n\nOnly authorized administrators are allowed to access end user details to protect privacy and security.\n\nUse this operation to fetch full data on individual user accounts for profile management, auditing, or troubleshooting purposes.\n\nErrors include 404 for unknown user IDs and 403 if the caller lacks authorization.","description":"Retrieve detailed profile information of a specific Telegram File Downloader end user by enduserId. This includes all non-sensitive fields and status markers.\n\nAccess to this operation is restricted to administrators for security and privacy.\n\nReturn 404 if the specified user does not exist.\n\nUse this in detailed user profile, audit, and troubleshooting workflows.","summary":"Retrieve detailed information of a Telegram File Downloader end user","parameters":[{"name":"enduserId","description":"Unique identifier of the Telegram File Downloader end user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detailed Telegram File Downloader end user information","typeName":"ITelegramFileDownloaderEndUser"},"authorizationType":null,"authorizationRole":"administrator","path":"/telegramFileDownloader/administrator/endusers/{enduserId}","method":"get","name":"at"},{"specification":"This operation creates a new Telegram File Downloader end user account by inserting a record into telegram_file_downloader_endusers. The creation process requires the user's email and password hash, along with optional fields such as timestamps and deleted status. Email uniqueness is enforced.\n\nThe operation is intended to be used for user registration flows. Authentication and authorization considerations are to be handled separately.\n\nErrors include uniqueness violation on email as well as validation errors on required fields.","description":"Create a new Telegram File Downloader end user account with email and password hash, plus optional auditing timestamps.\n\nEnforces unique email constraint.\n\nReturns the created user record with assigned ID.\n\nIntended for user registration processes.","summary":"Create a new Telegram File Downloader end user","parameters":[],"requestBody":{"description":"Creation data for Telegram File Downloader end user","typeName":"ITelegramFileDownloaderEndUser.ICreate"},"responseBody":{"description":"Newly created Telegram File Downloader end user information","typeName":"ITelegramFileDownloaderEndUser"},"authorizationType":null,"authorizationRole":null,"path":"/telegramFileDownloader/endusers","method":"post","name":"create"},{"specification":"This operation updates an existing Telegram File Downloader end user identified by enduserId in the telegram_file_downloader_endusers table. It supports updates to email, password hash, timestamps, and soft delete status fields. Email uniqueness is validated if changed.\n\nThis operation is restricted to administrative roles and intended for administrative user management or profile corrections.\n\nErrors include 404 if the user does not exist, 409 for email duplication, and validation errors on bad input.","description":"Update Telegram File Downloader end user information identified by enduserId.\n\nSupports changes to email, password hash, and auditing timestamps.\n\nAccess is restricted to administrator role.\n\nReturns the updated user record.\n\nError responses include 404 Not Found and 409 Conflict on email duplication.","summary":"Update an existing Telegram File Downloader end user","parameters":[{"name":"enduserId","description":"Unique identifier of the Telegram File Downloader end user to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated data for Telegram File Downloader end user","typeName":"ITelegramFileDownloaderEndUser.IUpdate"},"responseBody":{"description":"Updated Telegram File Downloader end user information","typeName":"ITelegramFileDownloaderEndUser"},"authorizationType":null,"authorizationRole":"administrator","path":"/telegramFileDownloader/administrator/endusers/{enduserId}","method":"put","name":"update"},{"specification":"This operation deletes a specific end user record from the telegram_file_downloader_endusers table in the Prisma database. It permanently removes the end user and all related data such as download jobs, storage usages, payments, transactions, and audit logs directly and irrevocably, as the database model employs soft delete timestamps but this API performs hard deletion. The operation requires the end user's unique UUID path parameter to identify the record to delete. Deleting an end user is restricted to authorized administrator roles. No request body is needed, and no response body is returned, indicating successful deletion with HTTP status only.","path":"/telegramFileDownloader/administrator/endusers/{enduserId}","method":"delete","summary":"Delete a telegram file downloader end user by ID","description":"This API operation permanently deletes a telegram file downloader end user by their unique identifier.\n\nThe end user entity represents individuals who use the system via web dashboard for downloading files from Telegram channels/groups.\n\nUpon deletion, all related data such as their download jobs, storage usage, payments, and audit logs are cascaded and removed.\n\nThis hard delete operation removes the user from the database entirely and cannot be undone.\n\nAuthorization roles required: administrator only.\n\nNo request body is needed for this DELETE operation.\n\nThe operation returns no content but HTTP status 204 upon success.\n\nClients should handle this accordingly to confirm removal and update UI or cache.","parameters":[{"name":"enduserId","description":"Unique identifier of the end user to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"administrator","name":"erase"},{"specification":"This operation retrieves a paginated and filtered list of developer users from the telegram_file_downloader_developers table in the Prisma schema. It supports advanced search parameters, including filters on email and registration dates, pagination controls, and sorting options. The response returns a paginated summary list of developers with essential information for management and monitoring. This endpoint is open to administrators for administrative visibility but also could be used for management tools. No path parameters are required. The request body structure conforms to ITelegramFileDownloaderDeveloper.IRequest type. The response returns paged summaries as IPageITelegramFileDownloaderDeveloper.ISummary.","path":"/telegramFileDownloader/administrator/developers","method":"patch","summary":"Search and retrieve list of developer users","description":"Retrieve a filtered and paginated list of developer users of the Telegram File Downloader service.\n\nThis operation allows administrators or authorized users to search developers by multiple criteria such as email, registration date ranges, and account status.\n\nIt supports pagination and sorting for efficient management.\n\nResponse includes summary information optimized for list display.\n\nOnly active and non-deleted developer users are included.\n\nNo path parameters are required.\n\nAuthorization roles: administrator.\n\nRequest body must specify search parameters, pagination, and sorting criteria.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for filtering developers","typeName":"ITelegramFileDownloaderDeveloper.IRequest"},"responseBody":{"description":"Paginated list of developer user summaries","typeName":"IPageITelegramFileDownloaderDeveloper.ISummary"},"authorizationType":null,"authorizationRole":"administrator","name":"index"},{"specification":"This operation retrieves detailed information of a specified developer user by their UUID from the telegram_file_downloader_developers table. The response includes all defined properties such as email, password hash, creation and update timestamps, and soft delete timestamp. The operation requires the developerId path parameter to identify the developer. This operation is restricted to administrator roles for management purposes. There is no request body, but the response body returns detailed developer information as ITelegramFileDownloaderDeveloper.","path":"/telegramFileDownloader/administrator/developers/{developerId}","method":"get","summary":"Retrieve a developer user by ID","description":"Retrieve detailed information for a specific developer user by their unique identifier.\n\nThis developer entity represents programmatic users accessing the Telegram File Downloader service via API.\n\nResponse includes all defined attributes except sensitive fields which would be handled securely.\n\nAuthorization restricted to administrators.\n\nThe GET request uses the developerId path parameter.\n\nNo request body is required, the response returns developer information.","parameters":[{"name":"developerId","description":"Unique identifier of the developer user to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed developer user information","typeName":"ITelegramFileDownloaderDeveloper"},"authorizationType":null,"authorizationRole":"administrator","name":"at"},{"specification":"This operation creates a new developer user in the telegram_file_downloader_developers table with the provided email and password hash. It registers the developer user capable of using the Telegram File Downloader API. The request body must supply the necessary creation fields encapsulated in ITelegramFileDownloaderDeveloper.ICreate type. The operation returns the newly created developer user entity upon success. The endpoint is restricted to administrators for security. No path parameters are required.","path":"/telegramFileDownloader/administrator/developers","method":"post","summary":"Create a new developer user","description":"Create a new developer user who can access the Telegram File Downloader API.\n\nThis operation requires administrative privileges.\n\nAll required fields must be provided in the request body, including email and password hash.\n\nOn success, the system returns the created developer user record.\n\nClients must securely handle password information.\n\nAuthorization roles: administrator.\n\nNo path parameters are required.\n\nRequest body includes required creation data.\n\nResponse body returns detailed developer information.","parameters":[],"requestBody":{"description":"Information required to create a developer user","typeName":"ITelegramFileDownloaderDeveloper.ICreate"},"responseBody":{"description":"Created developer user details","typeName":"ITelegramFileDownloaderDeveloper"},"authorizationType":null,"authorizationRole":"administrator","name":"create"},{"specification":"This operation updates the developer user's information corresponding to the developer_id path parameter in the telegram_file_downloader_developers table. It allows modification of the developer user's details such as email and password hash, and updates the updated_at timestamp accordingly. The operation requires proper authentication as a developer. Validation ensures the developer exists and the provided data meets the schema constraints. This API supports user-driven profile management by developers through secure update requests.","description":"Update an existing developer user's information in the Telegram File Downloader system. This operation modifies fields like email and password hash, ensuring the user's identity and credentials can be kept current.\n\nSecurity measures require authenticated developer users to invoke this API and enforce ownership checks to prevent unauthorized updates.\n\nThis operation directly updates the telegram_file_downloader_developers table, referencing fields id, email, password_hash, and updated_at. The updated_at timestamp records the last modification time.\n\nValidation includes checking unique email constraints to avoid duplications, ensuring email format correctness, and securely hashing passwords taken in update payloads.\n\nAssociated logs in telegram_file_downloader_audit_logs may be generated asynchronously to audit profile changes.\n\nError handling covers cases where the developer user is not found or invalid data is submitted.\n\nSuccessful updates return the updated developer user entity.","summary":"Update developer user information by developer ID","parameters":[{"name":"developerId","description":"Unique identifier of the developer user to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update payload for developer user","typeName":"ITelegramFileDownloaderDeveloper.IUpdate"},"responseBody":{"description":"Updated developer user information","typeName":"ITelegramFileDownloaderDeveloper"},"authorizationRoles":["developer"],"path":"/telegramFileDownloader/developer/developers/{developerId}","method":"put","name":"update","authorizationRole":"developer","authorizationType":null},{"specification":"This operation permanently removes a developer user's record from the telegram_file_downloader_developers table using the developerId path parameter. It performs a hard delete removing the user and all related data such as download jobs and storage usages due to defined cascade on delete relations. This action is authorized for developer roles only and requires authentication and ownership verification. It is critical to understand that soft deletion is implemented via the deleted_at field; however, this endpoint performs an actual deletion of the record from the database.","description":"Delete a developer user identified by developerId from the Telegram File Downloader system. This operation permanently removes the developer user and cascades deletion to related records.\n\nOnly authenticated developers with appropriate permissions should invoke this endpoint.\n\nCareful validation must confirm that the developer exists before deletion.\n\nOnce deleted, the operation cannot be undone. Clients should consider backup or archive strategies before initiating this action.\n\nThis operation directly deletes the record from the telegram_file_downloader_developers table and all associated relations configured to cascade delete.\n\nThe operation returns no response body upon success.","summary":"Delete developer user by developer ID","parameters":[{"name":"developerId","description":"Unique identifier of the developer user to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["developer"],"path":"/telegramFileDownloader/developer/developers/{developerId}","method":"delete","name":"erase","authorizationRole":"developer","authorizationType":null},{"specification":"Retrieve a filtered and paginated list of administrator users from the telegram_file_downloader_administrators table. This operation supports searching and sorting administrators to facilitate management and monitoring in the admin panel. Typical filters include email, creation date range, and status. Pagination options control page size and number, and sorting can be applied on relevant fields. Authentication as administrator is required to access this data securely.","description":"Retrieve a filtered, paginated list of administrators in the Telegram File Downloader system. This API supports advanced filtering and sorting options to enable efficient monitoring and management of administrative users.\n\nThe administrators data comes from the telegram_file_downloader_administrators table, including fields like id, email, created_at, and updated_at.\n\nSecurity enforces that only authenticated administrators can perform this action, with rate limiting and audit logging applied.\n\nPagination ensures scalable response sizes and sorting facilitates meaningful data ordering.\n\nResponse contains a paginated set of administrator records, suitable for listing views in the admin dashboard.","summary":"Search and retrieve a filtered, paginated list of administrators","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for administrators","typeName":"ITelegramFileDownloaderAdministrator.IRequest"},"responseBody":{"description":"Paginated list of administrator information","typeName":"IPageITelegramFileDownloaderAdministrator"},"authorizationRoles":["administrator"],"path":"/telegramFileDownloader/administrator/administrators","method":"patch","name":"index","authorizationRole":"administrator","authorizationType":null},{"specification":"Retrieve detailed information of a single administrator user identified by the administratorId path parameter from the telegram_file_downloader_administrators table. This operation returns comprehensive administrator profile data for management and auditing purposes. Only authenticated administrators may access this endpoint. If the specified administrator does not exist, an appropriate error is returned.","description":"Retrieve detailed information of a specific administrator user by administrator ID in the Telegram File Downloader system.\n\nThis operation fetches data from the telegram_file_downloader_administrators table including id, email, created_at, updated_at, and any relevant profile attributes.\n\nAccess is restricted to authenticated administrators with proper authorization.\n\nRequests for non-existing administrators must return meaningful error messages.\n\nThe response provides complete data suitable for admin profile inspection and management.","summary":"Get administrator user details by administrator ID","parameters":[{"name":"administratorId","description":"Unique identifier of the administrator user to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed administrator user information","typeName":"ITelegramFileDownloaderAdministrator"},"authorizationRoles":["administrator"],"path":"/telegramFileDownloader/administrator/administrators/{administratorId}","method":"get","name":"at","authorizationRole":"administrator","authorizationType":null},{"specification":"This operation allows the creation of a new administrator record in the Telegram File Downloader system, storing essential details such as email and password hash to enable authentication and access to administrative features. It corresponds to the telegram_file_downloader_administrators table in the Prisma schema, ensuring that each administrator has a unique email for identification and maintaining timestamps for record creation and updates. This operation is critical for managing administrator users who are responsible for overseeing subscriptions, payment statuses, and system logs. Input validation, including email uniqueness, should be enforced. The password hash stored must be securely generated. The operation returns the created administrator entity according to the schema.","description":"Create a new administrator user with a unique email and secure password hash. This operation ensures that the administrator can authenticate and access protected system areas for user and subscription management.\n\nThe operation is mapped to the telegram_file_downloader_administrators table, which includes fields for email, password_hash, and auditing timestamps.\n\nSecurity considerations include ensuring email uniqueness and hashing the password before storage. The administrator record maintains created_at and updated_at timestamps automatically.\n\nIf the email already exists, the operation must fail gracefully with a conflict error indicating duplication.\n\nSuccessful creation returns the full administrator details excluding sensitive data such as raw passwords.","summary":"Create a new administrator user account","parameters":[],"requestBody":{"description":"Administrator creation data including email and password hash","typeName":"ITelegramFileDownloaderAdministrators.ICreate"},"responseBody":{"description":"Newly created administrator user details","typeName":"ITelegramFileDownloaderAdministrators"},"authorizationType":null,"authorizationRole":"administrator","path":"/telegramFileDownloader/administrator/administrators","method":"post","name":"create"},{"specification":"This operation updates an existing administrator user identified by administratorId. It allows modification of permissible fields such as email and password hash while maintaining data integrity. The operation corresponds to the telegram_file_downloader_administrators table and enforces unique email constraints. Audit timestamps are updated to reflect the change.\n\nProper authorization (administrator role) is required to ensure only privileged users can modify administrator records.\n\nInput validation must confirm existence of the target administrator and validity of email formats and password hash security.\n\nReturns the updated administrator entity on success.","description":"Update administrator user details, including email and password hash, for the specified administratorId. This operation supports auditing via updated_at timestamp.\n\nMapped to the telegram_file_downloader_administrators table, the update ensures unique email and preserves data consistency.\n\nFailed updates due to email conflicts or missing administrator record must be handled with appropriate errors.\n\nReturns the updated administrator user details on success.","summary":"Update details of an existing administrator user","parameters":[{"name":"administratorId","description":"Unique identifier of the target administrator user","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Administrator update data","typeName":"ITelegramFileDownloaderAdministrators.IUpdate"},"responseBody":{"description":"Updated administrator user details","typeName":"ITelegramFileDownloaderAdministrators"},"authorizationType":null,"authorizationRole":"administrator","path":"/telegramFileDownloader/administrator/administrators/{administratorId}","method":"put","name":"update"},{"specification":"This operation permanently deletes an existing administrator user identified by administratorId from the Telegram File Downloader system. Since the schema includes a deleted_at field for soft deletion, this operation performs a hard delete, permanently removing the record from the database.\n\nOnly authorized users with administrator role can perform this deletion, ensuring system security.\n\nDeleting an administrator will revoke their access and affect audits related to user management.\n\nThe operation does not return a response body.","description":"Permanently remove an administrator user by their unique identifier. This action is irreversible and ensures the user can no longer authenticate as an administrator.\n\nPerform a hard delete on the telegram_file_downloader_administrators record corresponding to administratorId.\n\nAppropriate authorization and audit trails should be maintained at the system level.\n\nNo response body is returned upon successful deletion.","summary":"Delete an administrator user permanently","parameters":[{"name":"administratorId","description":"Unique identifier of the target administrator user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"administrator","path":"/telegramFileDownloader/administrator/administrators/{administratorId}","method":"delete","name":"erase"},{"specification":"This operation retrieves a filtered and paginated list of download job requests submitted by end users or developers. It supports complex queries including filtering by status, date ranges, channel IDs, and file type filters, as well as pagination and sorting.\n\nThe operation corresponds to the telegram_file_downloader_download_jobs table in the Prisma schema. It enables system administrators or authorized users to monitor download job activity and status.\n\nAuthorization is required, typically restricted to administrators or roles allowed to view job statuses.\n\nThe request body includes search parameters such as status, date ranges, channel ID, and pagination controls. The response body returns a paginated list of download job summaries per request.","description":"Search and retrieve a paginated list of download job requests with filtering by status, date ranges, channel, and file types. This list supports monitoring active and historical download jobs.\n\nMapped to telegram_file_downloader_download_jobs table, this operation provides visibility into system usage and job processing status.\n\nAuthorization restricts access to privileged roles.\n\nReturns paginated, summarized download job records matching the search criteria.","summary":"Retrieve paginated list of download job requests with filters","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for download job filtering","typeName":"ITelegramFileDownloaderDownloadJobs.IRequest"},"responseBody":{"description":"Paginated download job summaries matching search criteria","typeName":"IPageITelegramFileDownloaderDownloadJobs.ISummary"},"authorizationType":null,"authorizationRole":"administrator","path":"/telegramFileDownloader/administrator/download-jobs","method":"patch","name":"index"},{"specification":"This operation retrieves detailed information of a single download job by its unique identifier from the telegram_file_downloader_download_jobs table. It allows authenticated end users or developers to access the status and parameters of their download job, including channel ID, filter file types, date ranges, and current job status, as recorded with audit timestamps. Soft deletion is supported, so jobs previously deleted will not be returned.","description":"Retrieve a specific download job record identified by its unique UUID from the telegram_file_downloader_download_jobs table.\n\nThis operation is designed to allow authenticated end users or developers to view the current status and details of their file download requests. It returns all relevant metadata, such as the targeted Telegram channel/group ID, requested file type filters, inclusive date ranges, and job processing status.\n\nSecurity considerations include ensuring the requesting user is authorized to view this specific job, i.e., the job belongs to the user either as an end user or developer.\n\nThe underlying database table supports soft deletion via the deleted_at timestamp; this operation excludes logically deleted records.\n\nValidation involves verifying the UUID format for the job ID path parameter.\n\nNo request body is required.\n\nRelated operations include creating new download jobs via POST /download-jobs and updating them via PUT /download-jobs/{id}.\n\nIf the job does not exist or user is unauthorized, the response should indicate the error appropriately.","summary":"Retrieve a specific download job by its unique ID.","parameters":[{"name":"id","description":"Unique identifier of the download job (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the download job","typeName":"ITelegramFileDownloaderDownloadJob"},"authorizationRoles":["endUser","developer"],"name":"at","path":"/telegramFileDownloader/endUser/download-jobs/{id}","method":"get","authorizationRole":"endUser","authorizationType":null},{"specification":"This operation retrieves detailed information of a single download job by its unique identifier from the telegram_file_downloader_download_jobs table. It allows authenticated end users or developers to access the status and parameters of their download job, including channel ID, filter file types, date ranges, and current job status, as recorded with audit timestamps. Soft deletion is supported, so jobs previously deleted will not be returned.","description":"Retrieve a specific download job record identified by its unique UUID from the telegram_file_downloader_download_jobs table.\n\nThis operation is designed to allow authenticated end users or developers to view the current status and details of their file download requests. It returns all relevant metadata, such as the targeted Telegram channel/group ID, requested file type filters, inclusive date ranges, and job processing status.\n\nSecurity considerations include ensuring the requesting user is authorized to view this specific job, i.e., the job belongs to the user either as an end user or developer.\n\nThe underlying database table supports soft deletion via the deleted_at timestamp; this operation excludes logically deleted records.\n\nValidation involves verifying the UUID format for the job ID path parameter.\n\nNo request body is required.\n\nRelated operations include creating new download jobs via POST /download-jobs and updating them via PUT /download-jobs/{id}.\n\nIf the job does not exist or user is unauthorized, the response should indicate the error appropriately.","summary":"Retrieve a specific download job by its unique ID.","parameters":[{"name":"id","description":"Unique identifier of the download job (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the download job","typeName":"ITelegramFileDownloaderDownloadJob"},"authorizationRoles":["endUser","developer"],"name":"at","path":"/telegramFileDownloader/developer/download-jobs/{id}","method":"get","authorizationRole":"developer","authorizationType":null},{"specification":"This operation allows an authenticated user (end user or developer) to submit a new download job request to the telegram_file_downloader_download_jobs table. The request body must specify the Telegram channel/group ID, optional file type filters, and optional inclusive date range parameters for filtering downloaded files. The system enforces subscription quotas and validates parameters before enqueueing the download job and returning the created record with status.","description":"Create a new download job request that specifies the Telegram channel or group ID for file downloads.\n\nThe request supports optional filtering by comma-separated file types (e.g., mp4, zip, jpg, pdf) and optional date range filtering (start and end inclusive).\n\nThe system validates that only one channel/group ID is provided and that the user (end user or developer) has sufficient subscription quota to process the request.\n\nUpon successful validation, the job is created and persisted, and its status is initially set (e.g., 'pending').\n\nThe operation returns the full created download job record, including its generated UUID and audit timestamps.\n\nThis endpoint supports usage by both end users and developers authenticated via JWT tokens.\n\nAuthorization and quota checks are responsibilities of the business logic beyond this API specification.\n\nRelated operations include GET /download-jobs/{id} to check job status and PUT /download-jobs/{id} to update jobs.\n\nNo direct deletion is supported via this endpoint.\n\nRequest body schema requires:\n- channelId: string (Telegram channel or group identifier)\n- fileTypes: optional string (comma-separated file extensions)\n- dateStart: optional date-time (start of date range, inclusive)\n- dateEnd: optional date-time (end of date range, inclusive)","summary":"Create a new download job request for a Telegram channel with optional filters.","parameters":[],"requestBody":{"description":"Download job creation information including channel ID and optional filters","typeName":"ITelegramFileDownloaderDownloadJob.ICreate"},"responseBody":{"description":"Created download job information","typeName":"ITelegramFileDownloaderDownloadJob"},"authorizationRoles":["endUser","developer"],"name":"create","path":"/telegramFileDownloader/endUser/download-jobs","method":"post","authorizationRole":"endUser","authorizationType":null},{"specification":"This operation allows an authenticated user (end user or developer) to submit a new download job request to the telegram_file_downloader_download_jobs table. The request body must specify the Telegram channel/group ID, optional file type filters, and optional inclusive date range parameters for filtering downloaded files. The system enforces subscription quotas and validates parameters before enqueueing the download job and returning the created record with status.","description":"Create a new download job request that specifies the Telegram channel or group ID for file downloads.\n\nThe request supports optional filtering by comma-separated file types (e.g., mp4, zip, jpg, pdf) and optional date range filtering (start and end inclusive).\n\nThe system validates that only one channel/group ID is provided and that the user (end user or developer) has sufficient subscription quota to process the request.\n\nUpon successful validation, the job is created and persisted, and its status is initially set (e.g., 'pending').\n\nThe operation returns the full created download job record, including its generated UUID and audit timestamps.\n\nThis endpoint supports usage by both end users and developers authenticated via JWT tokens.\n\nAuthorization and quota checks are responsibilities of the business logic beyond this API specification.\n\nRelated operations include GET /download-jobs/{id} to check job status and PUT /download-jobs/{id} to update jobs.\n\nNo direct deletion is supported via this endpoint.\n\nRequest body schema requires:\n- channelId: string (Telegram channel or group identifier)\n- fileTypes: optional string (comma-separated file extensions)\n- dateStart: optional date-time (start of date range, inclusive)\n- dateEnd: optional date-time (end of date range, inclusive)","summary":"Create a new download job request for a Telegram channel with optional filters.","parameters":[],"requestBody":{"description":"Download job creation information including channel ID and optional filters","typeName":"ITelegramFileDownloaderDownloadJob.ICreate"},"responseBody":{"description":"Created download job information","typeName":"ITelegramFileDownloaderDownloadJob"},"authorizationRoles":["endUser","developer"],"name":"create","path":"/telegramFileDownloader/developer/download-jobs","method":"post","authorizationRole":"developer","authorizationType":null},{"specification":"This operation updates an existing download job identified by its unique ID in the telegram_file_downloader_download_jobs table. It allows the user to modify mutable properties of the job such as the file type filters, date ranges, or status, while preserving audit and identification fields. The update is allowed only if the job has not been completed or deleted.\n\nSecurity checks must ensure the user owns the job or has appropriate developer access.\n\nRequest body schema follows ITelegramFileDownloaderDownloadJob.IUpdate for partial or complete update of mutable fields.\n\nThe operation returns the updated download job record after successful modification.\n\nRelated operations include creation (POST /download-jobs) and retrieval (GET /download-jobs/{id}).\n\nSoft deleted jobs cannot be updated.\n\nThe primary key ID is a path parameter and must be validated as a UUID.","description":"Update an existing download job which includes editable properties such as file filters, date ranges, and status.\n\nThis operation ensures only authorized users (end users or developers) can change their own download jobs that are not completed or deleted.\n\nValidation includes:\n- Valid UUID for path parameter\n- Request body conforms to the update DTO\n- Job existence and ownership\n\nReturns the full updated download job entity.\n\nSoft-deleted jobs are excluded.\n\nIf business rules prohibit updates (e.g., completed job), appropriate error response must be returned.\n\nRelated operations include job creation (POST /download-jobs) and retrieval (GET /download-jobs/{id}).","summary":"Update an existing download job by ID with new data.","parameters":[{"name":"id","description":"Unique identifier of the download job to update (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Download job update information","typeName":"ITelegramFileDownloaderDownloadJob.IUpdate"},"responseBody":{"description":"Updated download job information","typeName":"ITelegramFileDownloaderDownloadJob"},"authorizationRoles":["endUser","developer"],"name":"update","path":"/telegramFileDownloader/endUser/download-jobs/{id}","method":"put","authorizationRole":"endUser","authorizationType":null},{"specification":"This operation updates an existing download job identified by its unique ID in the telegram_file_downloader_download_jobs table. It allows the user to modify mutable properties of the job such as the file type filters, date ranges, or status, while preserving audit and identification fields. The update is allowed only if the job has not been completed or deleted.\n\nSecurity checks must ensure the user owns the job or has appropriate developer access.\n\nRequest body schema follows ITelegramFileDownloaderDownloadJob.IUpdate for partial or complete update of mutable fields.\n\nThe operation returns the updated download job record after successful modification.\n\nRelated operations include creation (POST /download-jobs) and retrieval (GET /download-jobs/{id}).\n\nSoft deleted jobs cannot be updated.\n\nThe primary key ID is a path parameter and must be validated as a UUID.","description":"Update an existing download job which includes editable properties such as file filters, date ranges, and status.\n\nThis operation ensures only authorized users (end users or developers) can change their own download jobs that are not completed or deleted.\n\nValidation includes:\n- Valid UUID for path parameter\n- Request body conforms to the update DTO\n- Job existence and ownership\n\nReturns the full updated download job entity.\n\nSoft-deleted jobs are excluded.\n\nIf business rules prohibit updates (e.g., completed job), appropriate error response must be returned.\n\nRelated operations include job creation (POST /download-jobs) and retrieval (GET /download-jobs/{id}).","summary":"Update an existing download job by ID with new data.","parameters":[{"name":"id","description":"Unique identifier of the download job to update (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Download job update information","typeName":"ITelegramFileDownloaderDownloadJob.IUpdate"},"responseBody":{"description":"Updated download job information","typeName":"ITelegramFileDownloaderDownloadJob"},"authorizationRoles":["endUser","developer"],"name":"update","path":"/telegramFileDownloader/developer/download-jobs/{id}","method":"put","authorizationRole":"developer","authorizationType":null},{"specification":"This operation permanently deletes a download job from the telegram_file_downloader_download_jobs table by its unique ID. As the table supports soft deletion with a deleted_at timestamp, this operation performs a hard deletion, removing the record and all dependent records such as associated files and job queue entries.\n\nOnly authorized users (end users or developers) are allowed to delete their own download jobs unless the system defines administrative overrides.\n\nThe path parameter id must be a valid UUID matching the target download job.\n\nNo request body or response body is returned.\n\nRelated operations include creation (POST /download-jobs), retrieval (GET /download-jobs/{id}), and updates (PUT /download-jobs/{id}).","description":"Delete a download job permanently by ID, including all associated data.\n\nThis operation performs a hard deletion that removes the job, its files, and any job queue entries.\n\nOnly the job owner (end user or developer) may delete their download jobs.\n\nThe system ensures referential integrity through cascading deletes.\n\nPath parameter validation requires the download job ID to be a UUID.\n\nNo data is returned upon success.\n\nRelated operations include job creation and status checks.","summary":"Permanently delete a download job by its unique ID.","parameters":[{"name":"id","description":"Unique identifier of the download job to delete (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["endUser","developer"],"name":"erase","path":"/telegramFileDownloader/endUser/download-jobs/{id}","method":"delete","authorizationRole":"endUser","authorizationType":null},{"specification":"This operation permanently deletes a download job from the telegram_file_downloader_download_jobs table by its unique ID. As the table supports soft deletion with a deleted_at timestamp, this operation performs a hard deletion, removing the record and all dependent records such as associated files and job queue entries.\n\nOnly authorized users (end users or developers) are allowed to delete their own download jobs unless the system defines administrative overrides.\n\nThe path parameter id must be a valid UUID matching the target download job.\n\nNo request body or response body is returned.\n\nRelated operations include creation (POST /download-jobs), retrieval (GET /download-jobs/{id}), and updates (PUT /download-jobs/{id}).","description":"Delete a download job permanently by ID, including all associated data.\n\nThis operation performs a hard deletion that removes the job, its files, and any job queue entries.\n\nOnly the job owner (end user or developer) may delete their download jobs.\n\nThe system ensures referential integrity through cascading deletes.\n\nPath parameter validation requires the download job ID to be a UUID.\n\nNo data is returned upon success.\n\nRelated operations include job creation and status checks.","summary":"Permanently delete a download job by its unique ID.","parameters":[{"name":"id","description":"Unique identifier of the download job to delete (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["endUser","developer"],"name":"erase","path":"/telegramFileDownloader/developer/download-jobs/{id}","method":"delete","authorizationRole":"developer","authorizationType":null},{"specification":"This operation retrieves a paginated list of file entities associated with a specific download job, enabling clients to view files downloaded from a Telegram channel or group. It operates on the telegram_file_downloader_files table, which stores metadata such as filename, file extension, size, and signed URL to the file stored on AWS S3. This endpoint allows filtering, sorting, and pagination to efficiently browse the collection of files linked to a particular download job by job ID.","description":"Retrieve a paginated list of files corresponding to a given download job. The download job represents a user- or developer-initiated request to download files from a specified Telegram channel or group with optional filtering criteria.\n\nThe operation requires specifying the download job's unique identifier in the URL path. It returns file metadata including filename, file type, file size in bytes, and signed AWS S3 URLs for secure, temporary access.\n\nSecurity considerations include authorization checks ensuring only users owning the download job (end users or developers) can access corresponding files. Pagination and sorting capabilities optimize responses for clients displaying large file lists.\n\nThis operation reads from the telegram_file_downloader_files table in the FileManagement namespace according to the Prisma schema. No data modification occurs.\n\nClients should use this endpoint in conjunction with download job status endpoints to display file download progress and completed files for a given user or developer.","summary":"List files associated with a specific download job","parameters":[{"name":"downloadJobId","description":"Unique identifier of the download job","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Pagination, filtering, and sorting parameters for retrieving files","typeName":"ITelegramFileDownloaderFiles.IRequest"},"responseBody":{"description":"Paginated list of file metadata matching the download job","typeName":"IPageITelegramFileDownloaderFiles"},"authorizationType":null,"authorizationRole":"endUser","name":"index","path":"/telegramFileDownloader/endUser/download-jobs/{downloadJobId}/files","method":"patch"},{"specification":"This operation retrieves a paginated list of file entities associated with a specific download job, enabling clients to view files downloaded from a Telegram channel or group. It operates on the telegram_file_downloader_files table, which stores metadata such as filename, file extension, size, and signed URL to the file stored on AWS S3. This endpoint allows filtering, sorting, and pagination to efficiently browse the collection of files linked to a particular download job by job ID.","description":"Retrieve a paginated list of files corresponding to a given download job. The download job represents a user- or developer-initiated request to download files from a specified Telegram channel or group with optional filtering criteria.\n\nThe operation requires specifying the download job's unique identifier in the URL path. It returns file metadata including filename, file type, file size in bytes, and signed AWS S3 URLs for secure, temporary access.\n\nSecurity considerations include authorization checks ensuring only users owning the download job (end users or developers) can access corresponding files. Pagination and sorting capabilities optimize responses for clients displaying large file lists.\n\nThis operation reads from the telegram_file_downloader_files table in the FileManagement namespace according to the Prisma schema. No data modification occurs.\n\nClients should use this endpoint in conjunction with download job status endpoints to display file download progress and completed files for a given user or developer.","summary":"List files associated with a specific download job","parameters":[{"name":"downloadJobId","description":"Unique identifier of the download job","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Pagination, filtering, and sorting parameters for retrieving files","typeName":"ITelegramFileDownloaderFiles.IRequest"},"responseBody":{"description":"Paginated list of file metadata matching the download job","typeName":"IPageITelegramFileDownloaderFiles"},"authorizationType":null,"authorizationRole":"developer","name":"index","path":"/telegramFileDownloader/developer/download-jobs/{downloadJobId}/files","method":"patch"},{"specification":"This operation retrieves detailed metadata and access information for a specific file downloaded as part of a download job. It accesses the telegram_file_downloader_files table storing file name, extension, size, and signed URL for AWS S3 storage.\n\nThe client must specify both the download job ID and file ID to uniquely identify the target file resource.\n\nSecurity policies require that only the user (end user or developer) who owns the download job can access file details. The operation facilitates direct file inspections and is commonly used to fetch download links or file information.\n\nThe operation performs a read-only GET on telegram_file_downloader_files and returns the full file entity including all metadata fields.","description":"Retrieve detailed information about a specific file associated with a download job.\n\nThe file is identified by the download job ID and the unique file ID within that job. Returned data include filename, file extension, file size in bytes, and a signed URL granting temporary, authenticated access to the file stored on AWS S3.\n\nThis operation is read-only and requires authorization to ensure that only the file owner can access the file metadata and download link.\n\nThe response enables clients to display or offer downloads for individual files.","summary":"Get detailed info and signed URL for a specific file","parameters":[{"name":"downloadJobId","description":"Unique identifier of the download job","schema":{"type":"string","format":"uuid"}},{"name":"id","description":"Unique identifier of the specific file","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed file information with signed URL","typeName":"ITelegramFileDownloaderFiles"},"authorizationType":null,"authorizationRole":"endUser","name":"at","path":"/telegramFileDownloader/endUser/download-jobs/{downloadJobId}/files/{id}","method":"get"},{"specification":"This operation retrieves detailed metadata and access information for a specific file downloaded as part of a download job. It accesses the telegram_file_downloader_files table storing file name, extension, size, and signed URL for AWS S3 storage.\n\nThe client must specify both the download job ID and file ID to uniquely identify the target file resource.\n\nSecurity policies require that only the user (end user or developer) who owns the download job can access file details. The operation facilitates direct file inspections and is commonly used to fetch download links or file information.\n\nThe operation performs a read-only GET on telegram_file_downloader_files and returns the full file entity including all metadata fields.","description":"Retrieve detailed information about a specific file associated with a download job.\n\nThe file is identified by the download job ID and the unique file ID within that job. Returned data include filename, file extension, file size in bytes, and a signed URL granting temporary, authenticated access to the file stored on AWS S3.\n\nThis operation is read-only and requires authorization to ensure that only the file owner can access the file metadata and download link.\n\nThe response enables clients to display or offer downloads for individual files.","summary":"Get detailed info and signed URL for a specific file","parameters":[{"name":"downloadJobId","description":"Unique identifier of the download job","schema":{"type":"string","format":"uuid"}},{"name":"id","description":"Unique identifier of the specific file","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed file information with signed URL","typeName":"ITelegramFileDownloaderFiles"},"authorizationType":null,"authorizationRole":"developer","name":"at","path":"/telegramFileDownloader/developer/download-jobs/{downloadJobId}/files/{id}","method":"get"},{"specification":"This operation allows creation of a new file record associated with a given download job. It is typically used by backend processing components after successfully downloading, uploading to AWS S3, and generating signed URLs for files. The telegram_file_downloader_files table stores file metadata including filename, extension, size, and download URL.\n\nClients must specify the download job ID to associate the new file entity with the correct download job. The request body must contain the file metadata and URL information.\n\nThis create operation supports internal data synchronization and is protected by user authentication. Only authorized users or system components acting on behalf of users should invoke this operation.","description":"Create a new file record linked to a specific download job, storing file metadata and signed AWS S3 URL.\n\nClients provide filename, file extension, file size in bytes, and the signed URL for accessing the file. The new record links to the download job identified in the path.\n\nThis operation is generally intended for backend services updating file information post-download and upload.\n\nSecurity requires only authenticated users may create files relevant to their download jobs.","summary":"Add a new file record to a download job","parameters":[{"name":"downloadJobId","description":"Unique identifier of the download job","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"File creation data with filename, extension, size, and signed URL","typeName":"ITelegramFileDownloaderFiles.ICreate"},"responseBody":{"description":"Created file entity with metadata and URL","typeName":"ITelegramFileDownloaderFiles"},"authorizationType":null,"authorizationRole":"endUser","name":"create","path":"/telegramFileDownloader/endUser/download-jobs/{downloadJobId}/files","method":"post"},{"specification":"This operation allows creation of a new file record associated with a given download job. It is typically used by backend processing components after successfully downloading, uploading to AWS S3, and generating signed URLs for files. The telegram_file_downloader_files table stores file metadata including filename, extension, size, and download URL.\n\nClients must specify the download job ID to associate the new file entity with the correct download job. The request body must contain the file metadata and URL information.\n\nThis create operation supports internal data synchronization and is protected by user authentication. Only authorized users or system components acting on behalf of users should invoke this operation.","description":"Create a new file record linked to a specific download job, storing file metadata and signed AWS S3 URL.\n\nClients provide filename, file extension, file size in bytes, and the signed URL for accessing the file. The new record links to the download job identified in the path.\n\nThis operation is generally intended for backend services updating file information post-download and upload.\n\nSecurity requires only authenticated users may create files relevant to their download jobs.","summary":"Add a new file record to a download job","parameters":[{"name":"downloadJobId","description":"Unique identifier of the download job","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"File creation data with filename, extension, size, and signed URL","typeName":"ITelegramFileDownloaderFiles.ICreate"},"responseBody":{"description":"Created file entity with metadata and URL","typeName":"ITelegramFileDownloaderFiles"},"authorizationType":null,"authorizationRole":"developer","name":"create","path":"/telegramFileDownloader/developer/download-jobs/{downloadJobId}/files","method":"post"},{"specification":"This operation updates an existing file record linked to a download job, allowing modification of file metadata such as filename, extension, size, or signed URL. The telegram_file_downloader_files table stores these details.\n\nThe client must specify the download job ID and the file ID for correct identification of the record to update.\n\nThe update supports backend maintenance and corrections of file information. Proper authorization restricts updates to users owning the download job.\n\nThis operation performs an update on the telegram_file_downloader_files entity and returns the modified file details.","description":"Update metadata for an existing file associated with a download job.\n\nClients can modify filename, extension, file size, and the signed AWS S3 URL.\n\nThis operation requires download job ID and file ID path parameters to identify the target record.\n\nOnly authorized users associated with the download job may perform the update.\n\nResponse returns the updated file record.","summary":"Modify file metadata and signed URL for a download job file","parameters":[{"name":"downloadJobId","description":"Unique identifier of the download job","schema":{"type":"string","format":"uuid"}},{"name":"id","description":"Unique identifier of the file to modify","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"File update data - filename, extension, size, and signed URL","typeName":"ITelegramFileDownloaderFiles.IUpdate"},"responseBody":{"description":"Updated file metadata and URL","typeName":"ITelegramFileDownloaderFiles"},"authorizationType":null,"authorizationRole":"endUser","name":"update","path":"/telegramFileDownloader/endUser/download-jobs/{downloadJobId}/files/{id}","method":"put"},{"specification":"This operation updates an existing file record linked to a download job, allowing modification of file metadata such as filename, extension, size, or signed URL. The telegram_file_downloader_files table stores these details.\n\nThe client must specify the download job ID and the file ID for correct identification of the record to update.\n\nThe update supports backend maintenance and corrections of file information. Proper authorization restricts updates to users owning the download job.\n\nThis operation performs an update on the telegram_file_downloader_files entity and returns the modified file details.","description":"Update metadata for an existing file associated with a download job.\n\nClients can modify filename, extension, file size, and the signed AWS S3 URL.\n\nThis operation requires download job ID and file ID path parameters to identify the target record.\n\nOnly authorized users associated with the download job may perform the update.\n\nResponse returns the updated file record.","summary":"Modify file metadata and signed URL for a download job file","parameters":[{"name":"downloadJobId","description":"Unique identifier of the download job","schema":{"type":"string","format":"uuid"}},{"name":"id","description":"Unique identifier of the file to modify","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"File update data - filename, extension, size, and signed URL","typeName":"ITelegramFileDownloaderFiles.IUpdate"},"responseBody":{"description":"Updated file metadata and URL","typeName":"ITelegramFileDownloaderFiles"},"authorizationType":null,"authorizationRole":"developer","name":"update","path":"/telegramFileDownloader/developer/download-jobs/{downloadJobId}/files/{id}","method":"put"},{"specification":"This operation deletes a downloaded file record associated with a specific download job from the telegram_file_downloader_files table. The operation requires the unique UUID of both the download job and the file to identify the exact record to delete. This operation performs a hard delete to permanently remove the file record from the system. Only authorized administrators can access this endpoint due to its critical nature.","path":"/telegramFileDownloader/administrator/download-jobs/{downloadJobId}/files/{id}","method":"delete","summary":"Permanently delete a file associated with a download job","description":"Delete a downloaded file from the system by specifying the download job ID and file ID. This operation permanently removes the file record and associated metadata.\n\nAuthorization: Accessible only by administrator role.\n\nThe operation requires the downloadJobId and file id as path parameters, both UUID strings.\n\nNo request body or response body is returned.\n\nErrors include invalid UUID format or not found resources.\n\nThis operation ensures that deleted file data does not remain in the system.","parameters":[{"name":"downloadJobId","description":"UUID of the download job containing the file","schema":{"type":"string","format":"uuid"}},{"name":"id","description":"UUID of the file to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"administrator","name":"erase"},{"specification":"This operation retrieves a filtered and paginated list of storage usage records with support for complex filtering criteria. It queries the telegram_file_downloader_storage_usages table, allowing administrators to search and review storage usage stats such as storage bytes used, file count, and quota max bytes. The request body accepts search filters and pagination parameters (ITelegramFileDownloaderStorageUsage.IRequest) and the response provides paginated storage usage summaries.","path":"/telegramFileDownloader/administrator/storage-usages","method":"patch","summary":"Retrieve filtered paginated list of storage usages","description":"Retrieve a paginated and filtered list of storage usage records to monitor user and developer storage quotas.\n\nOnly administrators have access to this operation.\n\nSupports filtering by enduser or developer IDs, amount of storage used, and file counts within the request body.\n\nResponse includes pagination metadata and summarized storage usage records.\n\nError handling includes invalid query parameters and pagination issues.","parameters":[],"requestBody":{"description":"Filter and pagination parameters for storage usages","typeName":"ITelegramFileDownloaderStorageUsage.IRequest"},"responseBody":{"description":"Paginated storage usage summaries matching filters","typeName":"IPageITelegramFileDownloaderStorageUsage.ISummary"},"authorizationType":null,"authorizationRole":"administrator","name":"index"},{"specification":"This operation retrieves the details of a specific storage usage record by its UUID from the telegram_file_downloader_storage_usages table. It includes storage quota usage, file counts, and relates to the enduser or developer. Only administrators are permitted to perform this operation due to sensitive quota information.","path":"/telegramFileDownloader/administrator/storage-usages/{id}","method":"get","summary":"Get storage usage record details by ID","description":"Get detailed information about a storage usage record via its unique identifier.\n\nAccessible only to administrators.\n\nIncludes storage bytes used and quota maximum.\n\nErrors handled include invalid identifier format and record not found.","parameters":[{"name":"id","description":"UUID of the storage usage record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed storage usage record","typeName":"ITelegramFileDownloaderStorageUsage"},"authorizationType":null,"authorizationRole":"administrator","name":"at"},{"specification":"This operation creates a new storage usage record in the telegram_file_downloader_storage_usages table to track storage consumption and quotas for a user (either enduser or developer). It requires a request body with storage usage details and returns the created record. Unauthorized roles cannot perform this action.","path":"/telegramFileDownloader/administrator/storage-usages","method":"post","summary":"Create new storage usage record","description":"Create a new storage usage record with detailed metrics including storage bytes used and quota maximum bytes. The request body must supply all necessary information as per ITelegramFileDownloaderStorageUsage.ICreate.\n\nAccessible only by administrators.\n\nThe response returns the created storage usage entity.\n\nHandles errors for duplicate or invalid entries.","parameters":[],"requestBody":{"description":"Storage usage creation payload","typeName":"ITelegramFileDownloaderStorageUsage.ICreate"},"responseBody":{"description":"Created storage usage record","typeName":"ITelegramFileDownloaderStorageUsage"},"authorizationType":null,"authorizationRole":"administrator","name":"create"},{"specification":"This operation updates a storage usage record in the telegram_file_downloader_storage_usages table. It allows modifying the storage usage details such as the number of bytes used, file count, and the maximum storage quota allowed for a specific user (either enduser or developer). The storage usage record is identified by its UUID. The update does not allow changing the primary ID but only other mutable fields, and timestamps will be updated accordingly. It ensures that the storage usage data remains accurate and reflects the current usage for quota enforcement.","description":"Update an existing storage usage record identified by its unique ID. This operation is intended for managing and correcting usage statistics such as storage bytes used and file count for the specific user. The storage usage applies to both endusers and developers, identified by their user IDs. Timestamps for updates are maintained by the system. This endpoint requires authentication and appropriate authorization to modify user storage data. Soft delete behavior is respected: records marked as deleted are excluded from update operations.\n\nThe telegram_file_downloader_storage_usages table stores crucial quota enforcement data, enabling monitoring and control of user storage consumption against subscription plan limits. Accurate updates ensure users do not exceed quota limits and maintain consistent billing and service quality.\n\nThis update operation complements listing and querying operations that retrieve current storage usage data for monitoring and reporting.\n\nUsers of this API must have proper authorization depending on administrative or user roles to avoid unauthorized modifications.\n","summary":"Update storage usage record","parameters":[{"name":"id","description":"Unique identifier of the storage usage record to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Storage usage update information","typeName":"ITelegramFileDownloaderStorageUsage.IUpdate"},"responseBody":{"description":"Updated storage usage record","typeName":"ITelegramFileDownloaderStorageUsage"},"authorizationType":null,"authorizationRole":"administrator","name":"updateStorageUsage","path":"/telegramFileDownloader/administrator/storage-usages/{id}","method":"put"},{"specification":"This operation deletes a storage usage record identified by its UUID from the telegram_file_downloader_storage_usages table. The deletion is permanent and removes usage data associated with endusers or developers. This operation requires appropriate admin authorization to prevent unauthorized deletion of quota tracking data. The table does not specify soft delete behavior explicitly, so this operation performs a hard delete removing the record completely from the database.","description":"Permanently delete a storage usage record by its unique ID. This operation removes the quota tracking data for the specified user (enduser or developer) and should be used carefully to avoid accidental data loss affecting billing and quota enforcement.\n\nSince the schema does not explicitly specify soft delete for this entity, deletion is permanent and irreversible.\n\nProper authorization is required, typically limited to administrators, to avoid unauthorized removals that could impact service monitoring.\n\nThis deletion complements update and list operations managing storage usage data.\n","summary":"Delete storage usage record","parameters":[{"name":"id","description":"Unique identifier of the storage usage record to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"administrator","name":"eraseStorageUsage","path":"/telegramFileDownloader/administrator/storage-usages/{id}","method":"delete"},{"specification":"Retrieve a paginated and searchable list of download job statuses from the telegram_file_downloader_download_job_statuses table. The endpoint supports filtering and pagination parameters to obtain subsets of the available statuses. It returns a list of status codes each with a description representing different states a download job can be in, such as pending, in_progress, completed, or failed.\n\nThis operation is read-only and publicly accessible, does not require authentication, providing essential reference data for client applications to interpret job statuses.","description":"Retrieve a paginated list of download job statuses. These statuses represent the various states possible in the download job lifecycle, crucial for frontend and API clients to provide status context to users.\n\nThe telegram_file_downloader_download_job_statuses table stores unique status codes with human-readable descriptions for clarity. This endpoint supports filtering and pagination to efficiently handle large numbers of statuses if needed.\n\nBecause this is a reference lookup, the endpoint is public and does not require user authentication.\n\nThis operation complements other download job management API endpoints that return or utilize these status codes.","summary":"List download job statuses with pagination and filters","parameters":[],"requestBody":{"description":"Filtering and pagination parameters for download job statuses","typeName":"ITelegramFileDownloaderDownloadJobStatus.IRequest"},"responseBody":{"description":"Paginated list of download job statuses matching criteria","typeName":"IPageITelegramFileDownloaderDownloadJobStatus"},"authorizationType":null,"authorizationRole":null,"name":"indexDownloadJobStatuses","path":"/telegramFileDownloader/download-job-statuses","method":"patch"},{"specification":"Retrieve detailed information of a single download job status entry from the telegram_file_downloader_download_job_statuses table by its unique ID. Provides the status code and associated description representing a specific job state such as pending, completed, or failed.\n\nThis operation is a simple lookup to support user interfaces and API clients that need to translate status IDs to meaningful descriptions. It is a read-only operation with no modification capability.\n\nAccess is public and does not require authentication since this is reference data needed commonly by many users and clients.","description":"Get detailed information about a download job status by its unique identifier. This includes the status code and the description clarifying the meaning of the status.\n\nThe telegram_file_downloader_download_job_statuses table uniquely identifies statuses with UUIDs and includes descriptions to support UI display and client logic.\n\nThis endpoint enables applications to fetch details for a known status ID, useful for detailed views or logs.\n\nBeing reference data, no authorization is required for this endpoint.\n","summary":"Retrieve detailed download job status by ID","parameters":[{"name":"id","description":"Unique identifier of the download job status record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Download job status record","typeName":"ITelegramFileDownloaderDownloadJobStatus"},"authorizationType":null,"authorizationRole":null,"name":"atDownloadJobStatus","path":"/telegramFileDownloader/download-job-statuses/{id}","method":"get"},{"specification":"This operation retrieves a paginated list of subscription plans available in the Telegram File Downloader system. It allows clients to filter, search, and paginate over active or inactive subscription plans, returning plan details such as pricing, file limits, and storage quotas. It operates on the telegram_file_downloader_subscription_plans table defined in the Prisma schema, which stores metadata and business context for all subscription plans in the system. The operation supports advanced queries to enable flexible plan discovery and selection.","path":"/telegramFileDownloader/endUser/subscription/plans","method":"patch","summary":"Search and retrieve a filtered, paginated list of subscription plans","description":"Retrieve a filtered and paginated list of subscription plans from the system. This operation supports advanced search and filtering by plan code, name, status, price range, and other relevant fields.\n\nSecurity considerations include limiting access to authenticated users or administrators to prevent data leakage of subscription pricing models.\n\nThe response includes detailed information about each subscription plan, including maximum allowed files per day, max file size in MB, total storage in MB, price, and status.\n\nThis operation queries the telegram_file_downloader_subscription_plans table from the Prisma schema, which stores all subscription plan metadata and business rules.\n\nClients can use this endpoint to display subscription options or perform administrative plan management functions.\n\nErrors related to invalid filtering criteria or pagination parameters will result in appropriate HTTP 400 responses with error details.\n","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for filtering subscription plans","typeName":"ITelegramFileDownloaderSubscriptionPlans.IRequest"},"responseBody":{"description":"Paginated list of subscription plans matching the search criteria","typeName":"IPageITelegramFileDownloaderSubscriptionPlans"},"authorizationType":null,"authorizationRole":"endUser","name":"index"},{"specification":"This operation retrieves detailed information about a specific subscription plan using its unique ID. The subscription plan metadata includes pricing, file count limits, file size limits, storage quota, and status. It operates on the telegram_file_downloader_subscription_plans table from the Prisma schema. This endpoint is critical for displaying full details of a subscription plan, for example on plan detail pages or administrative management screens.","path":"/telegramFileDownloader/endUser/subscription/plans/{id}","method":"get","summary":"Retrieve detailed subscription plan information by ID","description":"Retrieve detailed information for one subscription plan identified by its unique ID.\n\nThe subscription plan information covers pricing details, allowed file counts per day, maximum file size, total storage quota, and plan status.\n\nSecurity is critical to ensure only authorized users or administrators can access detailed subscription plan metadata.\n\nThis endpoint queries the telegram_file_downloader_subscription_plans table in the Prisma schema and returns a single plan record matching the provided ID.\n\nIf the subscription plan ID does not exist, the endpoint returns an HTTP 404 Not Found error.\n","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique ID of the subscription plan"}],"requestBody":null,"responseBody":{"description":"Detailed subscription plan information","typeName":"ITelegramFileDownloaderSubscriptionPlans"},"authorizationType":null,"authorizationRole":"endUser","name":"at"},{"specification":"This operation creates a new subscription plan in the Telegram File Downloader system. It accepts metadata such as plan code, name, price, maximum file download counts, file size limits, total storage quotas, and status. The operation persists this information to the telegram_file_downloader_subscription_plans table defined in the Prisma schema. Validation ensures the uniqueness of plan code and the correctness of numeric limits. Only authorized administrators may perform this operation.","path":"/telegramFileDownloader/administrator/subscription/plans","method":"post","summary":"Create a new subscription plan","description":"Create a new subscription plan with detailed properties including code, name, pricing, file counts, size limits, quotas, and active status.\n\nSecurity checks must enforce only administrators are allowed to create plans.\n\nThis operation inserts a new record into the telegram_file_downloader_subscription_plans table in the Prisma schema.\n\nValidation errors such as duplicate plan codes or invalid numeric values will result in HTTP 400 Bad Request responses with error details.\n\nUpon successful creation, the newly created subscription plan record is returned.\n","parameters":[],"requestBody":{"description":"Subscription plan creation payload including code, name, pricing, limits, and status","typeName":"ITelegramFileDownloaderSubscriptionPlans.ICreate"},"responseBody":{"description":"The created subscription plan","typeName":"ITelegramFileDownloaderSubscriptionPlans"},"authorizationType":null,"authorizationRole":"administrator","name":"create"},{"specification":"This operation updates an existing subscription plan identified by its unique ID. It allows modification of properties such as plan code, name, price, max files per day, max file size, storage quota, and status. The operation performs validation against business rules and persists changes to the telegram_file_downloader_subscription_plans table in the Prisma schema. Access is restricted to authorized administrators only.","path":"/telegramFileDownloader/administrator/subscription/plans/{id}","method":"put","summary":"Update an existing subscription plan by ID","description":"Update properties of an existing subscription plan by its unique ID.\n\nIncludes updating code, name, pricing, download limits, file size limits, total storage, and the plan's active/inactive status.\n\nThe operation validates input for correctness and uniqueness as per business rules.\n\nOnly administrators may execute this update.\n\nThe database record in telegram_file_downloader_subscription_plans is updated accordingly.\n\nIf the plan ID does not exist, the operation returns HTTP 404 Not Found.\n\nValidation failures result in HTTP 400 Bad Request with descriptive error messages.\n","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique ID of the subscription plan to update"}],"requestBody":{"description":"Subscription plan update payload with properties to modify","typeName":"ITelegramFileDownloaderSubscriptionPlans.IUpdate"},"responseBody":{"description":"The updated subscription plan record","typeName":"ITelegramFileDownloaderSubscriptionPlans"},"authorizationType":null,"authorizationRole":"administrator","name":"update"},{"specification":"This operation permanently deletes a specific subscription plan identified by its unique ID. It corresponds to the telegram_file_downloader_subscription_plans table in the Prisma schema. The operation removes the record completely from the database as there is no indication of soft delete handling in this API. This endpoint is intended for administrative purposes to manage subscription plans no longer offered.","path":"/telegramFileDownloader/administrator/subscription/plans/{id}","method":"delete","summary":"Delete a subscription plan by ID","description":"Delete a subscription plan from the system by its unique identifier. This is a hard delete operation, which permanently removes the subscription plan record from the database.\n\nOnly users with the 'administrator' role can perform this operation.\n\nThe subscription plan is identified by its UUID. Deletion removes the record and all dependent records must be handled by database cascade policies.\n\nNo request body or response body content is provided.\n\nError cases include attempting to delete a non-existent subscription plan.","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the subscription plan to delete"}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"administrator","name":"erase"},{"specification":"This operation retrieves a paginated list of payments, reflecting the payment transactions associated with user subscription plans. It operates on the 'telegram_file_downloader_payments' table from the Prisma schema and supports filtering and searching by payment attributes such as payment provider, status, user ID, and date ranges.","path":"/telegramFileDownloader/endUser/payments","method":"patch","summary":"List and search payments with pagination","description":"Retrieve a list of payments recorded in the system. Payments correspond to orders users have made to subscribe to various plans.\n\nThis endpoint provides filtering and pagination capabilities to locate payments by user, status, and date.\n\nAccess is restricted to authenticated users with roles 'endUser', 'developer', or 'administrator' depending on their permissions.\n\nThe response returns a paginated collection of payment records in detailed form, with amounts, statuses, and references to subscription plans and users.\n\nErrors may include authentication failures or invalid search parameters.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for payments","typeName":"ITelegramFileDownloaderPayment.IRequest"},"responseBody":{"description":"Paginated list of payments matching search criteria","typeName":"IPageITelegramFileDownloaderPayment"},"authorizationType":null,"authorizationRole":"endUser","name":"index"},{"specification":"This operation retrieves a paginated list of payments, reflecting the payment transactions associated with user subscription plans. It operates on the 'telegram_file_downloader_payments' table from the Prisma schema and supports filtering and searching by payment attributes such as payment provider, status, user ID, and date ranges.","path":"/telegramFileDownloader/developer/payments","method":"patch","summary":"List and search payments with pagination","description":"Retrieve a list of payments recorded in the system. Payments correspond to orders users have made to subscribe to various plans.\n\nThis endpoint provides filtering and pagination capabilities to locate payments by user, status, and date.\n\nAccess is restricted to authenticated users with roles 'endUser', 'developer', or 'administrator' depending on their permissions.\n\nThe response returns a paginated collection of payment records in detailed form, with amounts, statuses, and references to subscription plans and users.\n\nErrors may include authentication failures or invalid search parameters.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for payments","typeName":"ITelegramFileDownloaderPayment.IRequest"},"responseBody":{"description":"Paginated list of payments matching search criteria","typeName":"IPageITelegramFileDownloaderPayment"},"authorizationType":null,"authorizationRole":"developer","name":"index"},{"specification":"This operation retrieves a paginated list of payments, reflecting the payment transactions associated with user subscription plans. It operates on the 'telegram_file_downloader_payments' table from the Prisma schema and supports filtering and searching by payment attributes such as payment provider, status, user ID, and date ranges.","path":"/telegramFileDownloader/administrator/payments","method":"patch","summary":"List and search payments with pagination","description":"Retrieve a list of payments recorded in the system. Payments correspond to orders users have made to subscribe to various plans.\n\nThis endpoint provides filtering and pagination capabilities to locate payments by user, status, and date.\n\nAccess is restricted to authenticated users with roles 'endUser', 'developer', or 'administrator' depending on their permissions.\n\nThe response returns a paginated collection of payment records in detailed form, with amounts, statuses, and references to subscription plans and users.\n\nErrors may include authentication failures or invalid search parameters.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for payments","typeName":"ITelegramFileDownloaderPayment.IRequest"},"responseBody":{"description":"Paginated list of payments matching search criteria","typeName":"IPageITelegramFileDownloaderPayment"},"authorizationType":null,"authorizationRole":"administrator","name":"index"},{"specification":"This operation retrieves the detailed information about a specific payment by its unique ID. The payment entity relates to user subscriptions, payment statuses, and billing information stored in the 'telegram_file_downloader_payments' table of the Prisma schema.","path":"/telegramFileDownloader/endUser/payments/{id}","method":"get","summary":"Get payment details by ID","description":"Retrieve detailed payment information for a specific payment record given its payment ID.\n\nThis operation returns full details including payment amount, currency, status, payment provider, and associations to subscription plans and the paying user.\n\nAccess is allowed for authenticated 'endUser', 'developer', or 'administrator' roles.\n\nIf the payment ID does not exist, an appropriate error response is returned.","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the payment"}],"requestBody":null,"responseBody":{"description":"Payment record details","typeName":"ITelegramFileDownloaderPayment"},"authorizationType":null,"authorizationRole":"endUser","name":"at"},{"specification":"This operation retrieves the detailed information about a specific payment by its unique ID. The payment entity relates to user subscriptions, payment statuses, and billing information stored in the 'telegram_file_downloader_payments' table of the Prisma schema.","path":"/telegramFileDownloader/developer/payments/{id}","method":"get","summary":"Get payment details by ID","description":"Retrieve detailed payment information for a specific payment record given its payment ID.\n\nThis operation returns full details including payment amount, currency, status, payment provider, and associations to subscription plans and the paying user.\n\nAccess is allowed for authenticated 'endUser', 'developer', or 'administrator' roles.\n\nIf the payment ID does not exist, an appropriate error response is returned.","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the payment"}],"requestBody":null,"responseBody":{"description":"Payment record details","typeName":"ITelegramFileDownloaderPayment"},"authorizationType":null,"authorizationRole":"developer","name":"at"},{"specification":"This operation retrieves the detailed information about a specific payment by its unique ID. The payment entity relates to user subscriptions, payment statuses, and billing information stored in the 'telegram_file_downloader_payments' table of the Prisma schema.","path":"/telegramFileDownloader/administrator/payments/{id}","method":"get","summary":"Get payment details by ID","description":"Retrieve detailed payment information for a specific payment record given its payment ID.\n\nThis operation returns full details including payment amount, currency, status, payment provider, and associations to subscription plans and the paying user.\n\nAccess is allowed for authenticated 'endUser', 'developer', or 'administrator' roles.\n\nIf the payment ID does not exist, an appropriate error response is returned.","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the payment"}],"requestBody":null,"responseBody":{"description":"Payment record details","typeName":"ITelegramFileDownloaderPayment"},"authorizationType":null,"authorizationRole":"administrator","name":"at"},{"specification":"This operation creates a new payment record corresponding to a user subscribing to a plan. The payment entity stores metadata about the payment provider, status, amounts, and dates, as defined in the 'telegram_file_downloader_payments' table in the Prisma schema.","path":"/telegramFileDownloader/endUser/payments","method":"post","summary":"Create a new payment entry","description":"Create a new payment record for a user subscription event.\n\nThe request body must provide user ID, subscription plan ID, payment provider details, payment amount, currency, payment status, and payment date.\n\nOnly authorized roles 'endUser', 'developer', or 'administrator' may access this endpoint.\n\nOn success, the newly created payment record is returned.\n\nErrors include validation failures on required fields or unauthorized access.","parameters":[],"requestBody":{"description":"Details to create a new payment record","typeName":"ITelegramFileDownloaderPayment.ICreate"},"responseBody":{"description":"Created payment record with details","typeName":"ITelegramFileDownloaderPayment"},"authorizationType":null,"authorizationRole":"endUser","name":"create"},{"specification":"This operation creates a new payment record corresponding to a user subscribing to a plan. The payment entity stores metadata about the payment provider, status, amounts, and dates, as defined in the 'telegram_file_downloader_payments' table in the Prisma schema.","path":"/telegramFileDownloader/developer/payments","method":"post","summary":"Create a new payment entry","description":"Create a new payment record for a user subscription event.\n\nThe request body must provide user ID, subscription plan ID, payment provider details, payment amount, currency, payment status, and payment date.\n\nOnly authorized roles 'endUser', 'developer', or 'administrator' may access this endpoint.\n\nOn success, the newly created payment record is returned.\n\nErrors include validation failures on required fields or unauthorized access.","parameters":[],"requestBody":{"description":"Details to create a new payment record","typeName":"ITelegramFileDownloaderPayment.ICreate"},"responseBody":{"description":"Created payment record with details","typeName":"ITelegramFileDownloaderPayment"},"authorizationType":null,"authorizationRole":"developer","name":"create"},{"specification":"This operation creates a new payment record corresponding to a user subscribing to a plan. The payment entity stores metadata about the payment provider, status, amounts, and dates, as defined in the 'telegram_file_downloader_payments' table in the Prisma schema.","path":"/telegramFileDownloader/administrator/payments","method":"post","summary":"Create a new payment entry","description":"Create a new payment record for a user subscription event.\n\nThe request body must provide user ID, subscription plan ID, payment provider details, payment amount, currency, payment status, and payment date.\n\nOnly authorized roles 'endUser', 'developer', or 'administrator' may access this endpoint.\n\nOn success, the newly created payment record is returned.\n\nErrors include validation failures on required fields or unauthorized access.","parameters":[],"requestBody":{"description":"Details to create a new payment record","typeName":"ITelegramFileDownloaderPayment.ICreate"},"responseBody":{"description":"Created payment record with details","typeName":"ITelegramFileDownloaderPayment"},"authorizationType":null,"authorizationRole":"administrator","name":"create"},{"specification":"This operation updates the payment details in the telegram_file_downloader_payments table of the Prisma DB schema. It allows modification of existing payment records including the payment status, amount, currency, and references to subscription plans and user identities. This endpoint is used by administrators or system processes to correct or update payment information for billing and auditing purposes, ensuring data consistency with Stripe or other payment providers. Validation includes verifying the payment ID exists; updating sensitive fields like payment status and amounts should be done with caution to maintain billing integrity.","description":"This operation updates an existing payment record identified by its unique payment ID in the telegram_file_downloader_payments table. It supports updating payment provider info, status, amount, currency, and payment reference details. This endpoint requires that the user has administrative privileges since payment data is sensitive and critical for subscription and billing management.\n\nThe operation includes validation to confirm that the payment ID exists. Attempting to update non-existent payments will result in failure.\n\nThe updated information will be reflected in subscription status and billing logs. This operation must ensure that all changes are consistent with external payment records.\n\nIf successful, the updated payment record will be returned.\n\nSecurity considerations include restricting access to users with the role 'administrator' and validating input data for correctness.\n\nError handling includes returning appropriate error messages when the payment ID is invalid or when input constraints fail validation.\n\nRelated API operations include creating payments via system processes and viewing payments by administrators.\n\nThis operation permanently modifies payment information in the database and is audit logged.\n","summary":"Update an existing payment record by payment ID in the Subscription domain","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the payment to update"}],"requestBody":{"description":"Details of the payment update","typeName":"ITelegramFileDownloaderPayments.IUpdate"},"responseBody":{"description":"The updated payment record after the operation","typeName":"ITelegramFileDownloaderPayments"},"authorizationType":null,"authorizationRole":"administrator","path":"/telegramFileDownloader/administrator/payments/{id}","method":"put","name":"updatePayment"},{"specification":"This operation deletes a payment record identified by its unique payment ID from the telegram_file_downloader_payments table. It permanently removes the payment data and related associations such as transactions and billing logs via cascade delete. This endpoint preserves data integrity by ensuring dependent data is handled appropriately. It is accessible only by administrators managing billing records.\n\nNote that the deletion is a hard delete since the schema includes a soft delete column but the operation explicitly states permanent removal.\n\nThis API is critical for cleanup of erroneous or duplicate payment records and to maintain an accurate billing database.\n\nIt performs direct deletion and does not return any content.","description":"This operation permanently deletes a payment record identified by payment ID from the telegram_file_downloader_payments table. The operation cascades deletions to related tables including transactions and billing logs to maintain referential integrity.\n\nThis API is intended for administrator use only due to the sensitivity of payment data. Unauthorized users will be denied access.\n\nError handling includes returning errors when the payment ID does not exist or deletion fails due to database constraints.\n\nThis operation does not return a response body.\n\nThis is a hard delete operation that removes all traces of the payment from the database.","summary":"Delete a payment record by payment ID with cascade removal of related data","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the payment to delete"}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"administrator","path":"/telegramFileDownloader/administrator/payments/{id}","method":"delete","name":"erasePayment"},{"specification":"This operation retrieves a paginated list of payment transactions from the telegram_file_downloader_transactions table with support for filtering, searching, and sorting. It is used primarily by administrators and accounting systems for auditing, reconciliation, and transaction history review. The operation supports pagination parameters, date range filters, transaction type, and status filters.\n\nThe response includes detailed payment transaction records including transaction type, status, amounts, date, and associated user.\n\nAccess is restricted to administrators to protect financial data.\n\nThis endpoint is consistent with the Subscription domain and respects business rules for secure access and data accuracy.","description":"Retrieve a filtered and paginated list of payment transactions with support for search parameters, sorting options, and pagination. This operation fetches payment transaction data from telegram_file_downloader_transactions used for billing audits and user transaction histories.\n\nThe response provides a paginated container with detailed transaction records, allowing administrators to review charge and refund activities.\n\nSecurity constraints restrict access to users with the 'administrator' role.\n\nBusiness rules enforce correct filtering by transaction type and status.\n\nError handling ensures proper validation of search parameters and pagination inputs.\n\nThis operation does not modify data but provides essential audit information for billing management.\n","summary":"List and search payment transaction records with pagination","parameters":[],"requestBody":{"description":"Search, filter, and pagination parameters for payment transactions","typeName":"ITelegramFileDownloaderTransactions.IRequest"},"responseBody":{"description":"Paginated list of payment transaction records matching search criteria","typeName":"IPageITelegramFileDownloaderTransactions"},"authorizationType":null,"authorizationRole":"administrator","path":"/telegramFileDownloader/administrator/transactions","method":"patch","name":"indexTransactions"},{"specification":"This operation retrieves detailed information about a specific payment transaction by its unique transaction ID from the telegram_file_downloader_transactions table. It provides full details of the transaction type, status, amount, user associations, and timestamps for audit and troubleshooting purposes.\n\nAccess is restricted to administrators for security and privacy compliance.\n\nThis operation supports administrative auditing workflows and reconciliation tasks. It returns a detailed payment transaction object.\n\nErrors are returned if the transaction ID is invalid or not found.\n","description":"Retrieve detailed information about a specific payment transaction identified by transaction ID. This includes transaction status, type, authorized amounts, dates, and related payment and user info.\n\nAccess restricted to administrators due to sensitive financial data.\n\nIt supports auditing requirements and billing reconciliation.\n\nError handling returns HTTP 404 if the transaction ID is not found.\n\nNo modification occurs in this operation; it solely returns data.\n","summary":"Retrieve payment transaction details by transaction ID","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the payment transaction"}],"requestBody":null,"responseBody":{"description":"Detailed information of the requested payment transaction","typeName":"ITelegramFileDownloaderTransactions"},"authorizationType":null,"authorizationRole":"administrator","path":"/telegramFileDownloader/administrator/transactions/{id}","method":"get","name":"atTransaction"},{"specification":"This operation creates a new payment transaction record in the system associated with a user's payment. It operates on the telegram_file_downloader_transactions table in the Prisma database schema. The purpose of this operation is to enable administrators or backend processes to record details of payment transactions such as charges or refunds, including amounts, status, types, and linkage to corresponding user payments. This facilitates audit, reconciliation, and billing processes.\n\nThe transaction is linked to a specific payment and user (either enduser or developer) by their UUIDs. The transaction_type and transaction_status indicate the nature and outcome of the transaction, respectively. Records include accurate timestamps for transaction occurrence and record maintenance.\n\nSecurity considerations require that only authorized administrative or system roles can create transaction records to maintain integrity and prevent manipulation. Business rules ensure that all required fields must be provided, and the referenced payment and user must exist.\n\nThe response returns the complete transaction entity as saved, enabling confirmation and subsequent referencing.\n\nRelated operations include retrieving and updating transactions, as well as managing payments and subscriptions.","description":"Create a new transaction record for a user payment. This operation stores detailed metadata about the transaction including type, status, amount, and timestamps.\n\nOnly administrators or system components should invoke this endpoint to record transactions accurately.\n\nAll required fields must be validated before creation. The transaction links to an existing payment and user.\n\nThe operation returns the created transaction entity with all properties.","summary":"Create a new payment transaction record","parameters":[],"requestBody":{"description":"Transaction creation payload containing payment ID, user ID, type, status, amount, and date","typeName":"ITelegramFileDownloaderTransactions.ICreate"},"responseBody":{"description":"Created transaction entity","typeName":"ITelegramFileDownloaderTransactions"},"authorizationRoles":["administrator"],"path":"/telegramFileDownloader/administrator/transactions","method":"post","name":"createTransaction","authorizationRole":"administrator","authorizationType":null},{"specification":"This operation updates an existing payment transaction record by ID in the telegram_file_downloader_transactions table. It allows modification of transaction details such as status and other mutable fields, while maintaining audit trails via updated timestamps.\n\nOnly authorized administrators can perform this update to ensure data integrity and accurate record-keeping. The operation requires the transaction ID as a path parameter to identify the target record.\n\nInput validation includes ensuring all updated fields conform to the schema and business rules. The response returns the updated full transaction entity after modification.\n\nThis operation complements the creation and deletion endpoints, providing complete administrative control over transaction records.","description":"Update the details of an existing payment transaction record. Only administrators should perform this action.\n\nThe transaction ID must be specified as a path parameter.\n\nReturns the updated transaction entity on success.","summary":"Update an existing payment transaction record","parameters":[{"name":"id","in":"path","description":"The unique identifier of the transaction to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Transaction update payload with updated fields","typeName":"ITelegramFileDownloaderTransactions.IUpdate"},"responseBody":{"description":"Updated transaction entity","typeName":"ITelegramFileDownloaderTransactions"},"authorizationRoles":["administrator"],"path":"/telegramFileDownloader/administrator/transactions/{id}","method":"put","name":"updateTransaction","authorizationRole":"administrator","authorizationType":null},{"specification":"This operation permanently deletes a payment transaction record by its unique ID from the telegram_file_downloader_transactions table. It removes all data associated with the transaction, including amount, status, and user references.\n\nOnly administrators may perform this action to maintain system audit integrity. The record identified by the ID path parameter will be fully removed from the database.\n\nNo request body is required. The response does not contain any content.\n\nThis deletion operation is irreversible and should be used cautiously to avoid loss of critical billing data.\n\nIt complements the create and update operations, providing full lifecycle management of transaction data.","description":"Permanently delete a payment transaction record by its ID. This operation cannot be undone.\n\nAdministrators only.\n\nNo request body or response content.","summary":"Delete a payment transaction record","parameters":[{"name":"id","in":"path","description":"Unique identifier of the transaction to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"path":"/telegramFileDownloader/administrator/transactions/{id}","method":"delete","name":"eraseTransaction","authorizationRole":"administrator","authorizationType":null},{"specification":"This operation retrieves and searches Telegram API credential records. It operates on the telegram_file_downloader_telegram_api_credentials table. This endpoint supports complex search filters, pagination, and sorting to manage bot credentials securely.\n\nCredentials are required to authenticate Telegram API calls for the downloading service. Management of these credentials is a privileged administrative function to enable rotation, deactivation, and tracking of usage.\n\nThe search request body allows filtering by bot name, active status, and recent usage, among other fields. The response returns paginated credential data including bot token status but carefully omits sensitive tokens for security in listing contexts.\n\nOnly administrators have access to this operation. It facilitates credential management and security compliance in the Telegram File Downloader system.","description":"Search and retrieve Telegram API credential records with filtering, pagination, and sorting. Administrators only.\n\nSupports filtering by bot name, active status, and last usage.\n\nReturns paginated list with credential details excluding sensitive bot tokens.\n\nUse to manage and audit Telegram API credentials used by the system.","summary":"Search Telegram API credentials","parameters":[],"requestBody":{"description":"Request payload with search filters for Telegram API credentials","typeName":"ITelegramFileDownloaderTelegramApiCredentials.IRequest"},"responseBody":{"description":"Paginated list of Telegram API credentials","typeName":"IPageITelegramFileDownloaderTelegramApiCredentials"},"authorizationRoles":["administrator"],"path":"/telegramFileDownloader/administrator/telegramApiCredentials","method":"patch","name":"search","authorizationRole":"administrator","authorizationType":null},{"specification":"This operation manages the Telegram API credentials used to authenticate and interact with the Telegram services for file downloads. It operates on the telegram_file_downloader_telegram_api_credentials table of the database schema. The API supports retrieval of a single Telegram API credential record by its unique ID, updating existing credential information, creation of new credentials, and deletion. The data fields include bot name, bot token, IsActive flag, and timestamps. Deletion is a hard delete, fully removing the record from the database. Security requires administrative authorization due to sensitive token info.","description":"This API operation allows administrators to retrieve detailed information about a specific Telegram API credential using its unique identifier. The Telegram API credentials include bot name, token, and status information that are essential for authenticating to Telegram services. Access to this endpoint should be restricted to authorized administrators only.\n\nIn addition, there are operations to create new Telegram API credentials. This requires passing bot name, token string, and the isActive status flag. The system stores these securely and tracks creation and update timestamps.\n\nUpdating credentials by ID is also supported. Administrators can change bot names, tokens, or toggle the isActive status. The system will update timestamps accordingly.\n\nDeletion of credentials is performed permanently and irreversibly, fully removing the record from the database. This action should be guarded under administrative roles only.\n\nAll operations map directly to the telegram_file_downloader_telegram_api_credentials table as defined in the Prisma schema, ensuring data coherence and integrity.","path":"/telegramFileDownloader/administrator/telegramApiCredentials/{telegramApiCredentialId}","method":"get","summary":"Retrieve Telegram API credential by ID","parameters":[{"name":"telegramApiCredentialId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the Telegram API credential"}],"requestBody":null,"responseBody":{"description":"Telegram API credential data","typeName":"ITelegramFileDownloaderTelegramApiCredential"},"authorizationType":null,"authorizationRole":"administrator","name":"at"},{"specification":"Create a new Telegram API credential to authenticate with Telegram services. This operation writes a record into telegram_file_downloader_telegram_api_credentials, including botName, botToken and isActive status. Creation timestamps are set automatically. Only authorized administrators may perform this action.","description":"This operation enables an administrator to create a new Telegram API credential used by the system to interact with Telegram APIs securely. The request must provide the bot's display name, secret token, and whether it is active. Upon success, the system stores the credential, timestamps the creation and update time, and returns the created credential information.\n\nRole restriction ensures only users with administrator privileges can perform this sensitive action.\n\nProper validation on bot token uniqueness and token security is assumed to be enforced at the provider level.\n\nThe API strictly maps to telegram_file_downloader_telegram_api_credentials table in the Prisma schema, guaranteeing fidelity in data.","path":"/telegramFileDownloader/administrator/telegramApiCredentials","method":"post","summary":"Create a new Telegram API credential record","parameters":[],"requestBody":{"description":"Telegram API credential creation data","typeName":"ITelegramFileDownloaderTelegramApiCredential.ICreate"},"responseBody":{"description":"Created Telegram API credential","typeName":"ITelegramFileDownloaderTelegramApiCredential"},"authorizationType":null,"authorizationRole":"administrator","name":"create"},{"specification":"Update an existing Telegram API credential identified by its UUID. This operation updates botName, botToken, and isActive fields in telegram_file_downloader_telegram_api_credentials. Updated timestamps are tracked. Only authorized administrators may update credentials.","description":"This API operation enables modification of existing Telegram API credential records by authorized administrators. The target credential is identified by telegramApiCredentialId in the path. Updates include changing the bot display name, bot token string, and active flag.\n\nThe operation updates the corresponding entry in the telegram_file_downloader_telegram_api_credentials table, revising timestamps accordingly to reflect modification.\n\nSecurity requires administrator role authorization due to sensitive nature of tokens.\n\nAll input data must comply with schema validations and constraints.","path":"/telegramFileDownloader/administrator/telegramApiCredentials/{telegramApiCredentialId}","method":"put","summary":"Update details of a Telegram API credential","parameters":[{"name":"telegramApiCredentialId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the Telegram API credential"}],"requestBody":{"description":"Telegram API credential update request data","typeName":"ITelegramFileDownloaderTelegramApiCredential.IUpdate"},"responseBody":{"description":"Updated Telegram API credential","typeName":"ITelegramFileDownloaderTelegramApiCredential"},"authorizationType":null,"authorizationRole":"administrator","name":"update"},{"specification":"Delete a Telegram API credential record from the database permanently using its UUID. Since the prisma schema does not include soft delete column handling here, this performs a hard delete. This operation is restricted to administrators only to protect sensitive credentials.","description":"This operation permanently deletes a Telegram API credential by its UUID. The operation removes the record entirely from the telegram_file_downloader_telegram_api_credentials table.\n\nDeletion is irreversible and requires administrator privileges to execute. Proper authorization is mandatory.\n\nThe API path includes the telegramApiCredentialId as a path parameter to identify the target credential securely.\n\nThis operation does not return any response body but confirms successful deletion via HTTP status codes.\n\nSafety checks and auditing should be handled at the service layer.","path":"/telegramFileDownloader/administrator/telegramApiCredentials/{telegramApiCredentialId}","method":"delete","summary":"Permanently remove a Telegram API credential","parameters":[{"name":"telegramApiCredentialId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the Telegram API credential"}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"administrator","name":"erase"},{"specification":"OpenAPI operations for reading Stripe webhook logs from the telegram_file_downloader_stripe_webhook_logs table. This table stores webhook event information received from Stripe including event IDs, types, payloads, timestamps, and processing status. These operations enable listing all webhook logs with filtering and pagination and retrieving detail of a specific webhook log by its UUID ID.","description":"This operation retrieves a paginated list of Stripe webhook event logs recorded by the Telegram File Downloader system. These logs capture detailed JSON payloads and event metadata from Stripe for payment and subscription events. The listing supports filters to search and paginate through webhook records.\n\nUsers authorized to access this endpoint can view Stripe event details for audit and troubleshooting but cannot modify logs via API. \n\nThis operation references the telegram_file_downloader_stripe_webhook_logs table which stores webhook events received from Stripe, including event IDs, types, payloads, received timestamps, and processing flags.\n\nNo request body is needed as filtering and pagination use query parameters defined in the IRequest type. The response returns a paginated list of webhook logs with summary data.\n\nExpected roles include administrative-level users who monitor payment system activity.\n\nAPI errors include invalid query parameters and unauthorized access.\n\n---\n\nThis operation corresponds to the PATCH /stripeWebhookLogs endpoint.","summary":"List and search Stripe webhook logs with pagination","parameters":[],"requestBody":{"description":"Pagination, filtering, and search criteria for Stripe webhook logs","typeName":"ITelegramFileDownloaderStripeWebhookLogs.IRequest"},"responseBody":{"description":"Paged list of Stripe webhook logs matching search criteria","typeName":"IPageITelegramFileDownloaderStripeWebhookLogs.ISummary"},"authorizationType":null,"authorizationRole":"administrator","path":"/telegramFileDownloader/administrator/stripeWebhookLogs","method":"patch","name":"index"},{"specification":"OpenAPI operation to retrieve detailed information about a single Stripe webhook log using its unique UUID identifier. The returned data includes full JSON payload and event metadata.\n\nThe operation references the telegram_file_downloader_stripe_webhook_logs table in the Prisma schema and provides administrative users access to detailed webhook event data.\n\nErrors returned can include resource not found (404) and unauthorized access (403).\n\nThis operation corresponds to the GET /stripeWebhookLogs/{stripeWebhookLogId} endpoint.","description":"This operation retrieves detailed information about a specified Stripe webhook log entry by its unique identifier. The data includes the full JSON payload of the webhook event, event type, processing status, timestamps, and any relevant metadata.\n\nAccess is restricted to administrative users responsible for monitoring and debugging payment processing events.\n\nThis operation employs path parameter `stripeWebhookLogId` which must be a valid UUID representing the target webhook log record.\n\nAppropriate error codes are returned for unknown IDs or unauthorized access.\n\nThe operation fetches data from the telegram_file_downloader_stripe_webhook_logs table, which holds Stripe webhook event information.\n\n---\n\nThis operation corresponds to the GET /stripeWebhookLogs/{stripeWebhookLogId} endpoint.","summary":"Retrieve Stripe webhook log details by ID","parameters":[{"name":"stripeWebhookLogId","in":"path","description":"Unique identifier of the Stripe webhook log","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed Stripe webhook log information","typeName":"ITelegramFileDownloaderStripeWebhookLogs"},"authorizationType":null,"authorizationRole":"administrator","path":"/telegramFileDownloader/administrator/stripeWebhookLogs/{stripeWebhookLogId}","method":"get","name":"at"},{"specification":"OpenAPI operations for reading AWS S3 upload logs from telegram_file_downloader_aws_s3_upload_logs table. This table records file upload attempts to AWS S3 including file metadata, upload status, errors, and timestamps. The operations allow listing upload logs with filters and retrieving a detailed single upload log entry by its UUID identifier.\n\nThese operations provide administrative users with insights for troubleshooting file upload issues and auditing upload activities.\n\nNo modification of records is allowed through these endpoints.\n\nThis operation corresponds to PATCH /awsS3UploadLogs and GET /awsS3UploadLogs/{awsS3UploadLogId} endpoints.","description":"This operation retrieves a paginated list of AWS S3 upload logs capturing file upload attempts, statuses, errors, and metadata. The listing supports complex search and pagination criteria.\n\nThese logs help administrators audit file upload activity and troubleshoot failures.\n\nAuthorization is restricted to admin roles.\n\nData is fully sourced from telegram_file_downloader_aws_s3_upload_logs table.\n\nNo request body content is required for the GET single operation; filtering uses request body for the PATCH list operation.\n\nExpected errors include unauthorized access and invalid parameters.\n\n---\n\nThis operation corresponds to the PATCH /awsS3UploadLogs endpoint.","summary":"List and search AWS S3 upload logs with pagination","parameters":[],"requestBody":{"description":"Filter and pagination parameters for querying AWS S3 upload logs","typeName":"ITelegramFileDownloaderAwsS3UploadLogs.IRequest"},"responseBody":{"description":"Paged list of AWS S3 upload logs matching criteria","typeName":"IPageITelegramFileDownloaderAwsS3UploadLogs.ISummary"},"authorizationType":null,"authorizationRole":"administrator","path":"/telegramFileDownloader/administrator/awsS3UploadLogs","method":"patch","name":"index"},{"specification":"OpenAPI operation to fetch detailed information of a single AWS S3 upload log entry by its UUID identifier. Details include file name, size, upload status, attempts, errors, and timestamps.\n\nReferencing the telegram_file_downloader_aws_s3_upload_logs table in Prisma schema.\n\nRestricted access to admin users.\n\nReturns HTTP 403 on unauthorized or 404 if record not found.\n\nThis operation corresponds to GET /awsS3UploadLogs/{awsS3UploadLogId}.","description":"This operation fetches detailed properties of an AWS S3 upload log identified by its unique UUID. Details include file meta-info, upload status, errors, and timing.\n\nAccess is restricted to administrators responsible for system monitoring.\n\nThe path parameter `awsS3UploadLogId` must be a valid UUID.\n\nProper error handling confirms clear responses to unknown log IDs or lack of permission.\n\nData source is telegram_file_downloader_aws_s3_upload_logs table.\n\n---\n\nThis operation corresponds to the GET /awsS3UploadLogs/{awsS3UploadLogId} endpoint.","summary":"Retrieve AWS S3 upload log details by ID","parameters":[{"name":"awsS3UploadLogId","in":"path","description":"Unique identifier of the AWS S3 upload log","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed AWS S3 upload log information","typeName":"ITelegramFileDownloaderAwsS3UploadLogs"},"authorizationType":null,"authorizationRole":"administrator","path":"/telegramFileDownloader/administrator/awsS3UploadLogs/{awsS3UploadLogId}","method":"get","name":"at"},{"specification":"This operation retrieves a filtered and paginated list of job queue entries from the telegram_file_downloader_job_queues table. It provides the capability to search, sort, and paginate jobs in the queue based on criteria such as status, priority, and retry attempts. This is essential for administrators or system processes to monitor and manage the backlog of file download jobs awaiting processing.","description":"Retrieve a filtered and paginated list of job queues from the telegram_file_downloader_job_queues table. This operation allows system administrators or monitoring services to view current job statuses including pending, processing, failed, or completed jobs. It supports filtering by status and priority, searching by last error messages, and sorting by creation or update timestamps.\n\nSecurity considerations include restricted access to authorized roles only due to sensitivity of operational data. The response includes essential job metadata such as priority levels and retry counts.\n\nThis operation integrates with the job queue management to enable effective tracking and management of asynchronous file download processing. Typical clients are admin dashboards or automated maintenance scripts.\n\nErrors include invalid filter criteria or parameter violations resulting in rejection with appropriate error codes.","summary":"Search and retrieve paginated list of job queues","parameters":[],"requestBody":{"description":"Filtering, sorting, paging criteria for job queues retrieval","typeName":"ITelegramFileDownloaderJobQueue.IRequest"},"responseBody":{"description":"Paginated list of job queue summaries matching search criteria","typeName":"IPageITelegramFileDownloaderJobQueue.ISummary"},"authorizationType":null,"authorizationRole":"administrator","name":"index","path":"/telegramFileDownloader/administrator/jobQueues","method":"patch"},{"specification":"This operation fetches detailed information of a single job queue entry identified by its unique ID from the telegram_file_downloader_job_queues table. It provides full metadata including job status, priority, retry count, and last error details.\n\nThis is used by administrators or system monitors to inspect the progress and health of specific download jobs.\n\nAccess is restricted to authorized admin roles only to protect sensitive operational information. Validation of the job queue ID is performed to ensure existence before retrieval.\n\nErrors include 404 for not found IDs and 400 for invalid ID formats or unauthorized access.","description":"Fetch detailed information of a job queue entry by ID from telegram_file_downloader_job_queues table. The detailed view includes status, priority, number of retries, last error message, and timestamps for creation and updates.\n\nThis helps administrators or background services to examine specific jobs in the download processing queue for troubleshooting or audit purposes.\n\nSecurity is maintained by restricting access to administrator roles.\n\nInvalid or non-existent IDs will result in 404 Not Found responses. Appropriate error handling is included for malformed UUIDs.","summary":"Retrieve detailed job queue information by ID","parameters":[{"name":"id","description":"Unique identifier of the job queue entry","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed job queue entry information","typeName":"ITelegramFileDownloaderJobQueue"},"authorizationType":null,"authorizationRole":"administrator","name":"at","path":"/telegramFileDownloader/administrator/jobQueues/{id}","method":"get"},{"specification":"This operation creates a new job queue entry in the telegram_file_downloader_job_queues table corresponding to a new download job. The request includes necessary details such as job ID, priority, initial status, and optional retry count and last error message.\n\nThis is used internally by the system to enqueue new download jobs for asynchronous processing.\n\nAccess is strictly limited to administrator roles or internal services authorized to schedule jobs. Validation ensures the job ID corresponds to an existing download job.\n\nErrors occur when provided data is invalid or if the job ID already exists in the queue.","description":"Create a new job queue entry to enqueue a file download job for processing. The request includes job ID, priority, status, optional retry count, and error message.\n\nThis enables asynchronous processing of file downloads requested by users or developers.\n\nSecurity requires administrator role authorization.\n\nErrors on duplicate job IDs or invalid data trigger rejection with informative messages.","summary":"Enqueue a new file download job in job queue","parameters":[],"requestBody":{"description":"Information required to create a new job queue entry","typeName":"ITelegramFileDownloaderJobQueue.ICreate"},"responseBody":{"description":"Details of the created job queue entry","typeName":"ITelegramFileDownloaderJobQueue"},"authorizationType":null,"authorizationRole":"administrator","name":"create","path":"/telegramFileDownloader/administrator/jobQueues","method":"post"},{"specification":"This operation updates an existing job queue entry identified by its ID in the telegram_file_downloader_job_queues table. It allows modification of status, priority, retry counts, and last error messages.\n\nThis is used to manage job states during processing, including marking jobs as completed, failed, or retrying them.\n\nSecurity is restricted to administrator roles only. Validation includes verifying the existence of the job queue entry and correct data types.\n\nErrors include 404 for not found and 400 for invalid inputs.","description":"Update existing job queue entry by ID. Modifiable fields include status, priority, retries, and last error message.\n\nThis operation allows administrators or system processes to manage the lifecycle of download jobs in the queue.\n\nSecurity and data integrity are enforced through role-based authorization and parameter validation.\n\nAppropriate error handling covers invalid IDs or malformed data submissions.","summary":"Update job queue entry by ID","parameters":[{"name":"id","description":"Unique identifier of the job queue entry to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the job queue entry","typeName":"ITelegramFileDownloaderJobQueue.IUpdate"},"responseBody":{"description":"Updated job queue entry details","typeName":"ITelegramFileDownloaderJobQueue"},"authorizationType":null,"authorizationRole":"administrator","name":"update","path":"/telegramFileDownloader/administrator/jobQueues/{id}","method":"put"},{"specification":"This operation deletes an existing job queue entry representing a file download task. It permanently removes the record from the 'telegram_file_downloader_job_queues' table in the Prisma database, reflecting the system's job queue management component. Being a hard delete, this operation completely removes the job queue entry identified by its UUID without a soft delete flag. This endpoint is critical for administrators to remove obsolete or failed job entries from the system's queue to maintain system health and performance.","description":"This DELETE API operation permanently removes a job queue record from the system. Job queues manage file download tasks for Telegram channel/group downloads. Removing a job queue entry is typically performed by system administrators or automated cleanup processes to discard stale or completed jobs.\n\nThis operation requires the job queue ID to uniquely identify which record to remove. It does not accept a request body and does not return any content on success. Given the criticality of job queues to download processing, only authorized users with administrative privileges should be allowed to invoke this endpoint.\n\nRemoving the queue entry will ensure that the download job will no longer be processed or retried by the system. This is a hard delete operation removing the record fully from the database without a soft delete timestamp.\n\nAppropriate error handling should return a not found status if the job ID does not exist, and proper authorization checks must be implemented to restrict access.\n\nThe 'telegram_file_downloader_job_queues' table in the database backs this API, containing details like job ID, status, priority, and retry counts.","summary":"Delete a job queue entry by ID to remove the download job from the queue","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the job queue entry to delete"}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"administrator","name":"erase","path":"/telegramFileDownloader/administrator/jobQueues/{id}","method":"delete"},{"specification":"This operation retrieves detailed information of an error log by its unique identifier from the 'telegram_file_downloader_error_logs' table. It assists administrators in troubleshooting and monitoring backend failures, exceptions, and system issues recorded during file download processing and other backend operations. The error log contains error code, message, source component, timestamps, and resolution status.","description":"This GET operation fetches a single error log entry from the system by its ID.\n\nError logs capture detailed failure information including error code, message, source of error, occurrence time, and resolution status. This is intended to assist administrators and support engineers in diagnosing issues with file downloads or system processing.\n\nThe response includes all fields of the error log as stored in the database, enabling comprehensive visibility into errors. Access to this endpoint is restricted to administrators to prevent exposure of internal system details.\n\nProper error handling includes returning 404 if the specified ID does not exist, and authorization validation.\n\nThe backing table is 'telegram_file_downloader_error_logs' in Prisma schema.\n\nNo request body is required.","summary":"Retrieve detailed information for a specific error log entry","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the error log entry"}],"requestBody":null,"responseBody":{"description":"Error log entry details","typeName":"ITelegramFileDownloaderErrorLog"},"authorizationType":null,"authorizationRole":"administrator","name":"at","path":"/telegramFileDownloader/administrator/errorLogs/{id}","method":"get"},{"specification":"This operation retrieves a paginated list of error logs with filtering and sorting capabilities from the 'telegram_file_downloader_error_logs' table. Administrators can search, sort, and paginate through system errors and exceptions to monitor backend performance and troubleshoot issues. The search may include filtering by error code, source component, resolved status, and date ranges.","description":"This PATCH operation provides a filtered, sorted, and paginated list of error logs recorded in the system.\n\nAdministrators can query error logs with search parameters including error code, resolution status, and date ranges. Pagination allows efficient navigation through large volumes of logs.\n\nThis endpoint facilitates monitoring and resolving system issues by providing detailed error information for troubleshooting. Access is restricted to administrators to ensure security.\n\nThe request body must include filtering and paging parameters according to the ITelegramFileDownloaderErrorLog.IRequest schema. The response returns a paginated list of error log entries matching the criteria.\n\nThe underlying data resides in the 'telegram_file_downloader_error_logs' table of the Prisma schema.","summary":"Search and retrieve paginated filtered error logs","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for error logs","typeName":"ITelegramFileDownloaderErrorLog.IRequest"},"responseBody":{"description":"Paginated list of error logs matching search criteria","typeName":"IPageITelegramFileDownloaderErrorLog"},"authorizationType":null,"authorizationRole":"administrator","name":"index","path":"/telegramFileDownloader/administrator/errorLogs","method":"patch"},{"specification":"This operation retrieves a paginated list of audit logs with filtering and sorting capabilities from the 'telegram_file_downloader_audit_logs' table. Administrators can search, sort, and paginate through system audit trails that capture user actions and system-level changes for compliance and troubleshooting.","description":"This PATCH operation enables administrators to search and list audit logs with filters for action types, entity types, associated user IDs, and date ranges.\n\nAudit logs record system-level events such as login attempts, file downloads, subscription changes, and administrative actions. This endpoint helps trace activities for security and compliance.\n\nThe request body requires search and pagination parameters conforming to the ITelegramFileDownloaderAuditLog.IRequest schema. The response provides a paginated listing of audit log entries matching the criteria.\n\nAccess is restricted to administrators to ensure audit log confidentiality.\n\nThe datasource is the 'telegram_file_downloader_audit_logs' Prisma table.\n\nNo path parameters are required.","summary":"Search and retrieve paginated filtered audit logs","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for audit logs","typeName":"ITelegramFileDownloaderAuditLog.IRequest"},"responseBody":{"description":"Paginated list of audit logs matching search criteria","typeName":"IPageITelegramFileDownloaderAuditLog"},"authorizationType":null,"authorizationRole":"administrator","name":"index","path":"/telegramFileDownloader/administrator/auditLogs","method":"patch"},{"specification":"This operation retrieves detailed information about a specific audit log entry identified by the unique audit log ID. It provides full details of system-level user actions and events recorded within the Telegram File Downloader service to support traceability and compliance auditing. The audit logs include action types such as login, download request, subscription change, and capture related metadata including the user reference (if applicable), timestamps, IP address, and entity identifiers. This API operation operates on the telegram_file_downloader_audit_logs table in the Prisma schema, ensuring verification of the audit log existence and secure access by authorized roles such as administrators.","description":"Retrieve a single audit log entry by its unique identifier. This operation is intended for use by administrators who need to investigate system events and user activities in depth. Audit logs capture critical system actions, supporting security monitoring and forensic analysis.\n\nThe endpoint validates the provided audit log ID to ensure its existence and returns the complete record with all metadata fields including user relation, action type, entity details, timestamps, and relevant context such as IP address.\n\nOnly authorized users with administrative privileges may access this endpoint. The operation references the telegram_file_downloader_audit_logs table in the Prisma schema, ensuring accuracy and consistency with underlying data.\n\nErrors such as invalid or non-existent IDs result in appropriate error responses.\n\nThis operation complements list retrieval endpoints that return collections of audit logs, enabling detailed drill-down on individual records.","summary":"Retrieve audit log details by ID from telegram_file_downloader_audit_logs","parameters":[{"name":"id","description":"Unique identifier of the target audit log entry","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed audit log entry information","typeName":"ITelegramFileDownloaderAuditLog"},"authorizationType":null,"authorizationRole":"administrator","name":"at","path":"/telegramFileDownloader/administrator/auditLogs/{id}","method":"get"},{"specification":"This operation searches and retrieves a paginated list of billing log entries capturing payment transactions and billing events within the Telegram File Downloader system. It supports filtering, sorting, and pagination for administrators to monitor billing activity and reconcile payments. The billing logs are stored in the telegram_file_downloader_billing_logs table in the Prisma schema, including references to related payment records, event types, event timestamps, and optional metadata. This API is restricted to administrative users who oversee system billing and financial auditing.","description":"Retrieve a filtered, paginated list of billing logs containing payment and billing event details. This operation supports complex queries enabling admins to slice billing data by event type, time ranges, and related payment references.\n\nThe response includes billing event metadata, timestamps, and references to related payments, assisting reconciliation and audit processes.\n\nAccess to this operation is restricted to users with administrative roles to protect sensitive financial information.\n\nThis endpoint complements detailed payment and subscription audit APIs, providing comprehensive financial oversight.\n\nPagination capability ensures scalable and performant access to large billing log datasets.","summary":"Search and retrieve paginated billing logs from telegram_file_downloader_billing_logs","parameters":[],"requestBody":{"description":"Pagination, filtering, and sorting criteria for billing logs","typeName":"ITelegramFileDownloaderBillingLog.IRequest"},"responseBody":{"description":"Paginated billing log entries matching filter criteria","typeName":"IPageITelegramFileDownloaderBillingLog"},"authorizationType":null,"authorizationRole":"administrator","name":"index","path":"/telegramFileDownloader/administrator/billingLogs","method":"patch"},{"specification":"This operation retrieves detailed information about a specific billing log entry identified by its unique ID, representing a payment transaction or billing event in the Telegram File Downloader system. The billing log is stored in the telegram_file_downloader_billing_logs table in the Prisma schema and contains information such as event type, event timestamp, related payment reference, and optional event metadata. This endpoint is intended for administrative users to perform detailed financial audits and reconciliation.","description":"Retrieve billing log details by its unique billing log ID. This endpoint is used by administrators to gain detailed insight into individual billing events, transactions, and payment records.\n\nThe operation returns full metadata including event type, timestamps, related payment references, and any additional descriptive details provided at event creation.\n\nAuthorization is limited to admin users due to the sensitive nature of billing data.\n\nThis API complements list and audit endpoints that provide aggregated billing data and subscription change history.","summary":"Retrieve billing log details by ID from telegram_file_downloader_billing_logs","parameters":[{"name":"billingLogId","description":"Unique identifier of the billing log entry","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed billing log entry","typeName":"ITelegramFileDownloaderBillingLog"},"authorizationType":null,"authorizationRole":"administrator","name":"at","path":"/telegramFileDownloader/administrator/billingLogs/{billingLogId}","method":"get"},{"specification":"This operation searches and retrieves a paginated list of subscription audit records that capture changes and events related to user subscriptions in the Telegram File Downloader system. Stored in the telegram_file_downloader_subscription_audits table of the Prisma schema, these records document subscription updates such as upgrades, downgrades, cancellations, and billing plan modifications. This endpoint is accessible only to administrative users responsible for subscription management and compliance auditing.","description":"Retrieve a filtered, paginated list of subscription audit records tracking subscription changes over time. This operation enables administrators to query subscription update history by user, plan, change type, and time frames.\n\nThe response provides detailed subscription change metadata including timestamps, related payments, notes, and plan information.\n\nAccess is limited to authorized administrators.\n\nThis operation works in concert with billing and payment endpoints to provide holistic subscription lifecycle tracking.","summary":"Search and retrieve subscription audit history from telegram_file_downloader_subscription_audits","parameters":[],"requestBody":{"description":"Filtering and pagination parameters for subscription audit records","typeName":"ITelegramFileDownloaderSubscriptionAudit.IRequest"},"responseBody":{"description":"Paginated subscription audit records matching filter criteria","typeName":"IPageITelegramFileDownloaderSubscriptionAudit"},"authorizationType":null,"authorizationRole":"administrator","name":"index","path":"/telegramFileDownloader/administrator/subscriptionAudits","method":"patch"},{"specification":"This operation retrieves detailed information about a specific subscription audit record identified by the subscriptionAuditId path parameter. It interacts directly with the telegram_file_downloader_subscription_audits table in the Prisma schema, which stores historical records capturing changes and events related to user subscriptions, including plan changes, payment associations, change types, timestamps, and metadata. The endpoint provides a GET method to fetch a single audit entry, confirming the change history and audit trail for subscription management. Users with administrative roles requiring audit and billing oversight would typically access this endpoint.\n\nThe security context requires appropriate administrator role authorization to ensure sensitive subscription audit data is accessed only by authorized personnel. The detailed response includes all audit record fields like subscription plan reference, associated payment, user ID, change type, timestamps, and optional notes for comprehensive audit visibility.\n\nParameters include the subscriptionAuditId path parameter as a UUID, ensuring precise record retrieval. No request body is needed as this is a read-only operation. Response body structure strictly maps to the ITelegramFileDownloaderSubscriptionAudits interface defined under the service prefix TelegramFileDownloader. Any unauthorized or invalid ID access should be handled with appropriate HTTP error codes.","path":"/telegramFileDownloader/administrator/subscriptionAudits/{subscriptionAuditId}","method":"get","summary":"Get detailed subscription audit by ID","description":"Retrieve detailed information for a specific subscription audit record using its unique identifier.\n\nThis API operation fetches all stored data related to subscription changes such as upgrades, downgrades, cancellations, and associated billing events tied to a user. It references the telegram_file_downloader_subscription_audits database table which holds historical subscription change data for audit and compliance purposes.\n\nOnly users with proper administrator privileges are authorized to access this endpoint to prevent exposure of sensitive subscription and payment audit details.\n\nThe path parameter subscriptionAuditId must be a valid UUID representing the audit record to fetch. The response includes extensive audit details including change type, timestamps, related subscription plan and payment IDs, user identity, and optional notes.\n\nThis detailed end-point supports administrative monitoring, troubleshooting subscription life-cycle, and billing reconciliation workflows within the Telegram File Downloader system.","parameters":[{"name":"subscriptionAuditId","description":"Unique identifier of the subscription audit record to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed subscription audit information","typeName":"ITelegramFileDownloaderSubscriptionAudits"},"authorizationType":null,"authorizationRole":"administrator","name":"at"}],"components":{"authorization":[{"name":"endUser","description":"Users who download specific Telegram channel/group files via the web dashboard. They have access to limited free or paid subscription plans.","kind":"member"},{"name":"developer","description":"Developers or marketers who use API endpoints to fetch large volumes of Telegram files programmatically with subscription-based limits.","kind":"member"},{"name":"administrator","description":"System administrators who manage subscriptions, monitor logs, and check payment and service status via admin panel.","kind":"admin"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageITelegramFileDownloaderEnduser.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITelegramFileDownloaderEndUser.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITelegramFileDownloaderDeveloper.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITelegramFileDownloaderDeveloper.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITelegramFileDownloaderAdministrator":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITelegramFileDownloaderAdministrator"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITelegramFileDownloaderDownloadJobs.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITelegramFileDownloaderDownloadJobs.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITelegramFileDownloaderFiles":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITelegramFileDownloaderFiles"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITelegramFileDownloaderStorageUsage.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITelegramFileDownloaderStorageUsage.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITelegramFileDownloaderDownloadJobStatus":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITelegramFileDownloaderDownloadJobStatus"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITelegramFileDownloaderSubscriptionPlans":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITelegramFileDownloaderSubscriptionPlans"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITelegramFileDownloaderPayment":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITelegramFileDownloaderPayment"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITelegramFileDownloaderTransactions":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITelegramFileDownloaderTransactions"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITelegramFileDownloaderTelegramApiCredentials":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITelegramFileDownloaderTelegramApiCredentials"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITelegramFileDownloaderStripeWebhookLogs.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITelegramFileDownloaderStripeWebhookLogs.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITelegramFileDownloaderAwsS3UploadLogs.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITelegramFileDownloaderAwsS3UploadLogs.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITelegramFileDownloaderJobQueue.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITelegramFileDownloaderJobQueue.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITelegramFileDownloaderErrorLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITelegramFileDownloaderErrorLog"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITelegramFileDownloaderAuditLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITelegramFileDownloaderAuditLog"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITelegramFileDownloaderBillingLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITelegramFileDownloaderBillingLog"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITelegramFileDownloaderSubscriptionAudit":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITelegramFileDownloaderSubscriptionAudit"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"ITelegramFileDownloaderEndUser.ICreate":{"description":"Request body for creating a new Telegram File Downloader end user. Requires email and password hash for registration. Passwords are securely hashed before storage.","type":"object","properties":{"email":{"type":"string","format":"email","description":"Unique email address for the new end user."},"password_hash":{"type":"string","description":"Hashed password used for authentication."}},"required":["email","password_hash"]},"ITelegramFileDownloaderEndUser.IAuthorized":{"description":"Response body confirming authorization and token issuance for a Telegram File Downloader end user.","type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authorized end user."},"email":{"type":"string","format":"email","description":"Unique email address of the end user."},"password_hash":{"type":"string","description":"Hashed password used for authentication. Not exposed in response bodies for security."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the user account was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to the user account."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the user account was soft deleted. Null if active."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","password_hash","created_at","updated_at","token"]},"ITelegramFileDownloaderEndUser.ILogin":{"description":"Request body for login of Telegram File Downloader end user. Requires email and plaintext password.","type":"object","properties":{"email":{"type":"string","format":"email","description":"Email address of the end user."},"password":{"type":"string","description":"Plaintext password to authenticate."}},"required":["email","password"]},"ITelegramFileDownloaderEndUser.IRefresh":{"description":"Request body for refreshing JWT tokens for a Telegram File Downloader end user. Requires a valid refresh token string.","type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token string issued for session renewal."}},"required":["refresh_token"]},"ITelegramFileDownloaderEndUser.IResetPassword":{"description":"Request body for password reset operation. Requires the user's email and new password for update after verification.","type":"object","properties":{"email":{"type":"string","format":"email","description":"Email address of the user requesting password reset."},"new_password":{"type":"string","description":"New password to be set for the account."}},"required":["email","new_password"]},"ITelegramFileDownloaderEndUser.IResetPasswordResponse":{"description":"Response body confirming the success or failure of a password reset operation.","type":"object","properties":{"success":{"type":"boolean","description":"Indicates if the password was successfully reset."},"message":{"type":"string","description":"Message describing the result of the password reset process."}},"required":["success","message"]},"ITelegramFileDownloaderEndUser.IChangePassword":{"description":"Request body for changing password for authenticated Telegram File Downloader end users. Requires current password and new password for validation and update.","type":"object","properties":{"current_password":{"type":"string","description":"Current password for verification."},"new_password":{"type":"string","description":"New password to set."}},"required":["current_password","new_password"]},"ITelegramFileDownloaderEndUser.IChangePasswordResponse":{"description":"Response body confirming the success or failure of password change operation.","type":"object","properties":{"success":{"type":"boolean","description":"Whether the password was successfully changed."},"message":{"type":"string","description":"Description of the password change result."}},"required":["success","message"]},"ITelegramFileDownloaderDeveloper.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Email address of the developer user.\n\nMust be unique and valid."},"password_hash":{"type":"string","description":"Password hash for authentication.\n\nShould be securely generated and stored."}},"required":["email","password_hash"],"description":"Request body for developer user registration including email and password hash."},"ITelegramFileDownloaderDeveloper.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of developer user."},"email":{"type":"string","description":"Email address of the developer user, unique across developers."},"password_hash":{"type":"string","description":"Hashed password for authenticating the developer user."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the developer user record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the developer user record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the developer user record was soft deleted; null if active."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","password_hash","created_at","updated_at","token"],"description":"Authorized developer user information with JWT tokens."},"ITelegramFileDownloaderDeveloper.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Email address of the developer user."},"password":{"type":"string","description":"Password in plain text or a password hash depending on the authenticate process. Typically, the client sends plain password."}},"required":["email","password"],"description":"Request body containing login credentials for developer."},"ITelegramFileDownloaderDeveloper.IRefresh":{"type":"object","properties":{"refreshToken":{"type":"string","description":"Refresh token string to renew JWT access."}},"required":["refreshToken"],"description":"Refresh token payload for renewing developer access tokens."},"ITelegramFileDownloaderAdministrator":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key of the administrator user."},"email":{"type":"string","description":"Email address of the administrator user, unique across administrators."},"password_hash":{"type":"string","description":"Hashed password for authenticating the administrator user."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the administrator user record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the administrator user record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the administrator user record was soft deleted; null if active."}},"required":["id","email","password_hash","created_at","updated_at"],"description":"Administrator users who manage subscriptions, payment statuses, and logs. Store authentication credentials, email, and audit timestamps. Unique email per administrator. Supports soft deletion and timestamps for auditing user record changes.\n\n@namespace Actors\n@author AutoBE - https://github.com/wrtnlabs/autobe"},"ITelegramFileDownloaderAdministrator.ICreate":{"type":"object","properties":{"email":{"type":"string","description":"Email address of the administrator user.\n\nUnique and required for registration."},"password_hash":{"type":"string","description":"Password hash for authentication.\n\nRequired; must be securely hashed."}},"required":["email","password_hash"],"description":"Request body for creating a new administrator account. Contains required email and hashed password."},"ITelegramFileDownloaderAdministrator.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated administrator."},"email":{"type":"string","description":"Email address of the administrator user, unique across administrators."},"password_hash":{"type":"string","description":"Hashed password for authenticating the administrator user."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the administrator user record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the administrator user record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the administrator user record was soft deleted; null if active."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","password_hash","created_at","updated_at","token"],"description":"Response body for administrator authorization. Contains id and JWT token."},"ITelegramFileDownloaderAdministrator.ILogin":{"type":"object","properties":{"email":{"type":"string","description":"Email address for login.\n\nRequired string matching stored administrator email."},"password":{"type":"string","description":"Password string in plaintext for login verification."}},"required":["email","password"],"description":"Request payload for administrator login credentials."},"ITelegramFileDownloaderAdministrator.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh JWT token string.\n\nRequired for token renewal."}},"required":["refresh_token"],"description":"Request payload for refreshing administrator JWT tokens."},"ITelegramFileDownloaderEndUser":{"description":"Telegram File Downloader end user account entity representing registered users of the web dashboard. Contains email, password hash, timestamps, and optional deletion timestamp for soft delete functionality.","type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the end user."},"email":{"type":"string","format":"email","description":"Unique email address of the end user."},"password_hash":{"type":"string","description":"Hashed password used for authentication. Not exposed in response bodies for security."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the user account was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to the user account."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the user account was soft deleted. Null if active."}},"required":["id","email","password_hash","created_at","updated_at"]},"ITelegramFileDownloaderEndUser.IRequest":{"description":"Request body for searching and paginating end user accounts with optional filters such as email and deletion status.","type":"object","properties":{"page":{"type":"integer","format":"uint32","description":"Page number to retrieve."},"limit":{"type":"integer","format":"uint32","description":"Number of records per page."},"search":{"type":"string","description":"Search query string for filtering users."},"deleted":{"type":"boolean","description":"Filter for deleted users."}},"required":[]},"ITelegramFileDownloaderEndUser.IUpdate":{"description":"Request body for updating Telegram File Downloader end user properties. Allows modification of email, password hash, and deletion status.","type":"object","properties":{"email":{"type":"string","format":"email","description":"Email address of the end user."},"password_hash":{"type":"string","description":"Hashed password for authentication."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp for the user account."}},"required":[]},"ITelegramFileDownloaderDeveloper.IRequest":{"type":"object","description":"Request parameters for filtering, searching, and pagination for developer users.\n\nSupports search by email, paging, limits, deletion filter, and sort order.","properties":{"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search term for developers."},"page":{"oneOf":[{"type":"integer","format":"uint32"},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"integer","format":"uint32"},{"type":"null"}],"description":"Number of results per page."},"deleted":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Filter for deleted status."},"order":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sort order criteria."}},"required":[]},"ITelegramFileDownloaderDeveloper":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key of the developer user."},"email":{"type":"string","description":"Email address of the developer user, unique across developers."},"password_hash":{"type":"string","description":"Hashed password for authenticating the developer user."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the developer user record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the developer user record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the developer user record was soft deleted; null if active."}},"required":["id","email","password_hash","created_at","updated_at"],"description":"Developer users who access the Telegram File Downloader service via API. Store authentication credentials, email, and audit timestamps. Unique email per developer. Supports soft deletion and timestamps for auditing user record changes.\n\n@namespace Actors\n@author AutoBE - https://github.com/wrtnlabs/autobe"},"ITelegramFileDownloaderDeveloper.IUpdate":{"type":"object","properties":{"email":{"type":"string","description":"Email address of the developer user, unique across developers."},"password_hash":{"type":"string","description":"Hashed password for authenticating the developer user."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the developer user record was soft deleted; null if active."}},"required":[],"description":"Update partial data for a Telegram File Downloader developer user.\n\nAllows updating email, password hash, and soft deletion timestamp.\n\nAll fields are optional allowing partial updates."},"ITelegramFileDownloaderAdministrator.IRequest":{"type":"object","properties":{"email":{"type":"string","description":"Email address of the administrator user, unique across administrators."},"password_hash":{"type":"string","description":"Hashed password for authenticating the administrator user."},"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the administrator user record was created."},"updated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the administrator user record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the administrator user record was soft deleted; null if active."}},"required":[],"description":"Request parameters for searching/filtering administrator users.\n\nProperties are optional to allow flexible search criteria.\n\nUsed in paginated list operations to filter by email and timestamps."},"ITelegramFileDownloaderAdministrators.ICreate":{"type":"object","properties":{"email":{"type":"string","description":"Email address for the new administrator; must be unique."},"password_hash":{"type":"string","description":"Hashed password for new administrator authentication."}},"required":["email","password_hash"],"description":"Data required to create a new administrator record."},"ITelegramFileDownloaderAdministrators":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the administrator user."},"email":{"type":"string","description":"Email address of the administrator user; unique within administrators."},"password_hash":{"type":"string","description":"Hashed password for authenticating the administrator user."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the administrator was created in ISO8601 format."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the administrator was last updated in ISO8601 format."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional soft deletion timestamp; null if active."}},"required":["id","email","password_hash","created_at","updated_at"],"description":"Administrator user entity storing authentication credentials including email, hashed password, timestamps, and soft-deletion status."},"ITelegramFileDownloaderAdministrators.IUpdate":{"type":"object","properties":{"email":{"type":"string","description":"Optional email for updating the administrator user."},"password_hash":{"type":"string","description":"Optional updated hashed password string."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional soft deletion timestamp to mark as deleted or null for active."}},"required":[],"description":"Partial data for updating an existing administrator. Properties are optional."},"ITelegramFileDownloaderDownloadJobs.IRequest":{"type":"object","properties":{"enduser_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by end user ID who submitted the download jobs."},"developer_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by developer ID who submitted the download jobs."},"status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by download job status (e.g., \"pending\", \"completed\")."},"channel_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by Telegram channel or group ID."},"created_after":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter for jobs created after this date (ISO 8601)."},"created_before":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter for jobs created before this date (ISO 8601)."},"order_by":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sorting field, e.g., \"created_at\" or \"updated_at\"."},"page":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Pagination page number (uint32)."},"limit":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Pagination result limit per page (uint32)."}},"required":[],"description":"Request body for filtered and paginated listing of download jobs."},"ITelegramFileDownloaderDownloadJob":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the download job.\n\nThis identifier links the job to either an end user or a developer."},"enduser_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Reference to the end user who submitted the download job.\n\nNullable because the job could belong to a developer instead."},"developer_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Reference to the developer who submitted the download job.\n\nNullable because the job could belong to an end user instead."},"channel_id":{"type":"string","description":"Telegram channel or group identifier for the files to be downloaded.\nThis is mandatory to specify the target channel/group."},"file_types":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Comma-separated string list of file types/extensions to filter downloads.\nNullable to allow downloading without specific file type filtering."},"date_start":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Inclusive start datetime for filtering files by the date shared.\nUses ISO 8601 format with timezone.\nNullable to signify no start date filtering."},"date_end":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Inclusive end datetime for filtering files by the date shared.\nUses ISO 8601 format with timezone.\nNullable to signify no end date filtering."},"status":{"type":"string","description":"Status of the download job such as 'pending', 'in_progress', 'completed', or 'failed'.\nRepresents the current processing state."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of creation for this download job.\nISO 8601 date-time with timezone."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to this download job.\nISO 8601 date-time with timezone."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp marking soft deletion of this download job.\nNull if the job is active."}},"required":["id","channel_id","status","created_at","updated_at"],"description":"Download job entity storing request details including channel ID, file filters, date range, status, and timestamps."},"ITelegramFileDownloaderDownloadJob.ICreate":{"type":"object","properties":{"channel_id":{"type":"string","description":"Telegram channel or group identifier for the download target.\nRequired to initiate a new download job."},"file_types":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional comma-separated file type filters, e.g., \"mp4,zip,jpg,pdf\".\nAllows limiting files to specified types."},"date_start":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional inclusive start date for download filtering.\nMust be in ISO 8601 date-time format with timezone."},"date_end":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional inclusive end date for download filtering.\nMust be in ISO 8601 date-time format with timezone."}},"required":["channel_id"],"description":"Request body for creating a new download job, specifying mandatory and optional filters."},"ITelegramFileDownloaderDownloadJob.IUpdate":{"type":"object","properties":{"channel_id":{"type":"string","description":"Optional updated channel or group identifier for the download job."},"file_types":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional updated comma-separated file type filters."},"date_start":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional updated inclusive start date."},"date_end":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional updated inclusive end date."},"status":{"type":"string","description":"Optional updated status of the download job, e.g., 'pending', 'completed', or 'failed'."}},"required":[],"description":"Request body for updating an existing download job with optional fields."},"ITelegramFileDownloaderFiles.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Optional page number for pagination, starting from 1."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Optional limit for number of records per page."},"sort":{"oneOf":[{"type":"array","items":{"type":"string"}},{"type":"null"}],"description":"Optional array of sorting strings, e.g., [\"filename:asc\", \"file_size_bytes:desc\"]."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional search text to filter filenames or metadata."}},"required":[],"description":"Parameters for filtering, sorting, and paginating files in download listings."},"ITelegramFileDownloaderFiles":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key (UUID) uniquely identifying the downloaded file record."},"download_job_id":{"type":"string","format":"uuid","description":"Foreign key referencing the associated download job."},"filename":{"type":"string","description":"Name of the downloaded file, including its extension."},"file_extension":{"type":"string","description":"File extension or MIME type of the downloaded file, e.g., mp4, zip, jpg, pdf."},"file_size_bytes":{"type":"integer","description":"Size of the file in bytes."},"s3_url":{"type":"string","description":"Signed URL granting temporary authenticated access to the file stored in AWS S3."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the file record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the file record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the file record was soft deleted; null if active."}},"required":["id","download_job_id","filename","file_extension","file_size_bytes","s3_url","created_at","updated_at"],"description":"Represents a file downloaded from a Telegram channel or group, associated with a download job. Stores metadata including name, type, size, and a signed AWS S3 URL for secure access.\n\nIncludes timestamps for creation, updates, and supports soft deletion."},"ITelegramFileDownloaderFiles.ICreate":{"type":"object","properties":{"download_job_id":{"type":"string","format":"uuid","description":"Foreign key referencing the associated download job."},"filename":{"type":"string","description":"Name of the downloaded file, including its extension."},"file_extension":{"type":"string","description":"File extension or MIME type of the downloaded file, e.g., mp4, zip, jpg, pdf."},"file_size_bytes":{"type":"integer","description":"Size of the file in bytes."},"s3_url":{"type":"string","description":"Signed URL granting temporary authenticated access to the file stored in AWS S3."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the file record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the file record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the file record was soft deleted; null if active."}},"required":["download_job_id","filename","file_extension","file_size_bytes","s3_url","created_at","updated_at"],"description":"Input type used when creating a new file record for a Telegram download job.\n\nIncludes required references, file metadata, timestamps, and optional soft delete indicator."},"ITelegramFileDownloaderFiles.IUpdate":{"type":"object","properties":{"download_job_id":{"type":"string","format":"uuid","description":"Foreign key referencing the associated download job."},"filename":{"type":"string","description":"Name of the downloaded file, including its extension."},"file_extension":{"type":"string","description":"File extension or MIME type of the downloaded file, e.g., mp4, zip, jpg, pdf."},"file_size_bytes":{"type":"integer","description":"Size of the file in bytes."},"s3_url":{"type":"string","description":"Signed URL granting temporary authenticated access to the file stored in AWS S3."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the file record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the file record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the file record was soft deleted; null if active."}},"required":[],"description":"Input type for updating an existing file record. All fields are optional; only provided fields will be updated."},"ITelegramFileDownloaderStorageUsage.IRequest":{"type":"object","properties":{"enduser_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional filter for end user ID, null disables filter."},"developer_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional filter for developer ID, null disables filter."},"storage_bytes_used_min":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Minimum storage bytes used filter, null disables filter."},"storage_bytes_used_max":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Maximum storage bytes used filter, null disables filter."},"file_count_min":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Minimum file count filter, null disables filter."},"file_count_max":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Maximum file count filter, null disables filter."},"quota_max_bytes_min":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Minimum quota max bytes filter, null disables filter."},"quota_max_bytes_max":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Maximum quota max bytes filter, null disables filter."},"created_at_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Start creation date-time filter in ISO 8601 format, null disables filter."},"created_at_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"End creation date-time filter in ISO 8601 format, null disables filter."},"updated_at_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Start last update date-time filter in ISO 8601 format, null disables filter."},"updated_at_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"End last update date-time filter in ISO 8601 format, null disables filter."},"deleted_at_null":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Filter by soft deletion status, true for deleted only, false for active only, null disables filter."},"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number for pagination, null uses default."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Limit of records per page, null uses default."},"orderBy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Field name to order results by, null disables ordering."},"orderDirection":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort direction 'asc' or 'desc', null disables ordering."}},"required":[],"description":"Request schema for filtering and paginating storage usage records. Supports filters for user IDs, storage usage ranges, file counts, quotas, created/updated date ranges, soft delete flag, pagination, sorting."},"ITelegramFileDownloaderStorageUsage":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key identifier of the storage usage record."},"enduser_id":{"type":"string","format":"uuid","description":"Belonged end user's ID."},"developer_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Belonged developer's ID. Nullable."},"storage_bytes_used":{"type":"integer","description":"Amount of storage used in bytes by the user."},"file_count":{"type":"integer","description":"Number of files stored by the user."},"quota_max_bytes":{"type":"integer","description":"Maximum storage quota in bytes allowed by the user's subscription plan."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the usage record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the usage record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp; null if active."}},"required":["id","enduser_id","storage_bytes_used","file_count","quota_max_bytes","created_at","updated_at"],"description":"Tracking of storage usage by users to enforce quota limits on downloaded files and storage allocation.\n\n@namespace FileManagement\n@auther AutoBE - https://github.com/wrtnlabs/autobe"},"ITelegramFileDownloaderStorageUsage.ICreate":{"type":"object","properties":{"enduser_id":{"type":"string","format":"uuid","description":"Belonged end user's {@link telegram_file_downloader_endusers.id}.\n\nUUID string reference to an end user owning this storage usage record."},"developer_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Belonged developer's {@link telegram_file_downloader_developers.id}.\n\nUUID string reference to a developer owning this record, optional.\nRepresents programmatic users with API access."},"storage_bytes_used":{"type":"integer","format":"int32","description":"Amount of storage used in bytes by the user.\n\nInteger number representing total bytes consumed within user's quota."},"file_count":{"type":"integer","format":"int32","description":"Number of files stored by the user.\n\nInteger count of files currently stored."},"quota_max_bytes":{"type":"integer","format":"int32","description":"Maximum storage quota in bytes allowed by the user's subscription plan."}},"required":["enduser_id","storage_bytes_used","file_count","quota_max_bytes"],"description":"Data required to create a new storage usage record.\n\nMust include all identifiers and usage metrics. Created_at and updated_at are server-generated."},"ITelegramFileDownloaderStorageUsage.IUpdate":{"type":"object","properties":{"enduser_id":{"type":"string","format":"uuid","description":"Belonged end user's {@link telegram_file_downloader_endusers.id}.\n\nUUID string reference to an end user owning this storage usage record."},"developer_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Belonged developer's {@link telegram_file_downloader_developers.id}.\n\nUUID string reference to a developer owning this record, optional.\nRepresents programmatic users with API access."},"storage_bytes_used":{"type":"integer","format":"int32","description":"Amount of storage used in bytes by the user.\n\nInteger number representing total bytes consumed within user's quota."},"file_count":{"type":"integer","format":"int32","description":"Number of files stored by the user.\n\nInteger count of files currently stored."},"quota_max_bytes":{"type":"integer","format":"int32","description":"Maximum storage quota in bytes allowed by the user's subscription plan."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp; null if active.\n\nNullable date-time string indicating when record was soft deleted; null if still active."}},"required":[],"description":"Data for updating an existing storage usage record.\n\nAll properties are optional except server-managed fields.\nDeleted_at may be set to indicate soft deletion."},"ITelegramFileDownloaderDownloadJobStatus.IRequest":{"description":"Request parameters for querying and filtering download job statuses.","type":"object","properties":{"page":{"type":"integer","format":"uint32","description":"Current page number."},"limit":{"type":"integer","format":"uint32","description":"Record limit per page."},"search":{"type":"string","description":"General search term filter."},"status_code":{"type":"string","description":"Specific download job status code filter."}},"required":[]},"ITelegramFileDownloaderDownloadJobStatus":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"status_code":{"type":"string","description":"Unique status code string (e.g., pending, in_progress, completed, failed)."},"description":{"type":"string","description":"Human-readable description of the status code."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the status record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the status record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp; null if active."}},"required":["id","status_code","description","created_at","updated_at"],"description":"Master list of possible status codes for download jobs, used for reference and validation.\n\nProvides unique, human-readable status codes and descriptions used to track the lifecycle state of download jobs.\n\nSupports soft deletion via the deleted_at timestamp.\n\nContains audit timestamps for creation and updates."},"ITelegramFileDownloaderSubscriptionPlans.IRequest":{"type":"object","properties":{"code":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Unique code identifier for the subscription plan."},"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Human-readable name of the subscription plan."},"price":{"oneOf":[{"type":"number","format":"double"},{"type":"null"}],"description":"Monthly price of the plan in USD."},"max_files_per_day":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Maximum number of files that can be downloaded per day under this plan."},"max_file_size_mb":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Maximum allowed file size per download in megabytes."},"total_storage_mb":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Total storage quota in megabytes for this plan."},"status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Current status of the subscription plan, e.g., active, inactive."},"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Limitation of records per a page."}},"required":[],"description":"Request parameters for searching and filtering subscription plans with pagination."},"ITelegramFileDownloaderSubscriptionPlans.ICreate":{"type":"object","properties":{"code":{"type":"string","description":"Unique code identifier for the subscription plan."},"name":{"type":"string","description":"Human-readable name of the subscription plan."},"price":{"type":"number","format":"double","description":"Monthly price of the plan in USD."},"max_files_per_day":{"type":"integer","description":"Maximum number of files that can be downloaded per day under this plan."},"max_file_size_mb":{"type":"integer","description":"Maximum allowed file size per download in megabytes."},"total_storage_mb":{"type":"integer","description":"Total storage quota in megabytes for this plan."},"status":{"type":"string","description":"Current status of the subscription plan, e.g., active, inactive."}},"required":["code","name","price","max_files_per_day","max_file_size_mb","total_storage_mb","status"],"description":"Payload for creating a new subscription plan including all mandatory details such as code, name, pricing, limits, and status."},"ITelegramFileDownloaderSubscriptionPlans":{"description":"Defines the subscription plans available for users, including pricing, features, and status. Subscription plans are managed independently and referenced by user subscriptions. Includes business context for plan lifecycle management and billing operations.","type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"code":{"type":"string","description":"Unique code identifier for the subscription plan."},"name":{"type":"string","description":"Human-readable name of the subscription plan."},"price":{"type":"number","format":"double","description":"Monthly price of the plan in USD."},"max_files_per_day":{"type":"integer","format":"int32","description":"Maximum number of files that can be downloaded per day under this plan."},"max_file_size_mb":{"type":"integer","format":"int32","description":"Maximum allowed file size per download in megabytes."},"total_storage_mb":{"type":"integer","format":"int32","description":"Total storage quota in megabytes for this plan."},"status":{"type":"string","description":"Current status of the subscription plan, e.g., active, inactive."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this subscription plan was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this subscription plan was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when this subscription plan was soft deleted, if applicable."}},"required":["id","code","name","price","max_files_per_day","max_file_size_mb","total_storage_mb","status","created_at","updated_at"]},"ITelegramFileDownloaderSubscriptionPlans.IUpdate":{"description":"Allows partial updates to subscription plan details like code, name, price, limits, and status.\n\nFields are optional and represent new values to set.","type":"object","properties":{"code":{"type":"string","description":"Unique code identifier for the subscription plan."},"name":{"type":"string","description":"Human-readable name of the subscription plan."},"price":{"type":"number","format":"double","description":"Monthly price of the plan in USD."},"max_files_per_day":{"type":"integer","format":"int32","description":"Maximum number of files that can be downloaded per day under this plan."},"max_file_size_mb":{"type":"integer","format":"int32","description":"Maximum allowed file size per download in megabytes."},"total_storage_mb":{"type":"integer","format":"int32","description":"Total storage quota in megabytes for this plan."},"status":{"type":"string","description":"Current status of the subscription plan, e.g., active, inactive."}},"required":[]},"ITelegramFileDownloaderPayment.IRequest":{"description":"Parameters to filter and paginate the listing of payments in the system.\n\nOptional filters include subscription plan, user, provider, status, and date range.","type":"object","properties":{"subscription_plan_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter payments by subscription plan UUID."},"user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter payments by user UUID (end user or developer)."},"payment_provider":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter payments by payment gateway provider (e.g., Stripe)."},"payment_status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter payments by status (e.g. pending, succeeded, failed)."},"payment_date_start":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Start date filter for payment date (inclusive)."},"payment_date_end":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"End date filter for payment date (inclusive)."},"page":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Limit of records per page for pagination."}},"required":[]},"ITelegramFileDownloaderPayment":{"description":"Records payment events from users subscribing to plans. Stores payment metadata, statuses and links to subscription plans and user identities. Critical for billing and subscription status tracking.","type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"subscription_plan_id":{"type":"string","format":"uuid","description":"Referenced subscription plan for this payment."},"user_id":{"type":"string","format":"uuid","description":"Reference to the paying user (enduser or developer)."},"payment_provider":{"type":"string","description":"Payment gateway provider, e.g., Stripe."},"payment_status":{"type":"string","description":"Status of the payment, e.g., pending, succeeded, failed."},"payment_amount":{"type":"number","format":"double","description":"Amount paid in USD."},"payment_currency":{"type":"string","description":"Currency code, e.g., USD."},"payment_reference_id":{"type":"string","description":"External payment reference ID from the provider."},"payment_date":{"type":"string","format":"date-time","description":"Timestamp of the payment event."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp."}},"required":["id","subscription_plan_id","user_id","payment_provider","payment_status","payment_amount","payment_currency","payment_reference_id","payment_date","created_at","updated_at"]},"ITelegramFileDownloaderPayment.ICreate":{"description":"Request body to create a new payment record for a user subscription event, including payment provider, status, amounts, and related timestamps.","type":"object","properties":{"subscription_plan_id":{"type":"string","format":"uuid","description":"Referenced subscription plan for this payment."},"user_id":{"type":"string","format":"uuid","description":"Reference to the paying user (enduser or developer)."},"payment_provider":{"type":"string","description":"Payment gateway provider, e.g., Stripe."},"payment_status":{"type":"string","description":"Status of the payment, e.g., pending, succeeded, failed."},"payment_amount":{"type":"number","format":"double","description":"Amount paid in USD."},"payment_currency":{"type":"string","description":"Currency code, e.g., USD."},"payment_reference_id":{"type":"string","description":"External payment reference ID from the provider."},"payment_date":{"type":"string","format":"date-time","description":"Timestamp of the payment event."}},"required":["subscription_plan_id","user_id","payment_provider","payment_status","payment_amount","payment_currency","payment_reference_id","payment_date"]},"ITelegramFileDownloaderPayments":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier of the payment."},"subscription_plan_id":{"type":"string","format":"uuid","description":"Referenced subscription plan ID.\n\nMust be a valid UUID."},"user_id":{"type":"string","format":"uuid","description":"ID of the paying user (enduser or developer).\n\nMust be a valid UUID."},"payment_provider":{"type":"string","description":"Payment provider name (e.g., Stripe).\n\nShould be a known payment gateway identifier."},"payment_status":{"type":"string","description":"Current status of the payment.\n\nExamples include: 'pending', 'succeeded', 'failed'.\n\nMust match one of the allowed payment statuses."},"payment_amount":{"type":"number","description":"Amount paid in USD.\n\nShould be a positive double precision number."},"payment_currency":{"type":"string","description":"Currency code in ISO 4217 format (e.g., \"USD\")."},"payment_reference_id":{"type":"string","description":"External payment reference ID.\n\nShould be unique per payment."},"payment_date":{"type":"string","format":"date-time","description":"Date and time when the payment was made.\n\nISO 8601 date-time string."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of record creation."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp. Null if active."}},"required":["id","subscription_plan_id","user_id","payment_provider","payment_status","payment_amount","payment_currency","payment_reference_id","payment_date","created_at","updated_at"],"description":"Payment records store events from users subscribing to plans. They track payment metadata (provider, status, amounts, currency, etc.) essential for billing and subscription management.\n\nThe unique ID field assures distinct payments. Reference fields link payments to subscription plans and paying users. These records enforce payment processing consistency and support auditing.\n\nSensitive data like raw credentials are excluded, maintaining privacy and security."},"ITelegramFileDownloaderPayments.IUpdate":{"type":"object","properties":{"subscription_plan_id":{"type":"string","format":"uuid","description":"Referenced subscription plan ID.\n\nMust be a valid UUID."},"user_id":{"type":"string","format":"uuid","description":"ID of the paying user (enduser or developer).\n\nMust be a valid UUID."},"payment_provider":{"type":"string","description":"Payment provider name (e.g., Stripe).\n\nShould be a known payment gateway identifier."},"payment_status":{"type":"string","description":"Current status of the payment.\n\nExamples include: 'pending', 'succeeded', 'failed'.\n\nMust match one of the allowed payment statuses."},"payment_amount":{"type":"number","description":"Amount paid in USD.\n\nShould be a positive double precision number."},"payment_currency":{"type":"string","description":"Currency code in ISO 4217 format (e.g., \"USD\")."},"payment_reference_id":{"type":"string","description":"External payment reference ID.\n\nShould be unique per payment."},"payment_date":{"type":"string","format":"date-time","description":"Date and time when the payment was made.\n\nISO 8601 date-time string."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of record creation."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp. Null if active."}},"required":[],"description":"Partial update schema for payment records. Fields are optional and allow updating payment metadata, status, and timestamps. Soft delete timestamp can be set or nulled."},"ITelegramFileDownloaderTransactions":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"payment_id":{"type":"string","format":"uuid","description":"Associated payment record. {@link telegram_file_downloader_payments.id}"},"user_id":{"type":"string","format":"uuid","description":"Reference to user who performed the transaction. {@link telegram_file_downloader_endusers.id} or {@link telegram_file_downloader_developers.id}"},"transaction_type":{"type":"string","description":"Type of transaction, e.g., charge, refund."},"transaction_status":{"type":"string","description":"Status of the transaction, e.g., succeeded, failed, pending."},"transaction_amount":{"type":"number","format":"double","description":"Amount involved in the transaction in USD."},"transaction_date":{"type":"string","format":"date-time","description":"Timestamp when the transaction occurred."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp."}},"required":["id","payment_id","user_id","transaction_type","transaction_status","transaction_amount","transaction_date","created_at","updated_at"],"description":"Detailed payment transaction entity representing financial transaction records tied to user payments."},"ITelegramFileDownloaderTransactions.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","format":"uint32"},{"type":"null"}],"description":"Page number."},"limit":{"oneOf":[{"type":"integer","format":"uint32"},{"type":"null"}],"description":"Number of records per page."},"transaction_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by transaction type (optional)."},"transaction_status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by transaction status (optional)."},"user_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by user ID (optional)."},"date_start":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter by date range start."},"date_end":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter by date range end."}},"required":[],"description":"Search and pagination parameters for filtering payment transaction records. Supports optional filters for type, status, user, and date ranges to generate paged results."},"ITelegramFileDownloaderTransactions.ICreate":{"type":"object","properties":{"payment_id":{"type":"string","format":"uuid","description":"Associated payment record. {@link telegram_file_downloader_payments.id}"},"user_id":{"type":"string","format":"uuid","description":"Reference to user who performed the transaction. {@link telegram_file_downloader_endusers.id} or {@link telegram_file_downloader_developers.id}"},"transaction_type":{"type":"string","description":"Type of transaction, e.g., charge, refund."},"transaction_status":{"type":"string","description":"Status of the transaction, e.g., succeeded, failed, pending."},"transaction_amount":{"type":"number","format":"double","description":"Amount involved in the transaction in USD."},"transaction_date":{"type":"string","format":"date-time","description":"Timestamp when the transaction occurred."}},"required":["payment_id","user_id","transaction_type","transaction_status","transaction_amount","transaction_date"],"description":"Request body to create a new payment transaction entry tied to user payments."},"ITelegramFileDownloaderTransactions.IUpdate":{"type":"object","properties":{"payment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Associated payment record. {@link telegram_file_downloader_payments.id}"},"user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Reference to user who performed the transaction. {@link telegram_file_downloader_endusers.id} or {@link telegram_file_downloader_developers.id}"},"transaction_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Type of transaction, e.g., charge, refund."},"transaction_status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Status of the transaction, e.g., succeeded, failed, pending."},"transaction_amount":{"oneOf":[{"type":"number","format":"double"},{"type":"null"}],"description":"Amount involved in the transaction in USD."},"transaction_date":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the transaction occurred."}},"required":[],"description":"Request body to update payment transaction entries. Supports partial updates with nullable fields."},"ITelegramFileDownloaderTelegramApiCredentials.IRequest":{"type":"object","properties":{"bot_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"The display name of the Telegram bot."},"is_active":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Flag indicating if this credential is currently active and used for operations."},"last_used_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of the last time this credential was used to make an API call."},"page":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Number of records per page for pagination."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"General search string for filtering credentials."}},"required":[],"description":"Request body for searching Telegram API credentials with filters and pagination."},"ITelegramFileDownloaderTelegramApiCredential":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"bot_name":{"type":"string","description":"The display name of the Telegram bot."},"bot_token":{"type":"string","description":"The secret bot token used for authenticating Telegram API calls."},"is_active":{"type":"boolean","description":"Flag indicating if this credential is currently active and used for operations."},"last_used_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of the last time this credential was used to make an API call."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record last updated timestamp."}},"required":["id","bot_name","bot_token","is_active","created_at","updated_at"],"description":"Telegram API credential entity representing authentication credentials and metadata for Telegram bot instances."},"ITelegramFileDownloaderTelegramApiCredential.ICreate":{"type":"object","properties":{"bot_name":{"type":"string","description":"The display name of the Telegram bot.\n\n@example \"MyTelegramBot\""},"bot_token":{"type":"string","description":"The secret bot token used for authenticating Telegram API calls.\n\nNote: This field may contain sensitive data and should be handled securely.\n\n@example \"123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11\""},"is_active":{"type":"boolean","description":"Flag indicating if this credential is currently active and used for operations."}},"required":["bot_name","bot_token","is_active"],"description":"Request body for creating new Telegram API credential.\n\nIncludes bot name, secret token, and active status flag."},"ITelegramFileDownloaderTelegramApiCredential.IUpdate":{"type":"object","properties":{"bot_name":{"type":"string","description":"The display name of the Telegram bot.\n\n@example \"MyTelegramBot\""},"bot_token":{"type":"string","description":"The secret bot token used for authenticating Telegram API calls.\n\nNote: This field may contain sensitive data and should be handled securely.\n\n@example \"123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11\""},"is_active":{"type":"boolean","description":"Flag indicating if this credential is currently active and used for operations."}},"required":["bot_name","bot_token","is_active"],"description":"Request body for updating Telegram API credential.\n\nAllows optional modification of bot name, token, and active flag."},"ITelegramFileDownloaderStripeWebhookLogs.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Page number."},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Limitation of records per a page.\n\n@default 100"},"event_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by event type for webhook logs."},"processed":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Filter by processing status."}},"required":[],"description":"Request body for searching and filtering Stripe webhook logs.\n\nIncludes pagination and filter parameters."},"ITelegramFileDownloaderStripeWebhookLogs":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"event_id":{"type":"string","description":"Unique identifier of the Stripe webhook event."},"event_type":{"type":"string","description":"Type of Stripe event, e.g., 'payment_intent.succeeded', 'invoice.payment_failed'."},"payload":{"type":"string","description":"Full JSON payload of the webhook event stored as string."},"received_at":{"type":"string","format":"date-time","description":"Timestamp when the webhook was received by the system."},"processed":{"type":"boolean","description":"Flag indicating if the webhook event has been processed successfully."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record last updated timestamp."}},"required":["id","event_id","event_type","payload","received_at","processed","created_at","updated_at"],"description":"Stripe webhook event log.\n\nRepresents a record of an event received from Stripe webhooks, including event metadata, payload, and processing status."},"ITelegramFileDownloaderAwsS3UploadLogs.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Page number for pagination"},"limit":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Number of items per page"},"file_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter logs for files with this exact name"},"upload_status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by upload status such as 'success' or 'failed'"},"attempted_at_start":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter logs with upload attempt timestamps after this date/time"},"attempted_at_end":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter logs with upload attempt timestamps before this date/time"},"order_by":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Column name to order results by"},"order_direction":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sorting order direction"}},"required":[],"description":"Request parameters for filtering and paginating AWS S3 upload logs"},"ITelegramFileDownloaderAwsS3UploadLogs":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key"},"file_name":{"type":"string","description":"Name of the file uploaded to AWS S3"},"file_size_bytes":{"type":"integer","format":"int32","description":"Size of the uploaded file in bytes"},"upload_status":{"type":"string","description":"Status of the upload operation, e.g., 'success', 'failed'"},"error_message":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Error details if the upload failed; null if successful"},"attempted_at":{"type":"string","format":"date-time","description":"Timestamp when the upload attempt was made"},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp"},"updated_at":{"type":"string","format":"date-time","description":"Record last updated timestamp"}},"required":["id","file_name","file_size_bytes","upload_status","attempted_at","created_at","updated_at"],"description":"Logs all file upload attempts to AWS S3 including success or failure status, file metadata, and error information for auditability and troubleshooting."},"ITelegramFileDownloaderJobQueue.IRequest":{"type":"object","properties":{"status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter jobs by status such as 'pending', 'processing', 'failed', or 'completed'"},"priority":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Filter jobs by priority level"},"min_retries":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Filter jobs by minimum retry count"},"max_retries":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Filter jobs by maximum retry count"},"last_error_message_contains":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter jobs where last error message contains the specified string"},"page":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Page number to retrieve"},"limit":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Number of jobs per page"},"order_by":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sort results by specified column"},"order_direction":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort order direction"}},"required":[],"description":"Request parameters to filter and paginate job queues"},"ITelegramFileDownloaderJobQueue":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"job_id":{"type":"string","format":"uuid","description":"Reference to the file download job. Links to the telegram_file_downloader_download_jobs.id."},"status":{"type":"string","description":"Current status of the job in the queue, e.g., 'pending', 'processing', 'failed', 'completed'."},"priority":{"type":"integer","description":"Priority level for job processing, higher value means higher priority.","minimum":0},"retries":{"type":"integer","description":"Number of times this job has been retried due to failure.","minimum":0},"last_error_message":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Last error message if job processing failed."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this job queue entry was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this job queue entry was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp, if the job queue entry has been logically deleted."}},"required":["id","job_id","status","priority","retries","created_at","updated_at"],"description":"Job queue entries representing file download tasks queued for processing. Contains metadata about job status, priority, retry attempts, and timestamps for queueing and processing."},"ITelegramFileDownloaderJobQueue.ICreate":{"type":"object","properties":{"job_id":{"type":"string","format":"uuid","description":"Reference to the file download job. Links to the telegram_file_downloader_download_jobs.id."},"status":{"type":"string","description":"Current status of the job in the queue, e.g., 'pending', 'processing', 'failed', 'completed'."},"priority":{"type":"integer","description":"Priority level for job processing, higher value means higher priority.","minimum":0},"retries":{"type":"integer","description":"Number of times this job has been retried due to failure.","minimum":0},"last_error_message":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Last error message if job processing failed."}},"required":["job_id","status","priority","retries"],"description":"Request body to create a new job queue entry for a file download task."},"ITelegramFileDownloaderJobQueue.IUpdate":{"type":"object","properties":{"status":{"type":"string","description":"Current status of the job in the queue, e.g., 'pending', 'processing', 'failed', 'completed'."},"priority":{"type":"integer","description":"Priority level for job processing, higher value means higher priority.","minimum":0},"retries":{"type":"integer","description":"Number of times this job has been retried due to failure.","minimum":0},"last_error_message":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Last error message if job processing failed."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp, if the job queue entry has been logically deleted."}},"required":[],"description":"Request body to update an existing job queue entry."},"ITelegramFileDownloaderErrorLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"error_code":{"type":"string","description":"Error code identifier for categorizing the type of error."},"error_message":{"type":"string","description":"Detailed error message or stack trace information."},"source_component":{"type":"string","description":"The system component or module where the error originated."},"occurred_at":{"type":"string","format":"date-time","description":"Timestamp when the error occurred."},"resolved":{"type":"boolean","description":"Flag indicating whether the error has been resolved."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this error log was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this error log was last updated."}},"required":["id","error_code","error_message","source_component","occurred_at","resolved","created_at","updated_at"],"description":"Error logs recording system failures, exceptions, and notable errors encountered during file download processing and other backend operations."},"ITelegramFileDownloaderErrorLog.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Limitation of records per a page."},"filter_error_code":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter logs by error code."},"filter_resolved":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Filter logs by resolved status."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search term for error message or source component."},"order":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Ordering of results, e.g., by 'occurred_at desc'."}},"required":[],"description":"Request body to search and paginate error logs."},"ITelegramFileDownloaderAuditLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"error_code":{"type":"string","description":"Error code identifier for categorizing the type of error."},"error_message":{"type":"string","description":"Detailed error message or stack trace information."},"source_component":{"type":"string","description":"The system component or module where the error originated."},"occurred_at":{"type":"string","format":"date-time","description":"Timestamp when the error occurred."},"resolved":{"type":"boolean","description":"Flag indicating whether the error has been resolved."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this error log was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this error log was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp; null if resolved."}},"required":["id","error_code","error_message","source_component","occurred_at","resolved","created_at","updated_at"],"description":"Error logs recording system failures, exceptions, and notable errors encountered during file download processing and other backend operations.\n\nUsed for troubleshooting and monitoring system health.\n"},"ITelegramFileDownloaderAuditLog.IRequest":{"type":"object","properties":{"error_code":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter criteria for error code in logs."},"resolved":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Filter logs by resolution status."},"occurred_at_start":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Start date for filtering logs."},"occurred_at_end":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"End date for filtering logs."},"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Number of records per page."},"sort_by":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Field to sort by."},"sort_order":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort order: ascending or descending."}},"required":[],"description":"Request schema for filtering, sorting, and paginating error logs."},"ITelegramFileDownloaderBillingLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"telegram_file_downloader_payment_id":{"type":"string","format":"uuid","description":"Related payment record."},"event_type":{"type":"string","description":"Type of billing event (e.g., 'payment_success', 'refund', 'chargeback')."},"event_timestamp":{"type":"string","format":"date-time","description":"Timestamp when the event occurred."},"details":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Additional details or metadata JSON about the billing event."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp for billing logs."}},"required":["id","telegram_file_downloader_payment_id","event_type","event_timestamp","created_at","updated_at"],"description":"Billing log entries capturing payment transactions and billing related events in the Telegram File Downloader system.\n\nUsed by administrators to review and reconcile billing activity."},"ITelegramFileDownloaderBillingLog.IRequest":{"type":"object","properties":{"telegram_file_downloader_payment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by related payment record."},"event_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by billing event type."},"event_timestamp_start":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Start date for event filter."},"event_timestamp_end":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"End date for event filter."},"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Page size for pagination."},"sort_by":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sort criteria field."},"sort_order":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort order direction."}},"required":[],"description":"Pagination request for billing log search with filters."},"ITelegramFileDownloaderSubscriptionAudit.IRequest":{"type":"object","description":"Request body includes pagination, filter criteria, and sorting options for subscription audit records.","properties":{"page":{"type":"integer","format":"int32","description":"Page number for pagination"},"limit":{"type":"integer","format":"int32","description":"Number of records per page"},"filter":{"type":"object","description":"Filter criteria for subscription audit records","properties":{"user_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by user ID"},"change_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by type of subscription change"},"subscription_plan_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by subscription plan ID"},"notes":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Additional notes filter"},"created_at":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Creation date filter"},"updated_at":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Update date filter"},"deleted_at":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Soft deletion date filter"}},"required":[]},"sort":{"type":"object","description":"Sorting criteria","properties":{"orderBy":{"type":"string","description":"Field to sort by"},"direction":{"oneOf":[{"const":"asc","description":"Sort direction"},{"const":"desc","description":"Sort direction"}],"description":"Sort direction"}},"required":[]}},"required":[]},"ITelegramFileDownloaderSubscriptionAudits":{"type":"array","description":"Array of subscription audit records representing changes and events related to user subscriptions.","items":{"$ref":"#/components/schemas/ITelegramFileDownloaderSubscriptionAudit"}},"ITelegramFileDownloaderDeveloper.ISummary":{"type":"object","description":"Summary information of the Telegram File Downloader developer user for list views, excluding sensitive authentication fields.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the developer user"},"email":{"type":"string","description":"Email address of the developer user"}},"required":["id","email"]},"ITelegramFileDownloaderEndUser.ISummary":{"type":"object","description":"Summary information of the Telegram File Downloader end user for list views. Excludes sensitive password details.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the Telegram File Downloader end user"},"email":{"type":"string","description":"Email address of the Telegram File Downloader end user"}},"required":["id","email"]},"ITelegramFileDownloaderDownloadJobs":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique UUID identifying the download job."},"enduser_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Belonged end user's telegram_file_downloader_endusers.id.\n\nNullable for developer-initiated jobs."},"developer_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Belonged developer's telegram_file_downloader_developers.id.\n\nNullable for end user-initiated jobs."},"channel_id":{"type":"string","description":"Telegram channel or group identifier targeted for file download.\n\nRepresented as a string unique to the target Telegram resource."},"file_types":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Comma-separated list of requested file extensions for filtering, e.g., \"mp4,zip,jpg,pdf\"."},"date_start":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Start date of inclusive date range to filter files.\n\nISO 8601 date-time format."},"date_end":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"End date of inclusive date range to filter files.\n\nISO 8601 date-time format."},"status":{"type":"string","description":"Current status code of the download job (e.g., pending, in_progress, completed, failed)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the download job was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the download job was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp for logical deletion; null if active."}},"required":["id","channel_id","status","created_at","updated_at"],"description":"User-submitted download job requests capturing parameters such as channel ID, filters, and status. Used to track download lifecycle and quota enforcement.\n\n@namespace FileManagement\n@auther AutoBE - https://github.com/wrtnlabs/autobe"},"ITelegramFileDownloaderDownloadJobs.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key ID of the download job request."},"channel_id":{"type":"string","description":"Telegram channel or group identifier targeted for file download."},"status":{"type":"string","description":"Current status of the download job (e.g., pending, in_progress, completed, failed)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the download job was created."}},"required":["id","channel_id","status","created_at"],"description":"Summary information of a download job request for list views."},"ITelegramFileDownloaderStorageUsage.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key ID of the storage usage record."},"storage_bytes_used":{"type":"integer","description":"Amount of storage used in bytes by the user."},"file_count":{"type":"integer","description":"Number of files stored by the user."},"quota_max_bytes":{"type":"integer","description":"Maximum storage quota in bytes allowed by the user's subscription plan."}},"required":["id","storage_bytes_used","file_count","quota_max_bytes"],"description":"Summary of storage usage record for overview and monitoring."},"ITelegramFileDownloaderTelegramApiCredentials":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key of the Telegram API credentials record."},"bot_name":{"type":"string","description":"The display name of the Telegram bot."},"bot_token":{"type":"string","description":"The secret bot token used for authenticating Telegram API calls."},"is_active":{"type":"boolean","description":"Flag indicating if this credential is currently active and used for operations."},"last_used_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of the last time this credential was used to make an API call."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record last updated timestamp."}},"required":["id","bot_name","bot_token","is_active","created_at","updated_at"],"description":"Stores Telegram API bot credentials used for authenticating and interacting with Telegram services. Each record represents a single credential set for a bot instance including its token and metadata for management.\n\n@namespace Integrations\n@auther AutoBE - https://github.com/wrtnlabs/autobe"},"ITelegramFileDownloaderStripeWebhookLogs.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key of the Stripe webhook log."},"event_id":{"type":"string","description":"Unique identifier of the Stripe webhook event."},"event_type":{"type":"string","description":"Type of Stripe event, e.g., 'payment_intent.succeeded', 'invoice.payment_failed'."},"received_at":{"type":"string","format":"date-time","description":"Timestamp when the webhook was received by the system."},"processed":{"type":"boolean","description":"Flag indicating if the webhook event has been processed successfully."}},"required":["id","event_id","event_type","received_at","processed"],"description":"Summary information of Stripe webhook logs to assist in audit and monitoring."},"ITelegramFileDownloaderAwsS3UploadLogs.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"file_name":{"type":"string","description":"Name of the file uploaded to AWS S3."},"file_size_bytes":{"type":"integer","description":"Size of the uploaded file in bytes."},"upload_status":{"type":"string","description":"Status of the upload operation, e.g., 'success', 'failed'."},"error_message":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Error details if the upload failed; null if successful."},"attempted_at":{"type":"string","format":"date-time","description":"Timestamp when the upload attempt was made."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record last updated timestamp."}},"required":["id","file_name","file_size_bytes","upload_status","attempted_at","created_at","updated_at"],"description":"Summary information about an AWS S3 upload log entry.\n\nThis schema provides a condensed subset of AWS S3 upload log details intended for list views or summarized API responses.\n\nReturns critical information such as file name, size, upload status, and timestamps."},"ITelegramFileDownloaderJobQueue.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"job_id":{"type":"string","format":"uuid","description":"Reference to the file download job. Links to the telegram_file_downloader_download_jobs.id."},"status":{"type":"string","description":"Current status of the job in the queue, e.g., 'pending', 'processing', 'failed', 'completed'."},"priority":{"type":"integer","description":"Priority level for job processing, higher value means higher priority."},"retries":{"type":"integer","description":"Number of times this job has been retried due to failure."},"last_error_message":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Last error message if job processing failed."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this job queue entry was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this job queue entry was last updated."}},"required":["id","job_id","status","priority","retries","created_at","updated_at"],"description":"Summary information about a job queue entry.\n\nThis schema provides a summarized view of the job queue entries used for monitoring and administrative overviews.\n\nIt captures key details such as job status, priority, retry counts, and timestamps."},"ITelegramFileDownloaderSubscriptionAudit":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"telegram_file_downloader_subscription_plan_id":{"type":"string","format":"uuid","description":"Referenced subscription plan."},"telegram_file_downloader_payment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Payment associated with this audit record."},"user_id":{"type":"string","format":"uuid","description":"User undergoing the subscription change."},"change_type":{"type":"string","description":"Type of subscription change event (e.g., 'upgrade', 'downgrade', 'cancellation')."},"change_timestamp":{"type":"string","format":"date-time","description":"Timestamp when the subscription change occurred."},"notes":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Additional notes or metadata about the subscription change."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp for subscription audit records."}},"required":["id","telegram_file_downloader_subscription_plan_id","user_id","change_type","change_timestamp","created_at","updated_at"],"description":"Historical records capturing changes and events related to user subscriptions.\n\nProvides audit trails for subscription state changes and billing plan updates.\n\nIncludes detailed tracking of subscription changes such as upgrades, downgrades, cancellations, timestamps, related payments, and additional notes."}}}}