import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthDeveloperJoin } from "../../../providers/postauthDeveloperJoin";
import { postauthDeveloperLogin } from "../../../providers/postauthDeveloperLogin";
import { postauthDeveloperRefresh } from "../../../providers/postauthDeveloperRefresh";

import { ITelegramFileDownloaderDeveloper } from "../../../api/structures/ITelegramFileDownloaderDeveloper";

@Controller("/auth/developer")
export class AuthDeveloperController {
  /**
   * Create a new developer user account with initial JWT authorization token.
   *
   * This join operation allows developers to register for the Telegram File
   * Downloader API service. It requires input matching the developer user
   * database table, including email and password hash fields. After
   * registration, the system issues an authorization token providing access to
   * the API with developer privileges.
   *
   * It leverages the 'email' column for unique identification, uses
   * 'password_hash' for credential validation, and populates 'created_at' and
   * 'updated_at' timestamps automatically. This operation does not require
   * prior authentication, consistent with public access for user registration.
   *
   * Upon success, the returned object is typed as
   * ITelegramFileDownloaderDeveloper.IAuthorized, reflecting the authorized
   * developer user with JWT tokens.
   *
   * This operation serves as the foundational step for all developer
   * interactions with the Telegram File Downloader API, enabling authenticated
   * programmatic access.
   *
   * Proper error handling ensures duplicate email registration attempts are
   * rejected securely and comprehensively.
   *
   * Related operations include login and refresh token renewal endpoints for
   * developer users.
   *
   * @param connection
   * @param body Request body for developer user registration including email
   *   and password hash.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: ITelegramFileDownloaderDeveloper.ICreate,
  ): Promise<ITelegramFileDownloaderDeveloper.IAuthorized> {
    try {
      return await postauthDeveloperJoin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Authenticate a developer user and return JWT tokens.
   *
   * Developer login operation authenticating email and password to issue JWT
   * tokens. Utilizes 'email' and 'password_hash' fields from the developer's
   * schema record for credential validation.
   *
   * Successful authentication results in an authorized developer user object
   * containing JWT access and refresh tokens.
   *
   * This operation is publicly accessible and forms an essential part of the
   * developer authentication lifecycle.
   *
   * Rejection of invalid credentials is handled with 401 Unauthorized HTTP
   * responses.
   *
   * Works in conjunction with registration (join) and token refresh operations.
   *
   * @param connection
   * @param body Login credentials payload including email and password.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: ITelegramFileDownloaderDeveloper.ILogin,
  ): Promise<ITelegramFileDownloaderDeveloper.IAuthorized> {
    try {
      return await postauthDeveloperLogin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Renew developer JWT access tokens using refresh token.
   *
   * Refresh JWT access token using a valid refresh token for developers. This
   * operation validates the refresh token status linked to the developer user
   * and issues new JWT tokens for continued authenticated API access.
   *
   * It relies on the developer user identification stored in tokens associated
   * with the telegram_file_downloader_developers table.
   *
   * The operation does not require user credentials but mandates valid refresh
   * token possession.
   *
   * Successful response includes renewed authorized access reflecting the
   * developer's identity and role.
   *
   * Supports authentication persistence and security best practices by allowing
   * session renewal without password re-entry.
   *
   * Related operations include login (credential authentication) and join (user
   * registration).
   *
   * @param connection
   * @param body Refresh token payload for renewing developer access tokens.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: ITelegramFileDownloaderDeveloper.IRefresh,
  ): Promise<ITelegramFileDownloaderDeveloper.IAuthorized> {
    try {
      return await postauthDeveloperRefresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
