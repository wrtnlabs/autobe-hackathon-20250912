import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthAdministratorJoin } from "../../../providers/postauthAdministratorJoin";
import { postauthAdministratorLogin } from "../../../providers/postauthAdministratorLogin";
import { postauthAdministratorRefresh } from "../../../providers/postauthAdministratorRefresh";

import { ITelegramFileDownloaderAdministrator } from "../../../api/structures/ITelegramFileDownloaderAdministrator";

@Controller("/auth/administrator")
export class AuthAdministratorController {
  /**
   * Create a new telegram_file_downloader_administrators account and issue JWT
   * authorization tokens.
   *
   * This endpoint allows system administrators to register new administrator
   * accounts by providing their email and password. The operation securely
   * stores the password hash and creates a new administrator record in the
   * telegram_file_downloader_administrators table. Upon successful
   * registration, it issues authorization tokens compliant with JWT for
   * subsequent authenticated API access. This ensures that only registered
   * administrators can access protected admin functionalities such as managing
   * subscriptions, monitoring logs, and viewing payment status. The operation
   * strictly references the existing schema columns: email, password_hash,
   * created_at, updated_at, deleted_at. Registration data must comply with the
   * database schema constraints and unique email indices. No assumptions about
   * additional fields are made, ensuring consistency and integrity of
   * administrator data.
   *
   * @param connection
   * @param body Registration data for the administrator account
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: ITelegramFileDownloaderAdministrator.ICreate,
  ): Promise<ITelegramFileDownloaderAdministrator.IAuthorized> {
    try {
      return await postauthAdministratorJoin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Authenticate administrator and issue JWT access tokens.
   *
   * Allows an existing administrator to log in by providing valid credentials.
   * The system validates the email and password_hash fields against the
   * telegram_file_downloader_administrators table where the record is active
   * (deleted_at is null). On successful validation, JWT access tokens are
   * issued to enable secure API access to administrator functionalities
   * including subscription and billing management, system monitoring, and logs.
   * This login function is public and does not require prior authentication. It
   * strictly adheres to the schema properties and does not modify records
   * beyond authentication scope. The operation response follows the IAuthorized
   * JWT format.
   *
   * @param connection
   * @param body Login credentials for administrator
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: ITelegramFileDownloaderAdministrator.ILogin,
  ): Promise<ITelegramFileDownloaderAdministrator.IAuthorized> {
    try {
      return await postauthAdministratorLogin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh JWT tokens for administrator.
   *
   * Refreshes JWT authorization tokens for an authenticated administrator user.
   * It requires a valid refresh token and returns new access and refresh tokens
   * in compliance with JWT standards. This operation maintains security and
   * session continuity without requiring full login. The operation references
   * existing administrator authentication tokens and is protected by token
   * validation mechanisms. This refresh endpoint is an integral part of the
   * administrator authentication lifecycle, enabling seamless token renewal.
   *
   * @param connection
   * @param body Refresh token request data
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: ITelegramFileDownloaderAdministrator.IRefresh,
  ): Promise<ITelegramFileDownloaderAdministrator.IAuthorized> {
    try {
      return await postauthAdministratorRefresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
