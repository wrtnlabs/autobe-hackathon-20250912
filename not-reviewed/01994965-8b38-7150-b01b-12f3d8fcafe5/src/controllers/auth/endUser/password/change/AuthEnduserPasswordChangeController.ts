import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthEndUserPasswordChange } from "../../../../../providers/postauthEndUserPasswordChange";
import { EnduserAuth } from "../../../../../decorators/EnduserAuth";
import { EnduserPayload } from "../../../../../decorators/payload/EnduserPayload";

import { ITelegramFileDownloaderEndUser } from "../../../../../api/structures/ITelegramFileDownloaderEndUser";

@Controller("/auth/endUser/password/change")
export class AuthEnduserPasswordChangeController {
  /**
   * Change password for authenticated endUser securely.
   *
   * Authenticated password change for end users to update existing password
   * securely. Uses telegram_file_downloader_endusers password_hash for secure
   * updates. Supports member-kind user account management and security
   * enhancement.
   *
   * @param connection
   * @param body Request body for password change operation for endUser
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async changePassword(
    @EnduserAuth()
    endUser: EnduserPayload,
    @TypedBody()
    body: ITelegramFileDownloaderEndUser.IChangePassword,
  ): Promise<ITelegramFileDownloaderEndUser.IChangePasswordResponse> {
    try {
      return await postauthEndUserPasswordChange({
        endUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
