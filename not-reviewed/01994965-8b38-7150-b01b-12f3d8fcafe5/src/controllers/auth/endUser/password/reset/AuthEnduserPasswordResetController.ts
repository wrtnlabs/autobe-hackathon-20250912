import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthEndUserPasswordReset } from "../../../../../providers/postauthEndUserPasswordReset";
import { EnduserAuth } from "../../../../../decorators/EnduserAuth";
import { EnduserPayload } from "../../../../../decorators/payload/EnduserPayload";

import { ITelegramFileDownloaderEndUser } from "../../../../../api/structures/ITelegramFileDownloaderEndUser";

@Controller("/auth/endUser/password/reset")
export class AuthEnduserPasswordResetController {
  /**
   * Reset password for endUser account securely.
   *
   * Password reset operation for end users to securely change their password
   * after verification. Relies on telegram_file_downloader_endusers
   * password_hash field for updating credentials. Supports member-kind users in
   * maintaining account security via password recovery.
   *
   * @param connection
   * @param body Request body for password reset operation for endUser
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async resetPassword(
    @EnduserAuth()
    endUser: EnduserPayload,
    @TypedBody()
    body: ITelegramFileDownloaderEndUser.IResetPassword,
  ): Promise<ITelegramFileDownloaderEndUser.IResetPasswordResponse> {
    try {
      return await postauthEndUserPasswordReset({
        endUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
