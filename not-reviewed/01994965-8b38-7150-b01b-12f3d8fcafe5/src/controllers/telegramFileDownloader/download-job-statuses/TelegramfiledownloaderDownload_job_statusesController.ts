import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchtelegramFileDownloaderDownloadJobStatuses } from "../../../providers/patchtelegramFileDownloaderDownloadJobStatuses";
import { gettelegramFileDownloaderDownloadJobStatusesId } from "../../../providers/gettelegramFileDownloaderDownloadJobStatusesId";

import { IPageITelegramFileDownloaderDownloadJobStatus } from "../../../api/structures/IPageITelegramFileDownloaderDownloadJobStatus";
import { ITelegramFileDownloaderDownloadJobStatus } from "../../../api/structures/ITelegramFileDownloaderDownloadJobStatus";

@Controller("/telegramFileDownloader/download-job-statuses")
export class TelegramfiledownloaderDownload_job_statusesController {
  /**
   * List download job statuses with pagination and filters.
   *
   * Retrieve a paginated list of download job statuses. These statuses
   * represent the various states possible in the download job lifecycle,
   * crucial for frontend and API clients to provide status context to users.
   *
   * The telegram_file_downloader_download_job_statuses table stores unique
   * status codes with human-readable descriptions for clarity. This endpoint
   * supports filtering and pagination to efficiently handle large numbers of
   * statuses if needed.
   *
   * Because this is a reference lookup, the endpoint is public and does not
   * require user authentication.
   *
   * This operation complements other download job management API endpoints that
   * return or utilize these status codes.
   *
   * @param connection
   * @param body Filtering and pagination parameters for download job statuses
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexDownloadJobStatuses(
    @TypedBody()
    body: ITelegramFileDownloaderDownloadJobStatus.IRequest,
  ): Promise<IPageITelegramFileDownloaderDownloadJobStatus> {
    try {
      return await patchtelegramFileDownloaderDownloadJobStatuses({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed download job status by ID.
   *
   * Get detailed information about a download job status by its unique
   * identifier. This includes the status code and the description clarifying
   * the meaning of the status.
   *
   * The telegram_file_downloader_download_job_statuses table uniquely
   * identifies statuses with UUIDs and includes descriptions to support UI
   * display and client logic.
   *
   * This endpoint enables applications to fetch details for a known status ID,
   * useful for detailed views or logs.
   *
   * Being reference data, no authorization is required for this endpoint.
   *
   * @param connection
   * @param id Unique identifier of the download job status record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async atDownloadJobStatus(
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<ITelegramFileDownloaderDownloadJobStatus> {
    try {
      return await gettelegramFileDownloaderDownloadJobStatusesId({
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
