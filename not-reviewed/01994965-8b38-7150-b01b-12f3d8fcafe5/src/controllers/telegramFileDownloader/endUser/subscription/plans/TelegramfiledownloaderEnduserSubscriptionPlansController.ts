import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchtelegramFileDownloaderEndUserSubscriptionPlans } from "../../../../../providers/patchtelegramFileDownloaderEndUserSubscriptionPlans";
import { EnduserAuth } from "../../../../../decorators/EnduserAuth";
import { EnduserPayload } from "../../../../../decorators/payload/EnduserPayload";
import { gettelegramFileDownloaderEndUserSubscriptionPlansId } from "../../../../../providers/gettelegramFileDownloaderEndUserSubscriptionPlansId";

import { IPageITelegramFileDownloaderSubscriptionPlans } from "../../../../../api/structures/IPageITelegramFileDownloaderSubscriptionPlans";
import { ITelegramFileDownloaderSubscriptionPlans } from "../../../../../api/structures/ITelegramFileDownloaderSubscriptionPlans";

@Controller("/telegramFileDownloader/endUser/subscription/plans")
export class TelegramfiledownloaderEnduserSubscriptionPlansController {
  /**
   * Search and retrieve a filtered, paginated list of subscription plans.
   *
   * Retrieve a filtered and paginated list of subscription plans from the
   * system. This operation supports advanced search and filtering by plan code,
   * name, status, price range, and other relevant fields.
   *
   * Security considerations include limiting access to authenticated users or
   * administrators to prevent data leakage of subscription pricing models.
   *
   * The response includes detailed information about each subscription plan,
   * including maximum allowed files per day, max file size in MB, total storage
   * in MB, price, and status.
   *
   * This operation queries the telegram_file_downloader_subscription_plans
   * table from the Prisma schema, which stores all subscription plan metadata
   * and business rules.
   *
   * Clients can use this endpoint to display subscription options or perform
   * administrative plan management functions.
   *
   * Errors related to invalid filtering criteria or pagination parameters will
   * result in appropriate HTTP 400 responses with error details.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for filtering
   *   subscription plans
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @EnduserAuth()
    endUser: EnduserPayload,
    @TypedBody()
    body: ITelegramFileDownloaderSubscriptionPlans.IRequest,
  ): Promise<IPageITelegramFileDownloaderSubscriptionPlans> {
    try {
      return await patchtelegramFileDownloaderEndUserSubscriptionPlans({
        endUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed subscription plan information by ID.
   *
   * Retrieve detailed information for one subscription plan identified by its
   * unique ID.
   *
   * The subscription plan information covers pricing details, allowed file
   * counts per day, maximum file size, total storage quota, and plan status.
   *
   * Security is critical to ensure only authorized users or administrators can
   * access detailed subscription plan metadata.
   *
   * This endpoint queries the telegram_file_downloader_subscription_plans table
   * in the Prisma schema and returns a single plan record matching the provided
   * ID.
   *
   * If the subscription plan ID does not exist, the endpoint returns an HTTP
   * 404 Not Found error.
   *
   * @param connection
   * @param id Unique ID of the subscription plan
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @EnduserAuth()
    endUser: EnduserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<ITelegramFileDownloaderSubscriptionPlans> {
    try {
      return await gettelegramFileDownloaderEndUserSubscriptionPlansId({
        endUser,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
