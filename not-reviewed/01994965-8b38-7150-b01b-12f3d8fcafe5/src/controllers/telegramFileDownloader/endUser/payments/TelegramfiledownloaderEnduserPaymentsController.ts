import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posttelegramFileDownloaderEndUserPayments } from "../../../../providers/posttelegramFileDownloaderEndUserPayments";
import { EnduserAuth } from "../../../../decorators/EnduserAuth";
import { EnduserPayload } from "../../../../decorators/payload/EnduserPayload";
import { patchtelegramFileDownloaderEndUserPayments } from "../../../../providers/patchtelegramFileDownloaderEndUserPayments";
import { gettelegramFileDownloaderEndUserPaymentsId } from "../../../../providers/gettelegramFileDownloaderEndUserPaymentsId";

import { ITelegramFileDownloaderPayment } from "../../../../api/structures/ITelegramFileDownloaderPayment";
import { IPageITelegramFileDownloaderPayment } from "../../../../api/structures/IPageITelegramFileDownloaderPayment";

@Controller("/telegramFileDownloader/endUser/payments")
export class TelegramfiledownloaderEnduserPaymentsController {
  /**
   * Create a new payment entry.
   *
   * Create a new payment record for a user subscription event.
   *
   * The request body must provide user ID, subscription plan ID, payment
   * provider details, payment amount, currency, payment status, and payment
   * date.
   *
   * Only authorized roles 'endUser', 'developer', or 'administrator' may access
   * this endpoint.
   *
   * On success, the newly created payment record is returned.
   *
   * Errors include validation failures on required fields or unauthorized
   * access.
   *
   * @param connection
   * @param body Details to create a new payment record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @EnduserAuth()
    endUser: EnduserPayload,
    @TypedBody()
    body: ITelegramFileDownloaderPayment.ICreate,
  ): Promise<ITelegramFileDownloaderPayment> {
    try {
      return await posttelegramFileDownloaderEndUserPayments({
        endUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List and search payments with pagination.
   *
   * Retrieve a list of payments recorded in the system. Payments correspond to
   * orders users have made to subscribe to various plans.
   *
   * This endpoint provides filtering and pagination capabilities to locate
   * payments by user, status, and date.
   *
   * Access is restricted to authenticated users with roles 'endUser',
   * 'developer', or 'administrator' depending on their permissions.
   *
   * The response returns a paginated collection of payment records in detailed
   * form, with amounts, statuses, and references to subscription plans and
   * users.
   *
   * Errors may include authentication failures or invalid search parameters.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for payments
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @EnduserAuth()
    endUser: EnduserPayload,
    @TypedBody()
    body: ITelegramFileDownloaderPayment.IRequest,
  ): Promise<IPageITelegramFileDownloaderPayment> {
    try {
      return await patchtelegramFileDownloaderEndUserPayments({
        endUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get payment details by ID.
   *
   * Retrieve detailed payment information for a specific payment record given
   * its payment ID.
   *
   * This operation returns full details including payment amount, currency,
   * status, payment provider, and associations to subscription plans and the
   * paying user.
   *
   * Access is allowed for authenticated 'endUser', 'developer', or
   * 'administrator' roles.
   *
   * If the payment ID does not exist, an appropriate error response is
   * returned.
   *
   * @param connection
   * @param id Unique identifier of the payment
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @EnduserAuth()
    endUser: EnduserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<ITelegramFileDownloaderPayment> {
    try {
      return await gettelegramFileDownloaderEndUserPaymentsId({
        endUser,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
