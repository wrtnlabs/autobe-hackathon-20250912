import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchtelegramFileDownloaderAdministratorBillingLogs } from "../../../../providers/patchtelegramFileDownloaderAdministratorBillingLogs";
import { AdministratorAuth } from "../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../decorators/payload/AdministratorPayload";
import { gettelegramFileDownloaderAdministratorBillingLogsBillingLogId } from "../../../../providers/gettelegramFileDownloaderAdministratorBillingLogsBillingLogId";

import { IPageITelegramFileDownloaderBillingLog } from "../../../../api/structures/IPageITelegramFileDownloaderBillingLog";
import { ITelegramFileDownloaderBillingLog } from "../../../../api/structures/ITelegramFileDownloaderBillingLog";

@Controller("/telegramFileDownloader/administrator/billingLogs")
export class TelegramfiledownloaderAdministratorBillinglogsController {
  /**
   * Search and retrieve paginated billing logs from
   * telegram_file_downloader_billing_logs.
   *
   * Retrieve a filtered, paginated list of billing logs containing payment and
   * billing event details. This operation supports complex queries enabling
   * admins to slice billing data by event type, time ranges, and related
   * payment references.
   *
   * The response includes billing event metadata, timestamps, and references to
   * related payments, assisting reconciliation and audit processes.
   *
   * Access to this operation is restricted to users with administrative roles
   * to protect sensitive financial information.
   *
   * This endpoint complements detailed payment and subscription audit APIs,
   * providing comprehensive financial oversight.
   *
   * Pagination capability ensures scalable and performant access to large
   * billing log datasets.
   *
   * @param connection
   * @param body Pagination, filtering, and sorting criteria for billing logs
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: ITelegramFileDownloaderBillingLog.IRequest,
  ): Promise<IPageITelegramFileDownloaderBillingLog> {
    try {
      return await patchtelegramFileDownloaderAdministratorBillingLogs({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve billing log details by ID from
   * telegram_file_downloader_billing_logs.
   *
   * Retrieve billing log details by its unique billing log ID. This endpoint is
   * used by administrators to gain detailed insight into individual billing
   * events, transactions, and payment records.
   *
   * The operation returns full metadata including event type, timestamps,
   * related payment references, and any additional descriptive details provided
   * at event creation.
   *
   * Authorization is limited to admin users due to the sensitive nature of
   * billing data.
   *
   * This API complements list and audit endpoints that provide aggregated
   * billing data and subscription change history.
   *
   * @param connection
   * @param billingLogId Unique identifier of the billing log entry
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":billingLogId")
  public async at(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("billingLogId")
    billingLogId: string & tags.Format<"uuid">,
  ): Promise<ITelegramFileDownloaderBillingLog> {
    try {
      return await gettelegramFileDownloaderAdministratorBillingLogsBillingLogId(
        {
          administrator,
          billingLogId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
