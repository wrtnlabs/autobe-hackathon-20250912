import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posttelegramFileDownloaderAdministratorJobQueues } from "../../../../providers/posttelegramFileDownloaderAdministratorJobQueues";
import { AdministratorAuth } from "../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../decorators/payload/AdministratorPayload";
import { patchtelegramFileDownloaderAdministratorJobQueues } from "../../../../providers/patchtelegramFileDownloaderAdministratorJobQueues";
import { gettelegramFileDownloaderAdministratorJobQueuesId } from "../../../../providers/gettelegramFileDownloaderAdministratorJobQueuesId";
import { puttelegramFileDownloaderAdministratorJobQueuesId } from "../../../../providers/puttelegramFileDownloaderAdministratorJobQueuesId";
import { deletetelegramFileDownloaderAdministratorJobQueuesId } from "../../../../providers/deletetelegramFileDownloaderAdministratorJobQueuesId";

import { ITelegramFileDownloaderJobQueue } from "../../../../api/structures/ITelegramFileDownloaderJobQueue";
import { IPageITelegramFileDownloaderJobQueue } from "../../../../api/structures/IPageITelegramFileDownloaderJobQueue";

@Controller("/telegramFileDownloader/administrator/jobQueues")
export class TelegramfiledownloaderAdministratorJobqueuesController {
  /**
   * Enqueue a new file download job in job queue.
   *
   * Create a new job queue entry to enqueue a file download job for processing.
   * The request includes job ID, priority, status, optional retry count, and
   * error message.
   *
   * This enables asynchronous processing of file downloads requested by users
   * or developers.
   *
   * Security requires administrator role authorization.
   *
   * Errors on duplicate job IDs or invalid data trigger rejection with
   * informative messages.
   *
   * @param connection
   * @param body Information required to create a new job queue entry
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: ITelegramFileDownloaderJobQueue.ICreate,
  ): Promise<ITelegramFileDownloaderJobQueue> {
    try {
      return await posttelegramFileDownloaderAdministratorJobQueues({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve paginated list of job queues.
   *
   * Retrieve a filtered and paginated list of job queues from the
   * telegram_file_downloader_job_queues table. This operation allows system
   * administrators or monitoring services to view current job statuses
   * including pending, processing, failed, or completed jobs. It supports
   * filtering by status and priority, searching by last error messages, and
   * sorting by creation or update timestamps.
   *
   * Security considerations include restricted access to authorized roles only
   * due to sensitivity of operational data. The response includes essential job
   * metadata such as priority levels and retry counts.
   *
   * This operation integrates with the job queue management to enable effective
   * tracking and management of asynchronous file download processing. Typical
   * clients are admin dashboards or automated maintenance scripts.
   *
   * Errors include invalid filter criteria or parameter violations resulting in
   * rejection with appropriate error codes.
   *
   * @param connection
   * @param body Filtering, sorting, paging criteria for job queues retrieval
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: ITelegramFileDownloaderJobQueue.IRequest,
  ): Promise<IPageITelegramFileDownloaderJobQueue.ISummary> {
    try {
      return await patchtelegramFileDownloaderAdministratorJobQueues({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed job queue information by ID.
   *
   * Fetch detailed information of a job queue entry by ID from
   * telegram_file_downloader_job_queues table. The detailed view includes
   * status, priority, number of retries, last error message, and timestamps for
   * creation and updates.
   *
   * This helps administrators or background services to examine specific jobs
   * in the download processing queue for troubleshooting or audit purposes.
   *
   * Security is maintained by restricting access to administrator roles.
   *
   * Invalid or non-existent IDs will result in 404 Not Found responses.
   * Appropriate error handling is included for malformed UUIDs.
   *
   * @param connection
   * @param id Unique identifier of the job queue entry
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<ITelegramFileDownloaderJobQueue> {
    try {
      return await gettelegramFileDownloaderAdministratorJobQueuesId({
        administrator,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update job queue entry by ID.
   *
   * Update existing job queue entry by ID. Modifiable fields include status,
   * priority, retries, and last error message.
   *
   * This operation allows administrators or system processes to manage the
   * lifecycle of download jobs in the queue.
   *
   * Security and data integrity are enforced through role-based authorization
   * and parameter validation.
   *
   * Appropriate error handling covers invalid IDs or malformed data
   * submissions.
   *
   * @param connection
   * @param id Unique identifier of the job queue entry to update
   * @param body Fields to update in the job queue entry
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITelegramFileDownloaderJobQueue.IUpdate,
  ): Promise<ITelegramFileDownloaderJobQueue> {
    try {
      return await puttelegramFileDownloaderAdministratorJobQueuesId({
        administrator,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a job queue entry by ID to remove the download job from the queue.
   *
   * This DELETE API operation permanently removes a job queue record from the
   * system. Job queues manage file download tasks for Telegram channel/group
   * downloads. Removing a job queue entry is typically performed by system
   * administrators or automated cleanup processes to discard stale or completed
   * jobs.
   *
   * This operation requires the job queue ID to uniquely identify which record
   * to remove. It does not accept a request body and does not return any
   * content on success. Given the criticality of job queues to download
   * processing, only authorized users with administrative privileges should be
   * allowed to invoke this endpoint.
   *
   * Removing the queue entry will ensure that the download job will no longer
   * be processed or retried by the system. This is a hard delete operation
   * removing the record fully from the database without a soft delete
   * timestamp.
   *
   * Appropriate error handling should return a not found status if the job ID
   * does not exist, and proper authorization checks must be implemented to
   * restrict access.
   *
   * The 'telegram_file_downloader_job_queues' table in the database backs this
   * API, containing details like job ID, status, priority, and retry counts.
   *
   * @param connection
   * @param id Unique identifier of the job queue entry to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletetelegramFileDownloaderAdministratorJobQueuesId({
        administrator,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
