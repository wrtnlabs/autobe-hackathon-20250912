import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchtelegramFileDownloaderAdministratorAuditLogs } from "../../../../providers/patchtelegramFileDownloaderAdministratorAuditLogs";
import { AdministratorAuth } from "../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../decorators/payload/AdministratorPayload";
import { gettelegramFileDownloaderAdministratorAuditLogsId } from "../../../../providers/gettelegramFileDownloaderAdministratorAuditLogsId";

import { IPageITelegramFileDownloaderAuditLog } from "../../../../api/structures/IPageITelegramFileDownloaderAuditLog";
import { ITelegramFileDownloaderAuditLog } from "../../../../api/structures/ITelegramFileDownloaderAuditLog";

@Controller("/telegramFileDownloader/administrator/auditLogs")
export class TelegramfiledownloaderAdministratorAuditlogsController {
  /**
   * Search and retrieve paginated filtered audit logs.
   *
   * This PATCH operation enables administrators to search and list audit logs
   * with filters for action types, entity types, associated user IDs, and date
   * ranges.
   *
   * Audit logs record system-level events such as login attempts, file
   * downloads, subscription changes, and administrative actions. This endpoint
   * helps trace activities for security and compliance.
   *
   * The request body requires search and pagination parameters conforming to
   * the ITelegramFileDownloaderAuditLog.IRequest schema. The response provides
   * a paginated listing of audit log entries matching the criteria.
   *
   * Access is restricted to administrators to ensure audit log confidentiality.
   *
   * The datasource is the 'telegram_file_downloader_audit_logs' Prisma table.
   *
   * No path parameters are required.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for audit logs
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: ITelegramFileDownloaderAuditLog.IRequest,
  ): Promise<IPageITelegramFileDownloaderAuditLog> {
    try {
      return await patchtelegramFileDownloaderAdministratorAuditLogs({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve audit log details by ID from telegram_file_downloader_audit_logs.
   *
   * Retrieve a single audit log entry by its unique identifier. This operation
   * is intended for use by administrators who need to investigate system events
   * and user activities in depth. Audit logs capture critical system actions,
   * supporting security monitoring and forensic analysis.
   *
   * The endpoint validates the provided audit log ID to ensure its existence
   * and returns the complete record with all metadata fields including user
   * relation, action type, entity details, timestamps, and relevant context
   * such as IP address.
   *
   * Only authorized users with administrative privileges may access this
   * endpoint. The operation references the telegram_file_downloader_audit_logs
   * table in the Prisma schema, ensuring accuracy and consistency with
   * underlying data.
   *
   * Errors such as invalid or non-existent IDs result in appropriate error
   * responses.
   *
   * This operation complements list retrieval endpoints that return collections
   * of audit logs, enabling detailed drill-down on individual records.
   *
   * @param connection
   * @param id Unique identifier of the target audit log entry
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<ITelegramFileDownloaderAuditLog> {
    try {
      return await gettelegramFileDownloaderAdministratorAuditLogsId({
        administrator,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
