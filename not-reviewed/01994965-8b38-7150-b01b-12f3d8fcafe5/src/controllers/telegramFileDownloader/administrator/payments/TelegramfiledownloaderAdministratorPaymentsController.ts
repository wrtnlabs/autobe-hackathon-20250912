import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posttelegramFileDownloaderAdministratorPayments } from "../../../../providers/posttelegramFileDownloaderAdministratorPayments";
import { AdministratorAuth } from "../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../decorators/payload/AdministratorPayload";
import { patchtelegramFileDownloaderAdministratorPayments } from "../../../../providers/patchtelegramFileDownloaderAdministratorPayments";
import { gettelegramFileDownloaderAdministratorPaymentsId } from "../../../../providers/gettelegramFileDownloaderAdministratorPaymentsId";
import { puttelegramFileDownloaderAdministratorPaymentsId } from "../../../../providers/puttelegramFileDownloaderAdministratorPaymentsId";
import { deletetelegramFileDownloaderAdministratorPaymentsId } from "../../../../providers/deletetelegramFileDownloaderAdministratorPaymentsId";

import { ITelegramFileDownloaderPayment } from "../../../../api/structures/ITelegramFileDownloaderPayment";
import { IPageITelegramFileDownloaderPayment } from "../../../../api/structures/IPageITelegramFileDownloaderPayment";
import { ITelegramFileDownloaderPayments } from "../../../../api/structures/ITelegramFileDownloaderPayments";

@Controller("/telegramFileDownloader/administrator/payments")
export class TelegramfiledownloaderAdministratorPaymentsController {
  /**
   * Create a new payment entry.
   *
   * Create a new payment record for a user subscription event.
   *
   * The request body must provide user ID, subscription plan ID, payment
   * provider details, payment amount, currency, payment status, and payment
   * date.
   *
   * Only authorized roles 'endUser', 'developer', or 'administrator' may access
   * this endpoint.
   *
   * On success, the newly created payment record is returned.
   *
   * Errors include validation failures on required fields or unauthorized
   * access.
   *
   * @param connection
   * @param body Details to create a new payment record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: ITelegramFileDownloaderPayment.ICreate,
  ): Promise<ITelegramFileDownloaderPayment> {
    try {
      return await posttelegramFileDownloaderAdministratorPayments({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List and search payments with pagination.
   *
   * Retrieve a list of payments recorded in the system. Payments correspond to
   * orders users have made to subscribe to various plans.
   *
   * This endpoint provides filtering and pagination capabilities to locate
   * payments by user, status, and date.
   *
   * Access is restricted to authenticated users with roles 'endUser',
   * 'developer', or 'administrator' depending on their permissions.
   *
   * The response returns a paginated collection of payment records in detailed
   * form, with amounts, statuses, and references to subscription plans and
   * users.
   *
   * Errors may include authentication failures or invalid search parameters.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for payments
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: ITelegramFileDownloaderPayment.IRequest,
  ): Promise<IPageITelegramFileDownloaderPayment> {
    try {
      return await patchtelegramFileDownloaderAdministratorPayments({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get payment details by ID.
   *
   * Retrieve detailed payment information for a specific payment record given
   * its payment ID.
   *
   * This operation returns full details including payment amount, currency,
   * status, payment provider, and associations to subscription plans and the
   * paying user.
   *
   * Access is allowed for authenticated 'endUser', 'developer', or
   * 'administrator' roles.
   *
   * If the payment ID does not exist, an appropriate error response is
   * returned.
   *
   * @param connection
   * @param id Unique identifier of the payment
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<ITelegramFileDownloaderPayment> {
    try {
      return await gettelegramFileDownloaderAdministratorPaymentsId({
        administrator,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing payment record by payment ID in the Subscription domain.
   *
   * This operation updates an existing payment record identified by its unique
   * payment ID in the telegram_file_downloader_payments table. It supports
   * updating payment provider info, status, amount, currency, and payment
   * reference details. This endpoint requires that the user has administrative
   * privileges since payment data is sensitive and critical for subscription
   * and billing management.
   *
   * The operation includes validation to confirm that the payment ID exists.
   * Attempting to update non-existent payments will result in failure.
   *
   * The updated information will be reflected in subscription status and
   * billing logs. This operation must ensure that all changes are consistent
   * with external payment records.
   *
   * If successful, the updated payment record will be returned.
   *
   * Security considerations include restricting access to users with the role
   * 'administrator' and validating input data for correctness.
   *
   * Error handling includes returning appropriate error messages when the
   * payment ID is invalid or when input constraints fail validation.
   *
   * Related API operations include creating payments via system processes and
   * viewing payments by administrators.
   *
   * This operation permanently modifies payment information in the database and
   * is audit logged.
   *
   * @param connection
   * @param id Unique identifier of the payment to update
   * @param body Details of the payment update
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async updatePayment(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITelegramFileDownloaderPayments.IUpdate,
  ): Promise<ITelegramFileDownloaderPayments> {
    try {
      return await puttelegramFileDownloaderAdministratorPaymentsId({
        administrator,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a payment record by payment ID with cascade removal of related data.
   *
   * This operation permanently deletes a payment record identified by payment
   * ID from the telegram_file_downloader_payments table. The operation cascades
   * deletions to related tables including transactions and billing logs to
   * maintain referential integrity.
   *
   * This API is intended for administrator use only due to the sensitivity of
   * payment data. Unauthorized users will be denied access.
   *
   * Error handling includes returning errors when the payment ID does not exist
   * or deletion fails due to database constraints.
   *
   * This operation does not return a response body.
   *
   * This is a hard delete operation that removes all traces of the payment from
   * the database.
   *
   * @param connection
   * @param id Unique identifier of the payment to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erasePayment(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletetelegramFileDownloaderAdministratorPaymentsId({
        administrator,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
