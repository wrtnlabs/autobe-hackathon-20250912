import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posttelegramFileDownloaderAdministratorAdministrators } from "../../../../providers/posttelegramFileDownloaderAdministratorAdministrators";
import { AdministratorAuth } from "../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../decorators/payload/AdministratorPayload";
import { patchtelegramFileDownloaderAdministratorAdministrators } from "../../../../providers/patchtelegramFileDownloaderAdministratorAdministrators";
import { gettelegramFileDownloaderAdministratorAdministratorsAdministratorId } from "../../../../providers/gettelegramFileDownloaderAdministratorAdministratorsAdministratorId";
import { puttelegramFileDownloaderAdministratorAdministratorsAdministratorId } from "../../../../providers/puttelegramFileDownloaderAdministratorAdministratorsAdministratorId";
import { deletetelegramFileDownloaderAdministratorAdministratorsAdministratorId } from "../../../../providers/deletetelegramFileDownloaderAdministratorAdministratorsAdministratorId";

import { ITelegramFileDownloaderAdministrators } from "../../../../api/structures/ITelegramFileDownloaderAdministrators";
import { IPageITelegramFileDownloaderAdministrator } from "../../../../api/structures/IPageITelegramFileDownloaderAdministrator";
import { ITelegramFileDownloaderAdministrator } from "../../../../api/structures/ITelegramFileDownloaderAdministrator";

@Controller("/telegramFileDownloader/administrator/administrators")
export class TelegramfiledownloaderAdministratorAdministratorsController {
  /**
   * Create a new administrator user account.
   *
   * Create a new administrator user with a unique email and secure password
   * hash. This operation ensures that the administrator can authenticate and
   * access protected system areas for user and subscription management.
   *
   * The operation is mapped to the telegram_file_downloader_administrators
   * table, which includes fields for email, password_hash, and auditing
   * timestamps.
   *
   * Security considerations include ensuring email uniqueness and hashing the
   * password before storage. The administrator record maintains created_at and
   * updated_at timestamps automatically.
   *
   * If the email already exists, the operation must fail gracefully with a
   * conflict error indicating duplication.
   *
   * Successful creation returns the full administrator details excluding
   * sensitive data such as raw passwords.
   *
   * @param connection
   * @param body Administrator creation data including email and password hash
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: ITelegramFileDownloaderAdministrators.ICreate,
  ): Promise<ITelegramFileDownloaderAdministrators> {
    try {
      return await posttelegramFileDownloaderAdministratorAdministrators({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of administrators.
   *
   * Retrieve a filtered, paginated list of administrators in the Telegram File
   * Downloader system. This API supports advanced filtering and sorting options
   * to enable efficient monitoring and management of administrative users.
   *
   * The administrators data comes from the
   * telegram_file_downloader_administrators table, including fields like id,
   * email, created_at, and updated_at.
   *
   * Security enforces that only authenticated administrators can perform this
   * action, with rate limiting and audit logging applied.
   *
   * Pagination ensures scalable response sizes and sorting facilitates
   * meaningful data ordering.
   *
   * Response contains a paginated set of administrator records, suitable for
   * listing views in the admin dashboard.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for administrators
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: ITelegramFileDownloaderAdministrator.IRequest,
  ): Promise<IPageITelegramFileDownloaderAdministrator> {
    try {
      return await patchtelegramFileDownloaderAdministratorAdministrators({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get administrator user details by administrator ID.
   *
   * Retrieve detailed information of a specific administrator user by
   * administrator ID in the Telegram File Downloader system.
   *
   * This operation fetches data from the
   * telegram_file_downloader_administrators table including id, email,
   * created_at, updated_at, and any relevant profile attributes.
   *
   * Access is restricted to authenticated administrators with proper
   * authorization.
   *
   * Requests for non-existing administrators must return meaningful error
   * messages.
   *
   * The response provides complete data suitable for admin profile inspection
   * and management.
   *
   * @param connection
   * @param administratorId Unique identifier of the administrator user to
   *   retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":administratorId")
  public async at(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("administratorId")
    administratorId: string & tags.Format<"uuid">,
  ): Promise<ITelegramFileDownloaderAdministrator> {
    try {
      return await gettelegramFileDownloaderAdministratorAdministratorsAdministratorId(
        {
          administrator,
          administratorId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update details of an existing administrator user.
   *
   * Update administrator user details, including email and password hash, for
   * the specified administratorId. This operation supports auditing via
   * updated_at timestamp.
   *
   * Mapped to the telegram_file_downloader_administrators table, the update
   * ensures unique email and preserves data consistency.
   *
   * Failed updates due to email conflicts or missing administrator record must
   * be handled with appropriate errors.
   *
   * Returns the updated administrator user details on success.
   *
   * @param connection
   * @param administratorId Unique identifier of the target administrator user
   * @param body Administrator update data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":administratorId")
  public async update(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("administratorId")
    administratorId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITelegramFileDownloaderAdministrators.IUpdate,
  ): Promise<ITelegramFileDownloaderAdministrators> {
    try {
      return await puttelegramFileDownloaderAdministratorAdministratorsAdministratorId(
        {
          administrator,
          administratorId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete an administrator user permanently.
   *
   * Permanently remove an administrator user by their unique identifier. This
   * action is irreversible and ensures the user can no longer authenticate as
   * an administrator.
   *
   * Perform a hard delete on the telegram_file_downloader_administrators record
   * corresponding to administratorId.
   *
   * Appropriate authorization and audit trails should be maintained at the
   * system level.
   *
   * No response body is returned upon successful deletion.
   *
   * @param connection
   * @param administratorId Unique identifier of the target administrator user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":administratorId")
  public async erase(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("administratorId")
    administratorId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletetelegramFileDownloaderAdministratorAdministratorsAdministratorId(
        {
          administrator,
          administratorId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
