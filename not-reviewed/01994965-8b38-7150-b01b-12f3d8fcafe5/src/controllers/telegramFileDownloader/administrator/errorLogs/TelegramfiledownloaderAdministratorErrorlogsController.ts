import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { gettelegramFileDownloaderAdministratorErrorLogsId } from "../../../../providers/gettelegramFileDownloaderAdministratorErrorLogsId";
import { AdministratorAuth } from "../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../decorators/payload/AdministratorPayload";
import { patchtelegramFileDownloaderAdministratorErrorLogs } from "../../../../providers/patchtelegramFileDownloaderAdministratorErrorLogs";

import { ITelegramFileDownloaderErrorLog } from "../../../../api/structures/ITelegramFileDownloaderErrorLog";
import { IPageITelegramFileDownloaderErrorLog } from "../../../../api/structures/IPageITelegramFileDownloaderErrorLog";

@Controller("/telegramFileDownloader/administrator/errorLogs")
export class TelegramfiledownloaderAdministratorErrorlogsController {
  /**
   * Retrieve detailed information for a specific error log entry.
   *
   * This GET operation fetches a single error log entry from the system by its
   * ID.
   *
   * Error logs capture detailed failure information including error code,
   * message, source of error, occurrence time, and resolution status. This is
   * intended to assist administrators and support engineers in diagnosing
   * issues with file downloads or system processing.
   *
   * The response includes all fields of the error log as stored in the
   * database, enabling comprehensive visibility into errors. Access to this
   * endpoint is restricted to administrators to prevent exposure of internal
   * system details.
   *
   * Proper error handling includes returning 404 if the specified ID does not
   * exist, and authorization validation.
   *
   * The backing table is 'telegram_file_downloader_error_logs' in Prisma
   * schema.
   *
   * No request body is required.
   *
   * @param connection
   * @param id Unique identifier of the error log entry
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<ITelegramFileDownloaderErrorLog> {
    try {
      return await gettelegramFileDownloaderAdministratorErrorLogsId({
        administrator,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve paginated filtered error logs.
   *
   * This PATCH operation provides a filtered, sorted, and paginated list of
   * error logs recorded in the system.
   *
   * Administrators can query error logs with search parameters including error
   * code, resolution status, and date ranges. Pagination allows efficient
   * navigation through large volumes of logs.
   *
   * This endpoint facilitates monitoring and resolving system issues by
   * providing detailed error information for troubleshooting. Access is
   * restricted to administrators to ensure security.
   *
   * The request body must include filtering and paging parameters according to
   * the ITelegramFileDownloaderErrorLog.IRequest schema. The response returns a
   * paginated list of error log entries matching the criteria.
   *
   * The underlying data resides in the 'telegram_file_downloader_error_logs'
   * table of the Prisma schema.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for error logs
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: ITelegramFileDownloaderErrorLog.IRequest,
  ): Promise<IPageITelegramFileDownloaderErrorLog> {
    try {
      return await patchtelegramFileDownloaderAdministratorErrorLogs({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
