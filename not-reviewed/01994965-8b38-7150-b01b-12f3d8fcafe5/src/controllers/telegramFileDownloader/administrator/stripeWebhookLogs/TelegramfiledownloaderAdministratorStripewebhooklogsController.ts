import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchtelegramFileDownloaderAdministratorStripeWebhookLogs } from "../../../../providers/patchtelegramFileDownloaderAdministratorStripeWebhookLogs";
import { AdministratorAuth } from "../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../decorators/payload/AdministratorPayload";
import { gettelegramFileDownloaderAdministratorStripeWebhookLogsStripeWebhookLogId } from "../../../../providers/gettelegramFileDownloaderAdministratorStripeWebhookLogsStripeWebhookLogId";

import { IPageITelegramFileDownloaderStripeWebhookLogs } from "../../../../api/structures/IPageITelegramFileDownloaderStripeWebhookLogs";
import { ITelegramFileDownloaderStripeWebhookLogs } from "../../../../api/structures/ITelegramFileDownloaderStripeWebhookLogs";

@Controller("/telegramFileDownloader/administrator/stripeWebhookLogs")
export class TelegramfiledownloaderAdministratorStripewebhooklogsController {
  /**
   * List and search Stripe webhook logs with pagination.
   *
   * This operation retrieves a paginated list of Stripe webhook event logs
   * recorded by the Telegram File Downloader system. These logs capture
   * detailed JSON payloads and event metadata from Stripe for payment and
   * subscription events. The listing supports filters to search and paginate
   * through webhook records.
   *
   * Users authorized to access this endpoint can view Stripe event details for
   * audit and troubleshooting but cannot modify logs via API.
   *
   * This operation references the telegram_file_downloader_stripe_webhook_logs
   * table which stores webhook events received from Stripe, including event
   * IDs, types, payloads, received timestamps, and processing flags.
   *
   * No request body is needed as filtering and pagination use query parameters
   * defined in the IRequest type. The response returns a paginated list of
   * webhook logs with summary data.
   *
   * Expected roles include administrative-level users who monitor payment
   * system activity.
   *
   * API errors include invalid query parameters and unauthorized access.
   *
   * This operation corresponds to the PATCH /stripeWebhookLogs endpoint.
   *
   * @param connection
   * @param body Pagination, filtering, and search criteria for Stripe webhook
   *   logs
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: ITelegramFileDownloaderStripeWebhookLogs.IRequest,
  ): Promise<IPageITelegramFileDownloaderStripeWebhookLogs.ISummary> {
    try {
      return await patchtelegramFileDownloaderAdministratorStripeWebhookLogs({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve Stripe webhook log details by ID.
   *
   * This operation retrieves detailed information about a specified Stripe
   * webhook log entry by its unique identifier. The data includes the full JSON
   * payload of the webhook event, event type, processing status, timestamps,
   * and any relevant metadata.
   *
   * Access is restricted to administrative users responsible for monitoring and
   * debugging payment processing events.
   *
   * This operation employs path parameter `stripeWebhookLogId` which must be a
   * valid UUID representing the target webhook log record.
   *
   * Appropriate error codes are returned for unknown IDs or unauthorized
   * access.
   *
   * The operation fetches data from the
   * telegram_file_downloader_stripe_webhook_logs table, which holds Stripe
   * webhook event information.
   *
   * This operation corresponds to the GET
   * /stripeWebhookLogs/{stripeWebhookLogId} endpoint.
   *
   * @param connection
   * @param stripeWebhookLogId Unique identifier of the Stripe webhook log
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":stripeWebhookLogId")
  public async at(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("stripeWebhookLogId")
    stripeWebhookLogId: string & tags.Format<"uuid">,
  ): Promise<ITelegramFileDownloaderStripeWebhookLogs> {
    try {
      return await gettelegramFileDownloaderAdministratorStripeWebhookLogsStripeWebhookLogId(
        {
          administrator,
          stripeWebhookLogId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
