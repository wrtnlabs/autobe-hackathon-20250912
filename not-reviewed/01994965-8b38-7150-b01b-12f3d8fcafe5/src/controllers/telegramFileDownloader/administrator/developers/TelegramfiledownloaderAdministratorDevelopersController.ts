import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posttelegramFileDownloaderAdministratorDevelopers } from "../../../../providers/posttelegramFileDownloaderAdministratorDevelopers";
import { AdministratorAuth } from "../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../decorators/payload/AdministratorPayload";
import { patchtelegramFileDownloaderAdministratorDevelopers } from "../../../../providers/patchtelegramFileDownloaderAdministratorDevelopers";
import { gettelegramFileDownloaderAdministratorDevelopersDeveloperId } from "../../../../providers/gettelegramFileDownloaderAdministratorDevelopersDeveloperId";

import { ITelegramFileDownloaderDeveloper } from "../../../../api/structures/ITelegramFileDownloaderDeveloper";
import { IPageITelegramFileDownloaderDeveloper } from "../../../../api/structures/IPageITelegramFileDownloaderDeveloper";

@Controller("/telegramFileDownloader/administrator/developers")
export class TelegramfiledownloaderAdministratorDevelopersController {
  /**
   * Create a new developer user who can access the Telegram File Downloader
   * API.
   *
   * This operation requires administrative privileges.
   *
   * All required fields must be provided in the request body, including email
   * and password hash.
   *
   * On success, the system returns the created developer user record.
   *
   * Clients must securely handle password information.
   *
   * Authorization roles: administrator.
   *
   * No path parameters are required.
   *
   * Request body includes required creation data.
   *
   * Response body returns detailed developer information.
   *
   * @param connection
   * @param body Information required to create a developer user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: ITelegramFileDownloaderDeveloper.ICreate,
  ): Promise<ITelegramFileDownloaderDeveloper> {
    try {
      return await posttelegramFileDownloaderAdministratorDevelopers({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve list of developer users.
   *
   * Retrieve a filtered and paginated list of developer users of the Telegram
   * File Downloader service.
   *
   * This operation allows administrators or authorized users to search
   * developers by multiple criteria such as email, registration date ranges,
   * and account status.
   *
   * It supports pagination and sorting for efficient management.
   *
   * Response includes summary information optimized for list display.
   *
   * Only active and non-deleted developer users are included.
   *
   * No path parameters are required.
   *
   * Authorization roles: administrator.
   *
   * Request body must specify search parameters, pagination, and sorting
   * criteria.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for filtering
   *   developers
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: ITelegramFileDownloaderDeveloper.IRequest,
  ): Promise<IPageITelegramFileDownloaderDeveloper.ISummary> {
    try {
      return await patchtelegramFileDownloaderAdministratorDevelopers({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a developer user by ID.
   *
   * Retrieve detailed information for a specific developer user by their unique
   * identifier.
   *
   * This developer entity represents programmatic users accessing the Telegram
   * File Downloader service via API.
   *
   * Response includes all defined attributes except sensitive fields which
   * would be handled securely.
   *
   * Authorization restricted to administrators.
   *
   * The GET request uses the developerId path parameter.
   *
   * No request body is required, the response returns developer information.
   *
   * @param connection
   * @param developerId Unique identifier of the developer user to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":developerId")
  public async at(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("developerId")
    developerId: string & tags.Format<"uuid">,
  ): Promise<ITelegramFileDownloaderDeveloper> {
    try {
      return await gettelegramFileDownloaderAdministratorDevelopersDeveloperId({
        administrator,
        developerId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
