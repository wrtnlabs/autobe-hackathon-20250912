import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posttelegramFileDownloaderAdministratorSubscriptionPlans } from "../../../../../providers/posttelegramFileDownloaderAdministratorSubscriptionPlans";
import { AdministratorAuth } from "../../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../../decorators/payload/AdministratorPayload";
import { puttelegramFileDownloaderAdministratorSubscriptionPlansId } from "../../../../../providers/puttelegramFileDownloaderAdministratorSubscriptionPlansId";
import { deletetelegramFileDownloaderAdministratorSubscriptionPlansId } from "../../../../../providers/deletetelegramFileDownloaderAdministratorSubscriptionPlansId";

import { ITelegramFileDownloaderSubscriptionPlans } from "../../../../../api/structures/ITelegramFileDownloaderSubscriptionPlans";

@Controller("/telegramFileDownloader/administrator/subscription/plans")
export class TelegramfiledownloaderAdministratorSubscriptionPlansController {
  /**
   * Create a new subscription plan with detailed properties including code,
   * name, pricing, file counts, size limits, quotas, and active status.
   *
   * Security checks must enforce only administrators are allowed to create
   * plans.
   *
   * This operation inserts a new record into the
   * telegram_file_downloader_subscription_plans table in the Prisma schema.
   *
   * Validation errors such as duplicate plan codes or invalid numeric values
   * will result in HTTP 400 Bad Request responses with error details.
   *
   * Upon successful creation, the newly created subscription plan record is
   * returned.
   *
   * @param connection
   * @param body Subscription plan creation payload including code, name,
   *   pricing, limits, and status
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: ITelegramFileDownloaderSubscriptionPlans.ICreate,
  ): Promise<ITelegramFileDownloaderSubscriptionPlans> {
    try {
      return await posttelegramFileDownloaderAdministratorSubscriptionPlans({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing subscription plan by ID.
   *
   * Update properties of an existing subscription plan by its unique ID.
   *
   * Includes updating code, name, pricing, download limits, file size limits,
   * total storage, and the plan's active/inactive status.
   *
   * The operation validates input for correctness and uniqueness as per
   * business rules.
   *
   * Only administrators may execute this update.
   *
   * The database record in telegram_file_downloader_subscription_plans is
   * updated accordingly.
   *
   * If the plan ID does not exist, the operation returns HTTP 404 Not Found.
   *
   * Validation failures result in HTTP 400 Bad Request with descriptive error
   * messages.
   *
   * @param connection
   * @param id Unique ID of the subscription plan to update
   * @param body Subscription plan update payload with properties to modify
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITelegramFileDownloaderSubscriptionPlans.IUpdate,
  ): Promise<ITelegramFileDownloaderSubscriptionPlans> {
    try {
      return await puttelegramFileDownloaderAdministratorSubscriptionPlansId({
        administrator,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a subscription plan by ID.
   *
   * Delete a subscription plan from the system by its unique identifier. This
   * is a hard delete operation, which permanently removes the subscription plan
   * record from the database.
   *
   * Only users with the 'administrator' role can perform this operation.
   *
   * The subscription plan is identified by its UUID. Deletion removes the
   * record and all dependent records must be handled by database cascade
   * policies.
   *
   * No request body or response body content is provided.
   *
   * Error cases include attempting to delete a non-existent subscription plan.
   *
   * @param connection
   * @param id Unique identifier of the subscription plan to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletetelegramFileDownloaderAdministratorSubscriptionPlansId(
        {
          administrator,
          id,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
