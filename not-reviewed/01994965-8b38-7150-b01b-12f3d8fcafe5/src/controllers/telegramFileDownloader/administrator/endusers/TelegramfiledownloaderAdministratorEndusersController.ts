import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchtelegramFileDownloaderAdministratorEndusers } from "../../../../providers/patchtelegramFileDownloaderAdministratorEndusers";
import { AdministratorAuth } from "../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../decorators/payload/AdministratorPayload";
import { gettelegramFileDownloaderAdministratorEndusersEnduserId } from "../../../../providers/gettelegramFileDownloaderAdministratorEndusersEnduserId";
import { puttelegramFileDownloaderAdministratorEndusersEnduserId } from "../../../../providers/puttelegramFileDownloaderAdministratorEndusersEnduserId";
import { deletetelegramFileDownloaderAdministratorEndusersEnduserId } from "../../../../providers/deletetelegramFileDownloaderAdministratorEndusersEnduserId";

import { IPageITelegramFileDownloaderEnduser } from "../../../../api/structures/IPageITelegramFileDownloaderEnduser";
import { ITelegramFileDownloaderEndUser } from "../../../../api/structures/ITelegramFileDownloaderEndUser";

@Controller("/telegramFileDownloader/administrator/endusers")
export class TelegramfiledownloaderAdministratorEndusersController {
  /**
   * Search and retrieve a filtered list of Telegram File Downloader end users.
   *
   * Retrieve a filtered and paginated list of Telegram File Downloader end
   * users. This operation queries the telegram_file_downloader_endusers table
   * and returns summary information about users. It supports common filters
   * such as deletion status and allows paging through potentially large user
   * bases.
   *
   * Authentication and authorization are enforced to restrict access to
   * authorized administrative roles only.
   *
   * The response excludes sensitive information such as password hashes for
   * security reasons.
   *
   * Use this operation to power user management dashboards, administrative
   * monitoring, or bulk user data exports.
   *
   * Errors are returned for invalid query filters or unauthorized access
   * attempts.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for Telegram File
   *   Downloader end user filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: ITelegramFileDownloaderEndUser.IRequest,
  ): Promise<IPageITelegramFileDownloaderEnduser.ISummary> {
    try {
      return await patchtelegramFileDownloaderAdministratorEndusers({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information of a Telegram File Downloader end user.
   *
   * Retrieve detailed profile information of a specific Telegram File
   * Downloader end user by enduserId. This includes all non-sensitive fields
   * and status markers.
   *
   * Access to this operation is restricted to administrators for security and
   * privacy.
   *
   * Return 404 if the specified user does not exist.
   *
   * Use this in detailed user profile, audit, and troubleshooting workflows.
   *
   * @param connection
   * @param enduserId Unique identifier of the Telegram File Downloader end user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":enduserId")
  public async at(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("enduserId")
    enduserId: string & tags.Format<"uuid">,
  ): Promise<ITelegramFileDownloaderEndUser> {
    try {
      return await gettelegramFileDownloaderAdministratorEndusersEnduserId({
        administrator,
        enduserId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing Telegram File Downloader end user.
   *
   * Update Telegram File Downloader end user information identified by
   * enduserId.
   *
   * Supports changes to email, password hash, and auditing timestamps.
   *
   * Access is restricted to administrator role.
   *
   * Returns the updated user record.
   *
   * Error responses include 404 Not Found and 409 Conflict on email
   * duplication.
   *
   * @param connection
   * @param enduserId Unique identifier of the Telegram File Downloader end user
   *   to update
   * @param body Updated data for Telegram File Downloader end user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":enduserId")
  public async update(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("enduserId")
    enduserId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITelegramFileDownloaderEndUser.IUpdate,
  ): Promise<ITelegramFileDownloaderEndUser> {
    try {
      return await puttelegramFileDownloaderAdministratorEndusersEnduserId({
        administrator,
        enduserId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a telegram file downloader end user by ID.
   *
   * This API operation permanently deletes a telegram file downloader end user
   * by their unique identifier.
   *
   * The end user entity represents individuals who use the system via web
   * dashboard for downloading files from Telegram channels/groups.
   *
   * Upon deletion, all related data such as their download jobs, storage usage,
   * payments, and audit logs are cascaded and removed.
   *
   * This hard delete operation removes the user from the database entirely and
   * cannot be undone.
   *
   * Authorization roles required: administrator only.
   *
   * No request body is needed for this DELETE operation.
   *
   * The operation returns no content but HTTP status 204 upon success.
   *
   * Clients should handle this accordingly to confirm removal and update UI or
   * cache.
   *
   * @param connection
   * @param enduserId Unique identifier of the end user to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":enduserId")
  public async erase(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("enduserId")
    enduserId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletetelegramFileDownloaderAdministratorEndusersEnduserId({
        administrator,
        enduserId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
