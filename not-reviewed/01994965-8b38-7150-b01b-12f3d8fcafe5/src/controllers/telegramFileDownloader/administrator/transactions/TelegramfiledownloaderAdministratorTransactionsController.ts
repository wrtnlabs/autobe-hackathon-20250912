import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posttelegramFileDownloaderAdministratorTransactions } from "../../../../providers/posttelegramFileDownloaderAdministratorTransactions";
import { AdministratorAuth } from "../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../decorators/payload/AdministratorPayload";
import { patchtelegramFileDownloaderAdministratorTransactions } from "../../../../providers/patchtelegramFileDownloaderAdministratorTransactions";
import { gettelegramFileDownloaderAdministratorTransactionsId } from "../../../../providers/gettelegramFileDownloaderAdministratorTransactionsId";
import { puttelegramFileDownloaderAdministratorTransactionsId } from "../../../../providers/puttelegramFileDownloaderAdministratorTransactionsId";
import { deletetelegramFileDownloaderAdministratorTransactionsId } from "../../../../providers/deletetelegramFileDownloaderAdministratorTransactionsId";

import { ITelegramFileDownloaderTransactions } from "../../../../api/structures/ITelegramFileDownloaderTransactions";
import { IPageITelegramFileDownloaderTransactions } from "../../../../api/structures/IPageITelegramFileDownloaderTransactions";

@Controller("/telegramFileDownloader/administrator/transactions")
export class TelegramfiledownloaderAdministratorTransactionsController {
  /**
   * Create a new payment transaction record.
   *
   * Create a new transaction record for a user payment. This operation stores
   * detailed metadata about the transaction including type, status, amount, and
   * timestamps.
   *
   * Only administrators or system components should invoke this endpoint to
   * record transactions accurately.
   *
   * All required fields must be validated before creation. The transaction
   * links to an existing payment and user.
   *
   * The operation returns the created transaction entity with all properties.
   *
   * @param connection
   * @param body Transaction creation payload containing payment ID, user ID,
   *   type, status, amount, and date
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createTransaction(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: ITelegramFileDownloaderTransactions.ICreate,
  ): Promise<ITelegramFileDownloaderTransactions> {
    try {
      return await posttelegramFileDownloaderAdministratorTransactions({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List and search payment transaction records with pagination.
   *
   * Retrieve a filtered and paginated list of payment transactions with support
   * for search parameters, sorting options, and pagination. This operation
   * fetches payment transaction data from telegram_file_downloader_transactions
   * used for billing audits and user transaction histories.
   *
   * The response provides a paginated container with detailed transaction
   * records, allowing administrators to review charge and refund activities.
   *
   * Security constraints restrict access to users with the 'administrator'
   * role.
   *
   * Business rules enforce correct filtering by transaction type and status.
   *
   * Error handling ensures proper validation of search parameters and
   * pagination inputs.
   *
   * This operation does not modify data but provides essential audit
   * information for billing management.
   *
   * @param connection
   * @param body Search, filter, and pagination parameters for payment
   *   transactions
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexTransactions(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: ITelegramFileDownloaderTransactions.IRequest,
  ): Promise<IPageITelegramFileDownloaderTransactions> {
    try {
      return await patchtelegramFileDownloaderAdministratorTransactions({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve payment transaction details by transaction ID.
   *
   * Retrieve detailed information about a specific payment transaction
   * identified by transaction ID. This includes transaction status, type,
   * authorized amounts, dates, and related payment and user info.
   *
   * Access restricted to administrators due to sensitive financial data.
   *
   * It supports auditing requirements and billing reconciliation.
   *
   * Error handling returns HTTP 404 if the transaction ID is not found.
   *
   * No modification occurs in this operation; it solely returns data.
   *
   * @param connection
   * @param id Unique identifier of the payment transaction
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async atTransaction(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<ITelegramFileDownloaderTransactions> {
    try {
      return await gettelegramFileDownloaderAdministratorTransactionsId({
        administrator,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing payment transaction record.
   *
   * Update the details of an existing payment transaction record. Only
   * administrators should perform this action.
   *
   * The transaction ID must be specified as a path parameter.
   *
   * Returns the updated transaction entity on success.
   *
   * @param connection
   * @param id The unique identifier of the transaction to update
   * @param body Transaction update payload with updated fields
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async updateTransaction(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITelegramFileDownloaderTransactions.IUpdate,
  ): Promise<ITelegramFileDownloaderTransactions> {
    try {
      return await puttelegramFileDownloaderAdministratorTransactionsId({
        administrator,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a payment transaction record.
   *
   * Permanently delete a payment transaction record by its ID. This operation
   * cannot be undone.
   *
   * Administrators only.
   *
   * No request body or response content.
   *
   * @param connection
   * @param id Unique identifier of the transaction to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async eraseTransaction(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletetelegramFileDownloaderAdministratorTransactionsId({
        administrator,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
