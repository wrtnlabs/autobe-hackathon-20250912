import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posttelegramFileDownloaderAdministratorTelegramApiCredentials } from "../../../../providers/posttelegramFileDownloaderAdministratorTelegramApiCredentials";
import { AdministratorAuth } from "../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../decorators/payload/AdministratorPayload";
import { patchtelegramFileDownloaderAdministratorTelegramApiCredentials } from "../../../../providers/patchtelegramFileDownloaderAdministratorTelegramApiCredentials";
import { gettelegramFileDownloaderAdministratorTelegramApiCredentialsTelegramApiCredentialId } from "../../../../providers/gettelegramFileDownloaderAdministratorTelegramApiCredentialsTelegramApiCredentialId";
import { puttelegramFileDownloaderAdministratorTelegramApiCredentialsTelegramApiCredentialId } from "../../../../providers/puttelegramFileDownloaderAdministratorTelegramApiCredentialsTelegramApiCredentialId";
import { deletetelegramFileDownloaderAdministratorTelegramApiCredentialsTelegramApiCredentialId } from "../../../../providers/deletetelegramFileDownloaderAdministratorTelegramApiCredentialsTelegramApiCredentialId";

import { ITelegramFileDownloaderTelegramApiCredential } from "../../../../api/structures/ITelegramFileDownloaderTelegramApiCredential";
import { IPageITelegramFileDownloaderTelegramApiCredentials } from "../../../../api/structures/IPageITelegramFileDownloaderTelegramApiCredentials";
import { ITelegramFileDownloaderTelegramApiCredentials } from "../../../../api/structures/ITelegramFileDownloaderTelegramApiCredentials";

@Controller("/telegramFileDownloader/administrator/telegramApiCredentials")
export class TelegramfiledownloaderAdministratorTelegramapicredentialsController {
  /**
   * Create a new Telegram API credential record.
   *
   * This operation enables an administrator to create a new Telegram API
   * credential used by the system to interact with Telegram APIs securely. The
   * request must provide the bot's display name, secret token, and whether it
   * is active. Upon success, the system stores the credential, timestamps the
   * creation and update time, and returns the created credential information.
   *
   * Role restriction ensures only users with administrator privileges can
   * perform this sensitive action.
   *
   * Proper validation on bot token uniqueness and token security is assumed to
   * be enforced at the provider level.
   *
   * The API strictly maps to telegram_file_downloader_telegram_api_credentials
   * table in the Prisma schema, guaranteeing fidelity in data.
   *
   * @param connection
   * @param body Telegram API credential creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: ITelegramFileDownloaderTelegramApiCredential.ICreate,
  ): Promise<ITelegramFileDownloaderTelegramApiCredential> {
    try {
      return await posttelegramFileDownloaderAdministratorTelegramApiCredentials(
        {
          administrator,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search Telegram API credentials.
   *
   * Search and retrieve Telegram API credential records with filtering,
   * pagination, and sorting. Administrators only.
   *
   * Supports filtering by bot name, active status, and last usage.
   *
   * Returns paginated list with credential details excluding sensitive bot
   * tokens.
   *
   * Use to manage and audit Telegram API credentials used by the system.
   *
   * @param connection
   * @param body Request payload with search filters for Telegram API
   *   credentials
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async search(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: ITelegramFileDownloaderTelegramApiCredentials.IRequest,
  ): Promise<IPageITelegramFileDownloaderTelegramApiCredentials> {
    try {
      return await patchtelegramFileDownloaderAdministratorTelegramApiCredentials(
        {
          administrator,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve Telegram API credential by ID.
   *
   * This API operation allows administrators to retrieve detailed information
   * about a specific Telegram API credential using its unique identifier. The
   * Telegram API credentials include bot name, token, and status information
   * that are essential for authenticating to Telegram services. Access to this
   * endpoint should be restricted to authorized administrators only.
   *
   * In addition, there are operations to create new Telegram API credentials.
   * This requires passing bot name, token string, and the isActive status flag.
   * The system stores these securely and tracks creation and update
   * timestamps.
   *
   * Updating credentials by ID is also supported. Administrators can change bot
   * names, tokens, or toggle the isActive status. The system will update
   * timestamps accordingly.
   *
   * Deletion of credentials is performed permanently and irreversibly, fully
   * removing the record from the database. This action should be guarded under
   * administrative roles only.
   *
   * All operations map directly to the
   * telegram_file_downloader_telegram_api_credentials table as defined in the
   * Prisma schema, ensuring data coherence and integrity.
   *
   * @param connection
   * @param telegramApiCredentialId Unique identifier of the Telegram API
   *   credential
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":telegramApiCredentialId")
  public async at(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("telegramApiCredentialId")
    telegramApiCredentialId: string & tags.Format<"uuid">,
  ): Promise<ITelegramFileDownloaderTelegramApiCredential> {
    try {
      return await gettelegramFileDownloaderAdministratorTelegramApiCredentialsTelegramApiCredentialId(
        {
          administrator,
          telegramApiCredentialId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update details of a Telegram API credential.
   *
   * This API operation enables modification of existing Telegram API credential
   * records by authorized administrators. The target credential is identified
   * by telegramApiCredentialId in the path. Updates include changing the bot
   * display name, bot token string, and active flag.
   *
   * The operation updates the corresponding entry in the
   * telegram_file_downloader_telegram_api_credentials table, revising
   * timestamps accordingly to reflect modification.
   *
   * Security requires administrator role authorization due to sensitive nature
   * of tokens.
   *
   * All input data must comply with schema validations and constraints.
   *
   * @param connection
   * @param telegramApiCredentialId Unique identifier of the Telegram API
   *   credential
   * @param body Telegram API credential update request data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":telegramApiCredentialId")
  public async update(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("telegramApiCredentialId")
    telegramApiCredentialId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITelegramFileDownloaderTelegramApiCredential.IUpdate,
  ): Promise<ITelegramFileDownloaderTelegramApiCredential> {
    try {
      return await puttelegramFileDownloaderAdministratorTelegramApiCredentialsTelegramApiCredentialId(
        {
          administrator,
          telegramApiCredentialId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently remove a Telegram API credential.
   *
   * This operation permanently deletes a Telegram API credential by its UUID.
   * The operation removes the record entirely from the
   * telegram_file_downloader_telegram_api_credentials table.
   *
   * Deletion is irreversible and requires administrator privileges to execute.
   * Proper authorization is mandatory.
   *
   * The API path includes the telegramApiCredentialId as a path parameter to
   * identify the target credential securely.
   *
   * This operation does not return any response body but confirms successful
   * deletion via HTTP status codes.
   *
   * Safety checks and auditing should be handled at the service layer.
   *
   * @param connection
   * @param telegramApiCredentialId Unique identifier of the Telegram API
   *   credential
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":telegramApiCredentialId")
  public async erase(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("telegramApiCredentialId")
    telegramApiCredentialId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletetelegramFileDownloaderAdministratorTelegramApiCredentialsTelegramApiCredentialId(
        {
          administrator,
          telegramApiCredentialId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
