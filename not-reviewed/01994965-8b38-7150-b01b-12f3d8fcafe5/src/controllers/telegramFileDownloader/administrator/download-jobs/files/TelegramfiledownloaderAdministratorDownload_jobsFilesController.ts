import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { deletetelegramFileDownloaderAdministratorDownloadJobsDownloadJobIdFilesId } from "../../../../../providers/deletetelegramFileDownloaderAdministratorDownloadJobsDownloadJobIdFilesId";
import { AdministratorAuth } from "../../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../../decorators/payload/AdministratorPayload";

@Controller(
  "/telegramFileDownloader/administrator/download-jobs/:downloadJobId/files/:id",
)
export class TelegramfiledownloaderAdministratorDownload_jobsFilesController {
  /**
   * Permanently delete a file associated with a download job.
   *
   * Delete a downloaded file from the system by specifying the download job ID
   * and file ID. This operation permanently removes the file record and
   * associated metadata.
   *
   * Authorization: Accessible only by administrator role.
   *
   * The operation requires the downloadJobId and file id as path parameters,
   * both UUID strings.
   *
   * No request body or response body is returned.
   *
   * Errors include invalid UUID format or not found resources.
   *
   * This operation ensures that deleted file data does not remain in the
   * system.
   *
   * @param connection
   * @param downloadJobId UUID of the download job containing the file
   * @param id UUID of the file to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("downloadJobId")
    downloadJobId: string & tags.Format<"uuid">,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletetelegramFileDownloaderAdministratorDownloadJobsDownloadJobIdFilesId(
        {
          administrator,
          downloadJobId,
          id,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
