import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { patchtelegramFileDownloaderAdministratorDownloadJobs } from "../../../../providers/patchtelegramFileDownloaderAdministratorDownloadJobs";
import { AdministratorAuth } from "../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../decorators/payload/AdministratorPayload";

import { IPageITelegramFileDownloaderDownloadJobs } from "../../../../api/structures/IPageITelegramFileDownloaderDownloadJobs";
import { ITelegramFileDownloaderDownloadJobs } from "../../../../api/structures/ITelegramFileDownloaderDownloadJobs";

@Controller("/telegramFileDownloader/administrator/download-jobs")
export class TelegramfiledownloaderAdministratorDownload_jobsController {
  /**
   * Retrieve paginated list of download job requests with filters.
   *
   * Search and retrieve a paginated list of download job requests with
   * filtering by status, date ranges, channel, and file types. This list
   * supports monitoring active and historical download jobs.
   *
   * Mapped to telegram_file_downloader_download_jobs table, this operation
   * provides visibility into system usage and job processing status.
   *
   * Authorization restricts access to privileged roles.
   *
   * Returns paginated, summarized download job records matching the search
   * criteria.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for download job
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: ITelegramFileDownloaderDownloadJobs.IRequest,
  ): Promise<IPageITelegramFileDownloaderDownloadJobs.ISummary> {
    try {
      return await patchtelegramFileDownloaderAdministratorDownloadJobs({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
