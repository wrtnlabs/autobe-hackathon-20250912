import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posttelegramFileDownloaderAdministratorStorageUsages } from "../../../../providers/posttelegramFileDownloaderAdministratorStorageUsages";
import { AdministratorAuth } from "../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../decorators/payload/AdministratorPayload";
import { patchtelegramFileDownloaderAdministratorStorageUsages } from "../../../../providers/patchtelegramFileDownloaderAdministratorStorageUsages";
import { gettelegramFileDownloaderAdministratorStorageUsagesId } from "../../../../providers/gettelegramFileDownloaderAdministratorStorageUsagesId";
import { puttelegramFileDownloaderAdministratorStorageUsagesId } from "../../../../providers/puttelegramFileDownloaderAdministratorStorageUsagesId";
import { deletetelegramFileDownloaderAdministratorStorageUsagesId } from "../../../../providers/deletetelegramFileDownloaderAdministratorStorageUsagesId";

import { ITelegramFileDownloaderStorageUsage } from "../../../../api/structures/ITelegramFileDownloaderStorageUsage";
import { IPageITelegramFileDownloaderStorageUsage } from "../../../../api/structures/IPageITelegramFileDownloaderStorageUsage";

@Controller("/telegramFileDownloader/administrator/storage-usages")
export class TelegramfiledownloaderAdministratorStorage_usagesController {
  /**
   * Create new storage usage record.
   *
   * Create a new storage usage record with detailed metrics including storage
   * bytes used and quota maximum bytes. The request body must supply all
   * necessary information as per ITelegramFileDownloaderStorageUsage.ICreate.
   *
   * Accessible only by administrators.
   *
   * The response returns the created storage usage entity.
   *
   * Handles errors for duplicate or invalid entries.
   *
   * @param connection
   * @param body Storage usage creation payload
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: ITelegramFileDownloaderStorageUsage.ICreate,
  ): Promise<ITelegramFileDownloaderStorageUsage> {
    try {
      return await posttelegramFileDownloaderAdministratorStorageUsages({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve filtered paginated list of storage usages.
   *
   * Retrieve a paginated and filtered list of storage usage records to monitor
   * user and developer storage quotas.
   *
   * Only administrators have access to this operation.
   *
   * Supports filtering by enduser or developer IDs, amount of storage used, and
   * file counts within the request body.
   *
   * Response includes pagination metadata and summarized storage usage records.
   *
   * Error handling includes invalid query parameters and pagination issues.
   *
   * @param connection
   * @param body Filter and pagination parameters for storage usages
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: ITelegramFileDownloaderStorageUsage.IRequest,
  ): Promise<IPageITelegramFileDownloaderStorageUsage.ISummary> {
    try {
      return await patchtelegramFileDownloaderAdministratorStorageUsages({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get storage usage record details by ID.
   *
   * Get detailed information about a storage usage record via its unique
   * identifier.
   *
   * Accessible only to administrators.
   *
   * Includes storage bytes used and quota maximum.
   *
   * Errors handled include invalid identifier format and record not found.
   *
   * @param connection
   * @param id UUID of the storage usage record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<ITelegramFileDownloaderStorageUsage> {
    try {
      return await gettelegramFileDownloaderAdministratorStorageUsagesId({
        administrator,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update storage usage record.
   *
   * Update an existing storage usage record identified by its unique ID. This
   * operation is intended for managing and correcting usage statistics such as
   * storage bytes used and file count for the specific user. The storage usage
   * applies to both endusers and developers, identified by their user IDs.
   * Timestamps for updates are maintained by the system. This endpoint requires
   * authentication and appropriate authorization to modify user storage data.
   * Soft delete behavior is respected: records marked as deleted are excluded
   * from update operations.
   *
   * The telegram_file_downloader_storage_usages table stores crucial quota
   * enforcement data, enabling monitoring and control of user storage
   * consumption against subscription plan limits. Accurate updates ensure users
   * do not exceed quota limits and maintain consistent billing and service
   * quality.
   *
   * This update operation complements listing and querying operations that
   * retrieve current storage usage data for monitoring and reporting.
   *
   * Users of this API must have proper authorization depending on
   * administrative or user roles to avoid unauthorized modifications.
   *
   * @param connection
   * @param id Unique identifier of the storage usage record to update
   * @param body Storage usage update information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async updateStorageUsage(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITelegramFileDownloaderStorageUsage.IUpdate,
  ): Promise<ITelegramFileDownloaderStorageUsage> {
    try {
      return await puttelegramFileDownloaderAdministratorStorageUsagesId({
        administrator,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete storage usage record.
   *
   * Permanently delete a storage usage record by its unique ID. This operation
   * removes the quota tracking data for the specified user (enduser or
   * developer) and should be used carefully to avoid accidental data loss
   * affecting billing and quota enforcement.
   *
   * Since the schema does not explicitly specify soft delete for this entity,
   * deletion is permanent and irreversible.
   *
   * Proper authorization is required, typically limited to administrators, to
   * avoid unauthorized removals that could impact service monitoring.
   *
   * This deletion complements update and list operations managing storage usage
   * data.
   *
   * @param connection
   * @param id Unique identifier of the storage usage record to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async eraseStorageUsage(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletetelegramFileDownloaderAdministratorStorageUsagesId({
        administrator,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
