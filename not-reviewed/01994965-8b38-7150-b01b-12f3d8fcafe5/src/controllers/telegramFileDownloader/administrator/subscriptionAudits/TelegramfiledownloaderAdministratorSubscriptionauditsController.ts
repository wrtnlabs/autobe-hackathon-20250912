import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchtelegramFileDownloaderAdministratorSubscriptionAudits } from "../../../../providers/patchtelegramFileDownloaderAdministratorSubscriptionAudits";
import { AdministratorAuth } from "../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../decorators/payload/AdministratorPayload";
import { gettelegramFileDownloaderAdministratorSubscriptionAuditsSubscriptionAuditId } from "../../../../providers/gettelegramFileDownloaderAdministratorSubscriptionAuditsSubscriptionAuditId";

import { IPageITelegramFileDownloaderSubscriptionAudit } from "../../../../api/structures/IPageITelegramFileDownloaderSubscriptionAudit";
import { ITelegramFileDownloaderSubscriptionAudit } from "../../../../api/structures/ITelegramFileDownloaderSubscriptionAudit";
import { ITelegramFileDownloaderSubscriptionAudits } from "../../../../api/structures/ITelegramFileDownloaderSubscriptionAudits";

@Controller("/telegramFileDownloader/administrator/subscriptionAudits")
export class TelegramfiledownloaderAdministratorSubscriptionauditsController {
  /**
   * Search and retrieve subscription audit history from
   * telegram_file_downloader_subscription_audits.
   *
   * Retrieve a filtered, paginated list of subscription audit records tracking
   * subscription changes over time. This operation enables administrators to
   * query subscription update history by user, plan, change type, and time
   * frames.
   *
   * The response provides detailed subscription change metadata including
   * timestamps, related payments, notes, and plan information.
   *
   * Access is limited to authorized administrators.
   *
   * This operation works in concert with billing and payment endpoints to
   * provide holistic subscription lifecycle tracking.
   *
   * @param connection
   * @param body Filtering and pagination parameters for subscription audit
   *   records
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: ITelegramFileDownloaderSubscriptionAudit.IRequest,
  ): Promise<IPageITelegramFileDownloaderSubscriptionAudit> {
    try {
      return await patchtelegramFileDownloaderAdministratorSubscriptionAudits({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed subscription audit by ID.
   *
   * Retrieve detailed information for a specific subscription audit record
   * using its unique identifier.
   *
   * This API operation fetches all stored data related to subscription changes
   * such as upgrades, downgrades, cancellations, and associated billing events
   * tied to a user. It references the
   * telegram_file_downloader_subscription_audits database table which holds
   * historical subscription change data for audit and compliance purposes.
   *
   * Only users with proper administrator privileges are authorized to access
   * this endpoint to prevent exposure of sensitive subscription and payment
   * audit details.
   *
   * The path parameter subscriptionAuditId must be a valid UUID representing
   * the audit record to fetch. The response includes extensive audit details
   * including change type, timestamps, related subscription plan and payment
   * IDs, user identity, and optional notes.
   *
   * This detailed end-point supports administrative monitoring, troubleshooting
   * subscription life-cycle, and billing reconciliation workflows within the
   * Telegram File Downloader system.
   *
   * @param connection
   * @param subscriptionAuditId Unique identifier of the subscription audit
   *   record to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":subscriptionAuditId")
  public async at(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("subscriptionAuditId")
    subscriptionAuditId: string & tags.Format<"uuid">,
  ): Promise<ITelegramFileDownloaderSubscriptionAudits> {
    try {
      return await gettelegramFileDownloaderAdministratorSubscriptionAuditsSubscriptionAuditId(
        {
          administrator,
          subscriptionAuditId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
