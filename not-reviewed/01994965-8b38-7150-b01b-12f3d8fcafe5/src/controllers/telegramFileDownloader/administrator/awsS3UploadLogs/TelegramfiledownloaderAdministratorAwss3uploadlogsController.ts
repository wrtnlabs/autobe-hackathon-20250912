import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchtelegramFileDownloaderAdministratorAwsS3UploadLogs } from "../../../../providers/patchtelegramFileDownloaderAdministratorAwsS3UploadLogs";
import { AdministratorAuth } from "../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../decorators/payload/AdministratorPayload";
import { gettelegramFileDownloaderAdministratorAwsS3UploadLogsAwsS3UploadLogId } from "../../../../providers/gettelegramFileDownloaderAdministratorAwsS3UploadLogsAwsS3UploadLogId";

import { IPageITelegramFileDownloaderAwsS3UploadLogs } from "../../../../api/structures/IPageITelegramFileDownloaderAwsS3UploadLogs";
import { ITelegramFileDownloaderAwsS3UploadLogs } from "../../../../api/structures/ITelegramFileDownloaderAwsS3UploadLogs";

@Controller("/telegramFileDownloader/administrator/awsS3UploadLogs")
export class TelegramfiledownloaderAdministratorAwss3uploadlogsController {
  /**
   * List and search AWS S3 upload logs with pagination.
   *
   * This operation retrieves a paginated list of AWS S3 upload logs capturing
   * file upload attempts, statuses, errors, and metadata. The listing supports
   * complex search and pagination criteria.
   *
   * These logs help administrators audit file upload activity and troubleshoot
   * failures.
   *
   * Authorization is restricted to admin roles.
   *
   * Data is fully sourced from telegram_file_downloader_aws_s3_upload_logs
   * table.
   *
   * No request body content is required for the GET single operation; filtering
   * uses request body for the PATCH list operation.
   *
   * Expected errors include unauthorized access and invalid parameters.
   *
   * This operation corresponds to the PATCH /awsS3UploadLogs endpoint.
   *
   * @param connection
   * @param body Filter and pagination parameters for querying AWS S3 upload
   *   logs
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: ITelegramFileDownloaderAwsS3UploadLogs.IRequest,
  ): Promise<IPageITelegramFileDownloaderAwsS3UploadLogs.ISummary> {
    try {
      return await patchtelegramFileDownloaderAdministratorAwsS3UploadLogs({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve AWS S3 upload log details by ID.
   *
   * This operation fetches detailed properties of an AWS S3 upload log
   * identified by its unique UUID. Details include file meta-info, upload
   * status, errors, and timing.
   *
   * Access is restricted to administrators responsible for system monitoring.
   *
   * The path parameter `awsS3UploadLogId` must be a valid UUID.
   *
   * Proper error handling confirms clear responses to unknown log IDs or lack
   * of permission.
   *
   * Data source is telegram_file_downloader_aws_s3_upload_logs table.
   *
   * This operation corresponds to the GET /awsS3UploadLogs/{awsS3UploadLogId}
   * endpoint.
   *
   * @param connection
   * @param awsS3UploadLogId Unique identifier of the AWS S3 upload log
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":awsS3UploadLogId")
  public async at(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("awsS3UploadLogId")
    awsS3UploadLogId: string & tags.Format<"uuid">,
  ): Promise<ITelegramFileDownloaderAwsS3UploadLogs> {
    try {
      return await gettelegramFileDownloaderAdministratorAwsS3UploadLogsAwsS3UploadLogId(
        {
          administrator,
          awsS3UploadLogId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
