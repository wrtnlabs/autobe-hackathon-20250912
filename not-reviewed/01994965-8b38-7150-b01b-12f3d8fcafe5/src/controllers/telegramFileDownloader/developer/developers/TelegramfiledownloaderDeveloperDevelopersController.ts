import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { puttelegramFileDownloaderDeveloperDevelopersDeveloperId } from "../../../../providers/puttelegramFileDownloaderDeveloperDevelopersDeveloperId";
import { DeveloperAuth } from "../../../../decorators/DeveloperAuth";
import { DeveloperPayload } from "../../../../decorators/payload/DeveloperPayload";
import { deletetelegramFileDownloaderDeveloperDevelopersDeveloperId } from "../../../../providers/deletetelegramFileDownloaderDeveloperDevelopersDeveloperId";

import { ITelegramFileDownloaderDeveloper } from "../../../../api/structures/ITelegramFileDownloaderDeveloper";

@Controller("/telegramFileDownloader/developer/developers/:developerId")
export class TelegramfiledownloaderDeveloperDevelopersController {
  /**
   * Update developer user information by developer ID.
   *
   * Update an existing developer user's information in the Telegram File
   * Downloader system. This operation modifies fields like email and password
   * hash, ensuring the user's identity and credentials can be kept current.
   *
   * Security measures require authenticated developer users to invoke this API
   * and enforce ownership checks to prevent unauthorized updates.
   *
   * This operation directly updates the telegram_file_downloader_developers
   * table, referencing fields id, email, password_hash, and updated_at. The
   * updated_at timestamp records the last modification time.
   *
   * Validation includes checking unique email constraints to avoid
   * duplications, ensuring email format correctness, and securely hashing
   * passwords taken in update payloads.
   *
   * Associated logs in telegram_file_downloader_audit_logs may be generated
   * asynchronously to audit profile changes.
   *
   * Error handling covers cases where the developer user is not found or
   * invalid data is submitted.
   *
   * Successful updates return the updated developer user entity.
   *
   * @param connection
   * @param developerId Unique identifier of the developer user to update
   * @param body Update payload for developer user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @DeveloperAuth()
    developer: DeveloperPayload,
    @TypedParam("developerId")
    developerId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITelegramFileDownloaderDeveloper.IUpdate,
  ): Promise<ITelegramFileDownloaderDeveloper> {
    try {
      return await puttelegramFileDownloaderDeveloperDevelopersDeveloperId({
        developer,
        developerId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete developer user by developer ID.
   *
   * Delete a developer user identified by developerId from the Telegram File
   * Downloader system. This operation permanently removes the developer user
   * and cascades deletion to related records.
   *
   * Only authenticated developers with appropriate permissions should invoke
   * this endpoint.
   *
   * Careful validation must confirm that the developer exists before deletion.
   *
   * Once deleted, the operation cannot be undone. Clients should consider
   * backup or archive strategies before initiating this action.
   *
   * This operation directly deletes the record from the
   * telegram_file_downloader_developers table and all associated relations
   * configured to cascade delete.
   *
   * The operation returns no response body upon success.
   *
   * @param connection
   * @param developerId Unique identifier of the developer user to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @DeveloperAuth()
    developer: DeveloperPayload,
    @TypedParam("developerId")
    developerId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletetelegramFileDownloaderDeveloperDevelopersDeveloperId({
        developer,
        developerId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
