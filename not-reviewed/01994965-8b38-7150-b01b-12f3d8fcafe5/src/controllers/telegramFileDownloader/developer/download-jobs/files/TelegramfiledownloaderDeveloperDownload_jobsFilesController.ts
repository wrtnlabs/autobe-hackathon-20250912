import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { posttelegramFileDownloaderDeveloperDownloadJobsDownloadJobIdFiles } from "../../../../../providers/posttelegramFileDownloaderDeveloperDownloadJobsDownloadJobIdFiles";
import { DeveloperAuth } from "../../../../../decorators/DeveloperAuth";
import { DeveloperPayload } from "../../../../../decorators/payload/DeveloperPayload";
import { patchtelegramFileDownloaderDeveloperDownloadJobsDownloadJobIdFiles } from "../../../../../providers/patchtelegramFileDownloaderDeveloperDownloadJobsDownloadJobIdFiles";
import { gettelegramFileDownloaderDeveloperDownloadJobsDownloadJobIdFilesId } from "../../../../../providers/gettelegramFileDownloaderDeveloperDownloadJobsDownloadJobIdFilesId";
import { puttelegramFileDownloaderDeveloperDownloadJobsDownloadJobIdFilesId } from "../../../../../providers/puttelegramFileDownloaderDeveloperDownloadJobsDownloadJobIdFilesId";

import { ITelegramFileDownloaderFiles } from "../../../../../api/structures/ITelegramFileDownloaderFiles";
import { IPageITelegramFileDownloaderFiles } from "../../../../../api/structures/IPageITelegramFileDownloaderFiles";

@Controller(
  "/telegramFileDownloader/developer/download-jobs/:downloadJobId/files",
)
export class TelegramfiledownloaderDeveloperDownload_jobsFilesController {
  /**
   * Add a new file record to a download job.
   *
   * Create a new file record linked to a specific download job, storing file
   * metadata and signed AWS S3 URL.
   *
   * Clients provide filename, file extension, file size in bytes, and the
   * signed URL for accessing the file. The new record links to the download job
   * identified in the path.
   *
   * This operation is generally intended for backend services updating file
   * information post-download and upload.
   *
   * Security requires only authenticated users may create files relevant to
   * their download jobs.
   *
   * @param connection
   * @param downloadJobId Unique identifier of the download job
   * @param body File creation data with filename, extension, size, and signed
   *   URL
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @DeveloperAuth()
    developer: DeveloperPayload,
    @TypedParam("downloadJobId")
    downloadJobId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITelegramFileDownloaderFiles.ICreate,
  ): Promise<ITelegramFileDownloaderFiles> {
    try {
      return await posttelegramFileDownloaderDeveloperDownloadJobsDownloadJobIdFiles(
        {
          developer,
          downloadJobId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List files associated with a specific download job.
   *
   * Retrieve a paginated list of files corresponding to a given download job.
   * The download job represents a user- or developer-initiated request to
   * download files from a specified Telegram channel or group with optional
   * filtering criteria.
   *
   * The operation requires specifying the download job's unique identifier in
   * the URL path. It returns file metadata including filename, file type, file
   * size in bytes, and signed AWS S3 URLs for secure, temporary access.
   *
   * Security considerations include authorization checks ensuring only users
   * owning the download job (end users or developers) can access corresponding
   * files. Pagination and sorting capabilities optimize responses for clients
   * displaying large file lists.
   *
   * This operation reads from the telegram_file_downloader_files table in the
   * FileManagement namespace according to the Prisma schema. No data
   * modification occurs.
   *
   * Clients should use this endpoint in conjunction with download job status
   * endpoints to display file download progress and completed files for a given
   * user or developer.
   *
   * @param connection
   * @param downloadJobId Unique identifier of the download job
   * @param body Pagination, filtering, and sorting parameters for retrieving
   *   files
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @DeveloperAuth()
    developer: DeveloperPayload,
    @TypedParam("downloadJobId")
    downloadJobId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITelegramFileDownloaderFiles.IRequest,
  ): Promise<IPageITelegramFileDownloaderFiles> {
    try {
      return await patchtelegramFileDownloaderDeveloperDownloadJobsDownloadJobIdFiles(
        {
          developer,
          downloadJobId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed info and signed URL for a specific file.
   *
   * Retrieve detailed information about a specific file associated with a
   * download job.
   *
   * The file is identified by the download job ID and the unique file ID within
   * that job. Returned data include filename, file extension, file size in
   * bytes, and a signed URL granting temporary, authenticated access to the
   * file stored on AWS S3.
   *
   * This operation is read-only and requires authorization to ensure that only
   * the file owner can access the file metadata and download link.
   *
   * The response enables clients to display or offer downloads for individual
   * files.
   *
   * @param connection
   * @param downloadJobId Unique identifier of the download job
   * @param id Unique identifier of the specific file
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @DeveloperAuth()
    developer: DeveloperPayload,
    @TypedParam("downloadJobId")
    downloadJobId: string & tags.Format<"uuid">,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<ITelegramFileDownloaderFiles> {
    try {
      return await gettelegramFileDownloaderDeveloperDownloadJobsDownloadJobIdFilesId(
        {
          developer,
          downloadJobId,
          id,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Modify file metadata and signed URL for a download job file.
   *
   * Update metadata for an existing file associated with a download job.
   *
   * Clients can modify filename, extension, file size, and the signed AWS S3
   * URL.
   *
   * This operation requires download job ID and file ID path parameters to
   * identify the target record.
   *
   * Only authorized users associated with the download job may perform the
   * update.
   *
   * Response returns the updated file record.
   *
   * @param connection
   * @param downloadJobId Unique identifier of the download job
   * @param id Unique identifier of the file to modify
   * @param body File update data - filename, extension, size, and signed URL
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @DeveloperAuth()
    developer: DeveloperPayload,
    @TypedParam("downloadJobId")
    downloadJobId: string & tags.Format<"uuid">,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITelegramFileDownloaderFiles.IUpdate,
  ): Promise<ITelegramFileDownloaderFiles> {
    try {
      return await puttelegramFileDownloaderDeveloperDownloadJobsDownloadJobIdFilesId(
        {
          developer,
          downloadJobId,
          id,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
