import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { gettelegramFileDownloaderDeveloperDownloadJobsId } from "../../../../providers/gettelegramFileDownloaderDeveloperDownloadJobsId";
import { DeveloperAuth } from "../../../../decorators/DeveloperAuth";
import { DeveloperPayload } from "../../../../decorators/payload/DeveloperPayload";
import { puttelegramFileDownloaderDeveloperDownloadJobsId } from "../../../../providers/puttelegramFileDownloaderDeveloperDownloadJobsId";
import { deletetelegramFileDownloaderDeveloperDownloadJobsId } from "../../../../providers/deletetelegramFileDownloaderDeveloperDownloadJobsId";
import { posttelegramFileDownloaderDeveloperDownloadJobs } from "../../../../providers/posttelegramFileDownloaderDeveloperDownloadJobs";

import { ITelegramFileDownloaderDownloadJob } from "../../../../api/structures/ITelegramFileDownloaderDownloadJob";

@Controller("/telegramFileDownloader/developer/download-jobs")
export class TelegramfiledownloaderDeveloperDownload_jobsController {
  /**
   * Retrieve a specific download job by its unique ID.
   *
   * Retrieve a specific download job record identified by its unique UUID from
   * the telegram_file_downloader_download_jobs table.
   *
   * This operation is designed to allow authenticated end users or developers
   * to view the current status and details of their file download requests. It
   * returns all relevant metadata, such as the targeted Telegram channel/group
   * ID, requested file type filters, inclusive date ranges, and job processing
   * status.
   *
   * Security considerations include ensuring the requesting user is authorized
   * to view this specific job, i.e., the job belongs to the user either as an
   * end user or developer.
   *
   * The underlying database table supports soft deletion via the deleted_at
   * timestamp; this operation excludes logically deleted records.
   *
   * Validation involves verifying the UUID format for the job ID path
   * parameter.
   *
   * No request body is required.
   *
   * Related operations include creating new download jobs via POST
   * /download-jobs and updating them via PUT /download-jobs/{id}.
   *
   * If the job does not exist or user is unauthorized, the response should
   * indicate the error appropriately.
   *
   * @param connection
   * @param id Unique identifier of the download job (UUID)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @DeveloperAuth()
    developer: DeveloperPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<ITelegramFileDownloaderDownloadJob> {
    try {
      return await gettelegramFileDownloaderDeveloperDownloadJobsId({
        developer,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing download job by ID with new data.
   *
   * Update an existing download job which includes editable properties such as
   * file filters, date ranges, and status.
   *
   * This operation ensures only authorized users (end users or developers) can
   * change their own download jobs that are not completed or deleted.
   *
   * Validation includes:
   *
   * - Valid UUID for path parameter
   * - Request body conforms to the update DTO
   * - Job existence and ownership
   *
   * Returns the full updated download job entity.
   *
   * Soft-deleted jobs are excluded.
   *
   * If business rules prohibit updates (e.g., completed job), appropriate error
   * response must be returned.
   *
   * Related operations include job creation (POST /download-jobs) and retrieval
   * (GET /download-jobs/{id}).
   *
   * @param connection
   * @param id Unique identifier of the download job to update (UUID)
   * @param body Download job update information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @DeveloperAuth()
    developer: DeveloperPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITelegramFileDownloaderDownloadJob.IUpdate,
  ): Promise<ITelegramFileDownloaderDownloadJob> {
    try {
      return await puttelegramFileDownloaderDeveloperDownloadJobsId({
        developer,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a download job by its unique ID.
   *
   * Delete a download job permanently by ID, including all associated data.
   *
   * This operation performs a hard deletion that removes the job, its files,
   * and any job queue entries.
   *
   * Only the job owner (end user or developer) may delete their download jobs.
   *
   * The system ensures referential integrity through cascading deletes.
   *
   * Path parameter validation requires the download job ID to be a UUID.
   *
   * No data is returned upon success.
   *
   * Related operations include job creation and status checks.
   *
   * @param connection
   * @param id Unique identifier of the download job to delete (UUID)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @DeveloperAuth()
    developer: DeveloperPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletetelegramFileDownloaderDeveloperDownloadJobsId({
        developer,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create a new download job request for a Telegram channel with optional
   * filters.
   *
   * Create a new download job request that specifies the Telegram channel or
   * group ID for file downloads.
   *
   * The request supports optional filtering by comma-separated file types
   * (e.g., mp4, zip, jpg, pdf) and optional date range filtering (start and end
   * inclusive).
   *
   * The system validates that only one channel/group ID is provided and that
   * the user (end user or developer) has sufficient subscription quota to
   * process the request.
   *
   * Upon successful validation, the job is created and persisted, and its
   * status is initially set (e.g., 'pending').
   *
   * The operation returns the full created download job record, including its
   * generated UUID and audit timestamps.
   *
   * This endpoint supports usage by both end users and developers authenticated
   * via JWT tokens.
   *
   * Authorization and quota checks are responsibilities of the business logic
   * beyond this API specification.
   *
   * Related operations include GET /download-jobs/{id} to check job status and
   * PUT /download-jobs/{id} to update jobs.
   *
   * No direct deletion is supported via this endpoint.
   *
   * Request body schema requires:
   *
   * - ChannelId: string (Telegram channel or group identifier)
   * - FileTypes: optional string (comma-separated file extensions)
   * - DateStart: optional date-time (start of date range, inclusive)
   * - DateEnd: optional date-time (end of date range, inclusive)
   *
   * @param connection
   * @param body Download job creation information including channel ID and
   *   optional filters
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @DeveloperAuth()
    developer: DeveloperPayload,
    @TypedBody()
    body: ITelegramFileDownloaderDownloadJob.ICreate,
  ): Promise<ITelegramFileDownloaderDownloadJob> {
    try {
      return await posttelegramFileDownloaderDeveloperDownloadJobs({
        developer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
