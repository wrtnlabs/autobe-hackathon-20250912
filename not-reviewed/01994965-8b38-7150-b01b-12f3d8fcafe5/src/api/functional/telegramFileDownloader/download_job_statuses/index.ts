import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITelegramFileDownloaderDownloadJobStatus } from "../../../structures/ITelegramFileDownloaderDownloadJobStatus";
import { IPageITelegramFileDownloaderDownloadJobStatus } from "../../../structures/IPageITelegramFileDownloaderDownloadJobStatus";

/**
 * List download job statuses with pagination and filters.
 *
 * Retrieve a paginated list of download job statuses. These statuses represent
 * the various states possible in the download job lifecycle, crucial for
 * frontend and API clients to provide status context to users.
 *
 * The telegram_file_downloader_download_job_statuses table stores unique status
 * codes with human-readable descriptions for clarity. This endpoint supports
 * filtering and pagination to efficiently handle large numbers of statuses if
 * needed.
 *
 * Because this is a reference lookup, the endpoint is public and does not
 * require user authentication.
 *
 * This operation complements other download job management API endpoints that
 * return or utilize these status codes.
 *
 * @param props.connection
 * @param props.body Filtering and pagination parameters for download job
 *   statuses
 * @path /telegramFileDownloader/download-job-statuses
 * @accessor api.functional.telegramFileDownloader.download_job_statuses.indexDownloadJobStatuses
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexDownloadJobStatuses(
  connection: IConnection,
  props: indexDownloadJobStatuses.Props,
): Promise<indexDownloadJobStatuses.Response> {
  return true === connection.simulate
    ? indexDownloadJobStatuses.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexDownloadJobStatuses.METADATA,
          path: indexDownloadJobStatuses.path(),
          status: null,
        },
        props.body,
      );
}
export namespace indexDownloadJobStatuses {
  export type Props = {
    /** Filtering and pagination parameters for download job statuses */
    body: ITelegramFileDownloaderDownloadJobStatus.IRequest;
  };
  export type Body = ITelegramFileDownloaderDownloadJobStatus.IRequest;
  export type Response = IPageITelegramFileDownloaderDownloadJobStatus;

  export const METADATA = {
    method: "PATCH",
    path: "/telegramFileDownloader/download-job-statuses",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/telegramFileDownloader/download-job-statuses";
  export const random = (): IPageITelegramFileDownloaderDownloadJobStatus =>
    typia.random<IPageITelegramFileDownloaderDownloadJobStatus>();
  export const simulate = (
    connection: IConnection,
    props: indexDownloadJobStatuses.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexDownloadJobStatuses.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed download job status by ID.
 *
 * Get detailed information about a download job status by its unique
 * identifier. This includes the status code and the description clarifying the
 * meaning of the status.
 *
 * The telegram_file_downloader_download_job_statuses table uniquely identifies
 * statuses with UUIDs and includes descriptions to support UI display and
 * client logic.
 *
 * This endpoint enables applications to fetch details for a known status ID,
 * useful for detailed views or logs.
 *
 * Being reference data, no authorization is required for this endpoint.
 *
 * @param props.connection
 * @param props.id Unique identifier of the download job status record
 * @path /telegramFileDownloader/download-job-statuses/:id
 * @accessor api.functional.telegramFileDownloader.download_job_statuses.atDownloadJobStatus
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atDownloadJobStatus(
  connection: IConnection,
  props: atDownloadJobStatus.Props,
): Promise<atDownloadJobStatus.Response> {
  return true === connection.simulate
    ? atDownloadJobStatus.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atDownloadJobStatus.METADATA,
          path: atDownloadJobStatus.path(props),
          status: null,
        },
      );
}
export namespace atDownloadJobStatus {
  export type Props = {
    /** Unique identifier of the download job status record */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ITelegramFileDownloaderDownloadJobStatus;

  export const METADATA = {
    method: "GET",
    path: "/telegramFileDownloader/download-job-statuses/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/telegramFileDownloader/download-job-statuses/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITelegramFileDownloaderDownloadJobStatus =>
    typia.random<ITelegramFileDownloaderDownloadJobStatus>();
  export const simulate = (
    connection: IConnection,
    props: atDownloadJobStatus.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atDownloadJobStatus.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
