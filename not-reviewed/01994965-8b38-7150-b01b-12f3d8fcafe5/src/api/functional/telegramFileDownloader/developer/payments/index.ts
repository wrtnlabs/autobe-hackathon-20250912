import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITelegramFileDownloaderPayment } from "../../../../structures/ITelegramFileDownloaderPayment";
import { IPageITelegramFileDownloaderPayment } from "../../../../structures/IPageITelegramFileDownloaderPayment";

/**
 * Create a new payment entry.
 *
 * Create a new payment record for a user subscription event.
 *
 * The request body must provide user ID, subscription plan ID, payment provider
 * details, payment amount, currency, payment status, and payment date.
 *
 * Only authorized roles 'endUser', 'developer', or 'administrator' may access
 * this endpoint.
 *
 * On success, the newly created payment record is returned.
 *
 * Errors include validation failures on required fields or unauthorized access.
 *
 * @param props.connection
 * @param props.body Details to create a new payment record
 * @path /telegramFileDownloader/developer/payments
 * @accessor api.functional.telegramFileDownloader.developer.payments.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Details to create a new payment record */
    body: ITelegramFileDownloaderPayment.ICreate;
  };
  export type Body = ITelegramFileDownloaderPayment.ICreate;
  export type Response = ITelegramFileDownloaderPayment;

  export const METADATA = {
    method: "POST",
    path: "/telegramFileDownloader/developer/payments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/telegramFileDownloader/developer/payments";
  export const random = (): ITelegramFileDownloaderPayment =>
    typia.random<ITelegramFileDownloaderPayment>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List and search payments with pagination.
 *
 * Retrieve a list of payments recorded in the system. Payments correspond to
 * orders users have made to subscribe to various plans.
 *
 * This endpoint provides filtering and pagination capabilities to locate
 * payments by user, status, and date.
 *
 * Access is restricted to authenticated users with roles 'endUser',
 * 'developer', or 'administrator' depending on their permissions.
 *
 * The response returns a paginated collection of payment records in detailed
 * form, with amounts, statuses, and references to subscription plans and
 * users.
 *
 * Errors may include authentication failures or invalid search parameters.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for payments
 * @path /telegramFileDownloader/developer/payments
 * @accessor api.functional.telegramFileDownloader.developer.payments.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for payments */
    body: ITelegramFileDownloaderPayment.IRequest;
  };
  export type Body = ITelegramFileDownloaderPayment.IRequest;
  export type Response = IPageITelegramFileDownloaderPayment;

  export const METADATA = {
    method: "PATCH",
    path: "/telegramFileDownloader/developer/payments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/telegramFileDownloader/developer/payments";
  export const random = (): IPageITelegramFileDownloaderPayment =>
    typia.random<IPageITelegramFileDownloaderPayment>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get payment details by ID.
 *
 * Retrieve detailed payment information for a specific payment record given its
 * payment ID.
 *
 * This operation returns full details including payment amount, currency,
 * status, payment provider, and associations to subscription plans and the
 * paying user.
 *
 * Access is allowed for authenticated 'endUser', 'developer', or
 * 'administrator' roles.
 *
 * If the payment ID does not exist, an appropriate error response is returned.
 *
 * @param props.connection
 * @param props.id Unique identifier of the payment
 * @path /telegramFileDownloader/developer/payments/:id
 * @accessor api.functional.telegramFileDownloader.developer.payments.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the payment */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ITelegramFileDownloaderPayment;

  export const METADATA = {
    method: "GET",
    path: "/telegramFileDownloader/developer/payments/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/telegramFileDownloader/developer/payments/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITelegramFileDownloaderPayment =>
    typia.random<ITelegramFileDownloaderPayment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
