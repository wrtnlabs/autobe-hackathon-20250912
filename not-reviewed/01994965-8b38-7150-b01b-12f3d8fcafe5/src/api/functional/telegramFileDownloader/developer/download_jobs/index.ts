import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITelegramFileDownloaderDownloadJob } from "../../../../structures/ITelegramFileDownloaderDownloadJob";
export * as files from "./files/index";

/**
 * Retrieve a specific download job by its unique ID.
 *
 * Retrieve a specific download job record identified by its unique UUID from
 * the telegram_file_downloader_download_jobs table.
 *
 * This operation is designed to allow authenticated end users or developers to
 * view the current status and details of their file download requests. It
 * returns all relevant metadata, such as the targeted Telegram channel/group
 * ID, requested file type filters, inclusive date ranges, and job processing
 * status.
 *
 * Security considerations include ensuring the requesting user is authorized to
 * view this specific job, i.e., the job belongs to the user either as an end
 * user or developer.
 *
 * The underlying database table supports soft deletion via the deleted_at
 * timestamp; this operation excludes logically deleted records.
 *
 * Validation involves verifying the UUID format for the job ID path parameter.
 *
 * No request body is required.
 *
 * Related operations include creating new download jobs via POST /download-jobs
 * and updating them via PUT /download-jobs/{id}.
 *
 * If the job does not exist or user is unauthorized, the response should
 * indicate the error appropriately.
 *
 * @param props.connection
 * @param props.id Unique identifier of the download job (UUID)
 * @path /telegramFileDownloader/developer/download-jobs/:id
 * @accessor api.functional.telegramFileDownloader.developer.download_jobs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the download job (UUID) */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ITelegramFileDownloaderDownloadJob;

  export const METADATA = {
    method: "GET",
    path: "/telegramFileDownloader/developer/download-jobs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/telegramFileDownloader/developer/download-jobs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITelegramFileDownloaderDownloadJob =>
    typia.random<ITelegramFileDownloaderDownloadJob>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing download job by ID with new data.
 *
 * Update an existing download job which includes editable properties such as
 * file filters, date ranges, and status.
 *
 * This operation ensures only authorized users (end users or developers) can
 * change their own download jobs that are not completed or deleted.
 *
 * Validation includes:
 *
 * - Valid UUID for path parameter
 * - Request body conforms to the update DTO
 * - Job existence and ownership
 *
 * Returns the full updated download job entity.
 *
 * Soft-deleted jobs are excluded.
 *
 * If business rules prohibit updates (e.g., completed job), appropriate error
 * response must be returned.
 *
 * Related operations include job creation (POST /download-jobs) and retrieval
 * (GET /download-jobs/{id}).
 *
 * @param props.connection
 * @param props.id Unique identifier of the download job to update (UUID)
 * @param props.body Download job update information
 * @path /telegramFileDownloader/developer/download-jobs/:id
 * @accessor api.functional.telegramFileDownloader.developer.download_jobs.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the download job to update (UUID) */
    id: string & tags.Format<"uuid">;

    /** Download job update information */
    body: ITelegramFileDownloaderDownloadJob.IUpdate;
  };
  export type Body = ITelegramFileDownloaderDownloadJob.IUpdate;
  export type Response = ITelegramFileDownloaderDownloadJob;

  export const METADATA = {
    method: "PUT",
    path: "/telegramFileDownloader/developer/download-jobs/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/telegramFileDownloader/developer/download-jobs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITelegramFileDownloaderDownloadJob =>
    typia.random<ITelegramFileDownloaderDownloadJob>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a download job by its unique ID.
 *
 * Delete a download job permanently by ID, including all associated data.
 *
 * This operation performs a hard deletion that removes the job, its files, and
 * any job queue entries.
 *
 * Only the job owner (end user or developer) may delete their download jobs.
 *
 * The system ensures referential integrity through cascading deletes.
 *
 * Path parameter validation requires the download job ID to be a UUID.
 *
 * No data is returned upon success.
 *
 * Related operations include job creation and status checks.
 *
 * @param props.connection
 * @param props.id Unique identifier of the download job to delete (UUID)
 * @path /telegramFileDownloader/developer/download-jobs/:id
 * @accessor api.functional.telegramFileDownloader.developer.download_jobs.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the download job to delete (UUID) */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/telegramFileDownloader/developer/download-jobs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/telegramFileDownloader/developer/download-jobs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create a new download job request for a Telegram channel with optional
 * filters.
 *
 * Create a new download job request that specifies the Telegram channel or
 * group ID for file downloads.
 *
 * The request supports optional filtering by comma-separated file types (e.g.,
 * mp4, zip, jpg, pdf) and optional date range filtering (start and end
 * inclusive).
 *
 * The system validates that only one channel/group ID is provided and that the
 * user (end user or developer) has sufficient subscription quota to process the
 * request.
 *
 * Upon successful validation, the job is created and persisted, and its status
 * is initially set (e.g., 'pending').
 *
 * The operation returns the full created download job record, including its
 * generated UUID and audit timestamps.
 *
 * This endpoint supports usage by both end users and developers authenticated
 * via JWT tokens.
 *
 * Authorization and quota checks are responsibilities of the business logic
 * beyond this API specification.
 *
 * Related operations include GET /download-jobs/{id} to check job status and
 * PUT /download-jobs/{id} to update jobs.
 *
 * No direct deletion is supported via this endpoint.
 *
 * Request body schema requires:
 *
 * - ChannelId: string (Telegram channel or group identifier)
 * - FileTypes: optional string (comma-separated file extensions)
 * - DateStart: optional date-time (start of date range, inclusive)
 * - DateEnd: optional date-time (end of date range, inclusive)
 *
 * @param props.connection
 * @param props.body Download job creation information including channel ID and
 *   optional filters
 * @path /telegramFileDownloader/developer/download-jobs
 * @accessor api.functional.telegramFileDownloader.developer.download_jobs.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Download job creation information including channel ID and optional
     * filters
     */
    body: ITelegramFileDownloaderDownloadJob.ICreate;
  };
  export type Body = ITelegramFileDownloaderDownloadJob.ICreate;
  export type Response = ITelegramFileDownloaderDownloadJob;

  export const METADATA = {
    method: "POST",
    path: "/telegramFileDownloader/developer/download-jobs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/telegramFileDownloader/developer/download-jobs";
  export const random = (): ITelegramFileDownloaderDownloadJob =>
    typia.random<ITelegramFileDownloaderDownloadJob>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
