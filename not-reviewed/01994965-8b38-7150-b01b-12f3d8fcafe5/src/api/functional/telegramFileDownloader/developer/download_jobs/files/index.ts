import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITelegramFileDownloaderFiles } from "../../../../../structures/ITelegramFileDownloaderFiles";
import { IPageITelegramFileDownloaderFiles } from "../../../../../structures/IPageITelegramFileDownloaderFiles";

/**
 * Add a new file record to a download job.
 *
 * Create a new file record linked to a specific download job, storing file
 * metadata and signed AWS S3 URL.
 *
 * Clients provide filename, file extension, file size in bytes, and the signed
 * URL for accessing the file. The new record links to the download job
 * identified in the path.
 *
 * This operation is generally intended for backend services updating file
 * information post-download and upload.
 *
 * Security requires only authenticated users may create files relevant to their
 * download jobs.
 *
 * @param props.connection
 * @param props.downloadJobId Unique identifier of the download job
 * @param props.body File creation data with filename, extension, size, and
 *   signed URL
 * @path /telegramFileDownloader/developer/download-jobs/:downloadJobId/files
 * @accessor api.functional.telegramFileDownloader.developer.download_jobs.files.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the download job */
    downloadJobId: string & tags.Format<"uuid">;

    /** File creation data with filename, extension, size, and signed URL */
    body: ITelegramFileDownloaderFiles.ICreate;
  };
  export type Body = ITelegramFileDownloaderFiles.ICreate;
  export type Response = ITelegramFileDownloaderFiles;

  export const METADATA = {
    method: "POST",
    path: "/telegramFileDownloader/developer/download-jobs/:downloadJobId/files",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/telegramFileDownloader/developer/download-jobs/${encodeURIComponent(props.downloadJobId ?? "null")}/files`;
  export const random = (): ITelegramFileDownloaderFiles =>
    typia.random<ITelegramFileDownloaderFiles>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("downloadJobId")(() => typia.assert(props.downloadJobId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List files associated with a specific download job.
 *
 * Retrieve a paginated list of files corresponding to a given download job. The
 * download job represents a user- or developer-initiated request to download
 * files from a specified Telegram channel or group with optional filtering
 * criteria.
 *
 * The operation requires specifying the download job's unique identifier in the
 * URL path. It returns file metadata including filename, file type, file size
 * in bytes, and signed AWS S3 URLs for secure, temporary access.
 *
 * Security considerations include authorization checks ensuring only users
 * owning the download job (end users or developers) can access corresponding
 * files. Pagination and sorting capabilities optimize responses for clients
 * displaying large file lists.
 *
 * This operation reads from the telegram_file_downloader_files table in the
 * FileManagement namespace according to the Prisma schema. No data modification
 * occurs.
 *
 * Clients should use this endpoint in conjunction with download job status
 * endpoints to display file download progress and completed files for a given
 * user or developer.
 *
 * @param props.connection
 * @param props.downloadJobId Unique identifier of the download job
 * @param props.body Pagination, filtering, and sorting parameters for
 *   retrieving files
 * @path /telegramFileDownloader/developer/download-jobs/:downloadJobId/files
 * @accessor api.functional.telegramFileDownloader.developer.download_jobs.files.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the download job */
    downloadJobId: string & tags.Format<"uuid">;

    /** Pagination, filtering, and sorting parameters for retrieving files */
    body: ITelegramFileDownloaderFiles.IRequest;
  };
  export type Body = ITelegramFileDownloaderFiles.IRequest;
  export type Response = IPageITelegramFileDownloaderFiles;

  export const METADATA = {
    method: "PATCH",
    path: "/telegramFileDownloader/developer/download-jobs/:downloadJobId/files",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/telegramFileDownloader/developer/download-jobs/${encodeURIComponent(props.downloadJobId ?? "null")}/files`;
  export const random = (): IPageITelegramFileDownloaderFiles =>
    typia.random<IPageITelegramFileDownloaderFiles>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("downloadJobId")(() => typia.assert(props.downloadJobId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed info and signed URL for a specific file.
 *
 * Retrieve detailed information about a specific file associated with a
 * download job.
 *
 * The file is identified by the download job ID and the unique file ID within
 * that job. Returned data include filename, file extension, file size in bytes,
 * and a signed URL granting temporary, authenticated access to the file stored
 * on AWS S3.
 *
 * This operation is read-only and requires authorization to ensure that only
 * the file owner can access the file metadata and download link.
 *
 * The response enables clients to display or offer downloads for individual
 * files.
 *
 * @param props.connection
 * @param props.downloadJobId Unique identifier of the download job
 * @param props.id Unique identifier of the specific file
 * @path /telegramFileDownloader/developer/download-jobs/:downloadJobId/files/:id
 * @accessor api.functional.telegramFileDownloader.developer.download_jobs.files.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the download job */
    downloadJobId: string & tags.Format<"uuid">;

    /** Unique identifier of the specific file */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ITelegramFileDownloaderFiles;

  export const METADATA = {
    method: "GET",
    path: "/telegramFileDownloader/developer/download-jobs/:downloadJobId/files/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/telegramFileDownloader/developer/download-jobs/${encodeURIComponent(props.downloadJobId ?? "null")}/files/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITelegramFileDownloaderFiles =>
    typia.random<ITelegramFileDownloaderFiles>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("downloadJobId")(() => typia.assert(props.downloadJobId));
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Modify file metadata and signed URL for a download job file.
 *
 * Update metadata for an existing file associated with a download job.
 *
 * Clients can modify filename, extension, file size, and the signed AWS S3 URL.
 *
 * This operation requires download job ID and file ID path parameters to
 * identify the target record.
 *
 * Only authorized users associated with the download job may perform the
 * update.
 *
 * Response returns the updated file record.
 *
 * @param props.connection
 * @param props.downloadJobId Unique identifier of the download job
 * @param props.id Unique identifier of the file to modify
 * @param props.body File update data - filename, extension, size, and signed
 *   URL
 * @path /telegramFileDownloader/developer/download-jobs/:downloadJobId/files/:id
 * @accessor api.functional.telegramFileDownloader.developer.download_jobs.files.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the download job */
    downloadJobId: string & tags.Format<"uuid">;

    /** Unique identifier of the file to modify */
    id: string & tags.Format<"uuid">;

    /** File update data - filename, extension, size, and signed URL */
    body: ITelegramFileDownloaderFiles.IUpdate;
  };
  export type Body = ITelegramFileDownloaderFiles.IUpdate;
  export type Response = ITelegramFileDownloaderFiles;

  export const METADATA = {
    method: "PUT",
    path: "/telegramFileDownloader/developer/download-jobs/:downloadJobId/files/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/telegramFileDownloader/developer/download-jobs/${encodeURIComponent(props.downloadJobId ?? "null")}/files/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITelegramFileDownloaderFiles =>
    typia.random<ITelegramFileDownloaderFiles>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("downloadJobId")(() => typia.assert(props.downloadJobId));
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
