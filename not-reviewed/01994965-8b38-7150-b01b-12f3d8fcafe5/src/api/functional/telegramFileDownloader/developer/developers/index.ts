import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITelegramFileDownloaderDeveloper } from "../../../../structures/ITelegramFileDownloaderDeveloper";

/**
 * Update developer user information by developer ID.
 *
 * Update an existing developer user's information in the Telegram File
 * Downloader system. This operation modifies fields like email and password
 * hash, ensuring the user's identity and credentials can be kept current.
 *
 * Security measures require authenticated developer users to invoke this API
 * and enforce ownership checks to prevent unauthorized updates.
 *
 * This operation directly updates the telegram_file_downloader_developers
 * table, referencing fields id, email, password_hash, and updated_at. The
 * updated_at timestamp records the last modification time.
 *
 * Validation includes checking unique email constraints to avoid duplications,
 * ensuring email format correctness, and securely hashing passwords taken in
 * update payloads.
 *
 * Associated logs in telegram_file_downloader_audit_logs may be generated
 * asynchronously to audit profile changes.
 *
 * Error handling covers cases where the developer user is not found or invalid
 * data is submitted.
 *
 * Successful updates return the updated developer user entity.
 *
 * @param props.connection
 * @param props.developerId Unique identifier of the developer user to update
 * @param props.body Update payload for developer user
 * @path /telegramFileDownloader/developer/developers/:developerId
 * @accessor api.functional.telegramFileDownloader.developer.developers.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the developer user to update */
    developerId: string & tags.Format<"uuid">;

    /** Update payload for developer user */
    body: ITelegramFileDownloaderDeveloper.IUpdate;
  };
  export type Body = ITelegramFileDownloaderDeveloper.IUpdate;
  export type Response = ITelegramFileDownloaderDeveloper;

  export const METADATA = {
    method: "PUT",
    path: "/telegramFileDownloader/developer/developers/:developerId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/telegramFileDownloader/developer/developers/${encodeURIComponent(props.developerId ?? "null")}`;
  export const random = (): ITelegramFileDownloaderDeveloper =>
    typia.random<ITelegramFileDownloaderDeveloper>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("developerId")(() => typia.assert(props.developerId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete developer user by developer ID.
 *
 * Delete a developer user identified by developerId from the Telegram File
 * Downloader system. This operation permanently removes the developer user and
 * cascades deletion to related records.
 *
 * Only authenticated developers with appropriate permissions should invoke this
 * endpoint.
 *
 * Careful validation must confirm that the developer exists before deletion.
 *
 * Once deleted, the operation cannot be undone. Clients should consider backup
 * or archive strategies before initiating this action.
 *
 * This operation directly deletes the record from the
 * telegram_file_downloader_developers table and all associated relations
 * configured to cascade delete.
 *
 * The operation returns no response body upon success.
 *
 * @param props.connection
 * @param props.developerId Unique identifier of the developer user to delete
 * @path /telegramFileDownloader/developer/developers/:developerId
 * @accessor api.functional.telegramFileDownloader.developer.developers.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the developer user to delete */
    developerId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/telegramFileDownloader/developer/developers/:developerId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/telegramFileDownloader/developer/developers/${encodeURIComponent(props.developerId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("developerId")(() => typia.assert(props.developerId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
