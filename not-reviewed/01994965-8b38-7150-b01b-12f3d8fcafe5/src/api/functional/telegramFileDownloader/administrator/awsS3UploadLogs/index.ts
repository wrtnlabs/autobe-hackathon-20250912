import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITelegramFileDownloaderAwsS3UploadLogs } from "../../../../structures/ITelegramFileDownloaderAwsS3UploadLogs";
import { IPageITelegramFileDownloaderAwsS3UploadLogs } from "../../../../structures/IPageITelegramFileDownloaderAwsS3UploadLogs";

/**
 * List and search AWS S3 upload logs with pagination.
 *
 * This operation retrieves a paginated list of AWS S3 upload logs capturing
 * file upload attempts, statuses, errors, and metadata. The listing supports
 * complex search and pagination criteria.
 *
 * These logs help administrators audit file upload activity and troubleshoot
 * failures.
 *
 * Authorization is restricted to admin roles.
 *
 * Data is fully sourced from telegram_file_downloader_aws_s3_upload_logs table.
 *
 * No request body content is required for the GET single operation; filtering
 * uses request body for the PATCH list operation.
 *
 * Expected errors include unauthorized access and invalid parameters.
 *
 * This operation corresponds to the PATCH /awsS3UploadLogs endpoint.
 *
 * @param props.connection
 * @param props.body Filter and pagination parameters for querying AWS S3 upload
 *   logs
 * @path /telegramFileDownloader/administrator/awsS3UploadLogs
 * @accessor api.functional.telegramFileDownloader.administrator.awsS3UploadLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filter and pagination parameters for querying AWS S3 upload logs */
    body: ITelegramFileDownloaderAwsS3UploadLogs.IRequest;
  };
  export type Body = ITelegramFileDownloaderAwsS3UploadLogs.IRequest;
  export type Response = IPageITelegramFileDownloaderAwsS3UploadLogs.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/telegramFileDownloader/administrator/awsS3UploadLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/telegramFileDownloader/administrator/awsS3UploadLogs";
  export const random =
    (): IPageITelegramFileDownloaderAwsS3UploadLogs.ISummary =>
      typia.random<IPageITelegramFileDownloaderAwsS3UploadLogs.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve AWS S3 upload log details by ID.
 *
 * This operation fetches detailed properties of an AWS S3 upload log identified
 * by its unique UUID. Details include file meta-info, upload status, errors,
 * and timing.
 *
 * Access is restricted to administrators responsible for system monitoring.
 *
 * The path parameter `awsS3UploadLogId` must be a valid UUID.
 *
 * Proper error handling confirms clear responses to unknown log IDs or lack of
 * permission.
 *
 * Data source is telegram_file_downloader_aws_s3_upload_logs table.
 *
 * This operation corresponds to the GET /awsS3UploadLogs/{awsS3UploadLogId}
 * endpoint.
 *
 * @param props.connection
 * @param props.awsS3UploadLogId Unique identifier of the AWS S3 upload log
 * @path /telegramFileDownloader/administrator/awsS3UploadLogs/:awsS3UploadLogId
 * @accessor api.functional.telegramFileDownloader.administrator.awsS3UploadLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the AWS S3 upload log */
    awsS3UploadLogId: string & tags.Format<"uuid">;
  };
  export type Response = ITelegramFileDownloaderAwsS3UploadLogs;

  export const METADATA = {
    method: "GET",
    path: "/telegramFileDownloader/administrator/awsS3UploadLogs/:awsS3UploadLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/telegramFileDownloader/administrator/awsS3UploadLogs/${encodeURIComponent(props.awsS3UploadLogId ?? "null")}`;
  export const random = (): ITelegramFileDownloaderAwsS3UploadLogs =>
    typia.random<ITelegramFileDownloaderAwsS3UploadLogs>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("awsS3UploadLogId")(() =>
        typia.assert(props.awsS3UploadLogId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
