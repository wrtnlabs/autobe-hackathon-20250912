import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITelegramFileDownloaderEndUser } from "../../../../structures/ITelegramFileDownloaderEndUser";
import { IPageITelegramFileDownloaderEnduser } from "../../../../structures/IPageITelegramFileDownloaderEnduser";

/**
 * Search and retrieve a filtered list of Telegram File Downloader end users.
 *
 * Retrieve a filtered and paginated list of Telegram File Downloader end users.
 * This operation queries the telegram_file_downloader_endusers table and
 * returns summary information about users. It supports common filters such as
 * deletion status and allows paging through potentially large user bases.
 *
 * Authentication and authorization are enforced to restrict access to
 * authorized administrative roles only.
 *
 * The response excludes sensitive information such as password hashes for
 * security reasons.
 *
 * Use this operation to power user management dashboards, administrative
 * monitoring, or bulk user data exports.
 *
 * Errors are returned for invalid query filters or unauthorized access
 * attempts.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for Telegram File
 *   Downloader end user filtering
 * @path /telegramFileDownloader/administrator/endusers
 * @accessor api.functional.telegramFileDownloader.administrator.endusers.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for Telegram File
     * Downloader end user filtering
     */
    body: ITelegramFileDownloaderEndUser.IRequest;
  };
  export type Body = ITelegramFileDownloaderEndUser.IRequest;
  export type Response = IPageITelegramFileDownloaderEnduser.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/telegramFileDownloader/administrator/endusers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/telegramFileDownloader/administrator/endusers";
  export const random = (): IPageITelegramFileDownloaderEnduser.ISummary =>
    typia.random<IPageITelegramFileDownloaderEnduser.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a Telegram File Downloader end user.
 *
 * Retrieve detailed profile information of a specific Telegram File Downloader
 * end user by enduserId. This includes all non-sensitive fields and status
 * markers.
 *
 * Access to this operation is restricted to administrators for security and
 * privacy.
 *
 * Return 404 if the specified user does not exist.
 *
 * Use this in detailed user profile, audit, and troubleshooting workflows.
 *
 * @param props.connection
 * @param props.enduserId Unique identifier of the Telegram File Downloader end
 *   user
 * @path /telegramFileDownloader/administrator/endusers/:enduserId
 * @accessor api.functional.telegramFileDownloader.administrator.endusers.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the Telegram File Downloader end user */
    enduserId: string & tags.Format<"uuid">;
  };
  export type Response = ITelegramFileDownloaderEndUser;

  export const METADATA = {
    method: "GET",
    path: "/telegramFileDownloader/administrator/endusers/:enduserId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/telegramFileDownloader/administrator/endusers/${encodeURIComponent(props.enduserId ?? "null")}`;
  export const random = (): ITelegramFileDownloaderEndUser =>
    typia.random<ITelegramFileDownloaderEndUser>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("enduserId")(() => typia.assert(props.enduserId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing Telegram File Downloader end user.
 *
 * Update Telegram File Downloader end user information identified by enduserId.
 *
 * Supports changes to email, password hash, and auditing timestamps.
 *
 * Access is restricted to administrator role.
 *
 * Returns the updated user record.
 *
 * Error responses include 404 Not Found and 409 Conflict on email duplication.
 *
 * @param props.connection
 * @param props.enduserId Unique identifier of the Telegram File Downloader end
 *   user to update
 * @param props.body Updated data for Telegram File Downloader end user
 * @path /telegramFileDownloader/administrator/endusers/:enduserId
 * @accessor api.functional.telegramFileDownloader.administrator.endusers.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the Telegram File Downloader end user to update */
    enduserId: string & tags.Format<"uuid">;

    /** Updated data for Telegram File Downloader end user */
    body: ITelegramFileDownloaderEndUser.IUpdate;
  };
  export type Body = ITelegramFileDownloaderEndUser.IUpdate;
  export type Response = ITelegramFileDownloaderEndUser;

  export const METADATA = {
    method: "PUT",
    path: "/telegramFileDownloader/administrator/endusers/:enduserId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/telegramFileDownloader/administrator/endusers/${encodeURIComponent(props.enduserId ?? "null")}`;
  export const random = (): ITelegramFileDownloaderEndUser =>
    typia.random<ITelegramFileDownloaderEndUser>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("enduserId")(() => typia.assert(props.enduserId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a telegram file downloader end user by ID.
 *
 * This API operation permanently deletes a telegram file downloader end user by
 * their unique identifier.
 *
 * The end user entity represents individuals who use the system via web
 * dashboard for downloading files from Telegram channels/groups.
 *
 * Upon deletion, all related data such as their download jobs, storage usage,
 * payments, and audit logs are cascaded and removed.
 *
 * This hard delete operation removes the user from the database entirely and
 * cannot be undone.
 *
 * Authorization roles required: administrator only.
 *
 * No request body is needed for this DELETE operation.
 *
 * The operation returns no content but HTTP status 204 upon success.
 *
 * Clients should handle this accordingly to confirm removal and update UI or
 * cache.
 *
 * @param props.connection
 * @param props.enduserId Unique identifier of the end user to delete
 * @path /telegramFileDownloader/administrator/endusers/:enduserId
 * @accessor api.functional.telegramFileDownloader.administrator.endusers.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the end user to delete */
    enduserId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/telegramFileDownloader/administrator/endusers/:enduserId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/telegramFileDownloader/administrator/endusers/${encodeURIComponent(props.enduserId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("enduserId")(() => typia.assert(props.enduserId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
