import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITelegramFileDownloaderAuditLog } from "../../../../structures/ITelegramFileDownloaderAuditLog";
import { IPageITelegramFileDownloaderAuditLog } from "../../../../structures/IPageITelegramFileDownloaderAuditLog";

/**
 * Search and retrieve paginated filtered audit logs.
 *
 * This PATCH operation enables administrators to search and list audit logs
 * with filters for action types, entity types, associated user IDs, and date
 * ranges.
 *
 * Audit logs record system-level events such as login attempts, file downloads,
 * subscription changes, and administrative actions. This endpoint helps trace
 * activities for security and compliance.
 *
 * The request body requires search and pagination parameters conforming to the
 * ITelegramFileDownloaderAuditLog.IRequest schema. The response provides a
 * paginated listing of audit log entries matching the criteria.
 *
 * Access is restricted to administrators to ensure audit log confidentiality.
 *
 * The datasource is the 'telegram_file_downloader_audit_logs' Prisma table.
 *
 * No path parameters are required.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for audit logs
 * @path /telegramFileDownloader/administrator/auditLogs
 * @accessor api.functional.telegramFileDownloader.administrator.auditLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for audit logs */
    body: ITelegramFileDownloaderAuditLog.IRequest;
  };
  export type Body = ITelegramFileDownloaderAuditLog.IRequest;
  export type Response = IPageITelegramFileDownloaderAuditLog;

  export const METADATA = {
    method: "PATCH",
    path: "/telegramFileDownloader/administrator/auditLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/telegramFileDownloader/administrator/auditLogs";
  export const random = (): IPageITelegramFileDownloaderAuditLog =>
    typia.random<IPageITelegramFileDownloaderAuditLog>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve audit log details by ID from telegram_file_downloader_audit_logs.
 *
 * Retrieve a single audit log entry by its unique identifier. This operation is
 * intended for use by administrators who need to investigate system events and
 * user activities in depth. Audit logs capture critical system actions,
 * supporting security monitoring and forensic analysis.
 *
 * The endpoint validates the provided audit log ID to ensure its existence and
 * returns the complete record with all metadata fields including user relation,
 * action type, entity details, timestamps, and relevant context such as IP
 * address.
 *
 * Only authorized users with administrative privileges may access this
 * endpoint. The operation references the telegram_file_downloader_audit_logs
 * table in the Prisma schema, ensuring accuracy and consistency with underlying
 * data.
 *
 * Errors such as invalid or non-existent IDs result in appropriate error
 * responses.
 *
 * This operation complements list retrieval endpoints that return collections
 * of audit logs, enabling detailed drill-down on individual records.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target audit log entry
 * @path /telegramFileDownloader/administrator/auditLogs/:id
 * @accessor api.functional.telegramFileDownloader.administrator.auditLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target audit log entry */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ITelegramFileDownloaderAuditLog;

  export const METADATA = {
    method: "GET",
    path: "/telegramFileDownloader/administrator/auditLogs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/telegramFileDownloader/administrator/auditLogs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITelegramFileDownloaderAuditLog =>
    typia.random<ITelegramFileDownloaderAuditLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
