import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

/**
 * Permanently delete a file associated with a download job.
 *
 * Delete a downloaded file from the system by specifying the download job ID
 * and file ID. This operation permanently removes the file record and
 * associated metadata.
 *
 * Authorization: Accessible only by administrator role.
 *
 * The operation requires the downloadJobId and file id as path parameters, both
 * UUID strings.
 *
 * No request body or response body is returned.
 *
 * Errors include invalid UUID format or not found resources.
 *
 * This operation ensures that deleted file data does not remain in the system.
 *
 * @param props.connection
 * @param props.downloadJobId UUID of the download job containing the file
 * @param props.id UUID of the file to delete
 * @path /telegramFileDownloader/administrator/download-jobs/:downloadJobId/files/:id
 * @accessor api.functional.telegramFileDownloader.administrator.download_jobs.files.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of the download job containing the file */
    downloadJobId: string & tags.Format<"uuid">;

    /** UUID of the file to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/telegramFileDownloader/administrator/download-jobs/:downloadJobId/files/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/telegramFileDownloader/administrator/download-jobs/${encodeURIComponent(props.downloadJobId ?? "null")}/files/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("downloadJobId")(() => typia.assert(props.downloadJobId));
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
