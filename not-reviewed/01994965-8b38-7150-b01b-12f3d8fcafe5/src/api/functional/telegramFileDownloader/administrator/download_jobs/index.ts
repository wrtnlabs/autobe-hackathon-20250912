import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITelegramFileDownloaderDownloadJobs } from "../../../../structures/ITelegramFileDownloaderDownloadJobs";
import { IPageITelegramFileDownloaderDownloadJobs } from "../../../../structures/IPageITelegramFileDownloaderDownloadJobs";
export * as files from "./files/index";

/**
 * Retrieve paginated list of download job requests with filters.
 *
 * Search and retrieve a paginated list of download job requests with filtering
 * by status, date ranges, channel, and file types. This list supports
 * monitoring active and historical download jobs.
 *
 * Mapped to telegram_file_downloader_download_jobs table, this operation
 * provides visibility into system usage and job processing status.
 *
 * Authorization restricts access to privileged roles.
 *
 * Returns paginated, summarized download job records matching the search
 * criteria.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for download job
 *   filtering
 * @path /telegramFileDownloader/administrator/download-jobs
 * @accessor api.functional.telegramFileDownloader.administrator.download_jobs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for download job filtering */
    body: ITelegramFileDownloaderDownloadJobs.IRequest;
  };
  export type Body = ITelegramFileDownloaderDownloadJobs.IRequest;
  export type Response = IPageITelegramFileDownloaderDownloadJobs.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/telegramFileDownloader/administrator/download-jobs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/telegramFileDownloader/administrator/download-jobs";
  export const random = (): IPageITelegramFileDownloaderDownloadJobs.ISummary =>
    typia.random<IPageITelegramFileDownloaderDownloadJobs.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
