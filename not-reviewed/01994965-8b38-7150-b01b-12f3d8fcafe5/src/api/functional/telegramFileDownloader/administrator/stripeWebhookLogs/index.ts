import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITelegramFileDownloaderStripeWebhookLogs } from "../../../../structures/ITelegramFileDownloaderStripeWebhookLogs";
import { IPageITelegramFileDownloaderStripeWebhookLogs } from "../../../../structures/IPageITelegramFileDownloaderStripeWebhookLogs";

/**
 * List and search Stripe webhook logs with pagination.
 *
 * This operation retrieves a paginated list of Stripe webhook event logs
 * recorded by the Telegram File Downloader system. These logs capture detailed
 * JSON payloads and event metadata from Stripe for payment and subscription
 * events. The listing supports filters to search and paginate through webhook
 * records.
 *
 * Users authorized to access this endpoint can view Stripe event details for
 * audit and troubleshooting but cannot modify logs via API.
 *
 * This operation references the telegram_file_downloader_stripe_webhook_logs
 * table which stores webhook events received from Stripe, including event IDs,
 * types, payloads, received timestamps, and processing flags.
 *
 * No request body is needed as filtering and pagination use query parameters
 * defined in the IRequest type. The response returns a paginated list of
 * webhook logs with summary data.
 *
 * Expected roles include administrative-level users who monitor payment system
 * activity.
 *
 * API errors include invalid query parameters and unauthorized access.
 *
 * This operation corresponds to the PATCH /stripeWebhookLogs endpoint.
 *
 * @param props.connection
 * @param props.body Pagination, filtering, and search criteria for Stripe
 *   webhook logs
 * @path /telegramFileDownloader/administrator/stripeWebhookLogs
 * @accessor api.functional.telegramFileDownloader.administrator.stripeWebhookLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Pagination, filtering, and search criteria for Stripe webhook logs */
    body: ITelegramFileDownloaderStripeWebhookLogs.IRequest;
  };
  export type Body = ITelegramFileDownloaderStripeWebhookLogs.IRequest;
  export type Response = IPageITelegramFileDownloaderStripeWebhookLogs.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/telegramFileDownloader/administrator/stripeWebhookLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/telegramFileDownloader/administrator/stripeWebhookLogs";
  export const random =
    (): IPageITelegramFileDownloaderStripeWebhookLogs.ISummary =>
      typia.random<IPageITelegramFileDownloaderStripeWebhookLogs.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve Stripe webhook log details by ID.
 *
 * This operation retrieves detailed information about a specified Stripe
 * webhook log entry by its unique identifier. The data includes the full JSON
 * payload of the webhook event, event type, processing status, timestamps, and
 * any relevant metadata.
 *
 * Access is restricted to administrative users responsible for monitoring and
 * debugging payment processing events.
 *
 * This operation employs path parameter `stripeWebhookLogId` which must be a
 * valid UUID representing the target webhook log record.
 *
 * Appropriate error codes are returned for unknown IDs or unauthorized access.
 *
 * The operation fetches data from the
 * telegram_file_downloader_stripe_webhook_logs table, which holds Stripe
 * webhook event information.
 *
 * This operation corresponds to the GET /stripeWebhookLogs/{stripeWebhookLogId}
 * endpoint.
 *
 * @param props.connection
 * @param props.stripeWebhookLogId Unique identifier of the Stripe webhook log
 * @path /telegramFileDownloader/administrator/stripeWebhookLogs/:stripeWebhookLogId
 * @accessor api.functional.telegramFileDownloader.administrator.stripeWebhookLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the Stripe webhook log */
    stripeWebhookLogId: string & tags.Format<"uuid">;
  };
  export type Response = ITelegramFileDownloaderStripeWebhookLogs;

  export const METADATA = {
    method: "GET",
    path: "/telegramFileDownloader/administrator/stripeWebhookLogs/:stripeWebhookLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/telegramFileDownloader/administrator/stripeWebhookLogs/${encodeURIComponent(props.stripeWebhookLogId ?? "null")}`;
  export const random = (): ITelegramFileDownloaderStripeWebhookLogs =>
    typia.random<ITelegramFileDownloaderStripeWebhookLogs>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("stripeWebhookLogId")(() =>
        typia.assert(props.stripeWebhookLogId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
