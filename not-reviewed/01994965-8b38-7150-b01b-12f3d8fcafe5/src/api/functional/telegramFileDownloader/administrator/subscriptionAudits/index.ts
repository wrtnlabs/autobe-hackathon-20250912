import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITelegramFileDownloaderSubscriptionAudit } from "../../../../structures/ITelegramFileDownloaderSubscriptionAudit";
import { IPageITelegramFileDownloaderSubscriptionAudit } from "../../../../structures/IPageITelegramFileDownloaderSubscriptionAudit";
import { ITelegramFileDownloaderSubscriptionAudits } from "../../../../structures/ITelegramFileDownloaderSubscriptionAudits";

/**
 * Search and retrieve subscription audit history from
 * telegram_file_downloader_subscription_audits.
 *
 * Retrieve a filtered, paginated list of subscription audit records tracking
 * subscription changes over time. This operation enables administrators to
 * query subscription update history by user, plan, change type, and time
 * frames.
 *
 * The response provides detailed subscription change metadata including
 * timestamps, related payments, notes, and plan information.
 *
 * Access is limited to authorized administrators.
 *
 * This operation works in concert with billing and payment endpoints to provide
 * holistic subscription lifecycle tracking.
 *
 * @param props.connection
 * @param props.body Filtering and pagination parameters for subscription audit
 *   records
 * @path /telegramFileDownloader/administrator/subscriptionAudits
 * @accessor api.functional.telegramFileDownloader.administrator.subscriptionAudits.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filtering and pagination parameters for subscription audit records */
    body: ITelegramFileDownloaderSubscriptionAudit.IRequest;
  };
  export type Body = ITelegramFileDownloaderSubscriptionAudit.IRequest;
  export type Response = IPageITelegramFileDownloaderSubscriptionAudit;

  export const METADATA = {
    method: "PATCH",
    path: "/telegramFileDownloader/administrator/subscriptionAudits",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/telegramFileDownloader/administrator/subscriptionAudits";
  export const random = (): IPageITelegramFileDownloaderSubscriptionAudit =>
    typia.random<IPageITelegramFileDownloaderSubscriptionAudit>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed subscription audit by ID.
 *
 * Retrieve detailed information for a specific subscription audit record using
 * its unique identifier.
 *
 * This API operation fetches all stored data related to subscription changes
 * such as upgrades, downgrades, cancellations, and associated billing events
 * tied to a user. It references the
 * telegram_file_downloader_subscription_audits database table which holds
 * historical subscription change data for audit and compliance purposes.
 *
 * Only users with proper administrator privileges are authorized to access this
 * endpoint to prevent exposure of sensitive subscription and payment audit
 * details.
 *
 * The path parameter subscriptionAuditId must be a valid UUID representing the
 * audit record to fetch. The response includes extensive audit details
 * including change type, timestamps, related subscription plan and payment IDs,
 * user identity, and optional notes.
 *
 * This detailed end-point supports administrative monitoring, troubleshooting
 * subscription life-cycle, and billing reconciliation workflows within the
 * Telegram File Downloader system.
 *
 * @param props.connection
 * @param props.subscriptionAuditId Unique identifier of the subscription audit
 *   record to retrieve
 * @path /telegramFileDownloader/administrator/subscriptionAudits/:subscriptionAuditId
 * @accessor api.functional.telegramFileDownloader.administrator.subscriptionAudits.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the subscription audit record to retrieve */
    subscriptionAuditId: string & tags.Format<"uuid">;
  };
  export type Response = ITelegramFileDownloaderSubscriptionAudits;

  export const METADATA = {
    method: "GET",
    path: "/telegramFileDownloader/administrator/subscriptionAudits/:subscriptionAuditId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/telegramFileDownloader/administrator/subscriptionAudits/${encodeURIComponent(props.subscriptionAuditId ?? "null")}`;
  export const random = (): ITelegramFileDownloaderSubscriptionAudits =>
    typia.random<ITelegramFileDownloaderSubscriptionAudits>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("subscriptionAuditId")(() =>
        typia.assert(props.subscriptionAuditId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
