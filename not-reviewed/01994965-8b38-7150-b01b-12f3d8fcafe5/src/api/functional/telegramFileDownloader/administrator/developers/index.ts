import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITelegramFileDownloaderDeveloper } from "../../../../structures/ITelegramFileDownloaderDeveloper";
import { IPageITelegramFileDownloaderDeveloper } from "../../../../structures/IPageITelegramFileDownloaderDeveloper";

/**
 * Create a new developer user who can access the Telegram File Downloader API.
 *
 * This operation requires administrative privileges.
 *
 * All required fields must be provided in the request body, including email and
 * password hash.
 *
 * On success, the system returns the created developer user record.
 *
 * Clients must securely handle password information.
 *
 * Authorization roles: administrator.
 *
 * No path parameters are required.
 *
 * Request body includes required creation data.
 *
 * Response body returns detailed developer information.
 *
 * @param props.connection
 * @param props.body Information required to create a developer user
 * @path /telegramFileDownloader/administrator/developers
 * @accessor api.functional.telegramFileDownloader.administrator.developers.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information required to create a developer user */
    body: ITelegramFileDownloaderDeveloper.ICreate;
  };
  export type Body = ITelegramFileDownloaderDeveloper.ICreate;
  export type Response = ITelegramFileDownloaderDeveloper;

  export const METADATA = {
    method: "POST",
    path: "/telegramFileDownloader/administrator/developers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/telegramFileDownloader/administrator/developers";
  export const random = (): ITelegramFileDownloaderDeveloper =>
    typia.random<ITelegramFileDownloaderDeveloper>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve list of developer users.
 *
 * Retrieve a filtered and paginated list of developer users of the Telegram
 * File Downloader service.
 *
 * This operation allows administrators or authorized users to search developers
 * by multiple criteria such as email, registration date ranges, and account
 * status.
 *
 * It supports pagination and sorting for efficient management.
 *
 * Response includes summary information optimized for list display.
 *
 * Only active and non-deleted developer users are included.
 *
 * No path parameters are required.
 *
 * Authorization roles: administrator.
 *
 * Request body must specify search parameters, pagination, and sorting
 * criteria.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for filtering
 *   developers
 * @path /telegramFileDownloader/administrator/developers
 * @accessor api.functional.telegramFileDownloader.administrator.developers.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for filtering developers */
    body: ITelegramFileDownloaderDeveloper.IRequest;
  };
  export type Body = ITelegramFileDownloaderDeveloper.IRequest;
  export type Response = IPageITelegramFileDownloaderDeveloper.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/telegramFileDownloader/administrator/developers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/telegramFileDownloader/administrator/developers";
  export const random = (): IPageITelegramFileDownloaderDeveloper.ISummary =>
    typia.random<IPageITelegramFileDownloaderDeveloper.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a developer user by ID.
 *
 * Retrieve detailed information for a specific developer user by their unique
 * identifier.
 *
 * This developer entity represents programmatic users accessing the Telegram
 * File Downloader service via API.
 *
 * Response includes all defined attributes except sensitive fields which would
 * be handled securely.
 *
 * Authorization restricted to administrators.
 *
 * The GET request uses the developerId path parameter.
 *
 * No request body is required, the response returns developer information.
 *
 * @param props.connection
 * @param props.developerId Unique identifier of the developer user to retrieve
 * @path /telegramFileDownloader/administrator/developers/:developerId
 * @accessor api.functional.telegramFileDownloader.administrator.developers.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the developer user to retrieve */
    developerId: string & tags.Format<"uuid">;
  };
  export type Response = ITelegramFileDownloaderDeveloper;

  export const METADATA = {
    method: "GET",
    path: "/telegramFileDownloader/administrator/developers/:developerId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/telegramFileDownloader/administrator/developers/${encodeURIComponent(props.developerId ?? "null")}`;
  export const random = (): ITelegramFileDownloaderDeveloper =>
    typia.random<ITelegramFileDownloaderDeveloper>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("developerId")(() => typia.assert(props.developerId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
