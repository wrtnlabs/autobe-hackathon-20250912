import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITelegramFileDownloaderErrorLog } from "../../../../structures/ITelegramFileDownloaderErrorLog";
import { IPageITelegramFileDownloaderErrorLog } from "../../../../structures/IPageITelegramFileDownloaderErrorLog";

/**
 * Retrieve detailed information for a specific error log entry.
 *
 * This GET operation fetches a single error log entry from the system by its
 * ID.
 *
 * Error logs capture detailed failure information including error code,
 * message, source of error, occurrence time, and resolution status. This is
 * intended to assist administrators and support engineers in diagnosing issues
 * with file downloads or system processing.
 *
 * The response includes all fields of the error log as stored in the database,
 * enabling comprehensive visibility into errors. Access to this endpoint is
 * restricted to administrators to prevent exposure of internal system details.
 *
 * Proper error handling includes returning 404 if the specified ID does not
 * exist, and authorization validation.
 *
 * The backing table is 'telegram_file_downloader_error_logs' in Prisma schema.
 *
 * No request body is required.
 *
 * @param props.connection
 * @param props.id Unique identifier of the error log entry
 * @path /telegramFileDownloader/administrator/errorLogs/:id
 * @accessor api.functional.telegramFileDownloader.administrator.errorLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the error log entry */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ITelegramFileDownloaderErrorLog;

  export const METADATA = {
    method: "GET",
    path: "/telegramFileDownloader/administrator/errorLogs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/telegramFileDownloader/administrator/errorLogs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITelegramFileDownloaderErrorLog =>
    typia.random<ITelegramFileDownloaderErrorLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve paginated filtered error logs.
 *
 * This PATCH operation provides a filtered, sorted, and paginated list of error
 * logs recorded in the system.
 *
 * Administrators can query error logs with search parameters including error
 * code, resolution status, and date ranges. Pagination allows efficient
 * navigation through large volumes of logs.
 *
 * This endpoint facilitates monitoring and resolving system issues by providing
 * detailed error information for troubleshooting. Access is restricted to
 * administrators to ensure security.
 *
 * The request body must include filtering and paging parameters according to
 * the ITelegramFileDownloaderErrorLog.IRequest schema. The response returns a
 * paginated list of error log entries matching the criteria.
 *
 * The underlying data resides in the 'telegram_file_downloader_error_logs'
 * table of the Prisma schema.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for error logs
 * @path /telegramFileDownloader/administrator/errorLogs
 * @accessor api.functional.telegramFileDownloader.administrator.errorLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for error logs */
    body: ITelegramFileDownloaderErrorLog.IRequest;
  };
  export type Body = ITelegramFileDownloaderErrorLog.IRequest;
  export type Response = IPageITelegramFileDownloaderErrorLog;

  export const METADATA = {
    method: "PATCH",
    path: "/telegramFileDownloader/administrator/errorLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/telegramFileDownloader/administrator/errorLogs";
  export const random = (): IPageITelegramFileDownloaderErrorLog =>
    typia.random<IPageITelegramFileDownloaderErrorLog>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
