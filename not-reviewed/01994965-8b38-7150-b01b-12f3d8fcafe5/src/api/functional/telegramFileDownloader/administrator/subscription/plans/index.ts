import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITelegramFileDownloaderSubscriptionPlans } from "../../../../../structures/ITelegramFileDownloaderSubscriptionPlans";

/**
 * Create a new subscription plan with detailed properties including code, name,
 * pricing, file counts, size limits, quotas, and active status.
 *
 * Security checks must enforce only administrators are allowed to create plans.
 *
 * This operation inserts a new record into the
 * telegram_file_downloader_subscription_plans table in the Prisma schema.
 *
 * Validation errors such as duplicate plan codes or invalid numeric values will
 * result in HTTP 400 Bad Request responses with error details.
 *
 * Upon successful creation, the newly created subscription plan record is
 * returned.
 *
 * @param props.connection
 * @param props.body Subscription plan creation payload including code, name,
 *   pricing, limits, and status
 * @path /telegramFileDownloader/administrator/subscription/plans
 * @accessor api.functional.telegramFileDownloader.administrator.subscription.plans.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Subscription plan creation payload including code, name, pricing,
     * limits, and status
     */
    body: ITelegramFileDownloaderSubscriptionPlans.ICreate;
  };
  export type Body = ITelegramFileDownloaderSubscriptionPlans.ICreate;
  export type Response = ITelegramFileDownloaderSubscriptionPlans;

  export const METADATA = {
    method: "POST",
    path: "/telegramFileDownloader/administrator/subscription/plans",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/telegramFileDownloader/administrator/subscription/plans";
  export const random = (): ITelegramFileDownloaderSubscriptionPlans =>
    typia.random<ITelegramFileDownloaderSubscriptionPlans>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing subscription plan by ID.
 *
 * Update properties of an existing subscription plan by its unique ID.
 *
 * Includes updating code, name, pricing, download limits, file size limits,
 * total storage, and the plan's active/inactive status.
 *
 * The operation validates input for correctness and uniqueness as per business
 * rules.
 *
 * Only administrators may execute this update.
 *
 * The database record in telegram_file_downloader_subscription_plans is updated
 * accordingly.
 *
 * If the plan ID does not exist, the operation returns HTTP 404 Not Found.
 *
 * Validation failures result in HTTP 400 Bad Request with descriptive error
 * messages.
 *
 * @param props.connection
 * @param props.id Unique ID of the subscription plan to update
 * @param props.body Subscription plan update payload with properties to modify
 * @path /telegramFileDownloader/administrator/subscription/plans/:id
 * @accessor api.functional.telegramFileDownloader.administrator.subscription.plans.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique ID of the subscription plan to update */
    id: string & tags.Format<"uuid">;

    /** Subscription plan update payload with properties to modify */
    body: ITelegramFileDownloaderSubscriptionPlans.IUpdate;
  };
  export type Body = ITelegramFileDownloaderSubscriptionPlans.IUpdate;
  export type Response = ITelegramFileDownloaderSubscriptionPlans;

  export const METADATA = {
    method: "PUT",
    path: "/telegramFileDownloader/administrator/subscription/plans/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/telegramFileDownloader/administrator/subscription/plans/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITelegramFileDownloaderSubscriptionPlans =>
    typia.random<ITelegramFileDownloaderSubscriptionPlans>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a subscription plan by ID.
 *
 * Delete a subscription plan from the system by its unique identifier. This is
 * a hard delete operation, which permanently removes the subscription plan
 * record from the database.
 *
 * Only users with the 'administrator' role can perform this operation.
 *
 * The subscription plan is identified by its UUID. Deletion removes the record
 * and all dependent records must be handled by database cascade policies.
 *
 * No request body or response body content is provided.
 *
 * Error cases include attempting to delete a non-existent subscription plan.
 *
 * @param props.connection
 * @param props.id Unique identifier of the subscription plan to delete
 * @path /telegramFileDownloader/administrator/subscription/plans/:id
 * @accessor api.functional.telegramFileDownloader.administrator.subscription.plans.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the subscription plan to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/telegramFileDownloader/administrator/subscription/plans/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/telegramFileDownloader/administrator/subscription/plans/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
