import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITelegramFileDownloaderBillingLog } from "../../../../structures/ITelegramFileDownloaderBillingLog";
import { IPageITelegramFileDownloaderBillingLog } from "../../../../structures/IPageITelegramFileDownloaderBillingLog";

/**
 * Search and retrieve paginated billing logs from
 * telegram_file_downloader_billing_logs.
 *
 * Retrieve a filtered, paginated list of billing logs containing payment and
 * billing event details. This operation supports complex queries enabling
 * admins to slice billing data by event type, time ranges, and related payment
 * references.
 *
 * The response includes billing event metadata, timestamps, and references to
 * related payments, assisting reconciliation and audit processes.
 *
 * Access to this operation is restricted to users with administrative roles to
 * protect sensitive financial information.
 *
 * This endpoint complements detailed payment and subscription audit APIs,
 * providing comprehensive financial oversight.
 *
 * Pagination capability ensures scalable and performant access to large billing
 * log datasets.
 *
 * @param props.connection
 * @param props.body Pagination, filtering, and sorting criteria for billing
 *   logs
 * @path /telegramFileDownloader/administrator/billingLogs
 * @accessor api.functional.telegramFileDownloader.administrator.billingLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Pagination, filtering, and sorting criteria for billing logs */
    body: ITelegramFileDownloaderBillingLog.IRequest;
  };
  export type Body = ITelegramFileDownloaderBillingLog.IRequest;
  export type Response = IPageITelegramFileDownloaderBillingLog;

  export const METADATA = {
    method: "PATCH",
    path: "/telegramFileDownloader/administrator/billingLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/telegramFileDownloader/administrator/billingLogs";
  export const random = (): IPageITelegramFileDownloaderBillingLog =>
    typia.random<IPageITelegramFileDownloaderBillingLog>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve billing log details by ID from
 * telegram_file_downloader_billing_logs.
 *
 * Retrieve billing log details by its unique billing log ID. This endpoint is
 * used by administrators to gain detailed insight into individual billing
 * events, transactions, and payment records.
 *
 * The operation returns full metadata including event type, timestamps, related
 * payment references, and any additional descriptive details provided at event
 * creation.
 *
 * Authorization is limited to admin users due to the sensitive nature of
 * billing data.
 *
 * This API complements list and audit endpoints that provide aggregated billing
 * data and subscription change history.
 *
 * @param props.connection
 * @param props.billingLogId Unique identifier of the billing log entry
 * @path /telegramFileDownloader/administrator/billingLogs/:billingLogId
 * @accessor api.functional.telegramFileDownloader.administrator.billingLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the billing log entry */
    billingLogId: string & tags.Format<"uuid">;
  };
  export type Response = ITelegramFileDownloaderBillingLog;

  export const METADATA = {
    method: "GET",
    path: "/telegramFileDownloader/administrator/billingLogs/:billingLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/telegramFileDownloader/administrator/billingLogs/${encodeURIComponent(props.billingLogId ?? "null")}`;
  export const random = (): ITelegramFileDownloaderBillingLog =>
    typia.random<ITelegramFileDownloaderBillingLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("billingLogId")(() => typia.assert(props.billingLogId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
