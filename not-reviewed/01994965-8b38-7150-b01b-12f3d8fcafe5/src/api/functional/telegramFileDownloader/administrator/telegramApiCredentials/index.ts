import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITelegramFileDownloaderTelegramApiCredential } from "../../../../structures/ITelegramFileDownloaderTelegramApiCredential";
import { ITelegramFileDownloaderTelegramApiCredentials } from "../../../../structures/ITelegramFileDownloaderTelegramApiCredentials";
import { IPageITelegramFileDownloaderTelegramApiCredentials } from "../../../../structures/IPageITelegramFileDownloaderTelegramApiCredentials";

/**
 * Create a new Telegram API credential record.
 *
 * This operation enables an administrator to create a new Telegram API
 * credential used by the system to interact with Telegram APIs securely. The
 * request must provide the bot's display name, secret token, and whether it is
 * active. Upon success, the system stores the credential, timestamps the
 * creation and update time, and returns the created credential information.
 *
 * Role restriction ensures only users with administrator privileges can perform
 * this sensitive action.
 *
 * Proper validation on bot token uniqueness and token security is assumed to be
 * enforced at the provider level.
 *
 * The API strictly maps to telegram_file_downloader_telegram_api_credentials
 * table in the Prisma schema, guaranteeing fidelity in data.
 *
 * @param props.connection
 * @param props.body Telegram API credential creation data
 * @path /telegramFileDownloader/administrator/telegramApiCredentials
 * @accessor api.functional.telegramFileDownloader.administrator.telegramApiCredentials.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Telegram API credential creation data */
    body: ITelegramFileDownloaderTelegramApiCredential.ICreate;
  };
  export type Body = ITelegramFileDownloaderTelegramApiCredential.ICreate;
  export type Response = ITelegramFileDownloaderTelegramApiCredential;

  export const METADATA = {
    method: "POST",
    path: "/telegramFileDownloader/administrator/telegramApiCredentials",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/telegramFileDownloader/administrator/telegramApiCredentials";
  export const random = (): ITelegramFileDownloaderTelegramApiCredential =>
    typia.random<ITelegramFileDownloaderTelegramApiCredential>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search Telegram API credentials.
 *
 * Search and retrieve Telegram API credential records with filtering,
 * pagination, and sorting. Administrators only.
 *
 * Supports filtering by bot name, active status, and last usage.
 *
 * Returns paginated list with credential details excluding sensitive bot
 * tokens.
 *
 * Use to manage and audit Telegram API credentials used by the system.
 *
 * @param props.connection
 * @param props.body Request payload with search filters for Telegram API
 *   credentials
 * @path /telegramFileDownloader/administrator/telegramApiCredentials
 * @accessor api.functional.telegramFileDownloader.administrator.telegramApiCredentials.search
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /** Request payload with search filters for Telegram API credentials */
    body: ITelegramFileDownloaderTelegramApiCredentials.IRequest;
  };
  export type Body = ITelegramFileDownloaderTelegramApiCredentials.IRequest;
  export type Response = IPageITelegramFileDownloaderTelegramApiCredentials;

  export const METADATA = {
    method: "PATCH",
    path: "/telegramFileDownloader/administrator/telegramApiCredentials",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/telegramFileDownloader/administrator/telegramApiCredentials";
  export const random =
    (): IPageITelegramFileDownloaderTelegramApiCredentials =>
      typia.random<IPageITelegramFileDownloaderTelegramApiCredentials>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve Telegram API credential by ID.
 *
 * This API operation allows administrators to retrieve detailed information
 * about a specific Telegram API credential using its unique identifier. The
 * Telegram API credentials include bot name, token, and status information that
 * are essential for authenticating to Telegram services. Access to this
 * endpoint should be restricted to authorized administrators only.
 *
 * In addition, there are operations to create new Telegram API credentials.
 * This requires passing bot name, token string, and the isActive status flag.
 * The system stores these securely and tracks creation and update timestamps.
 *
 * Updating credentials by ID is also supported. Administrators can change bot
 * names, tokens, or toggle the isActive status. The system will update
 * timestamps accordingly.
 *
 * Deletion of credentials is performed permanently and irreversibly, fully
 * removing the record from the database. This action should be guarded under
 * administrative roles only.
 *
 * All operations map directly to the
 * telegram_file_downloader_telegram_api_credentials table as defined in the
 * Prisma schema, ensuring data coherence and integrity.
 *
 * @param props.connection
 * @param props.telegramApiCredentialId Unique identifier of the Telegram API
 *   credential
 * @path /telegramFileDownloader/administrator/telegramApiCredentials/:telegramApiCredentialId
 * @accessor api.functional.telegramFileDownloader.administrator.telegramApiCredentials.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the Telegram API credential */
    telegramApiCredentialId: string & tags.Format<"uuid">;
  };
  export type Response = ITelegramFileDownloaderTelegramApiCredential;

  export const METADATA = {
    method: "GET",
    path: "/telegramFileDownloader/administrator/telegramApiCredentials/:telegramApiCredentialId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/telegramFileDownloader/administrator/telegramApiCredentials/${encodeURIComponent(props.telegramApiCredentialId ?? "null")}`;
  export const random = (): ITelegramFileDownloaderTelegramApiCredential =>
    typia.random<ITelegramFileDownloaderTelegramApiCredential>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("telegramApiCredentialId")(() =>
        typia.assert(props.telegramApiCredentialId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update details of a Telegram API credential.
 *
 * This API operation enables modification of existing Telegram API credential
 * records by authorized administrators. The target credential is identified by
 * telegramApiCredentialId in the path. Updates include changing the bot display
 * name, bot token string, and active flag.
 *
 * The operation updates the corresponding entry in the
 * telegram_file_downloader_telegram_api_credentials table, revising timestamps
 * accordingly to reflect modification.
 *
 * Security requires administrator role authorization due to sensitive nature of
 * tokens.
 *
 * All input data must comply with schema validations and constraints.
 *
 * @param props.connection
 * @param props.telegramApiCredentialId Unique identifier of the Telegram API
 *   credential
 * @param props.body Telegram API credential update request data
 * @path /telegramFileDownloader/administrator/telegramApiCredentials/:telegramApiCredentialId
 * @accessor api.functional.telegramFileDownloader.administrator.telegramApiCredentials.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the Telegram API credential */
    telegramApiCredentialId: string & tags.Format<"uuid">;

    /** Telegram API credential update request data */
    body: ITelegramFileDownloaderTelegramApiCredential.IUpdate;
  };
  export type Body = ITelegramFileDownloaderTelegramApiCredential.IUpdate;
  export type Response = ITelegramFileDownloaderTelegramApiCredential;

  export const METADATA = {
    method: "PUT",
    path: "/telegramFileDownloader/administrator/telegramApiCredentials/:telegramApiCredentialId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/telegramFileDownloader/administrator/telegramApiCredentials/${encodeURIComponent(props.telegramApiCredentialId ?? "null")}`;
  export const random = (): ITelegramFileDownloaderTelegramApiCredential =>
    typia.random<ITelegramFileDownloaderTelegramApiCredential>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("telegramApiCredentialId")(() =>
        typia.assert(props.telegramApiCredentialId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently remove a Telegram API credential.
 *
 * This operation permanently deletes a Telegram API credential by its UUID. The
 * operation removes the record entirely from the
 * telegram_file_downloader_telegram_api_credentials table.
 *
 * Deletion is irreversible and requires administrator privileges to execute.
 * Proper authorization is mandatory.
 *
 * The API path includes the telegramApiCredentialId as a path parameter to
 * identify the target credential securely.
 *
 * This operation does not return any response body but confirms successful
 * deletion via HTTP status codes.
 *
 * Safety checks and auditing should be handled at the service layer.
 *
 * @param props.connection
 * @param props.telegramApiCredentialId Unique identifier of the Telegram API
 *   credential
 * @path /telegramFileDownloader/administrator/telegramApiCredentials/:telegramApiCredentialId
 * @accessor api.functional.telegramFileDownloader.administrator.telegramApiCredentials.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the Telegram API credential */
    telegramApiCredentialId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/telegramFileDownloader/administrator/telegramApiCredentials/:telegramApiCredentialId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/telegramFileDownloader/administrator/telegramApiCredentials/${encodeURIComponent(props.telegramApiCredentialId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("telegramApiCredentialId")(() =>
        typia.assert(props.telegramApiCredentialId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
