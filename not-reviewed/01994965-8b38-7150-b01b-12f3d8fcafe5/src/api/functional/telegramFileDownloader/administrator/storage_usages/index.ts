import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITelegramFileDownloaderStorageUsage } from "../../../../structures/ITelegramFileDownloaderStorageUsage";
import { IPageITelegramFileDownloaderStorageUsage } from "../../../../structures/IPageITelegramFileDownloaderStorageUsage";

/**
 * Create new storage usage record.
 *
 * Create a new storage usage record with detailed metrics including storage
 * bytes used and quota maximum bytes. The request body must supply all
 * necessary information as per ITelegramFileDownloaderStorageUsage.ICreate.
 *
 * Accessible only by administrators.
 *
 * The response returns the created storage usage entity.
 *
 * Handles errors for duplicate or invalid entries.
 *
 * @param props.connection
 * @param props.body Storage usage creation payload
 * @path /telegramFileDownloader/administrator/storage-usages
 * @accessor api.functional.telegramFileDownloader.administrator.storage_usages.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Storage usage creation payload */
    body: ITelegramFileDownloaderStorageUsage.ICreate;
  };
  export type Body = ITelegramFileDownloaderStorageUsage.ICreate;
  export type Response = ITelegramFileDownloaderStorageUsage;

  export const METADATA = {
    method: "POST",
    path: "/telegramFileDownloader/administrator/storage-usages",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/telegramFileDownloader/administrator/storage-usages";
  export const random = (): ITelegramFileDownloaderStorageUsage =>
    typia.random<ITelegramFileDownloaderStorageUsage>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve filtered paginated list of storage usages.
 *
 * Retrieve a paginated and filtered list of storage usage records to monitor
 * user and developer storage quotas.
 *
 * Only administrators have access to this operation.
 *
 * Supports filtering by enduser or developer IDs, amount of storage used, and
 * file counts within the request body.
 *
 * Response includes pagination metadata and summarized storage usage records.
 *
 * Error handling includes invalid query parameters and pagination issues.
 *
 * @param props.connection
 * @param props.body Filter and pagination parameters for storage usages
 * @path /telegramFileDownloader/administrator/storage-usages
 * @accessor api.functional.telegramFileDownloader.administrator.storage_usages.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filter and pagination parameters for storage usages */
    body: ITelegramFileDownloaderStorageUsage.IRequest;
  };
  export type Body = ITelegramFileDownloaderStorageUsage.IRequest;
  export type Response = IPageITelegramFileDownloaderStorageUsage.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/telegramFileDownloader/administrator/storage-usages",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/telegramFileDownloader/administrator/storage-usages";
  export const random = (): IPageITelegramFileDownloaderStorageUsage.ISummary =>
    typia.random<IPageITelegramFileDownloaderStorageUsage.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get storage usage record details by ID.
 *
 * Get detailed information about a storage usage record via its unique
 * identifier.
 *
 * Accessible only to administrators.
 *
 * Includes storage bytes used and quota maximum.
 *
 * Errors handled include invalid identifier format and record not found.
 *
 * @param props.connection
 * @param props.id UUID of the storage usage record
 * @path /telegramFileDownloader/administrator/storage-usages/:id
 * @accessor api.functional.telegramFileDownloader.administrator.storage_usages.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** UUID of the storage usage record */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ITelegramFileDownloaderStorageUsage;

  export const METADATA = {
    method: "GET",
    path: "/telegramFileDownloader/administrator/storage-usages/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/telegramFileDownloader/administrator/storage-usages/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITelegramFileDownloaderStorageUsage =>
    typia.random<ITelegramFileDownloaderStorageUsage>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update storage usage record.
 *
 * Update an existing storage usage record identified by its unique ID. This
 * operation is intended for managing and correcting usage statistics such as
 * storage bytes used and file count for the specific user. The storage usage
 * applies to both endusers and developers, identified by their user IDs.
 * Timestamps for updates are maintained by the system. This endpoint requires
 * authentication and appropriate authorization to modify user storage data.
 * Soft delete behavior is respected: records marked as deleted are excluded
 * from update operations.
 *
 * The telegram_file_downloader_storage_usages table stores crucial quota
 * enforcement data, enabling monitoring and control of user storage consumption
 * against subscription plan limits. Accurate updates ensure users do not exceed
 * quota limits and maintain consistent billing and service quality.
 *
 * This update operation complements listing and querying operations that
 * retrieve current storage usage data for monitoring and reporting.
 *
 * Users of this API must have proper authorization depending on administrative
 * or user roles to avoid unauthorized modifications.
 *
 * @param props.connection
 * @param props.id Unique identifier of the storage usage record to update
 * @param props.body Storage usage update information
 * @path /telegramFileDownloader/administrator/storage-usages/:id
 * @accessor api.functional.telegramFileDownloader.administrator.storage_usages.updateStorageUsage
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateStorageUsage(
  connection: IConnection,
  props: updateStorageUsage.Props,
): Promise<updateStorageUsage.Response> {
  return true === connection.simulate
    ? updateStorageUsage.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateStorageUsage.METADATA,
          path: updateStorageUsage.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateStorageUsage {
  export type Props = {
    /** Unique identifier of the storage usage record to update */
    id: string & tags.Format<"uuid">;

    /** Storage usage update information */
    body: ITelegramFileDownloaderStorageUsage.IUpdate;
  };
  export type Body = ITelegramFileDownloaderStorageUsage.IUpdate;
  export type Response = ITelegramFileDownloaderStorageUsage;

  export const METADATA = {
    method: "PUT",
    path: "/telegramFileDownloader/administrator/storage-usages/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/telegramFileDownloader/administrator/storage-usages/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITelegramFileDownloaderStorageUsage =>
    typia.random<ITelegramFileDownloaderStorageUsage>();
  export const simulate = (
    connection: IConnection,
    props: updateStorageUsage.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateStorageUsage.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete storage usage record.
 *
 * Permanently delete a storage usage record by its unique ID. This operation
 * removes the quota tracking data for the specified user (enduser or developer)
 * and should be used carefully to avoid accidental data loss affecting billing
 * and quota enforcement.
 *
 * Since the schema does not explicitly specify soft delete for this entity,
 * deletion is permanent and irreversible.
 *
 * Proper authorization is required, typically limited to administrators, to
 * avoid unauthorized removals that could impact service monitoring.
 *
 * This deletion complements update and list operations managing storage usage
 * data.
 *
 * @param props.connection
 * @param props.id Unique identifier of the storage usage record to delete
 * @path /telegramFileDownloader/administrator/storage-usages/:id
 * @accessor api.functional.telegramFileDownloader.administrator.storage_usages.eraseStorageUsage
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseStorageUsage(
  connection: IConnection,
  props: eraseStorageUsage.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseStorageUsage.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseStorageUsage.METADATA,
          path: eraseStorageUsage.path(props),
          status: null,
        },
      );
}
export namespace eraseStorageUsage {
  export type Props = {
    /** Unique identifier of the storage usage record to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/telegramFileDownloader/administrator/storage-usages/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/telegramFileDownloader/administrator/storage-usages/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseStorageUsage.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseStorageUsage.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
