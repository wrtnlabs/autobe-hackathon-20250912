import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITelegramFileDownloaderAdministrators } from "../../../../structures/ITelegramFileDownloaderAdministrators";
import { ITelegramFileDownloaderAdministrator } from "../../../../structures/ITelegramFileDownloaderAdministrator";
import { IPageITelegramFileDownloaderAdministrator } from "../../../../structures/IPageITelegramFileDownloaderAdministrator";

/**
 * Create a new administrator user account.
 *
 * Create a new administrator user with a unique email and secure password hash.
 * This operation ensures that the administrator can authenticate and access
 * protected system areas for user and subscription management.
 *
 * The operation is mapped to the telegram_file_downloader_administrators table,
 * which includes fields for email, password_hash, and auditing timestamps.
 *
 * Security considerations include ensuring email uniqueness and hashing the
 * password before storage. The administrator record maintains created_at and
 * updated_at timestamps automatically.
 *
 * If the email already exists, the operation must fail gracefully with a
 * conflict error indicating duplication.
 *
 * Successful creation returns the full administrator details excluding
 * sensitive data such as raw passwords.
 *
 * @param props.connection
 * @param props.body Administrator creation data including email and password
 *   hash
 * @path /telegramFileDownloader/administrator/administrators
 * @accessor api.functional.telegramFileDownloader.administrator.administrators.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Administrator creation data including email and password hash */
    body: ITelegramFileDownloaderAdministrators.ICreate;
  };
  export type Body = ITelegramFileDownloaderAdministrators.ICreate;
  export type Response = ITelegramFileDownloaderAdministrators;

  export const METADATA = {
    method: "POST",
    path: "/telegramFileDownloader/administrator/administrators",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/telegramFileDownloader/administrator/administrators";
  export const random = (): ITelegramFileDownloaderAdministrators =>
    typia.random<ITelegramFileDownloaderAdministrators>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of administrators.
 *
 * Retrieve a filtered, paginated list of administrators in the Telegram File
 * Downloader system. This API supports advanced filtering and sorting options
 * to enable efficient monitoring and management of administrative users.
 *
 * The administrators data comes from the
 * telegram_file_downloader_administrators table, including fields like id,
 * email, created_at, and updated_at.
 *
 * Security enforces that only authenticated administrators can perform this
 * action, with rate limiting and audit logging applied.
 *
 * Pagination ensures scalable response sizes and sorting facilitates meaningful
 * data ordering.
 *
 * Response contains a paginated set of administrator records, suitable for
 * listing views in the admin dashboard.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for
 *   administrators
 * @path /telegramFileDownloader/administrator/administrators
 * @accessor api.functional.telegramFileDownloader.administrator.administrators.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for administrators */
    body: ITelegramFileDownloaderAdministrator.IRequest;
  };
  export type Body = ITelegramFileDownloaderAdministrator.IRequest;
  export type Response = IPageITelegramFileDownloaderAdministrator;

  export const METADATA = {
    method: "PATCH",
    path: "/telegramFileDownloader/administrator/administrators",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/telegramFileDownloader/administrator/administrators";
  export const random = (): IPageITelegramFileDownloaderAdministrator =>
    typia.random<IPageITelegramFileDownloaderAdministrator>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get administrator user details by administrator ID.
 *
 * Retrieve detailed information of a specific administrator user by
 * administrator ID in the Telegram File Downloader system.
 *
 * This operation fetches data from the telegram_file_downloader_administrators
 * table including id, email, created_at, updated_at, and any relevant profile
 * attributes.
 *
 * Access is restricted to authenticated administrators with proper
 * authorization.
 *
 * Requests for non-existing administrators must return meaningful error
 * messages.
 *
 * The response provides complete data suitable for admin profile inspection and
 * management.
 *
 * @param props.connection
 * @param props.administratorId Unique identifier of the administrator user to
 *   retrieve
 * @path /telegramFileDownloader/administrator/administrators/:administratorId
 * @accessor api.functional.telegramFileDownloader.administrator.administrators.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the administrator user to retrieve */
    administratorId: string & tags.Format<"uuid">;
  };
  export type Response = ITelegramFileDownloaderAdministrator;

  export const METADATA = {
    method: "GET",
    path: "/telegramFileDownloader/administrator/administrators/:administratorId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/telegramFileDownloader/administrator/administrators/${encodeURIComponent(props.administratorId ?? "null")}`;
  export const random = (): ITelegramFileDownloaderAdministrator =>
    typia.random<ITelegramFileDownloaderAdministrator>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("administratorId")(() =>
        typia.assert(props.administratorId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update details of an existing administrator user.
 *
 * Update administrator user details, including email and password hash, for the
 * specified administratorId. This operation supports auditing via updated_at
 * timestamp.
 *
 * Mapped to the telegram_file_downloader_administrators table, the update
 * ensures unique email and preserves data consistency.
 *
 * Failed updates due to email conflicts or missing administrator record must be
 * handled with appropriate errors.
 *
 * Returns the updated administrator user details on success.
 *
 * @param props.connection
 * @param props.administratorId Unique identifier of the target administrator
 *   user
 * @param props.body Administrator update data
 * @path /telegramFileDownloader/administrator/administrators/:administratorId
 * @accessor api.functional.telegramFileDownloader.administrator.administrators.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target administrator user */
    administratorId: string & tags.Format<"uuid">;

    /** Administrator update data */
    body: ITelegramFileDownloaderAdministrators.IUpdate;
  };
  export type Body = ITelegramFileDownloaderAdministrators.IUpdate;
  export type Response = ITelegramFileDownloaderAdministrators;

  export const METADATA = {
    method: "PUT",
    path: "/telegramFileDownloader/administrator/administrators/:administratorId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/telegramFileDownloader/administrator/administrators/${encodeURIComponent(props.administratorId ?? "null")}`;
  export const random = (): ITelegramFileDownloaderAdministrators =>
    typia.random<ITelegramFileDownloaderAdministrators>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("administratorId")(() =>
        typia.assert(props.administratorId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an administrator user permanently.
 *
 * Permanently remove an administrator user by their unique identifier. This
 * action is irreversible and ensures the user can no longer authenticate as an
 * administrator.
 *
 * Perform a hard delete on the telegram_file_downloader_administrators record
 * corresponding to administratorId.
 *
 * Appropriate authorization and audit trails should be maintained at the system
 * level.
 *
 * No response body is returned upon successful deletion.
 *
 * @param props.connection
 * @param props.administratorId Unique identifier of the target administrator
 *   user
 * @path /telegramFileDownloader/administrator/administrators/:administratorId
 * @accessor api.functional.telegramFileDownloader.administrator.administrators.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target administrator user */
    administratorId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/telegramFileDownloader/administrator/administrators/:administratorId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/telegramFileDownloader/administrator/administrators/${encodeURIComponent(props.administratorId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("administratorId")(() =>
        typia.assert(props.administratorId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
