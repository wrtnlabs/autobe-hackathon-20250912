import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITelegramFileDownloaderSubscriptionPlans } from "../../../../../structures/ITelegramFileDownloaderSubscriptionPlans";
import { IPageITelegramFileDownloaderSubscriptionPlans } from "../../../../../structures/IPageITelegramFileDownloaderSubscriptionPlans";

/**
 * Search and retrieve a filtered, paginated list of subscription plans.
 *
 * Retrieve a filtered and paginated list of subscription plans from the system.
 * This operation supports advanced search and filtering by plan code, name,
 * status, price range, and other relevant fields.
 *
 * Security considerations include limiting access to authenticated users or
 * administrators to prevent data leakage of subscription pricing models.
 *
 * The response includes detailed information about each subscription plan,
 * including maximum allowed files per day, max file size in MB, total storage
 * in MB, price, and status.
 *
 * This operation queries the telegram_file_downloader_subscription_plans table
 * from the Prisma schema, which stores all subscription plan metadata and
 * business rules.
 *
 * Clients can use this endpoint to display subscription options or perform
 * administrative plan management functions.
 *
 * Errors related to invalid filtering criteria or pagination parameters will
 * result in appropriate HTTP 400 responses with error details.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for filtering
 *   subscription plans
 * @path /telegramFileDownloader/endUser/subscription/plans
 * @accessor api.functional.telegramFileDownloader.endUser.subscription.plans.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for filtering subscription
     * plans
     */
    body: ITelegramFileDownloaderSubscriptionPlans.IRequest;
  };
  export type Body = ITelegramFileDownloaderSubscriptionPlans.IRequest;
  export type Response = IPageITelegramFileDownloaderSubscriptionPlans;

  export const METADATA = {
    method: "PATCH",
    path: "/telegramFileDownloader/endUser/subscription/plans",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/telegramFileDownloader/endUser/subscription/plans";
  export const random = (): IPageITelegramFileDownloaderSubscriptionPlans =>
    typia.random<IPageITelegramFileDownloaderSubscriptionPlans>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed subscription plan information by ID.
 *
 * Retrieve detailed information for one subscription plan identified by its
 * unique ID.
 *
 * The subscription plan information covers pricing details, allowed file counts
 * per day, maximum file size, total storage quota, and plan status.
 *
 * Security is critical to ensure only authorized users or administrators can
 * access detailed subscription plan metadata.
 *
 * This endpoint queries the telegram_file_downloader_subscription_plans table
 * in the Prisma schema and returns a single plan record matching the provided
 * ID.
 *
 * If the subscription plan ID does not exist, the endpoint returns an HTTP 404
 * Not Found error.
 *
 * @param props.connection
 * @param props.id Unique ID of the subscription plan
 * @path /telegramFileDownloader/endUser/subscription/plans/:id
 * @accessor api.functional.telegramFileDownloader.endUser.subscription.plans.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique ID of the subscription plan */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ITelegramFileDownloaderSubscriptionPlans;

  export const METADATA = {
    method: "GET",
    path: "/telegramFileDownloader/endUser/subscription/plans/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/telegramFileDownloader/endUser/subscription/plans/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITelegramFileDownloaderSubscriptionPlans =>
    typia.random<ITelegramFileDownloaderSubscriptionPlans>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
