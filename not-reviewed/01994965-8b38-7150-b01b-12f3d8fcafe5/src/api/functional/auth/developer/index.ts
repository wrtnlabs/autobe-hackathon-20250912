import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITelegramFileDownloaderDeveloper } from "../../../structures/ITelegramFileDownloaderDeveloper";

/**
 * Create a new developer user account with initial JWT authorization token.
 *
 * This join operation allows developers to register for the Telegram File
 * Downloader API service. It requires input matching the developer user
 * database table, including email and password hash fields. After registration,
 * the system issues an authorization token providing access to the API with
 * developer privileges.
 *
 * It leverages the 'email' column for unique identification, uses
 * 'password_hash' for credential validation, and populates 'created_at' and
 * 'updated_at' timestamps automatically. This operation does not require prior
 * authentication, consistent with public access for user registration.
 *
 * Upon success, the returned object is typed as
 * ITelegramFileDownloaderDeveloper.IAuthorized, reflecting the authorized
 * developer user with JWT tokens.
 *
 * This operation serves as the foundational step for all developer interactions
 * with the Telegram File Downloader API, enabling authenticated programmatic
 * access.
 *
 * Proper error handling ensures duplicate email registration attempts are
 * rejected securely and comprehensively.
 *
 * Related operations include login and refresh token renewal endpoints for
 * developer users.
 *
 * @param props.connection
 * @param props.body Request body for developer user registration including
 *   email and password hash.
 * @setHeader token.access Authorization
 *
 * @path /auth/developer/join
 * @accessor api.functional.auth.developer.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /**
     * Request body for developer user registration including email and
     * password hash.
     */
    body: ITelegramFileDownloaderDeveloper.ICreate;
  };
  export type Body = ITelegramFileDownloaderDeveloper.ICreate;
  export type Response = ITelegramFileDownloaderDeveloper.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/developer/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/developer/join";
  export const random = (): ITelegramFileDownloaderDeveloper.IAuthorized =>
    typia.random<ITelegramFileDownloaderDeveloper.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate a developer user and return JWT tokens.
 *
 * Developer login operation authenticating email and password to issue JWT
 * tokens. Utilizes 'email' and 'password_hash' fields from the developer's
 * schema record for credential validation.
 *
 * Successful authentication results in an authorized developer user object
 * containing JWT access and refresh tokens.
 *
 * This operation is publicly accessible and forms an essential part of the
 * developer authentication lifecycle.
 *
 * Rejection of invalid credentials is handled with 401 Unauthorized HTTP
 * responses.
 *
 * Works in conjunction with registration (join) and token refresh operations.
 *
 * @param props.connection
 * @param props.body Login credentials payload including email and password.
 * @setHeader token.access Authorization
 *
 * @path /auth/developer/login
 * @accessor api.functional.auth.developer.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Login credentials payload including email and password. */
    body: ITelegramFileDownloaderDeveloper.ILogin;
  };
  export type Body = ITelegramFileDownloaderDeveloper.ILogin;
  export type Response = ITelegramFileDownloaderDeveloper.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/developer/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/developer/login";
  export const random = (): ITelegramFileDownloaderDeveloper.IAuthorized =>
    typia.random<ITelegramFileDownloaderDeveloper.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Renew developer JWT access tokens using refresh token.
 *
 * Refresh JWT access token using a valid refresh token for developers. This
 * operation validates the refresh token status linked to the developer user and
 * issues new JWT tokens for continued authenticated API access.
 *
 * It relies on the developer user identification stored in tokens associated
 * with the telegram_file_downloader_developers table.
 *
 * The operation does not require user credentials but mandates valid refresh
 * token possession.
 *
 * Successful response includes renewed authorized access reflecting the
 * developer's identity and role.
 *
 * Supports authentication persistence and security best practices by allowing
 * session renewal without password re-entry.
 *
 * Related operations include login (credential authentication) and join (user
 * registration).
 *
 * @param props.connection
 * @param props.body Refresh token payload for renewing developer access tokens.
 * @setHeader token.access Authorization
 *
 * @path /auth/developer/refresh
 * @accessor api.functional.auth.developer.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Refresh token payload for renewing developer access tokens. */
    body: ITelegramFileDownloaderDeveloper.IRefresh;
  };
  export type Body = ITelegramFileDownloaderDeveloper.IRefresh;
  export type Response = ITelegramFileDownloaderDeveloper.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/developer/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/developer/refresh";
  export const random = (): ITelegramFileDownloaderDeveloper.IAuthorized =>
    typia.random<ITelegramFileDownloaderDeveloper.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
