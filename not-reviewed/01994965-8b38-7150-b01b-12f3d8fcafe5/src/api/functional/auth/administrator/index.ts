import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITelegramFileDownloaderAdministrator } from "../../../structures/ITelegramFileDownloaderAdministrator";

/**
 * Create a new telegram_file_downloader_administrators account and issue JWT
 * authorization tokens.
 *
 * This endpoint allows system administrators to register new administrator
 * accounts by providing their email and password. The operation securely stores
 * the password hash and creates a new administrator record in the
 * telegram_file_downloader_administrators table. Upon successful registration,
 * it issues authorization tokens compliant with JWT for subsequent
 * authenticated API access. This ensures that only registered administrators
 * can access protected admin functionalities such as managing subscriptions,
 * monitoring logs, and viewing payment status. The operation strictly
 * references the existing schema columns: email, password_hash, created_at,
 * updated_at, deleted_at. Registration data must comply with the database
 * schema constraints and unique email indices. No assumptions about additional
 * fields are made, ensuring consistency and integrity of administrator data.
 *
 * @param props.connection
 * @param props.body Registration data for the administrator account
 * @setHeader token.access Authorization
 *
 * @path /auth/administrator/join
 * @accessor api.functional.auth.administrator.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** Registration data for the administrator account */
    body: ITelegramFileDownloaderAdministrator.ICreate;
  };
  export type Body = ITelegramFileDownloaderAdministrator.ICreate;
  export type Response = ITelegramFileDownloaderAdministrator.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/administrator/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/administrator/join";
  export const random = (): ITelegramFileDownloaderAdministrator.IAuthorized =>
    typia.random<ITelegramFileDownloaderAdministrator.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate administrator and issue JWT access tokens.
 *
 * Allows an existing administrator to log in by providing valid credentials.
 * The system validates the email and password_hash fields against the
 * telegram_file_downloader_administrators table where the record is active
 * (deleted_at is null). On successful validation, JWT access tokens are issued
 * to enable secure API access to administrator functionalities including
 * subscription and billing management, system monitoring, and logs. This login
 * function is public and does not require prior authentication. It strictly
 * adheres to the schema properties and does not modify records beyond
 * authentication scope. The operation response follows the IAuthorized JWT
 * format.
 *
 * @param props.connection
 * @param props.body Login credentials for administrator
 * @setHeader token.access Authorization
 *
 * @path /auth/administrator/login
 * @accessor api.functional.auth.administrator.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Login credentials for administrator */
    body: ITelegramFileDownloaderAdministrator.ILogin;
  };
  export type Body = ITelegramFileDownloaderAdministrator.ILogin;
  export type Response = ITelegramFileDownloaderAdministrator.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/administrator/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/administrator/login";
  export const random = (): ITelegramFileDownloaderAdministrator.IAuthorized =>
    typia.random<ITelegramFileDownloaderAdministrator.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh JWT tokens for administrator.
 *
 * Refreshes JWT authorization tokens for an authenticated administrator user.
 * It requires a valid refresh token and returns new access and refresh tokens
 * in compliance with JWT standards. This operation maintains security and
 * session continuity without requiring full login. The operation references
 * existing administrator authentication tokens and is protected by token
 * validation mechanisms. This refresh endpoint is an integral part of the
 * administrator authentication lifecycle, enabling seamless token renewal.
 *
 * @param props.connection
 * @param props.body Refresh token request data
 * @setHeader token.access Authorization
 *
 * @path /auth/administrator/refresh
 * @accessor api.functional.auth.administrator.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Refresh token request data */
    body: ITelegramFileDownloaderAdministrator.IRefresh;
  };
  export type Body = ITelegramFileDownloaderAdministrator.IRefresh;
  export type Response = ITelegramFileDownloaderAdministrator.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/administrator/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/administrator/refresh";
  export const random = (): ITelegramFileDownloaderAdministrator.IAuthorized =>
    typia.random<ITelegramFileDownloaderAdministrator.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
