import { tags } from "typia";

/**
 * Represents a file downloaded from a Telegram channel or group, associated
 * with a download job. Stores metadata including name, type, size, and a signed
 * AWS S3 URL for secure access.
 *
 * Includes timestamps for creation, updates, and supports soft deletion.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITelegramFileDownloaderFiles = {
  /** Primary Key (UUID) uniquely identifying the downloaded file record. */
  id: string & tags.Format<"uuid">;

  /** Foreign key referencing the associated download job. */
  download_job_id: string & tags.Format<"uuid">;

  /** Name of the downloaded file, including its extension. */
  filename: string;

  /**
   * File extension or MIME type of the downloaded file, e.g., mp4, zip, jpg,
   * pdf.
   */
  file_extension: string;

  /** Size of the file in bytes. */
  file_size_bytes: number & tags.Type<"int32">;

  /**
   * Signed URL granting temporary authenticated access to the file stored in
   * AWS S3.
   */
  s3_url: string;

  /** Timestamp when the file record was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the file record was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp when the file record was soft deleted; null if active. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ITelegramFileDownloaderFiles {
  /**
   * Parameters for filtering, sorting, and paginating files in download
   * listings.
   */
  export type IRequest = {
    /** Optional page number for pagination, starting from 1. */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /** Optional limit for number of records per page. */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Optional array of sorting strings, e.g., ["filename:asc",
     * "file_size_bytes:desc"].
     */
    sort?: string[] | null | undefined;

    /** Optional search text to filter filenames or metadata. */
    search?: string | null | undefined;
  };

  /**
   * Input type used when creating a new file record for a Telegram download
   * job.
   *
   * Includes required references, file metadata, timestamps, and optional
   * soft delete indicator.
   */
  export type ICreate = {
    /** Foreign key referencing the associated download job. */
    download_job_id: string & tags.Format<"uuid">;

    /** Name of the downloaded file, including its extension. */
    filename: string;

    /**
     * File extension or MIME type of the downloaded file, e.g., mp4, zip,
     * jpg, pdf.
     */
    file_extension: string;

    /** Size of the file in bytes. */
    file_size_bytes: number & tags.Type<"int32">;

    /**
     * Signed URL granting temporary authenticated access to the file stored
     * in AWS S3.
     */
    s3_url: string;

    /** Timestamp when the file record was created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when the file record was last updated. */
    updated_at: string & tags.Format<"date-time">;

    /** Timestamp when the file record was soft deleted; null if active. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Input type for updating an existing file record. All fields are optional;
   * only provided fields will be updated.
   */
  export type IUpdate = {
    /** Foreign key referencing the associated download job. */
    download_job_id?: (string & tags.Format<"uuid">) | undefined;

    /** Name of the downloaded file, including its extension. */
    filename?: string | undefined;

    /**
     * File extension or MIME type of the downloaded file, e.g., mp4, zip,
     * jpg, pdf.
     */
    file_extension?: string | undefined;

    /** Size of the file in bytes. */
    file_size_bytes?: (number & tags.Type<"int32">) | undefined;

    /**
     * Signed URL granting temporary authenticated access to the file stored
     * in AWS S3.
     */
    s3_url?: string | undefined;

    /** Timestamp when the file record was created. */
    created_at?: (string & tags.Format<"date-time">) | undefined;

    /** Timestamp when the file record was last updated. */
    updated_at?: (string & tags.Format<"date-time">) | undefined;

    /** Timestamp when the file record was soft deleted; null if active. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
