import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Telegram File Downloader end user account entity representing registered
 * users of the web dashboard. Contains email, password hash, timestamps, and
 * optional deletion timestamp for soft delete functionality.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITelegramFileDownloaderEndUser = {
  /** Unique identifier of the end user. */
  id: string & tags.Format<"uuid">;

  /** Unique email address of the end user. */
  email: string & tags.Format<"email">;

  /**
   * Hashed password used for authentication. Not exposed in response bodies
   * for security.
   */
  password_hash: string;

  /** Timestamp when the user account was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of last update to the user account. */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp when the user account was soft deleted. Null if active. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ITelegramFileDownloaderEndUser {
  /**
   * Request body for creating a new Telegram File Downloader end user.
   * Requires email and password hash for registration. Passwords are securely
   * hashed before storage.
   */
  export type ICreate = {
    /** Unique email address for the new end user. */
    email: string & tags.Format<"email">;

    /** Hashed password used for authentication. */
    password_hash: string;
  };

  /**
   * Response body confirming authorization and token issuance for a Telegram
   * File Downloader end user.
   */
  export type IAuthorized = {
    /** Unique identifier of the authorized end user. */
    id: string & tags.Format<"uuid">;

    /** Unique email address of the end user. */
    email: string & tags.Format<"email">;

    /**
     * Hashed password used for authentication. Not exposed in response
     * bodies for security.
     */
    password_hash: string;

    /** Timestamp when the user account was created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp of last update to the user account. */
    updated_at: string & tags.Format<"date-time">;

    /** Timestamp when the user account was soft deleted. Null if active. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Request body for login of Telegram File Downloader end user. Requires
   * email and plaintext password.
   */
  export type ILogin = {
    /** Email address of the end user. */
    email: string & tags.Format<"email">;

    /** Plaintext password to authenticate. */
    password: string;
  };

  /**
   * Request body for refreshing JWT tokens for a Telegram File Downloader end
   * user. Requires a valid refresh token string.
   */
  export type IRefresh = {
    /** Refresh token string issued for session renewal. */
    refresh_token: string;
  };

  /**
   * Request body for password reset operation. Requires the user's email and
   * new password for update after verification.
   */
  export type IResetPassword = {
    /** Email address of the user requesting password reset. */
    email: string & tags.Format<"email">;

    /** New password to be set for the account. */
    new_password: string;
  };

  /**
   * Response body confirming the success or failure of a password reset
   * operation.
   */
  export type IResetPasswordResponse = {
    /** Indicates if the password was successfully reset. */
    success: boolean;

    /** Message describing the result of the password reset process. */
    message: string;
  };

  /**
   * Request body for changing password for authenticated Telegram File
   * Downloader end users. Requires current password and new password for
   * validation and update.
   */
  export type IChangePassword = {
    /** Current password for verification. */
    current_password: string;

    /** New password to set. */
    new_password: string;
  };

  /**
   * Response body confirming the success or failure of password change
   * operation.
   */
  export type IChangePasswordResponse = {
    /** Whether the password was successfully changed. */
    success: boolean;

    /** Description of the password change result. */
    message: string;
  };

  /**
   * Request body for searching and paginating end user accounts with optional
   * filters such as email and deletion status.
   */
  export type IRequest = {
    /** Page number to retrieve. */
    page?: (number & tags.Type<"int32">) | undefined;

    /** Number of records per page. */
    limit?: (number & tags.Type<"int32">) | undefined;

    /** Search query string for filtering users. */
    search?: string | undefined;

    /** Filter for deleted users. */
    deleted?: boolean | undefined;
  };

  /**
   * Request body for updating Telegram File Downloader end user properties.
   * Allows modification of email, password hash, and deletion status.
   */
  export type IUpdate = {
    /** Email address of the end user. */
    email?: (string & tags.Format<"email">) | undefined;

    /** Hashed password for authentication. */
    password_hash?: string | undefined;

    /** Soft deletion timestamp for the user account. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Summary information of the Telegram File Downloader end user for list
   * views. Excludes sensitive password details.
   */
  export type ISummary = {
    /** Unique identifier of the Telegram File Downloader end user */
    id: string & tags.Format<"uuid">;

    /** Email address of the Telegram File Downloader end user */
    email: string;
  };
}
