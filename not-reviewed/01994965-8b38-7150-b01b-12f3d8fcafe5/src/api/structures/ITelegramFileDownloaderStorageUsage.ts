import { tags } from "typia";

/**
 * Tracking of storage usage by users to enforce quota limits on downloaded
 * files and storage allocation.
 *
 * @namespace FileManagement
 * @auther AutoBE - https://github.com/wrtnlabs/autobe
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITelegramFileDownloaderStorageUsage = {
  /** Primary Key identifier of the storage usage record. */
  id: string & tags.Format<"uuid">;

  /** Belonged end user's ID. */
  enduser_id: string & tags.Format<"uuid">;

  /** Belonged developer's ID. Nullable. */
  developer_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** Amount of storage used in bytes by the user. */
  storage_bytes_used: number & tags.Type<"int32">;

  /** Number of files stored by the user. */
  file_count: number & tags.Type<"int32">;

  /** Maximum storage quota in bytes allowed by the user's subscription plan. */
  quota_max_bytes: number & tags.Type<"int32">;

  /** Timestamp when the usage record was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the usage record was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp; null if active. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ITelegramFileDownloaderStorageUsage {
  /**
   * Request schema for filtering and paginating storage usage records.
   * Supports filters for user IDs, storage usage ranges, file counts, quotas,
   * created/updated date ranges, soft delete flag, pagination, sorting.
   */
  export type IRequest = {
    /** Optional filter for end user ID, null disables filter. */
    enduser_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Optional filter for developer ID, null disables filter. */
    developer_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Minimum storage bytes used filter, null disables filter. */
    storage_bytes_used_min?: (number & tags.Type<"int32">) | null | undefined;

    /** Maximum storage bytes used filter, null disables filter. */
    storage_bytes_used_max?: (number & tags.Type<"int32">) | null | undefined;

    /** Minimum file count filter, null disables filter. */
    file_count_min?: (number & tags.Type<"int32">) | null | undefined;

    /** Maximum file count filter, null disables filter. */
    file_count_max?: (number & tags.Type<"int32">) | null | undefined;

    /** Minimum quota max bytes filter, null disables filter. */
    quota_max_bytes_min?: (number & tags.Type<"int32">) | null | undefined;

    /** Maximum quota max bytes filter, null disables filter. */
    quota_max_bytes_max?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Start creation date-time filter in ISO 8601 format, null disables
     * filter.
     */
    created_at_from?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * End creation date-time filter in ISO 8601 format, null disables
     * filter.
     */
    created_at_to?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Start last update date-time filter in ISO 8601 format, null disables
     * filter.
     */
    updated_at_from?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * End last update date-time filter in ISO 8601 format, null disables
     * filter.
     */
    updated_at_to?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Filter by soft deletion status, true for deleted only, false for
     * active only, null disables filter.
     */
    deleted_at_null?: boolean | null | undefined;

    /** Page number for pagination, null uses default. */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /** Limit of records per page, null uses default. */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /** Field name to order results by, null disables ordering. */
    orderBy?: string | null | undefined;

    /** Sort direction 'asc' or 'desc', null disables ordering. */
    orderDirection?: "asc" | "desc" | null | undefined;
  };

  /**
   * Data required to create a new storage usage record.
   *
   * Must include all identifiers and usage metrics. Created_at and updated_at
   * are server-generated.
   */
  export type ICreate = {
    /**
     * Belonged end user's {@link telegram_file_downloader_endusers.id}.
     *
     * UUID string reference to an end user owning this storage usage
     * record.
     */
    enduser_id: string & tags.Format<"uuid">;

    /**
     * Belonged developer's {@link telegram_file_downloader_developers.id}.
     *
     * UUID string reference to a developer owning this record, optional.
     * Represents programmatic users with API access.
     */
    developer_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Amount of storage used in bytes by the user.
     *
     * Integer number representing total bytes consumed within user's quota.
     */
    storage_bytes_used: number & tags.Type<"int32">;

    /**
     * Number of files stored by the user.
     *
     * Integer count of files currently stored.
     */
    file_count: number & tags.Type<"int32">;

    /**
     * Maximum storage quota in bytes allowed by the user's subscription
     * plan.
     */
    quota_max_bytes: number & tags.Type<"int32">;
  };

  /**
   * Data for updating an existing storage usage record.
   *
   * All properties are optional except server-managed fields. Deleted_at may
   * be set to indicate soft deletion.
   */
  export type IUpdate = {
    /**
     * Belonged end user's {@link telegram_file_downloader_endusers.id}.
     *
     * UUID string reference to an end user owning this storage usage
     * record.
     */
    enduser_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Belonged developer's {@link telegram_file_downloader_developers.id}.
     *
     * UUID string reference to a developer owning this record, optional.
     * Represents programmatic users with API access.
     */
    developer_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Amount of storage used in bytes by the user.
     *
     * Integer number representing total bytes consumed within user's quota.
     */
    storage_bytes_used?: (number & tags.Type<"int32">) | undefined;

    /**
     * Number of files stored by the user.
     *
     * Integer count of files currently stored.
     */
    file_count?: (number & tags.Type<"int32">) | undefined;

    /**
     * Maximum storage quota in bytes allowed by the user's subscription
     * plan.
     */
    quota_max_bytes?: (number & tags.Type<"int32">) | undefined;

    /**
     * Soft delete timestamp; null if active.
     *
     * Nullable date-time string indicating when record was soft deleted;
     * null if still active.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /** Summary of storage usage record for overview and monitoring. */
  export type ISummary = {
    /** Primary Key ID of the storage usage record. */
    id: string & tags.Format<"uuid">;

    /** Amount of storage used in bytes by the user. */
    storage_bytes_used: number & tags.Type<"int32">;

    /** Number of files stored by the user. */
    file_count: number & tags.Type<"int32">;

    /**
     * Maximum storage quota in bytes allowed by the user's subscription
     * plan.
     */
    quota_max_bytes: number & tags.Type<"int32">;
  };
}
