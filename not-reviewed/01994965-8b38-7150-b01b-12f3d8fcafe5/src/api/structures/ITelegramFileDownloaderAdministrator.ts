import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Administrator users who manage subscriptions, payment statuses, and logs.
 * Store authentication credentials, email, and audit timestamps. Unique email
 * per administrator. Supports soft deletion and timestamps for auditing user
 * record changes.
 *
 * @author AutoBE - https://github.com/wrtnlabs/autobe
 * @namespace Actors
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITelegramFileDownloaderAdministrator = {
  /** Primary Key of the administrator user. */
  id: string & tags.Format<"uuid">;

  /** Email address of the administrator user, unique across administrators. */
  email: string;

  /** Hashed password for authenticating the administrator user. */
  password_hash: string;

  /** Timestamp when the administrator user record was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the administrator user record was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the administrator user record was soft deleted; null if
   * active.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ITelegramFileDownloaderAdministrator {
  /**
   * Request body for creating a new administrator account. Contains required
   * email and hashed password.
   */
  export type ICreate = {
    /**
     * Email address of the administrator user.
     *
     * Unique and required for registration.
     */
    email: string;

    /**
     * Password hash for authentication.
     *
     * Required; must be securely hashed.
     */
    password_hash: string;
  };

  /** Response body for administrator authorization. Contains id and JWT token. */
  export type IAuthorized = {
    /** Unique identifier of the authenticated administrator. */
    id: string & tags.Format<"uuid">;

    /**
     * Email address of the administrator user, unique across
     * administrators.
     */
    email: string;

    /** Hashed password for authenticating the administrator user. */
    password_hash: string;

    /** Timestamp when the administrator user record was created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when the administrator user record was last updated. */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Timestamp when the administrator user record was soft deleted; null
     * if active.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /** Request payload for administrator login credentials. */
  export type ILogin = {
    /**
     * Email address for login.
     *
     * Required string matching stored administrator email.
     */
    email: string;

    /** Password string in plaintext for login verification. */
    password: string;
  };

  /** Request payload for refreshing administrator JWT tokens. */
  export type IRefresh = {
    /**
     * Refresh JWT token string.
     *
     * Required for token renewal.
     */
    refresh_token: string;
  };

  /**
   * Request parameters for searching/filtering administrator users.
   *
   * Properties are optional to allow flexible search criteria.
   *
   * Used in paginated list operations to filter by email and timestamps.
   */
  export type IRequest = {
    /**
     * Email address of the administrator user, unique across
     * administrators.
     */
    email?: string | undefined;

    /** Hashed password for authenticating the administrator user. */
    password_hash?: string | undefined;

    /** Timestamp when the administrator user record was created. */
    created_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** Timestamp when the administrator user record was last updated. */
    updated_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Timestamp when the administrator user record was soft deleted; null
     * if active.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
