import { tags } from "typia";

/**
 * Represents a processing alert event record for the political news crawler
 * backend system.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IPoliticalNewsCrawlerProcessingAlert = {
  /** Unique identifier for the processing alert. */
  id: string & tags.Format<"uuid">;

  /**
   * Category of processing alert such as 'llm_failure', 'queue_overflow',
   * 'retry_limit_reached'.
   */
  alert_type: string;

  /** Detailed description of the processing alert event for operational use. */
  message: string;

  /** Severity level of the alert (e.g., 'info', 'warning', 'critical'). */
  severity: "info" | "warning" | "critical";

  /** Timestamp when the alert was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp for last update of the alert. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp, null if not deleted. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IPoliticalNewsCrawlerProcessingAlert {
  /**
   * Request schema for listing and filtering political news crawler
   * processing alerts.
   */
  export type IRequest = {
    /** Filter alerts by type (e.g., 'llm_failure') to limit results. */
    alert_type?: string | null | undefined;

    /**
     * Filter alerts by severity level, including 'info', 'warning', and
     * 'critical'.
     */
    severity?: "info" | "warning" | "critical" | null | undefined;

    /** Filter by partial or full alert message text content. */
    message?: string | null | undefined;

    /** Page number for pagination, defaults to 0 (first page). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<0>) | null | undefined;

    /** Number of records per page, defaults to 100. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;
  };

  /**
   * Request schema for creating political news crawler processing alert
   * events.
   */
  export type ICreate = {
    /**
     * Type of processing alert such as 'llm_failure', 'queue_overflow',
     * 'retry_limit_reached'.
     */
    alert_type: string;

    /**
     * Detailed description of the processing alert event for operational
     * use.
     */
    message: string;

    /** Severity level of the alert (e.g., 'info', 'warning', 'critical'). */
    severity: "info" | "warning" | "critical";
  };

  /**
   * Update data schema for editing existing processing alert. All fields are
   * optional and nullable.
   */
  export type IUpdate = {
    /**
     * Category of processing alert such as 'llm_failure', 'queue_overflow',
     * 'retry_limit_reached'.
     */
    alert_type?: string | undefined;

    /**
     * Detailed description of the processing alert event for operational
     * use.
     */
    message?: string | undefined;

    /** Severity level of the alert (e.g., 'info', 'warning', 'critical'). */
    severity?: string | undefined;

    /** Primary Key. */
    id?: (string & tags.Format<"uuid">) | undefined;

    /** Metadata entry creation timestamp. */
    created_at?: (string & tags.Format<"date-time">) | undefined;

    /** Metadata entry last update timestamp. */
    updated_at?: (string & tags.Format<"date-time">) | undefined;

    /** Soft delete timestamp, null if not deleted. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
