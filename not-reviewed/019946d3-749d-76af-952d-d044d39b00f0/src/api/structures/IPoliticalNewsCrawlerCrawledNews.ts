import { tags } from "typia";

/**
 * Contains metadata for crawled political news articles, linking to the crawl
 * attempt that obtained the raw content and providing key attributes for
 * management and filtering.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IPoliticalNewsCrawlerCrawledNews = {
  /** Primary Key. */
  id: string & tags.Format<"uuid">;

  /** Associated crawl attempt identifier. */
  crawl_attempt_id: string & tags.Format<"uuid">;

  /** URL of the crawled news article. */
  url: string;

  /** Title of the news article, if available. */
  title?: string | null | undefined;

  /** Publish timestamp of the news article, if known. */
  published_at?: (string & tags.Format<"date-time">) | null | undefined;

  /** Record creation timestamp. */
  created_at: string & tags.Format<"date-time">;

  /** Record last update timestamp. */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IPoliticalNewsCrawlerCrawledNews {
  /**
   * Request parameters for querying crawled news with filtering, sorting, and
   * pagination.
   */
  export type IRequest = {
    /** Page number for pagination. */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /** Limitation of records per a page. */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /** Search term to filter news. */
    search?: string | null | undefined;

    /** Sorting field and direction. */
    sort_by?: string | null | undefined;

    /** Filter to specific crawl attempt ID. */
    crawl_attempt_id?: (string & tags.Format<"uuid">) | null | undefined;
  };

  /**
   * Create a new crawled news article associated with the specified crawl
   * attempt.
   *
   * The request body must contain the minimum required information for the
   * crawler news metadata, including a valid URL. Title and published date
   * are optional but recommended for completeness.
   *
   * No authentication is required for this operation. On success, the newly
   * created news article's full details are returned.
   *
   * This operation complements retrieval and management endpoints allowing
   * clients to add new news entries for a crawl attempt.
   */
  export type ICreate = {
    /**
     * Associated crawl attempt identifier.
     * {@link /// political_news_crawler_crawl_attempts.id}
     */
    crawl_attempt_id: string & tags.Format<"uuid">;

    /** URL of the crawled news article. */
    url: string;

    /** Title of the news article, if available. */
    title?: string | null | undefined;

    /** Publish timestamp of the news article, if known. */
    published_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Update metadata of a crawled news article within the specified crawl
   * attempt.
   *
   * Only provided fields in the request body will be updated; others remain
   * unchanged.
   *
   * The operation validates the existence of the target article linked to the
   * crawl attempt.
   *
   * No authentication is required. Responses include the updated entity
   * details.
   *
   * This operation works in conjunction with create, retrieve, and delete
   * endpoints to provide full management capabilities.
   */
  export type IUpdate = {
    /**
     * Associated crawl attempt identifier.
     * {@link /// political_news_crawler_crawl_attempts.id}
     */
    crawl_attempt_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** URL of the crawled news article. */
    url?: string | null | undefined;

    /** Title of the news article, if available. */
    title?: string | null | undefined;

    /** Publish timestamp of the news article, if known. */
    published_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** Record creation timestamp. */
    created_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** Record last update timestamp. */
    updated_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Summary records of crawled news articles including minimal metadata for
   * display and identification.
   */
  export type ISummary = {
    /** Primary Key. */
    id: string & tags.Format<"uuid">;

    /** URL of the crawled news article. */
    url: string;

    /** Title of the news article, if available. */
    title?: string | null | undefined;

    /** Publish timestamp of the news article, if known. */
    published_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
