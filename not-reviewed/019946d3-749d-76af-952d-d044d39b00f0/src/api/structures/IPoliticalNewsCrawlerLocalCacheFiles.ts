import { tags } from "typia";

/**
 * Tracks local file cache copies of raw crawled political news data with TTL
 * enforcement and deletion status. Enables fast retrieval during cloud storage
 * outages and manages file lifecycle with audit timestamps.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IPoliticalNewsCrawlerLocalCacheFiles = {
  /** Primary Key. */
  id: string & tags.Format<"uuid">;

  /**
   * Reference to related raw data storage record,
   * political_news_crawler_raw_data_storage.id.
   */
  raw_data_storage_id: string & tags.Format<"uuid">;

  /** Filesystem path or identifier for the local cached file copy. */
  local_file_path: string;

  /** Size of the local cached file in bytes. */
  file_size_bytes: number & tags.Type<"int32">;

  /**
   * Datetime when the cached file expires and is due for deletion under TTL
   * policy.
   */
  ttl_expiration_at: string & tags.Format<"date-time">;

  /**
   * Soft delete timestamp indicating when the cached file was deleted, if
   * applicable.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

  /** Creation timestamp record. */
  created_at: string & tags.Format<"date-time">;

  /** Last update timestamp record. */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IPoliticalNewsCrawlerLocalCacheFiles {
  /**
   * Update the metadata of a specific local cache file associated with raw
   * data storage. Supports modifying path, size, TTL expiration, and deletion
   * timestamp.
   */
  export type IUpdate = {
    /**
     * Reference to related raw data storage record,
     * political_news_crawler_raw_data_storage.id.
     */
    raw_data_storage_id?: (string & tags.Format<"uuid">) | undefined;

    /** Filesystem path or identifier for the local cached file copy. */
    local_file_path?: string | undefined;

    /** Size of the local cached file in bytes. */
    file_size_bytes?: (number & tags.Type<"int32">) | undefined;

    /**
     * Datetime when the cached file expires and is due for deletion under
     * TTL policy.
     */
    ttl_expiration_at?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Soft delete timestamp indicating when the cached file was deleted, if
     * applicable.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
