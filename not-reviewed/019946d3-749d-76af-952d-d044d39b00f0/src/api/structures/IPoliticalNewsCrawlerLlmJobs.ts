import { tags } from "typia";

/**
 * Represents a Large Language Model (LLM) processing job entity managing
 * asynchronous processing tasks for political news data.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IPoliticalNewsCrawlerLlmJobs = {
  /** Unique identifier of the LLM job. */
  id: string & tags.Format<"uuid">;

  /** The source channel from which the raw news data originated. */
  crawl_source_id: string & tags.Format<"uuid">;

  /** Processing status of the job. */
  status: "pending" | "running" | "completed" | "failed";

  /** JSON string of parameters or prompts used for this LLM job. */
  parameters: string;

  /** Job creation timestamp. */
  created_at: string & tags.Format<"date-time">;

  /** Job last update timestamp. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp, if record is deleted; nullable. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IPoliticalNewsCrawlerLlmJobs {
  /** Request parameters for searching and pagination of LLM jobs. */
  export type IRequest = {
    /** Filter by crawl source UUID. Optional. */
    crawl_source_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Filter by exact status: 'pending', 'running', 'completed', 'failed'.
     * Optional.
     */
    status?: "pending" | "running" | "completed" | "failed" | null | undefined;

    /**
     * Pagination: page number >= 1. Optional. Provides the page number for
     * paginated results.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Pagination: limit per page >= 1. Optional, default can be 100. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Sort key, e.g., 'created_at' or 'updated_at'. Optional. */
    orderBy?: string | null | undefined;
  };

  /** Request body for creating a new LLM processing job. */
  export type ICreate = {
    /** The source channel from which the raw news data originated. */
    crawl_source_id: string & tags.Format<"uuid">;

    /** Processing status of the job. */
    status: "pending" | "running" | "completed" | "failed";

    /** JSON string of parameters or prompts used for this LLM job. */
    parameters: string;
  };

  /** Request body for updating an existing LLM job. */
  export type IUpdate = {
    /** The source channel from which the raw news data originated. */
    crawl_source_id?: (string & tags.Format<"uuid">) | undefined;

    /** Processing status of the job. */
    status?: "pending" | "running" | "completed" | "failed" | undefined;

    /** JSON string of parameters or prompts used for this LLM job. */
    parameters?: string | undefined;
  };

  /**
   * Summary information of LLM job including identification and status
   * timestamps.
   */
  export type ISummary = {
    /** Unique identifier for the LLM job. */
    id: string & tags.Format<"uuid">;

    /** Source channel ID the raw news came from. */
    crawl_source_id: string & tags.Format<"uuid">;

    /** Status string, e.g., pending, running, completed, failed. */
    status: string;

    /** Timestamp job was created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp of last job update. */
    updated_at: string & tags.Format<"date-time">;
  };
}
