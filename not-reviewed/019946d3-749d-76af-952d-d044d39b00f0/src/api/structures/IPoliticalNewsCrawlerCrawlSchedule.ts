import { tags } from "typia";

/**
 * Defines when and how often crawling runs for each political news source.
 * References the crawl source and policy to enable adaptive scheduling and
 * coordination.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IPoliticalNewsCrawlerCrawlSchedule = {
  /**
   * Primary Key.
   *
   * Unique identifier for the crawl schedule record.
   *
   * Format: UUID string.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Reference to Crawling Source.
   *
   * Foreign key to the political_news_crawler_crawl_sources entity.
   */
  crawl_source_id: string & tags.Format<"uuid">;

  /**
   * Reference to Crawl Policy.
   *
   * Foreign key to the political_news_crawler_crawl_policies entity.
   */
  crawl_policy_id: string & tags.Format<"uuid">;

  /**
   * Cron expression defining the crawl schedule timing.
   *
   * Format is a standard cron string defining when the crawl runs.
   */
  schedule_expression: string;

  /**
   * Timestamp when the crawl last occurred.
   *
   * Optional ISO 8601 date-time string.
   */
  last_crawled_at?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Timestamp for the next scheduled crawl.
   *
   * Optional ISO 8601 date-time string.
   */
  next_crawl_at?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Flag indicating if this schedule is enabled.
   *
   * True if schedule is active.
   */
  is_enabled: boolean;

  /**
   * Record creation timestamp.
   *
   * ISO 8601 date-time string.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Record last update timestamp.
   *
   * ISO 8601 date-time string.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft delete timestamp, if record is deleted.
   *
   * Optional ISO 8601 date-time string.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IPoliticalNewsCrawlerCrawlSchedule {
  /** Search data and pagination filter criteria for crawl schedules. */
  export type IRequest = {
    /** Page number. */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /** Limitation of records per a page. */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Sorting expression with 'propertyName asc' or 'propertyName desc'.
     *
     * Example: "created_at desc"
     */
    sort?: string | null | undefined;

    /**
     * Filter by crawl source ID (foreign key to
     * political_news_crawler_crawl_sources).
     */
    crawl_source_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Filter by crawl policy ID (foreign key to
     * political_news_crawler_crawl_policies).
     */
    crawl_policy_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Filter by enabled flag. */
    is_enabled?: boolean | null | undefined;

    /** Filter records last crawled after this timestamp. */
    last_crawled_after?: (string & tags.Format<"date-time">) | null | undefined;

    /** Filter records last crawled before this timestamp. */
    last_crawled_before?:
      | (string & tags.Format<"date-time">)
      | null
      | undefined;

    /** Filter records next crawl after this timestamp. */
    next_crawl_after?: (string & tags.Format<"date-time">) | null | undefined;

    /** Filter records next crawl before this timestamp. */
    next_crawl_before?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Summary view of the politicalNewsCrawler crawl schedule optimized for
   * listing.
   */
  export type ISummary = {
    /** Reference to Crawl Policy. Reference id. */
    crawl_policy_id: string & tags.Format<"uuid">;

    /** Reference to Crawling Source. Reference id. */
    crawl_source_id: string & tags.Format<"uuid">;

    /** Record creation timestamp. */
    created_at: string & tags.Format<"date-time">;

    /** Primary Key. */
    id: string & tags.Format<"uuid">;

    /** Flag indicating if this schedule is enabled. */
    is_enabled: boolean;

    /** Cron expression defining the crawl schedule timing. */
    schedule_expression: string;
  };
}
