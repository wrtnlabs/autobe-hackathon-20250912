import { tags } from "typia";

/**
 * Tracks local file cache copies of raw crawled political news data with TTL
 * enforcement and deletion status. Enables fast retrieval during cloud storage
 * outages and manages file lifecycle with audit timestamps.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IPoliticalNewsCrawlerRawDataStorageLocalCacheFile = {
  /** Primary Key. */
  id: string & tags.Format<"uuid">;

  /**
   * Reference to related raw data storage record,
   * political_news_crawler_raw_data_storage.id.
   */
  raw_data_storage_id: string & tags.Format<"uuid">;

  /** Filesystem path or identifier for the local cached file copy. */
  local_file_path: string;

  /** Size of the local cached file in bytes. */
  file_size_bytes: number & tags.Type<"int32">;

  /**
   * Datetime when the cached file expires and is due for deletion under TTL
   * policy.
   */
  ttl_expiration_at: string & tags.Format<"date-time">;

  /**
   * Soft delete timestamp indicating when the cached file was deleted, if
   * applicable.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

  /** Creation timestamp record. */
  created_at: string & tags.Format<"date-time">;

  /** Last update timestamp record. */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IPoliticalNewsCrawlerRawDataStorageLocalCacheFile {
  /**
   * Search and pagination filter criteria for crawl schedules
   *
   * @author AutoBE - https://github.com/wrtnlabs/autobe
   */
  export type IRequest = {
    /**
     * Page number.
     *
     * Optional page number for pagination (unsigned 32-bit integer).
     */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Limitation of records per a page.
     *
     * Optional limit to restrict the number of records per page (unsigned
     * 32-bit integer).
     */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Filter records with ttl_expiration_at greater than or equal to this
     * ISO datetime.
     *
     * Optional filter to include only cache files whose TTL expiration is
     * after or equal to certain date-time.
     */
    ttl_expiration_at_from?:
      | (string & tags.Format<"date-time">)
      | null
      | undefined;

    /**
     * Filter records with ttl_expiration_at less than or equal to this ISO
     * datetime.
     *
     * Optional filter to include only cache files whose TTL expiration is
     * before or equal to certain date-time.
     */
    ttl_expiration_at_to?:
      | (string & tags.Format<"date-time">)
      | null
      | undefined;

    /**
     * Filter records created after or equal to this ISO datetime.
     *
     * Optional filter for records created on or after a specific date-time.
     */
    created_at_from?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Filter records created before or equal to this ISO datetime.
     *
     * Optional filter for records created on or before a specific
     * date-time.
     */
    created_at_to?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Create a new local cache file metadata record for a raw data storage
   * entry. The record includes the local file path, file size, TTL expiration
   * datetime, and timestamps.
   */
  export type ICreate = {
    /**
     * Reference to related raw data storage record,
     * political_news_crawler_raw_data_storage.id.
     */
    raw_data_storage_id: string & tags.Format<"uuid">;

    /** Filesystem path or identifier for the local cached file copy. */
    local_file_path: string;

    /** Size of the local cached file in bytes. */
    file_size_bytes: number & tags.Type<"int32">;

    /**
     * Datetime when the cached file expires and is due for deletion under
     * TTL policy.
     */
    ttl_expiration_at: string & tags.Format<"date-time">;

    /**
     * Soft delete timestamp indicating when the cached file was deleted, if
     * applicable.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Summary information about a local cache file related to raw crawled data.
   * Provides essential identifiers and metadata for quick access and
   * management.
   */
  export type ISummary = {
    /** Primary key identifying the local cache file record. */
    id: string & tags.Format<"uuid">;

    /** Reference ID to the related raw data storage record. */
    raw_data_storage_id: string & tags.Format<"uuid">;

    /** Filesystem path or identifier for the local cached file copy. */
    local_file_path: string;

    /** Size of the local cached file in bytes. */
    file_size_bytes: number & tags.Type<"int32">;

    /**
     * Datetime when the cached file expires and is due for deletion under
     * TTL policy.
     */
    ttl_expiration_at: string & tags.Format<"date-time">;

    /**
     * Soft delete timestamp indicating when the cached file was deleted, if
     * applicable.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** Creation timestamp record. */
    created_at: string & tags.Format<"date-time">;

    /** Last update timestamp record. */
    updated_at: string & tags.Format<"date-time">;
  };
}
