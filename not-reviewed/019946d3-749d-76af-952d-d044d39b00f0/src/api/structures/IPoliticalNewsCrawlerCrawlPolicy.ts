import { tags } from "typia";

/**
 * Configuration for crawl policies governing crawling frequency, retry, and
 * error handling for political news sources. Ensures adaptive and respectful
 * crawling behavior according to source limits and bans.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IPoliticalNewsCrawlerCrawlPolicy = {
  /** Primary Key. */
  id: string & tags.Format<"uuid">;

  /** Unique name identifier for the crawl policy. */
  policy_name: string;

  /** Maximum allowed crawl frequency in minutes. */
  max_crawl_frequency_minutes: number & tags.Type<"int32">;

  /** Maximum number of retry attempts after failures. */
  max_retry_attempts: number & tags.Type<"int32">;

  /** Multiplier factor for exponential backoff on retries. */
  backoff_multiplier: number;

  /** Flag to enable detection and handling of bans during crawling. */
  ban_detection_enabled: boolean;

  /** Record creation timestamp. */
  created_at: string & tags.Format<"date-time">;

  /** Record last update timestamp. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp, if record is deleted. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IPoliticalNewsCrawlerCrawlPolicy {
  /**
   * Request type for searching crawl policies, supports filtering and
   * pagination.
   */
  export type IRequest = {
    /**
     * Pagination page number.
     *
     * The page to retrieve for paginated results.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<0>) | null | undefined;

    /**
     * Pagination page size limit.
     *
     * The maximum number of items per page.
     */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<0>) | null | undefined;

    /**
     * Filter for policy name matching.
     *
     * Can be used to search for policies by name.
     */
    policy_name?: string | null | undefined;

    /**
     * Filter for maximum crawl frequency.
     *
     * Limits results to policies with max frequency below this value.
     */
    max_crawl_frequency_minutes?:
      | (number & tags.Type<"int32">)
      | null
      | undefined;

    /**
     * Filter for enabling ban detection.
     *
     * If true, only policies with ban detection enabled are returned.
     */
    ban_detection_enabled?: boolean | null | undefined;
  };

  /** Create info for crawl policy. */
  export type ICreate = {
    /** Unique name identifier for the crawl policy. */
    policy_name: string;

    /** Maximum allowed crawl frequency in minutes. */
    max_crawl_frequency_minutes: number & tags.Type<"int32">;

    /** Maximum number of retry attempts after failures. */
    max_retry_attempts: number & tags.Type<"int32">;

    /** Multiplier factor for exponential backoff on retries. */
    backoff_multiplier: number;

    /** Flag to enable detection and handling of bans during crawling. */
    ban_detection_enabled: boolean;
  };

  /** Update info for crawl policy. */
  export type IUpdate = {
    /** Unique name identifier for the crawl policy. */
    policy_name?: string | null | undefined;

    /** Maximum allowed crawl frequency in minutes. */
    max_crawl_frequency_minutes?:
      | (number & tags.Type<"int32">)
      | null
      | undefined;

    /** Maximum number of retry attempts after failures. */
    max_retry_attempts?: (number & tags.Type<"int32">) | null | undefined;

    /** Multiplier factor for exponential backoff on retries. */
    backoff_multiplier?: number | null | undefined;

    /** Flag to enable detection and handling of bans during crawling. */
    ban_detection_enabled?: boolean | null | undefined;
  };

  /**
   * Summary view of the politicalNewsCrawler crawl policy optimized for list
   * display.
   */
  export type ISummary = {
    /** Flag to enable detection and handling of bans during crawling. */
    ban_detection_enabled: boolean;

    /** Record creation timestamp. */
    created_at: string & tags.Format<"date-time">;

    /** Primary Key. */
    id: string & tags.Format<"uuid">;

    /** Maximum allowed crawl frequency in minutes. */
    max_crawl_frequency_minutes: number & tags.Type<"int32">;

    /** Unique name identifier for the crawl policy. */
    policy_name: string;
  };
}
