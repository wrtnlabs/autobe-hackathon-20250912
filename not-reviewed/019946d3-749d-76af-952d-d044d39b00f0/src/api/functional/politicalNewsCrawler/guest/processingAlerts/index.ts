import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

/**
 * Delete a specific processing alert by ID.
 *
 * This API endpoint provides the capability to erase a specified processing
 * alert by accepting its unique identifier as a path parameter.
 *
 * The processing alerts represent system notifications for issues encountered
 * during the LLM post-processing pipeline, such as failures, retries, or other
 * significant events requiring operational attention.
 *
 * Proper authorization is required, typically limited to users with the "guest"
 * role to prevent unauthorized data loss.
 *
 * The operation deletes the processing alert permanently from the system,
 * meaning the record cannot be recovered after deletion.
 *
 * Users must ensure the 'id' corresponds to a valid existing alert record to
 * avoid errors.
 *
 * @param props.connection
 * @param props.id Unique identifier of the processing alert to delete
 * @path /politicalNewsCrawler/guest/processingAlerts/:id
 * @accessor api.functional.politicalNewsCrawler.guest.processingAlerts.eraseProcessingAlert
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseProcessingAlert(
  connection: IConnection,
  props: eraseProcessingAlert.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseProcessingAlert.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseProcessingAlert.METADATA,
          path: eraseProcessingAlert.path(props),
          status: null,
        },
      );
}
export namespace eraseProcessingAlert {
  export type Props = {
    /** Unique identifier of the processing alert to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/politicalNewsCrawler/guest/processingAlerts/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/politicalNewsCrawler/guest/processingAlerts/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseProcessingAlert.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseProcessingAlert.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
