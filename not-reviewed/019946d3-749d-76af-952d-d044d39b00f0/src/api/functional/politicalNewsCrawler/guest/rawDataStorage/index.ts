import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPoliticalNewsCrawlerRawDataStorage } from "../../../../structures/IPoliticalNewsCrawlerRawDataStorage";
import { IPageIPoliticalNewsCrawlerRawDataStorage } from "../../../../structures/IPageIPoliticalNewsCrawlerRawDataStorage";
export * as localCacheFiles from "./localCacheFiles/index";
export * as processedContent from "./processedContent/index";

/**
 * Create new raw data storage entry.
 *
 * Create a new raw data storage record representing a raw crawled data file
 * stored in cloud object storage. The request body must contain all required
 * fields such as crawlSourceId, storageKey, fileFormat, fileSizeBytes, and
 * crawlTimestamp, with optional fields for crawlJobId and checksum.
 *
 * Security requires authenticated access to prevent unauthorized data addition.
 *
 * This operation enables the persistence of raw crawl data metadata critical
 * for downstream processing and archival.
 *
 * @param props.connection
 * @param props.body Creation information of the raw data storage entry
 * @path /politicalNewsCrawler/guest/rawDataStorage
 * @accessor api.functional.politicalNewsCrawler.guest.rawDataStorage.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation information of the raw data storage entry */
    body: IPoliticalNewsCrawlerRawDataStorage.ICreate;
  };
  export type Body = IPoliticalNewsCrawlerRawDataStorage.ICreate;
  export type Response = IPoliticalNewsCrawlerRawDataStorage;

  export const METADATA = {
    method: "POST",
    path: "/politicalNewsCrawler/guest/rawDataStorage",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/politicalNewsCrawler/guest/rawDataStorage";
  export const random = (): IPoliticalNewsCrawlerRawDataStorage =>
    typia.random<IPoliticalNewsCrawlerRawDataStorage>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of raw data storage entries.
 *
 * Retrieve a filtered and paginated list of raw data storage metadata entries
 * for political news crawling. The operation supports filtering by crawl source
 * and crawl job identifiers, file format types, crawl timestamps, and file
 * sizes. Sorting and pagination options enable efficient browsing through large
 * datasets stored in cloud object storage.
 *
 * Security considerations include limited access to authenticated users with
 * appropriate read privileges, as raw data files may contain sensitive or
 * proprietary information.
 *
 * This operation is tightly integrated with the
 * political_news_crawler_raw_data_storage table defined in the Prisma schema,
 * encompassing all relevant fields and relationships. The response returns
 * simplified summary information suited for list displays.
 *
 * There is no request body since this is a PATCH method designed for complex
 * search and filtering inputs. The response contains paginated summary records
 * that can be used to locate and verify raw data files before further
 * processing or download.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for raw data
 *   storage filtering
 * @path /politicalNewsCrawler/guest/rawDataStorage
 * @accessor api.functional.politicalNewsCrawler.guest.rawDataStorage.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for raw data storage
     * filtering
     */
    body: IPoliticalNewsCrawlerRawDataStorage.IRequest;
  };
  export type Body = IPoliticalNewsCrawlerRawDataStorage.IRequest;
  export type Response = IPageIPoliticalNewsCrawlerRawDataStorage.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/politicalNewsCrawler/guest/rawDataStorage",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/politicalNewsCrawler/guest/rawDataStorage";
  export const random = (): IPageIPoliticalNewsCrawlerRawDataStorage.ISummary =>
    typia.random<IPageIPoliticalNewsCrawlerRawDataStorage.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed raw data storage entry by ID.
 *
 * Retrieve detailed information about a specific raw data storage entry
 * identified by rawDataStorageId. This operation fetches all fields from
 * political_news_crawler_raw_data_storage and related references to crawl
 * source and crawl job.
 *
 * Security requires authenticated user access to prevent unauthorized raw data
 * exposure.
 *
 * Clients can use this operation to access raw data file details necessary for
 * processing or manual inspection.
 *
 * @param props.connection
 * @param props.rawDataStorageId Unique identifier of the target raw data
 *   storage entry
 * @path /politicalNewsCrawler/guest/rawDataStorage/:rawDataStorageId
 * @accessor api.functional.politicalNewsCrawler.guest.rawDataStorage.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target raw data storage entry */
    rawDataStorageId: string & tags.Format<"uuid">;
  };
  export type Response = IPoliticalNewsCrawlerRawDataStorage;

  export const METADATA = {
    method: "GET",
    path: "/politicalNewsCrawler/guest/rawDataStorage/:rawDataStorageId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/politicalNewsCrawler/guest/rawDataStorage/${encodeURIComponent(props.rawDataStorageId ?? "null")}`;
  export const random = (): IPoliticalNewsCrawlerRawDataStorage =>
    typia.random<IPoliticalNewsCrawlerRawDataStorage>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("rawDataStorageId")(() =>
        typia.assert(props.rawDataStorageId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update raw data storage entry by ID.
 *
 * Update an existing raw data storage record representing raw crawled political
 * news data. The request body must contain updatable fields such as
 * crawlSourceId, optional crawlJobId, storageKey, fileFormat, fileSizeBytes,
 * checksum, and crawlTimestamp.
 *
 * This operation requires authenticated user roles to ensure secure
 * modification of raw data metadata.
 *
 * Clients can use this endpoint to correct or enhance metadata related to raw
 * data files post-crawling or during data reconciliation.
 *
 * @param props.connection
 * @param props.rawDataStorageId Unique identifier of the target raw data
 *   storage entry
 * @param props.body Update information of the raw data storage entry
 * @path /politicalNewsCrawler/guest/rawDataStorage/:rawDataStorageId
 * @accessor api.functional.politicalNewsCrawler.guest.rawDataStorage.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target raw data storage entry */
    rawDataStorageId: string & tags.Format<"uuid">;

    /** Update information of the raw data storage entry */
    body: IPoliticalNewsCrawlerRawDataStorage.IUpdate;
  };
  export type Body = IPoliticalNewsCrawlerRawDataStorage.IUpdate;
  export type Response = IPoliticalNewsCrawlerRawDataStorage;

  export const METADATA = {
    method: "PUT",
    path: "/politicalNewsCrawler/guest/rawDataStorage/:rawDataStorageId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/politicalNewsCrawler/guest/rawDataStorage/${encodeURIComponent(props.rawDataStorageId ?? "null")}`;
  export const random = (): IPoliticalNewsCrawlerRawDataStorage =>
    typia.random<IPoliticalNewsCrawlerRawDataStorage>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("rawDataStorageId")(() =>
        typia.assert(props.rawDataStorageId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a raw data storage record permanently by ID.
 *
 * This DELETE operation removes a specific raw data storage record by its
 * unique identifier. The targeted record belongs to the
 * political_news_crawler_raw_data_storage database entity, which contains
 * critical metadata linking crawled news data to their storage locations.
 *
 * By deleting this record, all associated local cache files and processed
 * content linked through foreign keys will also be deleted as cascades are
 * enabled, ensuring referential integrity.
 *
 * Security considerations mandate that only authorized administrative roles can
 * execute this deletion due to the potential for data loss.
 *
 * Usage of this endpoint requires precise identification of the record to avoid
 * unintended data removal. The API does not soft delete; the resource is
 * permanently removed.
 *
 * Errors such as attempting to delete a non-existent ID should return a 404 Not
 * Found response.
 *
 * This operation does not require a request body and does not yield a response
 * body upon success.
 *
 * @param props.connection
 * @param props.rawDataStorageId Unique identifier of the raw data storage
 *   record to delete
 * @path /politicalNewsCrawler/guest/rawDataStorage/:rawDataStorageId
 * @accessor api.functional.politicalNewsCrawler.guest.rawDataStorage.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the raw data storage record to delete */
    rawDataStorageId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/politicalNewsCrawler/guest/rawDataStorage/:rawDataStorageId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/politicalNewsCrawler/guest/rawDataStorage/${encodeURIComponent(props.rawDataStorageId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("rawDataStorageId")(() =>
        typia.assert(props.rawDataStorageId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
