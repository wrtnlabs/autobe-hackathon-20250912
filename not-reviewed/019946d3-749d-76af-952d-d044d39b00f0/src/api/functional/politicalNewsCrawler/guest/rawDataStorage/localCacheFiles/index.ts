import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPoliticalNewsCrawlerRawDataStorageLocalCacheFile } from "../../../../../structures/IPoliticalNewsCrawlerRawDataStorageLocalCacheFile";
import { IPageIPoliticalNewsCrawlerRawDataStorageLocalCacheFile } from "../../../../../structures/IPageIPoliticalNewsCrawlerRawDataStorageLocalCacheFile";
import { IPoliticalNewsCrawlerLocalCacheFiles } from "../../../../../structures/IPoliticalNewsCrawlerLocalCacheFiles";

/**
 * Create a new local cache file record.
 *
 * Create a new local cache file metadata record for a raw data storage entry.
 * The record includes the local file path, file size, TTL expiration datetime,
 * and timestamps.
 *
 * This operation facilitates tracking of local cached copies supporting data
 * redundancy and faster access.
 *
 * Strict access control limits use to admin roles.
 *
 * Validation ensures payload completeness and data integrity.
 *
 * Errors include 400 for invalid data and 404 if referenced raw data storage
 * record is not found.
 *
 * Returns the newly created local cache file record with its unique identifier.
 *
 * @param props.connection
 * @param props.rawDataStorageId Unique identifier of the associated raw data
 *   storage record
 * @param props.body Information needed to create a new local cache file record
 * @path /politicalNewsCrawler/guest/rawDataStorage/:rawDataStorageId/localCacheFiles
 * @accessor api.functional.politicalNewsCrawler.guest.rawDataStorage.localCacheFiles.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the associated raw data storage record */
    rawDataStorageId: string & tags.Format<"uuid">;

    /** Information needed to create a new local cache file record */
    body: IPoliticalNewsCrawlerRawDataStorageLocalCacheFile.ICreate;
  };
  export type Body = IPoliticalNewsCrawlerRawDataStorageLocalCacheFile.ICreate;
  export type Response = IPoliticalNewsCrawlerRawDataStorageLocalCacheFile;

  export const METADATA = {
    method: "POST",
    path: "/politicalNewsCrawler/guest/rawDataStorage/:rawDataStorageId/localCacheFiles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/politicalNewsCrawler/guest/rawDataStorage/${encodeURIComponent(props.rawDataStorageId ?? "null")}/localCacheFiles`;
  export const random = (): IPoliticalNewsCrawlerRawDataStorageLocalCacheFile =>
    typia.random<IPoliticalNewsCrawlerRawDataStorageLocalCacheFile>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("rawDataStorageId")(() =>
        typia.assert(props.rawDataStorageId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List local cache files for a raw data storage record.
 *
 * Retrieve a paginated list of local cache file metadata records linked to a
 * specific raw data storage record. Each local cache file entry includes
 * details such as the filesystem path, file size, TTL expiration for automatic
 * deletion, and deletion status.
 *
 * The response supports pagination to handle potentially large numbers of
 * cached files efficiently.
 *
 * This operation is intended for backend management and is not publicly
 * accessible.
 *
 * Errors in specifying a non-existent raw data storage ID should produce a 404
 * Not Found error.
 *
 * Request body supports filtering and pagination parameters according to the
 * IPoliticalNewsCrawlerRawDataStorageLocalCacheFile.IRequest definition.
 *
 * Response includes a paginated collection of local cache file summaries.
 *
 * @param props.connection
 * @param props.rawDataStorageId Unique identifier of the raw data storage
 *   record
 * @param props.body Filtering and pagination parameters for listing local cache
 *   files
 * @path /politicalNewsCrawler/guest/rawDataStorage/:rawDataStorageId/localCacheFiles
 * @accessor api.functional.politicalNewsCrawler.guest.rawDataStorage.localCacheFiles.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the raw data storage record */
    rawDataStorageId: string & tags.Format<"uuid">;

    /** Filtering and pagination parameters for listing local cache files */
    body: IPoliticalNewsCrawlerRawDataStorageLocalCacheFile.IRequest;
  };
  export type Body = IPoliticalNewsCrawlerRawDataStorageLocalCacheFile.IRequest;
  export type Response =
    IPageIPoliticalNewsCrawlerRawDataStorageLocalCacheFile.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/politicalNewsCrawler/guest/rawDataStorage/:rawDataStorageId/localCacheFiles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/politicalNewsCrawler/guest/rawDataStorage/${encodeURIComponent(props.rawDataStorageId ?? "null")}/localCacheFiles`;
  export const random =
    (): IPageIPoliticalNewsCrawlerRawDataStorageLocalCacheFile.ISummary =>
      typia.random<IPageIPoliticalNewsCrawlerRawDataStorageLocalCacheFile.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("rawDataStorageId")(() =>
        typia.assert(props.rawDataStorageId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific local cache file record by ID.
 *
 * Retrieve a single local cache file metadata entry associated with a specific
 * raw data storage record by its unique ID. The response includes all critical
 * details of the cached file including local file path, size, TTL expiration,
 * and deletion status.
 *
 * This operation supports backend cache management tasks and data integrity
 * verification.
 *
 * If the specified IDs do not exist, a 404 response is expected.
 *
 * This endpoint provides detailed, actionable metadata for local cached raw
 * data file inspection.
 *
 * @param props.connection
 * @param props.rawDataStorageId Unique identifier of raw data storage record
 * @param props.localCacheFileId Unique identifier of local cache file record
 * @path /politicalNewsCrawler/guest/rawDataStorage/:rawDataStorageId/localCacheFiles/:localCacheFileId
 * @accessor api.functional.politicalNewsCrawler.guest.rawDataStorage.localCacheFiles.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of raw data storage record */
    rawDataStorageId: string & tags.Format<"uuid">;

    /** Unique identifier of local cache file record */
    localCacheFileId: string & tags.Format<"uuid">;
  };
  export type Response = IPoliticalNewsCrawlerRawDataStorageLocalCacheFile;

  export const METADATA = {
    method: "GET",
    path: "/politicalNewsCrawler/guest/rawDataStorage/:rawDataStorageId/localCacheFiles/:localCacheFileId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/politicalNewsCrawler/guest/rawDataStorage/${encodeURIComponent(props.rawDataStorageId ?? "null")}/localCacheFiles/${encodeURIComponent(props.localCacheFileId ?? "null")}`;
  export const random = (): IPoliticalNewsCrawlerRawDataStorageLocalCacheFile =>
    typia.random<IPoliticalNewsCrawlerRawDataStorageLocalCacheFile>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("rawDataStorageId")(() =>
        typia.assert(props.rawDataStorageId),
      );
      assert.param("localCacheFileId")(() =>
        typia.assert(props.localCacheFileId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific local cache file metadata for a raw data storage record.
 *
 * This API endpoint allows updating the metadata of a specific local cache file
 * associated with raw data storage. This endpoint supports modifying key
 * properties such as the local file path (location of the cached file), file
 * size in bytes for accurate storage accounting, the TTL expiration timestamp
 * which determines when the local cache should be deleted, and an optional
 * deleted_at timestamp which marks the record as soft deleted.
 *
 * Users must supply valid path parameters identifying the raw data storage and
 * the local cache file for targeting the update. The input body must conform to
 * the properties defined in IPoliticalNewsCrawlerLocalCacheFiles.IUpdate.
 *
 * Soft deletion is handled by setting the deleted_at timestamp; if null, the
 * cache file record is considered active. This operation enforces TTL policies
 * to manage local cache lifecycle and assists in maintaining data consistency
 * between cloud storage and local caches.
 *
 * Only authorized roles (guest) can update these records, ensuring control and
 * security over cache metadata management.
 *
 * Errors on invalid IDs or permission violations will result in appropriate
 * HTTP error responses.
 *
 * @param props.connection
 * @param props.rawDataStorageId Unique identifier of the raw data storage
 *   record
 * @param props.localCacheFileId Unique identifier of the local cache file
 *   record to update
 * @param props.body Local cache file update payload
 * @path /politicalNewsCrawler/guest/rawDataStorage/:rawDataStorageId/localCacheFiles/:localCacheFileId
 * @accessor api.functional.politicalNewsCrawler.guest.rawDataStorage.localCacheFiles.updateLocalCacheFile
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateLocalCacheFile(
  connection: IConnection,
  props: updateLocalCacheFile.Props,
): Promise<updateLocalCacheFile.Response> {
  return true === connection.simulate
    ? updateLocalCacheFile.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateLocalCacheFile.METADATA,
          path: updateLocalCacheFile.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateLocalCacheFile {
  export type Props = {
    /** Unique identifier of the raw data storage record */
    rawDataStorageId: string & tags.Format<"uuid">;

    /** Unique identifier of the local cache file record to update */
    localCacheFileId: string & tags.Format<"uuid">;

    /** Local cache file update payload */
    body: IPoliticalNewsCrawlerLocalCacheFiles.IUpdate;
  };
  export type Body = IPoliticalNewsCrawlerLocalCacheFiles.IUpdate;
  export type Response = IPoliticalNewsCrawlerLocalCacheFiles;

  export const METADATA = {
    method: "PUT",
    path: "/politicalNewsCrawler/guest/rawDataStorage/:rawDataStorageId/localCacheFiles/:localCacheFileId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/politicalNewsCrawler/guest/rawDataStorage/${encodeURIComponent(props.rawDataStorageId ?? "null")}/localCacheFiles/${encodeURIComponent(props.localCacheFileId ?? "null")}`;
  export const random = (): IPoliticalNewsCrawlerLocalCacheFiles =>
    typia.random<IPoliticalNewsCrawlerLocalCacheFiles>();
  export const simulate = (
    connection: IConnection,
    props: updateLocalCacheFile.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateLocalCacheFile.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("rawDataStorageId")(() =>
        typia.assert(props.rawDataStorageId),
      );
      assert.param("localCacheFileId")(() =>
        typia.assert(props.localCacheFileId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a specific local cache file record linked to raw data storage.
 *
 * This API endpoint soft deletes a local cache file record associated with raw
 * crawled data by setting the deleted_at timestamp. This marks the record as
 * logically deleted without physically removing the data from the database.
 * Users need to provide the raw data storage identifier and the local cache
 * file identifier in the path parameters to target the deletion.
 *
 * Soft deletion enables the system to keep historical cache data records for
 * audit and recovery while excluding logically deleted entries from active
 * queries. This helps enforce the TTL deletion policy and supports clean cache
 * lifecycle management.
 *
 * The endpoint is accessible only to users with guest privileges to ensure
 * operational security. If the record does not exist or the user lacks
 * permission, the system returns appropriate errors.
 *
 * No request or response body is required for this operation.
 *
 * @param props.connection
 * @param props.rawDataStorageId Unique identifier of the raw data storage
 *   record
 * @param props.localCacheFileId Unique identifier of the local cache file
 *   record to delete
 * @path /politicalNewsCrawler/guest/rawDataStorage/:rawDataStorageId/localCacheFiles/:localCacheFileId
 * @accessor api.functional.politicalNewsCrawler.guest.rawDataStorage.localCacheFiles.eraseLocalCacheFile
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseLocalCacheFile(
  connection: IConnection,
  props: eraseLocalCacheFile.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseLocalCacheFile.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseLocalCacheFile.METADATA,
          path: eraseLocalCacheFile.path(props),
          status: null,
        },
      );
}
export namespace eraseLocalCacheFile {
  export type Props = {
    /** Unique identifier of the raw data storage record */
    rawDataStorageId: string & tags.Format<"uuid">;

    /** Unique identifier of the local cache file record to delete */
    localCacheFileId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/politicalNewsCrawler/guest/rawDataStorage/:rawDataStorageId/localCacheFiles/:localCacheFileId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/politicalNewsCrawler/guest/rawDataStorage/${encodeURIComponent(props.rawDataStorageId ?? "null")}/localCacheFiles/${encodeURIComponent(props.localCacheFileId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseLocalCacheFile.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseLocalCacheFile.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("rawDataStorageId")(() =>
        typia.assert(props.rawDataStorageId),
      );
      assert.param("localCacheFileId")(() =>
        typia.assert(props.localCacheFileId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
