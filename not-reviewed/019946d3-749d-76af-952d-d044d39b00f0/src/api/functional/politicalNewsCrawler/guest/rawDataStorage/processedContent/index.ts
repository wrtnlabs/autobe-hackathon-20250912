import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPoliticalNewsCrawlerProcessedContent } from "../../../../../structures/IPoliticalNewsCrawlerProcessedContent";

/**
 * Create processed content for a specific raw data storage record.
 *
 * Create a new processed content entry linked to a specified raw data storage
 * record. This endpoint allows clients to submit new LLM-generated content such
 * as summaries, highlights, or analyses for political news data.
 *
 * The operation requires the rawDataStorageId path parameter to identify the
 * raw data record the content belongs to.
 *
 * Users must provide the content_type to specify the nature of the content
 * (e.g., summary, highlight, analysis) and the content_body containing the
 * actual text content.
 *
 * Upon successful creation, the new processed content entity including its
 * unique ID, timestamps, and linkage to the raw data storage is returned.
 *
 * Security considerations: This operation accepts public (guest) access as per
 * the project's role definitions.
 *
 * This operation is associated with the
 * political_news_crawler_processed_content database table, which stores
 * processed textual content generated by LLM models linked to raw crawl data.
 *
 * @param props.connection
 * @param props.rawDataStorageId Unique identifier of the raw data storage
 *   record to link processed content
 * @param props.body Processed content creation payload
 * @path /politicalNewsCrawler/guest/rawDataStorage/:rawDataStorageId/processedContent
 * @accessor api.functional.politicalNewsCrawler.guest.rawDataStorage.processedContent.createProcessedContent
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createProcessedContent(
  connection: IConnection,
  props: createProcessedContent.Props,
): Promise<createProcessedContent.Response> {
  return true === connection.simulate
    ? createProcessedContent.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createProcessedContent.METADATA,
          path: createProcessedContent.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace createProcessedContent {
  export type Props = {
    /**
     * Unique identifier of the raw data storage record to link processed
     * content
     */
    rawDataStorageId: string & tags.Format<"uuid">;

    /** Processed content creation payload */
    body: IPoliticalNewsCrawlerProcessedContent.ICreate;
  };
  export type Body = IPoliticalNewsCrawlerProcessedContent.ICreate;
  export type Response = IPoliticalNewsCrawlerProcessedContent;

  export const METADATA = {
    method: "POST",
    path: "/politicalNewsCrawler/guest/rawDataStorage/:rawDataStorageId/processedContent",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/politicalNewsCrawler/guest/rawDataStorage/${encodeURIComponent(props.rawDataStorageId ?? "null")}/processedContent`;
  export const random = (): IPoliticalNewsCrawlerProcessedContent =>
    typia.random<IPoliticalNewsCrawlerProcessedContent>();
  export const simulate = (
    connection: IConnection,
    props: createProcessedContent.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createProcessedContent.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("rawDataStorageId")(() =>
        typia.assert(props.rawDataStorageId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update processed content for a given raw data storage record.
 *
 * Update details of a processed content entry for a specific raw data storage
 * record. The endpoint requires both rawDataStorageId and processedContentId
 * path parameters to precisely identify the record to be updated.
 *
 * Clients can modify fields such as content_type and content_body to correct or
 * enhance the processed textual contents derived from LLM processing.
 *
 * Proper user authentication is not required for this operation as per project
 * role definitions.
 *
 * This operation accesses the political_news_crawler_processed_content table
 * for persistent updates.
 *
 * @param props.connection
 * @param props.rawDataStorageId Unique identifier of the raw data storage
 *   record linked to the processed content
 * @param props.processedContentId Unique identifier of the processed content
 *   record to update
 * @param props.body Processed content update payload
 * @path /politicalNewsCrawler/guest/rawDataStorage/:rawDataStorageId/processedContent/:processedContentId
 * @accessor api.functional.politicalNewsCrawler.guest.rawDataStorage.processedContent.updateProcessedContent
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateProcessedContent(
  connection: IConnection,
  props: updateProcessedContent.Props,
): Promise<updateProcessedContent.Response> {
  return true === connection.simulate
    ? updateProcessedContent.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateProcessedContent.METADATA,
          path: updateProcessedContent.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateProcessedContent {
  export type Props = {
    /**
     * Unique identifier of the raw data storage record linked to the
     * processed content
     */
    rawDataStorageId: string & tags.Format<"uuid">;

    /** Unique identifier of the processed content record to update */
    processedContentId: string & tags.Format<"uuid">;

    /** Processed content update payload */
    body: IPoliticalNewsCrawlerProcessedContent.IUpdate;
  };
  export type Body = IPoliticalNewsCrawlerProcessedContent.IUpdate;
  export type Response = IPoliticalNewsCrawlerProcessedContent;

  export const METADATA = {
    method: "PUT",
    path: "/politicalNewsCrawler/guest/rawDataStorage/:rawDataStorageId/processedContent/:processedContentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/politicalNewsCrawler/guest/rawDataStorage/${encodeURIComponent(props.rawDataStorageId ?? "null")}/processedContent/${encodeURIComponent(props.processedContentId ?? "null")}`;
  export const random = (): IPoliticalNewsCrawlerProcessedContent =>
    typia.random<IPoliticalNewsCrawlerProcessedContent>();
  export const simulate = (
    connection: IConnection,
    props: updateProcessedContent.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateProcessedContent.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("rawDataStorageId")(() =>
        typia.assert(props.rawDataStorageId),
      );
      assert.param("processedContentId")(() =>
        typia.assert(props.processedContentId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a processed content record permanently.
 *
 * Delete (erase) a processed content record associated with a given raw data
 * storage item identified by rawDataStorageId and processedContentId. This
 * operation permanently removes the processed content data and cannot be
 * undone.
 *
 * Clients do not need authentication to delete processed content as per current
 * system roles.
 *
 * This action does not accept a request body and does not return a response
 * body.
 *
 * It directly removes the referenced record within the
 * political_news_crawler_processed_content table.
 *
 * @param props.connection
 * @param props.rawDataStorageId Unique identifier of the raw data storage
 *   record linked to processed content
 * @param props.processedContentId Unique identifier of the processed content
 *   record to be deleted
 * @path /politicalNewsCrawler/guest/rawDataStorage/:rawDataStorageId/processedContent/:processedContentId
 * @accessor api.functional.politicalNewsCrawler.guest.rawDataStorage.processedContent.eraseProcessedContent
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseProcessedContent(
  connection: IConnection,
  props: eraseProcessedContent.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseProcessedContent.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseProcessedContent.METADATA,
          path: eraseProcessedContent.path(props),
          status: null,
        },
      );
}
export namespace eraseProcessedContent {
  export type Props = {
    /**
     * Unique identifier of the raw data storage record linked to processed
     * content
     */
    rawDataStorageId: string & tags.Format<"uuid">;

    /** Unique identifier of the processed content record to be deleted */
    processedContentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/politicalNewsCrawler/guest/rawDataStorage/:rawDataStorageId/processedContent/:processedContentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/politicalNewsCrawler/guest/rawDataStorage/${encodeURIComponent(props.rawDataStorageId ?? "null")}/processedContent/${encodeURIComponent(props.processedContentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseProcessedContent.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseProcessedContent.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("rawDataStorageId")(() =>
        typia.assert(props.rawDataStorageId),
      );
      assert.param("processedContentId")(() =>
        typia.assert(props.processedContentId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
