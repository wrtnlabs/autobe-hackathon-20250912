import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPoliticalNewsCrawlerApiAlert } from "../../../../structures/IPoliticalNewsCrawlerApiAlert";
import { IPageIPoliticalNewsCrawlerApiAlert } from "../../../../structures/IPageIPoliticalNewsCrawlerApiAlert";

/**
 * Create a new API alert record.
 *
 * Create a new API alert entry to record system-level API issues or
 * notifications.
 *
 * This endpoint is generally used by automated monitoring or system components,
 * but manual creation is supported for maintenance purposes.
 *
 * The alert includes type, severity, message, and the time it was generated.
 *
 * Only users with the "guest" role can create API alerts to maintain system
 * integrity.
 *
 * The API returns the newly created alert including its unique identifier.
 *
 * @param props.connection
 * @param props.body Information required for creating an API alert
 * @path /politicalNewsCrawler/guest/apiAlerts
 * @accessor api.functional.politicalNewsCrawler.guest.apiAlerts.createApiAlert
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createApiAlert(
  connection: IConnection,
  props: createApiAlert.Props,
): Promise<createApiAlert.Response> {
  return true === connection.simulate
    ? createApiAlert.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createApiAlert.METADATA,
          path: createApiAlert.path(),
          status: null,
        },
        props.body,
      );
}
export namespace createApiAlert {
  export type Props = {
    /** Information required for creating an API alert */
    body: IPoliticalNewsCrawlerApiAlert.ICreate;
  };
  export type Body = IPoliticalNewsCrawlerApiAlert.ICreate;
  export type Response = IPoliticalNewsCrawlerApiAlert;

  export const METADATA = {
    method: "POST",
    path: "/politicalNewsCrawler/guest/apiAlerts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/politicalNewsCrawler/guest/apiAlerts";
  export const random = (): IPoliticalNewsCrawlerApiAlert =>
    typia.random<IPoliticalNewsCrawlerApiAlert>();
  export const simulate = (
    connection: IConnection,
    props: createApiAlert.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createApiAlert.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of API alerts.
 *
 * Retrieve a list of API alert records with flexible search and pagination.
 *
 * API alerts correspond to system event notifications for rate limiting,
 * endpoint issues, and spike detection.
 *
 * This operation allows monitoring users or admins to filter alerts based on
 * severity, type, or date ranges.
 *
 * Results are paginated and sorted according to request criteria, enabling
 * effective operational surveillance.
 *
 * Proper authorization ensures only permitted roles can view sensitive alert
 * data, commonly the "guest" user role in this context.
 *
 * All users of the "guest" role are authorized.
 *
 * @param props.connection
 * @param props.body Search and pagination parameters for API alerts
 * @path /politicalNewsCrawler/guest/apiAlerts
 * @accessor api.functional.politicalNewsCrawler.guest.apiAlerts.indexApiAlerts
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexApiAlerts(
  connection: IConnection,
  props: indexApiAlerts.Props,
): Promise<indexApiAlerts.Response> {
  return true === connection.simulate
    ? indexApiAlerts.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexApiAlerts.METADATA,
          path: indexApiAlerts.path(),
          status: null,
        },
        props.body,
      );
}
export namespace indexApiAlerts {
  export type Props = {
    /** Search and pagination parameters for API alerts */
    body: IPoliticalNewsCrawlerApiAlert.IRequest;
  };
  export type Body = IPoliticalNewsCrawlerApiAlert.IRequest;
  export type Response = IPageIPoliticalNewsCrawlerApiAlert.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/politicalNewsCrawler/guest/apiAlerts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/politicalNewsCrawler/guest/apiAlerts";
  export const random = (): IPageIPoliticalNewsCrawlerApiAlert.ISummary =>
    typia.random<IPageIPoliticalNewsCrawlerApiAlert.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: indexApiAlerts.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexApiAlerts.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information of a specific API alert by ID.
 *
 * Retrieve detailed information about a specific API alert identified by its
 * unique ID.
 *
 * This endpoint is intended for use by users with the "guest" role or
 * monitoring tools requiring deep insights into particular alert events.
 *
 * API alert data includes event type, severity level, descriptive message, and
 * timestamps.
 *
 * Attempting to retrieve a non-existent alert will result in an error response
 * indicating not found.
 *
 * @param props.connection
 * @param props.id Unique identifier of the API alert to retrieve
 * @path /politicalNewsCrawler/guest/apiAlerts/:id
 * @accessor api.functional.politicalNewsCrawler.guest.apiAlerts.atApiAlert
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atApiAlert(
  connection: IConnection,
  props: atApiAlert.Props,
): Promise<atApiAlert.Response> {
  return true === connection.simulate
    ? atApiAlert.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atApiAlert.METADATA,
          path: atApiAlert.path(props),
          status: null,
        },
      );
}
export namespace atApiAlert {
  export type Props = {
    /** Unique identifier of the API alert to retrieve */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IPoliticalNewsCrawlerApiAlert;

  export const METADATA = {
    method: "GET",
    path: "/politicalNewsCrawler/guest/apiAlerts/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/politicalNewsCrawler/guest/apiAlerts/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IPoliticalNewsCrawlerApiAlert =>
    typia.random<IPoliticalNewsCrawlerApiAlert>();
  export const simulate = (
    connection: IConnection,
    props: atApiAlert.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atApiAlert.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific API alert by id.
 *
 * Update an existing API alert identified by its unique UUID.
 *
 * This operation modifies the alert_type, message, and severity attributes of
 * the API alert stored in the political_news_crawler_api_alerts table. This
 * ensures that monitoring systems maintain correct and timely alert data for
 * API subsystem errors.
 *
 * The path parameter id uniquely identifies the API alert record to be updated.
 *
 * Only users with 'guest' role authorization can execute this operation as the
 * alert management is publicly accessible read/write controlled.
 *
 * The operation will return the updated API alert record upon successful
 * update.
 *
 * If the specified id does not exist or payload validation fails, appropriate
 * error responses will be generated.
 *
 * This operation is a key part of the alert management subsystem that helps in
 * tracking API error conditions and notifying stakeholders.
 *
 * @param props.connection
 * @param props.id Unique identifier of the API alert to update
 * @param props.body Update data for the API alert
 * @path /politicalNewsCrawler/guest/apiAlerts/:id
 * @accessor api.functional.politicalNewsCrawler.guest.apiAlerts.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the API alert to update */
    id: string & tags.Format<"uuid">;

    /** Update data for the API alert */
    body: IPoliticalNewsCrawlerApiAlert.IUpdate;
  };
  export type Body = IPoliticalNewsCrawlerApiAlert.IUpdate;
  export type Response = IPoliticalNewsCrawlerApiAlert;

  export const METADATA = {
    method: "PUT",
    path: "/politicalNewsCrawler/guest/apiAlerts/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/politicalNewsCrawler/guest/apiAlerts/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IPoliticalNewsCrawlerApiAlert =>
    typia.random<IPoliticalNewsCrawlerApiAlert>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specific API alert by id.
 *
 * Delete an existing API alert permanently by its unique UUID.
 *
 * This operation removes the alert record from the
 * political_news_crawler_api_alerts table irreversibly.
 *
 * The path parameter id specifies the alert to remove.
 *
 * Only users with 'guest' role authorization can perform this action.
 *
 * No response body is returned upon successful deletion.
 *
 * This is a hard delete operation; the record is fully removed with no soft
 * delete functionality.
 *
 * Use this operation cautiously as deleted alert records cannot be recovered.
 *
 * This endpoint helps maintain system health by allowing removal of outdated or
 * resolved alerts.
 *
 * @param props.connection
 * @param props.id Unique identifier of the API alert to delete
 * @path /politicalNewsCrawler/guest/apiAlerts/:id
 * @accessor api.functional.politicalNewsCrawler.guest.apiAlerts.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the API alert to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/politicalNewsCrawler/guest/apiAlerts/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/politicalNewsCrawler/guest/apiAlerts/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
