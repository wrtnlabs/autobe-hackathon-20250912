import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPoliticalNewsCrawlerCrawlAlerts } from "../../../../structures/IPoliticalNewsCrawlerCrawlAlerts";

/**
 * Retrieve a crawl alert detail by ID.
 *
 * Retrieve detailed information about a specific crawl alert by its unique ID.
 * The crawl alert entity logs critical events in the crawling process such as
 * bans, network errors, or throttle warnings related to specific crawl sources.
 * This data helps system operators monitor crawler health and perform
 * diagnostics.
 *
 * Access to this endpoint requires appropriate permissions reflecting user
 * roles responsible for viewing operational alerts.
 *
 * The response returns all available metadata for the alert including its type,
 * descriptive message, severity level, and timestamps. If the alert has been
 * soft deleted, it will still be retrievable for audit purposes.
 *
 * This retrieval operation maps directly to the
 * political_news_crawler_crawl_alerts database table, ensuring consistent data
 * mapping and field representation.
 *
 * Clients should handle not found errors appropriately if the specified alert
 * ID does not exist or has been deleted permanently.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target crawl alert
 * @path /politicalNewsCrawler/guest/crawlAlerts/:id
 * @accessor api.functional.politicalNewsCrawler.guest.crawlAlerts.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target crawl alert */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IPoliticalNewsCrawlerCrawlAlerts;

  export const METADATA = {
    method: "GET",
    path: "/politicalNewsCrawler/guest/crawlAlerts/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/politicalNewsCrawler/guest/crawlAlerts/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IPoliticalNewsCrawlerCrawlAlerts =>
    typia.random<IPoliticalNewsCrawlerCrawlAlerts>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update crawl alert information by ID.
 *
 * Update an existing crawl alert identified by ID. This allows modification of
 * operational alert details including alert type, message, and severity.
 *
 * Audit timestamps are immutable and managed internally.
 *
 * Clients should ensure to provide only the fields that need to be updated.
 *
 * Proper error handling is required for non-existent IDs.
 *
 * This operation maps to the political_news_crawler_crawl_alerts table ensuring
 * data consistency.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target crawl alert
 * @param props.body Updated crawl alert data
 * @path /politicalNewsCrawler/guest/crawlAlerts/:id
 * @accessor api.functional.politicalNewsCrawler.guest.crawlAlerts.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target crawl alert */
    id: string & tags.Format<"uuid">;

    /** Updated crawl alert data */
    body: IPoliticalNewsCrawlerCrawlAlerts.IUpdate;
  };
  export type Body = IPoliticalNewsCrawlerCrawlAlerts.IUpdate;
  export type Response = IPoliticalNewsCrawlerCrawlAlerts;

  export const METADATA = {
    method: "PUT",
    path: "/politicalNewsCrawler/guest/crawlAlerts/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/politicalNewsCrawler/guest/crawlAlerts/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IPoliticalNewsCrawlerCrawlAlerts =>
    typia.random<IPoliticalNewsCrawlerCrawlAlerts>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete crawl alert by ID.
 *
 * Permanently delete a crawl alert record by its ID. This operation
 * irreversibly removes the alert and all associated data from the database.
 *
 * This hard delete is definitive and cannot be undone.
 *
 * Only authorized users with administrative roles may perform this operation.
 *
 * Clients should confirm the record exists before requesting deletion.
 *
 * This action maps to the political_news_crawler_crawl_alerts DB table deletion
 * behavior.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target crawl alert
 * @path /politicalNewsCrawler/guest/crawlAlerts/:id
 * @accessor api.functional.politicalNewsCrawler.guest.crawlAlerts.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target crawl alert */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/politicalNewsCrawler/guest/crawlAlerts/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/politicalNewsCrawler/guest/crawlAlerts/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create a new crawl alert entry to record important operational events
 * affecting crawling. This is essential for tracking issues such as bans or
 * errors from crawl sources.
 *
 * Clients must provide the crawl source reference, alert type, descriptive
 * message, and severity level.
 *
 * No soft delete or update timestamps are required, as this is strictly for new
 * event logging.
 *
 * Successful creation returns the created crawl alert data with generated IDs
 * and timestamps.
 *
 * @param props.connection
 * @param props.body New crawl alert details for creation
 * @path /politicalNewsCrawler/guest/crawlAlerts
 * @accessor api.functional.politicalNewsCrawler.guest.crawlAlerts.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** New crawl alert details for creation */
    body: IPoliticalNewsCrawlerCrawlAlerts.ICreate;
  };
  export type Body = IPoliticalNewsCrawlerCrawlAlerts.ICreate;
  export type Response = IPoliticalNewsCrawlerCrawlAlerts;

  export const METADATA = {
    method: "POST",
    path: "/politicalNewsCrawler/guest/crawlAlerts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/politicalNewsCrawler/guest/crawlAlerts";
  export const random = (): IPoliticalNewsCrawlerCrawlAlerts =>
    typia.random<IPoliticalNewsCrawlerCrawlAlerts>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
