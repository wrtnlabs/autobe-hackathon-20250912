import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPoliticalNewsCrawlerCrawlPolicy } from "../../../../../structures/IPoliticalNewsCrawlerCrawlPolicy";
import { IPageIPoliticalNewsCrawlerCrawlPolicy } from "../../../../../structures/IPageIPoliticalNewsCrawlerCrawlPolicy";

/**
 * Create new crawl policy.
 *
 * Creates a new crawl policy with the provided details.
 *
 * The request body must include fields such as policy_name, max crawl frequency
 * (minutes), max retry attempts, backoff multiplier and ban detection enabled
 * flag.
 *
 * Only admin users are authorized to create new crawl policies.
 *
 * Returns the created crawl policy entity.
 *
 * Errors in input data validation return detailed messages.
 *
 * No path parameters are required.
 *
 * @param props.connection
 * @param props.body New crawl policy data
 * @path /politicalNewsCrawler/guest/politicalNewsCrawler/crawlPolicies
 * @accessor api.functional.politicalNewsCrawler.guest.politicalNewsCrawler.crawlPolicies.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** New crawl policy data */
    body: IPoliticalNewsCrawlerCrawlPolicy.ICreate;
  };
  export type Body = IPoliticalNewsCrawlerCrawlPolicy.ICreate;
  export type Response = IPoliticalNewsCrawlerCrawlPolicy;

  export const METADATA = {
    method: "POST",
    path: "/politicalNewsCrawler/guest/politicalNewsCrawler/crawlPolicies",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/politicalNewsCrawler/guest/politicalNewsCrawler/crawlPolicies";
  export const random = (): IPoliticalNewsCrawlerCrawlPolicy =>
    typia.random<IPoliticalNewsCrawlerCrawlPolicy>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and list crawl policies.
 *
 * Retrieves a filtered, paginated list of crawl policies from the database.
 * Supports advanced search parameters including max crawl frequency, retry
 * attempts, and ban detection flags.
 *
 * This operation returns crawl policy summaries optimized for list display in
 * administrative interfaces.
 *
 * Only admin users are authorized for this operation.
 *
 * The response contains a pageable data set with key policy attributes.
 *
 * Errors such as invalid filters or pagination parameters will be returned as
 * appropriate HTTP errors.
 *
 * The request body specifies complex search and pagination criteria.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for crawl
 *   policies filtering
 * @path /politicalNewsCrawler/guest/politicalNewsCrawler/crawlPolicies
 * @accessor api.functional.politicalNewsCrawler.guest.politicalNewsCrawler.crawlPolicies.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for crawl policies
     * filtering
     */
    body: IPoliticalNewsCrawlerCrawlPolicy.IRequest;
  };
  export type Body = IPoliticalNewsCrawlerCrawlPolicy.IRequest;
  export type Response = IPageIPoliticalNewsCrawlerCrawlPolicy.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/politicalNewsCrawler/guest/politicalNewsCrawler/crawlPolicies",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/politicalNewsCrawler/guest/politicalNewsCrawler/crawlPolicies";
  export const random = (): IPageIPoliticalNewsCrawlerCrawlPolicy.ISummary =>
    typia.random<IPageIPoliticalNewsCrawlerCrawlPolicy.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve crawl policy details by ID.
 *
 * Retrieves detailed crawl policy information identified by its UUID.
 *
 * This operation supports administrative usage for managing crawl policies.
 *
 * Only users with admin role are authorized.
 *
 * Response returns full crawl policy entity.
 *
 * Invalid IDs return error responses.
 *
 * @param props.connection
 * @param props.id Unique identifier of the crawl policy to retrieve
 * @path /politicalNewsCrawler/guest/politicalNewsCrawler/crawlPolicies/:id
 * @accessor api.functional.politicalNewsCrawler.guest.politicalNewsCrawler.crawlPolicies.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the crawl policy to retrieve */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IPoliticalNewsCrawlerCrawlPolicy;

  export const METADATA = {
    method: "GET",
    path: "/politicalNewsCrawler/guest/politicalNewsCrawler/crawlPolicies/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/politicalNewsCrawler/guest/politicalNewsCrawler/crawlPolicies/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IPoliticalNewsCrawlerCrawlPolicy =>
    typia.random<IPoliticalNewsCrawlerCrawlPolicy>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing crawl policy in politicalNewsCrawler.
 *
 * This endpoint updates the details of an existing crawl policy used by the
 * politicalNewsCrawler system to govern crawl scheduling and error handling.
 * Updating crawl policies enables administrators to adjust parameters
 * including:
 *
 * - Maximum crawl frequency in minutes to control how often crawls are scheduled.
 * - Maximum retry attempts to specify how many times to retry failed crawling
 *   operations before aborting.
 * - Backoff multiplier controlling the exponential delay applied between retries.
 * - Ban detection enabled flag indicating whether the system should actively
 *   detect and handle bans.
 *
 * Security considerations: Only authorized backend administrators should have
 * access to update crawl policies to prevent disruption of crawling behavior.
 * The operation updates a single policy record identified by the provided UUID
 * path parameter, ensuring precise targeting.
 *
 * The operation interfaces with the underlying
 * political_news_crawler_crawl_policies table, modifying fields according to
 * the request payload. Proper validation is performed to ensure data
 * integrity.
 *
 * In case of errors (e.g., invalid ID or data), the system returns appropriate
 * HTTP error status codes. Successful updates return the modified crawl policy
 * entity reflecting the new parameters.
 *
 * @param props.connection
 * @param props.id Unique identifier of the crawl policy to update
 * @param props.body Updated crawl policy data for modification
 * @path /politicalNewsCrawler/guest/politicalNewsCrawler/crawlPolicies/:id
 * @accessor api.functional.politicalNewsCrawler.guest.politicalNewsCrawler.crawlPolicies.updateCrawlPolicy
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateCrawlPolicy(
  connection: IConnection,
  props: updateCrawlPolicy.Props,
): Promise<updateCrawlPolicy.Response> {
  return true === connection.simulate
    ? updateCrawlPolicy.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateCrawlPolicy.METADATA,
          path: updateCrawlPolicy.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateCrawlPolicy {
  export type Props = {
    /** Unique identifier of the crawl policy to update */
    id: string & tags.Format<"uuid">;

    /** Updated crawl policy data for modification */
    body: IPoliticalNewsCrawlerCrawlPolicy.IUpdate;
  };
  export type Body = IPoliticalNewsCrawlerCrawlPolicy.IUpdate;
  export type Response = IPoliticalNewsCrawlerCrawlPolicy;

  export const METADATA = {
    method: "PUT",
    path: "/politicalNewsCrawler/guest/politicalNewsCrawler/crawlPolicies/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/politicalNewsCrawler/guest/politicalNewsCrawler/crawlPolicies/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IPoliticalNewsCrawlerCrawlPolicy =>
    typia.random<IPoliticalNewsCrawlerCrawlPolicy>();
  export const simulate = (
    connection: IConnection,
    props: updateCrawlPolicy.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateCrawlPolicy.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a crawl policy by ID permanently.
 *
 * Deletes the specified crawl policy record from the politicalNewsCrawler
 * system permanently.
 *
 * This operation requires administrative privileges due to its impact on
 * crawling behavior and system stability. Careful consideration is necessary
 * before invoking the delete to avoid disruption.
 *
 * The API removes the crawl policy identified by the UUID path parameter from
 * the underlying database table political_news_crawler_crawl_policies.
 *
 * No request body or response body is returned. Successful invocation results
 * in a confirmation of deletion with no content. Failure cases return an
 * appropriate error code.
 *
 * @param props.connection
 * @param props.id Unique identifier of the crawl policy to delete
 * @path /politicalNewsCrawler/guest/politicalNewsCrawler/crawlPolicies/:id
 * @accessor api.functional.politicalNewsCrawler.guest.politicalNewsCrawler.crawlPolicies.eraseCrawlPolicy
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseCrawlPolicy(
  connection: IConnection,
  props: eraseCrawlPolicy.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseCrawlPolicy.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseCrawlPolicy.METADATA,
          path: eraseCrawlPolicy.path(props),
          status: null,
        },
      );
}
export namespace eraseCrawlPolicy {
  export type Props = {
    /** Unique identifier of the crawl policy to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/politicalNewsCrawler/guest/politicalNewsCrawler/crawlPolicies/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/politicalNewsCrawler/guest/politicalNewsCrawler/crawlPolicies/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseCrawlPolicy.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseCrawlPolicy.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
