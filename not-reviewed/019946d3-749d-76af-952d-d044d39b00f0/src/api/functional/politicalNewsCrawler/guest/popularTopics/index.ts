import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPoliticalNewsCrawlerPopularTopic } from "../../../../structures/IPoliticalNewsCrawlerPopularTopic";
export * as popularityScores from "./popularityScores/index";

/**
 * Create new popular political topic.
 *
 * Creates a new popular political topic within the system. Users can specify a
 * unique topic code and title to identify trending or important political
 * themes. An optional description provides further context or details about the
 * topic. This operation inserts a new row into
 * political_news_crawler_popular_topics which serves as the primary entity
 * representing popular political topics.
 *
 * Security considerations require that only authorized parties (e.g., system
 * administrators) perform this operation to prevent duplicates or invalid
 * entries. Validation ensures topic_code uniqueness and title presence.
 *
 * This operation integrates with related tables: popularity_scores and
 * topic_mentions, which track dynamic scoring and article references
 * respectively. Creating a topic is a prerequisite for recording its popularity
 * and news mentions.
 *
 * Expected behavior includes returning the full created topic entity upon
 * successful creation. Errors may arise from duplicate topic codes or
 * validation failures.
 *
 * @param props.connection
 * @param props.body Creation info of the popular topic
 * @path /politicalNewsCrawler/guest/popularTopics
 * @accessor api.functional.politicalNewsCrawler.guest.popularTopics.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation info of the popular topic */
    body: IPoliticalNewsCrawlerPopularTopic.ICreate;
  };
  export type Body = IPoliticalNewsCrawlerPopularTopic.ICreate;
  export type Response = IPoliticalNewsCrawlerPopularTopic;

  export const METADATA = {
    method: "POST",
    path: "/politicalNewsCrawler/guest/popularTopics",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/politicalNewsCrawler/guest/popularTopics";
  export const random = (): IPoliticalNewsCrawlerPopularTopic =>
    typia.random<IPoliticalNewsCrawlerPopularTopic>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update popular political topic by ID.
 *
 * Updates an existing popular political topic by ID. Allows modification of the
 * topic code, title, and optional description to reflect changes in political
 * themes or corrections to entries.
 *
 * Security measures mandate authorized access to prevent unauthorized
 * modifications. Validation includes ensuring continued uniqueness of
 * topic_code if changed.
 *
 * This operation affects the main popular_topics entity and indirectly impacts
 * associated popularity scores and topic mentions. Successful updates return
 * the updated topic entity. In case of invalid ID or concurrency issues,
 * appropriate errors are returned.
 *
 * @param props.connection
 * @param props.id Unique identifier of the popular political topic to update
 * @param props.body Update info for the popular topic
 * @path /politicalNewsCrawler/guest/popularTopics/:id
 * @accessor api.functional.politicalNewsCrawler.guest.popularTopics.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the popular political topic to update */
    id: string & tags.Format<"uuid">;

    /** Update info for the popular topic */
    body: IPoliticalNewsCrawlerPopularTopic.IUpdate;
  };
  export type Body = IPoliticalNewsCrawlerPopularTopic.IUpdate;
  export type Response = IPoliticalNewsCrawlerPopularTopic;

  export const METADATA = {
    method: "PUT",
    path: "/politicalNewsCrawler/guest/popularTopics/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/politicalNewsCrawler/guest/popularTopics/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IPoliticalNewsCrawlerPopularTopic =>
    typia.random<IPoliticalNewsCrawlerPopularTopic>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete popular political topic by ID (hard delete).
 *
 * Deletes a popular political topic identified by ID. This performs a permanent
 * removal of the topic record from the database, including removal of all
 * associated popularity scores and topic mentions due to foreign key
 * constraints.
 *
 * Security constraints require administrative privileges to avoid accidental
 * data loss. This operation cannot be undone; use with caution.
 *
 * Errors are returned if the ID does not exist or foreign key constraints
 * prevent deletion.
 *
 * This operation allows system administrators to clean up outdated or invalid
 * topics.
 *
 * @param props.connection
 * @param props.id Unique identifier of the popular political topic to delete
 * @path /politicalNewsCrawler/guest/popularTopics/:id
 * @accessor api.functional.politicalNewsCrawler.guest.popularTopics.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the popular political topic to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/politicalNewsCrawler/guest/popularTopics/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/politicalNewsCrawler/guest/popularTopics/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
