import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPoliticalNewsCrawlerPopularityScore } from "../../../../../structures/IPoliticalNewsCrawlerPopularityScore";
import { IPageIPoliticalNewsCrawlerPopularityScore } from "../../../../../structures/IPageIPoliticalNewsCrawlerPopularityScore";

/**
 * List popularity score snapshots for a popular topic.
 *
 * Retrieve a paginated list of popularity score snapshots for a given popular
 * topic ID. Provides historical and current popularity scores with decay
 * factors applied based on snapshot timestamps.
 *
 * Security considerations include read-only access for authenticated users,
 * ensuring information is not exposed to unauthorized parties.
 *
 * This operation links directly to the primary topic entity and supports UI
 * features like time-trend charts or score evolution tracking. Results are
 * paginated to manage potentially large histories.
 *
 * Expected behavior includes returning summary entries with score, decay, and
 * snapshot time, ordered by snapshot_at descending.
 *
 * @param props.connection
 * @param props.popularTopicId Identifier of the popular topic whose popularity
 *   scores are queried
 * @param props.body Request parameters for popularity scores list with
 *   filtering, sorting, and pagination
 * @path /politicalNewsCrawler/guest/popularTopics/:popularTopicId/popularityScores
 * @accessor api.functional.politicalNewsCrawler.guest.popularTopics.popularityScores.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Identifier of the popular topic whose popularity scores are queried */
    popularTopicId: string & tags.Format<"uuid">;

    /**
     * Request parameters for popularity scores list with filtering,
     * sorting, and pagination
     */
    body: IPoliticalNewsCrawlerPopularityScore.IRequest;
  };
  export type Body = IPoliticalNewsCrawlerPopularityScore.IRequest;
  export type Response = IPageIPoliticalNewsCrawlerPopularityScore.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/politicalNewsCrawler/guest/popularTopics/:popularTopicId/popularityScores",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/politicalNewsCrawler/guest/popularTopics/${encodeURIComponent(props.popularTopicId ?? "null")}/popularityScores`;
  export const random =
    (): IPageIPoliticalNewsCrawlerPopularityScore.ISummary =>
      typia.random<IPageIPoliticalNewsCrawlerPopularityScore.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("popularTopicId")(() => typia.assert(props.popularTopicId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
