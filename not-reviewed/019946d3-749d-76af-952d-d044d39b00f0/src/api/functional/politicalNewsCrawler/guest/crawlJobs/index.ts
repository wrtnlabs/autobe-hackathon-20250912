import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPoliticalNewsCrawlerCrawlJobsICreate } from "../../../../structures/IPoliticalNewsCrawlerCrawlJobsICreate";
import { IPoliticalNewsCrawlerCrawlJobs } from "../../../../structures/IPoliticalNewsCrawlerCrawlJobs";
import { IPoliticalNewsCrawlerCrawlJobsIRequest } from "../../../../structures/IPoliticalNewsCrawlerCrawlJobsIRequest";
import { IPageIPoliticalNewsCrawlerCrawlJobs } from "../../../../structures/IPageIPoliticalNewsCrawlerCrawlJobs";
import { IPoliticalNewsCrawlerCrawlJob } from "../../../../structures/IPoliticalNewsCrawlerCrawlJob";
export * as crawlAttempts from "./crawlAttempts/index";

/**
 * Create a new crawl job to schedule crawling operations for a political news
 * source.
 *
 * Requires specifying the associated crawl source, crawl schedule, and active
 * status.
 *
 * Returns the detailed crawl job record after creation.
 *
 * Security: Requires user role authorization.
 *
 * Related operations include listing crawl jobs and retrieving crawl job
 * details.
 *
 * Errors occur if required fields are missing or references invalid IDs.
 *
 * @param props.connection
 * @param props.body Information to create a new crawl job
 * @path /politicalNewsCrawler/guest/crawlJobs
 * @accessor api.functional.politicalNewsCrawler.guest.crawlJobs.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information to create a new crawl job */
    body: IPoliticalNewsCrawlerCrawlJobsICreate;
  };
  export type Body = IPoliticalNewsCrawlerCrawlJobsICreate;
  export type Response = IPoliticalNewsCrawlerCrawlJobs;

  export const METADATA = {
    method: "POST",
    path: "/politicalNewsCrawler/guest/crawlJobs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/politicalNewsCrawler/guest/crawlJobs";
  export const random = (): IPoliticalNewsCrawlerCrawlJobs =>
    typia.random<IPoliticalNewsCrawlerCrawlJobs>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and list crawl jobs.
 *
 * Retrieve a paginated and filtered list of crawl jobs managed by the
 * political_news_crawler_crawl_jobs table.
 *
 * Supports search parameters including schedule ID and active status, allowing
 * clients to find specific crawl jobs.
 *
 * Security: This endpoint is publicly accessible, providing read-only access to
 * crawl job status information.
 *
 * Related operations include querying specific crawl job details and creating
 * new crawl jobs.
 *
 * Errors will be returned if search criteria are invalid.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for crawl job
 *   filtering
 * @path /politicalNewsCrawler/guest/crawlJobs
 * @accessor api.functional.politicalNewsCrawler.guest.crawlJobs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for crawl job filtering */
    body: IPoliticalNewsCrawlerCrawlJobsIRequest;
  };
  export type Body = IPoliticalNewsCrawlerCrawlJobsIRequest;
  export type Response = IPageIPoliticalNewsCrawlerCrawlJobs;

  export const METADATA = {
    method: "PATCH",
    path: "/politicalNewsCrawler/guest/crawlJobs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/politicalNewsCrawler/guest/crawlJobs";
  export const random = (): IPageIPoliticalNewsCrawlerCrawlJobs =>
    typia.random<IPageIPoliticalNewsCrawlerCrawlJobs>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a crawl job by ID.
 *
 * Retrieve detailed information about a crawl job specified by its unique ID.
 *
 * Returns complete crawl job information including schedule, activity status,
 * and timestamps.
 *
 * Security: Requires user-level authorization.
 *
 * Related operations include listing crawl jobs and creating new crawl jobs.
 *
 * Errors occur if the crawl job ID does not exist.
 *
 * @param props.connection
 * @param props.id Unique identifier of the crawl job
 * @path /politicalNewsCrawler/guest/crawlJobs/:id
 * @accessor api.functional.politicalNewsCrawler.guest.crawlJobs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the crawl job */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IPoliticalNewsCrawlerCrawlJobs;

  export const METADATA = {
    method: "GET",
    path: "/politicalNewsCrawler/guest/crawlJobs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/politicalNewsCrawler/guest/crawlJobs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IPoliticalNewsCrawlerCrawlJobs =>
    typia.random<IPoliticalNewsCrawlerCrawlJobs>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing crawl job by ID.
 *
 * Update the details of an existing crawl job identified by its unique ID. This
 * enables controlling whether the crawl job is active, and can adjust timing
 * metadata such as last run start and completion times. The operation is
 * crucial for administrators or backend systems managing crawl schedules and
 * execution state for political news data retrieval.
 *
 * Security considerations: this endpoint requires guest role authorization as
 * per system role configuration.
 *
 * The operation corresponds to the political_news_crawler_crawl_jobs table and
 * updates mutable fields while preserving relational integrity.
 *
 * Business logic includes validation of input timestamps and ensuring the
 * referenced crawl source and schedule remain valid during the update process.
 *
 * Related operations include endpoints for retrieving crawl job details and
 * managing crawl attempts.
 *
 * Expected behavior includes returning the updated crawl job resource upon
 * success or appropriate error messages on failure.
 *
 * @param props.connection
 * @param props.id Unique identifier of the crawl job to update
 * @param props.body Update data for crawl job
 * @path /politicalNewsCrawler/guest/crawlJobs/:id
 * @accessor api.functional.politicalNewsCrawler.guest.crawlJobs.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the crawl job to update */
    id: string & tags.Format<"uuid">;

    /** Update data for crawl job */
    body: IPoliticalNewsCrawlerCrawlJob.IUpdate;
  };
  export type Body = IPoliticalNewsCrawlerCrawlJob.IUpdate;
  export type Response = IPoliticalNewsCrawlerCrawlJob;

  export const METADATA = {
    method: "PUT",
    path: "/politicalNewsCrawler/guest/crawlJobs/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/politicalNewsCrawler/guest/crawlJobs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IPoliticalNewsCrawlerCrawlJob =>
    typia.random<IPoliticalNewsCrawlerCrawlJob>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Erase a crawl job by ID.
 *
 * Permanently remove a crawl job by its unique ID. This operation deletes the
 * record from the database and disables further scheduled crawling for the
 * associated crawl source and schedule. The deletion is irreversible.
 *
 * Security considerations: this endpoint requires guest role authorization as
 * per system role configuration.
 *
 * Related operations include updating crawl job details and managing crawl
 * attempts.
 *
 * Expected behavior is the complete removal of the job and returning no
 * response body upon success.
 *
 * @param props.connection
 * @param props.id Unique identifier of the crawl job to remove
 * @path /politicalNewsCrawler/guest/crawlJobs/:id
 * @accessor api.functional.politicalNewsCrawler.guest.crawlJobs.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the crawl job to remove */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/politicalNewsCrawler/guest/crawlJobs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/politicalNewsCrawler/guest/crawlJobs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
