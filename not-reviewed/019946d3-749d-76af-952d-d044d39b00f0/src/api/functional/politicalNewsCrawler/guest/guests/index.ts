import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPoliticalNewsCrawlerGuests } from "../../../../structures/IPoliticalNewsCrawlerGuests";
import { IPageIPoliticalNewsCrawlerGuests } from "../../../../structures/IPageIPoliticalNewsCrawlerGuests";

/**
 * Search and retrieve filtered, paginated political news crawler guests.
 *
 * Retrieve a filtered, sorted, and paginated list of political news crawler
 * guest users.
 *
 * Guests are unauthenticated visitors recorded by IP, user-agent, and
 * timestamps. This operation allows search filtering on these attributes and
 * supports efficient pagination and sort ordering.
 *
 * Security restricts this to administrator-level access to protect user
 * privacy.
 *
 * The response contains a paginated list of guest summaries matching the
 * filters.
 *
 * Errors may arise from invalid criteria or pagination parameters.
 *
 * No modifications are made to guest records here, this is a read-only
 * operation.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for guests
 * @path /politicalNewsCrawler/guest/guests
 * @accessor api.functional.politicalNewsCrawler.guest.guests.search
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /** Search criteria and pagination parameters for guests */
    body: IPoliticalNewsCrawlerGuests.IRequest;
  };
  export type Body = IPoliticalNewsCrawlerGuests.IRequest;
  export type Response = IPageIPoliticalNewsCrawlerGuests.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/politicalNewsCrawler/guest/guests",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/politicalNewsCrawler/guest/guests";
  export const random = (): IPageIPoliticalNewsCrawlerGuests.ISummary =>
    typia.random<IPageIPoliticalNewsCrawlerGuests.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific guest user by ID.
 *
 * Retrieve information about a specific guest user identified by guestId in the
 * political_news_crawler_guests table.
 *
 * This operation returns guest details including IP address and user agent
 * string, as well as timestamps for creation and last update.
 *
 * Security considerations: this endpoint is public and provides read-only
 * access to guest metadata only. No sensitive data or authentication details
 * are exposed.
 *
 * Related operations include listing all guest users and managing crawl jobs.
 *
 * Errors will be returned if guestId does not exist.
 *
 * @param props.connection
 * @param props.guestId Unique identifier of the guest user
 * @path /politicalNewsCrawler/guest/guests/:guestId
 * @accessor api.functional.politicalNewsCrawler.guest.guests.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the guest user */
    guestId: string & tags.Format<"uuid">;
  };
  export type Response = IPoliticalNewsCrawlerGuests;

  export const METADATA = {
    method: "GET",
    path: "/politicalNewsCrawler/guest/guests/:guestId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/politicalNewsCrawler/guest/guests/${encodeURIComponent(props.guestId ?? "null")}`;
  export const random = (): IPoliticalNewsCrawlerGuests =>
    typia.random<IPoliticalNewsCrawlerGuests>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("guestId")(() => typia.assert(props.guestId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
