import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPoliticalNewsCrawlerProcessingMetadataArray } from "../../../../../structures/IPoliticalNewsCrawlerProcessingMetadataArray";
import { IPoliticalNewsCrawlerProcessingMetadataICreate } from "../../../../../structures/IPoliticalNewsCrawlerProcessingMetadataICreate";
import { IPoliticalNewsCrawlerProcessingMetadata } from "../../../../../structures/IPoliticalNewsCrawlerProcessingMetadata";
import { IPoliticalNewsCrawlerProcessingMetadataIUpdateArray } from "../../../../../structures/IPoliticalNewsCrawlerProcessingMetadataIUpdateArray";

/**
 * Retrieve metadata list for an LLM job.
 *
 * Retrieve the list of metadata associated with a particular LLM job. This
 * metadata includes key/value pairs that provide additional information about
 * the LLM processing context and parameters used.
 *
 * Only public access (guest role) as per system design.
 *
 * The request uses no body but uses the LLM job ID as a path parameter.
 *
 * Pagination or filtering may be implemented in the future.
 *
 * Response contains an array of metadata entries with fields such as
 * metadata_key and metadata_value.
 *
 * @param props.connection
 * @param props.llmJobId ID of the target LLM job
 * @path /politicalNewsCrawler/guest/llmJobs/:llmJobId/metadata
 * @accessor api.functional.politicalNewsCrawler.guest.llmJobs.metadata.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
      );
}
export namespace index {
  export type Props = {
    /** ID of the target LLM job */
    llmJobId: string;
  };
  export type Response = IPoliticalNewsCrawlerProcessingMetadataArray;

  export const METADATA = {
    method: "GET",
    path: "/politicalNewsCrawler/guest/llmJobs/:llmJobId/metadata",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/politicalNewsCrawler/guest/llmJobs/${encodeURIComponent(props.llmJobId ?? "null")}/metadata`;
  export const random = (): IPoliticalNewsCrawlerProcessingMetadataArray =>
    typia.random<IPoliticalNewsCrawlerProcessingMetadataArray>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("llmJobId")(() => typia.assert(props.llmJobId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create new metadata record for LLM job.
 *
 * Create a new processing metadata record associated with the specified LLM
 * job. Metadata records consist of key-value pairs representing additional
 * context or parameters for the LLM processing.
 *
 * The LLM job ID is specified as a path parameter.
 *
 * The request body must include metadata_key and metadata_value.
 *
 * Upon success, the full metadata record including creation timestamps is
 * returned.
 *
 * The API is publicly accessible (guest role) according to system design.
 *
 * @param props.connection
 * @param props.llmJobId ID of the target LLM job
 * @param props.body Metadata creation data
 * @path /politicalNewsCrawler/guest/llmJobs/:llmJobId/metadata
 * @accessor api.functional.politicalNewsCrawler.guest.llmJobs.metadata.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** ID of the target LLM job */
    llmJobId: string;

    /** Metadata creation data */
    body: IPoliticalNewsCrawlerProcessingMetadataICreate;
  };
  export type Body = IPoliticalNewsCrawlerProcessingMetadataICreate;
  export type Response = IPoliticalNewsCrawlerProcessingMetadata;

  export const METADATA = {
    method: "POST",
    path: "/politicalNewsCrawler/guest/llmJobs/:llmJobId/metadata",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/politicalNewsCrawler/guest/llmJobs/${encodeURIComponent(props.llmJobId ?? "null")}/metadata`;
  export const random = (): IPoliticalNewsCrawlerProcessingMetadata =>
    typia.random<IPoliticalNewsCrawlerProcessingMetadata>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("llmJobId")(() => typia.assert(props.llmJobId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update processing metadata records for an LLM job.
 *
 * Update one or multiple processing metadata records associated with the
 * specified LLM job. This operation supports partial or full updates and batch
 * modifications.
 *
 * Uses the LLM job ID as a path parameter.
 *
 * The request body should contain an array of metadata entries with their IDs
 * and updated key/value pairs.
 *
 * Returns the updated list of metadata records.
 *
 * This API is accessible publicly under guest role as per system design.
 *
 * @param props.connection
 * @param props.llmJobId ID of the target LLM job
 * @param props.body Metadata update data
 * @path /politicalNewsCrawler/guest/llmJobs/:llmJobId/metadata
 * @accessor api.functional.politicalNewsCrawler.guest.llmJobs.metadata.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** ID of the target LLM job */
    llmJobId: string;

    /** Metadata update data */
    body: IPoliticalNewsCrawlerProcessingMetadataIUpdateArray;
  };
  export type Body = IPoliticalNewsCrawlerProcessingMetadataIUpdateArray;
  export type Response = IPoliticalNewsCrawlerProcessingMetadataArray;

  export const METADATA = {
    method: "PATCH",
    path: "/politicalNewsCrawler/guest/llmJobs/:llmJobId/metadata",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/politicalNewsCrawler/guest/llmJobs/${encodeURIComponent(props.llmJobId ?? "null")}/metadata`;
  export const random = (): IPoliticalNewsCrawlerProcessingMetadataArray =>
    typia.random<IPoliticalNewsCrawlerProcessingMetadataArray>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("llmJobId")(() => typia.assert(props.llmJobId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific LLM job metadata record.
 *
 * This endpoint allows client to update the key-value metadata information for
 * a particular LLM processing job. This operation requires authentication with
 * the role 'guest'. Only the specified metadata record is updated with new key
 * and value provided in the request body.
 *
 * This metadata is crucial for enriching the LLM job processing context and
 * supporting downstream analysis.
 *
 * The metadata belongs to the political_news_crawler_processing_metadata model,
 * ensuring key uniqueness for the associated LLM job.
 *
 * Proper validation ensures keys and values are appropriately updated.
 *
 * @param props.connection
 * @param props.llmJobId Target LLM job's ID
 * @param props.id Metadata record ID to update
 * @param props.body Updated metadata key-value pair
 * @path /politicalNewsCrawler/guest/llmJobs/:llmJobId/metadata/:id
 * @accessor api.functional.politicalNewsCrawler.guest.llmJobs.metadata.updateMetadata
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateMetadata(
  connection: IConnection,
  props: updateMetadata.Props,
): Promise<updateMetadata.Response> {
  return true === connection.simulate
    ? updateMetadata.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateMetadata.METADATA,
          path: updateMetadata.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateMetadata {
  export type Props = {
    /** Target LLM job's ID */
    llmJobId: string & tags.Format<"uuid">;

    /** Metadata record ID to update */
    id: string & tags.Format<"uuid">;

    /** Updated metadata key-value pair */
    body: IPoliticalNewsCrawlerProcessingMetadata.IUpdate;
  };
  export type Body = IPoliticalNewsCrawlerProcessingMetadata.IUpdate;
  export type Response = IPoliticalNewsCrawlerProcessingMetadata;

  export const METADATA = {
    method: "PUT",
    path: "/politicalNewsCrawler/guest/llmJobs/:llmJobId/metadata/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/politicalNewsCrawler/guest/llmJobs/${encodeURIComponent(props.llmJobId ?? "null")}/metadata/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IPoliticalNewsCrawlerProcessingMetadata =>
    typia.random<IPoliticalNewsCrawlerProcessingMetadata>();
  export const simulate = (
    connection: IConnection,
    props: updateMetadata.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateMetadata.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("llmJobId")(() => typia.assert(props.llmJobId));
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specific LLM job metadata record.
 *
 * This endpoint permanently removes a metadata record associated with a given
 * LLM job. Authorization with the 'guest' role is required to perform this
 * delete operation. The operation ensures that the specified metadata entry is
 * erased from the system, cleaning up auxiliary processing information as
 * necessary.
 *
 * The operation directly affects the political_news_crawler_processing_metadata
 * model and is critical for metadata lifecycle management.
 *
 * @param props.connection
 * @param props.llmJobId Target LLM job's ID
 * @param props.id Metadata record ID to delete
 * @path /politicalNewsCrawler/guest/llmJobs/:llmJobId/metadata/:id
 * @accessor api.functional.politicalNewsCrawler.guest.llmJobs.metadata.eraseMetadata
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseMetadata(
  connection: IConnection,
  props: eraseMetadata.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseMetadata.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseMetadata.METADATA,
          path: eraseMetadata.path(props),
          status: null,
        },
      );
}
export namespace eraseMetadata {
  export type Props = {
    /** Target LLM job's ID */
    llmJobId: string & tags.Format<"uuid">;

    /** Metadata record ID to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/politicalNewsCrawler/guest/llmJobs/:llmJobId/metadata/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/politicalNewsCrawler/guest/llmJobs/${encodeURIComponent(props.llmJobId ?? "null")}/metadata/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseMetadata.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseMetadata.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("llmJobId")(() => typia.assert(props.llmJobId));
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
