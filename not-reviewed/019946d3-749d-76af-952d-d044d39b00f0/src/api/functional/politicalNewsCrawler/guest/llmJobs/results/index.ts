import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPoliticalNewsCrawlerLlmJobResult } from "../../../../../structures/IPoliticalNewsCrawlerLlmJobResult";
import { IPageIPoliticalNewsCrawlerLlmJobResult } from "../../../../../structures/IPageIPoliticalNewsCrawlerLlmJobResult";

/**
 * Create a new LLM job result for the given LLM job. This operation stores
 * processed textual content generated by the large language model, categorized
 * by content type such as summaries, highlights, or analysis. It accepts the
 * content payload along with metadata linking to the parent LLM job.
 *
 * Post-creation, clients typically retrieve the new result's details via the
 * detailed get operation. The LLM job identified by llmJobId must exist before
 * successful creation. Validation rules enforce content type adherence and text
 * length constraints.
 *
 * Authorization restricts this operation to authenticated users with permission
 * to add processed content results.
 *
 * @param props.connection
 * @param props.llmJobId Unique identifier of the target LLM job
 * @param props.body Information required to create an LLM job result
 * @path /politicalNewsCrawler/guest/llmJobs/:llmJobId/results
 * @accessor api.functional.politicalNewsCrawler.guest.llmJobs.results.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the target LLM job */
    llmJobId: string & tags.Format<"uuid">;

    /** Information required to create an LLM job result */
    body: IPoliticalNewsCrawlerLlmJobResult.ICreate;
  };
  export type Body = IPoliticalNewsCrawlerLlmJobResult.ICreate;
  export type Response = IPoliticalNewsCrawlerLlmJobResult;

  export const METADATA = {
    method: "POST",
    path: "/politicalNewsCrawler/guest/llmJobs/:llmJobId/results",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/politicalNewsCrawler/guest/llmJobs/${encodeURIComponent(props.llmJobId ?? "null")}/results`;
  export const random = (): IPoliticalNewsCrawlerLlmJobResult =>
    typia.random<IPoliticalNewsCrawlerLlmJobResult>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("llmJobId")(() => typia.assert(props.llmJobId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Fetch paginated list of LLM results for a given LLM job.
 *
 * Retrieve a filtered and paginated list of LLM results generated from the
 * specified LLM job. This operation allows clients to query processed content
 * outputs including summaries, highlights, and analysis produced by the large
 * language model for political news data. The results are scoped to the LLM job
 * identified by the llmJobId path parameter.
 *
 * The operation respects user access constraints and returns results with
 * essential content metadata, including content type and timestamps. Pagination
 * and sorting options enable flexible client-side querying.
 *
 * This endpoint interacts directly with the political_news_crawler_llm_results
 * table, ensuring that only results belonging to the given LLM job are
 * included. It is primarily a read-only operation supporting data browsing by
 * authorized clients.
 *
 * Clients should first retrieve the list using this endpoint before accessing
 * details of specific results via the detailed get operation. Proper error
 * handling should cover cases where the LLM job does not exist or has no
 * associated results.
 *
 * @param props.connection
 * @param props.llmJobId Unique identifier of the target LLM job
 * @param props.body Search criteria and pagination parameters for LLM results
 *   filtering
 * @path /politicalNewsCrawler/guest/llmJobs/:llmJobId/results
 * @accessor api.functional.politicalNewsCrawler.guest.llmJobs.results.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the target LLM job */
    llmJobId: string & tags.Format<"uuid">;

    /** Search criteria and pagination parameters for LLM results filtering */
    body: IPoliticalNewsCrawlerLlmJobResult.IRequest;
  };
  export type Body = IPoliticalNewsCrawlerLlmJobResult.IRequest;
  export type Response = IPageIPoliticalNewsCrawlerLlmJobResult;

  export const METADATA = {
    method: "PATCH",
    path: "/politicalNewsCrawler/guest/llmJobs/:llmJobId/results",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/politicalNewsCrawler/guest/llmJobs/${encodeURIComponent(props.llmJobId ?? "null")}/results`;
  export const random = (): IPageIPoliticalNewsCrawlerLlmJobResult =>
    typia.random<IPageIPoliticalNewsCrawlerLlmJobResult>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("llmJobId")(() => typia.assert(props.llmJobId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a specific LLM job result identified by its
 * unique ID. This provides comprehensive insight into the processed content
 * generated by large language model post-processing tasks for political news
 * data. It includes content metadata, textual content, generation timestamp,
 * and audit timestamps.
 *
 * The path parameter llmJobId references the parent LLM job, ensuring context
 * and scope. Authorization restricts access to authenticated users who have
 * permissions to view this detailed processed content.
 *
 * This endpoint is typically used after fetching a list of LLM results to
 * obtain full details for display or further analysis.
 *
 * @param props.connection
 * @param props.llmJobId Unique identifier of the target LLM job
 * @param props.id Unique identifier of the LLM job result
 * @path /politicalNewsCrawler/guest/llmJobs/:llmJobId/results/:id
 * @accessor api.functional.politicalNewsCrawler.guest.llmJobs.results.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target LLM job */
    llmJobId: string & tags.Format<"uuid">;

    /** Unique identifier of the LLM job result */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IPoliticalNewsCrawlerLlmJobResult;

  export const METADATA = {
    method: "GET",
    path: "/politicalNewsCrawler/guest/llmJobs/:llmJobId/results/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/politicalNewsCrawler/guest/llmJobs/${encodeURIComponent(props.llmJobId ?? "null")}/results/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IPoliticalNewsCrawlerLlmJobResult =>
    typia.random<IPoliticalNewsCrawlerLlmJobResult>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("llmJobId")(() => typia.assert(props.llmJobId));
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing LLM job result specified by its ID for the given LLM job.
 * This endpoint modifies textual processed content, which may include
 * summaries, highlights, or political news analyses generated by LLM processing
 * tasks.
 *
 * The operation supports validation of input content type and ensures that the
 * linked LLM job and result exist prior to update. Authorization check ensures
 * only permitted users can modify these processed results.
 *
 * Successful updates return the updated full resource representation.
 *
 * @param props.connection
 * @param props.llmJobId Unique identifier of the target LLM job
 * @param props.id Unique identifier of the LLM job result
 * @param props.body Information required to update an LLM job result
 * @path /politicalNewsCrawler/guest/llmJobs/:llmJobId/results/:id
 * @accessor api.functional.politicalNewsCrawler.guest.llmJobs.results.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target LLM job */
    llmJobId: string & tags.Format<"uuid">;

    /** Unique identifier of the LLM job result */
    id: string & tags.Format<"uuid">;

    /** Information required to update an LLM job result */
    body: IPoliticalNewsCrawlerLlmJobResult.IUpdate;
  };
  export type Body = IPoliticalNewsCrawlerLlmJobResult.IUpdate;
  export type Response = IPoliticalNewsCrawlerLlmJobResult;

  export const METADATA = {
    method: "PUT",
    path: "/politicalNewsCrawler/guest/llmJobs/:llmJobId/results/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/politicalNewsCrawler/guest/llmJobs/${encodeURIComponent(props.llmJobId ?? "null")}/results/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IPoliticalNewsCrawlerLlmJobResult =>
    typia.random<IPoliticalNewsCrawlerLlmJobResult>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("llmJobId")(() => typia.assert(props.llmJobId));
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specific LLM result by LLM job ID and result ID.
 *
 * This API endpoint allows authorized users to permanently delete a specific
 * LLM generated result record associated with a given LLM job. The resource is
 * identified by the path parameters llmJobId and id corresponding to the LLM
 * job and the result respectively.
 *
 * This deletion operation permanently removes the record from
 * political_news_crawler_llm_results table and cannot be undone.
 *
 * Only public access (guest role) is granted as per system design.
 *
 * No request body is needed as parameters in the path fully specify the target
 * resource.
 *
 * @param props.connection
 * @param props.llmJobId ID of the associated LLM job
 * @param props.id ID of the LLM result to delete
 * @path /politicalNewsCrawler/guest/llmJobs/:llmJobId/results/:id
 * @accessor api.functional.politicalNewsCrawler.guest.llmJobs.results.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** ID of the associated LLM job */
    llmJobId: string;

    /** ID of the LLM result to delete */
    id: string;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/politicalNewsCrawler/guest/llmJobs/:llmJobId/results/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/politicalNewsCrawler/guest/llmJobs/${encodeURIComponent(props.llmJobId ?? "null")}/results/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("llmJobId")(() => typia.assert(props.llmJobId));
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
