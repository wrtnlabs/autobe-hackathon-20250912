import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPoliticalNewsCrawlerCrawlAlertRequest } from "../../../structures/IPoliticalNewsCrawlerCrawlAlertRequest";
import { IPageIPoliticalNewsCrawlerCrawlAlert } from "../../../structures/IPageIPoliticalNewsCrawlerCrawlAlert";

/**
 * Search and retrieve paginated crawl alert events.
 *
 * Retrieve filtered and paginated crawl alert events generated by crawl
 * sources.
 *
 * Facilitates monitoring of crawl operation health by reporting bans, errors,
 * or warnings.
 *
 * Accepts search and pagination parameters to manage potentially large alert
 * data volumes.
 *
 * Data is sourced from the political_news_crawler_crawl_alerts table, including
 * alert metadata and associated crawl source references.
 *
 * Security is open for public access, enabling transparent operational insight.
 *
 * Clients can filter alerts by severity, type, and crawl source as needed.
 *
 * Returns a paginated collection of alert records matching criteria.
 *
 * @param props.connection
 * @param props.body Search filters and pagination parameters for crawl alerts
 *   retrieval
 * @path /politicalNewsCrawler/crawlAlerts
 * @accessor api.functional.politicalNewsCrawler.crawlAlerts.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search filters and pagination parameters for crawl alerts retrieval */
    body: IPoliticalNewsCrawlerCrawlAlertRequest;
  };
  export type Body = IPoliticalNewsCrawlerCrawlAlertRequest;
  export type Response = IPageIPoliticalNewsCrawlerCrawlAlert;

  export const METADATA = {
    method: "PATCH",
    path: "/politicalNewsCrawler/crawlAlerts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/politicalNewsCrawler/crawlAlerts";
  export const random = (): IPageIPoliticalNewsCrawlerCrawlAlert =>
    typia.random<IPageIPoliticalNewsCrawlerCrawlAlert>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
