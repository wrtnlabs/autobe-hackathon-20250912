import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPoliticalNewsCrawlerPopularityScores } from "../../../../structures/IPoliticalNewsCrawlerPopularityScores";

/**
 * Retrieve a specific popularity score snapshot for a popular political topic.
 *
 * This operation returns detailed information about a specific popularity score
 * snapshot for a popular political topic. Users can retrieve the calculated
 * popularity score and decay factor applied at a certain snapshot time,
 * enabling insight into topic trend changes.
 *
 * Security and accessibility are unrestricted; this is a public endpoint
 * allowing read-only access. The response returns all stored properties,
 * including creation and update timestamps.
 *
 * Underlying data is stored in political_news_crawler_popularity_scores
 * referencing political_news_crawler_popular_topics, thus reflecting a
 * one-to-many relationship (one topic to many scores).
 *
 * Errors include invalid ID formats or non-existing records, typically
 * resulting in 404 not found responses.
 *
 * This GET endpoint does not require a request body and uniquely identifies the
 * score record by both popularTopicId and id path parameters.
 *
 * @param props.connection
 * @param props.popularTopicId Target popular topic's ID
 * @param props.id Specific popularity score record ID
 * @path /politicalNewsCrawler/popularTopics/:popularTopicId/popularityScores/:id
 * @accessor api.functional.politicalNewsCrawler.popularTopics.popularityScores.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Target popular topic's ID */
    popularTopicId: string;

    /** Specific popularity score record ID */
    id: string;
  };
  export type Response = IPoliticalNewsCrawlerPopularityScores;

  export const METADATA = {
    method: "GET",
    path: "/politicalNewsCrawler/popularTopics/:popularTopicId/popularityScores/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/politicalNewsCrawler/popularTopics/${encodeURIComponent(props.popularTopicId ?? "null")}/popularityScores/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IPoliticalNewsCrawlerPopularityScores =>
    typia.random<IPoliticalNewsCrawlerPopularityScores>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("popularTopicId")(() => typia.assert(props.popularTopicId));
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
