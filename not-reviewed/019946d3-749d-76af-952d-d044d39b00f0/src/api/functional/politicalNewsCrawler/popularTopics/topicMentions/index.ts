import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPoliticalNewsCrawlerTopicMentions } from "../../../../structures/IPoliticalNewsCrawlerTopicMentions";
import { IPageIPoliticalNewsCrawlerTopicMentions } from "../../../../structures/IPageIPoliticalNewsCrawlerTopicMentions";

/**
 * Search and retrieve topic mentions for a popular topic.
 *
 * Retrieve a list of topic mentions related to a specific popular political
 * topic. This operation accepts complex search criteria for filtering and
 * pagination to manage potentially large sets of mentions.
 *
 * This list enables clients to explore the contexts and individual news items
 * where the topic was referenced.
 *
 * The response includes summary information per mention, including mention
 * context snippets when available.
 *
 * No authentication or restriction is applied to this read-only endpoint.
 *
 * This PATCH endpoint requires a request body specifying search criteria and
 * returns a paginated list with essential summary data.
 *
 * @param props.connection
 * @param props.popularTopicId Target popular topic's ID
 * @param props.body Search criteria and pagination parameters for topic
 *   mentions filtering
 * @path /politicalNewsCrawler/popularTopics/:popularTopicId/topicMentions
 * @accessor api.functional.politicalNewsCrawler.popularTopics.topicMentions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Target popular topic's ID */
    popularTopicId: string;

    /**
     * Search criteria and pagination parameters for topic mentions
     * filtering
     */
    body: IPoliticalNewsCrawlerTopicMentions.IRequest;
  };
  export type Body = IPoliticalNewsCrawlerTopicMentions.IRequest;
  export type Response = IPageIPoliticalNewsCrawlerTopicMentions.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/politicalNewsCrawler/popularTopics/:popularTopicId/topicMentions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/politicalNewsCrawler/popularTopics/${encodeURIComponent(props.popularTopicId ?? "null")}/topicMentions`;
  export const random = (): IPageIPoliticalNewsCrawlerTopicMentions.ISummary =>
    typia.random<IPageIPoliticalNewsCrawlerTopicMentions.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("popularTopicId")(() => typia.assert(props.popularTopicId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a single topic mention detail.
 *
 * Get detailed data on a particular topic mention for a popular political
 * topic. Provides the mention context snippet and metadata for understanding
 * the mention occurrence.
 *
 * This is a read-only public operation without authentication.
 *
 * The response returns all properties of the topic mention record, including
 * creation and update timestamps.
 *
 * @param props.connection
 * @param props.popularTopicId Target popular topic's ID
 * @param props.id Target topic mention record ID
 * @path /politicalNewsCrawler/popularTopics/:popularTopicId/topicMentions/:id
 * @accessor api.functional.politicalNewsCrawler.popularTopics.topicMentions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Target popular topic's ID */
    popularTopicId: string;

    /** Target topic mention record ID */
    id: string;
  };
  export type Response = IPoliticalNewsCrawlerTopicMentions;

  export const METADATA = {
    method: "GET",
    path: "/politicalNewsCrawler/popularTopics/:popularTopicId/topicMentions/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/politicalNewsCrawler/popularTopics/${encodeURIComponent(props.popularTopicId ?? "null")}/topicMentions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IPoliticalNewsCrawlerTopicMentions =>
    typia.random<IPoliticalNewsCrawlerTopicMentions>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("popularTopicId")(() => typia.assert(props.popularTopicId));
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a topic mention record for a popular topic.
 *
 * Update an existing topic mention record associated with a popular topic.
 * Modifiable fields typically include mention context text.
 *
 * This PUT endpoint requires a full update payload matching the entity update
 * schema.
 *
 * No authentication or role is required as the endpoints are publicly open
 * read/write.
 *
 * Upon success, the updated entity is returned.
 *
 * @param props.connection
 * @param props.popularTopicId Target popular topic's ID
 * @param props.id Target topic mention record ID
 * @param props.body Updated topic mention data
 * @path /politicalNewsCrawler/popularTopics/:popularTopicId/topicMentions/:id
 * @accessor api.functional.politicalNewsCrawler.popularTopics.topicMentions.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Target popular topic's ID */
    popularTopicId: string;

    /** Target topic mention record ID */
    id: string;

    /** Updated topic mention data */
    body: IPoliticalNewsCrawlerTopicMentions.IUpdate;
  };
  export type Body = IPoliticalNewsCrawlerTopicMentions.IUpdate;
  export type Response = IPoliticalNewsCrawlerTopicMentions;

  export const METADATA = {
    method: "PUT",
    path: "/politicalNewsCrawler/popularTopics/:popularTopicId/topicMentions/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/politicalNewsCrawler/popularTopics/${encodeURIComponent(props.popularTopicId ?? "null")}/topicMentions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IPoliticalNewsCrawlerTopicMentions =>
    typia.random<IPoliticalNewsCrawlerTopicMentions>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("popularTopicId")(() => typia.assert(props.popularTopicId));
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a specific topic mention from a popular topic by ID.
 *
 * This endpoint allows soft deletion of a specific topic mention under a
 * specific popular topic by setting the deleted_at field.
 *
 * The 'popularTopicId' identifies the parent popular topic while 'id'
 * identifies the mention to logically remove.
 *
 * This operation does not physically delete the record but marks it as deleted
 * for audit and historical integrity.
 *
 * Clients should consider this logical deletion in their data filtering and
 * retrieval.
 *
 * The operation complements other endpoints for managing popular topics and
 * mentions, supporting moderation workflows.
 *
 * @param props.connection
 * @param props.popularTopicId Unique identifier of the popular topic
 * @param props.id Unique identifier of the topic mention to delete
 * @path /politicalNewsCrawler/popularTopics/:popularTopicId/topicMentions/:id
 * @accessor api.functional.politicalNewsCrawler.popularTopics.topicMentions.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the popular topic */
    popularTopicId: string & tags.Format<"uuid">;

    /** Unique identifier of the topic mention to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/politicalNewsCrawler/popularTopics/:popularTopicId/topicMentions/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/politicalNewsCrawler/popularTopics/${encodeURIComponent(props.popularTopicId ?? "null")}/topicMentions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("popularTopicId")(() => typia.assert(props.popularTopicId));
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
