import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPoliticalNewsCrawlerPopularTopics } from "../../../structures/IPoliticalNewsCrawlerPopularTopics";
import { IPageIPoliticalNewsCrawlerPopularTopics } from "../../../structures/IPageIPoliticalNewsCrawlerPopularTopics";
export * as popularityScores from "./popularityScores/index";
export * as topicMentions from "./topicMentions/index";

/**
 * Retrieve a list of popular political topics with filters and pagination.
 *
 * Retrieve a filtered and paginated list of popular political topics. Supports
 * filtering parameters for title keywords and sorting by creation dates or
 * popularity metrics.
 *
 * This API endpoint is public and requires no authentication.
 *
 * Data is sourced from the political_news_crawler_popular_topics model,
 * ensuring relevance, currency, and accuracy.
 *
 * Supports efficient pagination and search to facilitate frontend consumption.
 *
 * @param props.connection
 * @param props.body Search and pagination parameters for popular topics
 * @path /politicalNewsCrawler/popularTopics
 * @accessor api.functional.politicalNewsCrawler.popularTopics.searchPopularTopics
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function searchPopularTopics(
  connection: IConnection,
  props: searchPopularTopics.Props,
): Promise<searchPopularTopics.Response> {
  return true === connection.simulate
    ? searchPopularTopics.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...searchPopularTopics.METADATA,
          path: searchPopularTopics.path(),
          status: null,
        },
        props.body,
      );
}
export namespace searchPopularTopics {
  export type Props = {
    /** Search and pagination parameters for popular topics */
    body: IPoliticalNewsCrawlerPopularTopics.IRequest;
  };
  export type Body = IPoliticalNewsCrawlerPopularTopics.IRequest;
  export type Response = IPageIPoliticalNewsCrawlerPopularTopics;

  export const METADATA = {
    method: "PATCH",
    path: "/politicalNewsCrawler/popularTopics",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/politicalNewsCrawler/popularTopics";
  export const random = (): IPageIPoliticalNewsCrawlerPopularTopics =>
    typia.random<IPageIPoliticalNewsCrawlerPopularTopics>();
  export const simulate = (
    connection: IConnection,
    props: searchPopularTopics.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: searchPopularTopics.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific popular political topic by ID.
 *
 * Get detailed information for a single popular political topic by specifying
 * its unique ID in the path parameter.
 *
 * The response includes topic code, title, description, and timestamps.
 *
 * This API endpoint is public and requires no authentication.
 *
 * Supports frontend client needs for detailed topic information display.
 *
 * @param props.connection
 * @param props.id Unique identifier of the popular political topic
 * @path /politicalNewsCrawler/popularTopics/:id
 * @accessor api.functional.politicalNewsCrawler.popularTopics.atPopularTopic
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atPopularTopic(
  connection: IConnection,
  props: atPopularTopic.Props,
): Promise<atPopularTopic.Response> {
  return true === connection.simulate
    ? atPopularTopic.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atPopularTopic.METADATA,
          path: atPopularTopic.path(props),
          status: null,
        },
      );
}
export namespace atPopularTopic {
  export type Props = {
    /** Unique identifier of the popular political topic */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IPoliticalNewsCrawlerPopularTopics;

  export const METADATA = {
    method: "GET",
    path: "/politicalNewsCrawler/popularTopics/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/politicalNewsCrawler/popularTopics/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IPoliticalNewsCrawlerPopularTopics =>
    typia.random<IPoliticalNewsCrawlerPopularTopics>();
  export const simulate = (
    connection: IConnection,
    props: atPopularTopic.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atPopularTopic.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
