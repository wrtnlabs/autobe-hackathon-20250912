import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPoliticalNewsCrawlerProcessingAlert } from "../../../structures/IPoliticalNewsCrawlerProcessingAlert";
import { IPageIPoliticalNewsCrawlerProcessingAlert } from "../../../structures/IPageIPoliticalNewsCrawlerProcessingAlert";

/**
 * Create a new processing alert record to log backend processing issues such as
 * LLM failures or queue problems.
 *
 * This operation records alert details including alert_type, message, and
 * severity level in the system.
 *
 * Security considerations: this endpoint is publicly exposed without
 * authentication, but typically would be called internally by system
 * components.
 *
 * Validation rules ensure required fields are provided with allowed severity
 * values like 'info', 'warning', and 'critical'.
 *
 * The newly created alert record is returned including timestamps and
 * identifier.
 *
 * Related operations include listing processing alerts and retrieving
 * individual alert details.
 *
 * Proper use of this endpoint ensures timely detection and notification of
 * backend processing problems.
 *
 * @param props.connection
 * @param props.body Data required to create a new processing alert
 * @path /politicalNewsCrawler/processingAlerts
 * @accessor api.functional.politicalNewsCrawler.processingAlerts.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Data required to create a new processing alert */
    body: IPoliticalNewsCrawlerProcessingAlert.ICreate;
  };
  export type Body = IPoliticalNewsCrawlerProcessingAlert.ICreate;
  export type Response = IPoliticalNewsCrawlerProcessingAlert;

  export const METADATA = {
    method: "POST",
    path: "/politicalNewsCrawler/processingAlerts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/politicalNewsCrawler/processingAlerts";
  export const random = (): IPoliticalNewsCrawlerProcessingAlert =>
    typia.random<IPoliticalNewsCrawlerProcessingAlert>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve list of processing alerts with filtering and pagination.
 *
 * Retrieve a paginated list of processing alerts for the politicalNewsCrawler
 * service.
 *
 * This operation provides filtering capabilities to search alerts by type,
 * severity, time ranges, and message content.
 *
 * Security considerations: this endpoint is publicly accessible without
 * authentication, reflecting the service's open design.
 *
 * Each alert record originates from the
 * political_news_crawler_processing_alerts table and includes fields such as
 * alert_type, message, severity, created_at, and updated_at.
 *
 * The endpoint supports pagination and sorting to efficiently manage
 * potentially large alert data sets.
 *
 * Error handling includes returning appropriate responses for invalid filter
 * parameters or server issues.
 *
 * Related operations include retrieving individual alerts by ID for detailed
 * inspection.
 *
 * This operation adheres to business rules that ensure alerts accurately
 * reflect backend processing issues and provide operational visibility.
 *
 * @param props.connection
 * @param props.body Filtering criteria and pagination parameters for processing
 *   alerts
 * @path /politicalNewsCrawler/processingAlerts
 * @accessor api.functional.politicalNewsCrawler.processingAlerts.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filtering criteria and pagination parameters for processing alerts */
    body: IPoliticalNewsCrawlerProcessingAlert.IRequest;
  };
  export type Body = IPoliticalNewsCrawlerProcessingAlert.IRequest;
  export type Response = IPageIPoliticalNewsCrawlerProcessingAlert;

  export const METADATA = {
    method: "PATCH",
    path: "/politicalNewsCrawler/processingAlerts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/politicalNewsCrawler/processingAlerts";
  export const random = (): IPageIPoliticalNewsCrawlerProcessingAlert =>
    typia.random<IPageIPoliticalNewsCrawlerProcessingAlert>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed processing alert information by ID.
 *
 * Retrieve detailed information for a specific processing alert identified by
 * its unique ID.
 *
 * This operation returns a single alert record from the
 * political_news_crawler_processing_alerts table including all descriptive
 * fields.
 *
 * Security considerations: this endpoint is publicly accessible without
 * authentication.
 *
 * It allows operators and support personnel to view complete details for
 * diagnosing and responding to alert events.
 *
 * If the specified alert ID does not exist, the operation returns a not found
 * error.
 *
 * Related operations include the listing endpoint that returns multiple alerts
 * with filtering.
 *
 * This operation supports business requirements for transparency and
 * operational health monitoring.
 *
 * @param props.connection
 * @param props.id Unique identifier of the processing alert
 * @path /politicalNewsCrawler/processingAlerts/:id
 * @accessor api.functional.politicalNewsCrawler.processingAlerts.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the processing alert */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IPoliticalNewsCrawlerProcessingAlert;

  export const METADATA = {
    method: "GET",
    path: "/politicalNewsCrawler/processingAlerts/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/politicalNewsCrawler/processingAlerts/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IPoliticalNewsCrawlerProcessingAlert =>
    typia.random<IPoliticalNewsCrawlerProcessingAlert>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing processing alert record.
 *
 * Update an existing processing alert identified by its ID.
 *
 * This operation accepts updated alert_type, message, and severity fields.
 *
 * Security considerations: publicly accessible with no authentication.
 *
 * If the specified ID does not exist, the operation returns an error.
 *
 * Related operations include creating new alerts and listing alerts with
 * filters.
 *
 * Updating alerts is necessary for accurate status tracking, corrections, or
 * additional information inclusion.
 *
 * @param props.connection
 * @param props.id Unique identifier of the processing alert to update
 * @param props.body Data required to update processing alert information
 * @path /politicalNewsCrawler/processingAlerts/:id
 * @accessor api.functional.politicalNewsCrawler.processingAlerts.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the processing alert to update */
    id: string & tags.Format<"uuid">;

    /** Data required to update processing alert information */
    body: IPoliticalNewsCrawlerProcessingAlert.IUpdate;
  };
  export type Body = IPoliticalNewsCrawlerProcessingAlert.IUpdate;
  export type Response = IPoliticalNewsCrawlerProcessingAlert;

  export const METADATA = {
    method: "PUT",
    path: "/politicalNewsCrawler/processingAlerts/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/politicalNewsCrawler/processingAlerts/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IPoliticalNewsCrawlerProcessingAlert =>
    typia.random<IPoliticalNewsCrawlerProcessingAlert>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
