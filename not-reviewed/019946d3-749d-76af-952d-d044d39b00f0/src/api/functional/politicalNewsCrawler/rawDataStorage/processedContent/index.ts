import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPoliticalNewsCrawlerProcessedContent } from "../../../../structures/IPoliticalNewsCrawlerProcessedContent";
import { IPageIPoliticalNewsCrawlerProcessedContent } from "../../../../structures/IPageIPoliticalNewsCrawlerProcessedContent";

/**
 * Retrieve filtered, paginated list of processed content for a raw data record.
 *
 * This endpoint allows clients to search and retrieve processed LLM-generated
 * content linked to a specific raw data storage record. The input request body
 * includes filtering and pagination parameters to control the result set.
 * Processed content types include summaries, highlights, and analysis results.
 * Clients use this endpoint to obtain enriched news content derived from raw
 * crawled data.
 *
 * The response returns a paginated list of processed content summaries
 * including essential metadata suitable for display purposes. This operation is
 * publicly accessible requiring no authentication.
 *
 * Path parameter rawDataStorageId identifies the raw data record to which the
 * processed content belongs. Filters in the request body allow clients to
 * target specific content types, date ranges, and pagination preferences.
 *
 * Errors for invalid IDs or malformed requests will be returned appropriately.
 *
 * This operation links directly to the political_news_crawler_processed_content
 * table.
 *
 * @param props.connection
 * @param props.rawDataStorageId Unique identifier of the raw data storage
 *   record
 * @param props.body Search criteria and pagination for processed content
 *   filtering
 * @path /politicalNewsCrawler/rawDataStorage/:rawDataStorageId/processedContent
 * @accessor api.functional.politicalNewsCrawler.rawDataStorage.processedContent.searchProcessedContent
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function searchProcessedContent(
  connection: IConnection,
  props: searchProcessedContent.Props,
): Promise<searchProcessedContent.Response> {
  return true === connection.simulate
    ? searchProcessedContent.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...searchProcessedContent.METADATA,
          path: searchProcessedContent.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace searchProcessedContent {
  export type Props = {
    /** Unique identifier of the raw data storage record */
    rawDataStorageId: string & tags.Format<"uuid">;

    /** Search criteria and pagination for processed content filtering */
    body: IPoliticalNewsCrawlerProcessedContent.IRequest;
  };
  export type Body = IPoliticalNewsCrawlerProcessedContent.IRequest;
  export type Response = IPageIPoliticalNewsCrawlerProcessedContent.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/politicalNewsCrawler/rawDataStorage/:rawDataStorageId/processedContent",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/politicalNewsCrawler/rawDataStorage/${encodeURIComponent(props.rawDataStorageId ?? "null")}/processedContent`;
  export const random =
    (): IPageIPoliticalNewsCrawlerProcessedContent.ISummary =>
      typia.random<IPageIPoliticalNewsCrawlerProcessedContent.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: searchProcessedContent.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: searchProcessedContent.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("rawDataStorageId")(() =>
        typia.assert(props.rawDataStorageId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed processed content information by raw data and content IDs.
 *
 * This API endpoint fetches complete details of a specified processed content
 * item associated with raw crawled data. It requires valid path parameters to
 * identify the raw data record and the processed content record individually.
 *
 * The response includes comprehensive information such as the full text of the
 * processed content, content type (summary, highlight, analysis), generation
 * timestamp, and audit timestamps. This detailed data supports rich client
 * display and further data processing.
 *
 * The endpoint is publicly accessible with no authentication requirements.
 *
 * Errors such as missing or invalid IDs are handled via standard HTTP error
 * codes.
 *
 * @param props.connection
 * @param props.rawDataStorageId Unique identifier of the raw data storage
 *   record
 * @param props.processedContentId Unique identifier of the processed content
 *   record
 * @path /politicalNewsCrawler/rawDataStorage/:rawDataStorageId/processedContent/:processedContentId
 * @accessor api.functional.politicalNewsCrawler.rawDataStorage.processedContent.atProcessedContent
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atProcessedContent(
  connection: IConnection,
  props: atProcessedContent.Props,
): Promise<atProcessedContent.Response> {
  return true === connection.simulate
    ? atProcessedContent.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atProcessedContent.METADATA,
          path: atProcessedContent.path(props),
          status: null,
        },
      );
}
export namespace atProcessedContent {
  export type Props = {
    /** Unique identifier of the raw data storage record */
    rawDataStorageId: string & tags.Format<"uuid">;

    /** Unique identifier of the processed content record */
    processedContentId: string & tags.Format<"uuid">;
  };
  export type Response = IPoliticalNewsCrawlerProcessedContent;

  export const METADATA = {
    method: "GET",
    path: "/politicalNewsCrawler/rawDataStorage/:rawDataStorageId/processedContent/:processedContentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/politicalNewsCrawler/rawDataStorage/${encodeURIComponent(props.rawDataStorageId ?? "null")}/processedContent/${encodeURIComponent(props.processedContentId ?? "null")}`;
  export const random = (): IPoliticalNewsCrawlerProcessedContent =>
    typia.random<IPoliticalNewsCrawlerProcessedContent>();
  export const simulate = (
    connection: IConnection,
    props: atProcessedContent.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atProcessedContent.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("rawDataStorageId")(() =>
        typia.assert(props.rawDataStorageId),
      );
      assert.param("processedContentId")(() =>
        typia.assert(props.processedContentId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
