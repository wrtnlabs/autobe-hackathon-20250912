import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPoliticalNewsCrawlerCrawlSources } from "../../../../structures/IPoliticalNewsCrawlerCrawlSources";
import { IPageIPoliticalNewsCrawlerCrawlSources } from "../../../../structures/IPageIPoliticalNewsCrawlerCrawlSources";

/**
 * Create a new political news crawler crawl source with specified configuration
 * data. The client provides source code, source URL, active flag, and optional
 * description.
 *
 * Upon successful creation, the system returns the full detailed crawl source
 * record including generated ID and timestamps.
 *
 * This operation is intended for administrative or automated system use to
 * register new crawl source endpoints.
 *
 * It directly maps to the political_news_crawler_crawl_sources table in the
 * Prisma schema.
 *
 * @param props.connection
 * @param props.body Creation info of the crawl source
 * @path /politicalNewsCrawler/politicalNewsCrawler/crawlSources
 * @accessor api.functional.politicalNewsCrawler.politicalNewsCrawler.crawlSources.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation info of the crawl source */
    body: IPoliticalNewsCrawlerCrawlSources.ICreate;
  };
  export type Body = IPoliticalNewsCrawlerCrawlSources.ICreate;
  export type Response = IPoliticalNewsCrawlerCrawlSources;

  export const METADATA = {
    method: "POST",
    path: "/politicalNewsCrawler/politicalNewsCrawler/crawlSources",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/politicalNewsCrawler/politicalNewsCrawler/crawlSources";
  export const random = (): IPoliticalNewsCrawlerCrawlSources =>
    typia.random<IPoliticalNewsCrawlerCrawlSources>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of political news crawler
 * crawl sources.
 *
 * Retrieve a filtered and paginated list of all political news crawler crawl
 * sources. The crawl sources represent configurations for political news
 * content retrieval from diverse external websites or APIs in the system.
 *
 * This operation supports advanced searching and sorting capabilities, enabling
 * clients to query sources by attributes such as source code, URL, and active
 * status. It returns summarized information optimized for listing.
 *
 * Security considerations: This endpoint is publicly accessible with no
 * authentication required as all source metadata is non-sensitive.
 *
 * This operation relates directly to the political_news_crawler_crawl_sources
 * table in the Prisma schema, which tracks source identifiers, URLs, activation
 * status, and audit metadata. Response includes only relevant summary fields
 * for efficient transmission.
 *
 * Usage with other endpoints: Use POST /politicalNewsCrawler/crawlSources for
 * creation, GET /politicalNewsCrawler/crawlSources/{id} for details, and PUT
 * /politicalNewsCrawler/crawlSources/{id} for updates as needed.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for crawl source
 *   filtering
 * @path /politicalNewsCrawler/politicalNewsCrawler/crawlSources
 * @accessor api.functional.politicalNewsCrawler.politicalNewsCrawler.crawlSources.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for crawl source filtering */
    body: IPoliticalNewsCrawlerCrawlSources.IRequest;
  };
  export type Body = IPoliticalNewsCrawlerCrawlSources.IRequest;
  export type Response = IPageIPoliticalNewsCrawlerCrawlSources.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/politicalNewsCrawler/politicalNewsCrawler/crawlSources",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/politicalNewsCrawler/politicalNewsCrawler/crawlSources";
  export const random = (): IPageIPoliticalNewsCrawlerCrawlSources.ISummary =>
    typia.random<IPageIPoliticalNewsCrawlerCrawlSources.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific political news crawler crawl source by ID.
 *
 * Retrieve details of a specific political news crawler crawl source by its
 * unique ID. The crawl source is a configuration entity representing an
 * external site or API source for political news crawling.
 *
 * This endpoint returns the complete information for the crawl source record
 * including the source code, URL, active flag, description, and creation/update
 * timestamps.
 *
 * No authentication is required since this information is not sensitive and is
 * intended for public consumption.
 *
 * Use this endpoint to examine or verify configuration details of a specific
 * crawl source. Combine with the crawl source listing endpoint PATCH
 * /politicalNewsCrawler/crawlSources for full source management workflows.
 *
 * The operation is closely tied to the political_news_crawler_crawl_sources
 * Prisma table.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target crawl source
 * @path /politicalNewsCrawler/politicalNewsCrawler/crawlSources/:id
 * @accessor api.functional.politicalNewsCrawler.politicalNewsCrawler.crawlSources.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target crawl source */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IPoliticalNewsCrawlerCrawlSources;

  export const METADATA = {
    method: "GET",
    path: "/politicalNewsCrawler/politicalNewsCrawler/crawlSources/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/politicalNewsCrawler/politicalNewsCrawler/crawlSources/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IPoliticalNewsCrawlerCrawlSources =>
    typia.random<IPoliticalNewsCrawlerCrawlSources>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing political news crawler crawl source by ID with given
 * update data. The client can modify source code, source URL, is_active flag,
 * and description.
 *
 * The system returns the updated full crawl source record upon success.
 *
 * This operation supports CRUD maintenance over crawl source configurations and
 * ensures uniform data integrity with Prisma schema field enforcement.
 *
 * Corresponds to the political_news_crawler_crawl_sources Prisma table.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target crawl source
 * @param props.body Update info of the crawl source
 * @path /politicalNewsCrawler/politicalNewsCrawler/crawlSources/:id
 * @accessor api.functional.politicalNewsCrawler.politicalNewsCrawler.crawlSources.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target crawl source */
    id: string & tags.Format<"uuid">;

    /** Update info of the crawl source */
    body: IPoliticalNewsCrawlerCrawlSources.IUpdate;
  };
  export type Body = IPoliticalNewsCrawlerCrawlSources.IUpdate;
  export type Response = IPoliticalNewsCrawlerCrawlSources;

  export const METADATA = {
    method: "PUT",
    path: "/politicalNewsCrawler/politicalNewsCrawler/crawlSources/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/politicalNewsCrawler/politicalNewsCrawler/crawlSources/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IPoliticalNewsCrawlerCrawlSources =>
    typia.random<IPoliticalNewsCrawlerCrawlSources>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
