import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPoliticalNewsCrawlerApiAccessLog } from "../../../../structures/IPoliticalNewsCrawlerApiAccessLog";
import { IPageIPoliticalNewsCrawlerApiAccessLog } from "../../../../structures/IPageIPoliticalNewsCrawlerApiAccessLog";

/**
 * Search and retrieve a paginated list of API access log entries.
 *
 * Retrieve a paginated and filtered list of API access log entries.
 *
 * This endpoint interacts with the 'political_news_crawler_api_access_logs'
 * table which records detailed logs for every API call.
 *
 * Clients can filter entries using advanced search and pagination parameters
 * included in the request body.
 *
 * The search allows narrowing results by HTTP method, path pattern, date range,
 * and other criteria.
 *
 * The response includes a paginated list of API access log summaries with
 * metadata designed for analysis and auditing.
 *
 * This operation is public and requires no authorization roles.
 *
 * Clients should handle typical pagination and search results because the data
 * volume can be large.
 *
 * @param props.connection
 * @param props.body Search filters and pagination parameters for API access
 *   logs
 * @path /politicalNewsCrawler/api/accessLogs
 * @accessor api.functional.politicalNewsCrawler.api.accessLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search filters and pagination parameters for API access logs */
    body: IPoliticalNewsCrawlerApiAccessLog.IRequest;
  };
  export type Body = IPoliticalNewsCrawlerApiAccessLog.IRequest;
  export type Response = IPageIPoliticalNewsCrawlerApiAccessLog.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/politicalNewsCrawler/api/accessLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/politicalNewsCrawler/api/accessLogs";
  export const random = (): IPageIPoliticalNewsCrawlerApiAccessLog.ISummary =>
    typia.random<IPageIPoliticalNewsCrawlerApiAccessLog.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific API access log entry by ID.
 *
 * Retrieve detailed information of a specific API access log entry by its
 * unique ID.
 *
 * This endpoint targets individual records in the
 * 'political_news_crawler_api_access_logs' table.
 *
 * Allows clients to view full details of an access log for diagnostic purposes.
 *
 * No authentication or role check is required because this is a public API
 * endpoint.
 *
 * Clients should handle cases where the requested ID does not exist.
 *
 * The response includes all fields relevant to the access log data, such as
 * method, path, status code, IP, and user agent.
 *
 * @param props.connection
 * @param props.id Unique identifier of the API access log entry
 * @path /politicalNewsCrawler/api/accessLogs/:id
 * @accessor api.functional.politicalNewsCrawler.api.accessLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the API access log entry */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IPoliticalNewsCrawlerApiAccessLog;

  export const METADATA = {
    method: "GET",
    path: "/politicalNewsCrawler/api/accessLogs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/politicalNewsCrawler/api/accessLogs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IPoliticalNewsCrawlerApiAccessLog =>
    typia.random<IPoliticalNewsCrawlerApiAccessLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
