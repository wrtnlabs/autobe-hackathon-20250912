import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPoliticalNewsCrawlerApiUsageMetricRequest } from "../../../../structures/IPoliticalNewsCrawlerApiUsageMetricRequest";
import { IPageIPoliticalNewsCrawlerApiUsageMetricSummary } from "../../../../structures/IPageIPoliticalNewsCrawlerApiUsageMetricSummary";
import { IPoliticalNewsCrawlerApiUsageMetric } from "../../../../structures/IPoliticalNewsCrawlerApiUsageMetric";

/**
 * Search and retrieve paginated API usage metrics.
 *
 * Retrieve a filtered and paginated list of API usage metrics with complex
 * search capabilities.
 *
 * This operation supports detailed querying of aggregated API usage data,
 * including filtering by HTTP methods, API paths, and time periods. It accepts
 * pagination and sorting parameters to efficiently manage large datasets.
 *
 * The data originates from the political_news_crawler_api_usage_metrics table,
 * which records total call counts, maximum, and average response durations over
 * specified aggregation periods.
 *
 * Security and access control are minimal as the endpoint is expected to be
 * publicly accessible for monitoring systems.
 *
 * The response returns a paginated collection of summarized API usage metric
 * records.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for API usage
 *   metrics filtering
 * @path /politicalNewsCrawler/api/usageMetrics
 * @accessor api.functional.politicalNewsCrawler.api.usageMetrics.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for API usage metrics
     * filtering
     */
    body: IPoliticalNewsCrawlerApiUsageMetricRequest;
  };
  export type Body = IPoliticalNewsCrawlerApiUsageMetricRequest;
  export type Response = IPageIPoliticalNewsCrawlerApiUsageMetricSummary;

  export const METADATA = {
    method: "PATCH",
    path: "/politicalNewsCrawler/api/usageMetrics",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/politicalNewsCrawler/api/usageMetrics";
  export const random = (): IPageIPoliticalNewsCrawlerApiUsageMetricSummary =>
    typia.random<IPageIPoliticalNewsCrawlerApiUsageMetricSummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve specific API usage metric by ID.
 *
 * Retrieve a specific API usage metric record by ID.
 *
 * The response includes total calls, max response time, and average response
 * time recorded during the aggregation period.
 *
 * This endpoint is public and requires no authentication.
 *
 * If the ID is invalid or not found, a 404 error will be returned.
 *
 * This operation supports auditing and detailed performance inspection for API
 * usage.
 *
 * @param props.connection
 * @param props.id Unique identifier of the API usage metric record
 * @path /politicalNewsCrawler/api/usageMetrics/:id
 * @accessor api.functional.politicalNewsCrawler.api.usageMetrics.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the API usage metric record */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IPoliticalNewsCrawlerApiUsageMetric;

  export const METADATA = {
    method: "GET",
    path: "/politicalNewsCrawler/api/usageMetrics/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/politicalNewsCrawler/api/usageMetrics/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IPoliticalNewsCrawlerApiUsageMetric =>
    typia.random<IPoliticalNewsCrawlerApiUsageMetric>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
