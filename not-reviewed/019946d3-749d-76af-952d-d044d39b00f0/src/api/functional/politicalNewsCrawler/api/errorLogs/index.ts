import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPoliticalNewsCrawlerApiErrorLog } from "../../../../structures/IPoliticalNewsCrawlerApiErrorLog";
import { IPageIPoliticalNewsCrawlerApiErrorLog } from "../../../../structures/IPageIPoliticalNewsCrawlerApiErrorLog";

/**
 * Search and retrieve a paginated list of API error log entries.
 *
 * Retrieve a paginated and filtered list of API error log entries.
 *
 * This endpoint interacts with the 'political_news_crawler_api_error_logs'
 * table which records detailed error log data.
 *
 * Clients use the request body to specify filters and pagination criteria.
 *
 * The response includes paginated summaries that aid in identifying and
 * analyzing API error patterns.
 *
 * Public access is allowed without any role restrictions.
 *
 * Error entries may highlight issues such as rate limiting, endpoint failures,
 * or spikes in error occurrence.
 *
 * Clients should handle large result sets with efficient paging.
 *
 * @param props.connection
 * @param props.body Filters and pagination parameters for API error logs
 * @path /politicalNewsCrawler/api/errorLogs
 * @accessor api.functional.politicalNewsCrawler.api.errorLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filters and pagination parameters for API error logs */
    body: IPoliticalNewsCrawlerApiErrorLog.IRequest;
  };
  export type Body = IPoliticalNewsCrawlerApiErrorLog.IRequest;
  export type Response = IPageIPoliticalNewsCrawlerApiErrorLog.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/politicalNewsCrawler/api/errorLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/politicalNewsCrawler/api/errorLogs";
  export const random = (): IPageIPoliticalNewsCrawlerApiErrorLog.ISummary =>
    typia.random<IPageIPoliticalNewsCrawlerApiErrorLog.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve specific API error log by ID.
 *
 * Retrieve a detailed API error log entry by its unique identifier.
 *
 * This operation is designed to fetch detailed information for a single API
 * error event, referenced by its unique ID. It allows administrators or
 * monitoring systems to obtain specifics about a particular error occurrence,
 * including the error code, message, client IP, and user agent.
 *
 * Only read access is required, as this operation exposes error logs for
 * diagnostics without modification rights.
 *
 * The data corresponds directly to the political_news_crawler_api_error_logs
 * table implementation in the Prisma schema, ensuring all relevant columns are
 * included in the response.
 *
 * No request body is needed, and the error log ID is passed as the path
 * parameter. If the ID does not exist, a 404 response can be expected.
 *
 * This operation complements other log retrieval functions such as listing all
 * error logs or fetching usage metrics for analysis.
 *
 * @param props.connection
 * @param props.id Unique identifier of the API error log entry
 * @path /politicalNewsCrawler/api/errorLogs/:id
 * @accessor api.functional.politicalNewsCrawler.api.errorLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the API error log entry */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IPoliticalNewsCrawlerApiErrorLog;

  export const METADATA = {
    method: "GET",
    path: "/politicalNewsCrawler/api/errorLogs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/politicalNewsCrawler/api/errorLogs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IPoliticalNewsCrawlerApiErrorLog =>
    typia.random<IPoliticalNewsCrawlerApiErrorLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
