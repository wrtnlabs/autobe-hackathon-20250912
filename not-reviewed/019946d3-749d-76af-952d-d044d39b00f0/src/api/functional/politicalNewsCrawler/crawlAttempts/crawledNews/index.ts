import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPoliticalNewsCrawlerCrawledNews } from "../../../../structures/IPoliticalNewsCrawlerCrawledNews";
import { IPageIPoliticalNewsCrawlerCrawledNews } from "../../../../structures/IPageIPoliticalNewsCrawlerCrawledNews";

/**
 * Create a new crawled news article for a given crawlAttemptId.
 *
 * Create a new crawled news article associated with the specified crawl
 * attempt.
 *
 * The request body must contain the minimum required information for the
 * crawler news metadata, including a valid URL. Title and published date are
 * optional but recommended for completeness.
 *
 * No authentication is required for this operation. On success, the newly
 * created news article's full details are returned.
 *
 * This operation complements retrieval and management endpoints allowing
 * clients to add new news entries for a crawl attempt.
 *
 * @param props.connection
 * @param props.crawlAttemptId Unique identifier of the crawl attempt to which
 *   the news article belongs
 * @param props.body Information needed to create a new crawled news article
 * @path /politicalNewsCrawler/crawlAttempts/:crawlAttemptId/crawledNews
 * @accessor api.functional.politicalNewsCrawler.crawlAttempts.crawledNews.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Unique identifier of the crawl attempt to which the news article
     * belongs
     */
    crawlAttemptId: string & tags.Format<"uuid">;

    /** Information needed to create a new crawled news article */
    body: IPoliticalNewsCrawlerCrawledNews.ICreate;
  };
  export type Body = IPoliticalNewsCrawlerCrawledNews.ICreate;
  export type Response = IPoliticalNewsCrawlerCrawledNews;

  export const METADATA = {
    method: "POST",
    path: "/politicalNewsCrawler/crawlAttempts/:crawlAttemptId/crawledNews",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/politicalNewsCrawler/crawlAttempts/${encodeURIComponent(props.crawlAttemptId ?? "null")}/crawledNews`;
  export const random = (): IPoliticalNewsCrawlerCrawledNews =>
    typia.random<IPoliticalNewsCrawlerCrawledNews>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("crawlAttemptId")(() => typia.assert(props.crawlAttemptId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List crawled news filtered by crawl attempt ID.
 *
 * Retrieve a paginated, filtered list of crawled news linked to a specific
 * crawl attempt identified by crawlAttemptId.
 *
 * Supports complex querying including search filters, sorting, and pagination
 * controls via request body.
 *
 * This publicly accessible endpoint requires no authentication, allowing open
 * read access to crawl results.
 *
 * The operation queries the political_news_crawler_crawled_news database table
 * and returns data optimized for UI display and analysis.
 *
 * Typical usage includes news aggregation views, crawl session detail pages,
 * and backend analytics.
 *
 * Proper error handling returns empty pages if no data matches the query and
 * validation errors on bad requests.
 *
 * @param props.connection
 * @param props.crawlAttemptId Unique identifier of the crawl attempt
 * @param props.body Search and pagination parameters for filtering crawled news
 * @path /politicalNewsCrawler/crawlAttempts/:crawlAttemptId/crawledNews
 * @accessor api.functional.politicalNewsCrawler.crawlAttempts.crawledNews.indexCrawledNews
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexCrawledNews(
  connection: IConnection,
  props: indexCrawledNews.Props,
): Promise<indexCrawledNews.Response> {
  return true === connection.simulate
    ? indexCrawledNews.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexCrawledNews.METADATA,
          path: indexCrawledNews.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace indexCrawledNews {
  export type Props = {
    /** Unique identifier of the crawl attempt */
    crawlAttemptId: string & tags.Format<"uuid">;

    /** Search and pagination parameters for filtering crawled news */
    body: IPoliticalNewsCrawlerCrawledNews.IRequest;
  };
  export type Body = IPoliticalNewsCrawlerCrawledNews.IRequest;
  export type Response = IPageIPoliticalNewsCrawlerCrawledNews.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/politicalNewsCrawler/crawlAttempts/:crawlAttemptId/crawledNews",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/politicalNewsCrawler/crawlAttempts/${encodeURIComponent(props.crawlAttemptId ?? "null")}/crawledNews`;
  export const random = (): IPageIPoliticalNewsCrawlerCrawledNews.ISummary =>
    typia.random<IPageIPoliticalNewsCrawlerCrawledNews.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: indexCrawledNews.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexCrawledNews.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("crawlAttemptId")(() => typia.assert(props.crawlAttemptId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific crawled news article by crawlAttemptId and article id.
 *
 * This operation retrieves detailed metadata of a specific political news
 * article within a given crawl attempt. It returns the article's unique
 * identifier, URL, title, and publishing date.
 *
 * Access to this operation requires no authentication, reflecting the system's
 * public API design. The operation references the
 * political_news_crawler_crawled_news table, enforcing relationship integrity
 * by requiring the crawlAttemptId path parameter that links the article to its
 * crawl attempt.
 *
 * The API throws an error if the specified article or crawl attempt does not
 * exist. It is designed to provide comprehensive data for client applications
 * that need access to individual news items.
 *
 * This operation works closely with create, update, and delete endpoints
 * providing full lifecycle management of news articles within crawl attempts.
 *
 * @param props.connection
 * @param props.crawlAttemptId Unique identifier of the crawl attempt containing
 *   the news article
 * @param props.id Unique identifier of the crawled news article
 * @path /politicalNewsCrawler/crawlAttempts/:crawlAttemptId/crawledNews/:id
 * @accessor api.functional.politicalNewsCrawler.crawlAttempts.crawledNews.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the crawl attempt containing the news article */
    crawlAttemptId: string & tags.Format<"uuid">;

    /** Unique identifier of the crawled news article */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IPoliticalNewsCrawlerCrawledNews;

  export const METADATA = {
    method: "GET",
    path: "/politicalNewsCrawler/crawlAttempts/:crawlAttemptId/crawledNews/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/politicalNewsCrawler/crawlAttempts/${encodeURIComponent(props.crawlAttemptId ?? "null")}/crawledNews/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IPoliticalNewsCrawlerCrawledNews =>
    typia.random<IPoliticalNewsCrawlerCrawledNews>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("crawlAttemptId")(() => typia.assert(props.crawlAttemptId));
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing crawled news article by crawlAttemptId and article id.
 *
 * Update metadata of a crawled news article within the specified crawl attempt.
 *
 * Only provided fields in the request body will be updated; others remain
 * unchanged.
 *
 * The operation validates the existence of the target article linked to the
 * crawl attempt.
 *
 * No authentication is required. Responses include the updated entity details.
 *
 * This operation works in conjunction with create, retrieve, and delete
 * endpoints to provide full management capabilities.
 *
 * @param props.connection
 * @param props.crawlAttemptId Unique identifier of the crawl attempt containing
 *   the news article
 * @param props.id Unique identifier of the crawled news article
 * @param props.body Fields to update for the crawled news article
 * @path /politicalNewsCrawler/crawlAttempts/:crawlAttemptId/crawledNews/:id
 * @accessor api.functional.politicalNewsCrawler.crawlAttempts.crawledNews.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the crawl attempt containing the news article */
    crawlAttemptId: string & tags.Format<"uuid">;

    /** Unique identifier of the crawled news article */
    id: string & tags.Format<"uuid">;

    /** Fields to update for the crawled news article */
    body: IPoliticalNewsCrawlerCrawledNews.IUpdate;
  };
  export type Body = IPoliticalNewsCrawlerCrawledNews.IUpdate;
  export type Response = IPoliticalNewsCrawlerCrawledNews;

  export const METADATA = {
    method: "PUT",
    path: "/politicalNewsCrawler/crawlAttempts/:crawlAttemptId/crawledNews/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/politicalNewsCrawler/crawlAttempts/${encodeURIComponent(props.crawlAttemptId ?? "null")}/crawledNews/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IPoliticalNewsCrawlerCrawledNews =>
    typia.random<IPoliticalNewsCrawlerCrawledNews>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("crawlAttemptId")(() => typia.assert(props.crawlAttemptId));
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a crawled news article by crawlAttemptId and article id.
 *
 * Permanently delete a specific crawled news article associated with the given
 * crawl attempt.
 *
 * This operation removes the record from the database permanently.
 *
 * It requires valid and existing identifiers for both the crawl attempt and the
 * article.
 *
 * No authentication is required to perform this operation.
 *
 * There is no response body upon success.
 *
 * Deletion is irreversible, so caution is advised.
 *
 * @param props.connection
 * @param props.crawlAttemptId Unique identifier of the crawl attempt containing
 *   the news article
 * @param props.id Unique identifier of the crawled news article to delete
 * @path /politicalNewsCrawler/crawlAttempts/:crawlAttemptId/crawledNews/:id
 * @accessor api.functional.politicalNewsCrawler.crawlAttempts.crawledNews.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the crawl attempt containing the news article */
    crawlAttemptId: string & tags.Format<"uuid">;

    /** Unique identifier of the crawled news article to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/politicalNewsCrawler/crawlAttempts/:crawlAttemptId/crawledNews/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/politicalNewsCrawler/crawlAttempts/${encodeURIComponent(props.crawlAttemptId ?? "null")}/crawledNews/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("crawlAttemptId")(() => typia.assert(props.crawlAttemptId));
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
