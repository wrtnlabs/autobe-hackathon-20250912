import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPoliticalNewsCrawlerLlmJobs } from "../../../structures/IPoliticalNewsCrawlerLlmJobs";
import { IPageIPoliticalNewsCrawlerLlmJobs } from "../../../structures/IPageIPoliticalNewsCrawlerLlmJobs";

/**
 * Create a new LLM job record to enqueue political news data processing tasks
 * for LLM post-processing. Input must include crawl source ID, job status, and
 * parameters in JSON string format.
 *
 * Security considerations: The endpoint is publicly accessible without
 * restrictions.
 *
 * This operation affects the political_news_crawler_llm_jobs table and enables
 * clients or system components to add new processing jobs.
 *
 * Validation: Input must conform to the IPoliticalNewsCrawlerLlmJobs.ICreate
 * schema with UUID and status constraints.
 *
 * Expected Behavior: Upon successful creation, the new job record is returned
 * with its assigned unique identifier.
 *
 * @param props.connection
 * @param props.body Information needed to create the LLM job
 * @path /politicalNewsCrawler/llmJobs
 * @accessor api.functional.politicalNewsCrawler.llmJobs.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information needed to create the LLM job */
    body: IPoliticalNewsCrawlerLlmJobs.ICreate;
  };
  export type Body = IPoliticalNewsCrawlerLlmJobs.ICreate;
  export type Response = IPoliticalNewsCrawlerLlmJobs;

  export const METADATA = {
    method: "POST",
    path: "/politicalNewsCrawler/llmJobs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/politicalNewsCrawler/llmJobs";
  export const random = (): IPoliticalNewsCrawlerLlmJobs =>
    typia.random<IPoliticalNewsCrawlerLlmJobs>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List and search LLM post-processing jobs with filters and pagination.
 *
 * Retrieve a filtered and paginated list of large language model (LLM) jobs in
 * the politicalNewsCrawler backend. This endpoint supports query parameters for
 * filtering jobs by status, creation date, and related crawl source.
 *
 * The operation returns a pageable list of job summaries including job ID,
 * status, parameters, and timestamps.
 *
 * This is a read-only public endpoint that allows monitoring of LLM processing
 * activities.
 *
 * No authentication required for this endpoint.
 *
 * It is primarily used for administrative or monitoring purposes to track
 * asynchronous processing status and history.
 *
 * @param props.connection
 * @param props.body Filtering and pagination request for LLM jobs
 * @path /politicalNewsCrawler/llmJobs
 * @accessor api.functional.politicalNewsCrawler.llmJobs.indexLlmJobs
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexLlmJobs(
  connection: IConnection,
  props: indexLlmJobs.Props,
): Promise<indexLlmJobs.Response> {
  return true === connection.simulate
    ? indexLlmJobs.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexLlmJobs.METADATA,
          path: indexLlmJobs.path(),
          status: null,
        },
        props.body,
      );
}
export namespace indexLlmJobs {
  export type Props = {
    /** Filtering and pagination request for LLM jobs */
    body: IPoliticalNewsCrawlerLlmJobs.IRequest;
  };
  export type Body = IPoliticalNewsCrawlerLlmJobs.IRequest;
  export type Response = IPageIPoliticalNewsCrawlerLlmJobs.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/politicalNewsCrawler/llmJobs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/politicalNewsCrawler/llmJobs";
  export const random = (): IPageIPoliticalNewsCrawlerLlmJobs.ISummary =>
    typia.random<IPageIPoliticalNewsCrawlerLlmJobs.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: indexLlmJobs.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexLlmJobs.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve specific LLM job information by ID.
 *
 * Retrieve detailed information about a specific LLM job identified by the
 * given UUID. The LLM job entity tracks processing tasks for political news
 * data, including job status such as 'pending', 'running', 'completed', or
 * 'failed'. It also stores the JSON-formatted parameters or prompts used for
 * the job.
 *
 * Security considerations: The endpoint is publicly accessible without role
 * restrictions as per system design; no authentication or authorization is
 * required.
 *
 * This operation relates to the political_news_crawler_llm_jobs table in the
 * Postgres database schema, ensuring full coverage of that core entity
 * responsible for large language model processing tasks.
 *
 * Validation: The UUID parameter must strictly comply with the UUID format.
 *
 * Usage: This endpoint is typically used by clients or monitoring services to
 * track the status and details of ongoing or completed LLM processing jobs.
 *
 * Error Handling: Accessing a non-existent LLM job ID should return an
 * appropriate error response indicating the resource was not found.
 *
 * @param props.connection
 * @param props.id Identifier of the LLM job
 * @path /politicalNewsCrawler/llmJobs/:id
 * @accessor api.functional.politicalNewsCrawler.llmJobs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Identifier of the LLM job */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IPoliticalNewsCrawlerLlmJobs;

  export const METADATA = {
    method: "GET",
    path: "/politicalNewsCrawler/llmJobs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/politicalNewsCrawler/llmJobs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IPoliticalNewsCrawlerLlmJobs =>
    typia.random<IPoliticalNewsCrawlerLlmJobs>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing LLM job by ID.
 *
 * Update an existing LLM job identified by its ID with new status, parameters,
 * or other mutable information. The request body must conform to the
 * IPoliticalNewsCrawlerLlmJobs.IUpdate schema.
 *
 * This operation supports management and correction of LLM job records.
 *
 * It relates directly to the political_news_crawler_llm_jobs table.
 *
 * Security considerations: No authentication or authorization required.
 *
 * Validation: Ensures UUID format for path parameter and schema compliance for
 * request body.
 *
 * Error handling: Non-existent resources result in not found errors.
 *
 * @param props.connection
 * @param props.id ID of the LLM job to update
 * @param props.body Updated information for the LLM job
 * @path /politicalNewsCrawler/llmJobs/:id
 * @accessor api.functional.politicalNewsCrawler.llmJobs.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** ID of the LLM job to update */
    id: string & tags.Format<"uuid">;

    /** Updated information for the LLM job */
    body: IPoliticalNewsCrawlerLlmJobs.IUpdate;
  };
  export type Body = IPoliticalNewsCrawlerLlmJobs.IUpdate;
  export type Response = IPoliticalNewsCrawlerLlmJobs;

  export const METADATA = {
    method: "PUT",
    path: "/politicalNewsCrawler/llmJobs/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/politicalNewsCrawler/llmJobs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IPoliticalNewsCrawlerLlmJobs =>
    typia.random<IPoliticalNewsCrawlerLlmJobs>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an LLM job by ID.
 *
 * Delete an LLM job by its unique identifier. This operation permanently
 * removes the LLM job record from the database.
 *
 * Security considerations: No authorization required.
 *
 * Relates to the political_news_crawler_llm_jobs table.
 *
 * Validation: Requires a UUID path parameter.
 *
 * Error handling: Non-existent IDs result in appropriate not found responses.
 *
 * @param props.connection
 * @param props.id ID of the LLM job to delete
 * @path /politicalNewsCrawler/llmJobs/:id
 * @accessor api.functional.politicalNewsCrawler.llmJobs.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** ID of the LLM job to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/politicalNewsCrawler/llmJobs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/politicalNewsCrawler/llmJobs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
