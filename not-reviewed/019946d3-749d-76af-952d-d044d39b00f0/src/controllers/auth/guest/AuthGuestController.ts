import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";

import { IPoliticalNewsCrawlerGuest } from "../../../api/structures/IPoliticalNewsCrawlerGuest";

@Controller("/auth/guest")
export class AuthGuestController {
  /**
   * Create a temporary guest account and issue JWT tokens. Maps to
   * political_news_crawler_guests table for guest metadata tracking.
   *
   * Provides an endpoint for guest users (unauthenticated) to create a
   * temporary guest account and receive JWT tokens to access public APIs. The
   * join route allows automatically generating guest identifiers without
   * passwords. The response type IPoliticalNewsCrawlerGuest.IAuthorized
   * represents the token response containing temporary guest authentication
   * details and metadata as per the political_news_crawler_guests schema.
   *
   * @param connection
   * @param body Guest join request payload. For guests, this is typically
   *   empty or minimal since no credentials are needed.
   * @setHeader token.access Authorization
   *
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: IPoliticalNewsCrawlerGuest.IRequest,
  ): Promise<IPoliticalNewsCrawlerGuest.IAuthorized> {
    body;
    return typia.random<IPoliticalNewsCrawlerGuest.IAuthorized>();
  }

  /**
   * Refresh guest access tokens securely. Maps to
   * political_news_crawler_guests table for session continuity without
   * login.
   *
   * Refresh temporary JWT tokens for a guest user session. Requires a valid
   * refresh token and issues new tokens with updated expiry.
   *
   * @param connection
   * @param body Payload containing a refresh token to renew guest JWT tokens
   *   securely.
   * @setHeader token.access Authorization
   *
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: IPoliticalNewsCrawlerGuest.IRefresh,
  ): Promise<IPoliticalNewsCrawlerGuest.IAuthorized> {
    body;
    return typia.random<IPoliticalNewsCrawlerGuest.IAuthorized>();
  }
}
