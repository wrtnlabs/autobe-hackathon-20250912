import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";

import { IPageIPoliticalNewsCrawlerApiUsageMetricSummary } from "../../../../api/structures/IPageIPoliticalNewsCrawlerApiUsageMetricSummary";
import { IPoliticalNewsCrawlerApiUsageMetricRequest } from "../../../../api/structures/IPoliticalNewsCrawlerApiUsageMetricRequest";
import { IPoliticalNewsCrawlerApiUsageMetric } from "../../../../api/structures/IPoliticalNewsCrawlerApiUsageMetric";

@Controller("/politicalNewsCrawler/api/usageMetrics")
export class PoliticalnewscrawlerApiUsagemetricsController {
  /**
   * Search and retrieve paginated API usage metrics.
   *
   * Retrieve a filtered and paginated list of API usage metrics with complex
   * search capabilities.
   *
   * This operation supports detailed querying of aggregated API usage data,
   * including filtering by HTTP methods, API paths, and time periods. It
   * accepts pagination and sorting parameters to efficiently manage large
   * datasets.
   *
   * The data originates from the political_news_crawler_api_usage_metrics
   * table, which records total call counts, maximum, and average response
   * durations over specified aggregation periods.
   *
   * Security and access control are minimal as the endpoint is expected to be
   * publicly accessible for monitoring systems.
   *
   * The response returns a paginated collection of summarized API usage
   * metric records.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for API usage
   *   metrics filtering
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: IPoliticalNewsCrawlerApiUsageMetricRequest,
  ): Promise<IPageIPoliticalNewsCrawlerApiUsageMetricSummary> {
    body;
    return typia.random<IPageIPoliticalNewsCrawlerApiUsageMetricSummary>();
  }

  /**
   * Retrieve specific API usage metric by ID.
   *
   * Retrieve a specific API usage metric record by ID.
   *
   * The response includes total calls, max response time, and average
   * response time recorded during the aggregation period.
   *
   * This endpoint is public and requires no authentication.
   *
   * If the ID is invalid or not found, a 404 error will be returned.
   *
   * This operation supports auditing and detailed performance inspection for
   * API usage.
   *
   * @param connection
   * @param id Unique identifier of the API usage metric record
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Get(":id")
  public async at(
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IPoliticalNewsCrawlerApiUsageMetric> {
    id;
    return typia.random<IPoliticalNewsCrawlerApiUsageMetric>();
  }
}
