import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";

import { IPoliticalNewsCrawlerCrawlJobs } from "../../../../api/structures/IPoliticalNewsCrawlerCrawlJobs";
import { IPoliticalNewsCrawlerCrawlJobsICreate } from "../../../../api/structures/IPoliticalNewsCrawlerCrawlJobsICreate";
import { IPageIPoliticalNewsCrawlerCrawlJobs } from "../../../../api/structures/IPageIPoliticalNewsCrawlerCrawlJobs";
import { IPoliticalNewsCrawlerCrawlJobsIRequest } from "../../../../api/structures/IPoliticalNewsCrawlerCrawlJobsIRequest";
import { IPoliticalNewsCrawlerCrawlJob } from "../../../../api/structures/IPoliticalNewsCrawlerCrawlJob";

@Controller("/politicalNewsCrawler/guest/crawlJobs")
export class PoliticalnewscrawlerGuestCrawljobsController {
  /**
   * Create a new crawl job to schedule crawling operations for a political
   * news source.
   *
   * Requires specifying the associated crawl source, crawl schedule, and
   * active status.
   *
   * Returns the detailed crawl job record after creation.
   *
   * Security: Requires user role authorization.
   *
   * Related operations include listing crawl jobs and retrieving crawl job
   * details.
   *
   * Errors occur if required fields are missing or references invalid IDs.
   *
   * @param connection
   * @param body Information to create a new crawl job
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post()
  public async create(
    @TypedBody()
    body: IPoliticalNewsCrawlerCrawlJobsICreate,
  ): Promise<IPoliticalNewsCrawlerCrawlJobs> {
    body;
    return typia.random<IPoliticalNewsCrawlerCrawlJobs>();
  }

  /**
   * Search and list crawl jobs.
   *
   * Retrieve a paginated and filtered list of crawl jobs managed by the
   * political_news_crawler_crawl_jobs table.
   *
   * Supports search parameters including schedule ID and active status,
   * allowing clients to find specific crawl jobs.
   *
   * Security: This endpoint is publicly accessible, providing read-only
   * access to crawl job status information.
   *
   * Related operations include querying specific crawl job details and
   * creating new crawl jobs.
   *
   * Errors will be returned if search criteria are invalid.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for crawl job
   *   filtering
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: IPoliticalNewsCrawlerCrawlJobsIRequest,
  ): Promise<IPageIPoliticalNewsCrawlerCrawlJobs> {
    body;
    return typia.random<IPageIPoliticalNewsCrawlerCrawlJobs>();
  }

  /**
   * Retrieve a crawl job by ID.
   *
   * Retrieve detailed information about a crawl job specified by its unique
   * ID.
   *
   * Returns complete crawl job information including schedule, activity
   * status, and timestamps.
   *
   * Security: Requires user-level authorization.
   *
   * Related operations include listing crawl jobs and creating new crawl
   * jobs.
   *
   * Errors occur if the crawl job ID does not exist.
   *
   * @param connection
   * @param id Unique identifier of the crawl job
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Get(":id")
  public async at(
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IPoliticalNewsCrawlerCrawlJobs> {
    id;
    return typia.random<IPoliticalNewsCrawlerCrawlJobs>();
  }

  /**
   * Update an existing crawl job by ID.
   *
   * Update the details of an existing crawl job identified by its unique ID.
   * This enables controlling whether the crawl job is active, and can adjust
   * timing metadata such as last run start and completion times. The
   * operation is crucial for administrators or backend systems managing crawl
   * schedules and execution state for political news data retrieval.
   *
   * Security considerations: this endpoint requires guest role authorization
   * as per system role configuration.
   *
   * The operation corresponds to the political_news_crawler_crawl_jobs table
   * and updates mutable fields while preserving relational integrity.
   *
   * Business logic includes validation of input timestamps and ensuring the
   * referenced crawl source and schedule remain valid during the update
   * process.
   *
   * Related operations include endpoints for retrieving crawl job details and
   * managing crawl attempts.
   *
   * Expected behavior includes returning the updated crawl job resource upon
   * success or appropriate error messages on failure.
   *
   * @param connection
   * @param id Unique identifier of the crawl job to update
   * @param body Update data for crawl job
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Put(":id")
  public async update(
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IPoliticalNewsCrawlerCrawlJob.IUpdate,
  ): Promise<IPoliticalNewsCrawlerCrawlJob> {
    id;
    body;
    return typia.random<IPoliticalNewsCrawlerCrawlJob>();
  }

  /**
   * Erase a crawl job by ID.
   *
   * Permanently remove a crawl job by its unique ID. This operation deletes
   * the record from the database and disables further scheduled crawling for
   * the associated crawl source and schedule. The deletion is irreversible.
   *
   * Security considerations: this endpoint requires guest role authorization
   * as per system role configuration.
   *
   * Related operations include updating crawl job details and managing crawl
   * attempts.
   *
   * Expected behavior is the complete removal of the job and returning no
   * response body upon success.
   *
   * @param connection
   * @param id Unique identifier of the crawl job to remove
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    id;
    return typia.random<void>();
  }
}
