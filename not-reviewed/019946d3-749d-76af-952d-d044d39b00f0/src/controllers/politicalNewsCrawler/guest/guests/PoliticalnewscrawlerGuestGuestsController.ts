import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";

import { IPageIPoliticalNewsCrawlerGuests } from "../../../../api/structures/IPageIPoliticalNewsCrawlerGuests";
import { IPoliticalNewsCrawlerGuests } from "../../../../api/structures/IPoliticalNewsCrawlerGuests";

@Controller("/politicalNewsCrawler/guest/guests")
export class PoliticalnewscrawlerGuestGuestsController {
  /**
   * Search and retrieve filtered, paginated political news crawler guests.
   *
   * Retrieve a filtered, sorted, and paginated list of political news crawler
   * guest users.
   *
   * Guests are unauthenticated visitors recorded by IP, user-agent, and
   * timestamps. This operation allows search filtering on these attributes
   * and supports efficient pagination and sort ordering.
   *
   * Security restricts this to administrator-level access to protect user
   * privacy.
   *
   * The response contains a paginated list of guest summaries matching the
   * filters.
   *
   * Errors may arise from invalid criteria or pagination parameters.
   *
   * No modifications are made to guest records here, this is a read-only
   * operation.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for guests
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Patch()
  public async search(
    @TypedBody()
    body: IPoliticalNewsCrawlerGuests.IRequest,
  ): Promise<IPageIPoliticalNewsCrawlerGuests.ISummary> {
    body;
    return typia.random<IPageIPoliticalNewsCrawlerGuests.ISummary>();
  }

  /**
   * Retrieve a specific guest user by ID.
   *
   * Retrieve information about a specific guest user identified by guestId in
   * the political_news_crawler_guests table.
   *
   * This operation returns guest details including IP address and user agent
   * string, as well as timestamps for creation and last update.
   *
   * Security considerations: this endpoint is public and provides read-only
   * access to guest metadata only. No sensitive data or authentication
   * details are exposed.
   *
   * Related operations include listing all guest users and managing crawl
   * jobs.
   *
   * Errors will be returned if guestId does not exist.
   *
   * @param connection
   * @param guestId Unique identifier of the guest user
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Get(":guestId")
  public async at(
    @TypedParam("guestId")
    guestId: string & tags.Format<"uuid">,
  ): Promise<IPoliticalNewsCrawlerGuests> {
    guestId;
    return typia.random<IPoliticalNewsCrawlerGuests>();
  }
}
