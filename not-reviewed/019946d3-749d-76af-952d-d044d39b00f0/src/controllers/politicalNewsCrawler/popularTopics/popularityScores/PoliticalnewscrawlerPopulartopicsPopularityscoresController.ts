import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia from "typia";

import { IPoliticalNewsCrawlerPopularityScores } from "../../../../api/structures/IPoliticalNewsCrawlerPopularityScores";

@Controller(
  "/politicalNewsCrawler/popularTopics/:popularTopicId/popularityScores/:id",
)
export class PoliticalnewscrawlerPopulartopicsPopularityscoresController {
  /**
   * Retrieve a specific popularity score snapshot for a popular political
   * topic.
   *
   * This operation returns detailed information about a specific popularity
   * score snapshot for a popular political topic. Users can retrieve the
   * calculated popularity score and decay factor applied at a certain
   * snapshot time, enabling insight into topic trend changes.
   *
   * Security and accessibility are unrestricted; this is a public endpoint
   * allowing read-only access. The response returns all stored properties,
   * including creation and update timestamps.
   *
   * Underlying data is stored in political_news_crawler_popularity_scores
   * referencing political_news_crawler_popular_topics, thus reflecting a
   * one-to-many relationship (one topic to many scores).
   *
   * Errors include invalid ID formats or non-existing records, typically
   * resulting in 404 not found responses.
   *
   * This GET endpoint does not require a request body and uniquely identifies
   * the score record by both popularTopicId and id path parameters.
   *
   * @param connection
   * @param popularTopicId Target popular topic's ID
   * @param id Specific popularity score record ID
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Get()
  public async at(
    @TypedParam("popularTopicId")
    popularTopicId: string,
    @TypedParam("id")
    id: string,
  ): Promise<IPoliticalNewsCrawlerPopularityScores> {
    popularTopicId;
    id;
    return typia.random<IPoliticalNewsCrawlerPopularityScores>();
  }
}
