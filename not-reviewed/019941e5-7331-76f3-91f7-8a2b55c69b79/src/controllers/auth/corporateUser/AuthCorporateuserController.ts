import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";

import { IEasySignCorporateUser } from "../../../api/structures/IEasySignCorporateUser";

@Controller("/auth/corporateUser")
export class AuthCorporateuserController {
  /**
   * Create and register corporate user account for EasySign.
   *
   * Register a new corporate user account for EasySign with necessary email
   * and company information. This operation securely creates the user record
   * in the database, issuing JWT tokens upon successful registration. It
   * references the easy_sign_corporateusers table in the Prisma schema. Input
   * validation and uniqueness constraints for the email are enforced. The
   * response provides authorized access tokens. This is a public
   * (non-authenticated) endpoint enabling new users to join.
   *
   * @param connection
   * @param body Corporate user registration input data
   * @setHeader token.access Authorization
   *
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: IEasySignCorporateUser.ICreate,
  ): Promise<IEasySignCorporateUser.IAuthorized> {
    body;
    return typia.random<IEasySignCorporateUser.IAuthorized>();
  }

  /**
   * Authenticate corporate user and generate access tokens.
   *
   * Authenticate corporate users using email and password to obtain JWT
   * access tokens for subsequent API authorization. This operation validates
   * user credentials against stored hashed passwords in the Prisma schema's
   * easy_sign_user_credentials table. Successful login issues access and
   * refresh tokens. This is a public endpoint.
   *
   * @param connection
   * @param body Credentials for corporate user login
   * @setHeader token.access Authorization
   *
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: IEasySignCorporateUser.ILogin,
  ): Promise<IEasySignCorporateUser.IAuthorized> {
    body;
    return typia.random<IEasySignCorporateUser.IAuthorized>();
  }

  /**
   * Refresh access tokens using valid corporate user refresh token.
   *
   * Refresh JWT access tokens for corporate users by validating provided
   * refresh token. This operation issues new access and refresh tokens to
   * maintain session continuity. References easy_sign_auth_tokens for token
   * storage and easy_sign_corporateusers for user validation. Allows
   * corporate users to maintain authenticated sessions without reentering
   * credentials.
   *
   * @param connection
   * @param body Input refresh token to obtain new access tokens for corporate
   *   user
   * @setHeader token.access Authorization
   *
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: IEasySignCorporateUser.IRefresh,
  ): Promise<IEasySignCorporateUser.IAuthorized> {
    body;
    return typia.random<IEasySignCorporateUser.IAuthorized>();
  }
}
