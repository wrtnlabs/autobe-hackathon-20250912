import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";

import { IEasySignTeamLeader } from "../../../api/structures/IEasySignTeamLeader";

@Controller("/auth/teamLeader")
export class AuthTeamleaderController {
  /**
   * Create new team leader user account and issue initial JWT tokens.
   *
   * This API endpoint enables new team leaders to register for the EasySign
   * system. It accepts registration details such as email, name, and
   * optionally mobile phone. The data collected will be stored in the
   * 'easy_sign_teamleaders' table. During registration, the system creates
   * authentication entries, issues JWT access and refresh tokens, and returns
   * them to the client for subsequent authorized access. Proper validation
   * and auditing occur, referencing the exact fields in the
   * 'easy_sign_teamleaders' schema: 'email' (unique), 'name', and
   * 'mobile_phone' (optional). This endpoint is publicly accessible to allow
   * onboarding of new team leaders without prior authorization. It
   * complements login and token refresh operations in the authentication
   * workflow, ensuring secure and traceable registration.
   *
   * @param connection
   * @param body Payload containing registration information to create a new
   *   team leader user
   * @setHeader token.access Authorization
   *
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: IEasySignTeamLeader.ICreate,
  ): Promise<IEasySignTeamLeader.IAuthorized> {
    body;
    return typia.random<IEasySignTeamLeader.IAuthorized>();
  }

  /**
   * Authenticate team leader credentials and issue JWT tokens.
   *
   * Allows existing team leaders to authenticate by providing valid
   * credentials, receiving JWT tokens to access system resources. It verifies
   * provided email and password against records in 'easy_sign_teamleaders'
   * and related credentials for security. Successful authentication results
   * in issuance of access and refresh tokens. This endpoint is publicly
   * accessible to enable user login and requires sensitive data handling and
   * auditing. It complements registration (join) and token refresh operations
   * and manages the authentication lifecycle securely.
   *
   * @param connection
   * @param body Payload containing login credentials for team leader
   *   authentication
   * @setHeader token.access Authorization
   *
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: IEasySignTeamLeader.ILogin,
  ): Promise<IEasySignTeamLeader.IAuthorized> {
    body;
    return typia.random<IEasySignTeamLeader.IAuthorized>();
  }

  /**
   * Refresh JWT access token using a valid refresh token.
   *
   * Enables team leaders to refresh their JWT access tokens by providing a
   * valid refresh token. This operation maintains secure session continuity
   * without requiring re-authentication with credentials. It works within the
   * context of the 'easy_sign_teamleaders' role and uses stored
   * authentication token records linked to the user. Security is maintained
   * via validation of token expiration and revocation status. This endpoint
   * complements login and registration services in the overall authentication
   * infrastructure.
   *
   * @param connection
   * @param body Payload containing a refresh token to obtain a new access
   *   token
   * @setHeader token.access Authorization
   *
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: IEasySignTeamLeader.IRefresh,
  ): Promise<IEasySignTeamLeader.IAuthorized> {
    body;
    return typia.random<IEasySignTeamLeader.IAuthorized>();
  }
}
