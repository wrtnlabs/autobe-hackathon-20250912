import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";

import { IEasySignAdmin } from "../../../api/structures/IEasySignAdmin";

@Controller("/auth/admin")
export class AuthAdminController {
  /**
   * Create new administrator account and issue JWT tokens, managing
   * registration in the easy_sign_admins table.
   *
   * This operation allows creation of new administrator accounts with full
   * system privileges. It inserts a new record into the easy_sign_admins
   * table including unique email and username. The operation returns JWT
   * access and refresh tokens encapsulated in IEasySignAdmin.IAuthorized
   * which are used to access protected admin endpoints. This aligns with the
   * business requirements for secure and managed administrator onboarding.
   * Admin users are expected to comply with 2FA authentication procedures.
   *
   * @param connection
   * @param body Payload for new administrator registration including unique
   *   email and username.
   * @setHeader token.access Authorization
   *
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: IEasySignAdmin.ICreate,
  ): Promise<IEasySignAdmin.IAuthorized> {
    body;
    return typia.random<IEasySignAdmin.IAuthorized>();
  }

  /**
   * Authenticate administrator users and issue JWT tokens for session
   * management.
   *
   * Allows administrator users to login by providing valid credentials,
   * returning JWT access and refresh tokens encapsulated in
   * IEasySignAdmin.IAuthorized. Ensures admin role verification and supports
   * 2FA as necessary.
   *
   * @param connection
   * @param body Administrator login credentials including email and password
   *   hash verification data.
   * @setHeader token.access Authorization
   *
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: IEasySignAdmin.ILoginRequest,
  ): Promise<IEasySignAdmin.IAuthorized> {
    body;
    return typia.random<IEasySignAdmin.IAuthorized>();
  }

  /**
   * Renew JWT access tokens for authenticated administrator users via refresh
   * tokens.
   *
   * Refresh existing JWT tokens for administrator sessions using a valid
   * refresh token. Issues new access tokens according to configured
   * expiration policies.
   *
   * @param connection
   * @param body Refresh token payload containing the refresh token string to
   *   validate and renew session.
   * @setHeader token.access Authorization
   *
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: IEasySignAdmin.IRefreshRequest,
  ): Promise<IEasySignAdmin.IAuthorized> {
    body;
    return typia.random<IEasySignAdmin.IAuthorized>();
  }
}
