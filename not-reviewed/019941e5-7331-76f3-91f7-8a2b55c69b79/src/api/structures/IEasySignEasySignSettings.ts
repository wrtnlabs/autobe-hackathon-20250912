import { tags } from "typia";

/**
 * Represents individual system settings for EasySign platform.
 *
 * Each setting defines a key-value pair used to configure specific behaviors or
 * features.
 *
 * The entity supports optional notes for description and audit fields to track
 * creation and modification time.
 *
 * Soft deletion is supported through the deleted_at timestamp.
 *
 * This entity is critical for managing operational parameters and maintaining
 * system configurations.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEasySignEasySignSettings = {
  /**
   * Primary Key.
   *
   * Globally unique identifier for each system setting.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Unique key identifying this system setting.
   *
   * A string that represents the name of the setting. It must be unique.
   */
  setting_key: string;

  /**
   * Value assigned to the system setting key.
   *
   * The value of the setting, stored as a string.
   */
  setting_value: string;

  /**
   * Optional textual notes or comments describing the setting usage or
   * effect.
   *
   * Additional information about this setting. Can be null if not provided.
   */
  notes?: string | null | undefined;

  /**
   * Timestamp when the setting was created.
   *
   * ISO 8601 formatted date-time string representing when the setting record
   * was created.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the setting was last modified.
   *
   * ISO 8601 formatted date-time string representing the last modification
   * time.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Timestamp indicating soft deletion status.
   *
   * ISO 8601 formatted date-time string or null if the record is active.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IEasySignEasySignSettings {
  /**
   * Request query parameters for searching and paginating System Settings.
   *
   * Supports pagination and filtering by key, value, and notes.
   */
  export type IRequest = {
    /** Page number. */
    page?: number | null | undefined;

    /** Limitation of records per a page. */
    limit?: number | null | undefined;

    /** Filter by setting key for search. */
    setting_key?: string | null | undefined;

    /** Filter by setting value for search. */
    setting_value?: string | null | undefined;

    /** Filter by notes content for search. */
    notes?: string | null | undefined;
  };

  /**
   * Properties used to create a new system setting.
   *
   * Includes the key and corresponding value with optional notes.
   */
  export type ICreate = {
    /** Unique key identifying this system setting. */
    setting_key: string;

    /** Value assigned to the system setting key. */
    setting_value: string;

    /**
     * Optional textual notes or comments describing the setting usage or
     * effect.
     */
    notes?: string | null | undefined;
  };

  /**
   * Used for updating an existing system setting.
   *
   * All properties are optional to allow partial updates.
   */
  export type IUpdate = {
    /** Unique key identifying this system setting. */
    setting_key?: string | undefined;

    /** Value assigned to the system setting key. */
    setting_value?: string | undefined;

    /**
     * Optional textual notes or comments describing the setting usage or
     * effect.
     */
    notes?: string | null | undefined;

    /** Timestamp indicating soft deletion status. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Basic summary information for listing System Settings.
   *
   * Includes key, value, and creation timestamp.
   */
  export type ISummary = {
    /** Primary Key. */
    id: string & tags.Format<"uuid">;

    /** Unique key identifying this system setting. */
    setting_key: string;

    /** Value assigned to the system setting key. */
    setting_value: string;

    /** Timestamp when the setting was created. */
    created_at: string & tags.Format<"date-time">;
  };
}
