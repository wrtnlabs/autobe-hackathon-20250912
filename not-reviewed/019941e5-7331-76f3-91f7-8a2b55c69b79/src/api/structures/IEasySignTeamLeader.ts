import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Team leader user records handle corporate contract approvals and management.
 * Includes profile data and temporal fields for status tracking and auditing.
 * Soft deletion supported for account termination or suspension.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEasySignTeamLeader = {
  /**
   * Primary Key.
   *
   * Unique identifier of the team leader user.
   *
   * Format: UUID
   */
  id: string & tags.Format<"uuid">;

  /**
   * Email used by the team leader for authentication and communication.
   *
   * Unique per leader.
   *
   * Format: email string
   */
  email: string & tags.Format<"email">;

  /** Full name of the team leader user. */
  name: string;

  /**
   * Optional contact phone number of the team leader.
   *
   * Format: string
   *
   * Note: May be null or undefined.
   */
  mobile_phone?: string | null | undefined;

  /**
   * Record creation timestamp.
   *
   * Format: ISO 8601 date-time string.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Record last update timestamp.
   *
   * Format: ISO 8601 date-time string.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft delete timestamp to mark suspension or removal.
   *
   * Format: ISO 8601 date-time string or null if not deleted.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IEasySignTeamLeader {
  /**
   * Payload for creating a new team leader user.
   *
   * Required properties:
   *
   * - Email: valid email string
   * - Name: string Optional property:
   * - Mobile_phone: nullable string
   *
   * Note: id, created_at, updated_at, deleted_at are generated by server.
   * actor ids or authentication info must NOT be included.
   */
  export type ICreate = {
    /**
     * Email used by the team leader for authentication and communication.
     *
     * Unique per leader.
     *
     * Format: email string
     */
    email: string & tags.Format<"email">;

    /** Full name of the team leader user. */
    name: string;

    /**
     * Optional contact phone number of the team leader.
     *
     * Format: string
     *
     * Note: May be null or undefined.
     */
    mobile_phone?: string | null | undefined;
  };

  /**
   * Request payload for team leader login
   *
   * Required properties:
   *
   * - Email: valid email string
   * - Password: string (client provides raw password which server hashes)
   */
  export type ILogin = {
    /**
     * Email used by the team leader for authentication and communication.
     *
     * Unique per leader.
     *
     * Format: email string
     */
    email: string & tags.Format<"email">;

    /**
     * The plain password provided for authentication. This will be hashed
     * server side.
     */
    password: string;
  };

  /**
   * Request payload to refresh JWT tokens for team leader user.
   *
   * Required property:
   *
   * - RefreshToken: string
   */
  export type IRefresh = {
    /** Refresh token string provided by client for token renewal. */
    refreshToken: string;
  };

  /**
   * Response body with JWT tokens and user info for authorized team leader
   *
   * Required properties:
   *
   * - Id: UUID string
   * - Email: valid email string
   * - Name: string
   * - Token: authorization token information (access and refresh tokens)
   */
  export type IAuthorized = {
    /**
     * Primary Key.
     *
     * Unique identifier of the team leader user.
     *
     * Format: UUID
     */
    id: string & tags.Format<"uuid">;

    /**
     * Email used by the team leader for authentication and communication.
     *
     * Unique per leader.
     *
     * Format: email string
     */
    email: string & tags.Format<"email">;

    /** Full name of the team leader user. */
    name: string;

    /**
     * Optional contact phone number of the team leader.
     *
     * Format: string
     *
     * Note: May be null or undefined.
     */
    mobile_phone?: string | null | undefined;

    /**
     * Record creation timestamp.
     *
     * Format: ISO 8601 date-time string.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Record last update timestamp.
     *
     * Format: ISO 8601 date-time string.
     */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Soft delete timestamp to mark suspension or removal.
     *
     * Format: ISO 8601 date-time string or null if not deleted.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };
}
