import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Administrator user entity representing system administrators with full
 * privileges.
 *
 * This entity manages system roles and user permissions in EasySign backend.
 *
 * Includes core fields and timestamps for audit and soft deletion support.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEasySignAdmin = {
  /** Unique identifier of the administrator user. */
  id: string & tags.Format<"uuid">;

  /** Administrator's unique email address. */
  email: string;

  /** Unique username of the admin account. */
  username: string;

  /** Timestamp when the admin account was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the admin account was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft deletion timestamp marking admin deactivation, null if active. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IEasySignAdmin {
  /**
   * Payload to create a new administrator account.
   *
   * Contains only fields necessary to register an administrator.
   *
   * System-generated fields such as id and timestamps are excluded.
   */
  export type ICreate = {
    /** Email address for administrator registration. */
    email: string;

    /** Desired username for the administrative account. */
    username: string;
  };

  /**
   * Authorization response containing JWT tokens for the administrator.
   *
   * Returned upon successful admin authentication or token refresh.
   */
  export type IAuthorized = {
    /** Unique identifier of the administrator user. */
    id: string & tags.Format<"uuid">;

    /** Administrator's unique email address. */
    email: string;

    /** Unique username of the admin account. */
    username: string;

    /** Timestamp when the admin account was created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when the admin account was last updated. */
    updated_at: string & tags.Format<"date-time">;

    /** Soft deletion timestamp marking admin deactivation, null if active. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Login request payload for administrator authentication.
   *
   * Includes email and password fields.
   */
  export type ILoginRequest = {
    /** Administrator's email address for login. */
    email: string;

    /** Plaintext password for authentication (hashed server-side). */
    password: string;
  };

  /** Payload to request JWT token refresh for administrators. */
  export type IRefreshRequest = {
    /** Refresh token string used for token renewal. */
    refresh_token: string;
  };
}
