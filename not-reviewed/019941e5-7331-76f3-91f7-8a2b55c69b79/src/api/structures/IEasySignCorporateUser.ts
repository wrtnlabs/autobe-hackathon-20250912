import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Corporate users in the EasySign system represent employees of companies who
 * create contract documents. Each user is associated with a company name and
 * may include department and position information. The unique email address is
 * used for login and communication. Timestamp fields track creation, updates,
 * and soft deletion.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEasySignCorporateUser = {
  /** Unique identifier of the corporate user */
  id: string & tags.Format<"uuid">;

  /** Corporate user's email address, unique */
  email: string;

  /** Name of the corporation the user belongs to */
  company_name: string;

  /** Department name or unit within the corporation */
  department?: string | null | undefined;

  /** Job position or title of the corporate user */
  position?: string | null | undefined;

  /** Timestamp when the corporate user record was created */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the corporate user record was last updated */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp for the corporate user account */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IEasySignCorporateUser {
  /**
   * Request payload to create a new corporate user account. Email and
   * company_name are mandatory. Department and position are optional.
   */
  export type ICreate = {
    /** Corporate user's email address for registration */
    email: string;

    /** Name of the corporation for the user */
    company_name: string;

    /** Optional department name or unit */
    department?: string | null | undefined;

    /** Optional position or job title */
    position?: string | null | undefined;
  };

  /** Request payload for corporate user login containing email and password. */
  export type ILogin = {
    /** Email address of the corporate user for login */
    email: string;

    /** Password string for authentication */
    password: string;
  };

  /**
   * Request payload containing refresh token to renew access token for
   * corporate user.
   */
  export type IRefresh = {
    /** Refresh token string for token renewal */
    refreshToken: string;
  };

  /**
   * Authorization response including user identification and JWT tokens for
   * corporate user.
   */
  export type IAuthorized = {
    /** Unique identifier of the corporate user */
    id: string & tags.Format<"uuid">;

    /** Corporate user's email address */
    email: string;

    /** Name of the corporation the user belongs to */
    company_name: string;

    /** Department name or unit within the corporation */
    department?: string | null | undefined;

    /** Job position or title of the corporate user */
    position?: string | null | undefined;

    /** Timestamp when the corporate user record was created */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when the corporate user record was last updated */
    updated_at: string & tags.Format<"date-time">;

    /** Soft delete timestamp for the corporate user account */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };
}
