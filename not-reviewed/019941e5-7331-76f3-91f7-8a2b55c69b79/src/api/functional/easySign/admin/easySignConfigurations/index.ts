import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEasySignEasySignConfigurations } from "../../../../structures/IEasySignEasySignConfigurations";
import { IPageIEasySignEasySignConfigurations } from "../../../../structures/IPageIEasySignEasySignConfigurations";

/**
 * Retrieve filtered, paginated list of EasySign system configuration entries.
 *
 * Retrieve a filtered and paginated list of system configuration entries from
 * EasySign. This operation supports advanced search capabilities, allowing
 * clients to filter configurations by config key, value, or description. It
 * includes pagination parameters to enable efficient data loading and sorting
 * by creation or update timestamps.
 *
 * Only authorized users with admin-level privileges can access detailed
 * configuration settings to prevent unauthorized changes to critical system
 * parameters.
 *
 * The operation references the 'easy_sign_configurations' Prisma DB table which
 * contains key-value pairs representing system controls, with audit trail
 * fields for created and updated timestamps, and supports soft deletion.
 *
 * This operation can be combined with individual configuration retrieval and
 * update operations to fully manage EasySign system settings.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for system
 *   configurations
 * @path /easySign/admin/easySignConfigurations
 * @accessor api.functional.easySign.admin.easySignConfigurations.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for system configurations */
    body: IEasySignEasySignConfigurations.IRequest;
  };
  export type Body = IEasySignEasySignConfigurations.IRequest;
  export type Response = IPageIEasySignEasySignConfigurations.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/easySign/admin/easySignConfigurations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/easySign/admin/easySignConfigurations";
  export const random = (): IPageIEasySignEasySignConfigurations.ISummary =>
    typia.random<IPageIEasySignEasySignConfigurations.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific EasySign system configuration by ID.
 *
 * Retrieve detailed information for a specific EasySign system configuration
 * entry by ID. The operation returns all columns including config_key,
 * config_value, description, and audit timestamps.
 *
 * Security ensures that only administrators with the proper role can view
 * sensitive system configuration details to protect system integrity.
 *
 * The endpoint requires the 'id' UUID path parameter which must correspond to
 * an existing configuration entry.
 *
 * Use this endpoint along with the list and update operations for complete
 * configuration management.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target EasySign system configuration
 * @path /easySign/admin/easySignConfigurations/:id
 * @accessor api.functional.easySign.admin.easySignConfigurations.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target EasySign system configuration */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IEasySignEasySignConfigurations;

  export const METADATA = {
    method: "GET",
    path: "/easySign/admin/easySignConfigurations/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/easySign/admin/easySignConfigurations/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IEasySignEasySignConfigurations =>
    typia.random<IEasySignEasySignConfigurations>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
