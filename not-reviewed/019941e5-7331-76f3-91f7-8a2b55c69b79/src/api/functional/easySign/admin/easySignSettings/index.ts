import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEasySignEasySignSettings } from "../../../../structures/IEasySignEasySignSettings";
import { IPageIEasySignEasySignSettings } from "../../../../structures/IPageIEasySignEasySignSettings";

/**
 * Search and retrieve paginated EasySign system setting entries.
 *
 * Retrieve a filtered and paginated list of EasySign system settings. Supports
 * filtering by setting_key, setting_value, and notes fields. Pagination and
 * sorting options enable scalable management of configurations.
 *
 * Access is limited to admin users to ensure only authorized personnel manage
 * critical system behaviors.
 *
 * Underlying Prisma table is 'easy_sign_settings' with audit and soft deletion
 * support.
 *
 * Use together with detail retrieval and update endpoints for full CRUD
 * capabilities.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for system
 *   settings filtering
 * @path /easySign/admin/easySignSettings
 * @accessor api.functional.easySign.admin.easySignSettings.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for system settings
     * filtering
     */
    body: IEasySignEasySignSettings.IRequest;
  };
  export type Body = IEasySignEasySignSettings.IRequest;
  export type Response = IPageIEasySignEasySignSettings.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/easySign/admin/easySignSettings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/easySign/admin/easySignSettings";
  export const random = (): IPageIEasySignEasySignSettings.ISummary =>
    typia.random<IPageIEasySignEasySignSettings.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve specific EasySign system setting details by ID.
 *
 * Retrieve full details of a specific EasySign system setting entry by its
 * unique ID. Includes key, value, notes, and audit fields.
 *
 * This endpoint is restricted to administrative users and complements list and
 * update operations.
 *
 * The path parameter 'id' is mandatory and must be a valid UUID key of the
 * setting.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target EasySign system setting
 * @path /easySign/admin/easySignSettings/:id
 * @accessor api.functional.easySign.admin.easySignSettings.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target EasySign system setting */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IEasySignEasySignSettings;

  export const METADATA = {
    method: "GET",
    path: "/easySign/admin/easySignSettings/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/easySign/admin/easySignSettings/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IEasySignEasySignSettings =>
    typia.random<IEasySignEasySignSettings>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
