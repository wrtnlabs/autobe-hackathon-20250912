import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEasySignTeamLeader } from "../../../structures/IEasySignTeamLeader";

/**
 * Create new team leader user account and issue initial JWT tokens.
 *
 * This API endpoint enables new team leaders to register for the EasySign
 * system. It accepts registration details such as email, name, and optionally
 * mobile phone. The data collected will be stored in the
 * 'easy_sign_teamleaders' table. During registration, the system creates
 * authentication entries, issues JWT access and refresh tokens, and returns
 * them to the client for subsequent authorized access. Proper validation and
 * auditing occur, referencing the exact fields in the 'easy_sign_teamleaders'
 * schema: 'email' (unique), 'name', and 'mobile_phone' (optional). This
 * endpoint is publicly accessible to allow onboarding of new team leaders
 * without prior authorization. It complements login and token refresh
 * operations in the authentication workflow, ensuring secure and traceable
 * registration.
 *
 * @param props.connection
 * @param props.body Payload containing registration information to create a new
 *   team leader user
 * @setHeader token.access Authorization
 *
 * @path /auth/teamLeader/join
 * @accessor api.functional.auth.teamLeader.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /**
     * Payload containing registration information to create a new team
     * leader user
     */
    body: IEasySignTeamLeader.ICreate;
  };
  export type Body = IEasySignTeamLeader.ICreate;
  export type Response = IEasySignTeamLeader.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/teamLeader/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/teamLeader/join";
  export const random = (): IEasySignTeamLeader.IAuthorized =>
    typia.random<IEasySignTeamLeader.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate team leader credentials and issue JWT tokens.
 *
 * Allows existing team leaders to authenticate by providing valid credentials,
 * receiving JWT tokens to access system resources. It verifies provided email
 * and password against records in 'easy_sign_teamleaders' and related
 * credentials for security. Successful authentication results in issuance of
 * access and refresh tokens. This endpoint is publicly accessible to enable
 * user login and requires sensitive data handling and auditing. It complements
 * registration (join) and token refresh operations and manages the
 * authentication lifecycle securely.
 *
 * @param props.connection
 * @param props.body Payload containing login credentials for team leader
 *   authentication
 * @setHeader token.access Authorization
 *
 * @path /auth/teamLeader/login
 * @accessor api.functional.auth.teamLeader.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Payload containing login credentials for team leader authentication */
    body: IEasySignTeamLeader.ILogin;
  };
  export type Body = IEasySignTeamLeader.ILogin;
  export type Response = IEasySignTeamLeader.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/teamLeader/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/teamLeader/login";
  export const random = (): IEasySignTeamLeader.IAuthorized =>
    typia.random<IEasySignTeamLeader.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh JWT access token using a valid refresh token.
 *
 * Enables team leaders to refresh their JWT access tokens by providing a valid
 * refresh token. This operation maintains secure session continuity without
 * requiring re-authentication with credentials. It works within the context of
 * the 'easy_sign_teamleaders' role and uses stored authentication token records
 * linked to the user. Security is maintained via validation of token expiration
 * and revocation status. This endpoint complements login and registration
 * services in the overall authentication infrastructure.
 *
 * @param props.connection
 * @param props.body Payload containing a refresh token to obtain a new access
 *   token
 * @setHeader token.access Authorization
 *
 * @path /auth/teamLeader/refresh
 * @accessor api.functional.auth.teamLeader.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Payload containing a refresh token to obtain a new access token */
    body: IEasySignTeamLeader.IRefresh;
  };
  export type Body = IEasySignTeamLeader.IRefresh;
  export type Response = IEasySignTeamLeader.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/teamLeader/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/teamLeader/refresh";
  export const random = (): IEasySignTeamLeader.IAuthorized =>
    typia.random<IEasySignTeamLeader.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
