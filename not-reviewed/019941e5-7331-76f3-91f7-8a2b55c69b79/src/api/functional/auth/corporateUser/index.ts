import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEasySignCorporateUser } from "../../../structures/IEasySignCorporateUser";

/**
 * Create and register corporate user account for EasySign.
 *
 * Register a new corporate user account for EasySign with necessary email and
 * company information. This operation securely creates the user record in the
 * database, issuing JWT tokens upon successful registration. It references the
 * easy_sign_corporateusers table in the Prisma schema. Input validation and
 * uniqueness constraints for the email are enforced. The response provides
 * authorized access tokens. This is a public (non-authenticated) endpoint
 * enabling new users to join.
 *
 * @param props.connection
 * @param props.body Corporate user registration input data
 * @setHeader token.access Authorization
 *
 * @path /auth/corporateUser/join
 * @accessor api.functional.auth.corporateUser.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** Corporate user registration input data */
    body: IEasySignCorporateUser.ICreate;
  };
  export type Body = IEasySignCorporateUser.ICreate;
  export type Response = IEasySignCorporateUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/corporateUser/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/corporateUser/join";
  export const random = (): IEasySignCorporateUser.IAuthorized =>
    typia.random<IEasySignCorporateUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate corporate user and generate access tokens.
 *
 * Authenticate corporate users using email and password to obtain JWT access
 * tokens for subsequent API authorization. This operation validates user
 * credentials against stored hashed passwords in the Prisma schema's
 * easy_sign_user_credentials table. Successful login issues access and refresh
 * tokens. This is a public endpoint.
 *
 * @param props.connection
 * @param props.body Credentials for corporate user login
 * @setHeader token.access Authorization
 *
 * @path /auth/corporateUser/login
 * @accessor api.functional.auth.corporateUser.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Credentials for corporate user login */
    body: IEasySignCorporateUser.ILogin;
  };
  export type Body = IEasySignCorporateUser.ILogin;
  export type Response = IEasySignCorporateUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/corporateUser/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/corporateUser/login";
  export const random = (): IEasySignCorporateUser.IAuthorized =>
    typia.random<IEasySignCorporateUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh access tokens using valid corporate user refresh token.
 *
 * Refresh JWT access tokens for corporate users by validating provided refresh
 * token. This operation issues new access and refresh tokens to maintain
 * session continuity. References easy_sign_auth_tokens for token storage and
 * easy_sign_corporateusers for user validation. Allows corporate users to
 * maintain authenticated sessions without reentering credentials.
 *
 * @param props.connection
 * @param props.body Input refresh token to obtain new access tokens for
 *   corporate user
 * @setHeader token.access Authorization
 *
 * @path /auth/corporateUser/refresh
 * @accessor api.functional.auth.corporateUser.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Input refresh token to obtain new access tokens for corporate user */
    body: IEasySignCorporateUser.IRefresh;
  };
  export type Body = IEasySignCorporateUser.IRefresh;
  export type Response = IEasySignCorporateUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/corporateUser/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/corporateUser/refresh";
  export const random = (): IEasySignCorporateUser.IAuthorized =>
    typia.random<IEasySignCorporateUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
