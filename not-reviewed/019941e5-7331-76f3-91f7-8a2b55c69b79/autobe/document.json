{"operations":[{"specification":"Authentication operation to allow a freelancerUser (member kind role) to create a new account by joining the system. It involves submitting email and password credentials, which are securely stored. The system responds with a JWT token pair (access and refresh tokens) for authenticated sessions. This endpoint is public and does not require authentication, suitable for new users. This operation corresponds to easy_sign_freelancerusers table, where user data is persisted. It follows Prisma schema fields including email as unique identifier and makes use of easy_sign_user_credentials for password hash storage. After successful join, an authorized JWT response including user info is issued.","authorizationType":"join","description":"This operation provides user registration for the role freelancerUser, whose users are individual freelancers able to create and send contracts without approval. It consumes email and password. The email field corresponds to easy_sign_freelancerusers.email which is unique. Password hashes are stored in easy_sign_user_credentials linked by user id. Upon successful registration, JWT tokens including accessToken and refreshToken will be issued, represented by response type IEasySignFreelancerUser.IAuthorized. This endpoint is open to new user registrations, supporting token issuance and subsequent authenticated access.\n\nSecurity considerations include proper password hashing before storage, email uniqueness verification, and secure JWT token generation. This operation forms the basis for all authenticated interactions for freelancer users.\n\nRelated operations include login and refresh token issuance, supporting session management lifecycle.\n\nThe path /auth/freelancerUser/join is explicitly designated for user registration requests for this role.\n\nSoft deletion in easy_sign_freelancerusers supports user deactivation without data loss.","summary":"Register a new freelancerUser account and issue JWT tokens","parameters":[],"requestBody":{"description":"Payload to register a freelancerUser, including email and password as basic credentials","typeName":"IEasySignFreelancerUser.ICreate"},"responseBody":{"description":"Authorization result with JWT tokens and user info for freelancerUser","typeName":"IEasySignFreelancerUser.IAuthorized"},"authorizationRole":null,"name":"join","path":"/auth/freelancerUser/join","method":"post"},{"specification":"Login authentication for freelancerUser role, which allows existing users to authenticate via email and password. The system validates credentials by comparing with stored password hashes in easy_sign_user_credentials and issues a JWT token pair for access and refresh. This operation relates to the easy_sign_freelancerusers table, referencing user email and securely stored password hashes. It provides user access to authenticated APIs.\n\nSecurity measures include protection against brute force, rate limiting, and appropriate token lifetime management. The response contains JWT tokens formatted as IEasySignFreelancerUser.IAuthorized.\n\nThe endpoint is public to allow user login attempts.\n\nThis endpoint supports the login lifecycle for freelancerUser type users.","authorizationType":"login","description":"Authenticate freelancerUser by verifying email and password credentials. Returns JWT access and refresh tokens for authenticated session management. Password safety and uniqueness of email enforced per schema easy_sign_freelancerusers and easy_sign_user_credentials.\n\nUseful for daily login and obtaining authorized access tokens for protected APIs.\n\nPath /auth/freelancerUser/login serves as authentication entry point for this role.\n\nSecurity threat mitigation includes hashed password verification and token invalidation on logout.","summary":"Authenticate freelancerUser and issue JWT tokens","parameters":[],"requestBody":{"description":"Credentials payload with email and password to authenticate freelancerUser","typeName":"IEasySignFreelancerUser.ILogin"},"responseBody":{"description":"Authorization tokens response for authenticated freelancerUser","typeName":"IEasySignFreelancerUser.IAuthorized"},"authorizationRole":null,"name":"login","path":"/auth/freelancerUser/login","method":"post"},{"specification":"Refresh token operation for freelancerUser role to renew the access token using a valid refresh token. This allows continuous user session without re-login. It references the easy_sign_auth_tokens and easy_sign_freelancerusers tables for token validation and linkage.\n\nSecurity involves refresh token expiration checks and detection of revoked tokens. Upon success, new JWT access and refresh tokens are issued matching response schema IEasySignFreelancerUser.IAuthorized.\n\nThis endpoint is accessible after initial login and requires a valid refresh token.\n\nPath /auth/freelancerUser/refresh is intended for secure token renewal.","authorizationType":"refresh","description":"Refresh the JWT access token for freelancerUser using a valid refresh token. Validates token and issues updated token set following security policies.\n\nImportant for maintaining user sessions without requiring frequent logins.\n\nEnsures only authorized users maintain active sessions with up-to-date tokens.\n\nSecurity measures include revocation check and token expiration.\n\nReturned tokens conform to IEasySignFreelancerUser.IAuthorized.\n\nRelated to login and join operations for session flow.","summary":"Refresh JWT tokens for freelancerUser","parameters":[],"requestBody":{"description":"Payload containing refresh token for freelancerUser token renewal","typeName":"IEasySignFreelancerUser.IRefresh"},"responseBody":{"description":"New JWT tokens response for freelancerUser","typeName":"IEasySignFreelancerUser.IAuthorized"},"authorizationRole":null,"name":"refresh","path":"/auth/freelancerUser/refresh","method":"post"},{"specification":"This API operation implements the registration endpoint for the corporateUser role, who is a member kind user in the EasySign electronic contract service. It allows new corporate users to join the service by providing necessary registration information such as email, company details, and user credentials. Upon successful registration, the system creates a new corporate user record in the database, issues JWT tokens for authentication, and enables the user to access member-level functionalities. The operation follows security best practices to ensure sensitive user data like passwords are hashed and stored securely. The endpoint uses a POST HTTP method to create new user resources conforming to the easy_sign_corporateusers Prisma schema, which includes unique constraints on the email field and tracks creation, updated, and (soft) deletion timestamps.\n\nThis registration does not require prior authentication, hence it is designated as a \"join\" authorizationType and is accessible publicly.\n\nThe response body returns an authorization response type \"IEasySignCorporateUser.IAuthorized\" that encapsulates the issued access and refresh tokens and user identity information.\n\nThis API operation relates closely with the login and refresh token operations to provide a full authentication lifecycle for corporate users.","authorizationType":"join","description":"Register a new corporate user account for EasySign with necessary email and company information. This operation securely creates the user record in the database, issuing JWT tokens upon successful registration. It references the easy_sign_corporateusers table in the Prisma schema. Input validation and uniqueness constraints for the email are enforced. The response provides authorized access tokens. This is a public (non-authenticated) endpoint enabling new users to join.","summary":"Create and register corporate user account for EasySign","parameters":[],"requestBody":{"description":"Corporate user registration input data","typeName":"IEasySignCorporateUser.ICreate"},"responseBody":{"description":"Authorized corporate user access tokens and user info","typeName":"IEasySignCorporateUser.IAuthorized"},"authorizationRole":null,"name":"join","path":"/auth/corporateUser/join","method":"post"},{"specification":"This API operation implements the login endpoint for corporateUser role in EasySign service. It allows existing corporate users to authenticate by submitting their credentials such as email and password. The server validates the credentials against stored hashed passwords in easy_sign_user_credentials linked to the corporate user. Upon successful authentication, the system issues JWT access and refresh tokens enabling secure, stateless authentication for session management. The endpoint uses POST method and expects a login request body conforming to IEasySignCorporateUser.ILogin schema.\n\nThe authorizationType is \"login\", indicating this is a credential validation operation accessible publicly.\n\nThe response returns IEasySignCorporateUser.IAuthorized type containing access tokens and user details necessary for authenticated sessions. The operation is tightly integrated with join and refresh operations to manage user lifecycle securely.\n\nDirect reference is made to easy_sign_corporateusers and easy_sign_user_credentials tables to validate user password and status.\n\nThis endpoint does not require prior authentication.","authorizationType":"login","description":"Authenticate corporate users using email and password to obtain JWT access tokens for subsequent API authorization. This operation validates user credentials against stored hashed passwords in the Prisma schema's easy_sign_user_credentials table. Successful login issues access and refresh tokens. This is a public endpoint.","summary":"Authenticate corporate user and generate access tokens","parameters":[],"requestBody":{"description":"Credentials for corporate user login","typeName":"IEasySignCorporateUser.ILogin"},"responseBody":{"description":"Authorized corporate user access tokens and details","typeName":"IEasySignCorporateUser.IAuthorized"},"authorizationRole":null,"name":"login","path":"/auth/corporateUser/login","method":"post"},{"specification":"This API operation allows corporate users who possess a valid refresh token to request a new access token without providing credentials again. The operation validates the refresh token against the token store linked to the corporate user (easy_sign_auth_tokens table) and issues a new JWT access token upon success.\n\nThis is a \"refresh\" authorizationType operation designed specifically for ongoing authenticated sessions, and requires the refresh token to be valid and unrevoked.\n\nThe API uses POST HTTP method with a request body conforming to IEasySignCorporateUser.IRefresh schema that provides the refresh token.\n\nUpon success, the server responds with new authorization tokens encapsulated in IEasySignCorporateUser.IAuthorized type.\n\nThis operation facilitates token renewal to maintain session continuity without reauthentication.\n\nIt references easy_sign_corporateusers and easy_sign_auth_tokens Prisma tables for token validation and issuance.","authorizationType":"refresh","description":"Refresh JWT access tokens for corporate users by validating provided refresh token. This operation issues new access and refresh tokens to maintain session continuity. References easy_sign_auth_tokens for token storage and easy_sign_corporateusers for user validation. Allows corporate users to maintain authenticated sessions without reentering credentials.","summary":"Refresh access tokens using valid corporate user refresh token","parameters":[],"requestBody":{"description":"Input refresh token to obtain new access tokens for corporate user","typeName":"IEasySignCorporateUser.IRefresh"},"responseBody":{"description":"Newly issued authorized tokens for corporate user","typeName":"IEasySignCorporateUser.IAuthorized"},"authorizationRole":null,"name":"refresh","path":"/auth/corporateUser/refresh","method":"post"},{"specification":"This API operation defines the user registration process (join) for the 'teamLeader' role in the EasySign system. It creates a new team leader user account and issues initial JWT tokens for authentication. This operation involves accepting the necessary registration information as defined in the input schema and returning authorized tokens. It is a public endpoint that allows new team leaders to securely register. The operation is associated with the 'easy_sign_teamleaders' table in the Actors namespace, which contains fields like 'email', 'name', and 'mobile_phone'. The registration ensures users are added into this table with audit timestamps. The operation uses JWT authentication issuing access and refresh tokens. Security considerations include proper validation of the registration data including email uniqueness, password complexity (secured in a linked credentials table), and prevention of registration abuse. This operation is integral to the authentication workflow, typically used alongside 'login' and 'refresh' operations for managing session lifecycle.","authorizationType":"join","description":"This API endpoint enables new team leaders to register for the EasySign system. It accepts registration details such as email, name, and optionally mobile phone. The data collected will be stored in the 'easy_sign_teamleaders' table. During registration, the system creates authentication entries, issues JWT access and refresh tokens, and returns them to the client for subsequent authorized access. Proper validation and auditing occur, referencing the exact fields in the 'easy_sign_teamleaders' schema: 'email' (unique), 'name', and 'mobile_phone' (optional). This endpoint is publicly accessible to allow onboarding of new team leaders without prior authorization. It complements login and token refresh operations in the authentication workflow, ensuring secure and traceable registration.","summary":"Create new team leader user account and issue initial JWT tokens","parameters":[],"requestBody":{"description":"Payload containing registration information to create a new team leader user","typeName":"IEasySignTeamLeader.ICreate"},"responseBody":{"description":"Authorized team leader user information with issued tokens","typeName":"IEasySignTeamLeader.IAuthorized"},"authorizationRole":"teamLeader","name":"join","path":"/auth/teamLeader/join","method":"post"},{"specification":"This API operation handles login authentication for the 'teamLeader' role in the EasySign system. It accepts user credentials, verifies them against the secure data stored in linked user credential tables, and upon success issues JWT access and refresh tokens. The 'easy_sign_teamleaders' table documents include fields like 'email', 'name', and 'mobile_phone'. This login mechanism ensures only authorized team leaders can access protected resources. Security measures include password hash verification, possible multi-factor authentication triggers, and logging of authentication events. This operation serves as a critical authentication gateway and works together with 'join' (registration) and 'refresh' (token renewal) operations to maintain secure sessions.","authorizationType":"login","description":"Allows existing team leaders to authenticate by providing valid credentials, receiving JWT tokens to access system resources. It verifies provided email and password against records in 'easy_sign_teamleaders' and related credentials for security. Successful authentication results in issuance of access and refresh tokens. This endpoint is publicly accessible to enable user login and requires sensitive data handling and auditing. It complements registration (join) and token refresh operations and manages the authentication lifecycle securely.","summary":"Authenticate team leader credentials and issue JWT tokens","parameters":[],"requestBody":{"description":"Payload containing login credentials for team leader authentication","typeName":"IEasySignTeamLeader.ILogin"},"responseBody":{"description":"Authorized team leader user information with issued tokens","typeName":"IEasySignTeamLeader.IAuthorized"},"authorizationRole":"teamLeader","name":"login","path":"/auth/teamLeader/login","method":"post"},{"specification":"This API operation provides token refresh functionality for the 'teamLeader' role in the EasySign system. Given a valid refresh token, it issues a new access token without requiring user credentials. It references the 'easy_sign_teamleaders' table contextually, although the operation mainly deals with token management and validation. The refresh token management ensures session continuity and secure token lifecycle handling. This protected endpoint requires a valid refresh token and is a key part of the authentication token management system, complementing registration and login operations.","authorizationType":"refresh","description":"Enables team leaders to refresh their JWT access tokens by providing a valid refresh token. This operation maintains secure session continuity without requiring re-authentication with credentials. It works within the context of the 'easy_sign_teamleaders' role and uses stored authentication token records linked to the user. Security is maintained via validation of token expiration and revocation status. This endpoint complements login and registration services in the overall authentication infrastructure.","summary":"Refresh JWT access token using a valid refresh token","parameters":[],"requestBody":{"description":"Payload containing a refresh token to obtain a new access token","typeName":"IEasySignTeamLeader.IRefresh"},"responseBody":{"description":"Newly issued authorized team leader tokens and user info","typeName":"IEasySignTeamLeader.IAuthorized"},"authorizationRole":"teamLeader","name":"refresh","path":"/auth/teamLeader/refresh","method":"post"},{"specification":"This API operation implements the user registration (join) functionality for admin users in the EasySign system. It supports the creation of a new admin account with required information validated. The operation creates a new record in the easy_sign_admins table, ensuring the uniqueness of the email and username fields. Upon successful registration, JWT access and refresh tokens are issued compliant with the security standards and 2FA policies if enabled. The admin can then use these tokens for authentication and accessing protected resources. This operation is publicly accessible without authentication to allow new admins to register. It carefully handles input validation and business rules related to admin account creation. As per the security schema, authentication details such as password hashes will be stored separately in easy_sign_user_credentials linked by the admin user id. The token issuance process complies with the Access Token (15-30 minutes) and Refresh Token (7-30 days) expiration policy.","authorizationType":"join","description":"This operation allows creation of new administrator accounts with full system privileges. It inserts a new record into the easy_sign_admins table including unique email and username. The operation returns JWT access and refresh tokens encapsulated in IEasySignAdmin.IAuthorized which are used to access protected admin endpoints. This aligns with the business requirements for secure and managed administrator onboarding. Admin users are expected to comply with 2FA authentication procedures.","summary":"Create new administrator account and issue JWT tokens, managing registration in the easy_sign_admins table.","parameters":[],"requestBody":{"description":"Payload for new administrator registration including unique email and username.","typeName":"IEasySignAdmin.ICreate"},"responseBody":{"description":"Authorization information including JWT tokens and admin user profile.","typeName":"IEasySignAdmin.IAuthorized"},"authorizationRole":"admin","name":"join","path":"/auth/admin/join","method":"post"},{"specification":"This API operation allows system administrators to authenticate by logging into the EasySign system. It validates credentials against the easy_sign_user_credentials and associated easy_sign_admins records to confirm both identity and role privilege. On successful login, the operation generates JWT access and refresh tokens consistent with established expiration policies. The login process supports 2FA where applicable, ensuring elevated security for administrative users. This endpoint is a public interface to initiate admin authentication and token issuance. The tokens issued here must be used for subsequent admin-protected API calls. The schema validates the uniqueness and credentials correctness before token generation.","authorizationType":"login","description":"Allows administrator users to login by providing valid credentials, returning JWT access and refresh tokens encapsulated in IEasySignAdmin.IAuthorized. Ensures admin role verification and supports 2FA as necessary.","summary":"Authenticate administrator users and issue JWT tokens for session management.","parameters":[],"requestBody":{"description":"Administrator login credentials including email and password hash verification data.","typeName":"IEasySignAdmin.ILoginRequest"},"responseBody":{"description":"Authorization tokens and admin info upon successful login.","typeName":"IEasySignAdmin.IAuthorized"},"authorizationRole":"admin","name":"login","path":"/auth/admin/login","method":"post"},{"specification":"This API operation refreshes existing JWT access tokens for authenticated admins. It requires a valid refresh token issued previously to an admin user. The operation verifies the token, confirms the admin user's active status and role, and issues a new access token with an updated expiration timestamp while optionally renewing the refresh token as well. This ensures continuous secure access without requiring re-authentication via credentials. It interacts with the easy_sign_auth_tokens table linked to easy_sign_admins to manage the token lifecycle. As per security standards, the refresh token expiration is longer than access tokens. This operation is critical in admin session management workflows to enhance security and usability.","authorizationType":"refresh","description":"Refresh existing JWT tokens for administrator sessions using a valid refresh token. Issues new access tokens according to configured expiration policies.","summary":"Renew JWT access tokens for authenticated administrator users via refresh tokens.","parameters":[],"requestBody":{"description":"Refresh token payload containing the refresh token string to validate and renew session.","typeName":"IEasySignAdmin.IRefreshRequest"},"responseBody":{"description":"New authorization tokens including access and refresh tokens in IEasySignAdmin.IAuthorized.","typeName":"IEasySignAdmin.IAuthorized"},"authorizationRole":"admin","name":"refresh","path":"/auth/admin/refresh","method":"post"},{"specification":"This operation retrieves a paginated list of EasySign system configuration items with support for filtering, searching, and sorting. It is associated with the 'easy_sign_configurations' table from the Prisma schema that stores global key-value settings impacting the entire EasySign backend system behavior. Users can query configurations by key, value, description, creation, and update timestamps. This facilitates management of system-wide settings and feature toggles in the EasySign service.","description":"Retrieve a filtered and paginated list of system configuration entries from EasySign. This operation supports advanced search capabilities, allowing clients to filter configurations by config key, value, or description. It includes pagination parameters to enable efficient data loading and sorting by creation or update timestamps.\n\nOnly authorized users with admin-level privileges can access detailed configuration settings to prevent unauthorized changes to critical system parameters.\n\nThe operation references the 'easy_sign_configurations' Prisma DB table which contains key-value pairs representing system controls, with audit trail fields for created and updated timestamps, and supports soft deletion.\n\nThis operation can be combined with individual configuration retrieval and update operations to fully manage EasySign system settings.","summary":"Retrieve filtered, paginated list of EasySign system configuration entries","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for system configurations","typeName":"IEasySignEasySignConfigurations.IRequest"},"responseBody":{"description":"Paginated list of EasySign system configuration summaries","typeName":"IPageIEasySignEasySignConfigurations.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/easySign/admin/easySignConfigurations","method":"patch"},{"specification":"This operation retrieves detailed information about a specific EasySign system configuration identified by its UUID primary key. The configuration entity is from the 'easy_sign_configurations' table in the Prisma schema, which stores global system control key-value pairs with descriptions and audit timestamps.\n\nAuthorized admin users can access this endpoint to view full details of individual configuration items, including description and status fields.\n\nPath parameter 'id' is required as UUID corresponding to the configuration's primary key.","description":"Retrieve detailed information for a specific EasySign system configuration entry by ID. The operation returns all columns including config_key, config_value, description, and audit timestamps.\n\nSecurity ensures that only administrators with the proper role can view sensitive system configuration details to protect system integrity.\n\nThe endpoint requires the 'id' UUID path parameter which must correspond to an existing configuration entry.\n\nUse this endpoint along with the list and update operations for complete configuration management.","summary":"Retrieve a specific EasySign system configuration by ID","parameters":[{"name":"id","description":"Unique identifier of the target EasySign system configuration","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed EasySign system configuration information","typeName":"IEasySignEasySignConfigurations"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/easySign/admin/easySignConfigurations/{id}","method":"get"},{"specification":"This operation retrieves a paginated list of EasySign system settings with filtering, search, and sorting capabilities. It operates on the 'easy_sign_settings' Prisma table that stores individual system-level key-value pairs for configuration and feature toggling.\n\nAuthorized administrative users can query settings by key, value, or notes with pagination and sorting by timestamps.\n\nThis endpoint complements individual setting retrieval and update operations to enable complete system settings management in EasySign.","description":"Retrieve a filtered and paginated list of EasySign system settings. Supports filtering by setting_key, setting_value, and notes fields. Pagination and sorting options enable scalable management of configurations.\n\nAccess is limited to admin users to ensure only authorized personnel manage critical system behaviors.\n\nUnderlying Prisma table is 'easy_sign_settings' with audit and soft deletion support.\n\nUse together with detail retrieval and update endpoints for full CRUD capabilities.","summary":"Search and retrieve paginated EasySign system setting entries","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for system settings filtering","typeName":"IEasySignEasySignSettings.IRequest"},"responseBody":{"description":"Paginated list of EasySign system setting summary information","typeName":"IPageIEasySignEasySignSettings.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/easySign/admin/easySignSettings","method":"patch"},{"specification":"This operation fetches detailed information for a single EasySign system setting identified by its unique UUID. It maps to the 'easy_sign_settings' table which contains individual key-value system configurations with optional notes and audit timestamps.\n\nOnly users assigned the 'admin' role have permission to access detailed setting information.\n\nThe path parameter 'id' must be a UUID corresponding to the setting record primary key.","description":"Retrieve full details of a specific EasySign system setting entry by its unique ID. Includes key, value, notes, and audit fields.\n\nThis endpoint is restricted to administrative users and complements list and update operations.\n\nThe path parameter 'id' is mandatory and must be a valid UUID key of the setting.","summary":"Retrieve specific EasySign system setting details by ID","parameters":[{"name":"id","description":"Unique identifier of the target EasySign system setting","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed EasySign system setting information","typeName":"IEasySignEasySignSettings"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/easySign/admin/easySignSettings/{id}","method":"get"}],"components":{"authorization":[{"name":"freelancerUser","description":"Individual user who creates and sends contracts, and completes signing without needing approval steps.","kind":"member"},{"name":"corporateUser","description":"Corporate user who requires contract review and approval by team leader before sending for signing, with differentiated permissions for creators, approvers, and signers.","kind":"member"},{"name":"teamLeader","description":"Corporate team leader who reviews and approves contract documents before they are sent out for signature.","kind":"member"},{"name":"admin","description":"System administrator with full access to manage users, system settings, logs, and oversee all administrative functions.","kind":"admin"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageIEasySignEasySignConfigurations.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEasySignEasySignConfigurations.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEasySignEasySignSettings.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEasySignEasySignSettings.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IEasySignFreelancerUser.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"User's unique email address used for login and communication."},"password":{"type":"string","description":"User's plaintext password for account creation, which will be securely hashed before storage. Must be strong and confidential."},"nickname":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional user nickname or alias, may be null."}},"required":["email","password"],"description":"Payload to register a freelancerUser, including email and password as basic credentials.\n\nSecurity note: Password will be hashed securely; do not expose plaintext in any responses.\n"},"IEasySignFreelancerUser.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated freelancer user."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","token"],"description":"Authorization result with JWT tokens and user info for freelancerUser.\n\nContains user ID and token details for session management."},"IEasySignFreelancerUser.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Email address used for authentication."},"password":{"type":"string","description":"User's plaintext password for login authentication."}},"required":["email","password"],"description":"Credentials payload with email and password to authenticate freelancerUser.\n\nUsed to verify identity and issue JWT tokens upon successful login."},"IEasySignFreelancerUser.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token string to renew JWT access tokens."}},"required":["refresh_token"],"description":"Payload containing refresh token for freelancerUser token renewal.\n\nAllows obtaining new access tokens without re-authentication."},"IEasySignCorporateUser":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the corporate user"},"email":{"type":"string","description":"Corporate user's email address, unique"},"company_name":{"type":"string","description":"Name of the corporation the user belongs to"},"department":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Department name or unit within the corporation"},"position":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Job position or title of the corporate user"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the corporate user record was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the corporate user record was last updated"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp for the corporate user account"}},"required":["id","email","company_name","created_at","updated_at"],"description":"Corporate users in the EasySign system represent employees of companies who create contract documents. Each user is associated with a company name and may include department and position information. The unique email address is used for login and communication. Timestamp fields track creation, updates, and soft deletion."},"IEasySignCorporateUser.ICreate":{"type":"object","properties":{"email":{"type":"string","description":"Corporate user's email address for registration"},"company_name":{"type":"string","description":"Name of the corporation for the user"},"department":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional department name or unit"},"position":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional position or job title"}},"required":["email","company_name"],"description":"Request payload to create a new corporate user account. Email and company_name are mandatory. Department and position are optional."},"IEasySignCorporateUser.ILogin":{"type":"object","properties":{"email":{"type":"string","description":"Email address of the corporate user for login"},"password":{"type":"string","description":"Password string for authentication"}},"required":["email","password"],"description":"Request payload for corporate user login containing email and password."},"IEasySignCorporateUser.IRefresh":{"type":"object","properties":{"refreshToken":{"type":"string","description":"Refresh token string for token renewal"}},"required":["refreshToken"],"description":"Request payload containing refresh token to renew access token for corporate user."},"IEasySignCorporateUser.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the corporate user"},"email":{"type":"string","description":"Corporate user's email address"},"company_name":{"type":"string","description":"Name of the corporation the user belongs to"},"department":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Department name or unit within the corporation"},"position":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Job position or title of the corporate user"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the corporate user record was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the corporate user record was last updated"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp for the corporate user account"},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","company_name","created_at","updated_at","token"],"description":"Authorization response including user identification and JWT tokens for corporate user."},"IEasySignTeamLeader":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier of the team leader user.\n\nFormat: UUID"},"email":{"type":"string","format":"email","description":"Email used by the team leader for authentication and communication.\n\nUnique per leader.\n\nFormat: email string"},"name":{"type":"string","description":"Full name of the team leader user."},"mobile_phone":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional contact phone number of the team leader.\n\nFormat: string\n\nNote: May be null or undefined."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp.\n\nFormat: ISO 8601 date-time string."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp.\n\nFormat: ISO 8601 date-time string."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp to mark suspension or removal.\n\nFormat: ISO 8601 date-time string or null if not deleted."}},"required":["id","email","name","created_at","updated_at"],"description":"Team leader user records handle corporate contract approvals and\nmanagement. Includes profile data and temporal fields for status tracking\nand auditing. Soft deletion supported for account termination or\nsuspension."},"IEasySignTeamLeader.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Email used by the team leader for authentication and communication.\n\nUnique per leader.\n\nFormat: email string"},"name":{"type":"string","description":"Full name of the team leader user."},"mobile_phone":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional contact phone number of the team leader.\n\nFormat: string\n\nNote: May be null or undefined."}},"required":["email","name"],"description":"Payload for creating a new team leader user.\n\nRequired properties:\n- email: valid email string\n- name: string\nOptional property:\n- mobile_phone: nullable string\n\nNote: id, created_at, updated_at, deleted_at are generated by server.\nactor ids or authentication info must NOT be included."},"IEasySignTeamLeader.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Email used by the team leader for authentication and communication.\n\nUnique per leader.\n\nFormat: email string"},"password":{"type":"string","description":"The plain password provided for authentication. This will be hashed server side."}},"required":["email","password"],"description":"Request payload for team leader login\n\nRequired properties:\n- email: valid email string\n- password: string (client provides raw password which server hashes)"},"IEasySignTeamLeader.IRefresh":{"type":"object","properties":{"refreshToken":{"type":"string","description":"Refresh token string provided by client for token renewal."}},"required":["refreshToken"],"description":"Request payload to refresh JWT tokens for team leader user.\n\nRequired property:\n- refreshToken: string"},"IEasySignTeamLeader.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier of the team leader user.\n\nFormat: UUID"},"email":{"type":"string","format":"email","description":"Email used by the team leader for authentication and communication.\n\nUnique per leader.\n\nFormat: email string"},"name":{"type":"string","description":"Full name of the team leader user."},"mobile_phone":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional contact phone number of the team leader.\n\nFormat: string\n\nNote: May be null or undefined."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp.\n\nFormat: ISO 8601 date-time string."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp.\n\nFormat: ISO 8601 date-time string."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp to mark suspension or removal.\n\nFormat: ISO 8601 date-time string or null if not deleted."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","name","created_at","updated_at","token"],"description":"Response body with JWT tokens and user info for authorized team leader\n\nRequired properties:\n- id: UUID string\n- email: valid email string\n- name: string\n- token: authorization token information (access and refresh tokens)"},"IEasySignAdmin":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the administrator user."},"email":{"type":"string","description":"Administrator's unique email address."},"username":{"type":"string","description":"Unique username of the admin account."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the admin account was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the admin account was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp marking admin deactivation, null if active."}},"required":["id","email","username","created_at","updated_at"],"description":"Administrator user entity representing system administrators with full privileges.\n\nThis entity manages system roles and user permissions in EasySign backend.\n\nIncludes core fields and timestamps for audit and soft deletion support."},"IEasySignAdmin.ICreate":{"type":"object","properties":{"email":{"type":"string","description":"Email address for administrator registration."},"username":{"type":"string","description":"Desired username for the administrative account."}},"required":["email","username"],"description":"Payload to create a new administrator account.\n\nContains only fields necessary to register an administrator.\n\nSystem-generated fields such as id and timestamps are excluded."},"IEasySignAdmin.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the administrator user."},"email":{"type":"string","description":"Administrator's unique email address."},"username":{"type":"string","description":"Unique username of the admin account."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the admin account was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the admin account was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp marking admin deactivation, null if active."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","username","created_at","updated_at","token"],"description":"Authorization response containing JWT tokens for the administrator.\n\nReturned upon successful admin authentication or token refresh."},"IEasySignAdmin.ILoginRequest":{"type":"object","properties":{"email":{"type":"string","description":"Administrator's email address for login."},"password":{"type":"string","description":"Plaintext password for authentication (hashed server-side)."}},"required":["email","password"],"description":"Login request payload for administrator authentication.\n\nIncludes email and password fields."},"IEasySignAdmin.IRefreshRequest":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token string used for token renewal."}},"required":["refresh_token"],"description":"Payload to request JWT token refresh for administrators."},"IEasySignEasySignConfigurations":{"type":"object","description":"EasySign system configuration entity representing global key-value settings for controlling the EasySign backend system. Each configuration has a unique identifier, key, value, and optional description with audit timestamps and soft deletion support.","properties":{"id":{"type":"string","format":"uuid","description":"Primary key.\n\nUnique identifier of the system configuration entry."},"config_key":{"type":"string","description":"Unique configuration key that identifies the setting."},"config_value":{"type":"string","description":"Value associated with the configuration key."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description of the configuration item."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the configuration entry was created.\n\nISO 8601 date-time string with timezone."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the configuration entry was last updated.\n\nISO 8601 date-time string with timezone."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp marking soft deletion of the configuration entry."}},"required":["id","config_key","config_value","created_at","updated_at"]},"IEasySignEasySignConfigurations.IRequest":{"type":"object","description":"Request type for searching and paginating EasySign system configurations.","properties":{"page":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Number of records per page."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional search term to filter configurations."},"sort":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional sort field name."},"direction":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort direction, ascending or descending."}},"required":[]},"IEasySignEasySignSettings":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nGlobally unique identifier for each system setting."},"setting_key":{"type":"string","description":"Unique key identifying this system setting.\n\nA string that represents the name of the setting. It must be unique."},"setting_value":{"type":"string","description":"Value assigned to the system setting key.\n\nThe value of the setting, stored as a string."},"notes":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional textual notes or comments describing the setting usage or effect.\n\nAdditional information about this setting. Can be null if not provided."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the setting was created.\n\nISO 8601 formatted date-time string representing when the setting record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the setting was last modified.\n\nISO 8601 formatted date-time string representing the last modification time."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp indicating soft deletion status.\n\nISO 8601 formatted date-time string or null if the record is active."}},"required":["id","setting_key","setting_value","created_at","updated_at"],"description":"Represents individual system settings for EasySign platform.\n\nEach setting defines a key-value pair used to configure specific behaviors or features.\n\nThe entity supports optional notes for description and audit fields to track creation and modification time.\n\nSoft deletion is supported through the deleted_at timestamp.\n\nThis entity is critical for managing operational parameters and maintaining system configurations."},"IEasySignEasySignSettings.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Page number."},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Limitation of records per a page."},"setting_key":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by setting key for search."},"setting_value":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by setting value for search."},"notes":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by notes content for search."}},"required":[],"description":"Request query parameters for searching and paginating System Settings.\n\nSupports pagination and filtering by key, value, and notes."},"IEasySignEasySignConfigurations.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the EasySign configuration record."},"config_key":{"type":"string","description":"Unique configuration key identifying the system control setting."},"config_value":{"type":"string","description":"Value associated with the configuration key defining system behavior."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description of the configuration item explaining its purpose and usage."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the configuration record was created, in ISO 8601 format."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the configuration record was last updated, in ISO 8601 format."}},"required":["id","config_key","config_value","created_at","updated_at"],"description":"Summary view of EasySign system configuration entries providing key configuration details.\n\nThis includes the unique key, its value, optional description, and timestamps for auditing."},"IEasySignEasySignSettings.ICreate":{"type":"object","properties":{"setting_key":{"type":"string","description":"Unique key identifying this system setting."},"setting_value":{"type":"string","description":"Value assigned to the system setting key."},"notes":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional textual notes or comments describing the setting usage or effect."}},"required":["setting_key","setting_value"],"description":"Properties used to create a new system setting.\n\nIncludes the key and corresponding value with optional notes."},"IEasySignEasySignSettings.IUpdate":{"type":"object","properties":{"setting_key":{"type":"string","description":"Unique key identifying this system setting."},"setting_value":{"type":"string","description":"Value assigned to the system setting key."},"notes":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional textual notes or comments describing the setting usage or effect."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp indicating soft deletion status."}},"required":[],"description":"Used for updating an existing system setting.\n\nAll properties are optional to allow partial updates."},"IEasySignEasySignSettings.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"setting_key":{"type":"string","description":"Unique key identifying this system setting."},"setting_value":{"type":"string","description":"Value assigned to the system setting key."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the setting was created."}},"required":["id","setting_key","setting_value","created_at"],"description":"Basic summary information for listing System Settings.\n\nIncludes key, value, and creation timestamp."},"IPage.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Page number."},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Limitation of records per a page."}},"required":[],"description":"Page request data containing optional page and limit parameters."}}}}