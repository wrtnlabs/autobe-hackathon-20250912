/// Table storing user notifications generated by the community AI system,
/// representing the notification content, type, target user, delivery
/// status, and processing lifecycle. This table holds the main user
/// notification records and links to status history via
/// community_ai_notification_statuses. Notifications reference the recipient
/// user and possibly the source entity triggering the notification.
///
/// @namespace Notifications
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model community_ai_notifications {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// Recipient user for the notification, referencing community_ai_members.id.
  recipient_user_id String
  
  /// Optional post that triggered this notification, referencing
  /// community_ai_posts.id.
  trigger_post_id String?
  
  /// Type of notification such as 'comment_reply', 'factcheck_flagged', or
  /// 'moderator_alert'.
  notification_type String
  
  /// Notification title to be displayed to the user.
  title String
  
  /// Detailed notification message content.
  message String
  
  /// Timestamp when the notification was read by the user.
  read_at DateTime?
  
  /// Timestamp when the notification was created.
  created_at DateTime
  
  /// Timestamp when the notification was last updated.
  updated_at DateTime
  
  /// Soft delete timestamp, if the notification was deleted.
  deleted_at DateTime?
  
  //----
  // RELATIONS
  //----
  recipientUser community_ai_members @relation(fields: [recipient_user_id], references: [id], onDelete: Cascade)
  triggerPost community_ai_posts? @relation(fields: [trigger_post_id], references: [id], onDelete: Cascade)
  
  community_ai_notification_statuses community_ai_notification_statuses[]
  
  @@index([trigger_post_id])
  
  @@unique([recipient_user_id, created_at])
  @@index([notification_type, created_at])
}

/// Historical status records for user notifications, capturing changes in
/// delivery or processing states. Each status record refers to a single
/// notification and contains timestamps, status codes, and optional
/// descriptive context. This table supports audit trails and lifecycle
/// management for notifications.
///
/// @namespace Notifications
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model community_ai_notification_statuses {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// Referenced notification's community_ai_notifications.id.
  notification_id String
  
  /// Status code representing notification processing state such as 'pending',
  /// 'delivered', or 'failed'.
  status String
  
  /// Optional detailed description or reason for the status.
  description String?
  
  /// Timestamp when this status entry was recorded.
  created_at DateTime
  
  /// Timestamp when this status entry was last updated.
  updated_at DateTime
  
  /// Soft delete timestamp for this status entry.
  deleted_at DateTime?
  
  //----
  // RELATIONS
  //----
  notification community_ai_notifications @relation(fields: [notification_id], references: [id], onDelete: Cascade)
  
  @@index([notification_id, status])
}

/// User-specific notification preferences that store per-user settings for
/// notification delivery channels, opt-ins, and categories. Preferences are
/// linked to the associated user account and provide customization options
/// for notification management.
///
/// @namespace Notifications
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model community_ai_user_notification_preferences {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// User this preference belongs to, referencing community_ai_members.id.
  user_id String
  
  /// Flag indicating whether the user has enabled email notifications.
  email_notifications_enabled Boolean
  
  /// Flag indicating whether the user has enabled push notifications.
  push_notifications_enabled Boolean
  
  /// Flag indicating whether the user has enabled SMS notifications.
  sms_notifications_enabled Boolean
  
  /// Timestamp when the preferences were created.
  created_at DateTime
  
  /// Timestamp when the preferences were last updated.
  updated_at DateTime
  
  /// Soft delete timestamp for the preferences record.
  deleted_at DateTime?
  
  //----
  // RELATIONS
  //----
  user community_ai_members @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@unique([user_id])
}