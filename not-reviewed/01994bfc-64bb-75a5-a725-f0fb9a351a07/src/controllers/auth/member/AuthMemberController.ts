import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";

import { ICommunityAiMember } from "../../../api/structures/ICommunityAiMember";

@Controller("/auth/member")
export class AuthMemberController {
  /**
   * Member user registration (join) operation covering creation of new
   * accounts with secure identity data.
   *
   * Allows regular member users to register by creating an account with email
   * and password, storing identity information securely and issuing
   * authentication tokens within the CommunityAi system. Email uniqueness and
   * password security are enforced. The operation results in an authorized
   * access response enabling member actions.
   *
   * @param connection
   * @param body Member user registration payload including email, password,
   *   and display name for account creation.
   * @setHeader token.access Authorization
   *
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: ICommunityAiMember.ICreate,
  ): Promise<ICommunityAiMember.IAuthorized> {
    body;
    return typia.random<ICommunityAiMember.IAuthorized>();
  }

  /**
   * Member user login operation for authentication and token issuance.
   *
   * Authenticates member users by email and password, issuing JWT tokens upon
   * successful credential verification within the CommunityAi system. Secure
   * authentication and token handling is enforced.
   *
   * @param connection
   * @param body Member user login credentials consisting of email and
   *   password.
   * @setHeader token.access Authorization
   *
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: ICommunityAiMember.ILogin,
  ): Promise<ICommunityAiMember.IAuthorized> {
    body;
    return typia.random<ICommunityAiMember.IAuthorized>();
  }

  /**
   * Member user token refresh operation.
   *
   * Allows member users to renew JWT access tokens using valid refresh tokens
   * to maintain authenticated sessions within the CommunityAi platform.
   * Validates and issues fresh tokens securely.
   *
   * @param connection
   * @param body Payload containing the member user's valid refresh token.
   * @setHeader token.access Authorization
   *
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: ICommunityAiMember.IRefresh,
  ): Promise<ICommunityAiMember.IAuthorized> {
    body;
    return typia.random<ICommunityAiMember.IAuthorized>();
  }
}
