import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";

import { ICommunityAiAdmin } from "../../../api/structures/ICommunityAiAdmin";

@Controller("/auth/admin")
export class AuthAdminController {
  /**
   * Create new admin user account in community_ai_admins.
   *
   * Create a new admin user account in community_ai_admins with full
   * administrative privileges. Requires unique email, hashed password, and
   * display name fields which are stored securely. This facilitates user
   * onboarding by enabling new admin registrations. The operation performs
   * validation for email uniqueness and password hash security. It integrates
   * in the authentication workflow issuing initial authorized JWT tokens
   * represented by ICommunityAiAdmin.IAuthorized response. This endpoint is
   * publicly accessible allowing account creation without prior
   * authentication.
   *
   * @param connection
   * @param body Admin user registration data
   * @setHeader token.access Authorization
   *
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: ICommunityAiAdmin.ICreate,
  ): Promise<ICommunityAiAdmin.IAuthorized> {
    body;
    return typia.random<ICommunityAiAdmin.IAuthorized>();
  }

  /**
   * Authenticate admin user and issue JWT tokens.
   *
   * Authenticate admin user credentials and issue JWT access and refresh
   * tokens. Validates email and password against existing community_ai_admins
   * records. Returns JWT token set within ICommunityAiAdmin.IAuthorized
   * response type. This login operation enables secure access to system
   * administrative features and content moderation. It is a public endpoint
   * requiring no prior authentication enabling credential validation.
   *
   * @param connection
   * @param body Admin user login credentials
   * @setHeader token.access Authorization
   *
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: ICommunityAiAdmin.ILogin,
  ): Promise<ICommunityAiAdmin.IAuthorized> {
    body;
    return typia.random<ICommunityAiAdmin.IAuthorized>();
  }

  /**
   * Refresh JWT tokens for admin users.
   *
   * Refresh JWT access tokens for authenticated admin users using valid
   * refresh tokens. Ensures continuous session availability without re-login.
   * Returns updated JWT tokens in ICommunityAiAdmin.IAuthorized response per
   * admin session management policies. This endpoint requires a valid refresh
   * token and enforces security checks.
   *
   * @param connection
   * @param body Refresh token request
   * @setHeader token.access Authorization
   *
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: ICommunityAiAdmin.IRefresh,
  ): Promise<ICommunityAiAdmin.IAuthorized> {
    body;
    return typia.random<ICommunityAiAdmin.IAuthorized>();
  }
}
