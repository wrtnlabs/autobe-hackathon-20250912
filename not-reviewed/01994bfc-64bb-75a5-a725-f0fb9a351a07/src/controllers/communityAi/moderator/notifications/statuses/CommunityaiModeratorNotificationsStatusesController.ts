import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";

import { ICommunityAiNotificationStatus } from "../../../../../api/structures/ICommunityAiNotificationStatus";

@Controller("/communityAi/moderator/notifications/:notificationId/statuses")
export class CommunityaiModeratorNotificationsStatusesController {
  /**
   * Create notification status for a specific notification.
   *
   * Create a new status entry associated with a notification identified by
   * notificationId. This operation supports tracking the lifecycle of
   * notifications sent to users by storing status entries with codes such as
   * 'pending', 'delivered', or 'failed'.
   *
   * Only authenticated users with roles admin, moderator, or member are
   * authorized to create status entries.
   *
   * The API expects a JSON request body with status details conforming to
   * ICommunityAiNotificationStatus.ICreate schema.
   *
   * The response provides the newly created notification status entity
   * including metadata.
   *
   * Errors may arise if the notificationId is invalid or the provided data
   * fails validation.
   *
   * @param connection
   * @param notificationId Unique UUID identifier of the notification
   * @param body Notification status creation details
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post()
  public async createStatus(
    @TypedParam("notificationId")
    notificationId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityAiNotificationStatus.ICreate,
  ): Promise<ICommunityAiNotificationStatus> {
    notificationId;
    body;
    return typia.random<ICommunityAiNotificationStatus>();
  }
}
