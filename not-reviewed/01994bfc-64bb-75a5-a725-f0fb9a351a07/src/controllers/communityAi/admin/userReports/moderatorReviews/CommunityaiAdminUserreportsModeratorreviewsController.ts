import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";

import { IPageICommunityAiModeratorReview } from "../../../../../api/structures/IPageICommunityAiModeratorReview";
import { ICommunityAiModeratorReview } from "../../../../../api/structures/ICommunityAiModeratorReview";

@Controller("/communityAi/admin/userReports/:userReportId/moderatorReviews")
export class CommunityaiAdminUserreportsModeratorreviewsController {
  /**
   * List moderator reviews linked to a user report.
   *
   * Retrieve a paginated list of moderator reviews for a specific user report
   * by the user report's unique identifier.
   *
   * Moderator reviews document decisions made by moderators regarding
   * user-submitted reports. This operation returns review details such as
   * decision outcomes, moderator comments, and timestamps.
   *
   * Security restrictions typically allow access to authorized moderators and
   * administrators.
   *
   * This operation aids transparency and accountability in the moderation
   * workflow and can be used alongside report management APIs.
   *
   * @param connection
   * @param userReportId Unique identifier of the user report to get related
   *   moderator reviews
   * @param body Filtering and pagination parameters for retrieving moderator
   *   reviews
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Patch()
  public async indexModeratorReviewsByUserReport(
    @TypedParam("userReportId")
    userReportId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityAiModeratorReview.IRequest,
  ): Promise<IPageICommunityAiModeratorReview> {
    userReportId;
    body;
    return typia.random<IPageICommunityAiModeratorReview>();
  }

  /**
   * Retrieve details of a moderator review by ID and related user report.
   *
   * Get detailed information of a specific moderator review associated with a
   * given user report.
   *
   * Moderator reviews capture decisions and comments made by moderators
   * regarding flagged content reports. This operation returns comprehensive
   * information about the review, aiding moderation transparency.
   *
   * Access is limited to authorized moderators and admins to protect
   * sensitive moderation data.
   *
   * Errors are returned if the specified review or user report does not exist
   * or if access is unauthorized.
   *
   * @param connection
   * @param userReportId Unique identifier of the user report associated with
   *   the moderator review
   * @param moderatorReviewId Unique identifier of the moderator review to
   *   retrieve
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Get(":moderatorReviewId")
  public async atModeratorReview(
    @TypedParam("userReportId")
    userReportId: string & tags.Format<"uuid">,
    @TypedParam("moderatorReviewId")
    moderatorReviewId: string & tags.Format<"uuid">,
  ): Promise<ICommunityAiModeratorReview> {
    userReportId;
    moderatorReviewId;
    return typia.random<ICommunityAiModeratorReview>();
  }
}
