import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";

@Controller("/communityAi/member/userSessions/:userSessionId")
export class CommunityaiMemberUsersessionsController {
  /**
   * Delete a user session by ID.
   *
   * This DELETE operation permanently removes a user session identified by
   * its unique ID (userSessionId) from the database. The user session
   * corresponds to an authenticated session of a member user in the community
   * AI system.
   *
   * Security considerations include ensuring that only authorized roles
   * (e.g., the session owner or administrators) may perform this action.
   *
   * The underlying data is from the community_ai_user_sessions table in the
   * Prisma schema, which stores session tokens, expiration timestamps, and
   * metadata. Deleting a session effectively revokes all authentication
   * tokens related to that session.
   *
   * No request body is needed, as only the session ID path parameter is
   * required.
   *
   * On success, no response body is returned. Errors include not found if the
   * session does not exist.
   *
   * This operation links closely with JWT token management endpoints under
   * the same session resource.
   *
   * @param connection
   * @param userSessionId Unique identifier of the target user session
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Delete()
  public async erase(
    @TypedParam("userSessionId")
    userSessionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    userSessionId;
    return typia.random<void>();
  }
}
