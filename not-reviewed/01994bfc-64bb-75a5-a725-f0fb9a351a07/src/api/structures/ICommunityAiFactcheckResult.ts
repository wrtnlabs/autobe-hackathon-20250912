import { tags } from "typia";

/**
 * Entity representing an AI factchecking result record.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityAiFactcheckResult = {
  /** Primary Key. */
  id: string & tags.Format<"uuid">;

  /** Linked factual claim's {@link community_ai_factcheck_claims.id}. */
  factcheck_claim_id: string & tags.Format<"uuid">;

  /** Indicates if the claim was verified as true or false. */
  is_verified: boolean;

  /** Confidence level of the verification result provided by the AI. */
  confidence_score: number;

  /** Reference URL to source data backing the verification. */
  source_url?: string | null | undefined;

  /** Timestamp when the verification result was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the verification result was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp for verification result. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityAiFactcheckResult {
  /** Request parameters for searching factcheck result with pagination. */
  export type IRequest = {
    /** Page number. */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /** Limitation of records per a page. */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /** Filter by factcheck claim ID to narrow results. */
    factcheck_claim_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Filter by verification status. */
    is_verified?: boolean | null | undefined;

    /** Filter by minimum confidence score (0.0 to 1.0). */
    min_confidence_score?: number | null | undefined;

    /** Filter by maximum confidence score (0.0 to 1.0). */
    max_confidence_score?: number | null | undefined;
  };
}
