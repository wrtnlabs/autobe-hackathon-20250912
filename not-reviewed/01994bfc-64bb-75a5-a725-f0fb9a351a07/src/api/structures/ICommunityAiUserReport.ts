import { tags } from "typia";

/**
 * Reports submitted independently by members regarding inappropriate content or
 * user behavior. Tracks the reporting member, referenced content, report
 * reason, resolution status, and timestamps. Supports moderation escalation
 * workflows.
 *
 * @author AutoBE - https://github.com/wrtnlabs/autobe
 * @namespace Moderation
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityAiUserReport = {
  /** Unique identifier of the user report */
  id: string & tags.Format<"uuid">;

  /** Member who submitted the report. {@link community_ai_members.id} */
  community_ai_member_id: string & tags.Format<"uuid">;

  /**
   * Post reported (nullable if the report targets a comment).
   * {@link community_ai_posts.id}
   */
  community_ai_post_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Comment reported (nullable if the report targets a post).
   * {@link community_ai_comments.id}
   */
  community_ai_comment_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** Reason for reporting the content or user behavior. */
  report_reason: string;

  /** Current resolution status such as 'open', 'investigating', or 'closed'. */
  resolution_status: string;

  /** Timestamp when the report was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the report was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Nullable soft delete timestamp to mark if the report is deleted and
   * hidden from public.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityAiUserReport {
  /** Create data for a user report */
  export type ICreate = {
    /** Member who submitted the report. {@link community_ai_members.id} */
    community_ai_member_id: string & tags.Format<"uuid">;

    /**
     * Post reported (nullable if the report targets a comment).
     * {@link community_ai_posts.id}
     */
    community_ai_post_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Comment reported (nullable if the report targets a post).
     * {@link community_ai_comments.id}
     */
    community_ai_comment_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Reason for reporting the content or user behavior. */
    report_reason: string;

    /**
     * Current resolution status such as 'open', 'investigating', or
     * 'closed'.
     */
    resolution_status: string;
  };

  /**
   * Update parameters for a community AI user report. All fields are optional
   * and provide partial update capabilities.
   */
  export type IUpdate = {
    /** UUID of the member who submitted the report */
    community_ai_member_id?: (string & tags.Format<"uuid">) | undefined;

    /** Optional UUID of the reported post */
    community_ai_post_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Optional UUID of the reported comment */
    community_ai_comment_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Reason for reporting */
    report_reason?: string | undefined;

    /** Current resolution status */
    resolution_status?: string | undefined;
  };

  /** Request data for filtering and paginating user reports */
  export type IRequest = {
    /** Member who submitted the report. {@link community_ai_members.id} */
    community_ai_member_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Post reported (nullable if the report targets a comment).
     * {@link community_ai_posts.id}
     */
    community_ai_post_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Comment reported (nullable if the report targets a post).
     * {@link community_ai_comments.id}
     */
    community_ai_comment_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Reason for reporting the content or user behavior. */
    report_reason?: string | undefined;

    /**
     * Current resolution status such as 'open', 'investigating', or
     * 'closed'.
     */
    resolution_status?: string | undefined;

    /** Current page number. */
    page?: number | null | undefined;

    /** Limitation of records per a page. */
    limit?: number | null | undefined;
  };

  /** Summary information of a user report */
  export type ISummary = {
    /** Unique identifier of the user report */
    id: string & tags.Format<"uuid">;

    /** Reason for reporting the content or user behavior. */
    report_reason: string;

    /**
     * Current resolution status such as 'open', 'investigating', or
     * 'closed'.
     */
    resolution_status: string;

    /** Timestamp when the report was created. */
    created_at: string & tags.Format<"date-time">;
  };

  /**
   * Data required to create a new moderator review associated with a user
   * report.
   *
   * Includes decision details, optional comments, and IDs of the reviewer and
   * report.
   */
  export type IModeratorReviewICreate = {
    /** Decision outcome of the moderator's review */
    decision: string;

    /** Optional comments from the moderator */
    comments?: string | null | undefined;

    /** Unique identifier of the moderator performing the review */
    community_ai_moderator_id: string & tags.Format<"uuid">;

    /** Unique identifier of the user report being reviewed */
    community_ai_user_report_id: string & tags.Format<"uuid">;
  };

  /**
   * Modifier review update type allowing partial updates to moderator review
   * fields with timestamps and soft delete support.
   */
  export type IModeratorReviewIUpdate = {
    /** Moderator performing the review. community_ai_moderators.id */
    community_ai_moderator_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /** Referenced content flag under review. community_ai_content_flags.id */
    community_ai_content_flag_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /** Referenced user report under review. community_ai_user_reports.id */
    community_ai_user_report_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /**
     * Decision outcome such as 'approved', 'rejected', or 'needs more
     * info'.
     */
    decision?: string | undefined;

    /** Additional comments or reasons by the moderator. */
    comments?: string | null | undefined;

    /** Timestamp when the review was created. */
    created_at?: (string & tags.Format<"date-time">) | undefined;

    /** Timestamp when the review was last updated. */
    updated_at?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Nullable soft delete timestamp to mark if the review is deleted and
     * hidden.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
