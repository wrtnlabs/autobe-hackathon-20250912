import { tags } from "typia";

import { ICommunityAiPost } from "./ICommunityAiPost";

/**
 * Paginated list of community AI posts.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityAiPosts = {
  /** Paginated data array of posts. */
  data: ICommunityAiPost[];

  /** Pagination metadata. */
  pagination: {
    /** Current page number. */
    current: number & tags.Type<"int32">;

    /** Number of items per page. */
    limit: number & tags.Type<"int32">;

    /** Total records matching query. */
    records: number & tags.Type<"int32">;

    /** Total pages available. */
    pages: number & tags.Type<"int32">;
  };
};
export namespace ICommunityAiPosts {
  /**
   * Request type used for paginated, filterable, and searchable list of
   * posts.
   */
  export type IRequest = {
    /** Optional search keyword to filter post titles or bodies */
    search?: string | null | undefined;

    /** Optional filter by post status, e.g., 'published', 'draft' */
    status?: string | null | undefined;

    /** Optional filter by business workflow status */
    business_status?: string | null | undefined;

    /** Optional filter by author's user ID */
    author_id?: string | null | undefined;

    /** Optional page number for pagination */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /** Optional limit of records per page */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /** Optional field name to sort results by */
    sortBy?: string | null | undefined;

    /** Optional sort direction: 'asc' or 'desc' */
    sortOrder?: "asc" | "desc" | null | undefined;

    /**
     * Holder method name for the system internal use
     *
     * @deprecated
     */
    holderMethodName?: string | undefined;
  };

  /** Request type to create a post. Same as ICommunityAiPost.ICreate. */
  export type ICreate = {
    /**
     * Foreign Key to the member who authored the post.
     *
     * Must reference a valid member UUID.
     */
    author_id: string & tags.Format<"uuid">;

    /**
     * Post title.
     *
     * Must not be empty. Max length of 100 characters.
     */
    title: string;

    /**
     * Unique slug for the post URL.
     *
     * Must be unique string identifying the post.
     */
    slug: string;

    /** Main content of the post. */
    body: string;

    /** Workflow status of the post, e.g., draft, published. */
    status: string;

    /** Business specific status for workflows. */
    business_status: string;
  };

  /**
   * Update data for a community_ai_posts record.
   *
   * All properties are optional and can be used to update a post's mutable
   * fields including soft deletion.
   */
  export type IUpdate = {
    /**
     * Post title, up to 100 characters, non-empty.
     *
     * Optional updated title of the post with max length 100.
     */
    title?: string | undefined;

    /**
     * Unique slug for post URL identification.
     *
     * Optional updated slug for the post.
     */
    slug?: string | undefined;

    /**
     * Main content body of the post.
     *
     * Optional updated content body.
     */
    body?: string | undefined;

    /**
     * Current workflow status of the post.
     *
     * Optional status string representing workflow phase.
     */
    status?: string | undefined;

    /**
     * Business specific state for the post workflow.
     *
     * Optional business status string.
     */
    business_status?: string | undefined;

    /**
     * Soft delete timestamp; null if not deleted.
     *
     * Optional null or datetime string indicating soft deletion.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Summary view representation of a community post.
   *
   * This summary is optimized for list views and search results, providing
   * essential post information excluding full post content.
   */
  export type ISummary = {
    /** Unique identifier of the post */
    id: string & tags.Format<"uuid">;

    /** Author ID referring to a community member */
    author_id: string & tags.Format<"uuid">;

    /** Post title, up to 100 characters */
    title: string;

    /** Unique slug for post URL */
    slug: string;

    /** Current workflow status of the post */
    status: string;

    /** Business-specific post workflow status */
    business_status: string;

    /** Timestamp when the post was created */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when the post was last updated */
    updated_at: string & tags.Format<"date-time">;
  };
}
