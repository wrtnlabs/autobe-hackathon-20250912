import { tags } from "typia";

/**
 * Primary entity representing comments made by community members on posts.
 *
 * Contains comment content, author association, linked post, timestamps,
 *
 * And soft deletion support. Comments support independent management and AI
 *
 * Moderation features.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityAiComments = {
  /**
   * Primary Key.
   *
   * Unique identifier of the comment.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Belonged post's community_ai_posts.id.
   *
   * The ID of the post this comment is associated with.
   */
  community_ai_post_id: string & tags.Format<"uuid">;

  /**
   * Belonged author's community_ai_members.id.
   *
   * The ID of the member who authored this comment.
   */
  author_id: string & tags.Format<"uuid">;

  /**
   * Comment content, non-empty and up to 1000 characters.
   *
   * The textual content of the comment.
   */
  body: string & tags.MaxLength<1000>;

  /**
   * Timestamp when the comment was created.
   *
   * ISO 8601 date-time format.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the comment was last updated.
   *
   * ISO 8601 date-time format.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft delete timestamp; null if not deleted.
   *
   * ISO 8601 date-time format or null.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityAiComments {
  /**
   * Update input type for community_ai_comments.
   *
   * Allows partial updates of comment properties.
   *
   * Used for patch or put update operations.
   *
   * ID is not included because it is used as path parameter and not
   * updatable.
   *
   * All properties are optional to allow partial updates.
   */
  export type IUpdate = {
    /**
     * Belonged post's community_ai_posts.id.
     *
     * The ID of the post this comment is associated with.
     */
    community_ai_post_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Belonged author's community_ai_members.id.
     *
     * The ID of the member who authored this comment.
     */
    author_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Comment content, non-empty and up to 1000 characters.
     *
     * The textual content of the comment.
     */
    body?: (string & tags.MaxLength<1000>) | undefined;

    /**
     * Timestamp when the comment was created.
     *
     * ISO 8601 date-time format.
     */
    created_at?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Timestamp when the comment was last updated.
     *
     * ISO 8601 date-time format.
     */
    updated_at?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Soft delete timestamp; null if not deleted.
     *
     * ISO 8601 date-time format or null.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Request parameters for querying community_ai_comments.
   *
   * Supports filtering, searching, ordering, and pagination.
   *
   * Used for listing or searching comments externally.
   */
  export type IRequest = {
    /**
     * ID of the post to filter comments by.
     *
     * Optional filter property.
     */
    community_ai_post_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * ID of the author member to filter comments by.
     *
     * Optional filter property.
     */
    author_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Search text to filter comment content.
     *
     * Used for full-text matching on comment bodies.
     */
    search?: string | null | undefined;

    /**
     * Page number.
     *
     * Used for paginated query requests.
     */
    page?: number | null | undefined;

    /**
     * Number of items per page.
     *
     * Used to control the number of records per page.
     */
    limit?: number | null | undefined;

    /**
     * Sort order by field and direction. Example:
     * [{"field":"created_at","direction":"desc"}]
     */
    orderBy?:
      | {
          /** The property name used for sorting. */
          field: string;

          /** Sort direction, either ascending or descending. */
          direction: "asc" | "desc";
        }[]
      | null
      | undefined;
  };

  /**
   * Summary view of a community AI comment.
   *
   * Includes essential fields for comment list views such as the unique
   * comment ID, body text, and creation timestamp.
   */
  export type ISummary = {
    /** Unique identifier of the comment. */
    id: string & tags.Format<"uuid">;

    /** Comment content, non-empty and up to 1000 characters. */
    body: string;

    /** Timestamp when the comment was created. */
    created_at: string & tags.Format<"date-time">;
  };
}
