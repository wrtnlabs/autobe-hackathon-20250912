import { tags } from "typia";

/**
 * AI-generated replies to user posts or comments providing textual response
 * enhancements. These replies include content, confidence scores, timestamps,
 * and optional soft deletion marker.
 *
 * This type represents the main data object used in the AICommenting namespace
 * for storing and transmitting AI-generated reply information.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityAiAiGeneratedReplies = {
  /** Primary Key identifier of the AI generated reply record. */
  id: string & tags.Format<"uuid">;

  /**
   * Optional foreign key to the referenced comment ID from
   * community_ai_comments table.
   */
  community_ai_comment_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Optional foreign key to the referenced post ID from community_ai_posts
   * table.
   */
  community_ai_post_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** Text content of the AI-generated reply provided by the AI model. */
  reply_text: string;

  /** Confidence score of the AI-generated reply, ranging from 0.0 to 1.0. */
  confidence_score: number;

  /**
   * Timestamp when the AI-generated reply was created (ISO 8601 date-time
   * format).
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the AI-generated reply was last updated (ISO 8601
   * date-time format).
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Optional timestamp marking when the AI-generated reply was soft deleted;
   * null if active.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityAiAiGeneratedReplies {
  /**
   * Request body schema for creating a new AI-generated reply containing
   * reply text and confidence score with optional associations to comments or
   * posts.
   */
  export type ICreate = {
    /**
     * Optional foreign key to the referenced comment ID. Can be null if not
     * associated with a comment.
     */
    community_ai_comment_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Optional foreign key to the referenced post ID. Can be null if not
     * associated with a post.
     */
    community_ai_post_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Text content of the AI-generated reply to be created. Non-empty
     * string required.
     */
    reply_text: string;

    /**
     * Confidence score for the AI-generated reply ranging from 0.0 (lowest)
     * to 1.0 (highest).
     */
    confidence_score: number;
  };

  /**
   * Request body schema for updating AI-generated reply details including
   * content, confidence score, related entities, and soft deletion
   * timestamp.
   */
  export type IUpdate = {
    /**
     * Optional updated foreign key to the comment ID; can be null to
     * detach.
     */
    community_ai_comment_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Optional updated foreign key to the post ID; can be null to detach. */
    community_ai_post_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Updated text content of the AI-generated reply. */
    reply_text?: string | undefined;

    /**
     * Updated confidence score of the AI-generated reply, range from 0.0 to
     * 1.0.
     */
    confidence_score?: number | undefined;

    /**
     * Timestamp marking when the AI-generated reply was soft deleted; null
     * if nothing.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Request schema for retrieving a paginated, filtered, and sorted
   * collection of AI-generated replies.
   */
  export type IRequest = {
    /** Pagination page number (0-based index). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<0>) | null | undefined;

    /** Pagination limit defining maximum number of records per page. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Textual search keyword to filter AI-generated reply content. */
    search?: string | null | undefined;

    /** Filters to apply on AI-generated replies collection. */
    filter?:
      | {
          /** Filter by comment ID (nullable). */
          community_ai_comment_id?:
            | (string & tags.Format<"uuid">)
            | null
            | undefined;

          /** Filter by post ID (nullable). */
          community_ai_post_id?:
            | (string & tags.Format<"uuid">)
            | null
            | undefined;

          /** Filter by reply text content (nullable). */
          reply_text?: string | null | undefined;
        }
      | undefined;

    /** Sorting criteria for AI-generated replies. */
    sort?:
      | {
          /** Sort by creation datetime. */
          created_at?: "asc" | "desc" | null | undefined;

          /** Sort by confidence score ascending or descending. */
          confidence_score?: "asc" | "desc" | null | undefined;
        }
      | undefined;
  };
}
