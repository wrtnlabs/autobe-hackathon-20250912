import { tags } from "typia";

/**
 * Primary entity representing comments made by community members on posts.
 *
 * Contains comment content, author association, linked post, timestamps,
 *
 * And soft deletion support. Comments support independent management and AI
 *
 * Moderation features.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityAiComment = {
  /**
   * Primary Key.
   *
   * Unique identifier of the comment.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Belonged post's community_ai_posts.id.
   *
   * The ID of the post this comment is associated with.
   */
  community_ai_post_id: string & tags.Format<"uuid">;

  /**
   * Belonged author's community_ai_members.id.
   *
   * The ID of the member who authored this comment.
   */
  author_id: string & tags.Format<"uuid">;

  /**
   * Comment content, non-empty and up to 1000 characters.
   *
   * The textual content of the comment.
   */
  body: string & tags.MaxLength<1000>;

  /**
   * Timestamp when the comment was created.
   *
   * ISO 8601 date-time format.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the comment was last updated.
   *
   * ISO 8601 date-time format.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft delete timestamp; null if not deleted.
   *
   * ISO 8601 date-time format or null.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityAiComment {
  /**
   * Search and pagination criteria for community_ai_comments records.
   *
   * Includes pagination controls and optional filtering fields.
   *
   * Used for retrieving filtered lists of comments in paginated form.
   */
  export type IRequest = {
    /**
     * Page number for pagination.
     *
     * Optional page number to retrieve.
     */
    page?: number | null | undefined;

    /**
     * Limit of records per page for pagination.
     *
     * Optional limit size per page.
     */
    limit?: number | null | undefined;

    /**
     * Filter comments by author ID.
     *
     * Optional UUID filter for author.
     */
    author_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Filter comments by post ID.
     *
     * Optional UUID filter for post.
     */
    community_ai_post_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Keyword search on comment body.
     *
     * Optional string to search within comment text.
     */
    keyword?: string | null | undefined;

    /**
     * Sort order by created_at timestamp.
     *
     * Optional string: 'asc' or 'desc'.
     */
    sort_created_at?: "asc" | "desc" | null | undefined;
  };

  /**
   * Payload for creating a new community_ai_comments record.
   *
   * Requires the post and author IDs along with comment body text.
   */
  export type ICreate = {
    /**
     * Belonged post's community_ai_posts.id.
     *
     * UUID of the post this comment belongs to. This must be provided when
     * creating a comment.
     */
    community_ai_post_id: string & tags.Format<"uuid">;

    /**
     * Belonged author's community_ai_members.id.
     *
     * UUID of the author member who created the comment. This must be
     * provided when creating the comment.
     */
    author_id: string & tags.Format<"uuid">;

    /**
     * Comment content, non-empty and up to 1000 characters.
     *
     * The textual body of the comment.
     */
    body: string;
  };

  /**
   * Update input type for community_ai_comments.
   *
   * Allows partial updates of comment properties.
   *
   * Used for patch or put update operations.
   *
   * ID is not included because it is used as path parameter and not
   * updatable.
   *
   * All properties are optional to allow partial updates.
   */
  export type IUpdate = {
    /**
     * Belonged post's community_ai_posts.id.
     *
     * The ID of the post this comment is associated with.
     */
    community_ai_post_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Belonged author's community_ai_members.id.
     *
     * The ID of the member who authored this comment.
     */
    author_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Comment content, non-empty and up to 1000 characters.
     *
     * The textual content of the comment.
     */
    body?: (string & tags.MaxLength<1000>) | undefined;

    /**
     * Timestamp when the comment was created.
     *
     * ISO 8601 date-time format.
     */
    created_at?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Timestamp when the comment was last updated.
     *
     * ISO 8601 date-time format.
     */
    updated_at?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Soft delete timestamp; null if not deleted.
     *
     * ISO 8601 date-time format or null.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Summary view for a comment on a community AI post.
   *
   * This summary is optimized for comment lists and excludes internal system
   * fields or sensitive information.
   */
  export type ISummary = {
    /** Unique identifier of the comment */
    id: string & tags.Format<"uuid">;

    /** Identifier of the related community AI post */
    community_ai_post_id: string & tags.Format<"uuid">;

    /** Identifier of the comment author member */
    author_id: string & tags.Format<"uuid">;

    /** Body content of the comment */
    body: string;

    /** Timestamp when the comment was created */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when the comment was last updated */
    updated_at: string & tags.Format<"date-time">;
  };
}
