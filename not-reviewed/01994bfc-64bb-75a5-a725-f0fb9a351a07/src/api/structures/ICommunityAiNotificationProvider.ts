import { tags } from "typia";

/**
 * Notification service provider metadata storing configuration, operational
 * status and audit timestamps.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityAiNotificationProvider = {
  /** Primary key identifier */
  id: string & tags.Format<"uuid">;

  /** Name of the notification service provider */
  provider_name: string;

  /** Optional JSON string storing provider configuration */
  config_json?: string | null | undefined;

  /** Operational status of the notification provider, e.g., active, inactive */
  status: string;

  /** Timestamp of creation */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of last update */
  updated_at: string & tags.Format<"date-time">;

  /** Nullable soft delete timestamp for the provider */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityAiNotificationProvider {
  /** Search and pagination parameters for notification providers filtering */
  export type IRequest = {
    /**
     * Name of the notification service provider.
     *
     * Filtering parameter to search providers by name.
     */
    provider_name?: string | null | undefined;

    /**
     * Operational status filter.
     *
     * Allows filtering notification providers by status such as 'active' or
     * 'inactive'.
     */
    status?: string | null | undefined;

    /**
     * Page number for pagination.
     *
     * Defines the current page of paginated results to retrieve.
     */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Number of items per page.
     *
     * Specifies how many notification providers to return in each paginated
     * response.
     */
    limit?: (number & tags.Type<"int32">) | null | undefined;
  };

  /**
   * Request schema for creating a new notification provider, requiring unique
   * provider name and operational status.
   */
  export type ICreate = {
    /**
     * Name of the notification service provider.
     *
     * This field must be unique and is required for creating a new
     * notification provider.
     */
    provider_name: string;

    /**
     * JSON string storing dynamic configuration for the notification
     * provider.
     *
     * Optional configuration JSON containing service credentials and
     * settings.
     */
    config_json?: string | null | undefined;

    /**
     * Current operational status of the notification provider.
     *
     * Indicates if the service provider is active, inactive, or in error
     * state. This field is required.
     */
    status: string;
  };

  /**
   * Update request data structure for notification provider, allowing
   * modification of configuration JSON and operational status.
   */
  export type IUpdate = {
    /** Notification provider configuration JSON string, nullable. */
    config_json?: string | null | undefined;

    /**
     * Current operational status of the notification provider (e.g.,
     * active, inactive, error).
     */
    status: string;

    /** Record creation timestamp. */
    created_at?: (string & tags.Format<"date-time">) | undefined;

    /** Record last update timestamp. */
    updated_at?: (string & tags.Format<"date-time">) | undefined;

    /** Soft delete timestamp for the preferences record, nullable. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Summary view of notification providers showing basic identification and
   * operational status.
   */
  export type ISummary = {
    /** Unique identifier of the notification provider */
    id: string & tags.Format<"uuid">;

    /** Name of the notification service provider */
    provider_name: string;

    /** Operational status of the notification provider */
    status: string;

    /** Timestamp of creation */
    created_at: string & tags.Format<"date-time">;
  };
}
