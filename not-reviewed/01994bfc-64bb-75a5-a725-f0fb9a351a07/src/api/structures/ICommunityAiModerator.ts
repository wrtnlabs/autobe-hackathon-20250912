import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Moderator user entity representing users with moderation privileges in the
 * community AI platform.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityAiModerator = {
  /** Unique identifier of the moderator user. */
  id: string & tags.Format<"uuid">;

  /** The moderator's unique email address for login and contact. */
  email: string;

  /**
   * Hashed password of the moderator user. This field is sensitive and should
   * not be exposed in response types.
   */
  password_hash: string;

  /** Display name or nickname of the moderator user. */
  display_name: string;

  /** Timestamp when the moderator user was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the moderator user was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp when the moderator was deleted (soft delete). Nullable. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityAiModerator {
  /**
   * Request body for creating a new moderator user account.
   *
   * Includes the email, password hash, and display name.
   *
   * Used in registration processes, ensuring required identity data is
   * provided.
   */
  export type ICreate = {
    /** Unique email address of the moderator user for login and contact. */
    email: string;

    /**
     * Hash of the moderator's password for authentication purposes. Stored
     * securely, not plain text.
     */
    password_hash: string;

    /** Moderator user's display name or nickname for display purposes. */
    display_name: string;
  };

  /**
   * Request body for moderator login operation.
   *
   * Contains email and plain text password credentials.
   */
  export type ILogin = {
    /** Email address for moderator login. */
    email: string;

    /** Plain text password provided by the user during login. */
    password: string;
  };

  /** Request body for refreshing JWT tokens for moderator users. */
  export type IRefresh = {
    /** Refresh token string used to get new access tokens. */
    refresh_token: string;
  };

  /** Authorization response including JWT tokens and moderator user info. */
  export type IAuthorized = {
    /** Unique identifier of the authenticated moderator */
    id: string & tags.Format<"uuid">;

    /** The moderator's unique email address for login and contact. */
    email: string;

    /**
     * Hashed password of the moderator user. This field is sensitive and
     * should not be exposed in response types.
     */
    password_hash: string;

    /** Display name or nickname of the moderator user. */
    display_name: string;

    /** Timestamp when the moderator user was created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when the moderator user was last updated. */
    updated_at: string & tags.Format<"date-time">;

    /** Timestamp when the moderator was deleted (soft delete). Nullable. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;

    /** Moderator user information excluding sensitive data */
    moderator?: ICommunityAiModerator | undefined;
  };

  /** Request parameters for filtering and paginating moderators list. */
  export type IRequest = {
    /** Page number for pagination (unsigned 32-bit integer). */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /** Maximum number of items per page (unsigned 32-bit integer). */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /** Filter moderators by email address. */
    email?: string | null | undefined;

    /** Filter moderators by display name. */
    display_name?: string | null | undefined;

    /** Filter moderators created after this date/time. */
    created_at_start?: (string & tags.Format<"date-time">) | null | undefined;

    /** Filter moderators created before this date/time. */
    created_at_end?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /** Properties for updating a moderator user. All fields optional. */
  export type IUpdate = {
    /** Moderator user email address to update, nullable. */
    email?: string | null | undefined;

    /** Hashed password to update, nullable. */
    password_hash?: string | null | undefined;

    /** Display name to update, nullable. */
    display_name?: string | null | undefined;
  };

  /**
   * Summary view representation of moderator user excluding sensitive details
   * such as password hash.
   *
   * This summary is optimized for listings and does not expose sensitive
   * authentication fields.
   */
  export type ISummary = {
    /** Unique identifier of the moderator user */
    id: string & tags.Format<"uuid">;

    /** Email address of the moderator user */
    email: string;

    /** Display name or nickname of the moderator user */
    display_name: string;

    /** Timestamp when the moderator was created */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when the moderator was last updated */
    updated_at: string & tags.Format<"date-time">;
  };
}
