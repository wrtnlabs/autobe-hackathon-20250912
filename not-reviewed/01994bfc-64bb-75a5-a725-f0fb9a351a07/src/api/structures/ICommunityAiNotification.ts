import { tags } from "typia";

/**
 * User notification entity representing system-generated notifications to
 * users. Includes notification type, recipient data, message content, and
 * timestamps.
 *
 * This entity is crucial for delivering real-time and event-based user alerts
 * across various notification channels.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityAiNotification = {
  /** Unique identifier of the notification */
  id: string & tags.Format<"uuid">;

  /** Recipient user for the notification, referencing community_ai_members.id */
  recipient_user_id: string & tags.Format<"uuid">;

  /**
   * Optional post that triggered this notification, referencing
   * community_ai_posts.id
   */
  trigger_post_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Type of notification such as 'comment_reply', 'factcheck_flagged', or
   * 'moderator_alert'
   */
  notification_type: string;

  /** Notification title to be displayed to the user */
  title: string;

  /** Detailed notification message content */
  message: string;

  /** Timestamp when the notification was read by the user */
  read_at?: (string & tags.Format<"date-time">) | null | undefined;

  /** Timestamp when the notification was created */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the notification was last updated */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp, if the notification was deleted */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityAiNotification {
  /**
   * Page request data
   *
   * Includes pagination, filtering, and sorting parameters for user
   * notifications.
   */
  export type IRequest = {
    /** Page number. */
    page?: number | null | undefined;

    /** Limitation of records per a page. */
    limit?: number | null | undefined;

    /** User id. */
    userId?: string | null | undefined;

    /**
     * Notification type such as 'comment_reply', 'factcheck_flagged', or
     * 'moderator_alert'.
     */
    notificationType?: string | null | undefined;

    /** Notification read status. */
    readStatus?: boolean | null | undefined;

    /** Search keywords to filter notifications. */
    keywords?: string | null | undefined;

    /** Sort order such as 'asc' or 'desc' on creation time. */
    sort?: "asc" | "desc" | null | undefined;
  };

  /**
   * Input data required to create a new user notification record. Includes
   * recipient, notification type, title, and message contents.
   */
  export type ICreate = {
    /**
     * Recipient user for the notification, referencing
     * community_ai_members.id.
     */
    recipient_user_id: string & tags.Format<"uuid">;

    /**
     * Optional post that triggered this notification, referencing
     * community_ai_posts.id.
     */
    trigger_post_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Type of notification such as 'comment_reply', 'factcheck_flagged', or
     * 'moderator_alert'.
     */
    notification_type: string;

    /** Notification title to be displayed to the user. */
    title: string;

    /** Detailed notification message content. */
    message: string;
  };

  /**
   * Data required to update an existing user notification record. All fields
   * are optional allowing partial updates.
   */
  export type IUpdate = {
    /**
     * Recipient user for the notification, referencing
     * community_ai_members.id.
     */
    recipient_user_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Optional post that triggered this notification, referencing
     * community_ai_posts.id.
     */
    trigger_post_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Type of notification such as 'comment_reply', 'factcheck_flagged', or
     * 'moderator_alert'.
     */
    notification_type?: string | undefined;

    /** Notification title to be displayed to the user. */
    title?: string | undefined;

    /** Detailed notification message content. */
    message?: string | undefined;

    /** Timestamp when the notification was read by the user. */
    read_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** Timestamp when the notification was deleted. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** Timestamp when the notification was last updated. */
    updated_at?: (string & tags.Format<"date-time">) | undefined;

    /** Timestamp when the notification was created. */
    created_at?: (string & tags.Format<"date-time">) | undefined;
  };

  /**
   * Summary of user notification for efficient list display including key
   * identifying and status fields.
   */
  export type ISummary = {
    /** Unique identifier of the notification */
    id: string & tags.Format<"uuid">;

    /**
     * Type of notification such as 'comment_reply', 'factcheck_flagged', or
     * 'moderator_alert'
     */
    notification_type: string;

    /** Notification title to be displayed to the user */
    title: string;

    /** Timestamp when the notification was read by the user */
    read_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** Timestamp when the notification was created */
    created_at: string & tags.Format<"date-time">;
  };
}
