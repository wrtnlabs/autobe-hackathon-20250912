import { tags } from "typia";

/**
 * Flags raised by AI fact-checking on content indicating potential
 * misinformation or issues. Includes references to source claims, content IDs,
 * flag type, status, and reporting member details for moderation and
 * traceability.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityAiFactcheckFlag = {
  /** Primary Key. */
  id: string & tags.Format<"uuid">;

  /** Linked factual claim's {@link community_ai_factcheck_claims.id}. */
  factcheck_claim_id: string & tags.Format<"uuid">;

  /** Offending post's {@link community_ai_posts.id}. */
  post_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** Offending comment's {@link community_ai_comments.id}. */
  comment_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** Member who reported the flag's {@link community_ai_members.id}. */
  reported_by_member_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** Type of flag raised, e.g., misinformation, spam, inappropriate content. */
  flag_type: string;

  /** Current status of the flag, e.g., pending, reviewed, dismissed. */
  flag_status: string;

  /** Timestamp when the flag was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of the last flag update. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp for the flag record. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityAiFactcheckFlag {
  /** Request parameters for searching factcheck flag with pagination. */
  export type IRequest = {
    /** Page number. */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /** Limitation of records per a page. */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /** Filter by factcheck claim ID. */
    factcheck_claim_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Filter by post ID. */
    post_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Filter by comment ID. */
    comment_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Filter by reporting member ID. */
    reported_by_member_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Filter by flag type (e.g., misinformation, spam). */
    flag_type?: string | null | undefined;

    /** Filter by flag status (e.g., pending, reviewed). */
    flag_status?: string | null | undefined;

    /** Filter by date range start (ISO 8601). */
    created_after?: (string & tags.Format<"date-time">) | null | undefined;

    /** Filter by date range end (ISO 8601). */
    created_before?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Summary view of a fact-check flag within the community AI platform.
   *
   * Includes basic identifying and status fields for list views and
   * moderation overviews.
   */
  export type ISummary = {
    /** Unique identifier of the fact-check flag. */
    id: string & tags.Format<"uuid">;

    /**
     * Type of flag raised, e.g., misinformation, spam, inappropriate
     * content.
     */
    flag_type: string;

    /** Current status of the flag, e.g., pending, reviewed, dismissed. */
    flag_status: string;

    /** Timestamp when the flag was created. */
    created_at: string & tags.Format<"date-time">;
  };
}
