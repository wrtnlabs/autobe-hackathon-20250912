import { tags } from "typia";

/**
 * AI service provider entity representing external AI integrations with
 * configuration credentials and metadata.
 *
 * Each record includes provider name, API endpoint, authentication type,
 * optional API key, dynamic configuration JSON, state flags, and audit
 * timestamps.
 *
 * This entity is essential for managing and connecting external AI services
 * used for comment analysis, content generation, and fact-checking features
 * throughout the community AI platform.
 *
 * @namespace ExternalIntegrations
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityAiAiServiceProvider = {
  /**
   * Primary key of the AI service provider.
   *
   * Unique identifier for an AI service provider.
   */
  id: string & tags.Format<"uuid">;

  /**
   * The official name used to reference the AI service provider in the
   * system.
   */
  provider_name: string;

  /** The base URL where AI service API endpoints are located. */
  api_base_url: string;

  /**
   * The method used for authenticating requests to the AI service, like
   * OAuth2 or API Key.
   */
  auth_type: string;

  /**
   * An optional key or token needed to authenticate API requests to the AI
   * service.
   */
  api_key?: string | null | undefined;

  /** Optional dynamic configuration in JSON format for advanced settings. */
  config_json?: string | null | undefined;

  /** When this service provider record was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the service provider record was last modified. */
  updated_at: string & tags.Format<"date-time">;

  /** If set, indicates the record was soft deleted and is no longer active. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityAiAiServiceProvider {
  /**
   * Request payload to create a new AI service provider within the community
   * AI platform, including necessary identification, authentication, and
   * configuration information.
   */
  export type ICreate = {
    /** Official name of the AI service provider. */
    provider_name: string;

    /** Base URI for the provider's API endpoints. */
    api_base_url: string & tags.MaxLength<80000>;

    /**
     * Authentication mechanism used by the provider (e.g., OAuth2, API
     * Key).
     */
    auth_type: string;

    /** API key or token for accessing the AI service, optional. */
    api_key?: string | null | undefined;

    /**
     * JSON string storing dynamic configuration parameters for the AI
     * provider.
     */
    config_json?: string | null | undefined;

    /** Logical deletion timestamp, if applicable. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Update model for AI service provider allowing partial updates of
   * properties like provider name, API base URL, auth type, API key, and
   * config JSON.
   *
   * Used for patch or put operations in API.
   *
   * @namespace ExternalIntegrations
   */
  export type IUpdate = {
    /**
     * The official name used to reference the AI service provider in the
     * system.
     */
    provider_name?: string | undefined;

    /** The base URL where AI service API endpoints are located. */
    api_base_url?: string | undefined;

    /**
     * The method used for authenticating requests to the AI service, like
     * OAuth2 or API Key.
     */
    auth_type?: string | undefined;

    /**
     * An optional key or token needed to authenticate API requests to the
     * AI service.
     */
    api_key?: string | null | undefined;

    /** Optional dynamic configuration in JSON format for advanced settings. */
    config_json?: string | null | undefined;
  };

  /** Filtering and pagination parameters for AI service providers search. */
  export type IRequest = {
    /** Filter by provider name containing the given substring. */
    provider_name?: string | null | undefined;

    /** Filter by authentication type. */
    auth_type?: string | null | undefined;

    /** Filter by active status (true for active, false for inactive). */
    is_active?: boolean | null | undefined;

    /** Pagination: current page number. */
    page?: number | null | undefined;

    /** Pagination: items per page. */
    limit?: number | null | undefined;

    /** Sorting criteria as a string, e.g., "created_at desc". */
    orderBy?: string | null | undefined;
  };
}
