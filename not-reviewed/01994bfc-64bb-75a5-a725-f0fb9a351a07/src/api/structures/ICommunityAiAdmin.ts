import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Table representing admin users with full system control including user
 * management, content moderation, and AI feature configuration. Each admin has
 * unique identity attributes and audit timestamps.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityAiAdmin = {
  /** Primary Key. */
  id: string & tags.Format<"uuid">;

  /** Unique email address of the admin user for login and contact. */
  email: string;

  /** Hash of the admin's password for authentication purposes. */
  password_hash: string;

  /** Admin user's display name or nickname. */
  display_name: string;

  /** Timestamp when the admin user was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the admin user was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp when the admin user was soft deleted, if applicable. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityAiAdmin {
  /**
   * Data required to create a new admin user.
   *
   * Email must be unique and valid. Password_hash is the password hash
   * string. Display_name is the admin's display name.
   */
  export type ICreate = {
    /** Unique email address of the admin user for login and contact. */
    email: string & tags.Format<"email">;

    /** Hash of the admin's password for authentication purposes. */
    password_hash: string;

    /** Admin user's display name or nickname. */
    display_name: string;
  };

  /**
   * Admin login credentials.
   *
   * Email and password_hash are required for authentication. Email must be a
   * valid email string and registered. Password_hash is expected to be
   * already hashed.
   */
  export type ILogin = {
    /** Unique email address of the admin user for login and contact. */
    email: string & tags.Format<"email">;

    /** Hash of the admin's password for authentication purposes. */
    password_hash: string;
  };

  /**
   * Refresh token request.
   *
   * Contains the refresh token string used to obtain new JWT access tokens.
   * Token must be valid and unexpired.
   */
  export type IRefresh = {
    /** Refresh token */
    refresh_token: string;
  };

  /**
   * Authorization response containing JWT token.
   *
   * Returned after successful authentication operations such as login or
   * join. Includes the admin user's unique ID and token property referencing
   * JWT info.
   */
  export type IAuthorized = {
    /** Unique identifier of the authenticated admin user */
    id: string & tags.Format<"uuid">;

    /** Unique email address of the admin user for login and contact. */
    email: string;

    /** Hash of the admin's password for authentication purposes. */
    password_hash: string;

    /** Admin user's display name or nickname. */
    display_name: string;

    /** Timestamp when the admin user was created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when the admin user was last updated. */
    updated_at: string & tags.Format<"date-time">;

    /** Timestamp when the admin user was soft deleted, if applicable. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Represents request criteria for searching or filtering admin users.
   *
   * Allows filtering based on email, password hash, display name, creation,
   * update, and deletion timestamps. All fields are optional and nullable to
   * support partial queries.
   *
   * Used primarily for paginated searches of admin user records.
   */
  export type IRequest = {
    /** Unique email address of the admin user for login and contact. */
    email?: string | null | undefined;

    /** Hash of the admin's password for authentication purposes. */
    password_hash?: string | null | undefined;

    /** Admin user's display name or nickname. */
    display_name?: string | null | undefined;

    /** Timestamp when the admin user was created. */
    created_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** Timestamp when the admin user was last updated. */
    updated_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** Timestamp when the admin user was soft deleted, if applicable. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Represents updateable information for an admin user account.
   *
   * Allows partial update of email, password hash, display name, and soft
   * deletion timestamp. All fields are optional and may be null to clear
   * values.
   *
   * Preserves integrity by enforcing valid UUID and string formats.
   */
  export type IUpdate = {
    /** Unique email address of the admin user for login and contact. */
    email?: string | null | undefined;

    /** Hash of the admin's password for authentication purposes. */
    password_hash?: string | null | undefined;

    /** Admin user's display name or nickname. */
    display_name?: string | null | undefined;

    /** Timestamp when the admin user was soft deleted, if applicable. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
