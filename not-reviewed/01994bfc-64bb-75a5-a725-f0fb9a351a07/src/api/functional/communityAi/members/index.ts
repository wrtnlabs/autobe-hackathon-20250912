import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityAiMember } from "../../../structures/ICommunityAiMember";

/**
 * Create a new community member account.
 *
 * Creates a new community member account in the system with necessary
 * authentication credentials and user profile data. The operation requires a
 * unique email address to prevent duplication and a password hash for secure
 * authentication. The member's display name is stored for display purposes.
 * Upon successful creation, timestamps record when the member was created and
 * last updated.
 *
 * Security considerations include ensuring email uniqueness and password
 * hashing on the client or server side before creation. The operation does not
 * expose the password hash but accepts it as input. No direct roles are
 * required for public registration.
 *
 * This operation is fundamental for onboarding new users who will then interact
 * with posts, comments, and AI-assisted features. It does not require existing
 * authentication and is publicly accessible.
 *
 * Errors occur if the email is already used or if validation rules are
 * violated. The system handles these internally and returns appropriate error
 * messages.
 *
 * No response body contains sensitive data such as password hashes; only
 * identifiers and display names are returned.
 *
 * @param props.connection
 * @param props.body Information required to create a communityAi member account
 * @path /communityAi/members
 * @accessor api.functional.communityAi.members.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information required to create a communityAi member account */
    body: ICommunityAiMember.ICreate;
  };
  export type Body = ICommunityAiMember.ICreate;
  export type Response = ICommunityAiMember;

  export const METADATA = {
    method: "POST",
    path: "/communityAi/members",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityAi/members";
  export const random = (): ICommunityAiMember =>
    typia.random<ICommunityAiMember>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
