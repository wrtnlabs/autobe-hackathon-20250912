import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityAiAuditCommunityAiContentAccessLogICreate } from "../../../../structures/ICommunityAiAuditCommunityAiContentAccessLogICreate";
import { ICommunityAiAuditCommunityAiContentAccessLog } from "../../../../structures/ICommunityAiAuditCommunityAiContentAccessLog";
import { ICommunityAiContentAccessLogs } from "../../../../structures/ICommunityAiContentAccessLogs";
import { IPageICommunityAiContentAccessLogs } from "../../../../structures/IPageICommunityAiContentAccessLogs";
import { ICommunityAiAuditCommunityAiContentAccessLogIUpdate } from "../../../../structures/ICommunityAiAuditCommunityAiContentAccessLogIUpdate";

/**
 * Create a new communityAi content access log entry to record a member's
 * interaction with posts or comments. Validates input including member
 * association, accessed content references, access type, and optional
 * metadata.
 *
 * The API ensures data integrity and timestamps the creation automatically.
 *
 * Authorization requires elevated roles such as admin to securely add audit
 * records.
 *
 * Successful creation returns the full stored content access log entry.
 *
 * @param props.connection
 * @param props.body Data required to create a communityAi content access log
 *   entry
 * @path /communityAi/admin/auditContentAccessLogs
 * @accessor api.functional.communityAi.admin.auditContentAccessLogs.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Data required to create a communityAi content access log entry */
    body: ICommunityAiAuditCommunityAiContentAccessLogICreate;
  };
  export type Body = ICommunityAiAuditCommunityAiContentAccessLogICreate;
  export type Response = ICommunityAiAuditCommunityAiContentAccessLog;

  export const METADATA = {
    method: "POST",
    path: "/communityAi/admin/auditContentAccessLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityAi/admin/auditContentAccessLogs";
  export const random = (): ICommunityAiAuditCommunityAiContentAccessLog =>
    typia.random<ICommunityAiAuditCommunityAiContentAccessLog>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List content access logs with filtering and pagination.
 *
 * Retrieve a paginated, filtered list of content access records showing member
 * interactions with posts and comments. Supports search criteria including
 * access types, member IDs, date ranges, and device info.
 *
 * This operation is essential for monitoring user behavior, auditing content
 * popularity, and compliance tracking.
 *
 * The endpoint includes pagination and sorting capabilities, returning summary
 * data optimized for list display.
 *
 * Security and privacy considerations restrict access to authorized personnel
 * only.
 *
 * Typical use involves audit dashboards and reporting tools. Errors occur if
 * invalid filtering parameters are specified.
 *
 * Returns a paginated collection of content access log summaries matching
 * search criteria.
 *
 * @param props.connection
 * @param props.body Search filter and pagination parameters for content access
 *   logs
 * @path /communityAi/admin/auditContentAccessLogs
 * @accessor api.functional.communityAi.admin.auditContentAccessLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search filter and pagination parameters for content access logs */
    body: ICommunityAiContentAccessLogs.IRequest;
  };
  export type Body = ICommunityAiContentAccessLogs.IRequest;
  export type Response = IPageICommunityAiContentAccessLogs.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityAi/admin/auditContentAccessLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityAi/admin/auditContentAccessLogs";
  export const random = (): IPageICommunityAiContentAccessLogs.ISummary =>
    typia.random<IPageICommunityAiContentAccessLogs.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific communityAi content access log entry by ID.
 *
 * Retrieve detailed information about a specific content access log entry by
 * its unique identifier. This operation fetches the access event data including
 * member ID, accessed post or comment, access type, device information, IP
 * address, and timestamps.
 *
 * This endpoint requires admin authorization to secure audit data.
 *
 * The operation respects the community_ai_content_access_logs Prisma schema
 * ensuring accurate mapping.
 *
 * Path parameter 'id' is validated as UUID.
 *
 * Returns a single access log record.
 *
 * @param props.connection
 * @param props.id Unique identifier of the content access log entry
 * @path /communityAi/admin/auditContentAccessLogs/:id
 * @accessor api.functional.communityAi.admin.auditContentAccessLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the content access log entry */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityAiAuditCommunityAiContentAccessLog;

  export const METADATA = {
    method: "GET",
    path: "/communityAi/admin/auditContentAccessLogs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/admin/auditContentAccessLogs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ICommunityAiAuditCommunityAiContentAccessLog =>
    typia.random<ICommunityAiAuditCommunityAiContentAccessLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific communityAi content access log entry by ID.
 *
 * Update an existing communityAi content access log entry using the unique
 * identifier. Validates update payload fields and enforces schema constraints.
 *
 * Updates pertain to user content access events and audit integrity.
 *
 * Requires admin authorization to perform.
 *
 * Returns the updated content access log data on success.
 *
 * Handles errors such as invalid IDs or data validation failures.
 *
 * @param props.connection
 * @param props.id Unique identifier of the content access log to update
 * @param props.body Updated data for communityAi content access log entry
 * @path /communityAi/admin/auditContentAccessLogs/:id
 * @accessor api.functional.communityAi.admin.auditContentAccessLogs.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the content access log to update */
    id: string & tags.Format<"uuid">;

    /** Updated data for communityAi content access log entry */
    body: ICommunityAiAuditCommunityAiContentAccessLogIUpdate;
  };
  export type Body = ICommunityAiAuditCommunityAiContentAccessLogIUpdate;
  export type Response = ICommunityAiAuditCommunityAiContentAccessLog;

  export const METADATA = {
    method: "PUT",
    path: "/communityAi/admin/auditContentAccessLogs/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityAi/admin/auditContentAccessLogs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ICommunityAiAuditCommunityAiContentAccessLog =>
    typia.random<ICommunityAiAuditCommunityAiContentAccessLog>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specific communityAi content access log entry by ID.
 *
 * Permanently erase a communityAi content access log entry by its unique ID.
 * This operation removes the data entirely from the system without the
 * possibility of recovery.
 *
 * Requires admin authorization due to audit sensitivity.
 *
 * Errors occur if the ID is invalid or the entry does not exist.
 *
 * No response body is returned upon success.
 *
 * Use cautiously as this action is irreversible.
 *
 * @param props.connection
 * @param props.id Unique identifier of the content access log to delete
 * @path /communityAi/admin/auditContentAccessLogs/:id
 * @accessor api.functional.communityAi.admin.auditContentAccessLogs.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the content access log to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityAi/admin/auditContentAccessLogs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/admin/auditContentAccessLogs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
