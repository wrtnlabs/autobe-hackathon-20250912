import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityAiPosts } from "../../../../structures/ICommunityAiPosts";
import { IPageICommunityAiPosts } from "../../../../structures/IPageICommunityAiPosts";
export * as comments from "./comments/index";

/**
 * Create a new community AI post with provided content and metadata.
 *
 * Validates the input fields according to business rules including title
 * length, unique slug, and required author association.
 *
 * Returns the created post record.
 *
 * Unauthorized requests are rejected.
 *
 * @param props.connection
 * @param props.body Post creation data
 * @path /communityAi/admin/posts
 * @accessor api.functional.communityAi.admin.posts.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Post creation data */
    body: ICommunityAiPosts.ICreate;
  };
  export type Body = ICommunityAiPosts.ICreate;
  export type Response = ICommunityAiPosts;

  export const METADATA = {
    method: "POST",
    path: "/communityAi/admin/posts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityAi/admin/posts";
  export const random = (): ICommunityAiPosts =>
    typia.random<ICommunityAiPosts>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a paginated list of community AI posts.
 *
 * Retrieve a paginated, filtered, and searchable list of community AI posts.
 *
 * This operation queries the community_ai_posts table, which holds posts
 * created by community members associated by author_id. It supports complex
 * filtering such as by status, business_status, author_id, and full-text
 * searching on the title and body using PostgreSQL trigram indexes.
 *
 * Pagination parameters control page number and page size, with default sorting
 * by creation date descending. Clients can also sort by title or status.
 *
 * Security requires that posts visible only to privileged users (moderator and
 * admin roles) are filtered appropriately. This endpoint primarily serves the
 * community's main feed and administrative overview.
 *
 * Errors are returned if invalid search criteria or pagination values are
 * provided.
 *
 * @param props.connection
 * @param props.body Search and pagination criteria for posts
 * @path /communityAi/admin/posts
 * @accessor api.functional.communityAi.admin.posts.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search and pagination criteria for posts */
    body: ICommunityAiPosts.IRequest;
  };
  export type Body = ICommunityAiPosts.IRequest;
  export type Response = IPageICommunityAiPosts;

  export const METADATA = {
    method: "PATCH",
    path: "/communityAi/admin/posts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityAi/admin/posts";
  export const random = (): IPageICommunityAiPosts =>
    typia.random<IPageICommunityAiPosts>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information of a community AI post by ID.
 *
 * Retrieve detailed information for a single community AI post by its unique
 * identifier.
 *
 * The operation fetches the post record identified by postId including fields
 * like title, body, author information, and workflow states. It returns a full
 * representation suitable for detailed viewing or editing.
 *
 * Security checks enforce that unpublished or restricted posts are only
 * accessible to authorized roles such as admins and moderators.
 *
 * Returns an error if the post does not exist or the requesting user lacks
 * permission.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the target post
 * @path /communityAi/admin/posts/:postId
 * @accessor api.functional.communityAi.admin.posts.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target post */
    postId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityAiPosts;

  export const METADATA = {
    method: "GET",
    path: "/communityAi/admin/posts/:postId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/admin/posts/${encodeURIComponent(props.postId ?? "null")}`;
  export const random = (): ICommunityAiPosts =>
    typia.random<ICommunityAiPosts>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a community AI post by ID.
 *
 * Update an existing community AI post identified by postId with new data.
 *
 * Validates submitted changes against schema and business rules.
 *
 * Returns the updated post record after applying changes.
 *
 * Unauthorized or invalid requests are rejected with appropriate errors.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the target post
 * @param props.body Post update data
 * @path /communityAi/admin/posts/:postId
 * @accessor api.functional.communityAi.admin.posts.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target post */
    postId: string & tags.Format<"uuid">;

    /** Post update data */
    body: ICommunityAiPosts.IUpdate;
  };
  export type Body = ICommunityAiPosts.IUpdate;
  export type Response = ICommunityAiPosts;

  export const METADATA = {
    method: "PUT",
    path: "/communityAi/admin/posts/:postId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityAi/admin/posts/${encodeURIComponent(props.postId ?? "null")}`;
  export const random = (): ICommunityAiPosts =>
    typia.random<ICommunityAiPosts>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specific communityAi post by postId.
 *
 * Permanently delete a post by its unique postId.
 *
 * This operation will remove the post record and cascade delete dependent
 * records including comments, post snapshots, AI replies, fact-check claims,
 * and flags.
 *
 * Authorized users include the post owner (member), moderators, and admins. The
 * system enforces ownership and role permissions.
 *
 * No content is returned on successful deletion. Errors occur if the post does
 * not exist or user lacks permission.
 *
 * Deletion implements a hard delete consistent with cascade constraints defined
 * in the Prisma schema.
 *
 * @param props.connection
 * @param props.postId Unique identifier for the target post
 * @path /communityAi/admin/posts/:postId
 * @accessor api.functional.communityAi.admin.posts.erasePost
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erasePost(
  connection: IConnection,
  props: erasePost.Props,
): Promise<void> {
  return true === connection.simulate
    ? erasePost.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erasePost.METADATA,
          path: erasePost.path(props),
          status: null,
        },
      );
}
export namespace erasePost {
  export type Props = {
    /** Unique identifier for the target post */
    postId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityAi/admin/posts/:postId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/admin/posts/${encodeURIComponent(props.postId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erasePost.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erasePost.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
