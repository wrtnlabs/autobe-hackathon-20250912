import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityAiExternalServices } from "../../../../structures/ICommunityAiExternalServices";
import { ICommunityAiExternalService } from "../../../../structures/ICommunityAiExternalService";
import { IPageICommunityAiExternalService } from "../../../../structures/IPageICommunityAiExternalService";

/**
 * Create a new external service configuration.
 *
 * Create a new external AI or notification integration service configuration
 * within the communityAi system. Input includes service name, API endpoint URI,
 * authentication token if required, and activation flag.
 *
 * Successful creation returns the full record including generated ID and
 * timestamps.
 *
 * Security controls restrict this operation to admin users only due to the
 * sensitive nature of service credentials and integration parameters.
 *
 * Validation includes uniqueness of service name and proper format of API
 * endpoint URI.
 *
 * @param props.connection
 * @param props.body Information required to create a new external service
 * @path /communityAi/admin/externalServices
 * @accessor api.functional.communityAi.admin.externalServices.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information required to create a new external service */
    body: ICommunityAiExternalServices.ICreate;
  };
  export type Body = ICommunityAiExternalServices.ICreate;
  export type Response = ICommunityAiExternalServices;

  export const METADATA = {
    method: "POST",
    path: "/communityAi/admin/externalServices",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityAi/admin/externalServices";
  export const random = (): ICommunityAiExternalServices =>
    typia.random<ICommunityAiExternalServices>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a paginated list of external system service configurations.
 *
 * Retrieve filtered and paginated list of configured external services
 * integrated with Community AI platform. Allows searching and sorting by
 * service name, status, and activation flags.
 *
 * Security considerations: Available to admin and moderator roles.
 *
 * Parameters: Supports input of filter criteria, pagination offset, and sorting
 * order.
 *
 * Response: Returns paginated external service summaries with key information
 * for management and operational oversight.
 *
 * @param props.connection
 * @param props.body Filtering and pagination parameters for external services
 *   search
 * @path /communityAi/admin/externalServices
 * @accessor api.functional.communityAi.admin.externalServices.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filtering and pagination parameters for external services search */
    body: ICommunityAiExternalService.IRequest;
  };
  export type Body = ICommunityAiExternalService.IRequest;
  export type Response = IPageICommunityAiExternalService.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityAi/admin/externalServices",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityAi/admin/externalServices";
  export const random = (): IPageICommunityAiExternalService.ISummary =>
    typia.random<IPageICommunityAiExternalService.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details of a specific external service by ID.
 *
 * Retrieve detailed information about a specific external service used by the
 * communityAi system for AI or notification integrations. The external service
 * record includes key properties such as unique service name, API endpoint URI,
 * optional authentication tokens, and active status.
 *
 * This operation requires specifying the unique identifier of the external
 * service to fetch its metadata for administrative or integration purposes.
 * Security considerations include ensuring only authorized users can access
 * external service details due to potential sensitive credentials.
 *
 * The database table community_ai_external_services stores these external
 * service configurations and this operation queries a single record by its
 * UUID.
 *
 * Proper validation of the provided UUID as the service identifier is
 * mandatory. The response returns the full community_ai_external_services
 * entity information as defined in the Prisma schema.
 *
 * @param props.connection
 * @param props.id Unique identifier of the external service
 * @path /communityAi/admin/externalServices/:id
 * @accessor api.functional.communityAi.admin.externalServices.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the external service */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityAiExternalServices;

  export const METADATA = {
    method: "GET",
    path: "/communityAi/admin/externalServices/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/admin/externalServices/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ICommunityAiExternalServices =>
    typia.random<ICommunityAiExternalServices>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing external service configuration.
 *
 * Update the details of an existing external AI or notification service within
 * the communityAi system by specifying its unique ID. The update can modify the
 * service name, API endpoint, authentication token, and whether the service is
 * active.
 *
 * Administrators only have permission to perform this update due to the
 * sensitivity of external integrations.
 *
 * Responds with the updated full service record on success.
 *
 * The operation validates input data as per the creation constraints and
 * ensures consistency.
 *
 * @param props.connection
 * @param props.id Unique identifier of the external service to update
 * @param props.body Updated information for an external service
 * @path /communityAi/admin/externalServices/:id
 * @accessor api.functional.communityAi.admin.externalServices.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the external service to update */
    id: string & tags.Format<"uuid">;

    /** Updated information for an external service */
    body: ICommunityAiExternalServices.IUpdate;
  };
  export type Body = ICommunityAiExternalServices.IUpdate;
  export type Response = ICommunityAiExternalServices;

  export const METADATA = {
    method: "PUT",
    path: "/communityAi/admin/externalServices/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityAi/admin/externalServices/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ICommunityAiExternalServices =>
    typia.random<ICommunityAiExternalServices>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an existing external service configuration.
 *
 * Permanently remove an external AI or notification service configuration from
 * the communityAi system by its unique identifier.
 *
 * Only administrators can perform this permanent deletion due to the critical
 * impact on system integration.
 *
 * The service record is completely removed from persistent storage without soft
 * deletion.
 *
 * Proper validation of the service ID and existence is mandatory prior to
 * deletion.
 *
 * No response body is returned upon successful deletion.
 *
 * @param props.connection
 * @param props.id Unique identifier of the external service to delete
 * @path /communityAi/admin/externalServices/:id
 * @accessor api.functional.communityAi.admin.externalServices.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the external service to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityAi/admin/externalServices/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/admin/externalServices/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
