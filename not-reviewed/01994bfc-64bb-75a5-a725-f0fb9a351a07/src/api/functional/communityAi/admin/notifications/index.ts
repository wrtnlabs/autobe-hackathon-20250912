import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityAiNotification } from "../../../../structures/ICommunityAiNotification";
export * as statuses from "./statuses/index";

/**
 * Create a new user notification.
 *
 * This operation allows authorized users or system components to create new
 * notifications targeted at specific users within the community AI platform.
 * Notifications include details such as the recipient, notification type (e.g.,
 * comment reply, factcheck alert), title, and message body.
 *
 * Creation of notifications supports real-time messaging for user interaction
 * triggers including AI comment suggestions, moderation alerts, and factcheck
 * flags.
 *
 * Access control ensures only authorized roles can create notifications to
 * prevent abuse. The operation records timestamps and soft delete flags
 * according to schema standards.
 *
 * This corresponds to the community_ai_notifications table in the Prisma DB
 * schema under the Notifications namespace.
 *
 * @param props.connection
 * @param props.body Information necessary to create a notification record
 * @path /communityAi/admin/notifications
 * @accessor api.functional.communityAi.admin.notifications.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information necessary to create a notification record */
    body: ICommunityAiNotification.ICreate;
  };
  export type Body = ICommunityAiNotification.ICreate;
  export type Response = ICommunityAiNotification;

  export const METADATA = {
    method: "POST",
    path: "/communityAi/admin/notifications",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityAi/admin/notifications";
  export const random = (): ICommunityAiNotification =>
    typia.random<ICommunityAiNotification>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
