import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityAiNotificationStatus } from "../../../../../structures/ICommunityAiNotificationStatus";

/**
 * Create notification status for a specific notification.
 *
 * Create a new status entry associated with a notification identified by
 * notificationId. This operation supports tracking the lifecycle of
 * notifications sent to users by storing status entries with codes such as
 * 'pending', 'delivered', or 'failed'.
 *
 * Only authenticated users with roles admin, moderator, or member are
 * authorized to create status entries.
 *
 * The API expects a JSON request body with status details conforming to
 * ICommunityAiNotificationStatus.ICreate schema.
 *
 * The response provides the newly created notification status entity including
 * metadata.
 *
 * Errors may arise if the notificationId is invalid or the provided data fails
 * validation.
 *
 * @param props.connection
 * @param props.notificationId Unique UUID identifier of the notification
 * @param props.body Notification status creation details
 * @path /communityAi/admin/notifications/:notificationId/statuses
 * @accessor api.functional.communityAi.admin.notifications.statuses.createStatus
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createStatus(
  connection: IConnection,
  props: createStatus.Props,
): Promise<createStatus.Response> {
  return true === connection.simulate
    ? createStatus.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createStatus.METADATA,
          path: createStatus.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace createStatus {
  export type Props = {
    /** Unique UUID identifier of the notification */
    notificationId: string & tags.Format<"uuid">;

    /** Notification status creation details */
    body: ICommunityAiNotificationStatus.ICreate;
  };
  export type Body = ICommunityAiNotificationStatus.ICreate;
  export type Response = ICommunityAiNotificationStatus;

  export const METADATA = {
    method: "POST",
    path: "/communityAi/admin/notifications/:notificationId/statuses",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityAi/admin/notifications/${encodeURIComponent(props.notificationId ?? "null")}/statuses`;
  export const random = (): ICommunityAiNotificationStatus =>
    typia.random<ICommunityAiNotificationStatus>();
  export const simulate = (
    connection: IConnection,
    props: createStatus.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createStatus.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("notificationId")(() => typia.assert(props.notificationId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
