import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityAiAdminAction } from "../../../../structures/ICommunityAiAdminAction";
import { ICommunityAiAdminActions } from "../../../../structures/ICommunityAiAdminActions";
import { IPageICommunityAiAdminAction } from "../../../../structures/IPageICommunityAiAdminAction";

/**
 * Create a new admin action record representing an administrative activity such
 * as user ban, content deletion, or warning issuance.
 *
 * Requires the admin to specify the action type, details, involved moderator
 * review or user report references, and admin performing the action.
 *
 * Only users with the admin role can perform this operation. Proper validation
 * is enforced to ensure integrity and completeness of the action record.
 *
 * Returns the created admin action record with all details and timestamps.
 *
 * @param props.connection
 * @param props.body Information necessary for creating a new admin action
 *   record
 * @path /communityAi/admin/adminActions
 * @accessor api.functional.communityAi.admin.adminActions.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information necessary for creating a new admin action record */
    body: ICommunityAiAdminAction.ICreate;
  };
  export type Body = ICommunityAiAdminAction.ICreate;
  export type Response = ICommunityAiAdminAction;

  export const METADATA = {
    method: "POST",
    path: "/communityAi/admin/adminActions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityAi/admin/adminActions";
  export const random = (): ICommunityAiAdminAction =>
    typia.random<ICommunityAiAdminAction>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of community AI admin actions.
 *
 * Retrieve a filtered and paginated list of admin action records from the
 * system. This operation allows querying of admin activities such as banning
 * users, unbanning, warnings, and content deletion actions across the
 * platform.
 *
 * The records include details of the admin performing the action, references to
 * related moderator reviews or user reports, action type classifications,
 * commentary, and timestamps for auditing.
 *
 * Security is critical: only authenticated administrators can access this
 * endpoint. The system enforces role-based authorization to prevent
 * unauthorized access.
 *
 * Related operations include retrieving details of a single admin action,
 * creating new admin actions, and updating existing actions. This list endpoint
 * supports administrative oversight and audit compliance.
 *
 * This operation returns summarized information suitable for list views and
 * audit logs management.
 *
 * @param props.connection
 * @param props.body Request body containing search criteria, filters,
 *   pagination, and sorting options for admin actions
 * @path /communityAi/admin/adminActions
 * @accessor api.functional.communityAi.admin.adminActions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Request body containing search criteria, filters, pagination, and
     * sorting options for admin actions
     */
    body: ICommunityAiAdminActions.IRequest;
  };
  export type Body = ICommunityAiAdminActions.IRequest;
  export type Response = IPageICommunityAiAdminAction.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityAi/admin/adminActions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityAi/admin/adminActions";
  export const random = (): IPageICommunityAiAdminAction.ISummary =>
    typia.random<IPageICommunityAiAdminAction.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a specific admin action.
 *
 * Retrieve detailed information about a specific admin action by its unique
 * identifier. This includes the admin who performed the action, related
 * moderation or user report references, the type and details of the action, and
 * timestamps.
 *
 * This operation supports administrative review and audit compliance. Only
 * admins have access permissions.
 *
 * Invalid or non-existent adminActionId requests return appropriate error
 * responses indicating the resource is not found.
 *
 * @param props.connection
 * @param props.adminActionId Unique identifier of the admin action record
 * @path /communityAi/admin/adminActions/:adminActionId
 * @accessor api.functional.communityAi.admin.adminActions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the admin action record */
    adminActionId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityAiAdminAction;

  export const METADATA = {
    method: "GET",
    path: "/communityAi/admin/adminActions/:adminActionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/admin/adminActions/${encodeURIComponent(props.adminActionId ?? "null")}`;
  export const random = (): ICommunityAiAdminAction =>
    typia.random<ICommunityAiAdminAction>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("adminActionId")(() => typia.assert(props.adminActionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing admin action record with new information. Admins can
 * change action type, details, and relational references.
 *
 * Requires the unique adminActionId path parameter to identify the record to
 * update.
 *
 * This operation enforces admin-only authorization and validates all input for
 * consistency.
 *
 * Returns the updated admin action record.
 *
 * @param props.connection
 * @param props.adminActionId Unique identifier of the admin action record to
 *   update
 * @param props.body Update information for the admin action record
 * @path /communityAi/admin/adminActions/:adminActionId
 * @accessor api.functional.communityAi.admin.adminActions.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the admin action record to update */
    adminActionId: string & tags.Format<"uuid">;

    /** Update information for the admin action record */
    body: ICommunityAiAdminAction.IUpdate;
  };
  export type Body = ICommunityAiAdminAction.IUpdate;
  export type Response = ICommunityAiAdminAction;

  export const METADATA = {
    method: "PUT",
    path: "/communityAi/admin/adminActions/:adminActionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityAi/admin/adminActions/${encodeURIComponent(props.adminActionId ?? "null")}`;
  export const random = (): ICommunityAiAdminAction =>
    typia.random<ICommunityAiAdminAction>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("adminActionId")(() => typia.assert(props.adminActionId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete an admin action record.
 *
 * This operation allows an admin user to permanently delete a specific
 * administrative action record identified by adminActionId. The record is
 * removed from the community_ai_admin_actions table.
 *
 * Due to the sensitive and audit-critical nature of admin actions, only users
 * with the admin role have permission to perform this operation. The operation
 * results in the irrevocable removal of the record.
 *
 * Clients should be aware that this removes all trace of the admin action from
 * the system database. This operation corresponds to the
 * community_ai_admin_actions table in the database schema.
 *
 * @param props.connection
 * @param props.adminActionId Unique identifier of the admin action to delete
 * @path /communityAi/admin/adminActions/:adminActionId
 * @accessor api.functional.communityAi.admin.adminActions.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the admin action to delete */
    adminActionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityAi/admin/adminActions/:adminActionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/admin/adminActions/${encodeURIComponent(props.adminActionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("adminActionId")(() => typia.assert(props.adminActionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
