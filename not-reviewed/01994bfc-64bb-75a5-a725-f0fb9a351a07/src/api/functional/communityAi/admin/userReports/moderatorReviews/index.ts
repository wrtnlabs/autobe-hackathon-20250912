import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityAiModeratorReview } from "../../../../../structures/ICommunityAiModeratorReview";
import { IPageICommunityAiModeratorReview } from "../../../../../structures/IPageICommunityAiModeratorReview";

/**
 * List moderator reviews linked to a user report.
 *
 * Retrieve a paginated list of moderator reviews for a specific user report by
 * the user report's unique identifier.
 *
 * Moderator reviews document decisions made by moderators regarding
 * user-submitted reports. This operation returns review details such as
 * decision outcomes, moderator comments, and timestamps.
 *
 * Security restrictions typically allow access to authorized moderators and
 * administrators.
 *
 * This operation aids transparency and accountability in the moderation
 * workflow and can be used alongside report management APIs.
 *
 * @param props.connection
 * @param props.userReportId Unique identifier of the user report to get related
 *   moderator reviews
 * @param props.body Filtering and pagination parameters for retrieving
 *   moderator reviews
 * @path /communityAi/admin/userReports/:userReportId/moderatorReviews
 * @accessor api.functional.communityAi.admin.userReports.moderatorReviews.indexModeratorReviewsByUserReport
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexModeratorReviewsByUserReport(
  connection: IConnection,
  props: indexModeratorReviewsByUserReport.Props,
): Promise<indexModeratorReviewsByUserReport.Response> {
  return true === connection.simulate
    ? indexModeratorReviewsByUserReport.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexModeratorReviewsByUserReport.METADATA,
          path: indexModeratorReviewsByUserReport.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace indexModeratorReviewsByUserReport {
  export type Props = {
    /** Unique identifier of the user report to get related moderator reviews */
    userReportId: string & tags.Format<"uuid">;

    /** Filtering and pagination parameters for retrieving moderator reviews */
    body: ICommunityAiModeratorReview.IRequest;
  };
  export type Body = ICommunityAiModeratorReview.IRequest;
  export type Response = IPageICommunityAiModeratorReview;

  export const METADATA = {
    method: "PATCH",
    path: "/communityAi/admin/userReports/:userReportId/moderatorReviews",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityAi/admin/userReports/${encodeURIComponent(props.userReportId ?? "null")}/moderatorReviews`;
  export const random = (): IPageICommunityAiModeratorReview =>
    typia.random<IPageICommunityAiModeratorReview>();
  export const simulate = (
    connection: IConnection,
    props: indexModeratorReviewsByUserReport.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexModeratorReviewsByUserReport.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userReportId")(() => typia.assert(props.userReportId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details of a moderator review by ID and related user report.
 *
 * Get detailed information of a specific moderator review associated with a
 * given user report.
 *
 * Moderator reviews capture decisions and comments made by moderators regarding
 * flagged content reports. This operation returns comprehensive information
 * about the review, aiding moderation transparency.
 *
 * Access is limited to authorized moderators and admins to protect sensitive
 * moderation data.
 *
 * Errors are returned if the specified review or user report does not exist or
 * if access is unauthorized.
 *
 * @param props.connection
 * @param props.userReportId Unique identifier of the user report associated
 *   with the moderator review
 * @param props.moderatorReviewId Unique identifier of the moderator review to
 *   retrieve
 * @path /communityAi/admin/userReports/:userReportId/moderatorReviews/:moderatorReviewId
 * @accessor api.functional.communityAi.admin.userReports.moderatorReviews.atModeratorReview
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atModeratorReview(
  connection: IConnection,
  props: atModeratorReview.Props,
): Promise<atModeratorReview.Response> {
  return true === connection.simulate
    ? atModeratorReview.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atModeratorReview.METADATA,
          path: atModeratorReview.path(props),
          status: null,
        },
      );
}
export namespace atModeratorReview {
  export type Props = {
    /**
     * Unique identifier of the user report associated with the moderator
     * review
     */
    userReportId: string & tags.Format<"uuid">;

    /** Unique identifier of the moderator review to retrieve */
    moderatorReviewId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityAiModeratorReview;

  export const METADATA = {
    method: "GET",
    path: "/communityAi/admin/userReports/:userReportId/moderatorReviews/:moderatorReviewId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/admin/userReports/${encodeURIComponent(props.userReportId ?? "null")}/moderatorReviews/${encodeURIComponent(props.moderatorReviewId ?? "null")}`;
  export const random = (): ICommunityAiModeratorReview =>
    typia.random<ICommunityAiModeratorReview>();
  export const simulate = (
    connection: IConnection,
    props: atModeratorReview.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atModeratorReview.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userReportId")(() => typia.assert(props.userReportId));
      assert.param("moderatorReviewId")(() =>
        typia.assert(props.moderatorReviewId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
