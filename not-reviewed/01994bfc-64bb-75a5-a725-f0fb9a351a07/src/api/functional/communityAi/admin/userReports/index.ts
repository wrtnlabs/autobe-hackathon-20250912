import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityAiUserReports } from "../../../../structures/ICommunityAiUserReports";
import { IPageICommunityAiUserReports } from "../../../../structures/IPageICommunityAiUserReports";
import { ICommunityAiUserReport } from "../../../../structures/ICommunityAiUserReport";
export * as moderatorReviews from "./moderatorReviews/index";

/**
 * Retrieve filtered and paginated list of user reports.
 *
 * Provides a paginated and filterable list of user reports submitted by members
 * concerning inappropriate posts or comments. The search criteria include
 * filters like reporting member ID, report reason, resolution status, and date
 * ranges.
 *
 * Access is restricted to admin and moderator roles who oversee content
 * moderation.
 *
 * The response returns summarized user report data optimized for moderation
 * workflows, including pagination metadata.
 *
 * Request body contains filtering and pagination parameters, and the response
 * body contains paginated summaries.
 *
 * @param props.connection
 * @param props.body Filtering and pagination parameters for querying user
 *   reports
 * @path /communityAi/admin/userReports
 * @accessor api.functional.communityAi.admin.userReports.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filtering and pagination parameters for querying user reports */
    body: ICommunityAiUserReports.IRequest;
  };
  export type Body = ICommunityAiUserReports.IRequest;
  export type Response = IPageICommunityAiUserReports.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityAi/admin/userReports",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityAi/admin/userReports";
  export const random = (): IPageICommunityAiUserReports.ISummary =>
    typia.random<IPageICommunityAiUserReports.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a user report by ID.
 *
 * Retrieve detailed data for a user report by its ID. Users with admin or
 * moderator roles can view comprehensive report details, including reporting
 * member, targeted post or comment, report reason, and resolution status.
 *
 * No request body is necessary. If the user report does not exist, the system
 * returns a 404 error.
 *
 * The response includes all relevant information about the user report for
 * moderation purposes.
 *
 * @param props.connection
 * @param props.userReportId Unique identifier of the target user report
 * @path /communityAi/admin/userReports/:userReportId
 * @accessor api.functional.communityAi.admin.userReports.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target user report */
    userReportId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityAiUserReport;

  export const METADATA = {
    method: "GET",
    path: "/communityAi/admin/userReports/:userReportId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/admin/userReports/${encodeURIComponent(props.userReportId ?? "null")}`;
  export const random = (): ICommunityAiUserReport =>
    typia.random<ICommunityAiUserReport>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userReportId")(() => typia.assert(props.userReportId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific user report by ID.
 *
 * Update an existing user report by its unique identifier. The user report
 * represents a member-submitted report specifying concerns about posts or
 * comments within the community platform. This operation allows updating the
 * report reason, resolution status, and other modifiable fields.
 *
 * Security considerations restrict this operation to authorized moderator or
 * admin users to prevent unauthorized modifications.
 *
 * This operation interacts directly with the community_ai_user_reports table,
 * updating fields as per the request body. The system enforces validation of
 * the specified userReportId to ensure it references a valid report.
 *
 * Related operations include fetching report details (GET) and managing
 * associated moderator reviews.
 *
 * Attempting to update a nonexistent user report should result in an error
 * response. Proper error handling must reflect permission checks and data
 * integrity validations.
 *
 * @param props.connection
 * @param props.userReportId Unique identifier of the user report to update
 * @param props.body Updated data for the user report
 * @path /communityAi/admin/userReports/:userReportId
 * @accessor api.functional.communityAi.admin.userReports.updateUserReport
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateUserReport(
  connection: IConnection,
  props: updateUserReport.Props,
): Promise<updateUserReport.Response> {
  return true === connection.simulate
    ? updateUserReport.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateUserReport.METADATA,
          path: updateUserReport.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateUserReport {
  export type Props = {
    /** Unique identifier of the user report to update */
    userReportId: string & tags.Format<"uuid">;

    /** Updated data for the user report */
    body: ICommunityAiUserReport.IUpdate;
  };
  export type Body = ICommunityAiUserReport.IUpdate;
  export type Response = ICommunityAiUserReport;

  export const METADATA = {
    method: "PUT",
    path: "/communityAi/admin/userReports/:userReportId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityAi/admin/userReports/${encodeURIComponent(props.userReportId ?? "null")}`;
  export const random = (): ICommunityAiUserReport =>
    typia.random<ICommunityAiUserReport>();
  export const simulate = (
    connection: IConnection,
    props: updateUserReport.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateUserReport.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userReportId")(() => typia.assert(props.userReportId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specific user report by ID.
 *
 * Permanently delete a user report by its unique identifier. User reports
 * document concerns raised by members about community content. This hard delete
 * removes the record from the database and cannot be undone.
 *
 * Security measures restrict deletion capabilities to admin and moderator roles
 * only.
 *
 * This operation interacts with the community_ai_user_reports table and
 * verifies the existence of the specified report before deletion.
 *
 * Errors result if the report does not exist or if the requester lacks proper
 * permissions.
 *
 * @param props.connection
 * @param props.userReportId Unique identifier of the user report to delete
 * @path /communityAi/admin/userReports/:userReportId
 * @accessor api.functional.communityAi.admin.userReports.eraseUserReport
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseUserReport(
  connection: IConnection,
  props: eraseUserReport.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseUserReport.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseUserReport.METADATA,
          path: eraseUserReport.path(props),
          status: null,
        },
      );
}
export namespace eraseUserReport {
  export type Props = {
    /** Unique identifier of the user report to delete */
    userReportId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityAi/admin/userReports/:userReportId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/admin/userReports/${encodeURIComponent(props.userReportId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseUserReport.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseUserReport.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userReportId")(() => typia.assert(props.userReportId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
