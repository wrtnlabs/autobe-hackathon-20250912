import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityAiRoles } from "../../../../structures/ICommunityAiRoles";
import { IPageICommunityAiRoles } from "../../../../structures/IPageICommunityAiRoles";
import { ICommunityAiRole } from "../../../../structures/ICommunityAiRole";

/**
 * Create a new community AI user role.
 *
 * Create a new user role in the community AI system by specifying the role name
 * and description. Role name must be unique within the system.
 *
 * Only authorized admin users may create new roles.
 *
 * On successful creation, detailed role information is returned including
 * assigned unique ID and timestamps.
 *
 * Validation errors occur if the role name conflicts with an existing entry.
 *
 * This endpoint is part of role lifecycle management alongside listing and
 * detail retrieval operations.
 *
 * @param props.connection
 * @param props.body Information required to create a user role
 * @path /communityAi/admin/roles
 * @accessor api.functional.communityAi.admin.roles.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information required to create a user role */
    body: ICommunityAiRoles.ICreate;
  };
  export type Body = ICommunityAiRoles.ICreate;
  export type Response = ICommunityAiRoles;

  export const METADATA = {
    method: "POST",
    path: "/communityAi/admin/roles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityAi/admin/roles";
  export const random = (): ICommunityAiRoles =>
    typia.random<ICommunityAiRoles>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of community AI user roles.
 *
 * Retrieve a filtered and paginated list of user roles defined within the
 * community AI system. These roles govern the authorization and access rights
 * granted to users including admins, moderators, and members.
 *
 * The operation offers advanced search and filtering capabilities on role names
 * and descriptions to facilitate administration tasks.
 *
 * Only authorized system administrators and service components should access
 * role information.
 *
 * The response provides a paginated summary of roles optimized for list
 * displays and administration panels.
 *
 * This operation is related to the role creation and retrieval endpoints which
 * allow role management.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for filtering
 *   roles
 * @path /communityAi/admin/roles
 * @accessor api.functional.communityAi.admin.roles.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for filtering roles */
    body: ICommunityAiRoles.IRequest;
  };
  export type Body = ICommunityAiRoles.IRequest;
  export type Response = IPageICommunityAiRoles.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityAi/admin/roles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityAi/admin/roles";
  export const random = (): IPageICommunityAiRoles.ISummary =>
    typia.random<IPageICommunityAiRoles.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed role information by ID.
 *
 * Fetch detailed information of a community AI system user role. The role ID is
 * specified as a path parameter. Returned role data includes role name,
 * description, and audit timestamps.
 *
 * Access control is enforced to allow only authorized admins to retrieve role
 * information.
 *
 * Errors are returned if the role ID does not exist or if the requester lacks
 * permissions.
 *
 * This operation should only be called by system administrators or trusted
 * services.
 *
 * @param props.connection
 * @param props.id Unique identifier of the user role
 * @path /communityAi/admin/roles/:id
 * @accessor api.functional.communityAi.admin.roles.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the user role */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityAiRoles;

  export const METADATA = {
    method: "GET",
    path: "/communityAi/admin/roles/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/admin/roles/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ICommunityAiRoles =>
    typia.random<ICommunityAiRoles>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update existing user role by ID.
 *
 * This operation updates a specified role in the system's user role management.
 * The role identified by the given ID can have its properties such as role_name
 * and description modified. This serves to manage access control and
 * authorization dynamically by adjusting role details as needed.
 *
 * The updating endpoint enforces authorization rules to allow only privileged
 * users to modify roles.
 *
 * It is linked directly to the community_ai_roles Prisma model, which ensures
 * database integrity and enforcement of unique constraints like unique
 * role_name.
 *
 * Validation rules ensure the role exists and the update payload conforms to
 * schema constraints.
 *
 * On success, the updated role information is returned to confirm the changes.
 *
 * Errors such as not found or validation failures return appropriate HTTP error
 * responses.
 *
 * @param props.connection
 * @param props.id Unique identifier for the role to update
 * @param props.body Updated role details for modification
 * @path /communityAi/admin/roles/:id
 * @accessor api.functional.communityAi.admin.roles.updateRole
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateRole(
  connection: IConnection,
  props: updateRole.Props,
): Promise<updateRole.Response> {
  return true === connection.simulate
    ? updateRole.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateRole.METADATA,
          path: updateRole.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateRole {
  export type Props = {
    /** Unique identifier for the role to update */
    id: string & tags.Format<"uuid">;

    /** Updated role details for modification */
    body: ICommunityAiRole.IUpdate;
  };
  export type Body = ICommunityAiRole.IUpdate;
  export type Response = ICommunityAiRole;

  export const METADATA = {
    method: "PUT",
    path: "/communityAi/admin/roles/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityAi/admin/roles/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ICommunityAiRole =>
    typia.random<ICommunityAiRole>();
  export const simulate = (
    connection: IConnection,
    props: updateRole.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateRole.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete user role by ID.
 *
 * Deletes a specific user role identified by ID from the database permanently.
 * This operation is reserved for administrators with privileges to manage user
 * roles.
 *
 * Upon request, the role record is removed completely from the
 * community_ai_roles table, affecting all permission assignments linked to this
 * role.
 *
 * Proper authorization checks are enforced to prevent unauthorized role
 * deletions.
 *
 * Errors such as an attempt to delete a non-existent role return appropriate
 * error messages.
 *
 * No content is returned upon successful deletion to confirm removal.
 *
 * @param props.connection
 * @param props.id Unique identifier for the role to delete
 * @path /communityAi/admin/roles/:id
 * @accessor api.functional.communityAi.admin.roles.eraseRole
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseRole(
  connection: IConnection,
  props: eraseRole.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseRole.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseRole.METADATA,
          path: eraseRole.path(props),
          status: null,
        },
      );
}
export namespace eraseRole {
  export type Props = {
    /** Unique identifier for the role to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityAi/admin/roles/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/admin/roles/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseRole.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseRole.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
