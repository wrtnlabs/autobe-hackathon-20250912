import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityAiAiServiceProvider } from "../../../../structures/ICommunityAiAiServiceProvider";
import { ICommunityAiAiServiceProviders } from "../../../../structures/ICommunityAiAiServiceProviders";
import { IPageICommunityAiAiServiceProviders } from "../../../../structures/IPageICommunityAiAiServiceProviders";

/**
 * Create a new AI service provider record in the community AI system. The API
 * accepts details such as the provider's name, API base URL, authentication
 * type, optional API key, and configuration parameters as JSON. Only users with
 * the 'admin' role are authorized to create AI service providers.
 *
 * The created record will be stored in the community_ai_ai_service_providers
 * table, which includes metadata fields like created_at and updated_at
 * timestamps.
 *
 * This operation is essential for configuring and managing external AI services
 * that enable features such as AI commenting, sentiment analysis, and
 * fact-checking within the platform. Proper access controls ensure only
 * authorized personnel can modify service provider data.
 *
 * Failure to provide accurate details or lack of admin permissions will result
 * in operation rejection.
 *
 * No response body content is returned as this is a creation operation.
 *
 * @param props.connection
 * @param props.body Information required to create a new AI service provider
 * @path /communityAi/admin/aiServiceProviders
 * @accessor api.functional.communityAi.admin.aiServiceProviders.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information required to create a new AI service provider */
    body: ICommunityAiAiServiceProvider.ICreate;
  };
  export type Body = ICommunityAiAiServiceProvider.ICreate;
  export type Response = ICommunityAiAiServiceProvider;

  export const METADATA = {
    method: "POST",
    path: "/communityAi/admin/aiServiceProviders",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityAi/admin/aiServiceProviders";
  export const random = (): ICommunityAiAiServiceProvider =>
    typia.random<ICommunityAiAiServiceProvider>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List AI service providers with filtering and pagination.
 *
 * Retrieve a paginated list of AI service providers configured in the Community
 * AI platform. The response includes provider names, API URIs, authentication
 * details, and status flags.
 *
 * This operation supports pagination, filtering by active status, and sorting
 * by creation date or provider name. It targets the
 * `community_ai_ai_service_providers` table from Prisma schema.
 *
 * Only authorized roles may access this endpoint to manage or review AI service
 * settings.
 *
 * The request body schema defines filter and pagination parameters, while the
 * response delivers paged detailed entities.
 *
 * @param props.connection
 * @param props.body Filter and pagination parameters for AI service providers
 * @path /communityAi/admin/aiServiceProviders
 * @accessor api.functional.communityAi.admin.aiServiceProviders.indexAiServiceProviders
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexAiServiceProviders(
  connection: IConnection,
  props: indexAiServiceProviders.Props,
): Promise<indexAiServiceProviders.Response> {
  return true === connection.simulate
    ? indexAiServiceProviders.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexAiServiceProviders.METADATA,
          path: indexAiServiceProviders.path(),
          status: null,
        },
        props.body,
      );
}
export namespace indexAiServiceProviders {
  export type Props = {
    /** Filter and pagination parameters for AI service providers */
    body: ICommunityAiAiServiceProviders.IRequest;
  };
  export type Body = ICommunityAiAiServiceProviders.IRequest;
  export type Response = IPageICommunityAiAiServiceProviders;

  export const METADATA = {
    method: "PATCH",
    path: "/communityAi/admin/aiServiceProviders",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityAi/admin/aiServiceProviders";
  export const random = (): IPageICommunityAiAiServiceProviders =>
    typia.random<IPageICommunityAiAiServiceProviders>();
  export const simulate = (
    connection: IConnection,
    props: indexAiServiceProviders.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexAiServiceProviders.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed info of an AI service provider by ID.
 *
 * Retrieve detailed information about an AI service provider using its unique
 * identifier.
 *
 * The operation applies strict access control and returns the full details of
 * the provider entity from the `community_ai_ai_service_providers` table.
 *
 * The path parameter identifies the provider record to fetch. On success,
 * detailed provider information is returned. On failure, appropriate error
 * messages are provided.
 *
 * Designed to support administration and configuration UIs requiring provider
 * details.
 *
 * @param props.connection
 * @param props.id Unique identifier of the AI service provider
 * @path /communityAi/admin/aiServiceProviders/:id
 * @accessor api.functional.communityAi.admin.aiServiceProviders.atAiServiceProvider
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atAiServiceProvider(
  connection: IConnection,
  props: atAiServiceProvider.Props,
): Promise<atAiServiceProvider.Response> {
  return true === connection.simulate
    ? atAiServiceProvider.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atAiServiceProvider.METADATA,
          path: atAiServiceProvider.path(props),
          status: null,
        },
      );
}
export namespace atAiServiceProvider {
  export type Props = {
    /** Unique identifier of the AI service provider */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityAiAiServiceProviders;

  export const METADATA = {
    method: "GET",
    path: "/communityAi/admin/aiServiceProviders/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/admin/aiServiceProviders/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ICommunityAiAiServiceProviders =>
    typia.random<ICommunityAiAiServiceProviders>();
  export const simulate = (
    connection: IConnection,
    props: atAiServiceProvider.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atAiServiceProvider.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing AI service provider by its unique ID. The API accepts the
 * updated provider details including name, API base URL, auth type, API key,
 * and configuration JSON. Only 'admin' role users are authorized to perform
 * this operation.
 *
 * The path parameter 'id' specifies which service provider to update. The
 * system validates the ID exists and updates the corresponding record in the
 * community_ai_ai_service_providers table.
 *
 * Accurate data input is essential to maintain service integrations.
 * Authorization restrictions enforce security and prevent unauthorized
 * modifications.
 *
 * No response body content is included as this operation acknowledges update
 * success.
 *
 * @param props.connection
 * @param props.id Unique identifier of the AI service provider to update
 * @param props.body Updated AI service provider details
 * @path /communityAi/admin/aiServiceProviders/:id
 * @accessor api.functional.communityAi.admin.aiServiceProviders.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the AI service provider to update */
    id: string & tags.Format<"uuid">;

    /** Updated AI service provider details */
    body: ICommunityAiAiServiceProvider.IUpdate;
  };
  export type Body = ICommunityAiAiServiceProvider.IUpdate;
  export type Response = ICommunityAiAiServiceProvider;

  export const METADATA = {
    method: "PUT",
    path: "/communityAi/admin/aiServiceProviders/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityAi/admin/aiServiceProviders/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ICommunityAiAiServiceProvider =>
    typia.random<ICommunityAiAiServiceProvider>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an AI service provider.
 *
 * Delete an existing AI service provider record by its ID. This permanently
 * removes the AI service provider from the system, including all associated
 * integration configurations.
 *
 * Only admin users can perform deletions to protect system integrity. The
 * operation expects the provider ID as a path parameter and removes the
 * corresponding record from the community_ai_ai_service_providers table.
 *
 * No response body content is returned upon successful deletion.
 *
 * This is a critical operation and must be secured carefully.
 *
 * @param props.connection
 * @param props.id Unique identifier of the AI service provider to delete
 * @path /communityAi/admin/aiServiceProviders/:id
 * @accessor api.functional.communityAi.admin.aiServiceProviders.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the AI service provider to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityAi/admin/aiServiceProviders/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/admin/aiServiceProviders/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
