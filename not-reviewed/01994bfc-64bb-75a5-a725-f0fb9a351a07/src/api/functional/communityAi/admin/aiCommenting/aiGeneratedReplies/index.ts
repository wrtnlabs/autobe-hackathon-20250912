import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityAiAiGeneratedReplies } from "../../../../../structures/ICommunityAiAiGeneratedReplies";
import { IPageICommunityAiAiGeneratedReplies } from "../../../../../structures/IPageICommunityAiAiGeneratedReplies";

/**
 * Create a new AI-generated reply linked optionally to a comment or post.
 *
 * The request body must specify the reply content, confidence score, and
 * optionally reference the associated comment or post.
 *
 * Only authorized users including admins, moderators, and members can create
 * these entries.
 *
 * The response returns the created AI-generated reply entity, including
 * timestamps and generated ID.
 *
 * @param props.connection
 * @param props.body Creation information for AI-generated reply
 * @path /communityAi/admin/aiCommenting/aiGeneratedReplies
 * @accessor api.functional.communityAi.admin.aiCommenting.aiGeneratedReplies.createAiGeneratedReply
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createAiGeneratedReply(
  connection: IConnection,
  props: createAiGeneratedReply.Props,
): Promise<createAiGeneratedReply.Response> {
  return true === connection.simulate
    ? createAiGeneratedReply.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createAiGeneratedReply.METADATA,
          path: createAiGeneratedReply.path(),
          status: null,
        },
        props.body,
      );
}
export namespace createAiGeneratedReply {
  export type Props = {
    /** Creation information for AI-generated reply */
    body: ICommunityAiAiGeneratedReplies.ICreate;
  };
  export type Body = ICommunityAiAiGeneratedReplies.ICreate;
  export type Response = ICommunityAiAiGeneratedReplies;

  export const METADATA = {
    method: "POST",
    path: "/communityAi/admin/aiCommenting/aiGeneratedReplies",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/communityAi/admin/aiCommenting/aiGeneratedReplies";
  export const random = (): ICommunityAiAiGeneratedReplies =>
    typia.random<ICommunityAiAiGeneratedReplies>();
  export const simulate = (
    connection: IConnection,
    props: createAiGeneratedReply.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createAiGeneratedReply.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List AI-generated replies with filtering and pagination.
 *
 * Retrieve a filtered, sorted, and paginated list of AI-generated replies
 * related to comments or posts in the community AI platform.
 *
 * Supports complex query operations including filtering on confidence scores,
 * creation dates, and associated comment or post IDs.
 *
 * Accessible only to users with appropriate system roles.
 *
 * Response contains a paginated collection of AI-generated replies with
 * detailed metadata including reply text and confidence score.
 *
 * Request body carries search parameters facilitating customized queries.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for AI-generated
 *   replies
 * @path /communityAi/admin/aiCommenting/aiGeneratedReplies
 * @accessor api.functional.communityAi.admin.aiCommenting.aiGeneratedReplies.indexAiGeneratedReplies
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexAiGeneratedReplies(
  connection: IConnection,
  props: indexAiGeneratedReplies.Props,
): Promise<indexAiGeneratedReplies.Response> {
  return true === connection.simulate
    ? indexAiGeneratedReplies.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexAiGeneratedReplies.METADATA,
          path: indexAiGeneratedReplies.path(),
          status: null,
        },
        props.body,
      );
}
export namespace indexAiGeneratedReplies {
  export type Props = {
    /** Search criteria and pagination parameters for AI-generated replies */
    body: ICommunityAiAiGeneratedReplies.IRequest;
  };
  export type Body = ICommunityAiAiGeneratedReplies.IRequest;
  export type Response = IPageICommunityAiAiGeneratedReplies;

  export const METADATA = {
    method: "PATCH",
    path: "/communityAi/admin/aiCommenting/aiGeneratedReplies",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/communityAi/admin/aiCommenting/aiGeneratedReplies";
  export const random = (): IPageICommunityAiAiGeneratedReplies =>
    typia.random<IPageICommunityAiAiGeneratedReplies>();
  export const simulate = (
    connection: IConnection,
    props: indexAiGeneratedReplies.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexAiGeneratedReplies.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific AI-generated reply by ID.
 *
 * Retrieve detailed information of a specific AI-generated reply by ID.
 *
 * The response includes the reply content, confidence score, and associated
 * comment or post references.
 *
 * Access is restricted to authorized users including admins, moderators, and
 * members.
 *
 * The 'id' path parameter identifies the target AI-generated reply.
 *
 * @param props.connection
 * @param props.id Unique identifier of the AI-generated reply
 * @path /communityAi/admin/aiCommenting/aiGeneratedReplies/:id
 * @accessor api.functional.communityAi.admin.aiCommenting.aiGeneratedReplies.atAiGeneratedReplies
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atAiGeneratedReplies(
  connection: IConnection,
  props: atAiGeneratedReplies.Props,
): Promise<atAiGeneratedReplies.Response> {
  return true === connection.simulate
    ? atAiGeneratedReplies.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atAiGeneratedReplies.METADATA,
          path: atAiGeneratedReplies.path(props),
          status: null,
        },
      );
}
export namespace atAiGeneratedReplies {
  export type Props = {
    /** Unique identifier of the AI-generated reply */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityAiAiGeneratedReplies;

  export const METADATA = {
    method: "GET",
    path: "/communityAi/admin/aiCommenting/aiGeneratedReplies/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/admin/aiCommenting/aiGeneratedReplies/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ICommunityAiAiGeneratedReplies =>
    typia.random<ICommunityAiAiGeneratedReplies>();
  export const simulate = (
    connection: IConnection,
    props: atAiGeneratedReplies.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atAiGeneratedReplies.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing AI-generated reply.
 *
 * This operation updates the AI-generated reply identified by the given unique
 * ID in the community AI system. Each AI-generated reply corresponds to a text
 * reply created by an AI model linked optionally to either a comment or a post.
 * The update allows modification of the reply text, confidence score, and soft
 * deletion timestamp.
 *
 * Authorization is required for admin, moderator, or member roles, reflecting
 * the ability of these users to manage AI-assisted content contributions.
 *
 * The operation validates that the identifier is a valid UUID matching an
 * existing AI-generated reply. The input update data is validated against the
 * schema ensuring all fields adhere to expected constraints and types.
 *
 * On success, the updated AI-generated reply entity is returned, reflecting
 * changes to text or status. Any invalid input or authorization error will
 * result in appropriate error responses.
 *
 * This endpoint interacts with the `community_ai_ai_generated_replies` Prisma
 * table, preserving relations with related comments and posts, enabling content
 * improvement workflows driven by AI assistance.
 *
 * @param props.connection
 * @param props.id Unique identifier for the AI-generated reply to update
 * @param props.body Data for updating AI-generated reply
 * @path /communityAi/admin/aiCommenting/aiGeneratedReplies/:id
 * @accessor api.functional.communityAi.admin.aiCommenting.aiGeneratedReplies.updateAiGeneratedReply
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateAiGeneratedReply(
  connection: IConnection,
  props: updateAiGeneratedReply.Props,
): Promise<updateAiGeneratedReply.Response> {
  return true === connection.simulate
    ? updateAiGeneratedReply.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateAiGeneratedReply.METADATA,
          path: updateAiGeneratedReply.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateAiGeneratedReply {
  export type Props = {
    /** Unique identifier for the AI-generated reply to update */
    id: string & tags.Format<"uuid">;

    /** Data for updating AI-generated reply */
    body: ICommunityAiAiGeneratedReplies.IUpdate;
  };
  export type Body = ICommunityAiAiGeneratedReplies.IUpdate;
  export type Response = ICommunityAiAiGeneratedReplies;

  export const METADATA = {
    method: "PUT",
    path: "/communityAi/admin/aiCommenting/aiGeneratedReplies/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityAi/admin/aiCommenting/aiGeneratedReplies/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ICommunityAiAiGeneratedReplies =>
    typia.random<ICommunityAiAiGeneratedReplies>();
  export const simulate = (
    connection: IConnection,
    props: updateAiGeneratedReply.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateAiGeneratedReply.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an AI-generated reply.
 *
 * This operation deletes the AI-generated reply specified by the unique ID in
 * the community AI platform. AI-generated replies are text replies created by
 * AI models in response to posts or comments to enhance user conversations.
 *
 * Since the `community_ai_ai_generated_replies` model does not include a soft
 * delete timestamp, this operation performs a hard delete, permanently removing
 * the record from the database.
 *
 * Removal actions require authorization of admin, moderator, or member roles,
 * enabling these users to manage AI-generated content data.
 *
 * No request body is required. On success, no content is returned. Errors for
 * invalid IDs or unauthorized users are handled accordingly.
 *
 * Underlying Prisma table is `community_ai_ai_generated_replies`.
 *
 * @param props.connection
 * @param props.id Unique identifier for the AI-generated reply to remove
 * @path /communityAi/admin/aiCommenting/aiGeneratedReplies/:id
 * @accessor api.functional.communityAi.admin.aiCommenting.aiGeneratedReplies.eraseAiGeneratedReply
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseAiGeneratedReply(
  connection: IConnection,
  props: eraseAiGeneratedReply.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseAiGeneratedReply.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseAiGeneratedReply.METADATA,
          path: eraseAiGeneratedReply.path(props),
          status: null,
        },
      );
}
export namespace eraseAiGeneratedReply {
  export type Props = {
    /** Unique identifier for the AI-generated reply to remove */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityAi/admin/aiCommenting/aiGeneratedReplies/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/admin/aiCommenting/aiGeneratedReplies/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseAiGeneratedReply.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseAiGeneratedReply.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
