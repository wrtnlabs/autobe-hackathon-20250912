import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityAiContentFlag } from "../../../../structures/ICommunityAiContentFlag";
import { IPageICommunityAiContentFlag } from "../../../../structures/IPageICommunityAiContentFlag";
export * as moderatorReviews from "./moderatorReviews/index";

/**
 * Search and retrieve paginated user content flags.
 *
 * Retrieve a filtered, paginated list of user content flags raised for posts
 * and comments.
 *
 * This API interacts with the community_ai_content_flags table, which stores
 * flags members raise about community content. Flags link to posts, comments,
 * and members who reported them.
 *
 * Security: Access to this operation is restricted to authorized roles for
 * content moderation.
 *
 * Validation: The request body may specify filters such as status, reason,
 * flagger member ID, and date intervals.
 *
 * Related operations:
 *
 * - Individual content flag retrieval endpoints support investigation.
 * - Related factcheck flag APIs complement moderation functions.
 *
 * Expected behavior:
 *
 * - Supports pagination and sorting parameters.
 * - Returns responses with paginated lists of summary flag information.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for content flag
 *   filtering
 * @path /communityAi/admin/contentFlags
 * @accessor api.functional.communityAi.admin.contentFlags.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for content flag filtering */
    body: ICommunityAiContentFlag.IRequest;
  };
  export type Body = ICommunityAiContentFlag.IRequest;
  export type Response = IPageICommunityAiContentFlag.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityAi/admin/contentFlags",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityAi/admin/contentFlags";
  export const random = (): IPageICommunityAiContentFlag.ISummary =>
    typia.random<IPageICommunityAiContentFlag.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed content flag by ID.
 *
 * Retrieve detailed information for a community content flag identified by the
 * contentFlagId path parameter.
 *
 * This operation fetches data from the 'community_ai_content_flags' table,
 * which stores information about content flags raised by members, including the
 * reason for flagging, status, and timestamps. The information helps moderators
 * to understand the context and current state of the flag.
 *
 * Security considerations require that only authorized roles with moderation
 * privileges can access this data to preserve privacy and prevent information
 * leakage. The 'contentFlagId' path parameter must be a valid UUID representing
 * the unique identifier of the target content flag.
 *
 * The response provides all recorded properties of the content flag as defined
 * in the Prisma schema, including related content references and audit
 * timestamps. If the flag record does not exist, an appropriate error should be
 * returned by the backend.
 *
 * Related operations may include creating new flags, updating flag status, or
 * deleting flags when resolved or dismissed.
 *
 * @param props.connection
 * @param props.contentFlagId Unique identifier of the content flag to retrieve
 * @path /communityAi/admin/contentFlags/:contentFlagId
 * @accessor api.functional.communityAi.admin.contentFlags.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the content flag to retrieve */
    contentFlagId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityAiContentFlag;

  export const METADATA = {
    method: "GET",
    path: "/communityAi/admin/contentFlags/:contentFlagId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/admin/contentFlags/${encodeURIComponent(props.contentFlagId ?? "null")}`;
  export const random = (): ICommunityAiContentFlag =>
    typia.random<ICommunityAiContentFlag>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("contentFlagId")(() => typia.assert(props.contentFlagId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing content flag.
 *
 * Update an existing community content flag identified by contentFlagId. The
 * request body should provide updated properties like reason, status, and
 * references to posts or comments.
 *
 * This operation is typically performed by moderators or admins as part of
 * moderation workflows to track flag handling progress.
 *
 * Only authorized roles have permissions to perform this update to safeguard
 * data integrity.
 *
 * Related operations include retrieving the flag to review current status and
 * deleting the flag once resolved.
 *
 * @param props.connection
 * @param props.contentFlagId Unique identifier of the content flag to update
 * @param props.body Content flag update payload
 * @path /communityAi/admin/contentFlags/:contentFlagId
 * @accessor api.functional.communityAi.admin.contentFlags.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the content flag to update */
    contentFlagId: string & tags.Format<"uuid">;

    /** Content flag update payload */
    body: ICommunityAiContentFlag.IUpdate;
  };
  export type Body = ICommunityAiContentFlag.IUpdate;
  export type Response = ICommunityAiContentFlag;

  export const METADATA = {
    method: "PUT",
    path: "/communityAi/admin/contentFlags/:contentFlagId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityAi/admin/contentFlags/${encodeURIComponent(props.contentFlagId ?? "null")}`;
  export const random = (): ICommunityAiContentFlag =>
    typia.random<ICommunityAiContentFlag>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("contentFlagId")(() => typia.assert(props.contentFlagId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a content flag by ID.
 *
 * Delete a community content flag permanently by its ID. This operation
 * permanently removes the flag record from the database as 'deleted_at' field
 * is treated as soft deletion nullable, but this operation performs a permanent
 * removal.
 *
 * Only moderators and admins have permissions to execute this deletion.
 *
 * No request body is needed, and the operation returns no content upon success.
 *
 * Related operations include creating flags, updating flag status, and
 * retrieving flags for management.
 *
 * @param props.connection
 * @param props.contentFlagId Unique identifier of the content flag to delete
 * @path /communityAi/admin/contentFlags/:contentFlagId
 * @accessor api.functional.communityAi.admin.contentFlags.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the content flag to delete */
    contentFlagId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityAi/admin/contentFlags/:contentFlagId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/admin/contentFlags/${encodeURIComponent(props.contentFlagId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("contentFlagId")(() => typia.assert(props.contentFlagId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
