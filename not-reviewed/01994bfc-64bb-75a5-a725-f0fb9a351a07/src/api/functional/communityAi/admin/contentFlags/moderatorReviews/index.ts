import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityAiModeratorReviews } from "../../../../../structures/ICommunityAiModeratorReviews";
import { ICommunityAiContentFlags } from "../../../../../structures/ICommunityAiContentFlags";
import { IPageICommunityAiModeratorReviews } from "../../../../../structures/IPageICommunityAiModeratorReviews";

/**
 * Create new moderator review for content flag.
 *
 * Create a new moderator review for a specific content flag, storing decision,
 * comments, and timestamps.
 *
 * Accessible to moderators and admins for recording moderation actions.
 *
 * Validates input data and binds review to a content flag.
 *
 * Returns the created moderator review entity.
 *
 * Ensures integrity and compliance with moderation policies.
 *
 * @param props.connection
 * @param props.contentFlagId Unique identifier of the target content flag
 * @param props.body Moderator review creation data
 * @path /communityAi/admin/contentFlags/:contentFlagId/moderatorReviews
 * @accessor api.functional.communityAi.admin.contentFlags.moderatorReviews.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the target content flag */
    contentFlagId: string & tags.Format<"uuid">;

    /** Moderator review creation data */
    body: ICommunityAiModeratorReviews.ICreate;
  };
  export type Body = ICommunityAiModeratorReviews.ICreate;
  export type Response = ICommunityAiModeratorReviews;

  export const METADATA = {
    method: "POST",
    path: "/communityAi/admin/contentFlags/:contentFlagId/moderatorReviews",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityAi/admin/contentFlags/${encodeURIComponent(props.contentFlagId ?? "null")}/moderatorReviews`;
  export const random = (): ICommunityAiModeratorReviews =>
    typia.random<ICommunityAiModeratorReviews>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("contentFlagId")(() => typia.assert(props.contentFlagId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List moderator reviews linked to a content flag.
 *
 * This endpoint provides a list of moderator reviews linked to a particular
 * content flag identified by contentFlagId. The operation enables moderators or
 * authorized users to query and retrieve multiple review records, which aids in
 * managing and auditing moderation actions associated with flagged content.
 *
 * Access control is enforced by role-based authorization to ensure only users
 * with adequate permissions can query these reviews.
 *
 * The response returns a paged list of moderator review summaries, including
 * key information such as moderator ID, decisions, comments, and timestamps.
 *
 * Typical use cases include displaying reviews for a flagged post or comment in
 * the moderation interface, filtering by review status, and monitoring ongoing
 * moderation workflows.
 *
 * Errors due to invalid contentFlagId or permission issues should be handled by
 * the business logic layer.
 *
 * This operation works closely with create, update, and single retrieval
 * operations for community_ai_moderator_reviews to provide a comprehensive
 * moderation review management API.
 *
 * @param props.connection
 * @param props.contentFlagId Unique identifier of the target content flag
 * @param props.body Search criteria and pagination parameters for moderator
 *   review filtering
 * @path /communityAi/admin/contentFlags/:contentFlagId/moderatorReviews
 * @accessor api.functional.communityAi.admin.contentFlags.moderatorReviews.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the target content flag */
    contentFlagId: string & tags.Format<"uuid">;

    /**
     * Search criteria and pagination parameters for moderator review
     * filtering
     */
    body: ICommunityAiContentFlags.IModeratorReviewsRequest;
  };
  export type Body = ICommunityAiContentFlags.IModeratorReviewsRequest;
  export type Response = IPageICommunityAiModeratorReviews.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityAi/admin/contentFlags/:contentFlagId/moderatorReviews",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityAi/admin/contentFlags/${encodeURIComponent(props.contentFlagId ?? "null")}/moderatorReviews`;
  export const random = (): IPageICommunityAiModeratorReviews.ISummary =>
    typia.random<IPageICommunityAiModeratorReviews.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("contentFlagId")(() => typia.assert(props.contentFlagId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed moderator review by ID for content flag.
 *
 * Retrieve detailed moderator review by unique review ID for a specified
 * content flag, enabling inspection of decisions and comments.
 *
 * Accessible to moderators and admins for reviewing moderation cases.
 *
 * Returns the full moderator review entity data.
 *
 * Handles edge cases of non-existent IDs or access violations by proper error
 * responses.
 *
 * Usage involves detail views in moderation dashboards and audit trails.
 *
 * @param props.connection
 * @param props.contentFlagId Unique identifier of the target content flag
 * @param props.moderatorReviewId Unique identifier of the moderator review to
 *   retrieve
 * @path /communityAi/admin/contentFlags/:contentFlagId/moderatorReviews/:moderatorReviewId
 * @accessor api.functional.communityAi.admin.contentFlags.moderatorReviews.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target content flag */
    contentFlagId: string & tags.Format<"uuid">;

    /** Unique identifier of the moderator review to retrieve */
    moderatorReviewId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityAiModeratorReviews;

  export const METADATA = {
    method: "GET",
    path: "/communityAi/admin/contentFlags/:contentFlagId/moderatorReviews/:moderatorReviewId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/admin/contentFlags/${encodeURIComponent(props.contentFlagId ?? "null")}/moderatorReviews/${encodeURIComponent(props.moderatorReviewId ?? "null")}`;
  export const random = (): ICommunityAiModeratorReviews =>
    typia.random<ICommunityAiModeratorReviews>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("contentFlagId")(() => typia.assert(props.contentFlagId));
      assert.param("moderatorReviewId")(() =>
        typia.assert(props.moderatorReviewId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update moderator review for content flag.
 *
 * Update an existing moderator review by review ID under a specified content
 * flag.
 *
 * Allows amendments to decision and commentary fields.
 *
 * Restricted to moderator and admin roles.
 *
 * Returns updated moderator review data.
 *
 * Validates input and ensures existence of the target review for data
 * consistency.
 *
 * @param props.connection
 * @param props.contentFlagId Unique identifier of the target content flag
 * @param props.moderatorReviewId Unique identifier of the moderator review to
 *   update
 * @param props.body Moderator review update data
 * @path /communityAi/admin/contentFlags/:contentFlagId/moderatorReviews/:moderatorReviewId
 * @accessor api.functional.communityAi.admin.contentFlags.moderatorReviews.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target content flag */
    contentFlagId: string & tags.Format<"uuid">;

    /** Unique identifier of the moderator review to update */
    moderatorReviewId: string & tags.Format<"uuid">;

    /** Moderator review update data */
    body: ICommunityAiModeratorReviews.IUpdate;
  };
  export type Body = ICommunityAiModeratorReviews.IUpdate;
  export type Response = ICommunityAiModeratorReviews;

  export const METADATA = {
    method: "PUT",
    path: "/communityAi/admin/contentFlags/:contentFlagId/moderatorReviews/:moderatorReviewId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityAi/admin/contentFlags/${encodeURIComponent(props.contentFlagId ?? "null")}/moderatorReviews/${encodeURIComponent(props.moderatorReviewId ?? "null")}`;
  export const random = (): ICommunityAiModeratorReviews =>
    typia.random<ICommunityAiModeratorReviews>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("contentFlagId")(() => typia.assert(props.contentFlagId));
      assert.param("moderatorReviewId")(() =>
        typia.assert(props.moderatorReviewId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specific moderator review linked to a content flag.
 *
 * Delete a specific moderator review by its unique ID that is linked to a
 * content flag. This operation allows admins and moderators to manage
 * moderation feedback records and ensures the record is permanently removed
 * from the database.
 *
 * Security considerations enforce role-based authorization.
 *
 * This operation does not require a request body and does not return a response
 * body.
 *
 * If the specified moderator review does not exist, the system should return a
 * 404 error indicating not found.
 *
 * @param props.connection
 * @param props.contentFlagId Unique identifier of the target content flag
 * @param props.moderatorReviewId Unique identifier of the moderator review to
 *   delete
 * @path /communityAi/admin/contentFlags/:contentFlagId/moderatorReviews/:moderatorReviewId
 * @accessor api.functional.communityAi.admin.contentFlags.moderatorReviews.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target content flag */
    contentFlagId: string & tags.Format<"uuid">;

    /** Unique identifier of the moderator review to delete */
    moderatorReviewId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityAi/admin/contentFlags/:contentFlagId/moderatorReviews/:moderatorReviewId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/admin/contentFlags/${encodeURIComponent(props.contentFlagId ?? "null")}/moderatorReviews/${encodeURIComponent(props.moderatorReviewId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("contentFlagId")(() => typia.assert(props.contentFlagId));
      assert.param("moderatorReviewId")(() =>
        typia.assert(props.moderatorReviewId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
