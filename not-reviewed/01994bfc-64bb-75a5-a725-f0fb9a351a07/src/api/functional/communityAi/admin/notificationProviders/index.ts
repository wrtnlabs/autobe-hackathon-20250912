import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityAiNotificationProvider } from "../../../../structures/ICommunityAiNotificationProvider";
import { IPageICommunityAiNotificationProvider } from "../../../../structures/IPageICommunityAiNotificationProvider";

/**
 * Create a new notification provider.
 *
 * Creates a new notification provider with the given configuration and status.
 *
 * The community_ai_notification_providers table stores notification service
 * providers' metadata, including provider name, configuration JSON, and
 * operational status. This operation validates the uniqueness of the provider
 * name before insertion.
 *
 * Access to this operation requires administrative authorization due to its
 * impact on notification behaviors.
 *
 * Successful creation results in the full provider entity being returned with
 * database-generated fields such as created_at and updated_at timestamps.
 *
 * If a provider with the given name already exists, the system returns a
 * conflict error.
 *
 * @param props.connection
 * @param props.body Notification provider creation data
 * @path /communityAi/admin/notificationProviders
 * @accessor api.functional.communityAi.admin.notificationProviders.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Notification provider creation data */
    body: ICommunityAiNotificationProvider.ICreate;
  };
  export type Body = ICommunityAiNotificationProvider.ICreate;
  export type Response = ICommunityAiNotificationProvider;

  export const METADATA = {
    method: "POST",
    path: "/communityAi/admin/notificationProviders",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityAi/admin/notificationProviders";
  export const random = (): ICommunityAiNotificationProvider =>
    typia.random<ICommunityAiNotificationProvider>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List and search notification providers.
 *
 * Retrieve a filtered and paginated list of notification providers in the
 * community AI system. This endpoint supports complex queries for filtering by
 * provider name, status, and other metadata.
 *
 * Only users with 'admin' privileges can access this resource. The operation
 * returns a paginated summary list of notification providers stored in the
 * community_ai_notification_providers table.
 *
 * Advanced search, sorting, and pagination are facilitated through the request
 * body parameters.
 *
 * This operation supports managing notification integrations and monitoring
 * their status and configurations.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for notification
 *   providers
 * @path /communityAi/admin/notificationProviders
 * @accessor api.functional.communityAi.admin.notificationProviders.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for notification providers */
    body: ICommunityAiNotificationProvider.IRequest;
  };
  export type Body = ICommunityAiNotificationProvider.IRequest;
  export type Response = IPageICommunityAiNotificationProvider.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityAi/admin/notificationProviders",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityAi/admin/notificationProviders";
  export const random = (): IPageICommunityAiNotificationProvider.ISummary =>
    typia.random<IPageICommunityAiNotificationProvider.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update notification provider settings.
 *
 * Updates configuration and status of an existing notification provider
 * identified by ID.
 *
 * Only configuration JSON and status fields are updatable as provider_name is
 * immutable.
 *
 * This operation ensures the continued integrity and availability of
 * notification service integrations.
 *
 * It requires admin-level authorization to perform updates.
 *
 * Returns the full updated provider entity on success.
 *
 * If the specified ID does not exist, returns a 404 Not Found error.
 *
 * @param props.connection
 * @param props.id Unique identifier of the notification provider to update
 * @param props.body Notification provider update data
 * @path /communityAi/admin/notificationProviders/:id
 * @accessor api.functional.communityAi.admin.notificationProviders.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the notification provider to update */
    id: string & tags.Format<"uuid">;

    /** Notification provider update data */
    body: ICommunityAiNotificationProvider.IUpdate;
  };
  export type Body = ICommunityAiNotificationProvider.IUpdate;
  export type Response = ICommunityAiNotificationProvider;

  export const METADATA = {
    method: "PUT",
    path: "/communityAi/admin/notificationProviders/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityAi/admin/notificationProviders/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ICommunityAiNotificationProvider =>
    typia.random<ICommunityAiNotificationProvider>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a notification provider.
 *
 * Soft deletes a notification provider identified by its unique ID.
 *
 * Marks the provider record as deleted by setting deleted_at timestamp,
 * preserving data for recovery or audits.
 *
 * Requires admin authorization as this impacts system notification behavior.
 *
 * Returns no content upon successful operation.
 *
 * If the provider does not exist, returns a 404 Not Found error.
 *
 * @param props.connection
 * @param props.id Unique identifier of the notification provider to delete
 * @path /communityAi/admin/notificationProviders/:id
 * @accessor api.functional.communityAi.admin.notificationProviders.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the notification provider to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityAi/admin/notificationProviders/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/admin/notificationProviders/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
