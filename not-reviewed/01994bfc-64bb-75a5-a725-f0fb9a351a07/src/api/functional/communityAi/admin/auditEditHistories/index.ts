import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityAiAuditEditHistory } from "../../../../structures/ICommunityAiAuditEditHistory";
import { IPageICommunityAiAuditEditHistory } from "../../../../structures/IPageICommunityAiAuditEditHistory";
import { ICommunityAiAuditHistory } from "../../../../structures/ICommunityAiAuditHistory";

/**
 * Create a new Community AI edit history record.
 *
 * Create a new edit history entry to track changes made to posts or comments by
 * community members. This record captures the state of content before and after
 * edits, as well as edit type and timestamps.
 *
 * The operation helps maintain a comprehensive audit trail required for
 * compliance and content moderation review.
 *
 * Data integrity is critical; only validated edit actions should be stored. The
 * audit history serves as an immutable record once created.
 *
 * Access to creation is typically granted only to trusted system components or
 * services that handle edit tracking.
 *
 * @param props.connection
 * @param props.body Information needed to create a new edit history record
 * @path /communityAi/admin/auditEditHistories
 * @accessor api.functional.communityAi.admin.auditEditHistories.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information needed to create a new edit history record */
    body: ICommunityAiAuditEditHistory.ICreate;
  };
  export type Body = ICommunityAiAuditEditHistory.ICreate;
  export type Response = ICommunityAiAuditEditHistory;

  export const METADATA = {
    method: "POST",
    path: "/communityAi/admin/auditEditHistories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityAi/admin/auditEditHistories";
  export const random = (): ICommunityAiAuditEditHistory =>
    typia.random<ICommunityAiAuditEditHistory>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a paginated list of Community AI edit histories with search and
 * filtering.
 *
 * Retrieve a filtered and paginated list of edit history records related to
 * posts and comments within the Community AI system. Each record contains
 * details about the change event including the editor (community_ai_members),
 * references to the post or comment edited, edit type, and before/after content
 * snapshots.
 *
 * This operation supports advanced search criteria such as filtering by
 * editedByMember, edit type, date ranges, and associated post or comment IDs.
 *
 * Security considerations ensure that only users with appropriate roles can
 * access historical edit data. Audit logs are crucial for compliance and
 * content traceability.
 *
 * The community_ai_edit_histories table stores immutable audit information and
 * this operation allows clients to explore these audit trails programmatically
 * for governance and review purposes.
 *
 * @param props.connection
 * @param props.body Search and pagination parameters for listing Community AI
 *   edit histories
 * @path /communityAi/admin/auditEditHistories
 * @accessor api.functional.communityAi.admin.auditEditHistories.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search and pagination parameters for listing Community AI edit
     * histories
     */
    body: ICommunityAiAuditEditHistory.IRequest;
  };
  export type Body = ICommunityAiAuditEditHistory.IRequest;
  export type Response = IPageICommunityAiAuditEditHistory;

  export const METADATA = {
    method: "PATCH",
    path: "/communityAi/admin/auditEditHistories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityAi/admin/auditEditHistories";
  export const random = (): IPageICommunityAiAuditEditHistory =>
    typia.random<IPageICommunityAiAuditEditHistory>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a Community AI edit history record by ID.
 *
 * Retrieve detailed information for a specific edit history record identified
 * by its unique ID. The record includes editor details, the content before and
 * after the edit, associated post or comment IDs, edit type, and timestamps.
 *
 * This operation is essential for audit and compliance scenarios, enabling
 * authorized users to view precise edit event details.
 *
 * The community_ai_edit_histories table records are immutable for audit
 * integrity, and this endpoint provides read-only access.
 *
 * Access is limited to roles with permission to access audit data such as admin
 * and moderator roles.
 *
 * @param props.connection
 * @param props.id Unique identifier of the edit history record
 * @path /communityAi/admin/auditEditHistories/:id
 * @accessor api.functional.communityAi.admin.auditEditHistories.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the edit history record */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityAiAuditEditHistory;

  export const METADATA = {
    method: "GET",
    path: "/communityAi/admin/auditEditHistories/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/admin/auditEditHistories/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ICommunityAiAuditEditHistory =>
    typia.random<ICommunityAiAuditEditHistory>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a Community AI edit history record by ID.
 *
 * Modify an existing edit history record to update information about edits made
 * by members on posts or comments. Updates may include the before/after
 * content, edit type, or timestamps.
 *
 * Audit trail consistency is important; updates should be controlled and
 * logged.
 *
 * Access is typically restricted to administrative users or automated processes
 * managing audit data.
 *
 * The community_ai_edit_histories table holds versioned content changes to
 * facilitate historical analysis and moderation.
 *
 * @param props.connection
 * @param props.id Unique identifier of the edit history record
 * @param props.body Updated information for the edit history record
 * @path /communityAi/admin/auditEditHistories/:id
 * @accessor api.functional.communityAi.admin.auditEditHistories.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the edit history record */
    id: string & tags.Format<"uuid">;

    /** Updated information for the edit history record */
    body: ICommunityAiAuditEditHistory.IUpdate;
  };
  export type Body = ICommunityAiAuditEditHistory.IUpdate;
  export type Response = ICommunityAiAuditHistory;

  export const METADATA = {
    method: "PUT",
    path: "/communityAi/admin/auditEditHistories/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityAi/admin/auditEditHistories/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ICommunityAiAuditHistory =>
    typia.random<ICommunityAiAuditHistory>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specific edit history record by ID.
 *
 * Deletes the edit history record identified by the provided unique ID from the
 * community_ai_edit_histories table.
 *
 * This operation allows authorized users to permanently remove edit history
 * data related to posts or comments. Edit histories include details such as
 * which member edited the content, the type of edit performed, and content
 * before and after the edit.
 *
 * Only users with appropriate authorization roles should execute this operation
 * to ensure audit trails are preserved when necessary. The deletion is hard,
 * removing the record entirely from the system.
 *
 * Path parameter `id` must be a valid UUID corresponding to an existing edit
 * history record. No request body is needed. The server returns a success
 * status upon deletion without content.
 *
 * This operation is closely related to other content auditing APIs such as
 * retrieving edit histories and managing posts and comments, but specifically
 * targets removal of audit records.
 *
 * @param props.connection
 * @param props.id Unique identifier of the edit history record
 * @path /communityAi/admin/auditEditHistories/:id
 * @accessor api.functional.communityAi.admin.auditEditHistories.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the edit history record */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityAi/admin/auditEditHistories/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/admin/auditEditHistories/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
