import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityAiAdmin } from "../../../../structures/ICommunityAiAdmin";
import { IPageICommunityAiAdmin } from "../../../../structures/IPageICommunityAiAdmin";

/**
 * Create a new admin user for Community AI platform.
 *
 * Create a new Community AI admin user.
 *
 * This operation adds a new admin record with required fields such as unique
 * email, hashed password, and display name.
 *
 * Authorization is restricted to existing admins to maintain system integrity.
 *
 * Validation rules from the Prisma schema ensure email uniqueness and required
 * fields.
 *
 * The system automatically generates creation and update timestamps.
 *
 * Error handling is essential for cases of email duplicates or invalid inputs.
 *
 * @param props.connection
 * @param props.body Creation data for a new admin user
 * @path /communityAi/admin/admins
 * @accessor api.functional.communityAi.admin.admins.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation data for a new admin user */
    body: ICommunityAiAdmin.ICreate;
  };
  export type Body = ICommunityAiAdmin.ICreate;
  export type Response = ICommunityAiAdmin;

  export const METADATA = {
    method: "POST",
    path: "/communityAi/admin/admins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityAi/admin/admins";
  export const random = (): ICommunityAiAdmin =>
    typia.random<ICommunityAiAdmin>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and list Community AI platform admin users with pagination and
 * filtering.
 *
 * Retrieve a filtered and paginated list of admin users in the Community AI
 * platform.
 *
 * This operation allows clients to search and retrieve admin users including
 * details like email and display name, with support for pagination and sorting
 * as needed.
 *
 * Security considerations require that this operation be restricted to
 * authorized users with administrative privileges.
 *
 * The operation reflects data stored in the community_ai_admins table of the
 * Prisma schema, which enforces uniqueness on emails. The response returns data
 * with proper pagination controls.
 *
 * Errors can occur if invalid filters or pagination parameters are provided,
 * which the client must handle appropriately.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for admin user
 *   filtering
 * @path /communityAi/admin/admins
 * @accessor api.functional.communityAi.admin.admins.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for admin user filtering */
    body: ICommunityAiAdmin.IRequest;
  };
  export type Body = ICommunityAiAdmin.IRequest;
  export type Response = IPageICommunityAiAdmin;

  export const METADATA = {
    method: "PATCH",
    path: "/communityAi/admin/admins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityAi/admin/admins";
  export const random = (): IPageICommunityAiAdmin =>
    typia.random<IPageICommunityAiAdmin>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a specific Community AI admin user.
 *
 * Retrieve detailed information of a Community AI admin user by their unique
 * identifier.
 *
 * This operation fetches all admin-specific data including email, display name,
 * and timestamps.
 *
 * Security and privacy considerations restrict access to authorized
 * administrator roles only. Proper error handling is required if the admin user
 * does not exist or is deleted.
 *
 * The entity relates directly to the community_ai_admins Prisma schema table.
 *
 * This operation is critical for managing and auditing admin accounts within
 * the platform.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target admin user
 * @path /communityAi/admin/admins/:id
 * @accessor api.functional.communityAi.admin.admins.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target admin user */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityAiAdmin;

  export const METADATA = {
    method: "GET",
    path: "/communityAi/admin/admins/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/admin/admins/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ICommunityAiAdmin =>
    typia.random<ICommunityAiAdmin>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing admin user's details.
 *
 * Update details of an existing Community AI admin user.
 *
 * This operation allows modification of fields like email, password_hash, and
 * display_name for the specified admin user.
 *
 * Authorization requires admin role privileges.
 *
 * Proper validation should be enforced to maintain unique email integrity and
 * data consistency.
 *
 * Timestamps and audit data are automatically managed by the system.
 *
 * Errors must be handled for cases like non-existent admin or email conflict.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target admin user to update
 * @param props.body Update data for the admin user
 * @path /communityAi/admin/admins/:id
 * @accessor api.functional.communityAi.admin.admins.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target admin user to update */
    id: string & tags.Format<"uuid">;

    /** Update data for the admin user */
    body: ICommunityAiAdmin.IUpdate;
  };
  export type Body = ICommunityAiAdmin.IUpdate;
  export type Response = ICommunityAiAdmin;

  export const METADATA = {
    method: "PUT",
    path: "/communityAi/admin/admins/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityAi/admin/admins/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ICommunityAiAdmin =>
    typia.random<ICommunityAiAdmin>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an admin user by ID from the system.
 *
 * This operation permanently removes an admin user from the community AI
 * platform. It targets the admin user record identified by the unique UUID path
 * parameter. Upon execution, the admin user and all dependent records such as
 * audit logs and administrative actions linked to this admin are deleted via
 * cascading.
 *
 * Security considerations require that only authenticated users with
 * admin-level access may invoke this endpoint due to the sensitivity of
 * managing admin accounts.
 *
 * The underlying database association is with the community_ai_admins table.
 * Deletion is handled as a hard delete, as no soft delete is implemented for
 * effective removal of privileged user access.
 *
 * Clients should handle errors related to non-existence of the admin ID or lack
 * of proper authorization. This operation has no request or response body.
 *
 * @param props.connection
 * @param props.id Unique identifier of the admin user to delete
 * @path /communityAi/admin/admins/:id
 * @accessor api.functional.communityAi.admin.admins.eraseAdminUser
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseAdminUser(
  connection: IConnection,
  props: eraseAdminUser.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseAdminUser.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseAdminUser.METADATA,
          path: eraseAdminUser.path(props),
          status: null,
        },
      );
}
export namespace eraseAdminUser {
  export type Props = {
    /** Unique identifier of the admin user to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityAi/admin/admins/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/admin/admins/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseAdminUser.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseAdminUser.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
