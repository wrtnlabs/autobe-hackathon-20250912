import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityAiFactcheckFlag } from "../../../../structures/ICommunityAiFactcheckFlag";
import { IPageICommunityAiFactcheckFlag } from "../../../../structures/IPageICommunityAiFactcheckFlag";

/**
 * Search and retrieve paginated AI factcheck flags.
 *
 * Retrieve a filtered, paginated list of AI factcheck flags.
 *
 * This API interacts with the community_ai_factcheck_flags table, which holds
 * records of flags signaling potential misinformation or issues detected by AI
 * fact-check processes. Flags may reference posts, comments, the related
 * factual claim, and the reporting member.
 *
 * Security: Access is restricted to authorized roles to ensure sensitive
 * moderation data is protected.
 *
 * Validation: Request body may contain filtering criteria including flag types,
 * statuses, date ranges, and reporter identifiers.
 *
 * Related operations:
 *
 * - Detail retrieval of individual factcheck flags supports in-depth
 *   investigation.
 * - Related content flags and user reports APIs enable broader moderation
 *   workflows.
 *
 * Expected behavior:
 *
 * - Supports pagination parameters for scalable queries.
 * - Allows sorting and complex filtering.
 * - Returns responses with lists of factcheck flag summaries matching criteria.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for factcheck
 *   flag filtering
 * @path /communityAi/admin/factcheckFlags
 * @accessor api.functional.communityAi.admin.factcheckFlags.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for factcheck flag
     * filtering
     */
    body: ICommunityAiFactcheckFlag.IRequest;
  };
  export type Body = ICommunityAiFactcheckFlag.IRequest;
  export type Response = IPageICommunityAiFactcheckFlag.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityAi/admin/factcheckFlags",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityAi/admin/factcheckFlags";
  export const random = (): IPageICommunityAiFactcheckFlag.ISummary =>
    typia.random<IPageICommunityAiFactcheckFlag.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific AI factcheck flag by ID.
 *
 * Retrieve detailed information about a specific AI factcheck flag using its
 * unique identifier.
 *
 * This API accesses the community_ai_factcheck_flags table, storing flags
 * raised by AI fact-check processes indicating potentially false or misleading
 * content. Flags may be linked to posts, comments, and the reporting member.
 *
 * Security: Only authorized roles such as moderators and admins may access this
 * endpoint to maintain confidentiality and proper handling of flagged content.
 *
 * Validation: The ID parameter must be a valid UUID corresponding to an
 * existing factcheck flag.
 *
 * Related operations:
 *
 * - The list endpoint offers filtered and paginated access to multiple flags for
 *   moderation.
 * - Content flag APIs provide additional context on user-generated flags.
 *
 * Expected behavior:
 *
 * - Returns 404 if the ID does not exist.
 * - Returns full detailed flag information if found.
 *
 * @param props.connection
 * @param props.id Unique identifier of the AI factcheck flag
 * @path /communityAi/admin/factcheckFlags/:id
 * @accessor api.functional.communityAi.admin.factcheckFlags.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the AI factcheck flag */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityAiFactcheckFlag;

  export const METADATA = {
    method: "GET",
    path: "/communityAi/admin/factcheckFlags/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/admin/factcheckFlags/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ICommunityAiFactcheckFlag =>
    typia.random<ICommunityAiFactcheckFlag>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
