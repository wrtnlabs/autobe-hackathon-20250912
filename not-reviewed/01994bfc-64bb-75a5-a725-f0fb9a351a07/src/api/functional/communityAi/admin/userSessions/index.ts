import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityAiUserSession } from "../../../../structures/ICommunityAiUserSession";
import { ICommunityAiUserSessions } from "../../../../structures/ICommunityAiUserSessions";
import { IPageICommunityAiUserSessions } from "../../../../structures/IPageICommunityAiUserSessions";

/**
 * Create a new user session for community AI member.
 *
 * Create a new community AI user session by providing the necessary
 * authentication and session details.
 *
 * The request must include the associated member ID, session token and
 * expiration, optional refresh token and its expiration, and optionally client
 * IP address and user agent.
 *
 * This operation is typically called after successful user login and token
 * issuance, recording the session details in the community_ai_user_sessions
 * table.
 *
 * Security controls ensure only authorized roles can create sessions.
 *
 * The response returns the newly created session record with all stored
 * attributes, confirming successful creation.
 *
 * @param props.connection
 * @param props.body Information required to create a new user session
 * @path /communityAi/admin/userSessions
 * @accessor api.functional.communityAi.admin.userSessions.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information required to create a new user session */
    body: ICommunityAiUserSession.ICreate;
  };
  export type Body = ICommunityAiUserSession.ICreate;
  export type Response = ICommunityAiUserSession;

  export const METADATA = {
    method: "POST",
    path: "/communityAi/admin/userSessions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityAi/admin/userSessions";
  export const random = (): ICommunityAiUserSession =>
    typia.random<ICommunityAiUserSession>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of community AI user sessions.
 *
 * Retrieve a filtered and paginated list of community AI user sessions from the
 * system. This operation supports searching, sorting, and filtering by various
 * session attributes such as expiration date, user ID, and status.
 *
 * The operation is designed for administrative use to monitor active, expired,
 * or revoked sessions to maintain platform security and proper user
 * authentication management.
 *
 * Security considerations include restricting access to authorized
 * administrative roles. Data privacy is ensured by limiting session details
 * exposure.
 *
 * The underlying database table is community_ai_user_sessions, which contains
 * fields for session tokens, expiration times, refresh tokens, IP addresses,
 * and user agents.
 *
 * Filtering and pagination parameters can be specified in the request body to
 * efficiently retrieve relevant sessions. The response contains a paginated
 * list of session summaries to facilitate management tasks and auditing.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for user sessions
 *   filtering
 * @path /communityAi/admin/userSessions
 * @accessor api.functional.communityAi.admin.userSessions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for user sessions filtering */
    body: ICommunityAiUserSessions.IRequest;
  };
  export type Body = ICommunityAiUserSessions.IRequest;
  export type Response = IPageICommunityAiUserSessions.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityAi/admin/userSessions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityAi/admin/userSessions";
  export const random = (): IPageICommunityAiUserSessions.ISummary =>
    typia.random<IPageICommunityAiUserSessions.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a specific community AI user session.
 *
 * Retrieve detailed information for a specified community AI user session
 * identified by its unique sessionId in UUID format.
 *
 * The response includes all session attributes recorded in the
 * community_ai_user_sessions database table, such as session and refresh
 * tokens, expiration timestamps, IP address, and user agent strings.
 *
 * Access to this endpoint is restricted to administrators to ensure secure
 * session management. Proper error handling for invalid or missing session ID
 * is expected.
 *
 * This operation supports auditing user sessions and investigating
 * authentication issues.
 *
 * A successful response returns the full session record as a structured object.
 *
 * @param props.connection
 * @param props.userSessionId Unique identifier of the user session to retrieve
 * @path /communityAi/admin/userSessions/:userSessionId
 * @accessor api.functional.communityAi.admin.userSessions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the user session to retrieve */
    userSessionId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityAiUserSession;

  export const METADATA = {
    method: "GET",
    path: "/communityAi/admin/userSessions/:userSessionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/admin/userSessions/${encodeURIComponent(props.userSessionId ?? "null")}`;
  export const random = (): ICommunityAiUserSession =>
    typia.random<ICommunityAiUserSession>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userSessionId")(() => typia.assert(props.userSessionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing community AI user session.
 *
 * Update existing community AI user session details identified by
 * userSessionId.
 *
 * The request payload must include updated session tokens, expiration times,
 * and optionally IP address and user agent information.
 *
 * Access is restricted to administrative users for security.
 *
 * The operation returns the updated session record upon success.
 *
 * Validation ensures session ID is valid and the update preserves data
 * integrity.
 *
 * The session record is stored in the community_ai_user_sessions database
 * table.
 *
 * @param props.connection
 * @param props.userSessionId Unique identifier of the user session to update
 * @param props.body Updated user session information
 * @path /communityAi/admin/userSessions/:userSessionId
 * @accessor api.functional.communityAi.admin.userSessions.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the user session to update */
    userSessionId: string & tags.Format<"uuid">;

    /** Updated user session information */
    body: ICommunityAiUserSession.IUpdate;
  };
  export type Body = ICommunityAiUserSession.IUpdate;
  export type Response = ICommunityAiUserSession;

  export const METADATA = {
    method: "PUT",
    path: "/communityAi/admin/userSessions/:userSessionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityAi/admin/userSessions/${encodeURIComponent(props.userSessionId ?? "null")}`;
  export const random = (): ICommunityAiUserSession =>
    typia.random<ICommunityAiUserSession>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userSessionId")(() => typia.assert(props.userSessionId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
