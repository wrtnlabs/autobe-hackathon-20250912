import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityAiCommentSentimentAnalysis } from "../../../../../structures/ICommunityAiCommentSentimentAnalysis";
import { IPageICommunityAiCommentSentimentAnalysis } from "../../../../../structures/IPageICommunityAiCommentSentimentAnalysis";

/**
 * Create new sentiment analysis record for a comment.
 *
 * Create and store a new sentiment analysis result associated with the
 * specified comment identified by commentId.
 *
 * The request body must include valid sentiment values (positive, neutral,
 * negative), confidence scores as double precision floats, and the time the
 * analysis was performed.
 *
 * The system verifies user authorization for this creation.
 *
 * Errors are returned for invalid input data or unauthorized attempts.
 *
 * @param props.connection
 * @param props.commentId Unique identifier of the target comment
 * @param props.body Details for the new sentiment analysis record
 * @path /communityAi/admin/comments/:commentId/sentimentAnalyses
 * @accessor api.functional.communityAi.admin.comments.sentimentAnalyses.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the target comment */
    commentId: string & tags.Format<"uuid">;

    /** Details for the new sentiment analysis record */
    body: ICommunityAiCommentSentimentAnalysis.ICreate;
  };
  export type Body = ICommunityAiCommentSentimentAnalysis.ICreate;
  export type Response = ICommunityAiCommentSentimentAnalysis;

  export const METADATA = {
    method: "POST",
    path: "/communityAi/admin/comments/:commentId/sentimentAnalyses",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityAi/admin/comments/${encodeURIComponent(props.commentId ?? "null")}/sentimentAnalyses`;
  export const random = (): ICommunityAiCommentSentimentAnalysis =>
    typia.random<ICommunityAiCommentSentimentAnalysis>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve paginated list of sentiment analyses for a comment.
 *
 * Retrieve a paginated list of sentiment analyses associated with a specific
 * comment identified by commentId. This operation allows clients to efficiently
 * browse multiple sentiment analysis records, each detailing the sentiment
 * (positive, neutral, or negative) assessed by AI and the confidence score
 * achieved.
 *
 * Only authorized users with roles 'admin', 'moderator', or 'member' can access
 * sentiment analysis results. The commentId path parameter specifies the target
 * comment for which sentiment analyses are fetched.
 *
 * This operation interfaces directly with the
 * community_ai_comment_sentiment_analyses table, referencing comment IDs.
 * Pagination and filtering capabilities enable client applications to display
 * concise and timely sentiment analysis data effectively.
 *
 * Errors are handled by returning appropriate HTTP status codes and messages if
 * the commentId is invalid or if no records exist.
 *
 * @param props.connection
 * @param props.commentId Unique identifier of the target comment
 * @param props.body Search criteria and pagination parameters for sentiment
 *   analyses
 * @path /communityAi/admin/comments/:commentId/sentimentAnalyses
 * @accessor api.functional.communityAi.admin.comments.sentimentAnalyses.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the target comment */
    commentId: string & tags.Format<"uuid">;

    /** Search criteria and pagination parameters for sentiment analyses */
    body: ICommunityAiCommentSentimentAnalysis.IRequest;
  };
  export type Body = ICommunityAiCommentSentimentAnalysis.IRequest;
  export type Response = IPageICommunityAiCommentSentimentAnalysis;

  export const METADATA = {
    method: "PATCH",
    path: "/communityAi/admin/comments/:commentId/sentimentAnalyses",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityAi/admin/comments/${encodeURIComponent(props.commentId ?? "null")}/sentimentAnalyses`;
  export const random = (): IPageICommunityAiCommentSentimentAnalysis =>
    typia.random<IPageICommunityAiCommentSentimentAnalysis>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve sentiment analysis detail by ID for a comment.
 *
 * Retrieve detailed sentiment analysis information for a specific analysis
 * identified by id, related to the comment identified by commentId.
 *
 * This operation requires authorized access and returns full data of the
 * sentiment analysis including sentiment category (positive, neutral,
 * negative), confidence score, and when the analysis was carried out.
 *
 * Relies on the community_ai_comment_sentiment_analyses table with direct
 * references to comment data.
 *
 * Errors like invalid identifiers or unauthorized access result in proper error
 * responses.
 *
 * @param props.connection
 * @param props.commentId Unique identifier of the target comment
 * @param props.id Unique identifier of the target sentiment analysis
 * @path /communityAi/admin/comments/:commentId/sentimentAnalyses/:id
 * @accessor api.functional.communityAi.admin.comments.sentimentAnalyses.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target comment */
    commentId: string & tags.Format<"uuid">;

    /** Unique identifier of the target sentiment analysis */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityAiCommentSentimentAnalysis;

  export const METADATA = {
    method: "GET",
    path: "/communityAi/admin/comments/:commentId/sentimentAnalyses/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/admin/comments/${encodeURIComponent(props.commentId ?? "null")}/sentimentAnalyses/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ICommunityAiCommentSentimentAnalysis =>
    typia.random<ICommunityAiCommentSentimentAnalysis>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing sentiment analysis record for a comment.
 *
 * Modify an existing sentiment analysis linked to a comment, identified by
 * commentId and sentiment analysis id.
 *
 * Clients can update properties like sentiment classification (positive,
 * neutral, negative), confidence score, and analysis timestamp.
 *
 * Appropriate authorization is needed. Validation errors and unauthorized
 * attempts result in error responses.
 *
 * The successful response includes the updated entity data.
 *
 * @param props.connection
 * @param props.commentId Unique identifier of the target comment
 * @param props.id Unique identifier of the target sentiment analysis
 * @param props.body Updated sentiment analysis data
 * @path /communityAi/admin/comments/:commentId/sentimentAnalyses/:id
 * @accessor api.functional.communityAi.admin.comments.sentimentAnalyses.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target comment */
    commentId: string & tags.Format<"uuid">;

    /** Unique identifier of the target sentiment analysis */
    id: string & tags.Format<"uuid">;

    /** Updated sentiment analysis data */
    body: ICommunityAiCommentSentimentAnalysis.IUpdate;
  };
  export type Body = ICommunityAiCommentSentimentAnalysis.IUpdate;
  export type Response = ICommunityAiCommentSentimentAnalysis;

  export const METADATA = {
    method: "PUT",
    path: "/communityAi/admin/comments/:commentId/sentimentAnalyses/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityAi/admin/comments/${encodeURIComponent(props.commentId ?? "null")}/sentimentAnalyses/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ICommunityAiCommentSentimentAnalysis =>
    typia.random<ICommunityAiCommentSentimentAnalysis>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a comment sentiment analysis record by ID.
 *
 * Delete a sentiment analysis record for a particular comment by specifying the
 * commentId and sentiment analysis ID.
 *
 * This operation permanently removes the sentiment analysis record from the
 * 'community_ai_comment_sentiment_analyses' table.
 *
 * Only authorized users with suitable permissions can perform this deletion.
 * Attempting to delete a non-existing record results in an error.
 *
 * Parameters 'commentId' and 'id' correspond to the unique identifiers of the
 * comment and its sentiment analysis entry respectively, both expressed as UUID
 * strings.
 *
 * No request body is required. Successful execution results in no content
 * return.
 *
 * @param props.connection
 * @param props.commentId Unique identifier of the target comment
 * @param props.id Unique identifier of the sentiment analysis entry
 * @path /communityAi/admin/comments/:commentId/sentimentAnalyses/:id
 * @accessor api.functional.communityAi.admin.comments.sentimentAnalyses.eraseSentimentAnalysis
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseSentimentAnalysis(
  connection: IConnection,
  props: eraseSentimentAnalysis.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseSentimentAnalysis.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseSentimentAnalysis.METADATA,
          path: eraseSentimentAnalysis.path(props),
          status: null,
        },
      );
}
export namespace eraseSentimentAnalysis {
  export type Props = {
    /** Unique identifier of the target comment */
    commentId: string & tags.Format<"uuid">;

    /** Unique identifier of the sentiment analysis entry */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityAi/admin/comments/:commentId/sentimentAnalyses/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/admin/comments/${encodeURIComponent(props.commentId ?? "null")}/sentimentAnalyses/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseSentimentAnalysis.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseSentimentAnalysis.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
