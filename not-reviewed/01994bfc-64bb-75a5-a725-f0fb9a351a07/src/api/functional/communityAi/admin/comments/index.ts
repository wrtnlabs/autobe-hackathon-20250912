import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityAiComments } from "../../../../structures/ICommunityAiComments";
import { IPageICommunityAiComments } from "../../../../structures/IPageICommunityAiComments";
export * as sentimentAnalyses from "./sentimentAnalyses/index";

/**
 * Search and list comments with filters.
 *
 * Retrieve a paginated list of comments filtered by search criteria.
 *
 * Supports filters such as author id, post id, text keywords in the comment
 * body, and pagination parameters.
 *
 * Returns a paginated list of comment summary objects.
 *
 * Access restricted to authorized roles including members, moderators, and
 * admins.
 *
 * Errors returned for invalid query parameters or unauthorized access.
 *
 * This complements single comment retrieval and comment modification APIs.
 *
 * @param props.connection
 * @param props.body Search criteria including pagination and filters for
 *   comments
 * @path /communityAi/admin/comments
 * @accessor api.functional.communityAi.admin.comments.searchComments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function searchComments(
  connection: IConnection,
  props: searchComments.Props,
): Promise<searchComments.Response> {
  return true === connection.simulate
    ? searchComments.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...searchComments.METADATA,
          path: searchComments.path(),
          status: null,
        },
        props.body,
      );
}
export namespace searchComments {
  export type Props = {
    /** Search criteria including pagination and filters for comments */
    body: ICommunityAiComments.IRequest;
  };
  export type Body = ICommunityAiComments.IRequest;
  export type Response = IPageICommunityAiComments.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityAi/admin/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityAi/admin/comments";
  export const random = (): IPageICommunityAiComments.ISummary =>
    typia.random<IPageICommunityAiComments.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: searchComments.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: searchComments.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information for a comment.
 *
 * Retrieve detailed comment information by commentId.
 *
 * Returns full comment entity including body content, author, creation and
 * update timestamps, and deletion status.
 *
 * Access restricted to authorized roles (members, moderators, admins).
 *
 * Errors returned for non-existent comment or unauthorized access.
 *
 * Complements listing, update, and deletion endpoints.
 *
 * @param props.connection
 * @param props.commentId Unique comment identifier (UUID)
 * @path /communityAi/admin/comments/:commentId
 * @accessor api.functional.communityAi.admin.comments.atComment
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atComment(
  connection: IConnection,
  props: atComment.Props,
): Promise<atComment.Response> {
  return true === connection.simulate
    ? atComment.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atComment.METADATA,
          path: atComment.path(props),
          status: null,
        },
      );
}
export namespace atComment {
  export type Props = {
    /** Unique comment identifier (UUID) */
    commentId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityAiComments;

  export const METADATA = {
    method: "GET",
    path: "/communityAi/admin/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/admin/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): ICommunityAiComments =>
    typia.random<ICommunityAiComments>();
  export const simulate = (
    connection: IConnection,
    props: atComment.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atComment.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
