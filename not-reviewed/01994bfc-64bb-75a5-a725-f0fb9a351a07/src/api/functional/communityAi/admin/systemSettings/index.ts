import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityAiCommunityAiSystemSettings } from "../../../../structures/ICommunityAiCommunityAiSystemSettings";
import { IPageICommunityAiCommunityAiSystemSettings } from "../../../../structures/IPageICommunityAiCommunityAiSystemSettings";

/**
 * Create a new community AI system setting.
 *
 * The input must include a unique setting key and the associated value. An
 * optional description field can provide context for the setting.
 *
 * Upon creation, the system automatically generates timestamps for creation and
 * update.
 *
 * Only users with admin roles can perform this sensitive operation.
 *
 * Proper validation ensures unique keys and value formats.
 *
 * Errors include conflicts on duplicate keys and validation failures.
 *
 * @param props.connection
 * @param props.body Information required to create a community AI system
 *   setting
 * @path /communityAi/admin/systemSettings
 * @accessor api.functional.communityAi.admin.systemSettings.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information required to create a community AI system setting */
    body: ICommunityAiCommunityAiSystemSettings.ICreate;
  };
  export type Body = ICommunityAiCommunityAiSystemSettings.ICreate;
  export type Response = ICommunityAiCommunityAiSystemSettings;

  export const METADATA = {
    method: "POST",
    path: "/communityAi/admin/systemSettings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityAi/admin/systemSettings";
  export const random = (): ICommunityAiCommunityAiSystemSettings =>
    typia.random<ICommunityAiCommunityAiSystemSettings>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List and search community AI system settings.
 *
 * Retrieve a filtered and paginated list of community AI system configuration
 * settings.
 *
 * This operation queries the 'community_ai_system_settings' table, returning
 * system-wide parameters defined by unique keys and associated string values.
 * Each setting includes creation and update timestamps, and optionally a
 * descriptive note.
 *
 * Access to this endpoint may be restricted to authorized users such as admins
 * to prevent unauthorized configuration visibility.
 *
 * The operation supports complex search and filtering criteria via the request
 * body, allowing retrieval of specific settings by key, date ranges, or content
 * matching.
 *
 * The response returns a paginated list of system settings, useful for
 * administrative UI displays or auditing purposes.
 *
 * @param props.connection
 * @param props.body Search and pagination parameters for system settings
 *   filtering
 * @path /communityAi/admin/systemSettings
 * @accessor api.functional.communityAi.admin.systemSettings.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search and pagination parameters for system settings filtering */
    body: ICommunityAiCommunityAiSystemSettings.IRequest;
  };
  export type Body = ICommunityAiCommunityAiSystemSettings.IRequest;
  export type Response = IPageICommunityAiCommunityAiSystemSettings;

  export const METADATA = {
    method: "PATCH",
    path: "/communityAi/admin/systemSettings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityAi/admin/systemSettings";
  export const random = (): IPageICommunityAiCommunityAiSystemSettings =>
    typia.random<IPageICommunityAiCommunityAiSystemSettings>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a community AI system setting by ID.
 *
 * Retrieve detailed information of a community AI system setting by its unique
 * ID.
 *
 * The returned record includes the setting's key, value, description, and
 * timestamp metadata.
 *
 * Access control ensures only authorized users, typically admins, can view this
 * sensitive configuration information.
 *
 * Error handling covers cases of non-existent IDs resulting in appropriate
 * error responses.
 *
 * @param props.connection
 * @param props.id Unique identifier of the system setting
 * @path /communityAi/admin/systemSettings/:id
 * @accessor api.functional.communityAi.admin.systemSettings.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the system setting */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityAiCommunityAiSystemSettings;

  export const METADATA = {
    method: "GET",
    path: "/communityAi/admin/systemSettings/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/admin/systemSettings/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ICommunityAiCommunityAiSystemSettings =>
    typia.random<ICommunityAiCommunityAiSystemSettings>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a community AI system setting by ID.
 *
 * Update an existing community AI system setting identified by ID.
 *
 * Requires the ID path parameter and request body with fields to update such as
 * setting value and description.
 *
 * The setting key is immutable and cannot be changed.
 *
 * Access is restricted to users with admin privileges.
 *
 * Conflicts, invalid IDs, and validation errors are handled appropriately.
 *
 * Timestamps for update are maintained automatically.
 *
 * @param props.connection
 * @param props.id Unique identifier of the system setting to update
 * @param props.body Update data for the system setting
 * @path /communityAi/admin/systemSettings/:id
 * @accessor api.functional.communityAi.admin.systemSettings.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the system setting to update */
    id: string & tags.Format<"uuid">;

    /** Update data for the system setting */
    body: ICommunityAiCommunityAiSystemSettings.IUpdate;
  };
  export type Body = ICommunityAiCommunityAiSystemSettings.IUpdate;
  export type Response = ICommunityAiCommunityAiSystemSettings;

  export const METADATA = {
    method: "PUT",
    path: "/communityAi/admin/systemSettings/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityAi/admin/systemSettings/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ICommunityAiCommunityAiSystemSettings =>
    typia.random<ICommunityAiCommunityAiSystemSettings>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a community AI user role by ID.
 *
 * Permanently delete a community AI user role by its unique identifier. This
 * action removes all related permissions and associations. Only users with
 * administrative privileges can perform this operation.
 *
 * The deleted role will no longer be accessible or assignable after removal.
 *
 * Care must be taken as this action is irreversible.
 *
 * This operation complements role creation and retrieval endpoints in role
 * lifecycle management.
 *
 * @param props.connection
 * @param props.id Unique identifier of the user role to delete
 * @path /communityAi/admin/systemSettings/:id
 * @accessor api.functional.communityAi.admin.systemSettings.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the user role to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityAi/admin/systemSettings/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/admin/systemSettings/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
