import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityAiApiUsageLog } from "../../../../structures/ICommunityAiApiUsageLog";
import { IPageICommunityAiApiUsageLog } from "../../../../structures/IPageICommunityAiApiUsageLog";

/**
 * Search and retrieve paginated list of external API usage logs.
 *
 * Retrieve a filtered and paginated list of external API usage logs recorded by
 * the community AI platform. This operation supports complex search criteria
 * allowing users to query by attributes such as service provider, API endpoint
 * path, time ranges, response times, and status codes.
 *
 * The data originates from the community_ai_api_usage_logs table in the Prisma
 * schema, which stores detailed request and response metadata for API calls to
 * external AI and notification services. This enables auditing API performance
 * and reliability.
 *
 * Users accessing this endpoint must be authorized appropriately. The operation
 * returns paginated results including structured data matching the
 * community_ai_api_usage_logs entity.
 *
 * Filters and pagination parameters are supplied in the request body.
 *
 * This operation serves as a key tool for monitoring and troubleshooting
 * third-party integration performance and usage patterns within the platform.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for API usage
 *   logs filtering
 * @path /communityAi/admin/apiUsageLogs
 * @accessor api.functional.communityAi.admin.apiUsageLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for API usage logs
     * filtering
     */
    body: ICommunityAiApiUsageLog.IRequest;
  };
  export type Body = ICommunityAiApiUsageLog.IRequest;
  export type Response = IPageICommunityAiApiUsageLog;

  export const METADATA = {
    method: "PATCH",
    path: "/communityAi/admin/apiUsageLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityAi/admin/apiUsageLogs";
  export const random = (): IPageICommunityAiApiUsageLog =>
    typia.random<IPageICommunityAiApiUsageLog>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a detailed external API usage log by ID.
 *
 * Retrieve detailed information about a specific external API usage log entry
 * by its unique identifier. This record originates from the
 * community_ai_api_usage_logs table in the Prisma schema and contains
 * comprehensive data including service provider references, API endpoints
 * called, timing metrics, HTTP status, and error details.
 *
 * The path parameter `id` must be a valid UUID representing the target API
 * usage log entry.
 *
 * This operation requires administrative authorization due to the sensitive
 * nature of external service logs.
 *
 * @param props.connection
 * @param props.id Unique identifier of the API usage log entry
 * @path /communityAi/admin/apiUsageLogs/:id
 * @accessor api.functional.communityAi.admin.apiUsageLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the API usage log entry */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityAiApiUsageLog;

  export const METADATA = {
    method: "GET",
    path: "/communityAi/admin/apiUsageLogs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/admin/apiUsageLogs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ICommunityAiApiUsageLog =>
    typia.random<ICommunityAiApiUsageLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
