import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityAiModerator } from "../../../../structures/ICommunityAiModerator";

/**
 * Update moderator by id.
 *
 * Update a specific moderator's information in the community AI system.
 *
 * This operation allows authorized agents with the 'moderator' role to update
 * moderator data. The moderator data includes email, password hash (for
 * authentication), and display name.
 *
 * Email must remain unique across all moderators. The operation updates the
 * database record in the 'community_ai_moderators' table using the UUID path
 * parameter 'id'.
 *
 * Proper validation must ensure that email format, password hashing, and
 * display name constraints are respected. Errors should be returned if the
 * moderator does not exist or email conflicts occur.
 *
 * This operation is crucial for maintaining moderator account accuracy and
 * access credentials.
 *
 * Associated Prisma model: community_ai_moderators.
 *
 * @param props.connection
 * @param props.id UUID of the target moderator to update
 * @param props.body Update data for a moderator
 * @path /communityAi/moderator/moderators/:id
 * @accessor api.functional.communityAi.moderator.moderators.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID of the target moderator to update */
    id: string & tags.Format<"uuid">;

    /** Update data for a moderator */
    body: ICommunityAiModerator.IUpdate;
  };
  export type Body = ICommunityAiModerator.IUpdate;
  export type Response = ICommunityAiModerator;

  export const METADATA = {
    method: "PUT",
    path: "/communityAi/moderator/moderators/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityAi/moderator/moderators/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ICommunityAiModerator =>
    typia.random<ICommunityAiModerator>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete moderator by id.
 *
 * Delete a specific moderator from the community AI platform.
 *
 * This operation removes the moderator record permanently from the
 * 'community_ai_moderators' table identified by UUID path parameter 'id'.
 *
 * Only authorized 'moderator' role users can execute this action.
 *
 * The deletion is a hard delete; no data recovery is possible after.
 *
 * If the moderator does not exist, an appropriate error must be returned.
 *
 * This operation ensures that obsolete or unauthorized moderators are removed
 * from the system.
 *
 * Associated Prisma model: community_ai_moderators.
 *
 * @param props.connection
 * @param props.id UUID of the target moderator to delete
 * @path /communityAi/moderator/moderators/:id
 * @accessor api.functional.communityAi.moderator.moderators.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of the target moderator to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityAi/moderator/moderators/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/moderator/moderators/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
