import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityAiContentAccessLogs } from "../../../../structures/ICommunityAiContentAccessLogs";
import { IPageICommunityAiContentAccessLogs } from "../../../../structures/IPageICommunityAiContentAccessLogs";

/**
 * List content access logs with filtering and pagination.
 *
 * Retrieve a paginated, filtered list of content access records showing member
 * interactions with posts and comments. Supports search criteria including
 * access types, member IDs, date ranges, and device info.
 *
 * This operation is essential for monitoring user behavior, auditing content
 * popularity, and compliance tracking.
 *
 * The endpoint includes pagination and sorting capabilities, returning summary
 * data optimized for list display.
 *
 * Security and privacy considerations restrict access to authorized personnel
 * only.
 *
 * Typical use involves audit dashboards and reporting tools. Errors occur if
 * invalid filtering parameters are specified.
 *
 * Returns a paginated collection of content access log summaries matching
 * search criteria.
 *
 * @param props.connection
 * @param props.body Search filter and pagination parameters for content access
 *   logs
 * @path /communityAi/moderator/auditContentAccessLogs
 * @accessor api.functional.communityAi.moderator.auditContentAccessLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search filter and pagination parameters for content access logs */
    body: ICommunityAiContentAccessLogs.IRequest;
  };
  export type Body = ICommunityAiContentAccessLogs.IRequest;
  export type Response = IPageICommunityAiContentAccessLogs.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityAi/moderator/auditContentAccessLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityAi/moderator/auditContentAccessLogs";
  export const random = (): IPageICommunityAiContentAccessLogs.ISummary =>
    typia.random<IPageICommunityAiContentAccessLogs.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
