import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityAiUserReport } from "../../../../../structures/ICommunityAiUserReport";
import { ICommunityAiModeratorReview } from "../../../../../structures/ICommunityAiModeratorReview";
import { IPageICommunityAiModeratorReview } from "../../../../../structures/IPageICommunityAiModeratorReview";

/**
 * Create a new moderator review for a specific user report.
 *
 * This API endpoint helps moderators submit their review decisions for user
 * reports. Each review is associated with a specific user report identified by
 * userReportId in the path.
 *
 * The operation requires authenticated access by moderators, enforcing
 * role-based permissions.
 *
 * Upon successful submission, a new review record is created in the
 * community_ai_moderator_reviews table, linking to the given user report,
 * including the moderator's decision and optional comments.
 *
 * Proper validation ensures only existing reports can be reviewed, and data
 * consistency is maintained. This operation supports the moderation workflow by
 * enabling moderators to record their evaluations which may trigger further
 * administrative actions.
 *
 * Errors include handling invalid/non-existent userReportId or missing decision
 * field.
 *
 * This operation requires the moderator role authentication, and is typically
 * used via the moderation UI or automated moderation tools.
 *
 * @param props.connection
 * @param props.userReportId Unique identifier of the user report to be reviewed
 * @param props.body Moderator review creation data including decision and
 *   optional comments
 * @path /communityAi/moderator/userReports/:userReportId/moderatorReviews
 * @accessor api.functional.communityAi.moderator.userReports.moderatorReviews.createUserReportModeratorReview
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createUserReportModeratorReview(
  connection: IConnection,
  props: createUserReportModeratorReview.Props,
): Promise<createUserReportModeratorReview.Response> {
  return true === connection.simulate
    ? createUserReportModeratorReview.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createUserReportModeratorReview.METADATA,
          path: createUserReportModeratorReview.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace createUserReportModeratorReview {
  export type Props = {
    /** Unique identifier of the user report to be reviewed */
    userReportId: string & tags.Format<"uuid">;

    /**
     * Moderator review creation data including decision and optional
     * comments
     */
    body: ICommunityAiUserReport.IModeratorReviewICreate;
  };
  export type Body = ICommunityAiUserReport.IModeratorReviewICreate;
  export type Response = ICommunityAiModeratorReview;

  export const METADATA = {
    method: "POST",
    path: "/communityAi/moderator/userReports/:userReportId/moderatorReviews",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityAi/moderator/userReports/${encodeURIComponent(props.userReportId ?? "null")}/moderatorReviews`;
  export const random = (): ICommunityAiModeratorReview =>
    typia.random<ICommunityAiModeratorReview>();
  export const simulate = (
    connection: IConnection,
    props: createUserReportModeratorReview.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createUserReportModeratorReview.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userReportId")(() => typia.assert(props.userReportId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List moderator reviews linked to a user report.
 *
 * Retrieve a paginated list of moderator reviews for a specific user report by
 * the user report's unique identifier.
 *
 * Moderator reviews document decisions made by moderators regarding
 * user-submitted reports. This operation returns review details such as
 * decision outcomes, moderator comments, and timestamps.
 *
 * Security restrictions typically allow access to authorized moderators and
 * administrators.
 *
 * This operation aids transparency and accountability in the moderation
 * workflow and can be used alongside report management APIs.
 *
 * @param props.connection
 * @param props.userReportId Unique identifier of the user report to get related
 *   moderator reviews
 * @param props.body Filtering and pagination parameters for retrieving
 *   moderator reviews
 * @path /communityAi/moderator/userReports/:userReportId/moderatorReviews
 * @accessor api.functional.communityAi.moderator.userReports.moderatorReviews.indexModeratorReviewsByUserReport
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexModeratorReviewsByUserReport(
  connection: IConnection,
  props: indexModeratorReviewsByUserReport.Props,
): Promise<indexModeratorReviewsByUserReport.Response> {
  return true === connection.simulate
    ? indexModeratorReviewsByUserReport.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexModeratorReviewsByUserReport.METADATA,
          path: indexModeratorReviewsByUserReport.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace indexModeratorReviewsByUserReport {
  export type Props = {
    /** Unique identifier of the user report to get related moderator reviews */
    userReportId: string & tags.Format<"uuid">;

    /** Filtering and pagination parameters for retrieving moderator reviews */
    body: ICommunityAiModeratorReview.IRequest;
  };
  export type Body = ICommunityAiModeratorReview.IRequest;
  export type Response = IPageICommunityAiModeratorReview;

  export const METADATA = {
    method: "PATCH",
    path: "/communityAi/moderator/userReports/:userReportId/moderatorReviews",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityAi/moderator/userReports/${encodeURIComponent(props.userReportId ?? "null")}/moderatorReviews`;
  export const random = (): IPageICommunityAiModeratorReview =>
    typia.random<IPageICommunityAiModeratorReview>();
  export const simulate = (
    connection: IConnection,
    props: indexModeratorReviewsByUserReport.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexModeratorReviewsByUserReport.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userReportId")(() => typia.assert(props.userReportId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details of a moderator review by ID and related user report.
 *
 * Get detailed information of a specific moderator review associated with a
 * given user report.
 *
 * Moderator reviews capture decisions and comments made by moderators regarding
 * flagged content reports. This operation returns comprehensive information
 * about the review, aiding moderation transparency.
 *
 * Access is limited to authorized moderators and admins to protect sensitive
 * moderation data.
 *
 * Errors are returned if the specified review or user report does not exist or
 * if access is unauthorized.
 *
 * @param props.connection
 * @param props.userReportId Unique identifier of the user report associated
 *   with the moderator review
 * @param props.moderatorReviewId Unique identifier of the moderator review to
 *   retrieve
 * @path /communityAi/moderator/userReports/:userReportId/moderatorReviews/:moderatorReviewId
 * @accessor api.functional.communityAi.moderator.userReports.moderatorReviews.atModeratorReview
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atModeratorReview(
  connection: IConnection,
  props: atModeratorReview.Props,
): Promise<atModeratorReview.Response> {
  return true === connection.simulate
    ? atModeratorReview.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atModeratorReview.METADATA,
          path: atModeratorReview.path(props),
          status: null,
        },
      );
}
export namespace atModeratorReview {
  export type Props = {
    /**
     * Unique identifier of the user report associated with the moderator
     * review
     */
    userReportId: string & tags.Format<"uuid">;

    /** Unique identifier of the moderator review to retrieve */
    moderatorReviewId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityAiModeratorReview;

  export const METADATA = {
    method: "GET",
    path: "/communityAi/moderator/userReports/:userReportId/moderatorReviews/:moderatorReviewId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/moderator/userReports/${encodeURIComponent(props.userReportId ?? "null")}/moderatorReviews/${encodeURIComponent(props.moderatorReviewId ?? "null")}`;
  export const random = (): ICommunityAiModeratorReview =>
    typia.random<ICommunityAiModeratorReview>();
  export const simulate = (
    connection: IConnection,
    props: atModeratorReview.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atModeratorReview.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userReportId")(() => typia.assert(props.userReportId));
      assert.param("moderatorReviewId")(() =>
        typia.assert(props.moderatorReviewId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing moderator review for a specific user report.
 *
 * Update a specific moderator review associated with a user report.
 *
 * Moderators can modify their review decisions and comments using this API. It
 * enforces authentication and role-based authorization.
 *
 * The path parameters userReportId and moderatorReviewId uniquely identify the
 * review record.
 *
 * The request body includes updatable fields such as decision and comments.
 *
 * The API verifies that the review exists and belongs to the moderator before
 * applying changes.
 *
 * Errors are handled for invalid IDs or unauthorized attempts.
 *
 * Typically used by moderation tools or web UI to correct or update review
 * information.
 *
 * @param props.connection
 * @param props.userReportId Unique identifier of the user report associated
 *   with the review
 * @param props.moderatorReviewId Unique identifier of the moderator review to
 *   update
 * @param props.body Updated moderator review data with decision and comments
 * @path /communityAi/moderator/userReports/:userReportId/moderatorReviews/:moderatorReviewId
 * @accessor api.functional.communityAi.moderator.userReports.moderatorReviews.updateUserReportModeratorReview
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateUserReportModeratorReview(
  connection: IConnection,
  props: updateUserReportModeratorReview.Props,
): Promise<updateUserReportModeratorReview.Response> {
  return true === connection.simulate
    ? updateUserReportModeratorReview.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateUserReportModeratorReview.METADATA,
          path: updateUserReportModeratorReview.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateUserReportModeratorReview {
  export type Props = {
    /** Unique identifier of the user report associated with the review */
    userReportId: string & tags.Format<"uuid">;

    /** Unique identifier of the moderator review to update */
    moderatorReviewId: string & tags.Format<"uuid">;

    /** Updated moderator review data with decision and comments */
    body: ICommunityAiUserReport.IModeratorReviewIUpdate;
  };
  export type Body = ICommunityAiUserReport.IModeratorReviewIUpdate;
  export type Response = ICommunityAiModeratorReview;

  export const METADATA = {
    method: "PUT",
    path: "/communityAi/moderator/userReports/:userReportId/moderatorReviews/:moderatorReviewId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityAi/moderator/userReports/${encodeURIComponent(props.userReportId ?? "null")}/moderatorReviews/${encodeURIComponent(props.moderatorReviewId ?? "null")}`;
  export const random = (): ICommunityAiModeratorReview =>
    typia.random<ICommunityAiModeratorReview>();
  export const simulate = (
    connection: IConnection,
    props: updateUserReportModeratorReview.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateUserReportModeratorReview.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userReportId")(() => typia.assert(props.userReportId));
      assert.param("moderatorReviewId")(() =>
        typia.assert(props.moderatorReviewId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a modifier review for a specific user report.
 *
 * Delete a moderator review associated with a user report.
 *
 * This API endpoint removes the review record permanently from the database. It
 * requires moderator authentication and permission checks.
 *
 * The path parameters userReportId and moderatorReviewId specify the unique
 * review to delete.
 *
 * Error handling includes validation of identifiers and existence checks.
 *
 * This operation supports correction of moderation records or removal of
 * obsolete reviews.
 *
 * Care must be taken as this is a hard delete with no recovery.
 *
 * Typically used via moderation management tools.
 *
 * @param props.connection
 * @param props.userReportId Unique identifier of the user report associated
 *   with the review
 * @param props.moderatorReviewId Unique identifier of the moderator review to
 *   delete
 * @path /communityAi/moderator/userReports/:userReportId/moderatorReviews/:moderatorReviewId
 * @accessor api.functional.communityAi.moderator.userReports.moderatorReviews.eraseUserReportModeratorReview
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseUserReportModeratorReview(
  connection: IConnection,
  props: eraseUserReportModeratorReview.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseUserReportModeratorReview.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseUserReportModeratorReview.METADATA,
          path: eraseUserReportModeratorReview.path(props),
          status: null,
        },
      );
}
export namespace eraseUserReportModeratorReview {
  export type Props = {
    /** Unique identifier of the user report associated with the review */
    userReportId: string & tags.Format<"uuid">;

    /** Unique identifier of the moderator review to delete */
    moderatorReviewId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityAi/moderator/userReports/:userReportId/moderatorReviews/:moderatorReviewId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/moderator/userReports/${encodeURIComponent(props.userReportId ?? "null")}/moderatorReviews/${encodeURIComponent(props.moderatorReviewId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseUserReportModeratorReview.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseUserReportModeratorReview.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userReportId")(() => typia.assert(props.userReportId));
      assert.param("moderatorReviewId")(() =>
        typia.assert(props.moderatorReviewId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
