import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityAiExternalService } from "../../../../structures/ICommunityAiExternalService";
import { IPageICommunityAiExternalService } from "../../../../structures/IPageICommunityAiExternalService";

/**
 * Retrieve a paginated list of external system service configurations.
 *
 * Retrieve filtered and paginated list of configured external services
 * integrated with Community AI platform. Allows searching and sorting by
 * service name, status, and activation flags.
 *
 * Security considerations: Available to admin and moderator roles.
 *
 * Parameters: Supports input of filter criteria, pagination offset, and sorting
 * order.
 *
 * Response: Returns paginated external service summaries with key information
 * for management and operational oversight.
 *
 * @param props.connection
 * @param props.body Filtering and pagination parameters for external services
 *   search
 * @path /communityAi/moderator/externalServices
 * @accessor api.functional.communityAi.moderator.externalServices.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filtering and pagination parameters for external services search */
    body: ICommunityAiExternalService.IRequest;
  };
  export type Body = ICommunityAiExternalService.IRequest;
  export type Response = IPageICommunityAiExternalService.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityAi/moderator/externalServices",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityAi/moderator/externalServices";
  export const random = (): IPageICommunityAiExternalService.ISummary =>
    typia.random<IPageICommunityAiExternalService.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
