import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityAiUserReport } from "../../../../structures/ICommunityAiUserReport";

/**
 * Create a new user report for inappropriate content.
 *
 * Allows a community member to submit a new report regarding inappropriate
 * posts or comments. The client must provide essential information such as the
 * reporting member's ID, the target post or comment IDs if applicable, the
 * reason for the report, and the initial resolution status.
 *
 * The system validates required fields and enforces constraints on textual
 * data.
 *
 * Upon successful creation, the full user report record with IDs and timestamps
 * is returned.
 *
 * This endpoint requires the user to be authenticated as a member.
 *
 * @param props.connection
 * @param props.body Information required to create a user report
 * @path /communityAi/member/userReports
 * @accessor api.functional.communityAi.member.userReports.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information required to create a user report */
    body: ICommunityAiUserReport.ICreate;
  };
  export type Body = ICommunityAiUserReport.ICreate;
  export type Response = ICommunityAiUserReport;

  export const METADATA = {
    method: "POST",
    path: "/communityAi/member/userReports",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityAi/member/userReports";
  export const random = (): ICommunityAiUserReport =>
    typia.random<ICommunityAiUserReport>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
