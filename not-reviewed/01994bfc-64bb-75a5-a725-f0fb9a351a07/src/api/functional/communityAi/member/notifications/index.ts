import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityAiNotification } from "../../../../structures/ICommunityAiNotification";
import { IPageICommunityAiNotification } from "../../../../structures/IPageICommunityAiNotification";
export * as statuses from "./statuses/index";

/**
 * Search and retrieve a filtered, paginated list of user notifications.
 *
 * This operation provides the functionality to search and retrieve
 * notifications targeted to users in the community AI platform. Notifications
 * are stored in the community_ai_notifications table with detailed information
 * such as notification type, title, message content, recipient user ID,
 * creation date, and read status.
 *
 * The search supports parameters for filtering by recipient user, notification
 * types, creation date ranges, and read status. Pagination parameters allow
 * slicing large notification sets for efficient UI display. Sorting rules
 * facilitate ordering notifications by created date or other supported fields.
 *
 * Security considerations ensure that only authorized users can access their
 * own notifications. This operation requires authenticated user roles to
 * protect personal notification data and maintain confidentiality.
 *
 * Response includes paginated notification summaries, providing essential
 * details for list views such as title, type, read status, and timestamps. UI
 * clients may link individual notification details via separate operations.
 *
 * This operation corresponds to the community_ai_notifications table defined in
 * the Prisma DB schema under the Notifications namespace.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for notifications
 *   filtering
 * @path /communityAi/member/notifications
 * @accessor api.functional.communityAi.member.notifications.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for notifications filtering */
    body: ICommunityAiNotification.IRequest;
  };
  export type Body = ICommunityAiNotification.IRequest;
  export type Response = IPageICommunityAiNotification.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityAi/member/notifications",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityAi/member/notifications";
  export const random = (): IPageICommunityAiNotification.ISummary =>
    typia.random<IPageICommunityAiNotification.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a user notification.
 *
 * This operation allows an authenticated user to retrieve detailed information
 * about a single notification identified by its unique notificationId. The
 * notification data is stored in the community_ai_notifications table and
 * includes comprehensive fields such as notification type, title, message,
 * recipient user ID, read timestamp, creation and update timestamps.
 *
 * Security is enforced by restricting access to only authorized users who own
 * the notification record. This supports privacy and data protection policies.
 *
 * Clients use this operation to show detailed notification views, mark
 * notifications as read, or provide additional user interactions based on
 * notification content.
 *
 * This corresponds to the community_ai_notifications table in the Prisma schema
 * within the Notifications module.
 *
 * @param props.connection
 * @param props.notificationId Unique identifier of the target notification
 * @path /communityAi/member/notifications/:notificationId
 * @accessor api.functional.communityAi.member.notifications.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target notification */
    notificationId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityAiNotification;

  export const METADATA = {
    method: "GET",
    path: "/communityAi/member/notifications/:notificationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/member/notifications/${encodeURIComponent(props.notificationId ?? "null")}`;
  export const random = (): ICommunityAiNotification =>
    typia.random<ICommunityAiNotification>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("notificationId")(() => typia.assert(props.notificationId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific notification by notificationId.
 *
 * Update the details of a user notification identified by notificationId. The
 * notification contains information such as notification type (e.g., comment
 * reply, fact-check flag), title, message content, and its read status.
 *
 * This operation interacts with the community_ai_notifications table from the
 * Community AI schema, which stores notifications sent to community members for
 * various events.
 *
 * Security considerations require that only authorized authenticated users can
 * update their notifications or administratively managed notifications.
 *
 * The operation supports updating notification text and status, which allows
 * users to mark notifications as read or modify the content as needed. It
 * requires the unique identifier of the notification in the path parameter.
 *
 * Validation ensures that notificationId matches a UUID format, and updated
 * fields comply with their data type and length constraints.
 *
 * Related operations include retrieving notification details, listing
 * notification statuses, and creating new notifications.
 *
 * On success, the updated notification entity is returned with all its details.
 *
 * @param props.connection
 * @param props.notificationId Unique identifier of the notification to update
 * @param props.body Update data for the notification
 * @path /communityAi/member/notifications/:notificationId
 * @accessor api.functional.communityAi.member.notifications.updateNotification
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateNotification(
  connection: IConnection,
  props: updateNotification.Props,
): Promise<updateNotification.Response> {
  return true === connection.simulate
    ? updateNotification.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateNotification.METADATA,
          path: updateNotification.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateNotification {
  export type Props = {
    /** Unique identifier of the notification to update */
    notificationId: string & tags.Format<"uuid">;

    /** Update data for the notification */
    body: ICommunityAiNotification.IUpdate;
  };
  export type Body = ICommunityAiNotification.IUpdate;
  export type Response = ICommunityAiNotification;

  export const METADATA = {
    method: "PUT",
    path: "/communityAi/member/notifications/:notificationId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityAi/member/notifications/${encodeURIComponent(props.notificationId ?? "null")}`;
  export const random = (): ICommunityAiNotification =>
    typia.random<ICommunityAiNotification>();
  export const simulate = (
    connection: IConnection,
    props: updateNotification.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateNotification.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("notificationId")(() => typia.assert(props.notificationId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specific notification by notificationId.
 *
 * Delete a notification permanently by its unique identifier notificationId.
 *
 * This operation deletes the record from the community_ai_notifications table
 * and removes it entirely from the system.
 *
 * Only authorized users can delete notifications.
 *
 * Path parameter notificationId must be a valid UUID.
 *
 * Successful deletion results in no response content.
 *
 * Use this operation to remove notifications that are no longer relevant or
 * required.
 *
 * @param props.connection
 * @param props.notificationId Unique identifier of the notification to delete
 * @path /communityAi/member/notifications/:notificationId
 * @accessor api.functional.communityAi.member.notifications.eraseNotification
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseNotification(
  connection: IConnection,
  props: eraseNotification.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseNotification.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseNotification.METADATA,
          path: eraseNotification.path(props),
          status: null,
        },
      );
}
export namespace eraseNotification {
  export type Props = {
    /** Unique identifier of the notification to delete */
    notificationId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityAi/member/notifications/:notificationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/member/notifications/${encodeURIComponent(props.notificationId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseNotification.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseNotification.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("notificationId")(() => typia.assert(props.notificationId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
