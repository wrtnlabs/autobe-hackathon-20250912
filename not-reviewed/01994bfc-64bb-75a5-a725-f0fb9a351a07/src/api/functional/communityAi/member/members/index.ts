import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityAiMember } from "../../../../structures/ICommunityAiMember";
import { IPageICommunityAiMember } from "../../../../structures/IPageICommunityAiMember";
export * as posts from "./posts/index";

/**
 * Search and paginate community AI members.
 *
 * Retrieve a filtered, sortable, and paginated list of community AI members.
 *
 * This operation supports complex queries on member identity fields, including
 * email or display name searches, creation date filtering, and sorting
 * options.
 *
 * Results include summary-level member information and exclude sensitive data
 * such as password hashes.
 *
 * Only authenticated members can access this list.
 *
 * This endpoint interacts with the 'community_ai_members' table to gather
 * member data.
 *
 * Pagination parameters determine page size and offset.
 *
 * Filtering and sorting parameters allow efficient data retrieval suited for UI
 * lists.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for member
 *   filtering
 * @path /communityAi/member/members
 * @accessor api.functional.communityAi.member.members.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for member filtering */
    body: ICommunityAiMember.IRequest;
  };
  export type Body = ICommunityAiMember.IRequest;
  export type Response = IPageICommunityAiMember.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityAi/member/members",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityAi/member/members";
  export const random = (): IPageICommunityAiMember.ISummary =>
    typia.random<IPageICommunityAiMember.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get community AI member by id.
 *
 * Retrieve detailed information about a specific community AI member.
 *
 * This operation requires a UUID 'id' path parameter referencing the member to
 * retrieve.
 *
 * Only authenticated users with the 'member' role can access this information.
 *
 * Returned data includes member profile details excluding sensitive
 * authentication credentials.
 *
 * This endpoint queries the 'community_ai_members' table.
 *
 * Errors to be returned if the member does not exist.
 *
 * Useful for profile viewing and administrative purposes.
 *
 * Associated Prisma model: community_ai_members.
 *
 * @param props.connection
 * @param props.id UUID of the target member
 * @path /communityAi/member/members/:id
 * @accessor api.functional.communityAi.member.members.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** UUID of the target member */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityAiMember;

  export const METADATA = {
    method: "GET",
    path: "/communityAi/member/members/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/member/members/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ICommunityAiMember =>
    typia.random<ICommunityAiMember>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update existing community member profile.
 *
 * Update an existing community member's profile data including email, password
 * hash, and display name. The request must specify the member's unique ID in
 * the path parameter. Updates reflect immediately with an updated timestamp.
 *
 * Authorization checks are required at the business logic layer to ensure only
 * the member or authorized personnel update profiles.
 *
 * This supports user profile management and credential changes with appropriate
 * validation.
 *
 * If the member ID does not match any existing user, an error is returned.
 *
 * The response contains the updated member details without exposing sensitive
 * password information.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target member
 * @param props.body Updated data for the communityAi member
 * @path /communityAi/member/members/:id
 * @accessor api.functional.communityAi.member.members.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target member */
    id: string & tags.Format<"uuid">;

    /** Updated data for the communityAi member */
    body: ICommunityAiMember.IUpdate;
  };
  export type Body = ICommunityAiMember.IUpdate;
  export type Response = ICommunityAiMember;

  export const METADATA = {
    method: "PUT",
    path: "/communityAi/member/members/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityAi/member/members/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ICommunityAiMember =>
    typia.random<ICommunityAiMember>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
