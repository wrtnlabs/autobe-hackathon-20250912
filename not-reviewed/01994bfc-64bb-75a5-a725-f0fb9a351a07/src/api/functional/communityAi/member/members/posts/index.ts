import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityAiPost } from "../../../../../structures/ICommunityAiPost";
import { ICommunityAiPosts } from "../../../../../structures/ICommunityAiPosts";
import { IPageICommunityAiPosts } from "../../../../../structures/IPageICommunityAiPosts";

/**
 * Create a new post for a member.
 *
 * Create a new post under the specified member's account.
 *
 * This operation accepts post details such as title, slug, body content,
 * status, and business status. The post will be associated to the member
 * identified by memberId.
 *
 * Only users with the member authorization role can perform this operation. The
 * post content must be valid and meet business rules around non-empty content
 * and length limits.
 *
 * Upon success, the newly created post entity is returned including assigned
 * unique identifiers and timestamps.
 *
 * This endpoint persists data to the community_ai_posts table in the database.
 *
 * @param props.connection
 * @param props.memberId The member's unique identifier
 * @param props.body Data required to create a new post for a member
 * @path /communityAi/member/members/:memberId/posts
 * @accessor api.functional.communityAi.member.members.posts.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** The member's unique identifier */
    memberId: string & tags.Format<"uuid">;

    /** Data required to create a new post for a member */
    body: ICommunityAiPost.ICreate;
  };
  export type Body = ICommunityAiPost.ICreate;
  export type Response = ICommunityAiPost;

  export const METADATA = {
    method: "POST",
    path: "/communityAi/member/members/:memberId/posts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityAi/member/members/${encodeURIComponent(props.memberId ?? "null")}/posts`;
  export const random = (): ICommunityAiPost =>
    typia.random<ICommunityAiPost>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve paginated posts by member ID.
 *
 * Retrieve a filtered and paginated list of posts authored by a specific
 * community member. The member ID is provided as a path parameter. The request
 * body allows specifying filters such as status, date ranges, keywords, and
 * pagination options.
 *
 * This operation supports profile views, user activity feeds, and moderation
 * oversight by fetching member-specific posts.
 *
 * Authorization restrictions apply to ensure privacy and data access integrity.
 *
 * The response contains page metadata and post summary elements.
 *
 * @param props.connection
 * @param props.memberId Unique identifier of the member whose posts are queried
 * @param props.body Search and pagination parameters for filtering member posts
 * @path /communityAi/member/members/:memberId/posts
 * @accessor api.functional.communityAi.member.members.posts.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the member whose posts are queried */
    memberId: string & tags.Format<"uuid">;

    /** Search and pagination parameters for filtering member posts */
    body: ICommunityAiPosts.IRequest;
  };
  export type Body = ICommunityAiPosts.IRequest;
  export type Response = IPageICommunityAiPosts.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityAi/member/members/:memberId/posts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityAi/member/members/${encodeURIComponent(props.memberId ?? "null")}/posts`;
  export const random = (): IPageICommunityAiPosts.ISummary =>
    typia.random<IPageICommunityAiPosts.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a member's specific post details.
 *
 * Retrieve a specific post belonging to a member by providing memberId and
 * postId.
 *
 * This operation allows authenticated users with roles admin, moderator, or
 * member to access the detailed content of a post including title, slug, body,
 * status, and timestamps. The post is uniquely identified by its id and must
 * belong to the specified memberId as its author_id.
 *
 * Security controls restrict access only to authorized roles. Business logic
 * expects that only the post author or privileged users may view the post
 * details.
 *
 * This operation references the community_ai_posts table where posts have a
 * soft delete timestamp; however, this endpoint returns only active posts.
 *
 * If the post does not exist or does not belong to the member, an error will be
 * returned.
 *
 * This GET endpoint responds with full post details suitable for user display
 * or editing in UI clients.
 *
 * @param props.connection
 * @param props.memberId The member's unique identifier
 * @param props.postId The unique identifier of the post to retrieve
 * @path /communityAi/member/members/:memberId/posts/:postId
 * @accessor api.functional.communityAi.member.members.posts.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The member's unique identifier */
    memberId: string & tags.Format<"uuid">;

    /** The unique identifier of the post to retrieve */
    postId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityAiPost;

  export const METADATA = {
    method: "GET",
    path: "/communityAi/member/members/:memberId/posts/:postId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/member/members/${encodeURIComponent(props.memberId ?? "null")}/posts/${encodeURIComponent(props.postId ?? "null")}`;
  export const random = (): ICommunityAiPost =>
    typia.random<ICommunityAiPost>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
      assert.param("postId")(() => typia.assert(props.postId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a member's post.
 *
 * Update an existing post's details under the specified member's account.
 *
 * Authorized users with roles admin, moderator, or member can modify the post
 * content, title, slug, status, and business status.
 *
 * The post is identified by postId and must belong to the member with memberId.
 * The update form must comply with content validation rules.
 *
 * This endpoint updates the record in the community_ai_posts table and returns
 * the modified post data.
 *
 * @param props.connection
 * @param props.memberId The member's unique identifier
 * @param props.postId The unique identifier of the post to update
 * @param props.body Updated post data for member's post
 * @path /communityAi/member/members/:memberId/posts/:postId
 * @accessor api.functional.communityAi.member.members.posts.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** The member's unique identifier */
    memberId: string & tags.Format<"uuid">;

    /** The unique identifier of the post to update */
    postId: string & tags.Format<"uuid">;

    /** Updated post data for member's post */
    body: ICommunityAiPost.IUpdate;
  };
  export type Body = ICommunityAiPost.IUpdate;
  export type Response = ICommunityAiPost;

  export const METADATA = {
    method: "PUT",
    path: "/communityAi/member/members/:memberId/posts/:postId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityAi/member/members/${encodeURIComponent(props.memberId ?? "null")}/posts/${encodeURIComponent(props.postId ?? "null")}`;
  export const random = (): ICommunityAiPost =>
    typia.random<ICommunityAiPost>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a member's post (soft delete).
 *
 * Delete a specific post from a member's account.
 *
 * This operation performs a soft delete by setting the deleted_at timestamp,
 * making the post invisible to public queries while retaining data for audits.
 *
 * Only authorized users with roles admin, moderator, or member can delete posts
 * with appropriate ownership or permission.
 *
 * No response body is returned for this operation.
 *
 * @param props.connection
 * @param props.memberId The member's unique identifier
 * @param props.postId The unique identifier of the post to delete
 * @path /communityAi/member/members/:memberId/posts/:postId
 * @accessor api.functional.communityAi.member.members.posts.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** The member's unique identifier */
    memberId: string & tags.Format<"uuid">;

    /** The unique identifier of the post to delete */
    postId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityAi/member/members/:memberId/posts/:postId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/member/members/${encodeURIComponent(props.memberId ?? "null")}/posts/${encodeURIComponent(props.postId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
      assert.param("postId")(() => typia.assert(props.postId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
