import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityAiComment } from "../../../../../structures/ICommunityAiComment";
import { IPageICommunityAiComment } from "../../../../../structures/IPageICommunityAiComment";
import { ICommunityAiComments } from "../../../../../structures/ICommunityAiComments";

/**
 * Create a new comment on a communityAi post.
 *
 * Create a new comment on the specified post identified by postId.
 *
 * Request body must contain valid comment content not exceeding 1000
 * characters.
 *
 * Only authenticated members can create comments.
 *
 * Returns the created comment including id, timestamps, and author association.
 *
 * Validation errors occur for empty or oversized comments, with appropriate
 * error responses.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the target post
 * @param props.body Information needed to create a comment
 * @path /communityAi/member/posts/:postId/comments
 * @accessor api.functional.communityAi.member.posts.comments.createComment
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createComment(
  connection: IConnection,
  props: createComment.Props,
): Promise<createComment.Response> {
  return true === connection.simulate
    ? createComment.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createComment.METADATA,
          path: createComment.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace createComment {
  export type Props = {
    /** Unique identifier of the target post */
    postId: string & tags.Format<"uuid">;

    /** Information needed to create a comment */
    body: ICommunityAiComment.ICreate;
  };
  export type Body = ICommunityAiComment.ICreate;
  export type Response = ICommunityAiComment;

  export const METADATA = {
    method: "POST",
    path: "/communityAi/member/posts/:postId/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityAi/member/posts/${encodeURIComponent(props.postId ?? "null")}/comments`;
  export const random = (): ICommunityAiComment =>
    typia.random<ICommunityAiComment>();
  export const simulate = (
    connection: IConnection,
    props: createComment.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createComment.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List comments for a specific communityAi post.
 *
 * Retrieve a paginated list of comments for the specified post identified by
 * postId. Supports complex filtering, sorting, and search parameters in the
 * request body.
 *
 * Only authenticated members (member role) may perform this operation.
 *
 * This endpoint supports comment thread display and browsing in the communityAi
 * platform.
 *
 * Errors returned include invalid postId or unauthorized access.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the target post
 * @param props.body Search criteria and pagination parameters for comments
 *   filtering
 * @path /communityAi/member/posts/:postId/comments
 * @accessor api.functional.communityAi.member.posts.comments.indexComments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexComments(
  connection: IConnection,
  props: indexComments.Props,
): Promise<indexComments.Response> {
  return true === connection.simulate
    ? indexComments.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexComments.METADATA,
          path: indexComments.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace indexComments {
  export type Props = {
    /** Unique identifier of the target post */
    postId: string & tags.Format<"uuid">;

    /** Search criteria and pagination parameters for comments filtering */
    body: ICommunityAiComment.IRequest;
  };
  export type Body = ICommunityAiComment.IRequest;
  export type Response = IPageICommunityAiComment.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityAi/member/posts/:postId/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityAi/member/posts/${encodeURIComponent(props.postId ?? "null")}/comments`;
  export const random = (): IPageICommunityAiComment.ISummary =>
    typia.random<IPageICommunityAiComment.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: indexComments.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexComments.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a specific comment on a communityAi post.
 *
 * Retrieve full details of the specified comment identified by commentId
 * belonging to the post with postId.
 *
 * Authentication of the calling user as a member is required.
 *
 * Returns a comment entity with all fields including content, author,
 * timestamps.
 *
 * Errors if identifiers are invalid or user unauthorized.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the target post
 * @param props.commentId Unique identifier of the target comment
 * @path /communityAi/member/posts/:postId/comments/:commentId
 * @accessor api.functional.communityAi.member.posts.comments.atComment
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atComment(
  connection: IConnection,
  props: atComment.Props,
): Promise<atComment.Response> {
  return true === connection.simulate
    ? atComment.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atComment.METADATA,
          path: atComment.path(props),
          status: null,
        },
      );
}
export namespace atComment {
  export type Props = {
    /** Unique identifier of the target post */
    postId: string & tags.Format<"uuid">;

    /** Unique identifier of the target comment */
    commentId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityAiComment;

  export const METADATA = {
    method: "GET",
    path: "/communityAi/member/posts/:postId/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/member/posts/${encodeURIComponent(props.postId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): ICommunityAiComment =>
    typia.random<ICommunityAiComment>();
  export const simulate = (
    connection: IConnection,
    props: atComment.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atComment.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a comment on a specific post.
 *
 * Update a comment belonging to a given post by specifying postId and commentId
 * in the path. The operation accepts an updated comment body in the request and
 * returns the modified comment record with updated timestamps.
 *
 * Business rules ensure that only authorized users (comment authors,
 * moderators, admins) can edit comments, and edits must occur within allowed
 * timeframes specified in the system.
 *
 * This operation references the community_ai_comments Prisma table, which
 * stores comment details, author relations, and audit fields.
 *
 * Errors returned include 404 if the comment or post does not exist, 403 for
 * unauthorized modification attempts, and validation errors for content
 * limits.
 *
 * This API complements other comment management endpoints including create,
 * delete, and retrieve.
 *
 * @param props.connection
 * @param props.postId The UUID of the post to which the comment belongs
 * @param props.commentId The UUID of the comment to update
 * @param props.body The data structure containing updated comment content
 * @path /communityAi/member/posts/:postId/comments/:commentId
 * @accessor api.functional.communityAi.member.posts.comments.updateComment
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateComment(
  connection: IConnection,
  props: updateComment.Props,
): Promise<updateComment.Response> {
  return true === connection.simulate
    ? updateComment.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateComment.METADATA,
          path: updateComment.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateComment {
  export type Props = {
    /** The UUID of the post to which the comment belongs */
    postId: string & tags.Format<"uuid">;

    /** The UUID of the comment to update */
    commentId: string & tags.Format<"uuid">;

    /** The data structure containing updated comment content */
    body: ICommunityAiComments.IUpdate;
  };
  export type Body = ICommunityAiComments.IUpdate;
  export type Response = ICommunityAiComments;

  export const METADATA = {
    method: "PUT",
    path: "/communityAi/member/posts/:postId/comments/:commentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityAi/member/posts/${encodeURIComponent(props.postId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): ICommunityAiComments =>
    typia.random<ICommunityAiComments>();
  export const simulate = (
    connection: IConnection,
    props: updateComment.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateComment.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a comment for a post.
 *
 * Delete a comment by commentId linked to a specified postId.
 *
 * This operation enforces ownership or elevated permissions checks.
 *
 * Deletion is permanent and removes the comment from all public views.
 *
 * Errors include not found if the comment or post does not exist, and
 * unauthorized if the user lacks permission.
 *
 * Complements comment creation, update, and retrieval APIs.
 *
 * @param props.connection
 * @param props.postId The UUID of the post containing the comment
 * @param props.commentId The UUID of the comment to delete
 * @path /communityAi/member/posts/:postId/comments/:commentId
 * @accessor api.functional.communityAi.member.posts.comments.eraseComment
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseComment(
  connection: IConnection,
  props: eraseComment.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseComment.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseComment.METADATA,
          path: eraseComment.path(props),
          status: null,
        },
      );
}
export namespace eraseComment {
  export type Props = {
    /** The UUID of the post containing the comment */
    postId: string & tags.Format<"uuid">;

    /** The UUID of the comment to delete */
    commentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityAi/member/posts/:postId/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/member/posts/${encodeURIComponent(props.postId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseComment.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseComment.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
