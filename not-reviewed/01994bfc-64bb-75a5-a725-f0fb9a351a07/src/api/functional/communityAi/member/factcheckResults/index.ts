import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityAiFactcheckResult } from "../../../../structures/ICommunityAiFactcheckResult";
import { IPageICommunityAiFactcheckResult } from "../../../../structures/IPageICommunityAiFactcheckResult";

/**
 * List factcheck verification results.
 *
 * Lists AI factcheck verification results with pagination, filtering, and
 * sorting options for moderation and display purposes.
 *
 * Supports efficient retrieval of large datasets through request params
 * defining page size, filters, and sort order.
 *
 * Security rules ensure only authorized users access claim verification data.
 *
 * Integrates with the factcheck claims and flags management APIs to deliver an
 * end-to-end factcheck data management solution.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for factcheck
 *   results
 * @path /communityAi/member/factcheckResults
 * @accessor api.functional.communityAi.member.factcheckResults.indexFactcheckResult
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexFactcheckResult(
  connection: IConnection,
  props: indexFactcheckResult.Props,
): Promise<indexFactcheckResult.Response> {
  return true === connection.simulate
    ? indexFactcheckResult.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexFactcheckResult.METADATA,
          path: indexFactcheckResult.path(),
          status: null,
        },
        props.body,
      );
}
export namespace indexFactcheckResult {
  export type Props = {
    /** Search criteria and pagination parameters for factcheck results */
    body: ICommunityAiFactcheckResult.IRequest;
  };
  export type Body = ICommunityAiFactcheckResult.IRequest;
  export type Response = IPageICommunityAiFactcheckResult;

  export const METADATA = {
    method: "PATCH",
    path: "/communityAi/member/factcheckResults",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityAi/member/factcheckResults";
  export const random = (): IPageICommunityAiFactcheckResult =>
    typia.random<IPageICommunityAiFactcheckResult>();
  export const simulate = (
    connection: IConnection,
    props: indexFactcheckResult.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexFactcheckResult.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific AI factcheck result by ID.
 *
 * Retrieve detailed information about a specific AI factcheck result using its
 * unique identifier.
 *
 * This API accesses the community_ai_factcheck_results table, which holds
 * records of fact-checking results linked to extracted factual claims from
 * posts and comments. Each factcheck result provides verification status,
 * confidence scores, and source references.
 *
 * Security: Access to this endpoint requires appropriate authorization roles to
 * ensure only permitted users can view factcheck results, protecting the
 * integrity and privacy of verification data.
 *
 * Validation: The ID path parameter must be a valid UUID referencing an
 * existing factcheck result.
 *
 * Related operations:
 *
 * - The list of factcheck flags can be queried to identify flagged content.
 * - Factcheck claims and flags have related operations for deeper investigation.
 *
 * Expected behavior:
 *
 * - Returns 404 if the ID does not exist.
 * - Returns the full factcheck result entity if found.
 *
 * @param props.connection
 * @param props.id Unique identifier of the AI factcheck result
 * @path /communityAi/member/factcheckResults/:id
 * @accessor api.functional.communityAi.member.factcheckResults.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the AI factcheck result */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityAiFactcheckResult;

  export const METADATA = {
    method: "GET",
    path: "/communityAi/member/factcheckResults/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/member/factcheckResults/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ICommunityAiFactcheckResult =>
    typia.random<ICommunityAiFactcheckResult>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
