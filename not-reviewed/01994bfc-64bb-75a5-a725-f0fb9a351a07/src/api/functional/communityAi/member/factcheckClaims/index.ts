import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityAiFactcheckClaim } from "../../../../structures/ICommunityAiFactcheckClaim";
import { ICommunityAiFactcheckClaims } from "../../../../structures/ICommunityAiFactcheckClaims";
import { IPageICommunityAiFactcheckClaims } from "../../../../structures/IPageICommunityAiFactcheckClaims";

/**
 * Create a new factcheck claim.
 *
 * Creates a new factual claim for AI factchecking linked optionally to a post
 * or a comment. This operation validates required claim data such as the claim
 * text and the association to source content. It persists the claim in the
 * community_ai_factcheck_claims table, which supports downstream factcheck
 * result association and flagging.
 *
 * This API is used by system components or members during content submission
 * workflows to capture statements requiring factual validation.
 *
 * Security considerations ensure only authorized users or processes can create
 * claims. Claim uniqueness is enforced on claim text within each content
 * source.
 *
 * Errors related to missing or invalid claim text are handled with appropriate
 * client error responses. Referential integrity enforces valid post or comment
 * IDs.
 *
 * The factcheck claim creation integrates tightly with the AI factcheck results
 * and flags endpoints for a complete factcheck processing cycle.
 *
 * @param props.connection
 * @param props.body Creation info for a new factcheck claim
 * @path /communityAi/member/factcheckClaims
 * @accessor api.functional.communityAi.member.factcheckClaims.createFactcheckClaim
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createFactcheckClaim(
  connection: IConnection,
  props: createFactcheckClaim.Props,
): Promise<createFactcheckClaim.Response> {
  return true === connection.simulate
    ? createFactcheckClaim.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createFactcheckClaim.METADATA,
          path: createFactcheckClaim.path(),
          status: null,
        },
        props.body,
      );
}
export namespace createFactcheckClaim {
  export type Props = {
    /** Creation info for a new factcheck claim */
    body: ICommunityAiFactcheckClaim.ICreate;
  };
  export type Body = ICommunityAiFactcheckClaim.ICreate;
  export type Response = ICommunityAiFactcheckClaim;

  export const METADATA = {
    method: "POST",
    path: "/communityAi/member/factcheckClaims",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityAi/member/factcheckClaims";
  export const random = (): ICommunityAiFactcheckClaim =>
    typia.random<ICommunityAiFactcheckClaim>();
  export const simulate = (
    connection: IConnection,
    props: createFactcheckClaim.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createFactcheckClaim.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve paginated fact-check claims.
 *
 * This API operation fetches a filtered, paginated list of fact-check claims
 * that have been extracted from posts or comments. Each claim represents a
 * statement of fact that the AI system or users wish to verify.
 *
 * The operation accepts complex search criteria including claim text filters,
 * creation date ranges, and claim status. It returns paginated results with
 * summary-level details to facilitate review and management.
 *
 * Access to this endpoint is authorized for members, moderators, and admins,
 * reflecting the collaborative nature of content verification and fact-check
 * management.
 *
 * The result structure complies with
 * `IPageICommunityAiFactcheckClaims.ISummary` which includes pagination details
 * and summarized claim information.
 *
 * The operation is firmly tied to the `community_ai_factcheck_claims` Prisma
 * table, the central repository for claims awaiting verification or under
 * investigation.
 *
 * @param props.connection
 * @param props.body Search and filter criteria for fact-check claims
 * @path /communityAi/member/factcheckClaims
 * @accessor api.functional.communityAi.member.factcheckClaims.searchFactcheckClaims
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function searchFactcheckClaims(
  connection: IConnection,
  props: searchFactcheckClaims.Props,
): Promise<searchFactcheckClaims.Response> {
  return true === connection.simulate
    ? searchFactcheckClaims.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...searchFactcheckClaims.METADATA,
          path: searchFactcheckClaims.path(),
          status: null,
        },
        props.body,
      );
}
export namespace searchFactcheckClaims {
  export type Props = {
    /** Search and filter criteria for fact-check claims */
    body: ICommunityAiFactcheckClaims.IRequest;
  };
  export type Body = ICommunityAiFactcheckClaims.IRequest;
  export type Response = IPageICommunityAiFactcheckClaims.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityAi/member/factcheckClaims",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityAi/member/factcheckClaims";
  export const random = (): IPageICommunityAiFactcheckClaims.ISummary =>
    typia.random<IPageICommunityAiFactcheckClaims.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: searchFactcheckClaims.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: searchFactcheckClaims.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve fact-check claim details by ID.
 *
 * This operation retrieves comprehensive details of a fact-check claim
 * identified by a unique ID. Each fact-check claim is a factual statement
 * extracted from user-generated posts or comments that requires verification.
 *
 * The retrieved data includes claim text, timestamps, related post or comment
 * IDs, and soft delete state if applicable.
 *
 * This endpoint is accessible only to members, moderators, and admins, ensuring
 * secure access to sensitive verification data.
 *
 * The operation returns an entity conforming to the
 * `ICommunityAiFactcheckClaims` schema.
 *
 * The underlying data resides in the `community_ai_factcheck_claims` Prisma
 * table within the system.
 *
 * @param props.connection
 * @param props.id Unique identifier of the fact-check claim
 * @path /communityAi/member/factcheckClaims/:id
 * @accessor api.functional.communityAi.member.factcheckClaims.atFactcheckClaim
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atFactcheckClaim(
  connection: IConnection,
  props: atFactcheckClaim.Props,
): Promise<atFactcheckClaim.Response> {
  return true === connection.simulate
    ? atFactcheckClaim.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atFactcheckClaim.METADATA,
          path: atFactcheckClaim.path(props),
          status: null,
        },
      );
}
export namespace atFactcheckClaim {
  export type Props = {
    /** Unique identifier of the fact-check claim */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityAiFactcheckClaims;

  export const METADATA = {
    method: "GET",
    path: "/communityAi/member/factcheckClaims/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/member/factcheckClaims/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ICommunityAiFactcheckClaims =>
    typia.random<ICommunityAiFactcheckClaims>();
  export const simulate = (
    connection: IConnection,
    props: atFactcheckClaim.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atFactcheckClaim.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update factcheck claim.
 *
 * Update an existing factcheck claim identified by its ID, allowing
 * modification of claim text or source references. This operation performs
 * validation, enforces referential integrity, and updates the
 * community_ai_factcheck_claims table record.
 *
 * This API is intended for authorized users to maintain accuracy and metadata
 * on factual claims collected by the system.
 *
 * Errors for non-existent IDs or invalid data are managed with appropriate
 * status codes and messages.
 *
 * Related factcheck results and flagging workflows are indirectly affected by
 * claim updates.
 *
 * @param props.connection
 * @param props.id Unique ID of the factcheck claim to update
 * @param props.body Update info for the factcheck claim
 * @path /communityAi/member/factcheckClaims/:id
 * @accessor api.functional.communityAi.member.factcheckClaims.updateFactcheckClaim
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateFactcheckClaim(
  connection: IConnection,
  props: updateFactcheckClaim.Props,
): Promise<updateFactcheckClaim.Response> {
  return true === connection.simulate
    ? updateFactcheckClaim.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateFactcheckClaim.METADATA,
          path: updateFactcheckClaim.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateFactcheckClaim {
  export type Props = {
    /** Unique ID of the factcheck claim to update */
    id: string & tags.Format<"uuid">;

    /** Update info for the factcheck claim */
    body: ICommunityAiFactcheckClaim.IUpdate;
  };
  export type Body = ICommunityAiFactcheckClaim.IUpdate;
  export type Response = ICommunityAiFactcheckClaim;

  export const METADATA = {
    method: "PUT",
    path: "/communityAi/member/factcheckClaims/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityAi/member/factcheckClaims/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ICommunityAiFactcheckClaim =>
    typia.random<ICommunityAiFactcheckClaim>();
  export const simulate = (
    connection: IConnection,
    props: updateFactcheckClaim.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateFactcheckClaim.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete factcheck claim.
 *
 * Permanently deletes the factcheck claim specified by its unique ID. This
 * action removes the record and all dependent entities from the database,
 * ensuring no trace remains.
 *
 * Use with caution as this operation is irreversible. Authorization is
 * restricted to prevent accidental data loss.
 *
 * This operation enforces integrity by removing all associated factcheck
 * results and flags linked to the claim.
 *
 * Errors for invalid or unauthorized deletion requests will be returned with
 * descriptive messages.
 *
 * @param props.connection
 * @param props.id Unique ID of the factcheck claim to delete
 * @path /communityAi/member/factcheckClaims/:id
 * @accessor api.functional.communityAi.member.factcheckClaims.eraseFactcheckClaim
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseFactcheckClaim(
  connection: IConnection,
  props: eraseFactcheckClaim.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseFactcheckClaim.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseFactcheckClaim.METADATA,
          path: eraseFactcheckClaim.path(props),
          status: null,
        },
      );
}
export namespace eraseFactcheckClaim {
  export type Props = {
    /** Unique ID of the factcheck claim to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityAi/member/factcheckClaims/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/member/factcheckClaims/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseFactcheckClaim.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseFactcheckClaim.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
