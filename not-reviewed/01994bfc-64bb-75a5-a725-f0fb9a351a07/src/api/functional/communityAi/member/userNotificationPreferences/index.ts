import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityAiUserNotificationPreferences } from "../../../../structures/ICommunityAiUserNotificationPreferences";
import { ICommunityAiUserNotificationPreference } from "../../../../structures/ICommunityAiUserNotificationPreference";
import { IPageICommunityAiUserNotificationPreference } from "../../../../structures/IPageICommunityAiUserNotificationPreference";

/**
 * Create user notification preferences.
 *
 * Create new user notification preferences for a community AI user. The
 * operation accepts a JSON payload specifying notification delivery channel
 * enablement flags: email_notifications_enabled, push_notifications_enabled,
 * and sms_notifications_enabled, along with the user ID to associate the
 * preferences with.
 *
 * This operation ensures users can configure their notification settings upon
 * registration or anytime after. Upon success, the newly created notification
 * preferences record is returned with creation timestamps.
 *
 * The user ID must be a valid UUID matching an existing community AI member.
 * This create operation requires authentication and authorization for the
 * requesting user.
 *
 * @param props.connection
 * @param props.body User notification preferences creation data
 * @path /communityAi/member/userNotificationPreferences
 * @accessor api.functional.communityAi.member.userNotificationPreferences.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** User notification preferences creation data */
    body: ICommunityAiUserNotificationPreferences.ICreate;
  };
  export type Body = ICommunityAiUserNotificationPreferences.ICreate;
  export type Response = ICommunityAiUserNotificationPreferences;

  export const METADATA = {
    method: "POST",
    path: "/communityAi/member/userNotificationPreferences",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityAi/member/userNotificationPreferences";
  export const random = (): ICommunityAiUserNotificationPreferences =>
    typia.random<ICommunityAiUserNotificationPreferences>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search user notification preferences with advanced filtering.
 *
 * Search and retrieve a paginated list of user notification preferences.
 *
 * Supports filtering, sorting, and pagination to find notification preference
 * records tailored to the requesting user's criteria.
 *
 * Queries the community_ai_user_notification_preferences table, which stores
 * per-user notification delivery channel settings.
 *
 * The response contains paginated summary data describing user preferences.
 *
 * Requires authenticated user access through admin, moderator, or member roles.
 *
 * Complements the notification preference update operations in the API.
 *
 * This operation is read-only and does not modify database state.
 *
 * Typical errors include authorization denial or malformed search criteria.
 *
 * Ensure returned data respects user privacy and permission scopes.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for user
 *   notification preferences
 * @path /communityAi/member/userNotificationPreferences
 * @accessor api.functional.communityAi.member.userNotificationPreferences.searchUserNotificationPreferences
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function searchUserNotificationPreferences(
  connection: IConnection,
  props: searchUserNotificationPreferences.Props,
): Promise<searchUserNotificationPreferences.Response> {
  return true === connection.simulate
    ? searchUserNotificationPreferences.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...searchUserNotificationPreferences.METADATA,
          path: searchUserNotificationPreferences.path(),
          status: null,
        },
        props.body,
      );
}
export namespace searchUserNotificationPreferences {
  export type Props = {
    /**
     * Search criteria and pagination parameters for user notification
     * preferences
     */
    body: ICommunityAiUserNotificationPreference.IRequest;
  };
  export type Body = ICommunityAiUserNotificationPreference.IRequest;
  export type Response = IPageICommunityAiUserNotificationPreference.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityAi/member/userNotificationPreferences",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityAi/member/userNotificationPreferences";
  export const random =
    (): IPageICommunityAiUserNotificationPreference.ISummary =>
      typia.random<IPageICommunityAiUserNotificationPreference.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: searchUserNotificationPreferences.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: searchUserNotificationPreferences.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve specific user notification preferences by ID.
 *
 * Retrieve detailed notification preferences of a specific community AI user by
 * their unique notification preference ID. This operation accesses the
 * community_ai_user_notification_preferences table as defined in the Prisma
 * schema, which stores user-specific per-channel notification settings such as
 * email, push, and SMS delivery options.
 *
 * The retrieval supports secure access by requiring authenticated roles. It
 * returns notification preferences including flags indicating which
 * notification types the user has enabled or disabled. The operation helps
 * client applications provide customized notification experiences based on
 * these preferences.
 *
 * This get operation requires the userNotificationPreferenceId path parameter,
 * which must be a UUID identifying the specific preferences record. No request
 * body is necessary.
 *
 * On success, it returns the full user notification preferences record matching
 * the ID. Errors occur when the ID is invalid or the user lacks authorization.
 *
 * @param props.connection
 * @param props.userNotificationPreferenceId Unique identifier of the user
 *   notification preference
 * @path /communityAi/member/userNotificationPreferences/:userNotificationPreferenceId
 * @accessor api.functional.communityAi.member.userNotificationPreferences.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the user notification preference */
    userNotificationPreferenceId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityAiUserNotificationPreferences;

  export const METADATA = {
    method: "GET",
    path: "/communityAi/member/userNotificationPreferences/:userNotificationPreferenceId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/member/userNotificationPreferences/${encodeURIComponent(props.userNotificationPreferenceId ?? "null")}`;
  export const random = (): ICommunityAiUserNotificationPreferences =>
    typia.random<ICommunityAiUserNotificationPreferences>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userNotificationPreferenceId")(() =>
        typia.assert(props.userNotificationPreferenceId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update user notification preferences by ID.
 *
 * Update user notification preferences for a specific user notification
 * preference ID. Allows modification of notification delivery channel flags
 * including email_notifications_enabled, push_notifications_enabled, and
 * sms_notifications_enabled.
 *
 * This operation requires the userNotificationPreferenceId path parameter to
 * specify which record to update. The request body contains updated values for
 * the preferences.
 *
 * On success, returns the fully updated user notification preferences object.
 * Only authenticated users can update their own preferences.
 *
 * Validation ensures IDs and payloads are correct, and unauthorized updates are
 * rejected.
 *
 * @param props.connection
 * @param props.userNotificationPreferenceId Unique identifier of the user
 *   notification preference to update
 * @param props.body User notification preferences update data
 * @path /communityAi/member/userNotificationPreferences/:userNotificationPreferenceId
 * @accessor api.functional.communityAi.member.userNotificationPreferences.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the user notification preference to update */
    userNotificationPreferenceId: string & tags.Format<"uuid">;

    /** User notification preferences update data */
    body: ICommunityAiUserNotificationPreferences.IUpdate;
  };
  export type Body = ICommunityAiUserNotificationPreferences.IUpdate;
  export type Response = ICommunityAiUserNotificationPreferences;

  export const METADATA = {
    method: "PUT",
    path: "/communityAi/member/userNotificationPreferences/:userNotificationPreferenceId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityAi/member/userNotificationPreferences/${encodeURIComponent(props.userNotificationPreferenceId ?? "null")}`;
  export const random = (): ICommunityAiUserNotificationPreferences =>
    typia.random<ICommunityAiUserNotificationPreferences>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userNotificationPreferenceId")(() =>
        typia.assert(props.userNotificationPreferenceId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete user notification preferences by ID.
 *
 * Delete user notification preferences permanently by their ID. This hard
 * delete operation removes the user's notification settings from the system.
 *
 * Requires the userNotificationPreferenceId path parameter to specify the
 * record to remove.
 *
 * For security, only the authenticated user owning the preferences can perform
 * deletion.
 *
 * No response body is returned on success. Errors result from invalid IDs or
 * unauthorized access attempts.
 *
 * @param props.connection
 * @param props.userNotificationPreferenceId Unique identifier of the user
 *   notification preference to delete
 * @path /communityAi/member/userNotificationPreferences/:userNotificationPreferenceId
 * @accessor api.functional.communityAi.member.userNotificationPreferences.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the user notification preference to delete */
    userNotificationPreferenceId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityAi/member/userNotificationPreferences/:userNotificationPreferenceId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/member/userNotificationPreferences/${encodeURIComponent(props.userNotificationPreferenceId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userNotificationPreferenceId")(() =>
        typia.assert(props.userNotificationPreferenceId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
