import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityAiUserSessionJwtToken } from "../../../../../structures/ICommunityAiUserSessionJwtToken";
import { ICommunityAiUserSessionJwtTokens } from "../../../../../structures/ICommunityAiUserSessionJwtTokens";
import { IPageICommunityAiUserSessionJwtToken } from "../../../../../structures/IPageICommunityAiUserSessionJwtToken";
import { ICommunityAiJwtTokens } from "../../../../../structures/ICommunityAiJwtTokens";

/**
 * Create a new JWT token in a user session.
 *
 * This POST operation creates a new JWT token associated with a user session
 * indicated by the userSessionId path parameter.
 *
 * The request body must specify the token string, token type, expiration time,
 * and optionally the revoked timestamp.
 *
 * This is used for authenticating users and managing active sessions.
 *
 * Security is critical; only authorized users or system components may create
 * tokens.
 *
 * The response returns the newly created JWT token record.
 *
 * @param props.connection
 * @param props.userSessionId Unique identifier of the target user session
 * @param props.body Creation info of the JWT token
 * @path /communityAi/member/userSessions/:userSessionId/jwtTokens
 * @accessor api.functional.communityAi.member.userSessions.jwtTokens.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the target user session */
    userSessionId: string & tags.Format<"uuid">;

    /** Creation info of the JWT token */
    body: ICommunityAiUserSessionJwtToken.ICreate;
  };
  export type Body = ICommunityAiUserSessionJwtToken.ICreate;
  export type Response = ICommunityAiUserSessionJwtToken;

  export const METADATA = {
    method: "POST",
    path: "/communityAi/member/userSessions/:userSessionId/jwtTokens",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityAi/member/userSessions/${encodeURIComponent(props.userSessionId ?? "null")}/jwtTokens`;
  export const random = (): ICommunityAiUserSessionJwtToken =>
    typia.random<ICommunityAiUserSessionJwtToken>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userSessionId")(() => typia.assert(props.userSessionId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve JWT tokens for a user session.
 *
 * This PATCH operation retrieves a filtered and paginated list of JWT tokens
 * associated with a specific user session. The session is identified by the
 * path parameter userSessionId.
 *
 * The JWT tokens represent authentication and refresh tokens currently or
 * previously issued for this session.
 *
 * The request body allows specifying search criteria such as token type,
 * expiration, revocation status, or pagination parameters.
 *
 * Security considerations include restricting access to the session's owner or
 * admin roles only.
 *
 * The response contains a paginated list of JWT tokens with relevant details.
 *
 * This operation is used to audit or manage active and revoked tokens under a
 * single user session.
 *
 * @param props.connection
 * @param props.userSessionId Unique identifier of the target user session
 * @param props.body Search criteria and pagination parameters for JWT token
 *   filtering
 * @path /communityAi/member/userSessions/:userSessionId/jwtTokens
 * @accessor api.functional.communityAi.member.userSessions.jwtTokens.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the target user session */
    userSessionId: string & tags.Format<"uuid">;

    /** Search criteria and pagination parameters for JWT token filtering */
    body: ICommunityAiUserSessionJwtTokens.IRequest;
  };
  export type Body = ICommunityAiUserSessionJwtTokens.IRequest;
  export type Response = IPageICommunityAiUserSessionJwtToken;

  export const METADATA = {
    method: "PATCH",
    path: "/communityAi/member/userSessions/:userSessionId/jwtTokens",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityAi/member/userSessions/${encodeURIComponent(props.userSessionId ?? "null")}/jwtTokens`;
  export const random = (): IPageICommunityAiUserSessionJwtToken =>
    typia.random<IPageICommunityAiUserSessionJwtToken>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userSessionId")(() => typia.assert(props.userSessionId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a JWT token by its ID within a user session.
 *
 * This GET operation returns detailed information about a specific JWT token
 * within a user session, identified by both userSessionId and jwtTokenId path
 * parameters.
 *
 * The JWT token includes token string, type (access or refresh), expiration,
 * and revocation timestamps.
 *
 * Security restrictions apply to ensure only authorized users access their
 * tokens.
 *
 * No request body is required.
 *
 * The response contains the full JWT token record matching the specified IDs.
 *
 * @param props.connection
 * @param props.userSessionId Unique identifier of the target user session
 * @param props.jwtTokenId Unique identifier of the target JWT token
 * @path /communityAi/member/userSessions/:userSessionId/jwtTokens/:jwtTokenId
 * @accessor api.functional.communityAi.member.userSessions.jwtTokens.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target user session */
    userSessionId: string & tags.Format<"uuid">;

    /** Unique identifier of the target JWT token */
    jwtTokenId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityAiUserSessionJwtToken;

  export const METADATA = {
    method: "GET",
    path: "/communityAi/member/userSessions/:userSessionId/jwtTokens/:jwtTokenId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/member/userSessions/${encodeURIComponent(props.userSessionId ?? "null")}/jwtTokens/${encodeURIComponent(props.jwtTokenId ?? "null")}`;
  export const random = (): ICommunityAiUserSessionJwtToken =>
    typia.random<ICommunityAiUserSessionJwtToken>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userSessionId")(() => typia.assert(props.userSessionId));
      assert.param("jwtTokenId")(() => typia.assert(props.jwtTokenId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific JWT token for a user session in Community AI.
 *
 * This API endpoint allows updating an existing JWT token record associated
 * with a particular user session identified by `userSessionId` and
 * `jwtTokenId`. The JWT tokens are essential for managing authentication and
 * session security within the Community AI platform.
 *
 * The update operation supports modifying token attributes such as the token
 * string, token type (e.g., access or refresh), expiration timestamps, and
 * revocation time. Updating these fields enables session validation, token
 * renewal, or administrative revocation.
 *
 * Security considerations demand that only authorized roles related to user
 * management or session administration can invoke this operation. The system
 * validates all input fields for correctness and conformity to security
 * standards.
 *
 * The underlying database entity is `community_ai_jwt_tokens` as defined in the
 * Prisma schema, ensuring consistency and integrity of token data storage. Path
 * parameters precisely identify the token record to update.
 *
 * If the specified JWT token or user session is not found, the operation should
 * return a suitable error. All updates follow strict audit trails and
 * validation rules accordingly.
 *
 * @param props.connection
 * @param props.userSessionId Unique identifier of the user session
 * @param props.jwtTokenId Unique identifier of the JWT token to update
 * @param props.body Properties for updating the JWT token
 * @path /communityAi/member/userSessions/:userSessionId/jwtTokens/:jwtTokenId
 * @accessor api.functional.communityAi.member.userSessions.jwtTokens.updateJwtToken
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateJwtToken(
  connection: IConnection,
  props: updateJwtToken.Props,
): Promise<updateJwtToken.Response> {
  return true === connection.simulate
    ? updateJwtToken.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateJwtToken.METADATA,
          path: updateJwtToken.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateJwtToken {
  export type Props = {
    /** Unique identifier of the user session */
    userSessionId: string & tags.Format<"uuid">;

    /** Unique identifier of the JWT token to update */
    jwtTokenId: string & tags.Format<"uuid">;

    /** Properties for updating the JWT token */
    body: ICommunityAiJwtTokens.IUpdate;
  };
  export type Body = ICommunityAiJwtTokens.IUpdate;
  export type Response = ICommunityAiJwtTokens;

  export const METADATA = {
    method: "PUT",
    path: "/communityAi/member/userSessions/:userSessionId/jwtTokens/:jwtTokenId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityAi/member/userSessions/${encodeURIComponent(props.userSessionId ?? "null")}/jwtTokens/${encodeURIComponent(props.jwtTokenId ?? "null")}`;
  export const random = (): ICommunityAiJwtTokens =>
    typia.random<ICommunityAiJwtTokens>();
  export const simulate = (
    connection: IConnection,
    props: updateJwtToken.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateJwtToken.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userSessionId")(() => typia.assert(props.userSessionId));
      assert.param("jwtTokenId")(() => typia.assert(props.jwtTokenId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a JWT token for a user session in Community AI.
 *
 * Deletes a JWT token permanently by its ID and associated user session ID.
 * This hard delete operation removes the token record from the Community AI
 * database, revoking its authentication capabilities.
 *
 * Only authorized users with sufficient permissions should perform this
 * operation to maintain system security. The endpoint strictly requires the
 * path parameters `userSessionId` and `jwtTokenId` identifying the token to be
 * deleted.
 *
 * The operation has no request body since it only removes data. On success, a
 * 204 No Content response is returned. If the JWT token does not exist, an
 * appropriate error must be returned.
 *
 * This operation directly affects session security and token lifecycle
 * management.
 *
 * @param props.connection
 * @param props.userSessionId Unique identifier of the user session
 * @param props.jwtTokenId Unique identifier of the JWT token to delete
 * @path /communityAi/member/userSessions/:userSessionId/jwtTokens/:jwtTokenId
 * @accessor api.functional.communityAi.member.userSessions.jwtTokens.eraseJwtToken
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseJwtToken(
  connection: IConnection,
  props: eraseJwtToken.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseJwtToken.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseJwtToken.METADATA,
          path: eraseJwtToken.path(props),
          status: null,
        },
      );
}
export namespace eraseJwtToken {
  export type Props = {
    /** Unique identifier of the user session */
    userSessionId: string & tags.Format<"uuid">;

    /** Unique identifier of the JWT token to delete */
    jwtTokenId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityAi/member/userSessions/:userSessionId/jwtTokens/:jwtTokenId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/member/userSessions/${encodeURIComponent(props.userSessionId ?? "null")}/jwtTokens/${encodeURIComponent(props.jwtTokenId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseJwtToken.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseJwtToken.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userSessionId")(() => typia.assert(props.userSessionId));
      assert.param("jwtTokenId")(() => typia.assert(props.jwtTokenId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
