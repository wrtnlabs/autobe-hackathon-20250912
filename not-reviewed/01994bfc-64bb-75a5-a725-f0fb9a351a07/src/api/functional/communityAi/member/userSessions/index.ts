import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
export * as jwtTokens from "./jwtTokens/index";

/**
 * Delete a user session by ID.
 *
 * This DELETE operation permanently removes a user session identified by its
 * unique ID (userSessionId) from the database. The user session corresponds to
 * an authenticated session of a member user in the community AI system.
 *
 * Security considerations include ensuring that only authorized roles (e.g.,
 * the session owner or administrators) may perform this action.
 *
 * The underlying data is from the community_ai_user_sessions table in the
 * Prisma schema, which stores session tokens, expiration timestamps, and
 * metadata. Deleting a session effectively revokes all authentication tokens
 * related to that session.
 *
 * No request body is needed, as only the session ID path parameter is required.
 *
 * On success, no response body is returned. Errors include not found if the
 * session does not exist.
 *
 * This operation links closely with JWT token management endpoints under the
 * same session resource.
 *
 * @param props.connection
 * @param props.userSessionId Unique identifier of the target user session
 * @path /communityAi/member/userSessions/:userSessionId
 * @accessor api.functional.communityAi.member.userSessions.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target user session */
    userSessionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityAi/member/userSessions/:userSessionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/member/userSessions/${encodeURIComponent(props.userSessionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userSessionId")(() => typia.assert(props.userSessionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
