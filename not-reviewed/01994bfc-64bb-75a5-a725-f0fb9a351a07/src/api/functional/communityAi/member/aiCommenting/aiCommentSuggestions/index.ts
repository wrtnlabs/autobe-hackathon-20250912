import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityAiAiCommentSuggestions } from "../../../../../structures/ICommunityAiAiCommentSuggestions";
import { ICommunityAiAiCommentSuggestion } from "../../../../../structures/ICommunityAiAiCommentSuggestion";
import { IPageICommunityAiAiCommentSuggestion } from "../../../../../structures/IPageICommunityAiAiCommentSuggestion";

/**
 * Create a new AI comment suggestion.
 *
 * Create a new AI-generated comment suggestion that improves user comments. The
 * payload must include the comment reference, member owner, suggested text, and
 * confidence score between 0.0 and 1.0.
 *
 * The system stores creation and update timestamps automatically.
 *
 * Authorization requires the member to be authenticated to submit suggestions.
 *
 * Returns the created AI comment suggestion with all pertinent details.
 *
 * @param props.connection
 * @param props.body AI comment suggestion creation data
 * @path /communityAi/member/aiCommenting/aiCommentSuggestions
 * @accessor api.functional.communityAi.member.aiCommenting.aiCommentSuggestions.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** AI comment suggestion creation data */
    body: ICommunityAiAiCommentSuggestions.ICreate;
  };
  export type Body = ICommunityAiAiCommentSuggestions.ICreate;
  export type Response = ICommunityAiAiCommentSuggestions;

  export const METADATA = {
    method: "POST",
    path: "/communityAi/member/aiCommenting/aiCommentSuggestions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/communityAi/member/aiCommenting/aiCommentSuggestions";
  export const random = (): ICommunityAiAiCommentSuggestions =>
    typia.random<ICommunityAiAiCommentSuggestions>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search AI comment suggestions.
 *
 * Perform a filtered, sorted, and paginated search of AI comment suggestions.
 *
 * The response contains paginated summary data of AI suggestions linked to user
 * comments.
 *
 * Access is restricted to members (role 'member'). Input validation is required
 * on search criteria.
 *
 * Errors may result from invalid query parameters or unauthorized access.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for AI comment
 *   suggestions
 * @path /communityAi/member/aiCommenting/aiCommentSuggestions
 * @accessor api.functional.communityAi.member.aiCommenting.aiCommentSuggestions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for AI comment suggestions */
    body: ICommunityAiAiCommentSuggestion.IRequest;
  };
  export type Body = ICommunityAiAiCommentSuggestion.IRequest;
  export type Response = IPageICommunityAiAiCommentSuggestion.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityAi/member/aiCommenting/aiCommentSuggestions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/communityAi/member/aiCommenting/aiCommentSuggestions";
  export const random = (): IPageICommunityAiAiCommentSuggestion.ISummary =>
    typia.random<IPageICommunityAiAiCommentSuggestion.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get AI comment suggestion details by ID.
 *
 * Retrieve the detailed information of an AI-generated comment suggestion by
 * its unique identifier. This operation fetches the suggestion text, confidence
 * score, creation and update timestamps, and references to the original comment
 * and member who owns the comment.
 *
 * Security roles required to access this operation typically include
 * authenticated members who created the suggestion or roles with moderation or
 * admin privileges.
 *
 * The response includes all relevant properties of the suggestion record from
 * the CommunityAiAiCommentSuggestions entity.
 *
 * Returns error if the suggestion is not found or access is unauthorized.
 *
 * @param props.connection
 * @param props.id Unique identifier of the AI comment suggestion
 * @path /communityAi/member/aiCommenting/aiCommentSuggestions/:id
 * @accessor api.functional.communityAi.member.aiCommenting.aiCommentSuggestions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the AI comment suggestion */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityAiAiCommentSuggestions;

  export const METADATA = {
    method: "GET",
    path: "/communityAi/member/aiCommenting/aiCommentSuggestions/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/member/aiCommenting/aiCommentSuggestions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ICommunityAiAiCommentSuggestions =>
    typia.random<ICommunityAiAiCommentSuggestions>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update AI comment suggestion by ID.
 *
 * Update an existing AI-generated comment suggestion record. The update can
 * modify the suggested text, confidence score, and timestamps.
 *
 * It requires the ID path parameter to specify which suggestion to update.
 *
 * Authorization requires member ownership or elevated roles such as moderator
 * or admin.
 *
 * Returns the updated AI comment suggestion entity.
 *
 * @param props.connection
 * @param props.id Unique identifier of the AI comment suggestion to update
 * @param props.body AI comment suggestion update data
 * @path /communityAi/member/aiCommenting/aiCommentSuggestions/:id
 * @accessor api.functional.communityAi.member.aiCommenting.aiCommentSuggestions.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the AI comment suggestion to update */
    id: string & tags.Format<"uuid">;

    /** AI comment suggestion update data */
    body: ICommunityAiAiCommentSuggestions.IUpdate;
  };
  export type Body = ICommunityAiAiCommentSuggestions.IUpdate;
  export type Response = ICommunityAiAiCommentSuggestions;

  export const METADATA = {
    method: "PUT",
    path: "/communityAi/member/aiCommenting/aiCommentSuggestions/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityAi/member/aiCommenting/aiCommentSuggestions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ICommunityAiAiCommentSuggestions =>
    typia.random<ICommunityAiAiCommentSuggestions>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete AI comment suggestion by ID.
 *
 * Permanently remove an AI-generated comment suggestion from the system by its
 * unique ID.
 *
 * This deletion is irreversible and removes all data associated with the
 * suggestion. Authorization is restricted to members who created the suggestion
 * or to moderators and admins.
 *
 * No request body is required.
 *
 * No response body is returned upon successful deletion.
 *
 * @param props.connection
 * @param props.id Unique identifier of the AI comment suggestion to delete
 * @path /communityAi/member/aiCommenting/aiCommentSuggestions/:id
 * @accessor api.functional.communityAi.member.aiCommenting.aiCommentSuggestions.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the AI comment suggestion to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityAi/member/aiCommenting/aiCommentSuggestions/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/member/aiCommenting/aiCommentSuggestions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
