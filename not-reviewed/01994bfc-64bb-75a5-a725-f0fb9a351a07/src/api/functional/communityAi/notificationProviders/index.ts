import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityAiNotificationProvider } from "../../../structures/ICommunityAiNotificationProvider";

/**
 * Retrieve notification provider details by ID.
 *
 * Retrieves detailed information about a notification provider identified by
 * its unique ID.
 *
 * This operation interacts with the community_ai_notification_providers table,
 * which stores configuration and operational metadata for external notification
 * service providers integrated into the Community AI platform.
 *
 * Clients use this endpoint to obtain provider settings such as configuration
 * parameters JSON and current status. It is a read-only operation and requires
 * only the unique provider ID.
 *
 * The operation supports standard security practices and is designed for public
 * or internal system consumption depending on deployment scenarios.
 *
 * If the specified ID does not correspond to a valid notification provider, the
 * system will respond with a 404 Not Found error.
 *
 * @param props.connection
 * @param props.id Unique identifier of the notification provider
 * @path /communityAi/notificationProviders/:id
 * @accessor api.functional.communityAi.notificationProviders.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the notification provider */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityAiNotificationProvider;

  export const METADATA = {
    method: "GET",
    path: "/communityAi/notificationProviders/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityAi/notificationProviders/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ICommunityAiNotificationProvider =>
    typia.random<ICommunityAiNotificationProvider>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
