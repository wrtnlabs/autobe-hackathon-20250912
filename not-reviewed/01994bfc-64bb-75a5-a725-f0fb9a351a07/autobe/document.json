{"operations":[{"specification":"This operation creates a new admin account in the community_ai_admins table, which represents system administrators with full control over user management, AI features configuration, and content moderation. It accepts user registration details including email, password hash, and display name, storing them to create a new admin user. This operation is public and allows users to join the system by creating a valid account record with necessary credentials. It references the community_ai_admins table ensuring the essential fields like email and password_hash exist and are used for authentication purposes. Upon success, the system issues initial JWT tokens consistent with the admin role authentication flows.","authorizationType":"join","description":"Create a new admin user account in community_ai_admins with full administrative privileges. Requires unique email, hashed password, and display name fields which are stored securely. This facilitates user onboarding by enabling new admin registrations. The operation performs validation for email uniqueness and password hash security. It integrates in the authentication workflow issuing initial authorized JWT tokens represented by ICommunityAiAdmin.IAuthorized response. This endpoint is publicly accessible allowing account creation without prior authentication.","summary":"Create new admin user account in community_ai_admins","parameters":[],"requestBody":{"description":"Admin user registration data","typeName":"ICommunityAiAdmin.ICreate"},"responseBody":{"description":"Authorized admin user info with JWT tokens","typeName":"ICommunityAiAdmin.IAuthorized"},"authorizationRole":null,"name":"join","path":"/auth/admin/join","method":"post"},{"specification":"This operation authenticates an existing admin user by validating credentials against the community_ai_admins table. It accepts login credentials, validates email and password hash, and upon successful authentication, issues JWT tokens including access and refresh tokens encapsulated in the authorized response object. This operation supports admin login workflows where users prove their identity to receive session tokens. It strictly uses fields existing in the schema ensuring secure password hash checking and user identification by unique email.","authorizationType":"login","description":"Authenticate admin user credentials and issue JWT access and refresh tokens. Validates email and password against existing community_ai_admins records. Returns JWT token set within ICommunityAiAdmin.IAuthorized response type. This login operation enables secure access to system administrative features and content moderation. It is a public endpoint requiring no prior authentication enabling credential validation.","summary":"Authenticate admin user and issue JWT tokens","parameters":[],"requestBody":{"description":"Admin user login credentials","typeName":"ICommunityAiAdmin.ILogin"},"responseBody":{"description":"Authorized admin user info with JWT tokens","typeName":"ICommunityAiAdmin.IAuthorized"},"authorizationRole":null,"name":"login","path":"/auth/admin/login","method":"post"},{"specification":"This operation refreshes JWT access tokens for existing authenticated admin users based on valid refresh tokens. It supports session continuation without logging in repeatedly. This operation is part of the authentication lifecycle for admin users represented in the community_ai_admins table. It strictly validates provided refresh tokens and issues new access tokens encapsulated in ICommunityAiAdmin.IAuthorized response type. Token refresh ensures secure and uninterrupted sessions for privileged admin users.","authorizationType":"refresh","description":"Refresh JWT access tokens for authenticated admin users using valid refresh tokens. Ensures continuous session availability without re-login. Returns updated JWT tokens in ICommunityAiAdmin.IAuthorized response per admin session management policies. This endpoint requires a valid refresh token and enforces security checks.","summary":"Refresh JWT tokens for admin users","parameters":[],"requestBody":{"description":"Refresh token request","typeName":"ICommunityAiAdmin.IRefresh"},"responseBody":{"description":"Authorized admin user info with renewed JWT tokens","typeName":"ICommunityAiAdmin.IAuthorized"},"authorizationRole":null,"name":"refresh","path":"/auth/admin/refresh","method":"post"},{"specification":"This API operation implements the registration (join) functionality for the moderator role in the community AI platform, based on the community_ai_moderators Prisma schema.\n\nThis operation is designed to create a new moderator user by accepting required data such as email, password (to be hashed server-side), and display name. It ensures uniqueness of the moderator's email to prevent duplicates.\n\nThe operation performs validation following the identity schema rules and issues initial JWT tokens for authentication post-registration.\n\nThis API is public, and no authentication is required to access it.\n\nThe operation corresponds with the community_ai_moderators table, covering identity data and audit timestamps for creation and updates.\n\nSecurity considerations include hashing of password before storage and validating unique email.\n\nThis operation should be used alongside login and refresh token APIs to manage the full moderator authentication lifecycle.","authorizationType":"join","description":"Registration API for moderators creating new moderator accounts in the community AI platform. It processes moderator identity properties such as email, password hash (generated after receiving plain password), and display name for secure account creation adhering to schema constraints.\n\nThe API ensures that the moderator role email uniqueness is enforced and timestamps for creation and updates are handled automatically. This supports future login and session management.\n\nModerators receive JWT tokens immediately after joining.\n\nThis operation is part of the moderator authentication workflow, complementing login and token refresh operations.\n\nImproper registration attempts (duplicate email, invalid formats) will be rejected early with appropriate error responses.","summary":"Register a new moderator user in the community_ai_moderators table","parameters":[],"requestBody":{"description":"Moderator registration information","typeName":"ICommunityAiModerator.ICreate"},"responseBody":{"description":"Moderator authorized response","typeName":"ICommunityAiModerator.IAuthorized"},"authorizationRole":"moderator","name":"join","path":"/auth/moderator/join","method":"post"},{"specification":"This API operation implements login for moderators, authenticating via email and password against the community_ai_moderators table.\n\nIt validates credentials and issues JWT tokens for access and refresh.\n\nThis operation is public, accepting email and password as input, and returns authorized moderator info with tokens.\n\nSecurity considerations include proper password hash verification, prevention of brute force attacks, and ensuring tokens use secure claims.\n\nThis operation is essential for moderator lifecycle authentication, paired with join and refresh operations.","authorizationType":"login","description":"Authenticate a moderator by verifying email and password, issuing JWT tokens.\n\nThe login process handles validation against stored password hashes and issues JWT token pairs upon success.\n\nInvalid credentials are rejected with appropriate error messages.\n\nThis complements registration and token refresh for complete authentication workflow.\n\nTokens incorporate the moderator's role claims for authorization enforcement.","summary":"Login an existing moderator for authentication","parameters":[],"requestBody":{"description":"Moderator login credentials","typeName":"ICommunityAiModerator.ILogin"},"responseBody":{"description":"Moderator authorized response","typeName":"ICommunityAiModerator.IAuthorized"},"authorizationRole":"moderator","name":"login","path":"/auth/moderator/login","method":"post"},{"specification":"This API operation provides JWT token refresh for moderators, using valid refresh tokens to issue new access tokens.\n\nIt corresponds to the community_ai_moderators schema and handles token lifecycle management.\n\nThe operation requires a valid refresh token to authorize issuing new tokens without re-authentication.\n\nSecurity considerations include verifying token validity, expiration, and revocation state.\n\nIt supports seamless user sessions and lifecycle management in moderator accounts.\n\nThis operation is part of the authentication flow, complementing join and login operations.","authorizationType":"refresh","description":"Refresh access tokens for a moderator using a valid refresh token.\n\nEnsures continuous authentication without requiring login credentials again.\n\nSecure validation of the refresh token is mandatory.\n\nCompatible with existing token management and session validation.\n\nSupports enhanced user experience by maintaining session persistence securely.\n\nThis operation works with join and login for full authentication lifecycle.","summary":"Refresh JWT tokens for moderator sessions","parameters":[],"requestBody":{"description":"Moderator refresh token information","typeName":"ICommunityAiModerator.IRefresh"},"responseBody":{"description":"Moderator authorized response","typeName":"ICommunityAiModerator.IAuthorized"},"authorizationRole":"moderator","name":"refresh","path":"/auth/moderator/refresh","method":"post"},{"specification":"This API operation allows a member user to create a new account (join) by providing necessary credentials such as email and password. It references the community_ai_members table to ensure user data aligns with the Prisma schema fields. The operation creates a new user record with a unique email and hashed password and issues initial JWT tokens for authentication and authorization within the CommunityAi system.\n\nThis join operation is public and requires no prior authentication, enabling new member users to register. It strictly validates email uniqueness and password policies as per the schema constraints and business rules defined in user role definitions and requirements.\n\nThe response provides an authorization result containing access tokens, role information, and session details, using the specified naming convention ICommunityAiMember.IAuthorized.\n\nRelated operations include login and refresh for the member role, which handle subsequent authentication and token renewal.\n\nSecurity considerations include proper password hashing before storage, email verification workflows, and secure token issuance mechanisms to protect user identity and access.\n\nErrors encountered include duplicate email registration, weak password rejection, and validation failure responses.","authorizationType":"join","description":"Allows regular member users to register by creating an account with email and password, storing identity information securely and issuing authentication tokens within the CommunityAi system. Email uniqueness and password security are enforced. The operation results in an authorized access response enabling member actions.","summary":"Member user registration (join) operation covering creation of new accounts with secure identity data.","parameters":[],"requestBody":{"description":"Member user registration payload including email, password, and display name for account creation.","typeName":"ICommunityAiMember.ICreate"},"responseBody":{"description":"Authorization result with issued access and refresh tokens for the newly registered member user.","typeName":"ICommunityAiMember.IAuthorized"},"authorizationRole":"member","name":"join","path":"/auth/member/join","method":"post"},{"specification":"This API authenticates member users by verifying their email and password credentials against stored records in the community_ai_members table. Upon successful authentication, it issues new JWT access and refresh tokens with embedded role and permissions claims.\n\nThis login operation is public allowing members to authenticate and obtain tokens to access protected resources and perform role-based actions specified in the system. It validates user credentials securely using password hash comparison.\n\nThe response contains an authorization object following the naming convention ICommunityAiMember.IAuthorized, including token details necessary for session management.\n\nRelated operations include join for registration and refresh for token renewal.\n\nSecurity considerations include protection against brute force attacks, secure password hashing verification, and token expiration policies.\n\nErrors handled include invalid credentials, inactive or unverified accounts.\n\nValidation against Prisma schema ensures email and password fields conform to identity requirements.","authorizationType":"login","description":"Authenticates member users by email and password, issuing JWT tokens upon successful credential verification within the CommunityAi system. Secure authentication and token handling is enforced.","summary":"Member user login operation for authentication and token issuance.","parameters":[],"requestBody":{"description":"Member user login credentials consisting of email and password.","typeName":"ICommunityAiMember.ILogin"},"responseBody":{"description":"Authorization result containing JWT access and refresh tokens for authenticated member user sessions.","typeName":"ICommunityAiMember.IAuthorized"},"authorizationRole":"member","name":"login","path":"/auth/member/login","method":"post"},{"specification":"This API operation refreshes access tokens for authenticated member users using valid refresh tokens linked to their existing sessions in the community_ai_user_sessions and community_ai_jwt_tokens tables.\n\nIt validates refresh tokens for expiry and revocation, issuing new JWT token pairs for continued authenticated access without requiring re-login.\n\nThis operation enforces secure token lifecycle management and is accessible to authenticated members holding valid refresh tokens.\n\nThe response returns updated authorization info per ICommunityAiMember.IAuthorized format.\n\nSecurity measures include token revocation checking, short-lived access and refresh token expiration, and session integrity validation to mitigate token abuse.\n\nRelated operations include join for registration and login for initial authentication.\n\nSchema constraints ensure token records and user sessions maintain data integrity during the refresh process.","authorizationType":"refresh","description":"Allows member users to renew JWT access tokens using valid refresh tokens to maintain authenticated sessions within the CommunityAi platform. Validates and issues fresh tokens securely.","summary":"Member user token refresh operation.","parameters":[],"requestBody":{"description":"Payload containing the member user's valid refresh token.","typeName":"ICommunityAiMember.IRefresh"},"responseBody":{"description":"Updated authorization details with new access and refresh tokens for member user.","typeName":"ICommunityAiMember.IAuthorized"},"authorizationRole":"member","name":"refresh","path":"/auth/member/refresh","method":"post"},{"specification":"This operation retrieves a filtered and paginated list of community AI system settings from the 'community_ai_system_settings' table. It allows clients to apply complex queries to obtain system configuration parameters, including keys, values, and descriptions. This enables administrators or systems to view and audit current system settings in an organized manner.","description":"Retrieve a filtered and paginated list of community AI system configuration settings.\n\nThis operation queries the 'community_ai_system_settings' table, returning system-wide parameters defined by unique keys and associated string values. Each setting includes creation and update timestamps, and optionally a descriptive note.\n\nAccess to this endpoint may be restricted to authorized users such as admins to prevent unauthorized configuration visibility.\n\nThe operation supports complex search and filtering criteria via the request body, allowing retrieval of specific settings by key, date ranges, or content matching.\n\nThe response returns a paginated list of system settings, useful for administrative UI displays or auditing purposes.","summary":"List and search community AI system settings","parameters":[],"requestBody":{"description":"Search and pagination parameters for system settings filtering","typeName":"ICommunityAiCommunityAiSystemSettings.IRequest"},"responseBody":{"description":"Paginated list of system settings matching search criteria","typeName":"IPageICommunityAiCommunityAiSystemSettings"},"authorizationType":null,"authorizationRole":"admin","path":"/communityAi/admin/systemSettings","method":"patch","name":"index"},{"specification":"This operation retrieves detailed information about a single community AI system setting identified by its unique ID from the 'community_ai_system_settings' table.","description":"Retrieve detailed information of a community AI system setting by its unique ID.\n\nThe returned record includes the setting's key, value, description, and timestamp metadata.\n\nAccess control ensures only authorized users, typically admins, can view this sensitive configuration information.\n\nError handling covers cases of non-existent IDs resulting in appropriate error responses.","summary":"Retrieve a community AI system setting by ID","parameters":[{"name":"id","description":"Unique identifier of the system setting","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Community AI system setting detailed information","typeName":"ICommunityAiCommunityAiSystemSettings"},"authorizationType":null,"authorizationRole":"admin","path":"/communityAi/admin/systemSettings/{id}","method":"get","name":"at"},{"specification":"This operation creates a new community AI system setting record in the 'community_ai_system_settings' table, allowing administrators to add new configuration key-value pairs for system behavior control.","description":"Create a new community AI system setting.\n\nThe input must include a unique setting key and the associated value. An optional description field can provide context for the setting.\n\nUpon creation, the system automatically generates timestamps for creation and update.\n\nOnly users with admin roles can perform this sensitive operation.\n\nProper validation ensures unique keys and value formats.\n\nErrors include conflicts on duplicate keys and validation failures.","summary":"Create a new community AI system setting","parameters":[],"requestBody":{"description":"Information required to create a community AI system setting","typeName":"ICommunityAiCommunityAiSystemSettings.ICreate"},"responseBody":{"description":"Newly created system setting information","typeName":"ICommunityAiCommunityAiSystemSettings"},"authorizationType":null,"authorizationRole":"admin","path":"/communityAi/admin/systemSettings","method":"post","name":"create"},{"specification":"This operation updates an existing community AI system setting record in the 'community_ai_system_settings' table by its unique ID, allowing administrators to modify the setting value or description while keeping the key constant.","description":"Update an existing community AI system setting identified by ID.\n\nRequires the ID path parameter and request body with fields to update such as setting value and description.\n\nThe setting key is immutable and cannot be changed.\n\nAccess is restricted to users with admin privileges.\n\nConflicts, invalid IDs, and validation errors are handled appropriately.\n\nTimestamps for update are maintained automatically.","summary":"Update a community AI system setting by ID","parameters":[{"name":"id","description":"Unique identifier of the system setting to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for the system setting","typeName":"ICommunityAiCommunityAiSystemSettings.IUpdate"},"responseBody":{"description":"Updated system setting information","typeName":"ICommunityAiCommunityAiSystemSettings"},"authorizationType":null,"authorizationRole":"admin","path":"/communityAi/admin/systemSettings/{id}","method":"put","name":"update"},{"specification":"This operation retrieves a paginated list of community AI platform user roles, allowing filtering and searching through role names and descriptions. It operates on the community_ai_roles table of the Prisma schema, providing role management data for access control purposes.","description":"Retrieve a filtered and paginated list of user roles defined within the community AI system. These roles govern the authorization and access rights granted to users including admins, moderators, and members.\n\nThe operation offers advanced search and filtering capabilities on role names and descriptions to facilitate administration tasks.\n\nOnly authorized system administrators and service components should access role information.\n\nThe response provides a paginated summary of roles optimized for list displays and administration panels.\n\nThis operation is related to the role creation and retrieval endpoints which allow role management.","summary":"Search and retrieve a filtered, paginated list of community AI user roles","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for filtering roles","typeName":"ICommunityAiRoles.IRequest"},"responseBody":{"description":"Paginated list of role summaries matching search criteria","typeName":"IPageICommunityAiRoles.ISummary"},"authorizationRoles":["admin"],"name":"index","path":"/communityAi/admin/roles","method":"patch","authorizationRole":"admin","authorizationType":null},{"specification":"This operation retrieves detailed information for a specific user role by its unique identifier. It queries the community_ai_roles table of the Prisma schema and returns all relevant properties of the role entity.\n\nIt is intended for administration or service components to view role details for management and auditing.\n\nAccess is restricted to administrators with valid authorization.\n\nThis operation pairs with role list retrieval and creation endpoints for complete role lifecycle management.","description":"Fetch detailed information of a community AI system user role. The role ID is specified as a path parameter. Returned role data includes role name, description, and audit timestamps.\n\nAccess control is enforced to allow only authorized admins to retrieve role information.\n\nErrors are returned if the role ID does not exist or if the requester lacks permissions.\n\nThis operation should only be called by system administrators or trusted services.","summary":"Retrieve detailed role information by ID","parameters":[{"name":"id","description":"Unique identifier of the user role","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed user role information","typeName":"ICommunityAiRoles"},"authorizationRoles":["admin"],"name":"at","path":"/communityAi/admin/roles/{id}","method":"get","authorizationRole":"admin","authorizationType":null},{"specification":"This operation creates a new user role within the community AI platform by inserting a new record into the community_ai_roles Prisma table. It requires a unique role name and optional description as input.\n\nOnly system administrators have authorization to create new roles.\n\nThe new role is persisted with appropriate audit timestamps. Duplicate role names are rejected with error responses.\n\nThis operation complements role retrieval and update endpoints.","description":"Create a new user role in the community AI system by specifying the role name and description. Role name must be unique within the system.\n\nOnly authorized admin users may create new roles.\n\nOn successful creation, detailed role information is returned including assigned unique ID and timestamps.\n\nValidation errors occur if the role name conflicts with an existing entry.\n\nThis endpoint is part of role lifecycle management alongside listing and detail retrieval operations.","summary":"Create a new community AI user role","parameters":[],"requestBody":{"description":"Information required to create a user role","typeName":"ICommunityAiRoles.ICreate"},"responseBody":{"description":"Created user role details","typeName":"ICommunityAiRoles"},"authorizationRoles":["admin"],"name":"create","path":"/communityAi/admin/roles","method":"post","authorizationRole":"admin","authorizationType":null},{"specification":"This operation deletes a user role from the community AI platform. It permanently removes the record from the community_ai_roles table by specifying the role ID. \n\nOnly administrators have permissions to erase roles.\n\nOnce erased, the role and associated authorizations are completely removed with no recovery.\n\nThis operation supports administrative cleanup of obsolete or erroneous roles.","description":"Permanently delete a community AI user role by its unique identifier. This action removes all related permissions and associations. Only users with administrative privileges can perform this operation.\n\nThe deleted role will no longer be accessible or assignable after removal.\n\nCare must be taken as this action is irreversible.\n\nThis operation complements role creation and retrieval endpoints in role lifecycle management.","summary":"Delete a community AI user role by ID","parameters":[{"name":"id","description":"Unique identifier of the user role to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/communityAi/admin/systemSettings/{id}","method":"delete","authorizationRole":"admin","authorizationType":null},{"specification":"This operation updates an existing role by its unique identifier in the community AI platform's role management system, corresponding to the community_ai_roles Prisma table. It allows modification of role attributes such as the role_name and description, enabling administrators to manage user access control effectively. The operation validates the provided role ID and expects updated role information to be supplied. Upon success, it returns the complete role data after modification.","path":"/communityAi/admin/roles/{id}","method":"put","summary":"Update existing user role by ID","description":"This operation updates a specified role in the system's user role management. The role identified by the given ID can have its properties such as role_name and description modified. This serves to manage access control and authorization dynamically by adjusting role details as needed.\n\nThe updating endpoint enforces authorization rules to allow only privileged users to modify roles.\n\nIt is linked directly to the community_ai_roles Prisma model, which ensures database integrity and enforcement of unique constraints like unique role_name.\n\nValidation rules ensure the role exists and the update payload conforms to schema constraints.\n\nOn success, the updated role information is returned to confirm the changes.\n\nErrors such as not found or validation failures return appropriate HTTP error responses.","parameters":[{"name":"id","in":"path","description":"Unique identifier for the role to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated role details for modification","typeName":"ICommunityAiRole.IUpdate"},"responseBody":{"description":"Updated role detail information","typeName":"ICommunityAiRole"},"authorizationType":null,"authorizationRole":"admin","name":"updateRole"},{"specification":"This operation deletes a role identified by its unique ID from the community AI platform's role management. It directly affects the community_ai_roles Prisma table by removing the role entry. The deletion is permanent and immediate, removing all associations of the role and ceasing its active usage in access control.\n\nOnly authorized administrators with proper privileges can perform this operation. The role's existence is verified before deletion, and errors are reported if not found.\n\nThis endpoint does not return a response body to indicate successful deletion explicitly.","path":"/communityAi/admin/roles/{id}","method":"delete","summary":"Delete user role by ID","description":"Deletes a specific user role identified by ID from the database permanently. This operation is reserved for administrators with privileges to manage user roles.\n\nUpon request, the role record is removed completely from the community_ai_roles table, affecting all permission assignments linked to this role.\n\nProper authorization checks are enforced to prevent unauthorized role deletions.\n\nErrors such as an attempt to delete a non-existent role return appropriate error messages.\n\nNo content is returned upon successful deletion to confirm removal.\n","parameters":[{"name":"id","in":"path","description":"Unique identifier for the role to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"eraseRole"},{"specification":"Retrieve a paginated list of permissions available in the community AI platform's permission management system. This operation applies to the community_ai_permissions Prisma table and supports querying permissions with filtering, sorting, and pagination parameters.\n\nUsers with appropriate administrative privileges may retrieve permission overviews to manage or audit access controls.","path":"/communityAi/admin/permissions","method":"patch","summary":"Search and list permissions with pagination","description":"This operation provides a paginated search of permissions in the system. Users can filter and sort results to find specific permissions based on various criteria such as permission_name and description.\n\nOnly authorized roles with admin privileges can access this data for security reasons.\n\nThe response includes a paginated collection of permission summary objects.\n","parameters":[],"requestBody":{"description":"Search filters and pagination parameters for permissions","typeName":"ICommunityAiPermission.IRequest"},"responseBody":{"description":"Paginated list of permission summaries","typeName":"IPageICommunityAiPermission.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"searchPermissions"},{"specification":"Retrieve detailed information of a specific permission by its unique ID from the community AI platform's permission management, mapping to the community_ai_permissions Prisma table.\n\nAuthorized users can use this operation to view permission details for managing and auditing authorization rules.","path":"/communityAi/admin/permissions/{id}","method":"get","summary":"Get permission details by ID","description":"This operation fetches detailed data for a unique permission identified by ID. It is intended for administrative use to audit or manage system permissions.\n\nStrict authorization limits access to administrators.\n\nIf the specified permission ID does not exist, a not found error is returned.\n\nThe response provides complete permission information according to the schema.","parameters":[{"name":"id","in":"path","description":"Unique identifier for the permission to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the permission","typeName":"ICommunityAiPermission"},"authorizationType":null,"authorizationRole":"admin","name":"atPermission"},{"specification":"This operation creates a new permission definition record in the community_ai_permissions table in the Prisma database. It allows administrators to add new permission entries that define access rights and actions within the Community AI platform. The permission includes unique permission_name and optional description along with system timestamps. This creation endpoint supports secure insertion of these entries ensuring uniqueness and integrity as per the Prisma schema constraints.","path":"/communityAi/admin/permissions","method":"post","summary":"Create a new permission for access control","description":"Create a new permission entity defining an access right in the Community AI platform. This API expects a unique permission_name and optional descriptive information about the permission. It returns the created permission record including timestamps. This operation is restricted to authorized roles such as administrators since permission definitions affect system-wide access control.\n\nSecurity: Only users with the 'admin' role should use this endpoint as it influences access rights.\n\nThis operation interfaces directly with the community_ai_permissions table as defined in the Prisma schema. It strictly requires the permission_name to be unique. Validation errors should be returned if uniqueness is violated or required fields are missing.\n\nRelated Operations: update permission, delete permission endpoints.\n\nBehavior: On success, the new permission is stored and returned. On failure, appropriate HTTP error codes should be used with explanatory messages.","parameters":[],"requestBody":{"description":"New permission creation data","typeName":"ICommunityAiPermission.ICreate"},"responseBody":{"description":"Created permission entity","typeName":"ICommunityAiPermission"},"authorizationType":null,"authorizationRole":"admin","name":"create"},{"specification":"This operation updates an existing permission entity in the community_ai_permissions table. It identifies the target entity by the UUID parameter 'id' and accepts the update payload which may include permission_name and description fields. This API enables administrators to modify the details of permission definitions used in access control.\n\nSecurity: Restricted to users with admin role to maintain integrity of permissions.\n\nRelationship: Works with create and delete permission endpoints and maintains uniqueness constraints.\n\nValidation: The 'id' path parameter must be a valid UUID corresponding to an existing permission record. The update payload must conform to the schema.\n\nOutcome: Returns the updated permission entity upon successful update, or error messages upon failure.","path":"/communityAi/admin/permissions/{id}","method":"put","summary":"Update a permission by ID","description":"Update a permission entity by its ID in the Community AI system. Requires unique permission_name and optional updated description. The operation updates the existing record with new data, maintaining schema constraints and validation.\n\nSecurity considerations: Only accessible to admin users.\n\nErrors: Returns HTTP 404 if the ID does not exist and appropriate conflict or validation errors.\n\nRelation: Complements create and delete permission operations.\n\nParameters:[{\"name\":\"id\",\"description\":\"The unique identifier of the permission to update\",\"schema\":{\"type\":\"string\",\"format\":\"uuid\"}}]","parameters":[{"name":"id","description":"The unique identifier of the permission to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Permission update data","typeName":"ICommunityAiPermission.IUpdate"},"responseBody":{"description":"Updated permission entity","typeName":"ICommunityAiPermission"},"authorizationType":null,"authorizationRole":"admin","name":"update"},{"specification":"This operation deletes a permission entity identified by the UUID path parameter 'id' from the community_ai_permissions table. It performs a hard delete permanently removing the record from the database.\n\nSecurity: Restricted to users with the admin role for access control integrity.\n\nBehavior: Upon success, the permission entity is removed and no content is returned. On failure, appropriate error codes (e.g. 404 if not found) are returned.\n\nRelationship: Complements create and update permission endpoints.\n\nParameters: Requires a valid UUID 'id' path parameter referencing the permission to delete.","path":"/communityAi/admin/permissions/{id}","method":"delete","summary":"Delete a permission by ID","description":"Delete a permission by its ID. This operation removes the permission record permanently from the Community AI system database. The delete is a hard delete consistent with the pruning of access rights.\n\nSecurity: Only admins are authorized.\n\nErrors: Returns 404 if permission ID does not exist.\n\nThis operation does not return a response body.","parameters":[{"name":"id","description":"The unique identifier of the permission to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase"},{"specification":"This operation retrieves a list of community AI external service configurations supporting AI, notifications, and integrations. It queries the community_ai_external_services table with filtering, pagination, and sorting based on request body parameters. This operation allows administrators to manage and view active or inactive external service entries integral to the operations of AI and notification functionalities.\n\nSecurity: Restricted to users with admin and moderator roles given sensitivity.\n\nBusiness rules: This query supports complex filtering based on service_name, status, or other metadata to allow operational monitoring.\n\nResponse: Returns a paginated list of external services matching the filter with all relevant fields including service name, endpoint, and status.","path":"/communityAi/admin/externalServices","method":"patch","summary":"Retrieve a paginated list of external system service configurations","description":"Retrieve filtered and paginated list of configured external services integrated with Community AI platform. Allows searching and sorting by service name, status, and activation flags.\n\nSecurity considerations: Available to admin and moderator roles.\n\nParameters: Supports input of filter criteria, pagination offset, and sorting order.\n\nResponse: Returns paginated external service summaries with key information for management and operational oversight.","parameters":[],"requestBody":{"description":"Filtering and pagination parameters for external services search","typeName":"ICommunityAiExternalService.IRequest"},"responseBody":{"description":"Paginated list of external services","typeName":"IPageICommunityAiExternalService.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index"},{"specification":"This operation retrieves a list of community AI external service configurations supporting AI, notifications, and integrations. It queries the community_ai_external_services table with filtering, pagination, and sorting based on request body parameters. This operation allows administrators to manage and view active or inactive external service entries integral to the operations of AI and notification functionalities.\n\nSecurity: Restricted to users with admin and moderator roles given sensitivity.\n\nBusiness rules: This query supports complex filtering based on service_name, status, or other metadata to allow operational monitoring.\n\nResponse: Returns a paginated list of external services matching the filter with all relevant fields including service name, endpoint, and status.","path":"/communityAi/moderator/externalServices","method":"patch","summary":"Retrieve a paginated list of external system service configurations","description":"Retrieve filtered and paginated list of configured external services integrated with Community AI platform. Allows searching and sorting by service name, status, and activation flags.\n\nSecurity considerations: Available to admin and moderator roles.\n\nParameters: Supports input of filter criteria, pagination offset, and sorting order.\n\nResponse: Returns paginated external service summaries with key information for management and operational oversight.","parameters":[],"requestBody":{"description":"Filtering and pagination parameters for external services search","typeName":"ICommunityAiExternalService.IRequest"},"responseBody":{"description":"Paginated list of external services","typeName":"IPageICommunityAiExternalService.ISummary"},"authorizationType":null,"authorizationRole":"moderator","name":"index"},{"specification":"This operation retrieves the details of a specific external AI or system integration service from the communityAi platform using the service's unique UUID. The external service includes metadata such as service name, API endpoint URI, authentication token, operational status, and timestamps for creation and updates. This enables viewing the configuration and status of a particular external service that the community AI system uses for AI or notification integrations. It is associated with the community_ai_external_services table defined in the Prisma schema.","path":"/communityAi/admin/externalServices/{id}","method":"get","summary":"Retrieve details of a specific external service by ID","description":"Retrieve detailed information about a specific external service used by the communityAi system for AI or notification integrations. The external service record includes key properties such as unique service name, API endpoint URI, optional authentication tokens, and active status.\n\nThis operation requires specifying the unique identifier of the external service to fetch its metadata for administrative or integration purposes. Security considerations include ensuring only authorized users can access external service details due to potential sensitive credentials.\n\nThe database table community_ai_external_services stores these external service configurations and this operation queries a single record by its UUID.\n\nProper validation of the provided UUID as the service identifier is mandatory. The response returns the full community_ai_external_services entity information as defined in the Prisma schema.","parameters":[{"name":"id","description":"Unique identifier of the external service","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Information of the requested external service","typeName":"ICommunityAiExternalServices"},"authorizationType":null,"authorizationRole":"admin","name":"at"},{"specification":"This operation creates a new external service configuration in the communityAi platform. It accepts the service name, API endpoint URI, optional authentication token, and activation status as input. Upon creation, a new unique ID is assigned and timestamps for creation and updates are automatically set. This facilitates dynamically adding new AI or notification integration services.\n\nThe database table community_ai_external_services is used for persistent storage. Input validation must ensure the service name is unique and all required information adheres to length and format constraints.\n\nThis operation is intended for administrators to manage external service connections securely and effectively.","path":"/communityAi/admin/externalServices","method":"post","summary":"Create a new external service configuration","description":"Create a new external AI or notification integration service configuration within the communityAi system. Input includes service name, API endpoint URI, authentication token if required, and activation flag.\n\nSuccessful creation returns the full record including generated ID and timestamps.\n\nSecurity controls restrict this operation to admin users only due to the sensitive nature of service credentials and integration parameters.\n\nValidation includes uniqueness of service name and proper format of API endpoint URI.","parameters":[],"requestBody":{"description":"Information required to create a new external service","typeName":"ICommunityAiExternalServices.ICreate"},"responseBody":{"description":"Newly created external service record","typeName":"ICommunityAiExternalServices"},"authorizationType":null,"authorizationRole":"admin","name":"create"},{"specification":"This operation updates an existing external service record in the communityAi platform. It requires the unique identifier of the service to identify the target record. The update body can include the service name, API endpoint URI, authentication token (optional), and activation flag.\n\nThe database table community_ai_external_services stores the persistent data. Validation enforces uniqueness of the service name if changed and proper formatting for API endpoints.\n\nThis is a secured operation limited to administrator roles to maintain secure and consistent external service configurations.","path":"/communityAi/admin/externalServices/{id}","method":"put","summary":"Update an existing external service configuration","description":"Update the details of an existing external AI or notification service within the communityAi system by specifying its unique ID. The update can modify the service name, API endpoint, authentication token, and whether the service is active.\n\nAdministrators only have permission to perform this update due to the sensitivity of external integrations.\n\nResponds with the updated full service record on success.\n\nThe operation validates input data as per the creation constraints and ensures consistency.","parameters":[{"name":"id","description":"Unique identifier of the external service to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated information for an external service","typeName":"ICommunityAiExternalServices.IUpdate"},"responseBody":{"description":"Updated external service record","typeName":"ICommunityAiExternalServices"},"authorizationType":null,"authorizationRole":"admin","name":"update"},{"specification":"This operation deletes an existing external service configuration from the communityAi platform by specifying the unique ID of the external service. The deletion physically removes the entry from the database, as no soft delete column is specified in the Prisma schema.\n\nThis endpoint is restricted to admin users only because it involves removing critical integration points.\n\nDeletion is permanent and cannot be undone. Proper authorization checks should be in place to prevent accidental or unauthorized removals.","path":"/communityAi/admin/externalServices/{id}","method":"delete","summary":"Delete an existing external service configuration","description":"Permanently remove an external AI or notification service configuration from the communityAi system by its unique identifier.\n\nOnly administrators can perform this permanent deletion due to the critical impact on system integration.\n\nThe service record is completely removed from persistent storage without soft deletion.\n\nProper validation of the service ID and existence is mandatory prior to deletion.\n\nNo response body is returned upon successful deletion.","parameters":[{"name":"id","description":"Unique identifier of the external service to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase"},{"specification":"This operation retrieves a paginated list of admin users from the Community AI system, allowing for advanced filtering, sorting, and pagination. It leverages the community_ai_admins table defined in the Prisma schema, which stores admin user data such as unique email, password hash, display name, and audit timestamps. As per the schema, admin records may have soft deletion indicated by the deleted_at timestamp. This API supports secure retrieval of admin data to manage and overview administrative users in the system.","description":"Retrieve a filtered and paginated list of admin users in the Community AI platform.\n\nThis operation allows clients to search and retrieve admin users including details like email and display name, with support for pagination and sorting as needed.\n\nSecurity considerations require that this operation be restricted to authorized users with administrative privileges.\n\nThe operation reflects data stored in the community_ai_admins table of the Prisma schema, which enforces uniqueness on emails. The response returns data with proper pagination controls.\n\nErrors can occur if invalid filters or pagination parameters are provided, which the client must handle appropriately.","summary":"Search and list Community AI platform admin users with pagination and filtering","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for admin user filtering","typeName":"ICommunityAiAdmin.IRequest"},"responseBody":{"description":"Paginated list of admin user details matching search criteria","typeName":"IPageICommunityAiAdmin"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/communityAi/admin/admins","method":"patch"},{"specification":"This operation retrieves detailed information of a specific admin user identified by the unique UUID id. It accesses the community_ai_admins table from the Prisma schema, which stores admin credentials, display name, and timestamps including a soft delete timestamp deleted_at. The operation fetches the user record if it exists and returns detailed admin information for management purposes.\n\nProper authorization with admin role is required to access sensitive admin user data.","description":"Retrieve detailed information of a Community AI admin user by their unique identifier.\n\nThis operation fetches all admin-specific data including email, display name, and timestamps.\n\nSecurity and privacy considerations restrict access to authorized administrator roles only. Proper error handling is required if the admin user does not exist or is deleted.\n\nThe entity relates directly to the community_ai_admins Prisma schema table.\n\nThis operation is critical for managing and auditing admin accounts within the platform.","summary":"Get details of a specific Community AI admin user","parameters":[{"name":"id","description":"Unique identifier of the target admin user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the specified admin user","typeName":"ICommunityAiAdmin"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/communityAi/admin/admins/{id}","method":"get"},{"specification":"This operation allows the creation of new admin users within the Community AI platform. It writes to the community_ai_admins Prisma schema table, enforcing unique email addresses and requires input of email, password hash, and display name. The operation supports creation of new administrative accounts with audit timestamps auto-populated by the system.\n\nFor security, only users with admin roles can create new admin users. Input validation should ensure the email format, password hash correctness, and display name presence.","description":"Create a new Community AI admin user.\n\nThis operation adds a new admin record with required fields such as unique email, hashed password, and display name.\n\nAuthorization is restricted to existing admins to maintain system integrity.\n\nValidation rules from the Prisma schema ensure email uniqueness and required fields.\n\nThe system automatically generates creation and update timestamps.\n\nError handling is essential for cases of email duplicates or invalid inputs.","summary":"Create a new admin user for Community AI platform","parameters":[],"requestBody":{"description":"Creation data for a new admin user","typeName":"ICommunityAiAdmin.ICreate"},"responseBody":{"description":"Detailed info of the created admin user","typeName":"ICommunityAiAdmin"},"authorizationType":null,"authorizationRole":"admin","name":"create","path":"/communityAi/admin/admins","method":"post"},{"specification":"This operation updates an existing Community AI admin user identified by the UUID id. It modifies fields authorized for update such as email, password hash, and display name as defined in the community_ai_admins Prisma schema. The operation adheres to validation for unique email constraints and updates the updated_at timestamp.\n\nAccess is restricted to admin users only.\n\nSoft deletion status is respected; if the admin is deleted (deleted_at set), update should be rejected or handled accordingly.","description":"Update details of an existing Community AI admin user.\n\nThis operation allows modification of fields like email, password_hash, and display_name for the specified admin user.\n\nAuthorization requires admin role privileges.\n\nProper validation should be enforced to maintain unique email integrity and data consistency.\n\nTimestamps and audit data are automatically managed by the system.\n\nErrors must be handled for cases like non-existent admin or email conflict.","summary":"Update an existing admin user's details","parameters":[{"name":"id","description":"Unique identifier of the target admin user to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for the admin user","typeName":"ICommunityAiAdmin.IUpdate"},"responseBody":{"description":"Updated detailed admin user information","typeName":"ICommunityAiAdmin"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/communityAi/admin/admins/{id}","method":"put"},{"specification":"This operation deletes a specific admin user from the community AI platform's admin user table. It permanently removes the admin record identified by the provided UUID from the database, along with all associated audit logs and admin actions due to cascade delete rules. This endpoint requires admin privileges to ensure only authorized users can remove admin accounts. No request body is required, and no response body is returned upon successful deletion.","description":"This operation permanently removes an admin user from the community AI platform. It targets the admin user record identified by the unique UUID path parameter. Upon execution, the admin user and all dependent records such as audit logs and administrative actions linked to this admin are deleted via cascading.\n\nSecurity considerations require that only authenticated users with admin-level access may invoke this endpoint due to the sensitivity of managing admin accounts.\n\nThe underlying database association is with the community_ai_admins table. Deletion is handled as a hard delete, as no soft delete is implemented for effective removal of privileged user access.\n\nClients should handle errors related to non-existence of the admin ID or lack of proper authorization. This operation has no request or response body.","summary":"Delete an admin user by ID from the system","parameters":[{"name":"id","description":"Unique identifier of the admin user to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"eraseAdminUser","path":"/communityAi/admin/admins/{id}","method":"delete"},{"specification":"This operation retrieves a paginated, filterable list of moderator users from the identity system's moderators table. It accepts complex search criteria via request body parameters such as email, display name, and date ranges, enabling clients to query moderators effectively. The response returns a page object containing summary information for moderators matching the filters.","description":"Retrieve a filtered and paginated list of moderators enabled in the system. This operation supports advanced search and filtering capabilities on moderator data such as email, display name, creation and update timestamps.\n\nThe underlying database entity is community_ai_moderators. The search allows clients to combine filters and pagination parameters to find specific moderators or browse the moderator collection.\n\nSecurity requires the caller to have 'admin' role to access this list, given the sensitivity of moderator data.\n\nThe response returns summarized moderator information sufficient for listing views, excluding full details and sensitive information such as password hashes.","summary":"List and search moderators with filters and pagination","parameters":[],"requestBody":{"description":"Search and pagination criteria for moderators","typeName":"ICommunityAiModerator.IRequest"},"responseBody":{"description":"Paginated list of moderator summaries matching search criteria","typeName":"IPageICommunityAiModerator.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"indexModerators","path":"/communityAi/admin/moderators","method":"patch"},{"specification":"This operation retrieves detailed information about a specific moderator user by their unique ID from the community AI identity moderators table. The returned data includes non-sensitive summary information suitable for admin or authorized user viewing. Requires admin role for access due to the sensitive nature of moderator accounts.","description":"Retrieve detailed information for a moderator user identified by their UUID. This endpoint fetches data from the community_ai_moderators table, providing moderator identity details excluding sensitive fields like password hashes.\n\nAccess is restricted to administrative users to maintain confidentiality and control over identity data.\n\nClients should handle cases where the moderator ID does not exist, and verify authentication and authorization prior to invoking this endpoint.","summary":"Get detailed moderator information by ID","parameters":[{"name":"id","description":"Unique identifier of the moderator user to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Moderator user detailed information","typeName":"ICommunityAiModerator"},"authorizationType":null,"authorizationRole":"admin","name":"atModerator","path":"/communityAi/admin/moderators/{id}","method":"get"},{"specification":"This operation creates a new moderator user within the community AI system. It accepts user data such as email, password hash, and display name in the request body. Upon successful creation, it returns the full moderator details. Access to this function is restricted to admin users to ensure secure management of moderator accounts.","description":"Create a new moderator user record in the system. This operation takes moderator creation data including email, password hash, and display name.\n\nIt inserts the new moderator into the community_ai_moderators table with associated timestamps.\n\nSecurity requires that only admin users can create new moderator accounts.\n\nOn success, the newly created moderator's full details are returned excluding sensitive login credentials like password hashes.\n\nClients should validate email uniqueness and format prior to submission and handle error cases such as duplicate email or invalid input gracefully.","summary":"Create a new moderator user","parameters":[],"requestBody":{"description":"Moderator user creation data","typeName":"ICommunityAiModerator.ICreate"},"responseBody":{"description":"Newly created moderator user details","typeName":"ICommunityAiModerator"},"authorizationType":null,"authorizationRole":"admin","name":"createModerator","path":"/communityAi/admin/moderators","method":"post"},{"specification":"This operation updates the information of a specific moderator user in the community AI platform. It interacts with the 'community_ai_moderators' table in the Prisma schema, which stores moderator identity with email, password hash, display name, and timestamps. The operation allows modification of moderator details such as email, password hash, and display name, ensuring that only authenticated and authorized users with the 'moderator' role can perform the update. Validation includes ensuring uniqueness of email and data integrity. The system performs a hard update to the record identified by the UUID 'id'.","description":"Update a specific moderator's information in the community AI system. \n\nThis operation allows authorized agents with the 'moderator' role to update moderator data. The moderator data includes email, password hash (for authentication), and display name.\n\nEmail must remain unique across all moderators. The operation updates the database record in the 'community_ai_moderators' table using the UUID path parameter 'id'.\n\nProper validation must ensure that email format, password hashing, and display name constraints are respected. Errors should be returned if the moderator does not exist or email conflicts occur.\n\nThis operation is crucial for maintaining moderator account accuracy and access credentials.\n\nAssociated Prisma model: community_ai_moderators.","summary":"Update moderator by id","parameters":[{"name":"id","in":"path","description":"UUID of the target moderator to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for a moderator","typeName":"ICommunityAiModerator.IUpdate"},"responseBody":{"description":"Updated moderator information","typeName":"ICommunityAiModerator"},"authorizationType":null,"authorizationRole":"moderator","name":"update","path":"/communityAi/moderator/moderators/{id}","method":"put"},{"specification":"This operation permanently deletes a moderator record from the community AI platform. It acts on the 'community_ai_moderators' table in the Prisma schema. The delete is a hard delete removing the entry identified by the UUID path parameter 'id'. Only users with the 'moderator' role are authorized to perform this action. This operation does not return content but confirms removal by status code. Any attempt to delete a non-existent moderator should result in an error.\n","description":"Delete a specific moderator from the community AI platform.\n\nThis operation removes the moderator record permanently from the 'community_ai_moderators' table identified by UUID path parameter 'id'.\n\nOnly authorized 'moderator' role users can execute this action.\n\nThe deletion is a hard delete; no data recovery is possible after.\n\nIf the moderator does not exist, an appropriate error must be returned.\n\nThis operation ensures that obsolete or unauthorized moderators are removed from the system.\n\nAssociated Prisma model: community_ai_moderators.","summary":"Delete moderator by id","parameters":[{"name":"id","in":"path","description":"UUID of the target moderator to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"moderator","name":"erase","path":"/communityAi/moderator/moderators/{id}","method":"delete"},{"specification":"This operation retrieves a paginated and searchable list of community AI member users. It queries the 'community_ai_members' table in the Prisma schema, which includes member identity data, credentials, and soft deletion timestamps. The endpoint supports complex search, filtering, and sorting through request parameters defined in 'ICommunityAiMember.IRequest'. The response returns a paginated representation of member summaries as 'IPageICommunityAiMember.ISummary'. This operation is accessible by users with the 'member' role, allowing authenticated users to browse member listings with appropriate pagination and filters.","description":"Retrieve a filtered, sortable, and paginated list of community AI members.\n\nThis operation supports complex queries on member identity fields, including email or display name searches, creation date filtering, and sorting options.\n\nResults include summary-level member information and exclude sensitive data such as password hashes.\n\nOnly authenticated members can access this list.\n\nThis endpoint interacts with the 'community_ai_members' table to gather member data.\n\nPagination parameters determine page size and offset.\n\nFiltering and sorting parameters allow efficient data retrieval suited for UI lists.","summary":"Search and paginate community AI members","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for member filtering","typeName":"ICommunityAiMember.IRequest"},"responseBody":{"description":"Paginated list of member summaries matching search criteria","typeName":"IPageICommunityAiMember.ISummary"},"authorizationType":null,"authorizationRole":"member","name":"index","path":"/communityAi/member/members","method":"patch"},{"specification":"This operation retrieves detailed information about a specific community AI member by their unique identifier. It accesses the 'community_ai_members' table in the Prisma schema containing member identity, credentials, and audit timestamps. The endpoint requires the UUID path parameter 'id' to specify the target member. The response includes full member details excluding sensitive credentials like password hashes. This operation is accessible by authenticated users with the 'member' role. Proper authorization ensures that only authorized users can view member details. Errors must be handled for non-existent members.","description":"Retrieve detailed information about a specific community AI member.\n\nThis operation requires a UUID 'id' path parameter referencing the member to retrieve.\n\nOnly authenticated users with the 'member' role can access this information.\n\nReturned data includes member profile details excluding sensitive authentication credentials.\n\nThis endpoint queries the 'community_ai_members' table.\n\nErrors to be returned if the member does not exist.\n\nUseful for profile viewing and administrative purposes.\n\nAssociated Prisma model: community_ai_members.","summary":"Get community AI member by id","parameters":[{"name":"id","in":"path","description":"UUID of the target member","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Community AI member information","typeName":"ICommunityAiMember"},"authorizationType":null,"authorizationRole":"member","name":"at","path":"/communityAi/member/members/{id}","method":"get"},{"specification":"This operation creates a new member user in the communityAi system. It inserts a new record into the community_ai_members table defined in the Prisma schema, which stores unique email, password hash, display name, and timestamps for creation and updates. The operation enforces uniqueness on the email field and requires valid email and password hash for authentication. No manual setting of timestamps is needed, as these are auto-managed. The member will be able to participate in posts, comments, AI features, and notifications after registration.","description":"Creates a new community member account in the system with necessary authentication credentials and user profile data. The operation requires a unique email address to prevent duplication and a password hash for secure authentication. The member's display name is stored for display purposes. Upon successful creation, timestamps record when the member was created and last updated.\n\nSecurity considerations include ensuring email uniqueness and password hashing on the client or server side before creation. The operation does not expose the password hash but accepts it as input. No direct roles are required for public registration.\n\nThis operation is fundamental for onboarding new users who will then interact with posts, comments, and AI-assisted features. It does not require existing authentication and is publicly accessible.\n\nErrors occur if the email is already used or if validation rules are violated. The system handles these internally and returns appropriate error messages.\n\nNo response body contains sensitive data such as password hashes; only identifiers and display names are returned.","summary":"Create a new community member account","parameters":[],"requestBody":{"description":"Information required to create a communityAi member account","typeName":"ICommunityAiMember.ICreate"},"responseBody":{"description":"Details of the newly created communityAi member account","typeName":"ICommunityAiMember"},"authorizationType":null,"authorizationRole":null,"path":"/communityAi/members","method":"post","name":"create"},{"specification":"This operation updates an existing communityAi member's profile information based on member ID. It updates fields such as email, password hash, and display name as provided by the client, within the community_ai_members table per the Prisma schema. Timestamp updated_at is refreshed to the current update time.\n\nThe operation requires the member ID path parameter to identify the target member record. It performs validation for uniqueness of email if changed and proper hashing of password if updated.\n\nSecurity considerations require ensuring that only the member themselves or authorized admins can perform updates. Authentication and authorization checks are done outside this operation.\n\nErrors return if the member ID does not exist or if validation fails.\n\nThis operation uses a full update semantics replacing applicable fields with provided data.","description":"Update an existing community member's profile data including email, password hash, and display name. The request must specify the member's unique ID in the path parameter. Updates reflect immediately with an updated timestamp.\n\nAuthorization checks are required at the business logic layer to ensure only the member or authorized personnel update profiles.\n\nThis supports user profile management and credential changes with appropriate validation.\n\nIf the member ID does not match any existing user, an error is returned.\n\nThe response contains the updated member details without exposing sensitive password information.","summary":"Update existing community member profile","parameters":[{"name":"id","description":"Unique identifier of the target member","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated data for the communityAi member","typeName":"ICommunityAiMember.IUpdate"},"responseBody":{"description":"Updated communityAi member profile information","typeName":"ICommunityAiMember"},"authorizationType":null,"authorizationRole":"member","path":"/communityAi/member/members/{id}","method":"put","name":"update"},{"specification":"This operation deletes a communityAi member identified by member ID from the system. The deletion is permanent hard delete as the Prisma schema defines a nullable deleted_at for soft delete, but the operation name and context imply removal meaning no soft delete semantics are applied here.\n\nThe member ID is a path parameter that uniquely identifies the community_ai_members record to be deleted. Only authorized users with appropriate permissions may delete the member.\n\nThe operation does not require a request body or return any response body.\n\nErrors arise if the member ID does not exist or if access is unauthorized.\n\nBusiness logic outside this operation should handle cascading deletes or data anonymization.","description":"Delete a community member permanently from the system by their unique ID. This operation removes all associated personal data and access credentials.\n\nAuthorization is required to ensure only appropriate roles can perform member deletion.\n\nNo response body is returned upon successful deletion.\n\nIf the member does not exist, an error response is returned.","summary":"Delete a community member by ID","parameters":[{"name":"id","description":"Unique identifier of the target member","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","path":"/communityAi/admin/members/{id}","method":"delete","name":"erase"},{"specification":"This operation retrieves a paginated list of posts created by a specific member identified by their member ID. The posts are filtered and sorted according to the request body parameters, enabling search and filtering capabilities.\n\nThe member ID is a path parameter used to scope the posts to a particular user. The operation returns paginated post summaries or details.\n\nSecurity considerations require that only authorized users or the member themselves be allowed to view the list.\n\nThis supports user activity tracking, profile views showing posts, and moderation tools.\n\nErrors occur if the member ID is invalid or unauthorized.\n\nThe request body includes search, pagination, and sorting parameters applicable to posts.\n\nThe response body contains a paginated list of posts with summary information.","description":"Retrieve a filtered and paginated list of posts authored by a specific community member. The member ID is provided as a path parameter. The request body allows specifying filters such as status, date ranges, keywords, and pagination options.\n\nThis operation supports profile views, user activity feeds, and moderation oversight by fetching member-specific posts.\n\nAuthorization restrictions apply to ensure privacy and data access integrity.\n\nThe response contains page metadata and post summary elements.","summary":"Retrieve paginated posts by member ID","parameters":[{"name":"memberId","description":"Unique identifier of the member whose posts are queried","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and pagination parameters for filtering member posts","typeName":"ICommunityAiPosts.IRequest"},"responseBody":{"description":"Paginated list of post summaries authored by the member","typeName":"IPageICommunityAiPosts.ISummary"},"authorizationType":null,"authorizationRole":"member","path":"/communityAi/member/members/{memberId}/posts","method":"patch","name":"index"},{"specification":"This operation retrieves a specific community post created by a member. It operates on the community_ai_posts table in the Prisma database schema, which stores posts with titles, body content, status, author associations, and timestamps. The operation requires the memberId as the author_id path parameter and the postId as the post's id path parameter. Authorized users with roles 'admin', 'moderator', or 'member' can access this endpoint to retrieve detailed post information. The response returns the post data including title, slug, status, and other metadata. This endpoint is designed to support frontend clients displaying post details and supporting post management workflows.","description":"Retrieve a specific post belonging to a member by providing memberId and postId.\n\nThis operation allows authenticated users with roles admin, moderator, or member to access the detailed content of a post including title, slug, body, status, and timestamps. The post is uniquely identified by its id and must belong to the specified memberId as its author_id.\n\nSecurity controls restrict access only to authorized roles. Business logic expects that only the post author or privileged users may view the post details.\n\nThis operation references the community_ai_posts table where posts have a soft delete timestamp; however, this endpoint returns only active posts.\n\nIf the post does not exist or does not belong to the member, an error will be returned.\n\nThis GET endpoint responds with full post details suitable for user display or editing in UI clients.","summary":"Retrieve a member's specific post details","parameters":[{"name":"memberId","description":"The member's unique identifier","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"The unique identifier of the post to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed post information","typeName":"ICommunityAiPost"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/communityAi/admin/members/{memberId}/posts/{postId}","method":"get"},{"specification":"This operation retrieves a specific community post created by a member. It operates on the community_ai_posts table in the Prisma database schema, which stores posts with titles, body content, status, author associations, and timestamps. The operation requires the memberId as the author_id path parameter and the postId as the post's id path parameter. Authorized users with roles 'admin', 'moderator', or 'member' can access this endpoint to retrieve detailed post information. The response returns the post data including title, slug, status, and other metadata. This endpoint is designed to support frontend clients displaying post details and supporting post management workflows.","description":"Retrieve a specific post belonging to a member by providing memberId and postId.\n\nThis operation allows authenticated users with roles admin, moderator, or member to access the detailed content of a post including title, slug, body, status, and timestamps. The post is uniquely identified by its id and must belong to the specified memberId as its author_id.\n\nSecurity controls restrict access only to authorized roles. Business logic expects that only the post author or privileged users may view the post details.\n\nThis operation references the community_ai_posts table where posts have a soft delete timestamp; however, this endpoint returns only active posts.\n\nIf the post does not exist or does not belong to the member, an error will be returned.\n\nThis GET endpoint responds with full post details suitable for user display or editing in UI clients.","summary":"Retrieve a member's specific post details","parameters":[{"name":"memberId","description":"The member's unique identifier","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"The unique identifier of the post to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed post information","typeName":"ICommunityAiPost"},"authorizationType":null,"authorizationRole":"moderator","name":"at","path":"/communityAi/moderator/members/{memberId}/posts/{postId}","method":"get"},{"specification":"This operation retrieves a specific community post created by a member. It operates on the community_ai_posts table in the Prisma database schema, which stores posts with titles, body content, status, author associations, and timestamps. The operation requires the memberId as the author_id path parameter and the postId as the post's id path parameter. Authorized users with roles 'admin', 'moderator', or 'member' can access this endpoint to retrieve detailed post information. The response returns the post data including title, slug, status, and other metadata. This endpoint is designed to support frontend clients displaying post details and supporting post management workflows.","description":"Retrieve a specific post belonging to a member by providing memberId and postId.\n\nThis operation allows authenticated users with roles admin, moderator, or member to access the detailed content of a post including title, slug, body, status, and timestamps. The post is uniquely identified by its id and must belong to the specified memberId as its author_id.\n\nSecurity controls restrict access only to authorized roles. Business logic expects that only the post author or privileged users may view the post details.\n\nThis operation references the community_ai_posts table where posts have a soft delete timestamp; however, this endpoint returns only active posts.\n\nIf the post does not exist or does not belong to the member, an error will be returned.\n\nThis GET endpoint responds with full post details suitable for user display or editing in UI clients.","summary":"Retrieve a member's specific post details","parameters":[{"name":"memberId","description":"The member's unique identifier","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"The unique identifier of the post to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed post information","typeName":"ICommunityAiPost"},"authorizationType":null,"authorizationRole":"member","name":"at","path":"/communityAi/member/members/{memberId}/posts/{postId}","method":"get"},{"specification":"This operation creates a new community post authored by a specified member. It persists data to the community_ai_posts table which holds post details including title, slug, body content, workflow status, and timestamps. The operation requires the memberId path parameter to associate the new post with the author. Only authenticated users with member role are authorized to create posts.\n\nThe request body must supply valid post creation data including title, slug, body, and status fields. Upon successful creation, the response returns the created post information including generated ID and timestamps. Business rules validate content length, require non-empty body, and generate unique slugs externally.\n\nThis POST endpoint enables member users to contribute new posts to the community with proper validation and authorization checks.","description":"Create a new post under the specified member's account.\n\nThis operation accepts post details such as title, slug, body content, status, and business status. The post will be associated to the member identified by memberId.\n\nOnly users with the member authorization role can perform this operation. The post content must be valid and meet business rules around non-empty content and length limits.\n\nUpon success, the newly created post entity is returned including assigned unique identifiers and timestamps.\n\nThis endpoint persists data to the community_ai_posts table in the database.","summary":"Create a new post for a member","parameters":[{"name":"memberId","description":"The member's unique identifier","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data required to create a new post for a member","typeName":"ICommunityAiPost.ICreate"},"responseBody":{"description":"Information of the created post","typeName":"ICommunityAiPost"},"authorizationType":null,"authorizationRole":"member","name":"create","path":"/communityAi/member/members/{memberId}/posts","method":"post"},{"specification":"This operation updates an existing community post identified by postId and authored by the memberId. The operation targets the community_ai_posts table which holds post title, slug, body content, workflow status, and timestamps including soft delete markers. The update endpoint expects the memberId and postId as path parameters, and the request body carries update fields for the post.\n\nUsers with roles admin, moderator, or member can update posts, provided they have ownership or elevated privileges. The update operation applies changes to title, slug, body, status, and business status fields.\n\nValidation rules ensure content meets length constraints and business logic on editing time windows.\n\nThis PUT endpoint returns the updated post entity.","description":"Update an existing post's details under the specified member's account.\n\nAuthorized users with roles admin, moderator, or member can modify the post content, title, slug, status, and business status.\n\nThe post is identified by postId and must belong to the member with memberId. The update form must comply with content validation rules.\n\nThis endpoint updates the record in the community_ai_posts table and returns the modified post data.","summary":"Update a member's post","parameters":[{"name":"memberId","description":"The member's unique identifier","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"The unique identifier of the post to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated post data for member's post","typeName":"ICommunityAiPost.IUpdate"},"responseBody":{"description":"Updated post information","typeName":"ICommunityAiPost"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/communityAi/admin/members/{memberId}/posts/{postId}","method":"put"},{"specification":"This operation updates an existing community post identified by postId and authored by the memberId. The operation targets the community_ai_posts table which holds post title, slug, body content, workflow status, and timestamps including soft delete markers. The update endpoint expects the memberId and postId as path parameters, and the request body carries update fields for the post.\n\nUsers with roles admin, moderator, or member can update posts, provided they have ownership or elevated privileges. The update operation applies changes to title, slug, body, status, and business status fields.\n\nValidation rules ensure content meets length constraints and business logic on editing time windows.\n\nThis PUT endpoint returns the updated post entity.","description":"Update an existing post's details under the specified member's account.\n\nAuthorized users with roles admin, moderator, or member can modify the post content, title, slug, status, and business status.\n\nThe post is identified by postId and must belong to the member with memberId. The update form must comply with content validation rules.\n\nThis endpoint updates the record in the community_ai_posts table and returns the modified post data.","summary":"Update a member's post","parameters":[{"name":"memberId","description":"The member's unique identifier","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"The unique identifier of the post to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated post data for member's post","typeName":"ICommunityAiPost.IUpdate"},"responseBody":{"description":"Updated post information","typeName":"ICommunityAiPost"},"authorizationType":null,"authorizationRole":"moderator","name":"update","path":"/communityAi/moderator/members/{memberId}/posts/{postId}","method":"put"},{"specification":"This operation updates an existing community post identified by postId and authored by the memberId. The operation targets the community_ai_posts table which holds post title, slug, body content, workflow status, and timestamps including soft delete markers. The update endpoint expects the memberId and postId as path parameters, and the request body carries update fields for the post.\n\nUsers with roles admin, moderator, or member can update posts, provided they have ownership or elevated privileges. The update operation applies changes to title, slug, body, status, and business status fields.\n\nValidation rules ensure content meets length constraints and business logic on editing time windows.\n\nThis PUT endpoint returns the updated post entity.","description":"Update an existing post's details under the specified member's account.\n\nAuthorized users with roles admin, moderator, or member can modify the post content, title, slug, status, and business status.\n\nThe post is identified by postId and must belong to the member with memberId. The update form must comply with content validation rules.\n\nThis endpoint updates the record in the community_ai_posts table and returns the modified post data.","summary":"Update a member's post","parameters":[{"name":"memberId","description":"The member's unique identifier","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"The unique identifier of the post to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated post data for member's post","typeName":"ICommunityAiPost.IUpdate"},"responseBody":{"description":"Updated post information","typeName":"ICommunityAiPost"},"authorizationType":null,"authorizationRole":"member","name":"update","path":"/communityAi/member/members/{memberId}/posts/{postId}","method":"put"},{"specification":"This operation deletes a community post identified by postId and authored by the memberId. It operates on the community_ai_posts table which supports soft deletion using deleted_at timestamp. The endpoint requires memberId and postId path parameters. Users with roles admin, moderator, or member can perform deletion, provided they meet permission checks.\n\nThe deletion performs a soft delete by setting the deleted_at timestamp, removing the post from public view but retaining it for audit purposes.\n\nThis DELETE endpoint does not return a request body or response content, indicating successful removal.\n\nBusiness logic enforces that members can delete only their posts, whereas admins and moderators may delete any post.","description":"Delete a specific post from a member's account.\n\nThis operation performs a soft delete by setting the deleted_at timestamp, making the post invisible to public queries while retaining data for audits.\n\nOnly authorized users with roles admin, moderator, or member can delete posts with appropriate ownership or permission.\n\nNo response body is returned for this operation.","summary":"Delete a member's post (soft delete)","parameters":[{"name":"memberId","description":"The member's unique identifier","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"The unique identifier of the post to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/communityAi/admin/members/{memberId}/posts/{postId}","method":"delete"},{"specification":"This operation deletes a community post identified by postId and authored by the memberId. It operates on the community_ai_posts table which supports soft deletion using deleted_at timestamp. The endpoint requires memberId and postId path parameters. Users with roles admin, moderator, or member can perform deletion, provided they meet permission checks.\n\nThe deletion performs a soft delete by setting the deleted_at timestamp, removing the post from public view but retaining it for audit purposes.\n\nThis DELETE endpoint does not return a request body or response content, indicating successful removal.\n\nBusiness logic enforces that members can delete only their posts, whereas admins and moderators may delete any post.","description":"Delete a specific post from a member's account.\n\nThis operation performs a soft delete by setting the deleted_at timestamp, making the post invisible to public queries while retaining data for audits.\n\nOnly authorized users with roles admin, moderator, or member can delete posts with appropriate ownership or permission.\n\nNo response body is returned for this operation.","summary":"Delete a member's post (soft delete)","parameters":[{"name":"memberId","description":"The member's unique identifier","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"The unique identifier of the post to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"moderator","name":"erase","path":"/communityAi/moderator/members/{memberId}/posts/{postId}","method":"delete"},{"specification":"This operation deletes a community post identified by postId and authored by the memberId. It operates on the community_ai_posts table which supports soft deletion using deleted_at timestamp. The endpoint requires memberId and postId path parameters. Users with roles admin, moderator, or member can perform deletion, provided they meet permission checks.\n\nThe deletion performs a soft delete by setting the deleted_at timestamp, removing the post from public view but retaining it for audit purposes.\n\nThis DELETE endpoint does not return a request body or response content, indicating successful removal.\n\nBusiness logic enforces that members can delete only their posts, whereas admins and moderators may delete any post.","description":"Delete a specific post from a member's account.\n\nThis operation performs a soft delete by setting the deleted_at timestamp, making the post invisible to public queries while retaining data for audits.\n\nOnly authorized users with roles admin, moderator, or member can delete posts with appropriate ownership or permission.\n\nNo response body is returned for this operation.","summary":"Delete a member's post (soft delete)","parameters":[{"name":"memberId","description":"The member's unique identifier","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"The unique identifier of the post to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"erase","path":"/communityAi/member/members/{memberId}/posts/{postId}","method":"delete"},{"specification":"This operation retrieves a paginated and searchable list of community AI posts from the database. It acts on the community_ai_posts table in the Prisma schema, which stores user-created post content, metadata, and workflow state. The operation supports filtering by post status, author, creation time, and full-text search on title and body fields. Pagination and sorting options enable clients to fetch posts in pages with configurable size and order by fields like creation date or title. This operation is primarily used to display the post list in the user interface for members, moderators, and admins. Security considerations include restricting sensitive post content or unpublished drafts to authorized roles only.","description":"Retrieve a paginated, filtered, and searchable list of community AI posts.\n\nThis operation queries the community_ai_posts table, which holds posts created by community members associated by author_id. It supports complex filtering such as by status, business_status, author_id, and full-text searching on the title and body using PostgreSQL trigram indexes.\n\nPagination parameters control page number and page size, with default sorting by creation date descending. Clients can also sort by title or status.\n\nSecurity requires that posts visible only to privileged users (moderator and admin roles) are filtered appropriately. This endpoint primarily serves the community's main feed and administrative overview.\n\nErrors are returned if invalid search criteria or pagination values are provided.","summary":"Search and retrieve a paginated list of community AI posts","parameters":[],"requestBody":{"description":"Search and pagination criteria for posts","typeName":"ICommunityAiPosts.IRequest"},"responseBody":{"description":"Paginated posts matching search criteria","typeName":"IPageICommunityAiPosts"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/communityAi/admin/posts","method":"patch"},{"specification":"This operation retrieves a paginated and searchable list of community AI posts from the database. It acts on the community_ai_posts table in the Prisma schema, which stores user-created post content, metadata, and workflow state. The operation supports filtering by post status, author, creation time, and full-text search on title and body fields. Pagination and sorting options enable clients to fetch posts in pages with configurable size and order by fields like creation date or title. This operation is primarily used to display the post list in the user interface for members, moderators, and admins. Security considerations include restricting sensitive post content or unpublished drafts to authorized roles only.","description":"Retrieve a paginated, filtered, and searchable list of community AI posts.\n\nThis operation queries the community_ai_posts table, which holds posts created by community members associated by author_id. It supports complex filtering such as by status, business_status, author_id, and full-text searching on the title and body using PostgreSQL trigram indexes.\n\nPagination parameters control page number and page size, with default sorting by creation date descending. Clients can also sort by title or status.\n\nSecurity requires that posts visible only to privileged users (moderator and admin roles) are filtered appropriately. This endpoint primarily serves the community's main feed and administrative overview.\n\nErrors are returned if invalid search criteria or pagination values are provided.","summary":"Search and retrieve a paginated list of community AI posts","parameters":[],"requestBody":{"description":"Search and pagination criteria for posts","typeName":"ICommunityAiPosts.IRequest"},"responseBody":{"description":"Paginated posts matching search criteria","typeName":"IPageICommunityAiPosts"},"authorizationType":null,"authorizationRole":"moderator","name":"index","path":"/communityAi/moderator/posts","method":"patch"},{"specification":"This operation retrieves a paginated and searchable list of community AI posts from the database. It acts on the community_ai_posts table in the Prisma schema, which stores user-created post content, metadata, and workflow state. The operation supports filtering by post status, author, creation time, and full-text search on title and body fields. Pagination and sorting options enable clients to fetch posts in pages with configurable size and order by fields like creation date or title. This operation is primarily used to display the post list in the user interface for members, moderators, and admins. Security considerations include restricting sensitive post content or unpublished drafts to authorized roles only.","description":"Retrieve a paginated, filtered, and searchable list of community AI posts.\n\nThis operation queries the community_ai_posts table, which holds posts created by community members associated by author_id. It supports complex filtering such as by status, business_status, author_id, and full-text searching on the title and body using PostgreSQL trigram indexes.\n\nPagination parameters control page number and page size, with default sorting by creation date descending. Clients can also sort by title or status.\n\nSecurity requires that posts visible only to privileged users (moderator and admin roles) are filtered appropriately. This endpoint primarily serves the community's main feed and administrative overview.\n\nErrors are returned if invalid search criteria or pagination values are provided.","summary":"Search and retrieve a paginated list of community AI posts","parameters":[],"requestBody":{"description":"Search and pagination criteria for posts","typeName":"ICommunityAiPosts.IRequest"},"responseBody":{"description":"Paginated posts matching search criteria","typeName":"IPageICommunityAiPosts"},"authorizationType":null,"authorizationRole":"member","name":"index","path":"/communityAi/member/posts","method":"patch"},{"specification":"This operation retrieves detailed information about a specific post identified by postId from the community_ai_posts table. The schema includes post metadata such as title, body content, status, business status, and timestamps, as well as relations to author and associated comments. The operation is designed to provide comprehensive post detail views for members, moderators, and admins.\n\nAuthorization ensures that only authorized users can access unpublished or sensitive posts.","description":"Retrieve detailed information for a single community AI post by its unique identifier.\n\nThe operation fetches the post record identified by postId including fields like title, body, author information, and workflow states. It returns a full representation suitable for detailed viewing or editing.\n\nSecurity checks enforce that unpublished or restricted posts are only accessible to authorized roles such as admins and moderators.\n\nReturns an error if the post does not exist or the requesting user lacks permission.","summary":"Get detailed information of a community AI post by ID","parameters":[{"name":"postId","description":"Unique identifier of the target post","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed post information","typeName":"ICommunityAiPosts"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/communityAi/admin/posts/{postId}","method":"get"},{"specification":"This operation retrieves detailed information about a specific post identified by postId from the community_ai_posts table. The schema includes post metadata such as title, body content, status, business status, and timestamps, as well as relations to author and associated comments. The operation is designed to provide comprehensive post detail views for members, moderators, and admins.\n\nAuthorization ensures that only authorized users can access unpublished or sensitive posts.","description":"Retrieve detailed information for a single community AI post by its unique identifier.\n\nThe operation fetches the post record identified by postId including fields like title, body, author information, and workflow states. It returns a full representation suitable for detailed viewing or editing.\n\nSecurity checks enforce that unpublished or restricted posts are only accessible to authorized roles such as admins and moderators.\n\nReturns an error if the post does not exist or the requesting user lacks permission.","summary":"Get detailed information of a community AI post by ID","parameters":[{"name":"postId","description":"Unique identifier of the target post","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed post information","typeName":"ICommunityAiPosts"},"authorizationType":null,"authorizationRole":"moderator","name":"at","path":"/communityAi/moderator/posts/{postId}","method":"get"},{"specification":"This operation retrieves detailed information about a specific post identified by postId from the community_ai_posts table. The schema includes post metadata such as title, body content, status, business status, and timestamps, as well as relations to author and associated comments. The operation is designed to provide comprehensive post detail views for members, moderators, and admins.\n\nAuthorization ensures that only authorized users can access unpublished or sensitive posts.","description":"Retrieve detailed information for a single community AI post by its unique identifier.\n\nThe operation fetches the post record identified by postId including fields like title, body, author information, and workflow states. It returns a full representation suitable for detailed viewing or editing.\n\nSecurity checks enforce that unpublished or restricted posts are only accessible to authorized roles such as admins and moderators.\n\nReturns an error if the post does not exist or the requesting user lacks permission.","summary":"Get detailed information of a community AI post by ID","parameters":[{"name":"postId","description":"Unique identifier of the target post","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed post information","typeName":"ICommunityAiPosts"},"authorizationType":null,"authorizationRole":"member","name":"at","path":"/communityAi/member/posts/{postId}","method":"get"},{"specification":"This operation creates a new post in the community_ai_posts table. The post data includes mandatory fields such as title, slug, body, status, business status, and the author's member ID. The creation timestamp is assigned automatically by the system.\n\nBusiness rules enforce that the post title is non-empty and up to 100 characters, the body is non-empty, and the slug is unique. Authorization requires the user to be authenticated as a member, moderator, or admin.\n\nUpon successful creation, the new post entity is returned with all its data fields populated including the generated ID and timestamps.","description":"Create a new community AI post with provided content and metadata.\n\nValidates the input fields according to business rules including title length, unique slug, and required author association.\n\nReturns the created post record.\n\nUnauthorized requests are rejected.","summary":"Create a new community AI post","parameters":[],"requestBody":{"description":"Post creation data","typeName":"ICommunityAiPosts.ICreate"},"responseBody":{"description":"Created post information","typeName":"ICommunityAiPosts"},"authorizationType":null,"authorizationRole":"admin","name":"create","path":"/communityAi/admin/posts","method":"post"},{"specification":"This operation creates a new post in the community_ai_posts table. The post data includes mandatory fields such as title, slug, body, status, business status, and the author's member ID. The creation timestamp is assigned automatically by the system.\n\nBusiness rules enforce that the post title is non-empty and up to 100 characters, the body is non-empty, and the slug is unique. Authorization requires the user to be authenticated as a member, moderator, or admin.\n\nUpon successful creation, the new post entity is returned with all its data fields populated including the generated ID and timestamps.","description":"Create a new community AI post with provided content and metadata.\n\nValidates the input fields according to business rules including title length, unique slug, and required author association.\n\nReturns the created post record.\n\nUnauthorized requests are rejected.","summary":"Create a new community AI post","parameters":[],"requestBody":{"description":"Post creation data","typeName":"ICommunityAiPosts.ICreate"},"responseBody":{"description":"Created post information","typeName":"ICommunityAiPosts"},"authorizationType":null,"authorizationRole":"moderator","name":"create","path":"/communityAi/moderator/posts","method":"post"},{"specification":"This operation creates a new post in the community_ai_posts table. The post data includes mandatory fields such as title, slug, body, status, business status, and the author's member ID. The creation timestamp is assigned automatically by the system.\n\nBusiness rules enforce that the post title is non-empty and up to 100 characters, the body is non-empty, and the slug is unique. Authorization requires the user to be authenticated as a member, moderator, or admin.\n\nUpon successful creation, the new post entity is returned with all its data fields populated including the generated ID and timestamps.","description":"Create a new community AI post with provided content and metadata.\n\nValidates the input fields according to business rules including title length, unique slug, and required author association.\n\nReturns the created post record.\n\nUnauthorized requests are rejected.","summary":"Create a new community AI post","parameters":[],"requestBody":{"description":"Post creation data","typeName":"ICommunityAiPosts.ICreate"},"responseBody":{"description":"Created post information","typeName":"ICommunityAiPosts"},"authorizationType":null,"authorizationRole":"member","name":"create","path":"/communityAi/member/posts","method":"post"},{"specification":"This operation updates an existing community AI post identified by postId. The updatable fields include title, slug, body, status, business status, and updated timestamp. Authorization checks ensure the user has permission to modify the post.\n\nThe operation returns the updated post record after applying changes. Common business rules include verifying the post exists, ownership where applicable, and validation of title length and slug uniqueness.\n\nAn error is returned if the post is not found or the user is unauthorized.","description":"Update an existing community AI post identified by postId with new data.\n\nValidates submitted changes against schema and business rules.\n\nReturns the updated post record after applying changes.\n\nUnauthorized or invalid requests are rejected with appropriate errors.","summary":"Update a community AI post by ID","parameters":[{"name":"postId","description":"Unique identifier of the target post","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Post update data","typeName":"ICommunityAiPosts.IUpdate"},"responseBody":{"description":"Updated post information","typeName":"ICommunityAiPosts"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/communityAi/admin/posts/{postId}","method":"put"},{"specification":"This operation updates an existing community AI post identified by postId. The updatable fields include title, slug, body, status, business status, and updated timestamp. Authorization checks ensure the user has permission to modify the post.\n\nThe operation returns the updated post record after applying changes. Common business rules include verifying the post exists, ownership where applicable, and validation of title length and slug uniqueness.\n\nAn error is returned if the post is not found or the user is unauthorized.","description":"Update an existing community AI post identified by postId with new data.\n\nValidates submitted changes against schema and business rules.\n\nReturns the updated post record after applying changes.\n\nUnauthorized or invalid requests are rejected with appropriate errors.","summary":"Update a community AI post by ID","parameters":[{"name":"postId","description":"Unique identifier of the target post","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Post update data","typeName":"ICommunityAiPosts.IUpdate"},"responseBody":{"description":"Updated post information","typeName":"ICommunityAiPosts"},"authorizationType":null,"authorizationRole":"moderator","name":"update","path":"/communityAi/moderator/posts/{postId}","method":"put"},{"specification":"This operation updates an existing community AI post identified by postId. The updatable fields include title, slug, body, status, business status, and updated timestamp. Authorization checks ensure the user has permission to modify the post.\n\nThe operation returns the updated post record after applying changes. Common business rules include verifying the post exists, ownership where applicable, and validation of title length and slug uniqueness.\n\nAn error is returned if the post is not found or the user is unauthorized.","description":"Update an existing community AI post identified by postId with new data.\n\nValidates submitted changes against schema and business rules.\n\nReturns the updated post record after applying changes.\n\nUnauthorized or invalid requests are rejected with appropriate errors.","summary":"Update a community AI post by ID","parameters":[{"name":"postId","description":"Unique identifier of the target post","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Post update data","typeName":"ICommunityAiPosts.IUpdate"},"responseBody":{"description":"Updated post information","typeName":"ICommunityAiPosts"},"authorizationType":null,"authorizationRole":"member","name":"update","path":"/communityAi/member/posts/{postId}","method":"put"},{"specification":"This operation deletes a specific post from the community_ai_posts table according to the schema in the Content namespace. It requires the unique postId UUID path parameter. Deleting a post results in the permanent removal of the record along with associated relational data such as comments and snapshots due to cascade behavior specified in Prisma schema. Authorization is granted to users with roles admin, moderator, or member when the user owns the post. Business requirements limit deletion permissions accordingly. This performs a hard delete of the post.","description":"Permanently delete a post by its unique postId.\n\nThis operation will remove the post record and cascade delete dependent records including comments, post snapshots, AI replies, fact-check claims, and flags.\n\nAuthorized users include the post owner (member), moderators, and admins. The system enforces ownership and role permissions.\n\nNo content is returned on successful deletion. Errors occur if the post does not exist or user lacks permission.\n\nDeletion implements a hard delete consistent with cascade constraints defined in the Prisma schema.","summary":"Delete a specific communityAi post by postId","parameters":[{"name":"postId","in":"path","description":"Unique identifier for the target post","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erasePost","path":"/communityAi/admin/posts/{postId}","method":"delete"},{"specification":"This operation deletes a specific post from the community_ai_posts table according to the schema in the Content namespace. It requires the unique postId UUID path parameter. Deleting a post results in the permanent removal of the record along with associated relational data such as comments and snapshots due to cascade behavior specified in Prisma schema. Authorization is granted to users with roles admin, moderator, or member when the user owns the post. Business requirements limit deletion permissions accordingly. This performs a hard delete of the post.","description":"Permanently delete a post by its unique postId.\n\nThis operation will remove the post record and cascade delete dependent records including comments, post snapshots, AI replies, fact-check claims, and flags.\n\nAuthorized users include the post owner (member), moderators, and admins. The system enforces ownership and role permissions.\n\nNo content is returned on successful deletion. Errors occur if the post does not exist or user lacks permission.\n\nDeletion implements a hard delete consistent with cascade constraints defined in the Prisma schema.","summary":"Delete a specific communityAi post by postId","parameters":[{"name":"postId","in":"path","description":"Unique identifier for the target post","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"moderator","name":"erasePost","path":"/communityAi/moderator/posts/{postId}","method":"delete"},{"specification":"This operation deletes a specific post from the community_ai_posts table according to the schema in the Content namespace. It requires the unique postId UUID path parameter. Deleting a post results in the permanent removal of the record along with associated relational data such as comments and snapshots due to cascade behavior specified in Prisma schema. Authorization is granted to users with roles admin, moderator, or member when the user owns the post. Business requirements limit deletion permissions accordingly. This performs a hard delete of the post.","description":"Permanently delete a post by its unique postId.\n\nThis operation will remove the post record and cascade delete dependent records including comments, post snapshots, AI replies, fact-check claims, and flags.\n\nAuthorized users include the post owner (member), moderators, and admins. The system enforces ownership and role permissions.\n\nNo content is returned on successful deletion. Errors occur if the post does not exist or user lacks permission.\n\nDeletion implements a hard delete consistent with cascade constraints defined in the Prisma schema.","summary":"Delete a specific communityAi post by postId","parameters":[{"name":"postId","in":"path","description":"Unique identifier for the target post","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"erasePost","path":"/communityAi/member/posts/{postId}","method":"delete"},{"specification":"This operation fetches a paginated, filtered list of comments tied to a given post identified by postId in the Content namespace. The PATCH method anticipates a request body with filtering, searching, and pagination options represented by the ICommunityAiComment.IRequest DTO. Comments are returned in summary form for efficient client display. Authorization requires authenticated member users.","description":"Retrieve a paginated list of comments for the specified post identified by postId. Supports complex filtering, sorting, and search parameters in the request body.\n\nOnly authenticated members (member role) may perform this operation.\n\nThis endpoint supports comment thread display and browsing in the communityAi platform.\n\nErrors returned include invalid postId or unauthorized access.","summary":"List comments for a specific communityAi post","parameters":[{"name":"postId","in":"path","description":"Unique identifier of the target post","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for comments filtering","typeName":"ICommunityAiComment.IRequest"},"responseBody":{"description":"Paginated list of comment summary information matching search criteria","typeName":"IPageICommunityAiComment.ISummary"},"authorizationType":null,"authorizationRole":"member","name":"indexComments","path":"/communityAi/member/posts/{postId}/comments","method":"patch"},{"specification":"This operation retrieves detailed data on a specific comment identified by commentId belonging to the post identified by postId. The comment record is fetched from the community_ai_comments table in the Content namespace. Required path parameters are postId and commentId, both UUIDs. The retrieved comment includes full details as per the schema. Authorization restricts to authenticated member users.","description":"Retrieve full details of the specified comment identified by commentId belonging to the post with postId.\n\nAuthentication of the calling user as a member is required.\n\nReturns a comment entity with all fields including content, author, timestamps.\n\nErrors if identifiers are invalid or user unauthorized.\n\n","summary":"Get details of a specific comment on a communityAi post","parameters":[{"name":"postId","in":"path","description":"Unique identifier of the target post","schema":{"type":"string","format":"uuid"}},{"name":"commentId","in":"path","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed comment information","typeName":"ICommunityAiComment"},"authorizationType":null,"authorizationRole":"member","name":"atComment","path":"/communityAi/member/posts/{postId}/comments/{commentId}","method":"get"},{"specification":"Create a new comment for the post specified by postId. Accepts a request body with the comment creation information defined by ICommunityAiComment.ICreate DTO from the Content namespace. Authorization requires an authenticated user. Upon successful creation, returns the newly created comment record with relevant fields including timestamps and associations. The operation supports enforcing content length constraints and non-empty content according to business rules.","description":"Create a new comment on the specified post identified by postId.\n\nRequest body must contain valid comment content not exceeding 1000 characters.\n\nOnly authenticated members can create comments.\n\nReturns the created comment including id, timestamps, and author association.\n\nValidation errors occur for empty or oversized comments, with appropriate error responses.\n\n","summary":"Create a new comment on a communityAi post","parameters":[{"name":"postId","in":"path","description":"Unique identifier of the target post","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information needed to create a comment","typeName":"ICommunityAiComment.ICreate"},"responseBody":{"description":"Newly created comment information","typeName":"ICommunityAiComment"},"authorizationType":null,"authorizationRole":"member","name":"createComment","path":"/communityAi/member/posts/{postId}/comments","method":"post"},{"specification":"This operation updates a specific comment identified by commentId linked to a specific post identified by postId within the community_ai_comments table. It allows modification of the comment's body content subject to business validations such as character limits and edit time restrictions. The operation requires authentication of the comment owner or elevated users like moderators or admins and returns the updated comment entity upon success.","description":"Update a comment belonging to a given post by specifying postId and commentId in the path. The operation accepts an updated comment body in the request and returns the modified comment record with updated timestamps.\n\nBusiness rules ensure that only authorized users (comment authors, moderators, admins) can edit comments, and edits must occur within allowed timeframes specified in the system.\n\nThis operation references the community_ai_comments Prisma table, which stores comment details, author relations, and audit fields.\n\nErrors returned include 404 if the comment or post does not exist, 403 for unauthorized modification attempts, and validation errors for content limits.\n\nThis API complements other comment management endpoints including create, delete, and retrieve.","summary":"Update a comment on a specific post","parameters":[{"name":"postId","in":"path","description":"The UUID of the post to which the comment belongs","schema":{"type":"string","format":"uuid"}},{"name":"commentId","in":"path","description":"The UUID of the comment to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The data structure containing updated comment content","typeName":"ICommunityAiComments.IUpdate"},"responseBody":{"description":"The updated comment entity after modifications","typeName":"ICommunityAiComments"},"authorizationRole":"member","authorizationType":null,"name":"updateComment","path":"/communityAi/member/posts/{postId}/comments/{commentId}","method":"put"},{"specification":"This operation updates a specific comment identified by commentId linked to a specific post identified by postId within the community_ai_comments table. It allows modification of the comment's body content subject to business validations such as character limits and edit time restrictions. The operation requires authentication of the comment owner or elevated users like moderators or admins and returns the updated comment entity upon success.","description":"Update a comment belonging to a given post by specifying postId and commentId in the path. The operation accepts an updated comment body in the request and returns the modified comment record with updated timestamps.\n\nBusiness rules ensure that only authorized users (comment authors, moderators, admins) can edit comments, and edits must occur within allowed timeframes specified in the system.\n\nThis operation references the community_ai_comments Prisma table, which stores comment details, author relations, and audit fields.\n\nErrors returned include 404 if the comment or post does not exist, 403 for unauthorized modification attempts, and validation errors for content limits.\n\nThis API complements other comment management endpoints including create, delete, and retrieve.","summary":"Update a comment on a specific post","parameters":[{"name":"postId","in":"path","description":"The UUID of the post to which the comment belongs","schema":{"type":"string","format":"uuid"}},{"name":"commentId","in":"path","description":"The UUID of the comment to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The data structure containing updated comment content","typeName":"ICommunityAiComments.IUpdate"},"responseBody":{"description":"The updated comment entity after modifications","typeName":"ICommunityAiComments"},"authorizationRole":"moderator","authorizationType":null,"name":"updateComment","path":"/communityAi/moderator/posts/{postId}/comments/{commentId}","method":"put"},{"specification":"This operation updates a specific comment identified by commentId linked to a specific post identified by postId within the community_ai_comments table. It allows modification of the comment's body content subject to business validations such as character limits and edit time restrictions. The operation requires authentication of the comment owner or elevated users like moderators or admins and returns the updated comment entity upon success.","description":"Update a comment belonging to a given post by specifying postId and commentId in the path. The operation accepts an updated comment body in the request and returns the modified comment record with updated timestamps.\n\nBusiness rules ensure that only authorized users (comment authors, moderators, admins) can edit comments, and edits must occur within allowed timeframes specified in the system.\n\nThis operation references the community_ai_comments Prisma table, which stores comment details, author relations, and audit fields.\n\nErrors returned include 404 if the comment or post does not exist, 403 for unauthorized modification attempts, and validation errors for content limits.\n\nThis API complements other comment management endpoints including create, delete, and retrieve.","summary":"Update a comment on a specific post","parameters":[{"name":"postId","in":"path","description":"The UUID of the post to which the comment belongs","schema":{"type":"string","format":"uuid"}},{"name":"commentId","in":"path","description":"The UUID of the comment to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The data structure containing updated comment content","typeName":"ICommunityAiComments.IUpdate"},"responseBody":{"description":"The updated comment entity after modifications","typeName":"ICommunityAiComments"},"authorizationRole":"admin","authorizationType":null,"name":"updateComment","path":"/communityAi/admin/posts/{postId}/comments/{commentId}","method":"put"},{"specification":"This operation deletes a comment identified by commentId from a given post identified by postId. It performs a hard delete (permanent removal) as per business rules despite the schema soft delete column. Authorized roles include the comment author (member), moderators, and admins. No request body is required, and the operation returns no content on success.","description":"Delete a comment by commentId linked to a specified postId.\n\nThis operation enforces ownership or elevated permissions checks.\n\nDeletion is permanent and removes the comment from all public views.\n\nErrors include not found if the comment or post does not exist, and unauthorized if the user lacks permission.\n\nComplements comment creation, update, and retrieval APIs.","summary":"Delete a comment for a post","parameters":[{"name":"postId","in":"path","description":"The UUID of the post containing the comment","schema":{"type":"string","format":"uuid"}},{"name":"commentId","in":"path","description":"The UUID of the comment to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","authorizationType":null,"name":"eraseComment","path":"/communityAi/member/posts/{postId}/comments/{commentId}","method":"delete"},{"specification":"This operation deletes a comment identified by commentId from a given post identified by postId. It performs a hard delete (permanent removal) as per business rules despite the schema soft delete column. Authorized roles include the comment author (member), moderators, and admins. No request body is required, and the operation returns no content on success.","description":"Delete a comment by commentId linked to a specified postId.\n\nThis operation enforces ownership or elevated permissions checks.\n\nDeletion is permanent and removes the comment from all public views.\n\nErrors include not found if the comment or post does not exist, and unauthorized if the user lacks permission.\n\nComplements comment creation, update, and retrieval APIs.","summary":"Delete a comment for a post","parameters":[{"name":"postId","in":"path","description":"The UUID of the post containing the comment","schema":{"type":"string","format":"uuid"}},{"name":"commentId","in":"path","description":"The UUID of the comment to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"moderator","authorizationType":null,"name":"eraseComment","path":"/communityAi/moderator/posts/{postId}/comments/{commentId}","method":"delete"},{"specification":"This operation deletes a comment identified by commentId from a given post identified by postId. It performs a hard delete (permanent removal) as per business rules despite the schema soft delete column. Authorized roles include the comment author (member), moderators, and admins. No request body is required, and the operation returns no content on success.","description":"Delete a comment by commentId linked to a specified postId.\n\nThis operation enforces ownership or elevated permissions checks.\n\nDeletion is permanent and removes the comment from all public views.\n\nErrors include not found if the comment or post does not exist, and unauthorized if the user lacks permission.\n\nComplements comment creation, update, and retrieval APIs.","summary":"Delete a comment for a post","parameters":[{"name":"postId","in":"path","description":"The UUID of the post containing the comment","schema":{"type":"string","format":"uuid"}},{"name":"commentId","in":"path","description":"The UUID of the comment to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","authorizationType":null,"name":"eraseComment","path":"/communityAi/admin/posts/{postId}/comments/{commentId}","method":"delete"},{"specification":"This operation retrieves a paginated list of comments based on complex search and filter criteria provided in the request body. It queries the community_ai_comments table, supporting filters by author, post, keywords, and pagination controls like page number and size. Access requires authenticated user roles. The response returns a paginated summary view of comments optimized for UI display.","description":"Retrieve a paginated list of comments filtered by search criteria.\n\nSupports filters such as author id, post id, text keywords in the comment body, and pagination parameters.\n\nReturns a paginated list of comment summary objects.\n\nAccess restricted to authorized roles including members, moderators, and admins.\n\nErrors returned for invalid query parameters or unauthorized access.\n\nThis complements single comment retrieval and comment modification APIs.","summary":"Search and list comments with filters","parameters":[],"requestBody":{"description":"Search criteria including pagination and filters for comments","typeName":"ICommunityAiComments.IRequest"},"responseBody":{"description":"Paginated comment summary list","typeName":"IPageICommunityAiComments.ISummary"},"authorizationRole":"member","authorizationType":null,"name":"searchComments","path":"/communityAi/member/comments","method":"patch"},{"specification":"This operation retrieves a paginated list of comments based on complex search and filter criteria provided in the request body. It queries the community_ai_comments table, supporting filters by author, post, keywords, and pagination controls like page number and size. Access requires authenticated user roles. The response returns a paginated summary view of comments optimized for UI display.","description":"Retrieve a paginated list of comments filtered by search criteria.\n\nSupports filters such as author id, post id, text keywords in the comment body, and pagination parameters.\n\nReturns a paginated list of comment summary objects.\n\nAccess restricted to authorized roles including members, moderators, and admins.\n\nErrors returned for invalid query parameters or unauthorized access.\n\nThis complements single comment retrieval and comment modification APIs.","summary":"Search and list comments with filters","parameters":[],"requestBody":{"description":"Search criteria including pagination and filters for comments","typeName":"ICommunityAiComments.IRequest"},"responseBody":{"description":"Paginated comment summary list","typeName":"IPageICommunityAiComments.ISummary"},"authorizationRole":"moderator","authorizationType":null,"name":"searchComments","path":"/communityAi/moderator/comments","method":"patch"},{"specification":"This operation retrieves a paginated list of comments based on complex search and filter criteria provided in the request body. It queries the community_ai_comments table, supporting filters by author, post, keywords, and pagination controls like page number and size. Access requires authenticated user roles. The response returns a paginated summary view of comments optimized for UI display.","description":"Retrieve a paginated list of comments filtered by search criteria.\n\nSupports filters such as author id, post id, text keywords in the comment body, and pagination parameters.\n\nReturns a paginated list of comment summary objects.\n\nAccess restricted to authorized roles including members, moderators, and admins.\n\nErrors returned for invalid query parameters or unauthorized access.\n\nThis complements single comment retrieval and comment modification APIs.","summary":"Search and list comments with filters","parameters":[],"requestBody":{"description":"Search criteria including pagination and filters for comments","typeName":"ICommunityAiComments.IRequest"},"responseBody":{"description":"Paginated comment summary list","typeName":"IPageICommunityAiComments.ISummary"},"authorizationRole":"admin","authorizationType":null,"name":"searchComments","path":"/communityAi/admin/comments","method":"patch"},{"specification":"This operation retrieves detailed information for a specific comment identified by commentId. It queries the community_ai_comments table to fetch full comment content, author, related post information, timestamps, and soft delete status. Access requires authentication and appropriate permissions to view the comment. No request body is required.","description":"Retrieve detailed comment information by commentId.\n\nReturns full comment entity including body content, author, creation and update timestamps, and deletion status.\n\nAccess restricted to authorized roles (members, moderators, admins).\n\nErrors returned for non-existent comment or unauthorized access.\n\nComplements listing, update, and deletion endpoints.","summary":"Get detailed information for a comment","parameters":[{"name":"commentId","in":"path","description":"Unique comment identifier (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full comment entity","typeName":"ICommunityAiComments"},"authorizationRole":"member","authorizationType":null,"name":"atComment","path":"/communityAi/member/comments/{commentId}","method":"get"},{"specification":"This operation retrieves detailed information for a specific comment identified by commentId. It queries the community_ai_comments table to fetch full comment content, author, related post information, timestamps, and soft delete status. Access requires authentication and appropriate permissions to view the comment. No request body is required.","description":"Retrieve detailed comment information by commentId.\n\nReturns full comment entity including body content, author, creation and update timestamps, and deletion status.\n\nAccess restricted to authorized roles (members, moderators, admins).\n\nErrors returned for non-existent comment or unauthorized access.\n\nComplements listing, update, and deletion endpoints.","summary":"Get detailed information for a comment","parameters":[{"name":"commentId","in":"path","description":"Unique comment identifier (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full comment entity","typeName":"ICommunityAiComments"},"authorizationRole":"moderator","authorizationType":null,"name":"atComment","path":"/communityAi/moderator/comments/{commentId}","method":"get"},{"specification":"This operation retrieves detailed information for a specific comment identified by commentId. It queries the community_ai_comments table to fetch full comment content, author, related post information, timestamps, and soft delete status. Access requires authentication and appropriate permissions to view the comment. No request body is required.","description":"Retrieve detailed comment information by commentId.\n\nReturns full comment entity including body content, author, creation and update timestamps, and deletion status.\n\nAccess restricted to authorized roles (members, moderators, admins).\n\nErrors returned for non-existent comment or unauthorized access.\n\nComplements listing, update, and deletion endpoints.","summary":"Get detailed information for a comment","parameters":[{"name":"commentId","in":"path","description":"Unique comment identifier (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full comment entity","typeName":"ICommunityAiComments"},"authorizationRole":"admin","authorizationType":null,"name":"atComment","path":"/communityAi/admin/comments/{commentId}","method":"get"},{"specification":"This operation allows authenticated community_ai_members to create a new comment on a post by providing the comment content, the post ID, and the author member ID. It operates on the 'community_ai_comments' table in the Content namespace as defined in the Prisma schema. Business rules require the comment content to be non-empty and up to 1000 characters. The operation returns the created comment entity with timestamps and associations.","description":"Create a new comment on an existing post. The comment must include non-empty body text up to 1000 characters and be attributed to a specific member as the author referencing the post ID.\n\nThis operation modifies the 'community_ai_comments' table. It is restricted to authenticated members with role 'member' in the Identity namespace. Input validation enforces business rules on content.\n\nOn success, the response includes the created comment record with all details.\n\nErrors to handle include empty body, exceeding character limits, or invalid references to post or member IDs.","summary":"Create a new comment","parameters":[],"requestBody":{"description":"New comment data payload","typeName":"ICommunityAiComment.ICreate"},"responseBody":{"description":"Created comment details","typeName":"ICommunityAiComment"},"authorizationType":null,"authorizationRole":"member","name":"create","path":"/communityAi/member/comments","method":"post"},{"specification":"This operation updates the content of an existing comment identified by 'commentId'. The update must observe business rules that permit comment editing only within one hour of creation. It operates on the 'community_ai_comments' table in the Content namespace. Requires the comment ID as a path parameter and the update payload in the request body.\n\nOnly authorized members with role 'member' can perform the update. The updated comment details are returned upon success.","description":"Update the content of an existing comment specified by its commentId. Edits are only allowed if within the permitted one-hour window after creation.\n\nThis operation affects the 'community_ai_comments' table. It requires authentication as a member.\n\nSuccessful operation returns the updated comment entity.\n\nErrors occur if the comment does not exist, the edit timeframe has elapsed, or if the updated content violates business rules such as empty body or character limits.","summary":"Update a comment by ID","parameters":[{"name":"commentId","description":"Unique identifier of the comment to update","schema":{"type":"string"}}],"requestBody":{"description":"Updated comment data","typeName":"ICommunityAiComment.IUpdate"},"responseBody":{"description":"Updated comment details","typeName":"ICommunityAiComment"},"authorizationType":null,"authorizationRole":"member","name":"update","path":"/communityAi/member/comments/{commentId}","method":"put"},{"specification":"This operation permanently deletes a comment by its unique identifier 'commentId' from the 'community_ai_comments' table in the Content namespace. The schema does not specify soft deletion via flags, so this is a hard delete.\n\nOnly authenticated members with role 'member' are authorized to delete comments, typically owners or moderators. The operation accepts the commentId as a path parameter and returns no content on success.","description":"Permanently delete a comment by its commentId. This operation removes the comment record from the database with no return content.\n\nOnly authorized members (role 'member') can perform delete operations.\n\nErrors may occur if the comment does not exist or if the user lacks permission.","summary":"Delete a comment by ID","parameters":[{"name":"commentId","description":"Unique identifier of the comment to delete","schema":{"type":"string"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"erase","path":"/communityAi/member/comments/{commentId}","method":"delete"},{"specification":"This operation allows authenticated community AI members (role 'member') to search, filter, sort, and paginate AI-generated comment suggestions stored in the 'community_ai_ai_comment_suggestions' table within the AICommenting namespace.\n\nThe PATCH method accepts a complex request body of type ICommunityAiAiCommentSuggestion.IRequest, and returns a paginated result including summary information suitable for UI display.\n\nThis endpoint supports user interaction with AI comment assisting features by exposing the suggestions data with filtering and pagination.","description":"Perform a filtered, sorted, and paginated search of AI comment suggestions.\n\nThe response contains paginated summary data of AI suggestions linked to user comments.\n\nAccess is restricted to members (role 'member'). Input validation is required on search criteria.\n\nErrors may result from invalid query parameters or unauthorized access.","summary":"Search AI comment suggestions","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for AI comment suggestions","typeName":"ICommunityAiAiCommentSuggestion.IRequest"},"responseBody":{"description":"Paginated AI comment suggestion summaries","typeName":"IPageICommunityAiAiCommentSuggestion.ISummary"},"authorizationType":null,"authorizationRole":"member","name":"index","path":"/communityAi/member/aiCommenting/aiCommentSuggestions","method":"patch"},{"specification":"This operation retrieves a specific AI comment suggestion by its unique identifier from the community_ai_ai_comment_suggestions table. It allows clients to view details of AI-generated suggestions for improving user comments including the suggested text, confidence score, timestamps, and related comment and member IDs.","path":"/communityAi/member/aiCommenting/aiCommentSuggestions/{id}","method":"get","summary":"Get AI comment suggestion details by ID","description":"Retrieve the detailed information of an AI-generated comment suggestion by its unique identifier. This operation fetches the suggestion text, confidence score, creation and update timestamps, and references to the original comment and member who owns the comment.\n\nSecurity roles required to access this operation typically include authenticated members who created the suggestion or roles with moderation or admin privileges.\n\nThe response includes all relevant properties of the suggestion record from the CommunityAiAiCommentSuggestions entity.\n\nReturns error if the suggestion is not found or access is unauthorized.","parameters":[{"name":"id","description":"Unique identifier of the AI comment suggestion","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed AI comment suggestion object","typeName":"ICommunityAiAiCommentSuggestions"},"authorizationType":null,"authorizationRole":"member","name":"at"},{"specification":"This operation retrieves a specific AI comment suggestion by its unique identifier from the community_ai_ai_comment_suggestions table. It allows clients to view details of AI-generated suggestions for improving user comments including the suggested text, confidence score, timestamps, and related comment and member IDs.","path":"/communityAi/moderator/aiCommenting/aiCommentSuggestions/{id}","method":"get","summary":"Get AI comment suggestion details by ID","description":"Retrieve the detailed information of an AI-generated comment suggestion by its unique identifier. This operation fetches the suggestion text, confidence score, creation and update timestamps, and references to the original comment and member who owns the comment.\n\nSecurity roles required to access this operation typically include authenticated members who created the suggestion or roles with moderation or admin privileges.\n\nThe response includes all relevant properties of the suggestion record from the CommunityAiAiCommentSuggestions entity.\n\nReturns error if the suggestion is not found or access is unauthorized.","parameters":[{"name":"id","description":"Unique identifier of the AI comment suggestion","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed AI comment suggestion object","typeName":"ICommunityAiAiCommentSuggestions"},"authorizationType":null,"authorizationRole":"moderator","name":"at"},{"specification":"This operation retrieves a specific AI comment suggestion by its unique identifier from the community_ai_ai_comment_suggestions table. It allows clients to view details of AI-generated suggestions for improving user comments including the suggested text, confidence score, timestamps, and related comment and member IDs.","path":"/communityAi/admin/aiCommenting/aiCommentSuggestions/{id}","method":"get","summary":"Get AI comment suggestion details by ID","description":"Retrieve the detailed information of an AI-generated comment suggestion by its unique identifier. This operation fetches the suggestion text, confidence score, creation and update timestamps, and references to the original comment and member who owns the comment.\n\nSecurity roles required to access this operation typically include authenticated members who created the suggestion or roles with moderation or admin privileges.\n\nThe response includes all relevant properties of the suggestion record from the CommunityAiAiCommentSuggestions entity.\n\nReturns error if the suggestion is not found or access is unauthorized.","parameters":[{"name":"id","description":"Unique identifier of the AI comment suggestion","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed AI comment suggestion object","typeName":"ICommunityAiAiCommentSuggestions"},"authorizationType":null,"authorizationRole":"admin","name":"at"},{"specification":"This operation creates a new AI comment suggestion in the community_ai_ai_comment_suggestions table. It accepts data about the comment ID, member ID, suggested text to improve the comment, and the confidence score of the suggestion.","path":"/communityAi/member/aiCommenting/aiCommentSuggestions","method":"post","summary":"Create a new AI comment suggestion","description":"Create a new AI-generated comment suggestion that improves user comments. The payload must include the comment reference, member owner, suggested text, and confidence score between 0.0 and 1.0.\n\nThe system stores creation and update timestamps automatically.\n\nAuthorization requires the member to be authenticated to submit suggestions.\n\nReturns the created AI comment suggestion with all pertinent details.","parameters":[],"requestBody":{"description":"AI comment suggestion creation data","typeName":"ICommunityAiAiCommentSuggestions.ICreate"},"responseBody":{"description":"Created AI comment suggestion object","typeName":"ICommunityAiAiCommentSuggestions"},"authorizationType":null,"authorizationRole":"member","name":"create"},{"specification":"This operation updates an existing AI comment suggestion record identified by the unique ID in the community_ai_ai_comment_suggestions table.","path":"/communityAi/member/aiCommenting/aiCommentSuggestions/{id}","method":"put","summary":"Update AI comment suggestion by ID","description":"Update an existing AI-generated comment suggestion record. The update can modify the suggested text, confidence score, and timestamps.\n\nIt requires the ID path parameter to specify which suggestion to update.\n\nAuthorization requires member ownership or elevated roles such as moderator or admin.\n\nReturns the updated AI comment suggestion entity.","parameters":[{"name":"id","description":"Unique identifier of the AI comment suggestion to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"AI comment suggestion update data","typeName":"ICommunityAiAiCommentSuggestions.IUpdate"},"responseBody":{"description":"Updated AI comment suggestion object","typeName":"ICommunityAiAiCommentSuggestions"},"authorizationType":null,"authorizationRole":"member","name":"update"},{"specification":"This operation updates an existing AI comment suggestion record identified by the unique ID in the community_ai_ai_comment_suggestions table.","path":"/communityAi/moderator/aiCommenting/aiCommentSuggestions/{id}","method":"put","summary":"Update AI comment suggestion by ID","description":"Update an existing AI-generated comment suggestion record. The update can modify the suggested text, confidence score, and timestamps.\n\nIt requires the ID path parameter to specify which suggestion to update.\n\nAuthorization requires member ownership or elevated roles such as moderator or admin.\n\nReturns the updated AI comment suggestion entity.","parameters":[{"name":"id","description":"Unique identifier of the AI comment suggestion to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"AI comment suggestion update data","typeName":"ICommunityAiAiCommentSuggestions.IUpdate"},"responseBody":{"description":"Updated AI comment suggestion object","typeName":"ICommunityAiAiCommentSuggestions"},"authorizationType":null,"authorizationRole":"moderator","name":"update"},{"specification":"This operation updates an existing AI comment suggestion record identified by the unique ID in the community_ai_ai_comment_suggestions table.","path":"/communityAi/admin/aiCommenting/aiCommentSuggestions/{id}","method":"put","summary":"Update AI comment suggestion by ID","description":"Update an existing AI-generated comment suggestion record. The update can modify the suggested text, confidence score, and timestamps.\n\nIt requires the ID path parameter to specify which suggestion to update.\n\nAuthorization requires member ownership or elevated roles such as moderator or admin.\n\nReturns the updated AI comment suggestion entity.","parameters":[{"name":"id","description":"Unique identifier of the AI comment suggestion to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"AI comment suggestion update data","typeName":"ICommunityAiAiCommentSuggestions.IUpdate"},"responseBody":{"description":"Updated AI comment suggestion object","typeName":"ICommunityAiAiCommentSuggestions"},"authorizationType":null,"authorizationRole":"admin","name":"update"},{"specification":"This operation deletes an existing AI comment suggestion identified by the unique ID. It performs a hard delete removing the record permanently from the community_ai_ai_comment_suggestions table.","path":"/communityAi/member/aiCommenting/aiCommentSuggestions/{id}","method":"delete","summary":"Delete AI comment suggestion by ID","description":"Permanently remove an AI-generated comment suggestion from the system by its unique ID.\n\nThis deletion is irreversible and removes all data associated with the suggestion. Authorization is restricted to members who created the suggestion or to moderators and admins.\n\nNo request body is required.\n\nNo response body is returned upon successful deletion.","parameters":[{"name":"id","description":"Unique identifier of the AI comment suggestion to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"erase"},{"specification":"This operation deletes an existing AI comment suggestion identified by the unique ID. It performs a hard delete removing the record permanently from the community_ai_ai_comment_suggestions table.","path":"/communityAi/moderator/aiCommenting/aiCommentSuggestions/{id}","method":"delete","summary":"Delete AI comment suggestion by ID","description":"Permanently remove an AI-generated comment suggestion from the system by its unique ID.\n\nThis deletion is irreversible and removes all data associated with the suggestion. Authorization is restricted to members who created the suggestion or to moderators and admins.\n\nNo request body is required.\n\nNo response body is returned upon successful deletion.","parameters":[{"name":"id","description":"Unique identifier of the AI comment suggestion to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"moderator","name":"erase"},{"specification":"This operation deletes an existing AI comment suggestion identified by the unique ID. It performs a hard delete removing the record permanently from the community_ai_ai_comment_suggestions table.","path":"/communityAi/admin/aiCommenting/aiCommentSuggestions/{id}","method":"delete","summary":"Delete AI comment suggestion by ID","description":"Permanently remove an AI-generated comment suggestion from the system by its unique ID.\n\nThis deletion is irreversible and removes all data associated with the suggestion. Authorization is restricted to members who created the suggestion or to moderators and admins.\n\nNo request body is required.\n\nNo response body is returned upon successful deletion.","parameters":[{"name":"id","description":"Unique identifier of the AI comment suggestion to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase"},{"specification":"This API operation retrieves a paginated list of sentiment analysis results for the specified comment, enabling detailed sentiment tracking of user comments. It operates on the community_ai_comment_sentiment_analyses table and supports searching, filtering, and sorting based on analysis timestamps and sentiment classification.","path":"/communityAi/admin/comments/{commentId}/sentimentAnalyses","method":"patch","summary":"Retrieve paginated list of sentiment analyses for a comment","description":"Retrieve a paginated list of sentiment analyses associated with a specific comment identified by commentId. This operation allows clients to efficiently browse multiple sentiment analysis records, each detailing the sentiment (positive, neutral, or negative) assessed by AI and the confidence score achieved.\n\nOnly authorized users with roles 'admin', 'moderator', or 'member' can access sentiment analysis results. The commentId path parameter specifies the target comment for which sentiment analyses are fetched.\n\nThis operation interfaces directly with the community_ai_comment_sentiment_analyses table, referencing comment IDs. Pagination and filtering capabilities enable client applications to display concise and timely sentiment analysis data effectively.\n\nErrors are handled by returning appropriate HTTP status codes and messages if the commentId is invalid or if no records exist.","parameters":[{"name":"commentId","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for sentiment analyses","typeName":"ICommunityAiCommentSentimentAnalysis.IRequest"},"responseBody":{"description":"Paginated sentiment analysis results matching search criteria","typeName":"IPageICommunityAiCommentSentimentAnalysis"},"authorizationType":null,"authorizationRole":"admin","name":"index"},{"specification":"This API operation retrieves a paginated list of sentiment analysis results for the specified comment, enabling detailed sentiment tracking of user comments. It operates on the community_ai_comment_sentiment_analyses table and supports searching, filtering, and sorting based on analysis timestamps and sentiment classification.","path":"/communityAi/moderator/comments/{commentId}/sentimentAnalyses","method":"patch","summary":"Retrieve paginated list of sentiment analyses for a comment","description":"Retrieve a paginated list of sentiment analyses associated with a specific comment identified by commentId. This operation allows clients to efficiently browse multiple sentiment analysis records, each detailing the sentiment (positive, neutral, or negative) assessed by AI and the confidence score achieved.\n\nOnly authorized users with roles 'admin', 'moderator', or 'member' can access sentiment analysis results. The commentId path parameter specifies the target comment for which sentiment analyses are fetched.\n\nThis operation interfaces directly with the community_ai_comment_sentiment_analyses table, referencing comment IDs. Pagination and filtering capabilities enable client applications to display concise and timely sentiment analysis data effectively.\n\nErrors are handled by returning appropriate HTTP status codes and messages if the commentId is invalid or if no records exist.","parameters":[{"name":"commentId","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for sentiment analyses","typeName":"ICommunityAiCommentSentimentAnalysis.IRequest"},"responseBody":{"description":"Paginated sentiment analysis results matching search criteria","typeName":"IPageICommunityAiCommentSentimentAnalysis"},"authorizationType":null,"authorizationRole":"moderator","name":"index"},{"specification":"This API operation retrieves a paginated list of sentiment analysis results for the specified comment, enabling detailed sentiment tracking of user comments. It operates on the community_ai_comment_sentiment_analyses table and supports searching, filtering, and sorting based on analysis timestamps and sentiment classification.","path":"/communityAi/member/comments/{commentId}/sentimentAnalyses","method":"patch","summary":"Retrieve paginated list of sentiment analyses for a comment","description":"Retrieve a paginated list of sentiment analyses associated with a specific comment identified by commentId. This operation allows clients to efficiently browse multiple sentiment analysis records, each detailing the sentiment (positive, neutral, or negative) assessed by AI and the confidence score achieved.\n\nOnly authorized users with roles 'admin', 'moderator', or 'member' can access sentiment analysis results. The commentId path parameter specifies the target comment for which sentiment analyses are fetched.\n\nThis operation interfaces directly with the community_ai_comment_sentiment_analyses table, referencing comment IDs. Pagination and filtering capabilities enable client applications to display concise and timely sentiment analysis data effectively.\n\nErrors are handled by returning appropriate HTTP status codes and messages if the commentId is invalid or if no records exist.","parameters":[{"name":"commentId","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for sentiment analyses","typeName":"ICommunityAiCommentSentimentAnalysis.IRequest"},"responseBody":{"description":"Paginated sentiment analysis results matching search criteria","typeName":"IPageICommunityAiCommentSentimentAnalysis"},"authorizationType":null,"authorizationRole":"member","name":"index"},{"specification":"This API operation retrieves detailed information about a single sentiment analysis record by its unique identifier for the specified comment. It targets the community_ai_comment_sentiment_analyses table and returns full details including sentiment classification, confidence score, and analysis timestamp.","path":"/communityAi/admin/comments/{commentId}/sentimentAnalyses/{id}","method":"get","summary":"Retrieve sentiment analysis detail by ID for a comment","description":"Retrieve detailed sentiment analysis information for a specific analysis identified by id, related to the comment identified by commentId.\n\nThis operation requires authorized access and returns full data of the sentiment analysis including sentiment category (positive, neutral, negative), confidence score, and when the analysis was carried out.\n\nRelies on the community_ai_comment_sentiment_analyses table with direct references to comment data.\n\nErrors like invalid identifiers or unauthorized access result in proper error responses.","parameters":[{"name":"commentId","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}},{"name":"id","description":"Unique identifier of the target sentiment analysis","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed sentiment analysis information","typeName":"ICommunityAiCommentSentimentAnalysis"},"authorizationType":null,"authorizationRole":"admin","name":"at"},{"specification":"This API operation retrieves detailed information about a single sentiment analysis record by its unique identifier for the specified comment. It targets the community_ai_comment_sentiment_analyses table and returns full details including sentiment classification, confidence score, and analysis timestamp.","path":"/communityAi/moderator/comments/{commentId}/sentimentAnalyses/{id}","method":"get","summary":"Retrieve sentiment analysis detail by ID for a comment","description":"Retrieve detailed sentiment analysis information for a specific analysis identified by id, related to the comment identified by commentId.\n\nThis operation requires authorized access and returns full data of the sentiment analysis including sentiment category (positive, neutral, negative), confidence score, and when the analysis was carried out.\n\nRelies on the community_ai_comment_sentiment_analyses table with direct references to comment data.\n\nErrors like invalid identifiers or unauthorized access result in proper error responses.","parameters":[{"name":"commentId","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}},{"name":"id","description":"Unique identifier of the target sentiment analysis","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed sentiment analysis information","typeName":"ICommunityAiCommentSentimentAnalysis"},"authorizationType":null,"authorizationRole":"moderator","name":"at"},{"specification":"This API operation retrieves detailed information about a single sentiment analysis record by its unique identifier for the specified comment. It targets the community_ai_comment_sentiment_analyses table and returns full details including sentiment classification, confidence score, and analysis timestamp.","path":"/communityAi/member/comments/{commentId}/sentimentAnalyses/{id}","method":"get","summary":"Retrieve sentiment analysis detail by ID for a comment","description":"Retrieve detailed sentiment analysis information for a specific analysis identified by id, related to the comment identified by commentId.\n\nThis operation requires authorized access and returns full data of the sentiment analysis including sentiment category (positive, neutral, negative), confidence score, and when the analysis was carried out.\n\nRelies on the community_ai_comment_sentiment_analyses table with direct references to comment data.\n\nErrors like invalid identifiers or unauthorized access result in proper error responses.","parameters":[{"name":"commentId","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}},{"name":"id","description":"Unique identifier of the target sentiment analysis","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed sentiment analysis information","typeName":"ICommunityAiCommentSentimentAnalysis"},"authorizationType":null,"authorizationRole":"member","name":"at"},{"specification":"This operation creates a new sentiment analysis record for a specific comment. It receives the sentiment analysis data including sentiment classification, confidence score, and analysis timestamp, storing this information in the community_ai_comment_sentiment_analyses table.\n\nIncoming data is validated to ensure compliance with sentiment categories and valid confidence scores.\n\nOnly authorized users may create sentiment analysis entries. On success, returns the newly created sentiment analysis record with all details.","path":"/communityAi/admin/comments/{commentId}/sentimentAnalyses","method":"post","summary":"Create new sentiment analysis record for a comment","description":"Create and store a new sentiment analysis result associated with the specified comment identified by commentId.\n\nThe request body must include valid sentiment values (positive, neutral, negative), confidence scores as double precision floats, and the time the analysis was performed.\n\nThe system verifies user authorization for this creation.\n\nErrors are returned for invalid input data or unauthorized attempts.","parameters":[{"name":"commentId","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Details for the new sentiment analysis record","typeName":"ICommunityAiCommentSentimentAnalysis.ICreate"},"responseBody":{"description":"Created sentiment analysis record","typeName":"ICommunityAiCommentSentimentAnalysis"},"authorizationType":null,"authorizationRole":"admin","name":"create"},{"specification":"This operation creates a new sentiment analysis record for a specific comment. It receives the sentiment analysis data including sentiment classification, confidence score, and analysis timestamp, storing this information in the community_ai_comment_sentiment_analyses table.\n\nIncoming data is validated to ensure compliance with sentiment categories and valid confidence scores.\n\nOnly authorized users may create sentiment analysis entries. On success, returns the newly created sentiment analysis record with all details.","path":"/communityAi/moderator/comments/{commentId}/sentimentAnalyses","method":"post","summary":"Create new sentiment analysis record for a comment","description":"Create and store a new sentiment analysis result associated with the specified comment identified by commentId.\n\nThe request body must include valid sentiment values (positive, neutral, negative), confidence scores as double precision floats, and the time the analysis was performed.\n\nThe system verifies user authorization for this creation.\n\nErrors are returned for invalid input data or unauthorized attempts.","parameters":[{"name":"commentId","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Details for the new sentiment analysis record","typeName":"ICommunityAiCommentSentimentAnalysis.ICreate"},"responseBody":{"description":"Created sentiment analysis record","typeName":"ICommunityAiCommentSentimentAnalysis"},"authorizationType":null,"authorizationRole":"moderator","name":"create"},{"specification":"This operation creates a new sentiment analysis record for a specific comment. It receives the sentiment analysis data including sentiment classification, confidence score, and analysis timestamp, storing this information in the community_ai_comment_sentiment_analyses table.\n\nIncoming data is validated to ensure compliance with sentiment categories and valid confidence scores.\n\nOnly authorized users may create sentiment analysis entries. On success, returns the newly created sentiment analysis record with all details.","path":"/communityAi/member/comments/{commentId}/sentimentAnalyses","method":"post","summary":"Create new sentiment analysis record for a comment","description":"Create and store a new sentiment analysis result associated with the specified comment identified by commentId.\n\nThe request body must include valid sentiment values (positive, neutral, negative), confidence scores as double precision floats, and the time the analysis was performed.\n\nThe system verifies user authorization for this creation.\n\nErrors are returned for invalid input data or unauthorized attempts.","parameters":[{"name":"commentId","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Details for the new sentiment analysis record","typeName":"ICommunityAiCommentSentimentAnalysis.ICreate"},"responseBody":{"description":"Created sentiment analysis record","typeName":"ICommunityAiCommentSentimentAnalysis"},"authorizationType":null,"authorizationRole":"member","name":"create"},{"specification":"Update an existing sentiment analysis record identified by id for a specific comment with new data such as sentiment classification, confidence score, and analysis time in the community_ai_comment_sentiment_analyses table.\n\nThe operation validates input data and updates the corresponding record accordingly.\n\nAuthorized users may perform updates, which return the updated record upon success.\n\nErrors include invalid identifiers, unauthorized access, or invalid input data.","path":"/communityAi/admin/comments/{commentId}/sentimentAnalyses/{id}","method":"put","summary":"Update an existing sentiment analysis record for a comment","description":"Modify an existing sentiment analysis linked to a comment, identified by commentId and sentiment analysis id.\n\nClients can update properties like sentiment classification (positive, neutral, negative), confidence score, and analysis timestamp.\n\nAppropriate authorization is needed. Validation errors and unauthorized attempts result in error responses.\n\nThe successful response includes the updated entity data.","parameters":[{"name":"commentId","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}},{"name":"id","description":"Unique identifier of the target sentiment analysis","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated sentiment analysis data","typeName":"ICommunityAiCommentSentimentAnalysis.IUpdate"},"responseBody":{"description":"Updated sentiment analysis record","typeName":"ICommunityAiCommentSentimentAnalysis"},"authorizationType":null,"authorizationRole":"admin","name":"update"},{"specification":"Update an existing sentiment analysis record identified by id for a specific comment with new data such as sentiment classification, confidence score, and analysis time in the community_ai_comment_sentiment_analyses table.\n\nThe operation validates input data and updates the corresponding record accordingly.\n\nAuthorized users may perform updates, which return the updated record upon success.\n\nErrors include invalid identifiers, unauthorized access, or invalid input data.","path":"/communityAi/moderator/comments/{commentId}/sentimentAnalyses/{id}","method":"put","summary":"Update an existing sentiment analysis record for a comment","description":"Modify an existing sentiment analysis linked to a comment, identified by commentId and sentiment analysis id.\n\nClients can update properties like sentiment classification (positive, neutral, negative), confidence score, and analysis timestamp.\n\nAppropriate authorization is needed. Validation errors and unauthorized attempts result in error responses.\n\nThe successful response includes the updated entity data.","parameters":[{"name":"commentId","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}},{"name":"id","description":"Unique identifier of the target sentiment analysis","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated sentiment analysis data","typeName":"ICommunityAiCommentSentimentAnalysis.IUpdate"},"responseBody":{"description":"Updated sentiment analysis record","typeName":"ICommunityAiCommentSentimentAnalysis"},"authorizationType":null,"authorizationRole":"moderator","name":"update"},{"specification":"Update an existing sentiment analysis record identified by id for a specific comment with new data such as sentiment classification, confidence score, and analysis time in the community_ai_comment_sentiment_analyses table.\n\nThe operation validates input data and updates the corresponding record accordingly.\n\nAuthorized users may perform updates, which return the updated record upon success.\n\nErrors include invalid identifiers, unauthorized access, or invalid input data.","path":"/communityAi/member/comments/{commentId}/sentimentAnalyses/{id}","method":"put","summary":"Update an existing sentiment analysis record for a comment","description":"Modify an existing sentiment analysis linked to a comment, identified by commentId and sentiment analysis id.\n\nClients can update properties like sentiment classification (positive, neutral, negative), confidence score, and analysis timestamp.\n\nAppropriate authorization is needed. Validation errors and unauthorized attempts result in error responses.\n\nThe successful response includes the updated entity data.","parameters":[{"name":"commentId","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}},{"name":"id","description":"Unique identifier of the target sentiment analysis","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated sentiment analysis data","typeName":"ICommunityAiCommentSentimentAnalysis.IUpdate"},"responseBody":{"description":"Updated sentiment analysis record","typeName":"ICommunityAiCommentSentimentAnalysis"},"authorizationType":null,"authorizationRole":"member","name":"update"},{"specification":"This operation deletes a specific comment sentiment analysis record identified by its unique ID. It targets the 'community_ai_comment_sentiment_analyses' table in the Prisma schema, which stores historical sentiment analysis results for comments, including sentiment classification and AI confidence scores. Deleting a sentiment analysis entry by its ID removes the record permanently from the database. No request body is needed. The commentId and id path parameters ensure precise resource identification.","description":"Delete a sentiment analysis record for a particular comment by specifying the commentId and sentiment analysis ID.\n\nThis operation permanently removes the sentiment analysis record from the 'community_ai_comment_sentiment_analyses' table.\n\nOnly authorized users with suitable permissions can perform this deletion. Attempting to delete a non-existing record results in an error.\n\nParameters 'commentId' and 'id' correspond to the unique identifiers of the comment and its sentiment analysis entry respectively, both expressed as UUID strings.\n\nNo request body is required. Successful execution results in no content return.","summary":"Delete a comment sentiment analysis record by ID","parameters":[{"name":"commentId","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}},{"name":"id","description":"Unique identifier of the sentiment analysis entry","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"eraseSentimentAnalysis","path":"/communityAi/admin/comments/{commentId}/sentimentAnalyses/{id}","method":"delete"},{"specification":"This operation deletes a specific comment sentiment analysis record identified by its unique ID. It targets the 'community_ai_comment_sentiment_analyses' table in the Prisma schema, which stores historical sentiment analysis results for comments, including sentiment classification and AI confidence scores. Deleting a sentiment analysis entry by its ID removes the record permanently from the database. No request body is needed. The commentId and id path parameters ensure precise resource identification.","description":"Delete a sentiment analysis record for a particular comment by specifying the commentId and sentiment analysis ID.\n\nThis operation permanently removes the sentiment analysis record from the 'community_ai_comment_sentiment_analyses' table.\n\nOnly authorized users with suitable permissions can perform this deletion. Attempting to delete a non-existing record results in an error.\n\nParameters 'commentId' and 'id' correspond to the unique identifiers of the comment and its sentiment analysis entry respectively, both expressed as UUID strings.\n\nNo request body is required. Successful execution results in no content return.","summary":"Delete a comment sentiment analysis record by ID","parameters":[{"name":"commentId","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}},{"name":"id","description":"Unique identifier of the sentiment analysis entry","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"moderator","name":"eraseSentimentAnalysis","path":"/communityAi/moderator/comments/{commentId}/sentimentAnalyses/{id}","method":"delete"},{"specification":"This operation retrieves a paginated list of AI generated replies across comments and posts, using advanced filtering and sorting options. It operates on the 'community_ai_ai_generated_replies' table in the Prisma schema, which stores AI-generated replies with associated confidence scores, linked optionally to comments or posts. This list enables clients to access AI-generated response data for enhancing community interactions. The request body supports search criteria, pagination, and sorting parameters.","description":"Retrieve a filtered, sorted, and paginated list of AI-generated replies related to comments or posts in the community AI platform.\n\nSupports complex query operations including filtering on confidence scores, creation dates, and associated comment or post IDs.\n\nAccessible only to users with appropriate system roles.\n\nResponse contains a paginated collection of AI-generated replies with detailed metadata including reply text and confidence score.\n\nRequest body carries search parameters facilitating customized queries.","summary":"List AI-generated replies with filtering and pagination","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for AI-generated replies","typeName":"ICommunityAiAiGeneratedReplies.IRequest"},"responseBody":{"description":"Paginated list of AI-generated replies matching criteria","typeName":"IPageICommunityAiAiGeneratedReplies"},"authorizationType":null,"authorizationRole":"admin","name":"indexAiGeneratedReplies","path":"/communityAi/admin/aiCommenting/aiGeneratedReplies","method":"patch"},{"specification":"This operation retrieves a paginated list of AI generated replies across comments and posts, using advanced filtering and sorting options. It operates on the 'community_ai_ai_generated_replies' table in the Prisma schema, which stores AI-generated replies with associated confidence scores, linked optionally to comments or posts. This list enables clients to access AI-generated response data for enhancing community interactions. The request body supports search criteria, pagination, and sorting parameters.","description":"Retrieve a filtered, sorted, and paginated list of AI-generated replies related to comments or posts in the community AI platform.\n\nSupports complex query operations including filtering on confidence scores, creation dates, and associated comment or post IDs.\n\nAccessible only to users with appropriate system roles.\n\nResponse contains a paginated collection of AI-generated replies with detailed metadata including reply text and confidence score.\n\nRequest body carries search parameters facilitating customized queries.","summary":"List AI-generated replies with filtering and pagination","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for AI-generated replies","typeName":"ICommunityAiAiGeneratedReplies.IRequest"},"responseBody":{"description":"Paginated list of AI-generated replies matching criteria","typeName":"IPageICommunityAiAiGeneratedReplies"},"authorizationType":null,"authorizationRole":"moderator","name":"indexAiGeneratedReplies","path":"/communityAi/moderator/aiCommenting/aiGeneratedReplies","method":"patch"},{"specification":"This operation retrieves a paginated list of AI generated replies across comments and posts, using advanced filtering and sorting options. It operates on the 'community_ai_ai_generated_replies' table in the Prisma schema, which stores AI-generated replies with associated confidence scores, linked optionally to comments or posts. This list enables clients to access AI-generated response data for enhancing community interactions. The request body supports search criteria, pagination, and sorting parameters.","description":"Retrieve a filtered, sorted, and paginated list of AI-generated replies related to comments or posts in the community AI platform.\n\nSupports complex query operations including filtering on confidence scores, creation dates, and associated comment or post IDs.\n\nAccessible only to users with appropriate system roles.\n\nResponse contains a paginated collection of AI-generated replies with detailed metadata including reply text and confidence score.\n\nRequest body carries search parameters facilitating customized queries.","summary":"List AI-generated replies with filtering and pagination","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for AI-generated replies","typeName":"ICommunityAiAiGeneratedReplies.IRequest"},"responseBody":{"description":"Paginated list of AI-generated replies matching criteria","typeName":"IPageICommunityAiAiGeneratedReplies"},"authorizationType":null,"authorizationRole":"member","name":"indexAiGeneratedReplies","path":"/communityAi/member/aiCommenting/aiGeneratedReplies","method":"patch"},{"specification":"This operation retrieves a single AI-generated reply by its unique identifier from the 'community_ai_ai_generated_replies' table in the Prisma schema. The table holds AI replies linked optionally to comments or posts, with reply text and confidence scores. This API provides detailed information about a specific AI-generated reply entity.","description":"Retrieve detailed information of a specific AI-generated reply by ID.\n\nThe response includes the reply content, confidence score, and associated comment or post references.\n\nAccess is restricted to authorized users including admins, moderators, and members.\n\nThe 'id' path parameter identifies the target AI-generated reply.","summary":"Retrieve a specific AI-generated reply by ID","parameters":[{"name":"id","description":"Unique identifier of the AI-generated reply","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed AI-generated reply entity","typeName":"ICommunityAiAiGeneratedReplies"},"authorizationType":null,"authorizationRole":"admin","name":"atAiGeneratedReplies","path":"/communityAi/admin/aiCommenting/aiGeneratedReplies/{id}","method":"get"},{"specification":"This operation retrieves a single AI-generated reply by its unique identifier from the 'community_ai_ai_generated_replies' table in the Prisma schema. The table holds AI replies linked optionally to comments or posts, with reply text and confidence scores. This API provides detailed information about a specific AI-generated reply entity.","description":"Retrieve detailed information of a specific AI-generated reply by ID.\n\nThe response includes the reply content, confidence score, and associated comment or post references.\n\nAccess is restricted to authorized users including admins, moderators, and members.\n\nThe 'id' path parameter identifies the target AI-generated reply.","summary":"Retrieve a specific AI-generated reply by ID","parameters":[{"name":"id","description":"Unique identifier of the AI-generated reply","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed AI-generated reply entity","typeName":"ICommunityAiAiGeneratedReplies"},"authorizationType":null,"authorizationRole":"moderator","name":"atAiGeneratedReplies","path":"/communityAi/moderator/aiCommenting/aiGeneratedReplies/{id}","method":"get"},{"specification":"This operation retrieves a single AI-generated reply by its unique identifier from the 'community_ai_ai_generated_replies' table in the Prisma schema. The table holds AI replies linked optionally to comments or posts, with reply text and confidence scores. This API provides detailed information about a specific AI-generated reply entity.","description":"Retrieve detailed information of a specific AI-generated reply by ID.\n\nThe response includes the reply content, confidence score, and associated comment or post references.\n\nAccess is restricted to authorized users including admins, moderators, and members.\n\nThe 'id' path parameter identifies the target AI-generated reply.","summary":"Retrieve a specific AI-generated reply by ID","parameters":[{"name":"id","description":"Unique identifier of the AI-generated reply","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed AI-generated reply entity","typeName":"ICommunityAiAiGeneratedReplies"},"authorizationType":null,"authorizationRole":"member","name":"atAiGeneratedReplies","path":"/communityAi/member/aiCommenting/aiGeneratedReplies/{id}","method":"get"},{"specification":"This operation creates a new AI-generated reply entity in the 'community_ai_ai_generated_replies' table reflecting AI-generated content enhancements for comments or posts. It accepts detailed attributes including reply text, confidence score, and optional associations with comments or posts. The creation inserts a record representing an AI-generated reply for AI-assisted conversation enhancement.","description":"Create a new AI-generated reply linked optionally to a comment or post.\n\nThe request body must specify the reply content, confidence score, and optionally reference the associated comment or post.\n\nOnly authorized users including admins, moderators, and members can create these entries.\n\nThe response returns the created AI-generated reply entity, including timestamps and generated ID.","summary":"Create a new AI-generated reply","parameters":[],"requestBody":{"description":"Creation information for AI-generated reply","typeName":"ICommunityAiAiGeneratedReplies.ICreate"},"responseBody":{"description":"Created AI-generated reply entity","typeName":"ICommunityAiAiGeneratedReplies"},"authorizationType":null,"authorizationRole":"admin","name":"createAiGeneratedReply","path":"/communityAi/admin/aiCommenting/aiGeneratedReplies","method":"post"},{"specification":"This operation creates a new AI-generated reply entity in the 'community_ai_ai_generated_replies' table reflecting AI-generated content enhancements for comments or posts. It accepts detailed attributes including reply text, confidence score, and optional associations with comments or posts. The creation inserts a record representing an AI-generated reply for AI-assisted conversation enhancement.","description":"Create a new AI-generated reply linked optionally to a comment or post.\n\nThe request body must specify the reply content, confidence score, and optionally reference the associated comment or post.\n\nOnly authorized users including admins, moderators, and members can create these entries.\n\nThe response returns the created AI-generated reply entity, including timestamps and generated ID.","summary":"Create a new AI-generated reply","parameters":[],"requestBody":{"description":"Creation information for AI-generated reply","typeName":"ICommunityAiAiGeneratedReplies.ICreate"},"responseBody":{"description":"Created AI-generated reply entity","typeName":"ICommunityAiAiGeneratedReplies"},"authorizationType":null,"authorizationRole":"moderator","name":"createAiGeneratedReply","path":"/communityAi/moderator/aiCommenting/aiGeneratedReplies","method":"post"},{"specification":"This operation creates a new AI-generated reply entity in the 'community_ai_ai_generated_replies' table reflecting AI-generated content enhancements for comments or posts. It accepts detailed attributes including reply text, confidence score, and optional associations with comments or posts. The creation inserts a record representing an AI-generated reply for AI-assisted conversation enhancement.","description":"Create a new AI-generated reply linked optionally to a comment or post.\n\nThe request body must specify the reply content, confidence score, and optionally reference the associated comment or post.\n\nOnly authorized users including admins, moderators, and members can create these entries.\n\nThe response returns the created AI-generated reply entity, including timestamps and generated ID.","summary":"Create a new AI-generated reply","parameters":[],"requestBody":{"description":"Creation information for AI-generated reply","typeName":"ICommunityAiAiGeneratedReplies.ICreate"},"responseBody":{"description":"Created AI-generated reply entity","typeName":"ICommunityAiAiGeneratedReplies"},"authorizationType":null,"authorizationRole":"member","name":"createAiGeneratedReply","path":"/communityAi/member/aiCommenting/aiGeneratedReplies","method":"post"},{"specification":"The operation handles updating an existing AI-generated reply entity within the community AI platform. It is associated with the `community_ai_ai_generated_replies` table in the Prisma schema, which stores AI-generated replies linked optionally to either comments or posts. The operation expects the reply's unique ID as a path parameter and an update payload conforming to `ICommunityAiAiGeneratedReplies.IUpdate`. The update may modify reply text, confidence score, or soft deletion timestamp. Proper validation of the UUID format for the ID parameter is performed. This operation supports authorized users such as admins, moderators, and members to update AI-generated replies for content enhancement or correction.","description":"This operation updates the AI-generated reply identified by the given unique ID in the community AI system. Each AI-generated reply corresponds to a text reply created by an AI model linked optionally to either a comment or a post. The update allows modification of the reply text, confidence score, and soft deletion timestamp.\n\nAuthorization is required for admin, moderator, or member roles, reflecting the ability of these users to manage AI-assisted content contributions.\n\nThe operation validates that the identifier is a valid UUID matching an existing AI-generated reply. The input update data is validated against the schema ensuring all fields adhere to expected constraints and types.\n\nOn success, the updated AI-generated reply entity is returned, reflecting changes to text or status. Any invalid input or authorization error will result in appropriate error responses.\n\nThis endpoint interacts with the `community_ai_ai_generated_replies` Prisma table, preserving relations with related comments and posts, enabling content improvement workflows driven by AI assistance.","summary":"Update an existing AI-generated reply","parameters":[{"name":"id","in":"path","description":"Unique identifier for the AI-generated reply to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data for updating AI-generated reply","typeName":"ICommunityAiAiGeneratedReplies.IUpdate"},"responseBody":{"description":"Updated AI-generated reply","typeName":"ICommunityAiAiGeneratedReplies"},"authorizationType":null,"authorizationRole":"admin","name":"updateAiGeneratedReply","path":"/communityAi/admin/aiCommenting/aiGeneratedReplies/{id}","method":"put"},{"specification":"The operation handles updating an existing AI-generated reply entity within the community AI platform. It is associated with the `community_ai_ai_generated_replies` table in the Prisma schema, which stores AI-generated replies linked optionally to either comments or posts. The operation expects the reply's unique ID as a path parameter and an update payload conforming to `ICommunityAiAiGeneratedReplies.IUpdate`. The update may modify reply text, confidence score, or soft deletion timestamp. Proper validation of the UUID format for the ID parameter is performed. This operation supports authorized users such as admins, moderators, and members to update AI-generated replies for content enhancement or correction.","description":"This operation updates the AI-generated reply identified by the given unique ID in the community AI system. Each AI-generated reply corresponds to a text reply created by an AI model linked optionally to either a comment or a post. The update allows modification of the reply text, confidence score, and soft deletion timestamp.\n\nAuthorization is required for admin, moderator, or member roles, reflecting the ability of these users to manage AI-assisted content contributions.\n\nThe operation validates that the identifier is a valid UUID matching an existing AI-generated reply. The input update data is validated against the schema ensuring all fields adhere to expected constraints and types.\n\nOn success, the updated AI-generated reply entity is returned, reflecting changes to text or status. Any invalid input or authorization error will result in appropriate error responses.\n\nThis endpoint interacts with the `community_ai_ai_generated_replies` Prisma table, preserving relations with related comments and posts, enabling content improvement workflows driven by AI assistance.","summary":"Update an existing AI-generated reply","parameters":[{"name":"id","in":"path","description":"Unique identifier for the AI-generated reply to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data for updating AI-generated reply","typeName":"ICommunityAiAiGeneratedReplies.IUpdate"},"responseBody":{"description":"Updated AI-generated reply","typeName":"ICommunityAiAiGeneratedReplies"},"authorizationType":null,"authorizationRole":"moderator","name":"updateAiGeneratedReply","path":"/communityAi/moderator/aiCommenting/aiGeneratedReplies/{id}","method":"put"},{"specification":"The operation handles updating an existing AI-generated reply entity within the community AI platform. It is associated with the `community_ai_ai_generated_replies` table in the Prisma schema, which stores AI-generated replies linked optionally to either comments or posts. The operation expects the reply's unique ID as a path parameter and an update payload conforming to `ICommunityAiAiGeneratedReplies.IUpdate`. The update may modify reply text, confidence score, or soft deletion timestamp. Proper validation of the UUID format for the ID parameter is performed. This operation supports authorized users such as admins, moderators, and members to update AI-generated replies for content enhancement or correction.","description":"This operation updates the AI-generated reply identified by the given unique ID in the community AI system. Each AI-generated reply corresponds to a text reply created by an AI model linked optionally to either a comment or a post. The update allows modification of the reply text, confidence score, and soft deletion timestamp.\n\nAuthorization is required for admin, moderator, or member roles, reflecting the ability of these users to manage AI-assisted content contributions.\n\nThe operation validates that the identifier is a valid UUID matching an existing AI-generated reply. The input update data is validated against the schema ensuring all fields adhere to expected constraints and types.\n\nOn success, the updated AI-generated reply entity is returned, reflecting changes to text or status. Any invalid input or authorization error will result in appropriate error responses.\n\nThis endpoint interacts with the `community_ai_ai_generated_replies` Prisma table, preserving relations with related comments and posts, enabling content improvement workflows driven by AI assistance.","summary":"Update an existing AI-generated reply","parameters":[{"name":"id","in":"path","description":"Unique identifier for the AI-generated reply to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data for updating AI-generated reply","typeName":"ICommunityAiAiGeneratedReplies.IUpdate"},"responseBody":{"description":"Updated AI-generated reply","typeName":"ICommunityAiAiGeneratedReplies"},"authorizationType":null,"authorizationRole":"member","name":"updateAiGeneratedReply","path":"/communityAi/member/aiCommenting/aiGeneratedReplies/{id}","method":"put"},{"specification":"This operation permanently removes the AI-generated reply identified by the given unique ID from the community AI platform database. It directly deletes the record from the `community_ai_ai_generated_replies` table as there is no soft delete field for logical deletion. The operation requires a valid UUID path parameter and is accessible by admins, moderators, and members for content management purposes. No request body is needed, and no response body is returned upon successful deletion.","description":"This operation deletes the AI-generated reply specified by the unique ID in the community AI platform. AI-generated replies are text replies created by AI models in response to posts or comments to enhance user conversations.\n\nSince the `community_ai_ai_generated_replies` model does not include a soft delete timestamp, this operation performs a hard delete, permanently removing the record from the database.\n\nRemoval actions require authorization of admin, moderator, or member roles, enabling these users to manage AI-generated content data.\n\nNo request body is required. On success, no content is returned. Errors for invalid IDs or unauthorized users are handled accordingly.\n\nUnderlying Prisma table is `community_ai_ai_generated_replies`.\n","summary":"Delete an AI-generated reply","parameters":[{"name":"id","in":"path","description":"Unique identifier for the AI-generated reply to remove","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"eraseAiGeneratedReply","path":"/communityAi/admin/aiCommenting/aiGeneratedReplies/{id}","method":"delete"},{"specification":"This operation permanently removes the AI-generated reply identified by the given unique ID from the community AI platform database. It directly deletes the record from the `community_ai_ai_generated_replies` table as there is no soft delete field for logical deletion. The operation requires a valid UUID path parameter and is accessible by admins, moderators, and members for content management purposes. No request body is needed, and no response body is returned upon successful deletion.","description":"This operation deletes the AI-generated reply specified by the unique ID in the community AI platform. AI-generated replies are text replies created by AI models in response to posts or comments to enhance user conversations.\n\nSince the `community_ai_ai_generated_replies` model does not include a soft delete timestamp, this operation performs a hard delete, permanently removing the record from the database.\n\nRemoval actions require authorization of admin, moderator, or member roles, enabling these users to manage AI-generated content data.\n\nNo request body is required. On success, no content is returned. Errors for invalid IDs or unauthorized users are handled accordingly.\n\nUnderlying Prisma table is `community_ai_ai_generated_replies`.\n","summary":"Delete an AI-generated reply","parameters":[{"name":"id","in":"path","description":"Unique identifier for the AI-generated reply to remove","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"moderator","name":"eraseAiGeneratedReply","path":"/communityAi/moderator/aiCommenting/aiGeneratedReplies/{id}","method":"delete"},{"specification":"This operation permanently removes the AI-generated reply identified by the given unique ID from the community AI platform database. It directly deletes the record from the `community_ai_ai_generated_replies` table as there is no soft delete field for logical deletion. The operation requires a valid UUID path parameter and is accessible by admins, moderators, and members for content management purposes. No request body is needed, and no response body is returned upon successful deletion.","description":"This operation deletes the AI-generated reply specified by the unique ID in the community AI platform. AI-generated replies are text replies created by AI models in response to posts or comments to enhance user conversations.\n\nSince the `community_ai_ai_generated_replies` model does not include a soft delete timestamp, this operation performs a hard delete, permanently removing the record from the database.\n\nRemoval actions require authorization of admin, moderator, or member roles, enabling these users to manage AI-generated content data.\n\nNo request body is required. On success, no content is returned. Errors for invalid IDs or unauthorized users are handled accordingly.\n\nUnderlying Prisma table is `community_ai_ai_generated_replies`.\n","summary":"Delete an AI-generated reply","parameters":[{"name":"id","in":"path","description":"Unique identifier for the AI-generated reply to remove","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"eraseAiGeneratedReply","path":"/communityAi/member/aiCommenting/aiGeneratedReplies/{id}","method":"delete"},{"specification":"Retrieves a paginated and searchable list of fact-check claims extracted from user posts and comments within the community AI platform. This operation queries the `community_ai_factcheck_claims` table, which stores textual claims flagged for verification. It supports complex search filters, sorting, and pagination via the request body. The operation requires no path parameters and provides a response body containing paginated summary data of fact-check claims. Authorization requires members, admins, or moderators roles to allow access to fact-check data management and review.","description":"This API operation fetches a filtered, paginated list of fact-check claims that have been extracted from posts or comments. Each claim represents a statement of fact that the AI system or users wish to verify.\n\nThe operation accepts complex search criteria including claim text filters, creation date ranges, and claim status. It returns paginated results with summary-level details to facilitate review and management.\n\nAccess to this endpoint is authorized for members, moderators, and admins, reflecting the collaborative nature of content verification and fact-check management.\n\nThe result structure complies with `IPageICommunityAiFactcheckClaims.ISummary` which includes pagination details and summarized claim information.\n\nThe operation is firmly tied to the `community_ai_factcheck_claims` Prisma table, the central repository for claims awaiting verification or under investigation.\n","summary":"Search and retrieve paginated fact-check claims","parameters":[],"requestBody":{"description":"Search and filter criteria for fact-check claims","typeName":"ICommunityAiFactcheckClaims.IRequest"},"responseBody":{"description":"Paginated list of fact-check claim summaries","typeName":"IPageICommunityAiFactcheckClaims.ISummary"},"authorizationType":null,"authorizationRole":"member","name":"searchFactcheckClaims","path":"/communityAi/member/factcheckClaims","method":"patch"},{"specification":"Retrieves a paginated and searchable list of fact-check claims extracted from user posts and comments within the community AI platform. This operation queries the `community_ai_factcheck_claims` table, which stores textual claims flagged for verification. It supports complex search filters, sorting, and pagination via the request body. The operation requires no path parameters and provides a response body containing paginated summary data of fact-check claims. Authorization requires members, admins, or moderators roles to allow access to fact-check data management and review.","description":"This API operation fetches a filtered, paginated list of fact-check claims that have been extracted from posts or comments. Each claim represents a statement of fact that the AI system or users wish to verify.\n\nThe operation accepts complex search criteria including claim text filters, creation date ranges, and claim status. It returns paginated results with summary-level details to facilitate review and management.\n\nAccess to this endpoint is authorized for members, moderators, and admins, reflecting the collaborative nature of content verification and fact-check management.\n\nThe result structure complies with `IPageICommunityAiFactcheckClaims.ISummary` which includes pagination details and summarized claim information.\n\nThe operation is firmly tied to the `community_ai_factcheck_claims` Prisma table, the central repository for claims awaiting verification or under investigation.\n","summary":"Search and retrieve paginated fact-check claims","parameters":[],"requestBody":{"description":"Search and filter criteria for fact-check claims","typeName":"ICommunityAiFactcheckClaims.IRequest"},"responseBody":{"description":"Paginated list of fact-check claim summaries","typeName":"IPageICommunityAiFactcheckClaims.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"searchFactcheckClaims","path":"/communityAi/admin/factcheckClaims","method":"patch"},{"specification":"Retrieves a paginated and searchable list of fact-check claims extracted from user posts and comments within the community AI platform. This operation queries the `community_ai_factcheck_claims` table, which stores textual claims flagged for verification. It supports complex search filters, sorting, and pagination via the request body. The operation requires no path parameters and provides a response body containing paginated summary data of fact-check claims. Authorization requires members, admins, or moderators roles to allow access to fact-check data management and review.","description":"This API operation fetches a filtered, paginated list of fact-check claims that have been extracted from posts or comments. Each claim represents a statement of fact that the AI system or users wish to verify.\n\nThe operation accepts complex search criteria including claim text filters, creation date ranges, and claim status. It returns paginated results with summary-level details to facilitate review and management.\n\nAccess to this endpoint is authorized for members, moderators, and admins, reflecting the collaborative nature of content verification and fact-check management.\n\nThe result structure complies with `IPageICommunityAiFactcheckClaims.ISummary` which includes pagination details and summarized claim information.\n\nThe operation is firmly tied to the `community_ai_factcheck_claims` Prisma table, the central repository for claims awaiting verification or under investigation.\n","summary":"Search and retrieve paginated fact-check claims","parameters":[],"requestBody":{"description":"Search and filter criteria for fact-check claims","typeName":"ICommunityAiFactcheckClaims.IRequest"},"responseBody":{"description":"Paginated list of fact-check claim summaries","typeName":"IPageICommunityAiFactcheckClaims.ISummary"},"authorizationType":null,"authorizationRole":"moderator","name":"searchFactcheckClaims","path":"/communityAi/moderator/factcheckClaims","method":"patch"},{"specification":"Fetches detailed information about a specific fact-check claim by its unique identifier. This operation targets the `community_ai_factcheck_claims` table from the Prisma schema, returning all detailed fields related to the fact-check claim, including its associated post or comment references, claim text, timestamps, and soft deletion status. The valid UUID fact-check claim ID must be provided as a path parameter. Access is authorized for members, moderators, or admins. It returns a single fact-check claim entity adhering to the `ICommunityAiFactcheckClaims` schema.","description":"This operation retrieves comprehensive details of a fact-check claim identified by a unique ID. Each fact-check claim is a factual statement extracted from user-generated posts or comments that requires verification.\n\nThe retrieved data includes claim text, timestamps, related post or comment IDs, and soft delete state if applicable.\n\nThis endpoint is accessible only to members, moderators, and admins, ensuring secure access to sensitive verification data.\n\nThe operation returns an entity conforming to the `ICommunityAiFactcheckClaims` schema.\n\nThe underlying data resides in the `community_ai_factcheck_claims` Prisma table within the system.\n","summary":"Retrieve fact-check claim details by ID","parameters":[{"name":"id","in":"path","description":"Unique identifier of the fact-check claim","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed fact-check claim information","typeName":"ICommunityAiFactcheckClaims"},"authorizationType":null,"authorizationRole":"member","name":"atFactcheckClaim","path":"/communityAi/member/factcheckClaims/{id}","method":"get"},{"specification":"Fetches detailed information about a specific fact-check claim by its unique identifier. This operation targets the `community_ai_factcheck_claims` table from the Prisma schema, returning all detailed fields related to the fact-check claim, including its associated post or comment references, claim text, timestamps, and soft deletion status. The valid UUID fact-check claim ID must be provided as a path parameter. Access is authorized for members, moderators, or admins. It returns a single fact-check claim entity adhering to the `ICommunityAiFactcheckClaims` schema.","description":"This operation retrieves comprehensive details of a fact-check claim identified by a unique ID. Each fact-check claim is a factual statement extracted from user-generated posts or comments that requires verification.\n\nThe retrieved data includes claim text, timestamps, related post or comment IDs, and soft delete state if applicable.\n\nThis endpoint is accessible only to members, moderators, and admins, ensuring secure access to sensitive verification data.\n\nThe operation returns an entity conforming to the `ICommunityAiFactcheckClaims` schema.\n\nThe underlying data resides in the `community_ai_factcheck_claims` Prisma table within the system.\n","summary":"Retrieve fact-check claim details by ID","parameters":[{"name":"id","in":"path","description":"Unique identifier of the fact-check claim","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed fact-check claim information","typeName":"ICommunityAiFactcheckClaims"},"authorizationType":null,"authorizationRole":"admin","name":"atFactcheckClaim","path":"/communityAi/admin/factcheckClaims/{id}","method":"get"},{"specification":"Fetches detailed information about a specific fact-check claim by its unique identifier. This operation targets the `community_ai_factcheck_claims` table from the Prisma schema, returning all detailed fields related to the fact-check claim, including its associated post or comment references, claim text, timestamps, and soft deletion status. The valid UUID fact-check claim ID must be provided as a path parameter. Access is authorized for members, moderators, or admins. It returns a single fact-check claim entity adhering to the `ICommunityAiFactcheckClaims` schema.","description":"This operation retrieves comprehensive details of a fact-check claim identified by a unique ID. Each fact-check claim is a factual statement extracted from user-generated posts or comments that requires verification.\n\nThe retrieved data includes claim text, timestamps, related post or comment IDs, and soft delete state if applicable.\n\nThis endpoint is accessible only to members, moderators, and admins, ensuring secure access to sensitive verification data.\n\nThe operation returns an entity conforming to the `ICommunityAiFactcheckClaims` schema.\n\nThe underlying data resides in the `community_ai_factcheck_claims` Prisma table within the system.\n","summary":"Retrieve fact-check claim details by ID","parameters":[{"name":"id","in":"path","description":"Unique identifier of the fact-check claim","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed fact-check claim information","typeName":"ICommunityAiFactcheckClaims"},"authorizationType":null,"authorizationRole":"moderator","name":"atFactcheckClaim","path":"/communityAi/moderator/factcheckClaims/{id}","method":"get"},{"specification":"This operation creates a new factcheck claim in the communityAi platform. It accepts claim content derived from a post or comment and persists it to the community_ai_factcheck_claims table. This table stores extracted factual claims used by the AI fact-check workflow to verify the accuracy of user content submitted in posts and comments. The operation validates required fields such as claim text and optional references to the source post or comment IDs. This creation API enables members or system processes to add claims for subsequent verification and flagging workflows.","description":"Creates a new factual claim for AI factchecking linked optionally to a post or a comment. This operation validates required claim data such as the claim text and the association to source content. It persists the claim in the community_ai_factcheck_claims table, which supports downstream factcheck result association and flagging.\n\nThis API is used by system components or members during content submission workflows to capture statements requiring factual validation.\n\nSecurity considerations ensure only authorized users or processes can create claims. Claim uniqueness is enforced on claim text within each content source.\n\nErrors related to missing or invalid claim text are handled with appropriate client error responses. Referential integrity enforces valid post or comment IDs.\n\nThe factcheck claim creation integrates tightly with the AI factcheck results and flags endpoints for a complete factcheck processing cycle.","summary":"Create a new factcheck claim","parameters":[],"requestBody":{"description":"Creation info for a new factcheck claim","typeName":"ICommunityAiFactcheckClaim.ICreate"},"responseBody":{"description":"Created factcheck claim information","typeName":"ICommunityAiFactcheckClaim"},"authorizationType":null,"authorizationRole":"member","name":"createFactcheckClaim","path":"/communityAi/member/factcheckClaims","method":"post"},{"specification":"This operation updates an existing factcheck claim identified by its unique ID. It modifies claim data such as the claim text and optionally the linked post or comment references. The operation targets the community_ai_factcheck_claims table and ensures request integrity by verifying the claim ID in the path parameter. This update API supports claim correction or additional annotation by authorized users who manage factcheck claim data.\n\nThe operation validates that the claim exists and that updated fields conform to constraints such as string length and referential integrity. It handles errors for missing claim, invalid data, or unauthorized access.\n\nThis update API is part of the overall AI factcheck lifecycle, linking claims to verification results and flags.","description":"Update an existing factcheck claim identified by its ID, allowing modification of claim text or source references. This operation performs validation, enforces referential integrity, and updates the community_ai_factcheck_claims table record.\n\nThis API is intended for authorized users to maintain accuracy and metadata on factual claims collected by the system.\n\nErrors for non-existent IDs or invalid data are managed with appropriate status codes and messages.\n\nRelated factcheck results and flagging workflows are indirectly affected by claim updates.","summary":"Update factcheck claim","parameters":[{"name":"id","description":"Unique ID of the factcheck claim to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update info for the factcheck claim","typeName":"ICommunityAiFactcheckClaim.IUpdate"},"responseBody":{"description":"Updated factcheck claim information","typeName":"ICommunityAiFactcheckClaim"},"authorizationType":null,"authorizationRole":"member","name":"updateFactcheckClaim","path":"/communityAi/member/factcheckClaims/{id}","method":"put"},{"specification":"This operation permanently removes a factcheck claim from the system by its unique ID. It operates on the community_ai_factcheck_claims table and enforces access control to ensure only authorized users perform deletions. Since the schema supports soft deletion via a nullable deleted_at field, this deletion operation implements a hard deletion, fully removing the record from the database.\n\nThis erase API facilitates administrative or cleanup operations on claim data no longer needed or erroneous. It also triggers cascade deletion of related factcheck results and flags as per foreign key constraints.\n\nErrors for non-existent claim IDs or unauthorized requests are handled with appropriate status codes. This removal is irreversible.\n\nThe operation is critical for maintaining data integrity and compliance with data retention policies.","description":"Permanently deletes the factcheck claim specified by its unique ID. This action removes the record and all dependent entities from the database, ensuring no trace remains.\n\nUse with caution as this operation is irreversible. Authorization is restricted to prevent accidental data loss.\n\nThis operation enforces integrity by removing all associated factcheck results and flags linked to the claim.\n\nErrors for invalid or unauthorized deletion requests will be returned with descriptive messages.","summary":"Delete factcheck claim","parameters":[{"name":"id","description":"Unique ID of the factcheck claim to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"eraseFactcheckClaim","path":"/communityAi/member/factcheckClaims/{id}","method":"delete"},{"specification":"Retrieves a paginated list of AI factcheck verification results from the communityAi system. This operation queries the community_ai_factcheck_results table and supports search, filtering, paging, and sorting parameters encapsulated in the request body. Results include detailed verification data about claims linked to posts or comments, verification bool status, confidence scores, and source URLs.\n\nThe response supports efficient review and analysis of factcheck outcomes to inform moderation and content display rules. Security measures limit access to authorized users.\n\nThis API works in conjunction with factcheck claims and flags to provide a complete factcheck audit trail and user-facing insight.","description":"Lists AI factcheck verification results with pagination, filtering, and sorting options for moderation and display purposes.\n\nSupports efficient retrieval of large datasets through request params defining page size, filters, and sort order.\n\nSecurity rules ensure only authorized users access claim verification data.\n\nIntegrates with the factcheck claims and flags management APIs to deliver an end-to-end factcheck data management solution.","summary":"List factcheck verification results","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for factcheck results","typeName":"ICommunityAiFactcheckResult.IRequest"},"responseBody":{"description":"Paginated list of factcheck verification results","typeName":"IPageICommunityAiFactcheckResult"},"authorizationType":null,"authorizationRole":"member","name":"indexFactcheckResult","path":"/communityAi/member/factcheckResults","method":"patch"},{"specification":"This operation retrieves detailed information of a single AI factcheck result by its unique ID. It interacts with the community_ai_factcheck_results table in the Prisma schema, which stores verification results for factual claims extracted from posts or comments. The API enables clients to fetch verification status (true or false), confidence score, source URL, and timestamps for a specific factcheck result. The ID parameter uniquely identifies the factcheck result record. Security considerations include restricting access to authorized users with proper roles. This data is essential for displaying comprehensive fact-check outcomes alongside user-generated content.","description":"Retrieve detailed information about a specific AI factcheck result using its unique identifier.\n\nThis API accesses the community_ai_factcheck_results table, which holds records of fact-checking results linked to extracted factual claims from posts and comments. Each factcheck result provides verification status, confidence scores, and source references.\n\nSecurity:\nAccess to this endpoint requires appropriate authorization roles to ensure only permitted users can view factcheck results, protecting the integrity and privacy of verification data.\n\nValidation:\nThe ID path parameter must be a valid UUID referencing an existing factcheck result.\n\nRelated operations:\n- The list of factcheck flags can be queried to identify flagged content.\n- Factcheck claims and flags have related operations for deeper investigation.\n\nExpected behavior:\n- Returns 404 if the ID does not exist.\n- Returns the full factcheck result entity if found.","summary":"Retrieve a specific AI factcheck result by ID","parameters":[{"name":"id","description":"Unique identifier of the AI factcheck result","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed AI factcheck result information","typeName":"ICommunityAiFactcheckResult"},"authorizationType":null,"authorizationRole":"member","path":"/communityAi/member/factcheckResults/{id}","method":"get","name":"at"},{"specification":"This operation retrieves a filtered, paginated list of AI factcheck flags. It operates on the community_ai_factcheck_flags Prisma table, which stores flags indicating potential misinformation or issues raised by AI fact-checking. Clients can use this endpoint to search, filter, and paginate flags based on criteria such as flag type, status, reported member, and associated content. The PATCH method is used due to the complexity of filtering parameters. This API supports role-based access to ensure that only users with appropriate permissions can access sensitive flag data. The results aid moderators and admins in assessing flagged content for review and action.","description":"Retrieve a filtered, paginated list of AI factcheck flags.\n\nThis API interacts with the community_ai_factcheck_flags table, which holds records of flags signaling potential misinformation or issues detected by AI fact-check processes. Flags may reference posts, comments, the related factual claim, and the reporting member.\n\nSecurity:\nAccess is restricted to authorized roles to ensure sensitive moderation data is protected.\n\nValidation:\nRequest body may contain filtering criteria including flag types, statuses, date ranges, and reporter identifiers.\n\nRelated operations:\n- Detail retrieval of individual factcheck flags supports in-depth investigation.\n- Related content flags and user reports APIs enable broader moderation workflows.\n\nExpected behavior:\n- Supports pagination parameters for scalable queries.\n- Allows sorting and complex filtering.\n- Returns responses with lists of factcheck flag summaries matching criteria.","summary":"Search and retrieve paginated AI factcheck flags","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for factcheck flag filtering","typeName":"ICommunityAiFactcheckFlag.IRequest"},"responseBody":{"description":"Paginated list of AI factcheck flags matching criteria","typeName":"IPageICommunityAiFactcheckFlag.ISummary"},"authorizationType":null,"authorizationRole":"moderator","path":"/communityAi/moderator/factcheckFlags","method":"patch","name":"index"},{"specification":"This operation retrieves a filtered, paginated list of AI factcheck flags. It operates on the community_ai_factcheck_flags Prisma table, which stores flags indicating potential misinformation or issues raised by AI fact-checking. Clients can use this endpoint to search, filter, and paginate flags based on criteria such as flag type, status, reported member, and associated content. The PATCH method is used due to the complexity of filtering parameters. This API supports role-based access to ensure that only users with appropriate permissions can access sensitive flag data. The results aid moderators and admins in assessing flagged content for review and action.","description":"Retrieve a filtered, paginated list of AI factcheck flags.\n\nThis API interacts with the community_ai_factcheck_flags table, which holds records of flags signaling potential misinformation or issues detected by AI fact-check processes. Flags may reference posts, comments, the related factual claim, and the reporting member.\n\nSecurity:\nAccess is restricted to authorized roles to ensure sensitive moderation data is protected.\n\nValidation:\nRequest body may contain filtering criteria including flag types, statuses, date ranges, and reporter identifiers.\n\nRelated operations:\n- Detail retrieval of individual factcheck flags supports in-depth investigation.\n- Related content flags and user reports APIs enable broader moderation workflows.\n\nExpected behavior:\n- Supports pagination parameters for scalable queries.\n- Allows sorting and complex filtering.\n- Returns responses with lists of factcheck flag summaries matching criteria.","summary":"Search and retrieve paginated AI factcheck flags","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for factcheck flag filtering","typeName":"ICommunityAiFactcheckFlag.IRequest"},"responseBody":{"description":"Paginated list of AI factcheck flags matching criteria","typeName":"IPageICommunityAiFactcheckFlag.ISummary"},"authorizationType":null,"authorizationRole":"admin","path":"/communityAi/admin/factcheckFlags","method":"patch","name":"index"},{"specification":"This operation retrieves a specific AI factcheck flag by unique ID. It operates on the community_ai_factcheck_flags table, providing detailed flag data including references to flagged posts or comments, flag type and status, reporting member, and timestamps. The ID path parameter uniquely identifies the flag record. Access is restricted to authorized roles such as moderators and admins due to the sensitive nature of flagged content. This endpoint is vital for moderators to review flagged misinformation cases and take appropriate action.","description":"Retrieve detailed information about a specific AI factcheck flag using its unique identifier.\n\nThis API accesses the community_ai_factcheck_flags table, storing flags raised by AI fact-check processes indicating potentially false or misleading content. Flags may be linked to posts, comments, and the reporting member.\n\nSecurity:\nOnly authorized roles such as moderators and admins may access this endpoint to maintain confidentiality and proper handling of flagged content.\n\nValidation:\nThe ID parameter must be a valid UUID corresponding to an existing factcheck flag.\n\nRelated operations:\n- The list endpoint offers filtered and paginated access to multiple flags for moderation.\n- Content flag APIs provide additional context on user-generated flags.\n\nExpected behavior:\n- Returns 404 if the ID does not exist.\n- Returns full detailed flag information if found.","summary":"Retrieve a specific AI factcheck flag by ID","parameters":[{"name":"id","description":"Unique identifier of the AI factcheck flag","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed AI factcheck flag information","typeName":"ICommunityAiFactcheckFlag"},"authorizationType":null,"authorizationRole":"moderator","path":"/communityAi/moderator/factcheckFlags/{id}","method":"get","name":"at"},{"specification":"This operation retrieves a specific AI factcheck flag by unique ID. It operates on the community_ai_factcheck_flags table, providing detailed flag data including references to flagged posts or comments, flag type and status, reporting member, and timestamps. The ID path parameter uniquely identifies the flag record. Access is restricted to authorized roles such as moderators and admins due to the sensitive nature of flagged content. This endpoint is vital for moderators to review flagged misinformation cases and take appropriate action.","description":"Retrieve detailed information about a specific AI factcheck flag using its unique identifier.\n\nThis API accesses the community_ai_factcheck_flags table, storing flags raised by AI fact-check processes indicating potentially false or misleading content. Flags may be linked to posts, comments, and the reporting member.\n\nSecurity:\nOnly authorized roles such as moderators and admins may access this endpoint to maintain confidentiality and proper handling of flagged content.\n\nValidation:\nThe ID parameter must be a valid UUID corresponding to an existing factcheck flag.\n\nRelated operations:\n- The list endpoint offers filtered and paginated access to multiple flags for moderation.\n- Content flag APIs provide additional context on user-generated flags.\n\nExpected behavior:\n- Returns 404 if the ID does not exist.\n- Returns full detailed flag information if found.","summary":"Retrieve a specific AI factcheck flag by ID","parameters":[{"name":"id","description":"Unique identifier of the AI factcheck flag","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed AI factcheck flag information","typeName":"ICommunityAiFactcheckFlag"},"authorizationType":null,"authorizationRole":"admin","path":"/communityAi/admin/factcheckFlags/{id}","method":"get","name":"at"},{"specification":"This operation retrieves a filtered, paginated list of user content flags. It operates on the community_ai_content_flags Prisma table, which stores flags raised by members for posts or comments indicating issues. This endpoint supports complex filtering, sorting, and pagination, thus uses PATCH with request body parameters. Role-based access controls ensure only authorized users such as moderators and admins can access flag data relevant for moderation purposes. The operation helps in moderation workflows by providing bulk flag data for reviews.","description":"Retrieve a filtered, paginated list of user content flags raised for posts and comments.\n\nThis API interacts with the community_ai_content_flags table, which stores flags members raise about community content. Flags link to posts, comments, and members who reported them.\n\nSecurity:\nAccess to this operation is restricted to authorized roles for content moderation.\n\nValidation:\nThe request body may specify filters such as status, reason, flagger member ID, and date intervals.\n\nRelated operations:\n- Individual content flag retrieval endpoints support investigation.\n- Related factcheck flag APIs complement moderation functions.\n\nExpected behavior:\n- Supports pagination and sorting parameters.\n- Returns responses with paginated lists of summary flag information.\n","summary":"Search and retrieve paginated user content flags","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for content flag filtering","typeName":"ICommunityAiContentFlag.IRequest"},"responseBody":{"description":"Paginated list of user content flags matching criteria","typeName":"IPageICommunityAiContentFlag.ISummary"},"authorizationType":null,"authorizationRole":"moderator","path":"/communityAi/moderator/contentFlags","method":"patch","name":"index"},{"specification":"This operation retrieves a filtered, paginated list of user content flags. It operates on the community_ai_content_flags Prisma table, which stores flags raised by members for posts or comments indicating issues. This endpoint supports complex filtering, sorting, and pagination, thus uses PATCH with request body parameters. Role-based access controls ensure only authorized users such as moderators and admins can access flag data relevant for moderation purposes. The operation helps in moderation workflows by providing bulk flag data for reviews.","description":"Retrieve a filtered, paginated list of user content flags raised for posts and comments.\n\nThis API interacts with the community_ai_content_flags table, which stores flags members raise about community content. Flags link to posts, comments, and members who reported them.\n\nSecurity:\nAccess to this operation is restricted to authorized roles for content moderation.\n\nValidation:\nThe request body may specify filters such as status, reason, flagger member ID, and date intervals.\n\nRelated operations:\n- Individual content flag retrieval endpoints support investigation.\n- Related factcheck flag APIs complement moderation functions.\n\nExpected behavior:\n- Supports pagination and sorting parameters.\n- Returns responses with paginated lists of summary flag information.\n","summary":"Search and retrieve paginated user content flags","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for content flag filtering","typeName":"ICommunityAiContentFlag.IRequest"},"responseBody":{"description":"Paginated list of user content flags matching criteria","typeName":"IPageICommunityAiContentFlag.ISummary"},"authorizationType":null,"authorizationRole":"admin","path":"/communityAi/admin/contentFlags","method":"patch","name":"index"},{"specification":"This operation retrieves the detailed information of a specific content flag by its unique identifier. It operates on the 'community_ai_content_flags' table in the Prisma database schema, which records member-raised flags about community content such as posts or comments. The content flag includes the flag's reason, current status, timestamps, and references to the flagged post, comment, and member who raised the flag. This endpoint allows authorized users to view the details of a content flag for moderation and audit purposes.","path":"/communityAi/moderator/contentFlags/{contentFlagId}","method":"get","summary":"Retrieve detailed content flag by ID","description":"Retrieve detailed information for a community content flag identified by the contentFlagId path parameter.\n\nThis operation fetches data from the 'community_ai_content_flags' table, which stores information about content flags raised by members, including the reason for flagging, status, and timestamps. The information helps moderators to understand the context and current state of the flag.\n\nSecurity considerations require that only authorized roles with moderation privileges can access this data to preserve privacy and prevent information leakage. The 'contentFlagId' path parameter must be a valid UUID representing the unique identifier of the target content flag.\n\nThe response provides all recorded properties of the content flag as defined in the Prisma schema, including related content references and audit timestamps. If the flag record does not exist, an appropriate error should be returned by the backend.\n\nRelated operations may include creating new flags, updating flag status, or deleting flags when resolved or dismissed.","parameters":[{"name":"contentFlagId","description":"Unique identifier of the content flag to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed content flag information","typeName":"ICommunityAiContentFlag"},"authorizationType":null,"authorizationRole":"moderator","name":"at"},{"specification":"This operation retrieves the detailed information of a specific content flag by its unique identifier. It operates on the 'community_ai_content_flags' table in the Prisma database schema, which records member-raised flags about community content such as posts or comments. The content flag includes the flag's reason, current status, timestamps, and references to the flagged post, comment, and member who raised the flag. This endpoint allows authorized users to view the details of a content flag for moderation and audit purposes.","path":"/communityAi/admin/contentFlags/{contentFlagId}","method":"get","summary":"Retrieve detailed content flag by ID","description":"Retrieve detailed information for a community content flag identified by the contentFlagId path parameter.\n\nThis operation fetches data from the 'community_ai_content_flags' table, which stores information about content flags raised by members, including the reason for flagging, status, and timestamps. The information helps moderators to understand the context and current state of the flag.\n\nSecurity considerations require that only authorized roles with moderation privileges can access this data to preserve privacy and prevent information leakage. The 'contentFlagId' path parameter must be a valid UUID representing the unique identifier of the target content flag.\n\nThe response provides all recorded properties of the content flag as defined in the Prisma schema, including related content references and audit timestamps. If the flag record does not exist, an appropriate error should be returned by the backend.\n\nRelated operations may include creating new flags, updating flag status, or deleting flags when resolved or dismissed.","parameters":[{"name":"contentFlagId","description":"Unique identifier of the content flag to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed content flag information","typeName":"ICommunityAiContentFlag"},"authorizationType":null,"authorizationRole":"admin","name":"at"},{"specification":"This operation creates a new content flag record in the 'community_ai_content_flags' Prisma table. It allows authenticated members to raise flags on specific posts or comments by specifying the reason and the content targeted. The system records the flag status, which initially should be set to a default value such as 'pending'. Flag creation requires validating the member identity and content references. This operation supports community moderation workflows where users report inappropriate or problematic content.","path":"/communityAi/member/contentFlags","method":"post","summary":"Create a new content flag raised by a member","description":"Create a new community content flag indicating a member-reported issue with a post or comment. The request body must contain the member ID raising the flag, the affected post or comment ID, the reason for the flag, and initial status.\n\nUpon creation, the system records timestamps and maintains references for auditability. The flag will enter the moderation process for review.\n\nSecurity measures require that only authenticated members can create content flags to ensure accountability and prevent abuse. Validation of the existence of targeted posts or comments is expected.\n\nRelated operations include retrieving flag details, updating flag statuses, and deleting flags upon resolution.","parameters":[],"requestBody":{"description":"Content flag creation payload","typeName":"ICommunityAiContentFlag.ICreate"},"responseBody":{"description":"Newly created content flag information","typeName":"ICommunityAiContentFlag"},"authorizationType":null,"authorizationRole":"member","name":"create"},{"specification":"This operation updates an existing content flag identified by its 'contentFlagId' path parameter in the 'community_ai_content_flags' Prisma table. It allows authorized roles to modify details such as the flag reason, status, and references to targeted posts or comments. The operation supports moderation workflows to update flag resolution status or reasons during review.\n\nThe updated flag record maintains audit timestamps and preserves data integrity. Input validation ensures only valid enumerated values for status and consistency of referenced content IDs.\n\nSecurity considerations restrict this operation to moderator and admin roles to prevent unauthorized manipulation of flags. Proper error handling for non-existent flags is expected.","path":"/communityAi/moderator/contentFlags/{contentFlagId}","method":"put","summary":"Update an existing content flag","description":"Update an existing community content flag identified by contentFlagId. The request body should provide updated properties like reason, status, and references to posts or comments.\n\nThis operation is typically performed by moderators or admins as part of moderation workflows to track flag handling progress.\n\nOnly authorized roles have permissions to perform this update to safeguard data integrity.\n\nRelated operations include retrieving the flag to review current status and deleting the flag once resolved.","parameters":[{"name":"contentFlagId","description":"Unique identifier of the content flag to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Content flag update payload","typeName":"ICommunityAiContentFlag.IUpdate"},"responseBody":{"description":"Updated content flag information","typeName":"ICommunityAiContentFlag"},"authorizationType":null,"authorizationRole":"moderator","name":"update"},{"specification":"This operation updates an existing content flag identified by its 'contentFlagId' path parameter in the 'community_ai_content_flags' Prisma table. It allows authorized roles to modify details such as the flag reason, status, and references to targeted posts or comments. The operation supports moderation workflows to update flag resolution status or reasons during review.\n\nThe updated flag record maintains audit timestamps and preserves data integrity. Input validation ensures only valid enumerated values for status and consistency of referenced content IDs.\n\nSecurity considerations restrict this operation to moderator and admin roles to prevent unauthorized manipulation of flags. Proper error handling for non-existent flags is expected.","path":"/communityAi/admin/contentFlags/{contentFlagId}","method":"put","summary":"Update an existing content flag","description":"Update an existing community content flag identified by contentFlagId. The request body should provide updated properties like reason, status, and references to posts or comments.\n\nThis operation is typically performed by moderators or admins as part of moderation workflows to track flag handling progress.\n\nOnly authorized roles have permissions to perform this update to safeguard data integrity.\n\nRelated operations include retrieving the flag to review current status and deleting the flag once resolved.","parameters":[{"name":"contentFlagId","description":"Unique identifier of the content flag to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Content flag update payload","typeName":"ICommunityAiContentFlag.IUpdate"},"responseBody":{"description":"Updated content flag information","typeName":"ICommunityAiContentFlag"},"authorizationType":null,"authorizationRole":"admin","name":"update"},{"specification":"This operation deletes a specific content flag record identified by 'contentFlagId' in the 'community_ai_content_flags' Prisma schema table. As the schema includes a nullable 'deleted_at' DateTime field, this operation performs a hard delete removing the record entirely from the database.\n\nThe deletion is intended for flag resolution scenarios where the flag is no longer needed or is invalid. Proper authorization ensures only moderator or admin roles can perform deletion. No request body or response payload is required.\n\nAttempting to delete a non-existent flag should be handled gracefully by returning an appropriate error response.\n\nRelated operations include retrieval, creation, and updating of content flags for comprehensive moderation control.","path":"/communityAi/moderator/contentFlags/{contentFlagId}","method":"delete","summary":"Permanently delete a content flag by ID","description":"Delete a community content flag permanently by its ID. This operation permanently removes the flag record from the database as 'deleted_at' field is treated as soft deletion nullable, but this operation performs a permanent removal.\n\nOnly moderators and admins have permissions to execute this deletion.\n\nNo request body is needed, and the operation returns no content upon success.\n\nRelated operations include creating flags, updating flag status, and retrieving flags for management.","parameters":[{"name":"contentFlagId","description":"Unique identifier of the content flag to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"moderator","name":"erase"},{"specification":"This operation deletes a specific content flag record identified by 'contentFlagId' in the 'community_ai_content_flags' Prisma schema table. As the schema includes a nullable 'deleted_at' DateTime field, this operation performs a hard delete removing the record entirely from the database.\n\nThe deletion is intended for flag resolution scenarios where the flag is no longer needed or is invalid. Proper authorization ensures only moderator or admin roles can perform deletion. No request body or response payload is required.\n\nAttempting to delete a non-existent flag should be handled gracefully by returning an appropriate error response.\n\nRelated operations include retrieval, creation, and updating of content flags for comprehensive moderation control.","path":"/communityAi/admin/contentFlags/{contentFlagId}","method":"delete","summary":"Permanently delete a content flag by ID","description":"Delete a community content flag permanently by its ID. This operation permanently removes the flag record from the database as 'deleted_at' field is treated as soft deletion nullable, but this operation performs a permanent removal.\n\nOnly moderators and admins have permissions to execute this deletion.\n\nNo request body is needed, and the operation returns no content upon success.\n\nRelated operations include creating flags, updating flag status, and retrieving flags for management.","parameters":[{"name":"contentFlagId","description":"Unique identifier of the content flag to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase"},{"specification":"This API operation manages moderator reviews linked to specific content flags in the moderation workflow. It acts on the community_ai_moderator_reviews table from the Prisma schema, allowing users to list multiple reviews associated with a content flag to facilitate moderation tracking and decision making. Supports pagination, filtering and sorting as defined in the request body.","description":"This endpoint provides a list of moderator reviews linked to a particular content flag identified by contentFlagId. The operation enables moderators or authorized users to query and retrieve multiple review records, which aids in managing and auditing moderation actions associated with flagged content.\n\nAccess control is enforced by role-based authorization to ensure only users with adequate permissions can query these reviews.\n\nThe response returns a paged list of moderator review summaries, including key information such as moderator ID, decisions, comments, and timestamps.\n\nTypical use cases include displaying reviews for a flagged post or comment in the moderation interface, filtering by review status, and monitoring ongoing moderation workflows.\n\nErrors due to invalid contentFlagId or permission issues should be handled by the business logic layer.\n\nThis operation works closely with create, update, and single retrieval operations for community_ai_moderator_reviews to provide a comprehensive moderation review management API.","summary":"List moderator reviews linked to a content flag","parameters":[{"name":"contentFlagId","description":"Unique identifier of the target content flag","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for moderator review filtering","typeName":"ICommunityAiContentFlags.IModeratorReviewsRequest"},"responseBody":{"description":"Paginated list of moderator reviews matching the content flag","typeName":"IPageICommunityAiModeratorReviews.ISummary"},"authorizationType":null,"authorizationRole":"moderator","path":"/communityAi/moderator/contentFlags/{contentFlagId}/moderatorReviews","method":"patch","name":"index"},{"specification":"This API operation manages moderator reviews linked to specific content flags in the moderation workflow. It acts on the community_ai_moderator_reviews table from the Prisma schema, allowing users to list multiple reviews associated with a content flag to facilitate moderation tracking and decision making. Supports pagination, filtering and sorting as defined in the request body.","description":"This endpoint provides a list of moderator reviews linked to a particular content flag identified by contentFlagId. The operation enables moderators or authorized users to query and retrieve multiple review records, which aids in managing and auditing moderation actions associated with flagged content.\n\nAccess control is enforced by role-based authorization to ensure only users with adequate permissions can query these reviews.\n\nThe response returns a paged list of moderator review summaries, including key information such as moderator ID, decisions, comments, and timestamps.\n\nTypical use cases include displaying reviews for a flagged post or comment in the moderation interface, filtering by review status, and monitoring ongoing moderation workflows.\n\nErrors due to invalid contentFlagId or permission issues should be handled by the business logic layer.\n\nThis operation works closely with create, update, and single retrieval operations for community_ai_moderator_reviews to provide a comprehensive moderation review management API.","summary":"List moderator reviews linked to a content flag","parameters":[{"name":"contentFlagId","description":"Unique identifier of the target content flag","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for moderator review filtering","typeName":"ICommunityAiContentFlags.IModeratorReviewsRequest"},"responseBody":{"description":"Paginated list of moderator reviews matching the content flag","typeName":"IPageICommunityAiModeratorReviews.ISummary"},"authorizationType":null,"authorizationRole":"admin","path":"/communityAi/admin/contentFlags/{contentFlagId}/moderatorReviews","method":"patch","name":"index"},{"specification":"This API operation retrieves detailed information about a specific moderator review identified by its ID, for a designated content flag. It operates on the community_ai_moderator_reviews table and supports detailed retrieval of individual review records including decision outcomes, comments, associated moderator, and timestamps.\n\nThis supports viewing specific moderation decisions in detail, essential for auditing, conflict resolution, or moderator reference.\n\nSecurity restrictions limit access to authorized moderators and admins only.\n\nErrors such as invalid IDs or unauthorized access must be handled by the system.\n\nThis endpoint complements list, update, and create operations to cover all CRUD functionalities for moderator reviews.","description":"Retrieve detailed moderator review by unique review ID for a specified content flag, enabling inspection of decisions and comments.\n\nAccessible to moderators and admins for reviewing moderation cases.\n\nReturns the full moderator review entity data.\n\nHandles edge cases of non-existent IDs or access violations by proper error responses.\n\nUsage involves detail views in moderation dashboards and audit trails.","summary":"Get detailed moderator review by ID for content flag","parameters":[{"name":"contentFlagId","description":"Unique identifier of the target content flag","schema":{"type":"string","format":"uuid"}},{"name":"moderatorReviewId","description":"Unique identifier of the moderator review to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed moderator review data","typeName":"ICommunityAiModeratorReviews"},"authorizationType":null,"authorizationRole":"moderator","path":"/communityAi/moderator/contentFlags/{contentFlagId}/moderatorReviews/{moderatorReviewId}","method":"get","name":"at"},{"specification":"This API operation retrieves detailed information about a specific moderator review identified by its ID, for a designated content flag. It operates on the community_ai_moderator_reviews table and supports detailed retrieval of individual review records including decision outcomes, comments, associated moderator, and timestamps.\n\nThis supports viewing specific moderation decisions in detail, essential for auditing, conflict resolution, or moderator reference.\n\nSecurity restrictions limit access to authorized moderators and admins only.\n\nErrors such as invalid IDs or unauthorized access must be handled by the system.\n\nThis endpoint complements list, update, and create operations to cover all CRUD functionalities for moderator reviews.","description":"Retrieve detailed moderator review by unique review ID for a specified content flag, enabling inspection of decisions and comments.\n\nAccessible to moderators and admins for reviewing moderation cases.\n\nReturns the full moderator review entity data.\n\nHandles edge cases of non-existent IDs or access violations by proper error responses.\n\nUsage involves detail views in moderation dashboards and audit trails.","summary":"Get detailed moderator review by ID for content flag","parameters":[{"name":"contentFlagId","description":"Unique identifier of the target content flag","schema":{"type":"string","format":"uuid"}},{"name":"moderatorReviewId","description":"Unique identifier of the moderator review to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed moderator review data","typeName":"ICommunityAiModeratorReviews"},"authorizationType":null,"authorizationRole":"admin","path":"/communityAi/admin/contentFlags/{contentFlagId}/moderatorReviews/{moderatorReviewId}","method":"get","name":"at"},{"specification":"This API operation creates a new moderator review associated with a specified content flag. It writes to the community_ai_moderator_reviews table in the database, allowing authorized users to add moderation decisions, comments, and associated metadata.\n\nThe creation process requires validation of inputs and ensuring referential integrity with the content flag. The operation supports audit logging and triggers any business rules relevant to new reviews.\n\nSecurity considerations restrict creation to moderators and admins to maintain control over moderation workflows.\n\nProper error handling should cover validation failures, permission issues, and references to non-existent content flags.\n\nThis operation works in conjunction with retrieval, update, and listing operations for moderator reviews to provide a complete moderation API.","description":"Create a new moderator review for a specific content flag, storing decision, comments, and timestamps.\n\nAccessible to moderators and admins for recording moderation actions.\n\nValidates input data and binds review to a content flag.\n\nReturns the created moderator review entity.\n\nEnsures integrity and compliance with moderation policies.","summary":"Create new moderator review for content flag","parameters":[{"name":"contentFlagId","description":"Unique identifier of the target content flag","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Moderator review creation data","typeName":"ICommunityAiModeratorReviews.ICreate"},"responseBody":{"description":"Created moderator review information","typeName":"ICommunityAiModeratorReviews"},"authorizationType":null,"authorizationRole":"moderator","path":"/communityAi/moderator/contentFlags/{contentFlagId}/moderatorReviews","method":"post","name":"create"},{"specification":"This API operation creates a new moderator review associated with a specified content flag. It writes to the community_ai_moderator_reviews table in the database, allowing authorized users to add moderation decisions, comments, and associated metadata.\n\nThe creation process requires validation of inputs and ensuring referential integrity with the content flag. The operation supports audit logging and triggers any business rules relevant to new reviews.\n\nSecurity considerations restrict creation to moderators and admins to maintain control over moderation workflows.\n\nProper error handling should cover validation failures, permission issues, and references to non-existent content flags.\n\nThis operation works in conjunction with retrieval, update, and listing operations for moderator reviews to provide a complete moderation API.","description":"Create a new moderator review for a specific content flag, storing decision, comments, and timestamps.\n\nAccessible to moderators and admins for recording moderation actions.\n\nValidates input data and binds review to a content flag.\n\nReturns the created moderator review entity.\n\nEnsures integrity and compliance with moderation policies.","summary":"Create new moderator review for content flag","parameters":[{"name":"contentFlagId","description":"Unique identifier of the target content flag","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Moderator review creation data","typeName":"ICommunityAiModeratorReviews.ICreate"},"responseBody":{"description":"Created moderator review information","typeName":"ICommunityAiModeratorReviews"},"authorizationType":null,"authorizationRole":"admin","path":"/communityAi/admin/contentFlags/{contentFlagId}/moderatorReviews","method":"post","name":"create"},{"specification":"This API operation updates an existing moderator review identified by its unique ID for a given content flag. It modifies data in the community_ai_moderator_reviews table and supports changes to decision status, comments, and other editable fields.\n\nThis allows moderators and admins to revise moderation reviews during ongoing workflows or after additional information is obtained.\n\nSecurity controls ensure only authorized users can perform updates.\n\nValidation ensures data integrity and that updates refer to existing moderator reviews and content flags.\n\nThis operation complements create, list, and retrieve operations to support full lifecycle management of moderator reviews.","description":"Update an existing moderator review by review ID under a specified content flag.\n\nAllows amendments to decision and commentary fields.\n\nRestricted to moderator and admin roles.\n\nReturns updated moderator review data.\n\nValidates input and ensures existence of the target review for data consistency.","summary":"Update moderator review for content flag","parameters":[{"name":"contentFlagId","description":"Unique identifier of the target content flag","schema":{"type":"string","format":"uuid"}},{"name":"moderatorReviewId","description":"Unique identifier of the moderator review to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Moderator review update data","typeName":"ICommunityAiModeratorReviews.IUpdate"},"responseBody":{"description":"Updated moderator review information","typeName":"ICommunityAiModeratorReviews"},"authorizationType":null,"authorizationRole":"moderator","path":"/communityAi/moderator/contentFlags/{contentFlagId}/moderatorReviews/{moderatorReviewId}","method":"put","name":"update"},{"specification":"This API operation updates an existing moderator review identified by its unique ID for a given content flag. It modifies data in the community_ai_moderator_reviews table and supports changes to decision status, comments, and other editable fields.\n\nThis allows moderators and admins to revise moderation reviews during ongoing workflows or after additional information is obtained.\n\nSecurity controls ensure only authorized users can perform updates.\n\nValidation ensures data integrity and that updates refer to existing moderator reviews and content flags.\n\nThis operation complements create, list, and retrieve operations to support full lifecycle management of moderator reviews.","description":"Update an existing moderator review by review ID under a specified content flag.\n\nAllows amendments to decision and commentary fields.\n\nRestricted to moderator and admin roles.\n\nReturns updated moderator review data.\n\nValidates input and ensures existence of the target review for data consistency.","summary":"Update moderator review for content flag","parameters":[{"name":"contentFlagId","description":"Unique identifier of the target content flag","schema":{"type":"string","format":"uuid"}},{"name":"moderatorReviewId","description":"Unique identifier of the moderator review to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Moderator review update data","typeName":"ICommunityAiModeratorReviews.IUpdate"},"responseBody":{"description":"Updated moderator review information","typeName":"ICommunityAiModeratorReviews"},"authorizationType":null,"authorizationRole":"admin","path":"/communityAi/admin/contentFlags/{contentFlagId}/moderatorReviews/{moderatorReviewId}","method":"put","name":"update"},{"specification":"This operation deletes a specific moderator review associated with a content flag in the moderation database. It permanently removes the moderator's decision record identified by the moderatorReviewId and linked to the contentFlagId from the community_ai_moderator_reviews table. The operation restricts access to admin and moderator roles who are authorized to manage moderation reviews.","description":"Delete a specific moderator review by its unique ID that is linked to a content flag. This operation allows admins and moderators to manage moderation feedback records and ensures the record is permanently removed from the database.\n\nSecurity considerations enforce role-based authorization.\n\nThis operation does not require a request body and does not return a response body.\n\nIf the specified moderator review does not exist, the system should return a 404 error indicating not found.","summary":"Delete a specific moderator review linked to a content flag","parameters":[{"name":"contentFlagId","description":"Unique identifier of the target content flag","schema":{"type":"string","format":"uuid"}},{"name":"moderatorReviewId","description":"Unique identifier of the moderator review to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/communityAi/admin/contentFlags/{contentFlagId}/moderatorReviews/{moderatorReviewId}","method":"delete"},{"specification":"This operation deletes a specific moderator review associated with a content flag in the moderation database. It permanently removes the moderator's decision record identified by the moderatorReviewId and linked to the contentFlagId from the community_ai_moderator_reviews table. The operation restricts access to admin and moderator roles who are authorized to manage moderation reviews.","description":"Delete a specific moderator review by its unique ID that is linked to a content flag. This operation allows admins and moderators to manage moderation feedback records and ensures the record is permanently removed from the database.\n\nSecurity considerations enforce role-based authorization.\n\nThis operation does not require a request body and does not return a response body.\n\nIf the specified moderator review does not exist, the system should return a 404 error indicating not found.","summary":"Delete a specific moderator review linked to a content flag","parameters":[{"name":"contentFlagId","description":"Unique identifier of the target content flag","schema":{"type":"string","format":"uuid"}},{"name":"moderatorReviewId","description":"Unique identifier of the moderator review to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"moderator","name":"erase","path":"/communityAi/moderator/contentFlags/{contentFlagId}/moderatorReviews/{moderatorReviewId}","method":"delete"},{"specification":"Retrieve a filtered and paginated list of user reports, which are members' reports on inappropriate content or behavior related to posts or comments. This operation supports complex search criteria, sorting, and pagination based on report status, date, reporting member, and target content. It operates on the community_ai_user_reports table.","description":"Provides a paginated and filterable list of user reports submitted by members concerning inappropriate posts or comments. The search criteria include filters like reporting member ID, report reason, resolution status, and date ranges.\n\nAccess is restricted to admin and moderator roles who oversee content moderation.\n\nThe response returns summarized user report data optimized for moderation workflows, including pagination metadata.\n\nRequest body contains filtering and pagination parameters, and the response body contains paginated summaries.","summary":"Retrieve filtered and paginated list of user reports","parameters":[],"requestBody":{"description":"Filtering and pagination parameters for querying user reports","typeName":"ICommunityAiUserReports.IRequest"},"responseBody":{"description":"Paginated list of user report summaries matching search criteria","typeName":"IPageICommunityAiUserReports.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/communityAi/admin/userReports","method":"patch"},{"specification":"Retrieve a filtered and paginated list of user reports, which are members' reports on inappropriate content or behavior related to posts or comments. This operation supports complex search criteria, sorting, and pagination based on report status, date, reporting member, and target content. It operates on the community_ai_user_reports table.","description":"Provides a paginated and filterable list of user reports submitted by members concerning inappropriate posts or comments. The search criteria include filters like reporting member ID, report reason, resolution status, and date ranges.\n\nAccess is restricted to admin and moderator roles who oversee content moderation.\n\nThe response returns summarized user report data optimized for moderation workflows, including pagination metadata.\n\nRequest body contains filtering and pagination parameters, and the response body contains paginated summaries.","summary":"Retrieve filtered and paginated list of user reports","parameters":[],"requestBody":{"description":"Filtering and pagination parameters for querying user reports","typeName":"ICommunityAiUserReports.IRequest"},"responseBody":{"description":"Paginated list of user report summaries matching search criteria","typeName":"IPageICommunityAiUserReports.ISummary"},"authorizationType":null,"authorizationRole":"moderator","name":"index","path":"/communityAi/moderator/userReports","method":"patch"},{"specification":"Fetch detailed information for a specific user report identified by userReportId. The user report entity stores information about member reports on inappropriate posts or comments, including reason, resolution status, and creation timestamps, stored in the community_ai_user_reports table.","description":"Retrieve detailed data for a user report by its ID. Users with admin or moderator roles can view comprehensive report details, including reporting member, targeted post or comment, report reason, and resolution status.\n\nNo request body is necessary. If the user report does not exist, the system returns a 404 error.\n\nThe response includes all relevant information about the user report for moderation purposes.","summary":"Retrieve detailed information of a user report by ID","parameters":[{"name":"userReportId","description":"Unique identifier of the target user report","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed user report data","typeName":"ICommunityAiUserReport"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/communityAi/admin/userReports/{userReportId}","method":"get"},{"specification":"Fetch detailed information for a specific user report identified by userReportId. The user report entity stores information about member reports on inappropriate posts or comments, including reason, resolution status, and creation timestamps, stored in the community_ai_user_reports table.","description":"Retrieve detailed data for a user report by its ID. Users with admin or moderator roles can view comprehensive report details, including reporting member, targeted post or comment, report reason, and resolution status.\n\nNo request body is necessary. If the user report does not exist, the system returns a 404 error.\n\nThe response includes all relevant information about the user report for moderation purposes.","summary":"Retrieve detailed information of a user report by ID","parameters":[{"name":"userReportId","description":"Unique identifier of the target user report","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed user report data","typeName":"ICommunityAiUserReport"},"authorizationType":null,"authorizationRole":"moderator","name":"at","path":"/communityAi/moderator/userReports/{userReportId}","method":"get"},{"specification":"Create a new user report submitted by a member to flag inappropriate content such as posts or comments. The operation inserts a new report record in the community_ai_user_reports table with required fields including reporting member, targeted content, reason, and status. It supports community moderation workflows and requires member authentication.","description":"Allows a community member to submit a new report regarding inappropriate posts or comments. The client must provide essential information such as the reporting member's ID, the target post or comment IDs if applicable, the reason for the report, and the initial resolution status.\n\nThe system validates required fields and enforces constraints on textual data.\n\nUpon successful creation, the full user report record with IDs and timestamps is returned.\n\nThis endpoint requires the user to be authenticated as a member.","summary":"Create a new user report for inappropriate content","parameters":[],"requestBody":{"description":"Information required to create a user report","typeName":"ICommunityAiUserReport.ICreate"},"responseBody":{"description":"Newly created user report data","typeName":"ICommunityAiUserReport"},"authorizationType":null,"authorizationRole":"member","name":"create","path":"/communityAi/member/userReports","method":"post"},{"specification":"This operation updates an existing user report entry identified by the userReportId path parameter. It is associated with the community_ai_user_reports table from the Prisma schema, which stores reports submitted by members regarding inappropriate content or user behavior, along with their resolution status and timestamps. The update operation allows modification of report details such as report reason and resolution status. Validation rules include ensuring the userReportId is a valid UUID and the request body contains only allowed updatable fields as defined in the ICommunityAiUserReport.IUpdate type. Authorization is restricted to roles with permissions to modify reports, typically moderators or admins.","path":"/communityAi/admin/userReports/{userReportId}","method":"put","summary":"Update a specific user report by ID","description":"Update an existing user report by its unique identifier. The user report represents a member-submitted report specifying concerns about posts or comments within the community platform. This operation allows updating the report reason, resolution status, and other modifiable fields. \n\nSecurity considerations restrict this operation to authorized moderator or admin users to prevent unauthorized modifications. \n\nThis operation interacts directly with the community_ai_user_reports table, updating fields as per the request body. The system enforces validation of the specified userReportId to ensure it references a valid report.\n\nRelated operations include fetching report details (GET) and managing associated moderator reviews.\n\nAttempting to update a nonexistent user report should result in an error response. Proper error handling must reflect permission checks and data integrity validations.","parameters":[{"name":"userReportId","in":"path","description":"Unique identifier of the user report to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated data for the user report","typeName":"ICommunityAiUserReport.IUpdate"},"responseBody":{"description":"Updated user report information","typeName":"ICommunityAiUserReport"},"authorizationType":null,"authorizationRole":"admin","name":"updateUserReport"},{"specification":"This operation updates an existing user report entry identified by the userReportId path parameter. It is associated with the community_ai_user_reports table from the Prisma schema, which stores reports submitted by members regarding inappropriate content or user behavior, along with their resolution status and timestamps. The update operation allows modification of report details such as report reason and resolution status. Validation rules include ensuring the userReportId is a valid UUID and the request body contains only allowed updatable fields as defined in the ICommunityAiUserReport.IUpdate type. Authorization is restricted to roles with permissions to modify reports, typically moderators or admins.","path":"/communityAi/moderator/userReports/{userReportId}","method":"put","summary":"Update a specific user report by ID","description":"Update an existing user report by its unique identifier. The user report represents a member-submitted report specifying concerns about posts or comments within the community platform. This operation allows updating the report reason, resolution status, and other modifiable fields. \n\nSecurity considerations restrict this operation to authorized moderator or admin users to prevent unauthorized modifications. \n\nThis operation interacts directly with the community_ai_user_reports table, updating fields as per the request body. The system enforces validation of the specified userReportId to ensure it references a valid report.\n\nRelated operations include fetching report details (GET) and managing associated moderator reviews.\n\nAttempting to update a nonexistent user report should result in an error response. Proper error handling must reflect permission checks and data integrity validations.","parameters":[{"name":"userReportId","in":"path","description":"Unique identifier of the user report to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated data for the user report","typeName":"ICommunityAiUserReport.IUpdate"},"responseBody":{"description":"Updated user report information","typeName":"ICommunityAiUserReport"},"authorizationType":null,"authorizationRole":"moderator","name":"updateUserReport"},{"specification":"This operation permanently deletes a user report identified by the userReportId. It corresponds to the community_ai_user_reports table, which holds reports submitted by members about inappropriate content or behavior. The deletion is a hard delete, removing the record entirely from the database. Validation ensures the userReportId is a valid UUID. Authorization to delete is limited to admin or moderator roles to prevent unauthorized removal of reports.","path":"/communityAi/admin/userReports/{userReportId}","method":"delete","summary":"Delete a specific user report by ID","description":"Permanently delete a user report by its unique identifier. User reports document concerns raised by members about community content. This hard delete removes the record from the database and cannot be undone.\n\nSecurity measures restrict deletion capabilities to admin and moderator roles only.\n\nThis operation interacts with the community_ai_user_reports table and verifies the existence of the specified report before deletion.\n\nErrors result if the report does not exist or if the requester lacks proper permissions.","parameters":[{"name":"userReportId","in":"path","description":"Unique identifier of the user report to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"eraseUserReport"},{"specification":"This operation permanently deletes a user report identified by the userReportId. It corresponds to the community_ai_user_reports table, which holds reports submitted by members about inappropriate content or behavior. The deletion is a hard delete, removing the record entirely from the database. Validation ensures the userReportId is a valid UUID. Authorization to delete is limited to admin or moderator roles to prevent unauthorized removal of reports.","path":"/communityAi/moderator/userReports/{userReportId}","method":"delete","summary":"Delete a specific user report by ID","description":"Permanently delete a user report by its unique identifier. User reports document concerns raised by members about community content. This hard delete removes the record from the database and cannot be undone.\n\nSecurity measures restrict deletion capabilities to admin and moderator roles only.\n\nThis operation interacts with the community_ai_user_reports table and verifies the existence of the specified report before deletion.\n\nErrors result if the report does not exist or if the requester lacks proper permissions.","parameters":[{"name":"userReportId","in":"path","description":"Unique identifier of the user report to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"moderator","name":"eraseUserReport"},{"specification":"This operation retrieves a list of moderator reviews associated with a specific user report. It is linked to the community_ai_moderator_reviews table, which records moderator decisions on flagged or reported content, including references to moderators, decisions, comments, and audit timestamps. The operation supports filtering and pagination as defined by the ICommunityAiModeratorReview.IRequest type. The response is a paginated list of moderator reviews for the given report.","path":"/communityAi/admin/userReports/{userReportId}/moderatorReviews","method":"patch","summary":"List moderator reviews linked to a user report","description":"Retrieve a paginated list of moderator reviews for a specific user report by the user report's unique identifier.\n\nModerator reviews document decisions made by moderators regarding user-submitted reports. This operation returns review details such as decision outcomes, moderator comments, and timestamps.\n\nSecurity restrictions typically allow access to authorized moderators and administrators.\n\nThis operation aids transparency and accountability in the moderation workflow and can be used alongside report management APIs.","parameters":[{"name":"userReportId","in":"path","description":"Unique identifier of the user report to get related moderator reviews","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering and pagination parameters for retrieving moderator reviews","typeName":"ICommunityAiModeratorReview.IRequest"},"responseBody":{"description":"Paginated list of moderator reviews related to the user report","typeName":"IPageICommunityAiModeratorReview"},"authorizationType":null,"authorizationRole":"admin","name":"indexModeratorReviewsByUserReport"},{"specification":"This operation retrieves a list of moderator reviews associated with a specific user report. It is linked to the community_ai_moderator_reviews table, which records moderator decisions on flagged or reported content, including references to moderators, decisions, comments, and audit timestamps. The operation supports filtering and pagination as defined by the ICommunityAiModeratorReview.IRequest type. The response is a paginated list of moderator reviews for the given report.","path":"/communityAi/moderator/userReports/{userReportId}/moderatorReviews","method":"patch","summary":"List moderator reviews linked to a user report","description":"Retrieve a paginated list of moderator reviews for a specific user report by the user report's unique identifier.\n\nModerator reviews document decisions made by moderators regarding user-submitted reports. This operation returns review details such as decision outcomes, moderator comments, and timestamps.\n\nSecurity restrictions typically allow access to authorized moderators and administrators.\n\nThis operation aids transparency and accountability in the moderation workflow and can be used alongside report management APIs.","parameters":[{"name":"userReportId","in":"path","description":"Unique identifier of the user report to get related moderator reviews","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering and pagination parameters for retrieving moderator reviews","typeName":"ICommunityAiModeratorReview.IRequest"},"responseBody":{"description":"Paginated list of moderator reviews related to the user report","typeName":"IPageICommunityAiModeratorReview"},"authorizationType":null,"authorizationRole":"moderator","name":"indexModeratorReviewsByUserReport"},{"specification":"This operation retrieves detailed information about a specific moderator review identified by its unique ID, related to a specific user report. It corresponds to the community_ai_moderator_reviews table, storing moderator decisions on user reports or content flags, including decision outcomes, comments, and timestamps. Validations ensure correct UUID formats for both userReportId and moderatorReviewId. Authorization roles include admin and moderator, reflecting controlled access to review details.","path":"/communityAi/admin/userReports/{userReportId}/moderatorReviews/{moderatorReviewId}","method":"get","summary":"Retrieve details of a moderator review by ID and related user report","description":"Get detailed information of a specific moderator review associated with a given user report.\n\nModerator reviews capture decisions and comments made by moderators regarding flagged content reports. This operation returns comprehensive information about the review, aiding moderation transparency.\n\nAccess is limited to authorized moderators and admins to protect sensitive moderation data.\n\nErrors are returned if the specified review or user report does not exist or if access is unauthorized.","parameters":[{"name":"userReportId","in":"path","description":"Unique identifier of the user report associated with the moderator review","schema":{"type":"string","format":"uuid"}},{"name":"moderatorReviewId","in":"path","description":"Unique identifier of the moderator review to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the moderator review","typeName":"ICommunityAiModeratorReview"},"authorizationType":null,"authorizationRole":"admin","name":"atModeratorReview"},{"specification":"This operation retrieves detailed information about a specific moderator review identified by its unique ID, related to a specific user report. It corresponds to the community_ai_moderator_reviews table, storing moderator decisions on user reports or content flags, including decision outcomes, comments, and timestamps. Validations ensure correct UUID formats for both userReportId and moderatorReviewId. Authorization roles include admin and moderator, reflecting controlled access to review details.","path":"/communityAi/moderator/userReports/{userReportId}/moderatorReviews/{moderatorReviewId}","method":"get","summary":"Retrieve details of a moderator review by ID and related user report","description":"Get detailed information of a specific moderator review associated with a given user report.\n\nModerator reviews capture decisions and comments made by moderators regarding flagged content reports. This operation returns comprehensive information about the review, aiding moderation transparency.\n\nAccess is limited to authorized moderators and admins to protect sensitive moderation data.\n\nErrors are returned if the specified review or user report does not exist or if access is unauthorized.","parameters":[{"name":"userReportId","in":"path","description":"Unique identifier of the user report associated with the moderator review","schema":{"type":"string","format":"uuid"}},{"name":"moderatorReviewId","in":"path","description":"Unique identifier of the moderator review to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the moderator review","typeName":"ICommunityAiModeratorReview"},"authorizationType":null,"authorizationRole":"moderator","name":"atModeratorReview"},{"specification":"This operation creates a new moderator review linked to a specific user report in the moderation database (community_ai_user_reports and community_ai_moderator_reviews tables). It allows moderators to submit their decision and comments on content flagged or reported by users, using identified IDs for userReport and moderatorReview. Validation ensures that userReportId and required review data are correctly referenced. The review is stored associating the moderator's assessment with the reported content, supporting moderation workflows and auditability.","description":"This API endpoint helps moderators submit their review decisions for user reports. Each review is associated with a specific user report identified by userReportId in the path.\n\nThe operation requires authenticated access by moderators, enforcing role-based permissions.\n\nUpon successful submission, a new review record is created in the community_ai_moderator_reviews table, linking to the given user report, including the moderator's decision and optional comments.\n\nProper validation ensures only existing reports can be reviewed, and data consistency is maintained. This operation supports the moderation workflow by enabling moderators to record their evaluations which may trigger further administrative actions.\n\nErrors include handling invalid/non-existent userReportId or missing decision field.\n\nThis operation requires the moderator role authentication, and is typically used via the moderation UI or automated moderation tools.","summary":"Create a new moderator review for a specific user report","parameters":[{"name":"userReportId","description":"Unique identifier of the user report to be reviewed","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Moderator review creation data including decision and optional comments","typeName":"ICommunityAiUserReport.IModeratorReviewICreate"},"responseBody":{"description":"Newly created moderator review entity","typeName":"ICommunityAiModeratorReview"},"authorizationType":null,"authorizationRole":"moderator","name":"createUserReportModeratorReview","path":"/communityAi/moderator/userReports/{userReportId}/moderatorReviews","method":"post"},{"specification":"This operation updates an existing moderator review linked to a specific user report and moderator review ID. It handles updating the decision, comments, and timestamps in the community_ai_moderator_reviews table, ensuring that only authorized moderators can modify their review data.\n\nThe userReportId and moderatorReviewId in the path parameters identify the specific review to modify. Validation enforces presence and correctness of fields, ensuring consistency and permission checks.","description":"Update a specific moderator review associated with a user report.\n\nModerators can modify their review decisions and comments using this API. It enforces authentication and role-based authorization.\n\nThe path parameters userReportId and moderatorReviewId uniquely identify the review record.\n\nThe request body includes updatable fields such as decision and comments.\n\nThe API verifies that the review exists and belongs to the moderator before applying changes.\n\nErrors are handled for invalid IDs or unauthorized attempts.\n\nTypically used by moderation tools or web UI to correct or update review information.","summary":"Update an existing moderator review for a specific user report","parameters":[{"name":"userReportId","description":"Unique identifier of the user report associated with the review","schema":{"type":"string","format":"uuid"}},{"name":"moderatorReviewId","description":"Unique identifier of the moderator review to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated moderator review data with decision and comments","typeName":"ICommunityAiUserReport.IModeratorReviewIUpdate"},"responseBody":{"description":"Updated moderator review entity","typeName":"ICommunityAiModeratorReview"},"authorizationType":null,"authorizationRole":"moderator","name":"updateUserReportModeratorReview","path":"/communityAi/moderator/userReports/{userReportId}/moderatorReviews/{moderatorReviewId}","method":"put"},{"specification":"This operation deletes a moderator review referenced by userReportId and moderatorReviewId path parameters from the moderation database (community_ai_moderator_reviews table). It performs a hard delete as the schema does not define soft delete columns for this table, ensuring permanent removal of specified review records.\n\nAuthorization ensures only authorized moderators can remove their reviews, preventing unauthorized data loss.\n\nThe API validates existence of records before deletion and returns success confirmation without response body.\n\nThis operation is critical to maintain data integrity, audit trail correctness, and enable moderator corrections.","description":"Delete a moderator review associated with a user report.\n\nThis API endpoint removes the review record permanently from the database. It requires moderator authentication and permission checks.\n\nThe path parameters userReportId and moderatorReviewId specify the unique review to delete.\n\nError handling includes validation of identifiers and existence checks.\n\nThis operation supports correction of moderation records or removal of obsolete reviews.\n\nCare must be taken as this is a hard delete with no recovery.\n\nTypically used via moderation management tools.","summary":"Delete a modifier review for a specific user report","parameters":[{"name":"userReportId","description":"Unique identifier of the user report associated with the review","schema":{"type":"string","format":"uuid"}},{"name":"moderatorReviewId","description":"Unique identifier of the moderator review to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"moderator","name":"eraseUserReportModeratorReview","path":"/communityAi/moderator/userReports/{userReportId}/moderatorReviews/{moderatorReviewId}","method":"delete"},{"specification":"Retrieve a paginated and searchable list of moderator reviews in the moderation system. This operation queries the community_ai_moderator_reviews table with optional filtering, search parameters, and pagination controls specified in the request body (ICommunityAiModeratorReview.IRequest).\n\nThe API supports role-based authorization restricting access to authorized moderators.\n\nResults include metadata for pagination and a data array with detailed moderator review records.\n\nThis endpoint is critical for building moderation dashboards, review management systems, and audit tools to oversee content moderation results.","description":"Fetch a list of moderator reviews with filtering, pagination, and sorting options.\n\nModerators can search and browse reviews based on criteria provided in the request body.\n\nThe operation returns paginated results with summary information to support efficient moderation workflows.\n\nAuthorization ensures only authenticated moderators have access to review listings.\n\nThe request body schema defines possible filtering fields such as decision, date ranges, and user report references.\n\nSupport for sorting and pagination enhances usability for large datasets.\n\nThis endpoint is useful for moderation dashboards and system audits.","summary":"Search and retrieve paginated list of moderator reviews","parameters":[],"requestBody":{"description":"Filtering, sorting, and pagination parameters for listing moderator reviews","typeName":"ICommunityAiModeratorReview.IRequest"},"responseBody":{"description":"Paginated list of moderator reviews matching search criteria","typeName":"IPageICommunityAiModeratorReview"},"authorizationType":null,"authorizationRole":"moderator","name":"searchModeratorReviews","path":"/communityAi/moderator/moderatorReviews","method":"patch"},{"specification":"This operation retrieves detailed information of a specific moderator review from the `community_ai_moderator_reviews` table in the database. This table stores reviews and decisions made by moderators regarding flagged or reported content, maintaining references to the moderator, related flags or reports, decision details, and audit timestamps. The API allows clients to fetch a single moderator review record identified by its unique `moderatorReviewId` (UUID). The response provides all stored fields including decisions, comments, timestamps, and relations if necessary. This operation is essential for viewing and auditing moderation decisions and their context in the community AI platform.","description":"Retrieve a detailed view of a specific moderator review by its unique identifier. The moderator review represents the decision and comments issued by a moderator about content flagged or reported by members. The information returned includes who reviewed it (moderator), the outcome decision (e.g., approved, rejected), and any additional moderator comments.\n\nSecurity considerations restrict access to authenticated moderator and admin users, ensuring only authorized personnel can view moderation history. The response is based on data from the `community_ai_moderator_reviews` Prisma model, which includes properties like `id`, `community_ai_moderator_id`, `community_ai_content_flag_id`, `community_ai_user_report_id`, `decision`, `comments`, `created_at`, `updated_at`, and `deleted_at`.\n\nClients must provide a valid UUID as the path parameter `moderatorReviewId`. The operation ensures referential integrity by relating the review to the correct moderator, content flags, or user reports based on IDs.\n\nErrors due to invalid UUID format or non-existing records are handled by appropriate HTTP response codes. This operation complements create, update, and delete actions for moderator reviews within the moderation workflows.","summary":"Get detailed moderator review by ID","parameters":[{"name":"moderatorReviewId","in":"path","description":"Unique identifier of the moderator review to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the moderator review","typeName":"ICommunityAiModeratorReview"},"authorizationType":null,"authorizationRole":"moderator","path":"/communityAi/moderator/moderatorReviews/{moderatorReviewId}","method":"get","name":"at"},{"specification":"This operation retrieves detailed information of a specific moderator review from the `community_ai_moderator_reviews` table in the database. This table stores reviews and decisions made by moderators regarding flagged or reported content, maintaining references to the moderator, related flags or reports, decision details, and audit timestamps. The API allows clients to fetch a single moderator review record identified by its unique `moderatorReviewId` (UUID). The response provides all stored fields including decisions, comments, timestamps, and relations if necessary. This operation is essential for viewing and auditing moderation decisions and their context in the community AI platform.","description":"Retrieve a detailed view of a specific moderator review by its unique identifier. The moderator review represents the decision and comments issued by a moderator about content flagged or reported by members. The information returned includes who reviewed it (moderator), the outcome decision (e.g., approved, rejected), and any additional moderator comments.\n\nSecurity considerations restrict access to authenticated moderator and admin users, ensuring only authorized personnel can view moderation history. The response is based on data from the `community_ai_moderator_reviews` Prisma model, which includes properties like `id`, `community_ai_moderator_id`, `community_ai_content_flag_id`, `community_ai_user_report_id`, `decision`, `comments`, `created_at`, `updated_at`, and `deleted_at`.\n\nClients must provide a valid UUID as the path parameter `moderatorReviewId`. The operation ensures referential integrity by relating the review to the correct moderator, content flags, or user reports based on IDs.\n\nErrors due to invalid UUID format or non-existing records are handled by appropriate HTTP response codes. This operation complements create, update, and delete actions for moderator reviews within the moderation workflows.","summary":"Get detailed moderator review by ID","parameters":[{"name":"moderatorReviewId","in":"path","description":"Unique identifier of the moderator review to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the moderator review","typeName":"ICommunityAiModeratorReview"},"authorizationType":null,"authorizationRole":"admin","path":"/communityAi/admin/moderatorReviews/{moderatorReviewId}","method":"get","name":"at"},{"specification":"This operation creates a new moderator review record in the database's `community_ai_moderator_reviews` table. Each review captures a moderator's decision regarding content flagged by members, including decisions such as approval, rejection, or requesting more information, plus optional comments. The API accepts the moderator review creation data in the request body and returns the created record. This facilitates the moderation workflow by allowing moderators to record their reviews on flagged content or reports.","description":"Create a new moderator review record allowing moderators to log their decision and comments on flagged content or user reports. This operation accepts a request body with the review details such as linked moderator ID, associated content flag or user report IDs, decision outcome, and any relevant comments.\n\nSecurity policies restrict this action to authenticated moderators and admins only. The submitted data must comply with the Prisma schema constraints, ensuring referenced IDs exist and decisions follow business rules.\n\nOn success, the operation returns the newly created moderator review, including timestamps and identifiers. Validation errors or relational integrity issues result in error responses.\n\nThis operation integrates with other moderation endpoints to support comprehensive content governance in the community AI platform.","summary":"Create a new moderator review","parameters":[],"requestBody":{"description":"Data required to create a moderator review","typeName":"ICommunityAiModeratorReview.ICreate"},"responseBody":{"description":"Newly created moderator review record","typeName":"ICommunityAiModeratorReview"},"authorizationType":null,"authorizationRole":"moderator","path":"/communityAi/moderator/moderatorReviews","method":"post","name":"create"},{"specification":"This operation creates a new moderator review record in the database's `community_ai_moderator_reviews` table. Each review captures a moderator's decision regarding content flagged by members, including decisions such as approval, rejection, or requesting more information, plus optional comments. The API accepts the moderator review creation data in the request body and returns the created record. This facilitates the moderation workflow by allowing moderators to record their reviews on flagged content or reports.","description":"Create a new moderator review record allowing moderators to log their decision and comments on flagged content or user reports. This operation accepts a request body with the review details such as linked moderator ID, associated content flag or user report IDs, decision outcome, and any relevant comments.\n\nSecurity policies restrict this action to authenticated moderators and admins only. The submitted data must comply with the Prisma schema constraints, ensuring referenced IDs exist and decisions follow business rules.\n\nOn success, the operation returns the newly created moderator review, including timestamps and identifiers. Validation errors or relational integrity issues result in error responses.\n\nThis operation integrates with other moderation endpoints to support comprehensive content governance in the community AI platform.","summary":"Create a new moderator review","parameters":[],"requestBody":{"description":"Data required to create a moderator review","typeName":"ICommunityAiModeratorReview.ICreate"},"responseBody":{"description":"Newly created moderator review record","typeName":"ICommunityAiModeratorReview"},"authorizationType":null,"authorizationRole":"admin","path":"/communityAi/admin/moderatorReviews","method":"post","name":"create"},{"specification":"This operation updates an existing moderator review record identified by `moderatorReviewId` in the `community_ai_moderator_reviews` database table. It allows modification of decision outcomes, comments, and linked associations. The request body contains the fields to update as per the Prisma schema. Successful operations return the updated record, supporting the moderation workflow by enabling corrections or changes to prior reviews.","description":"Update an existing moderator review by its unique identifier. This allows modification of the review decision, comments, and references to content flags or user reports.\n\nAuthorization is limited to moderators and admins who have the proper credentials to change reviews. The request requires the valid UUID path parameter `moderatorReviewId` and an update body conforming to the `ICommunityAiModeratorReview.IUpdate` schema. The body may include changes to decision, comments, or linked flag/report IDs.\n\nOn successful update, the system returns the updated moderator review record including the latest timestamps.\n\nThis operation supports flexibility in content moderation workflows, enabling reviewers to amend or correct their previous decisions while maintaining data consistency within related entities.","summary":"Update an existing moderator review","parameters":[{"name":"moderatorReviewId","in":"path","description":"Unique identifier of the moderator review to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated data for the moderator review","typeName":"ICommunityAiModeratorReview.IUpdate"},"responseBody":{"description":"Updated moderator review record","typeName":"ICommunityAiModeratorReview"},"authorizationType":null,"authorizationRole":"moderator","path":"/communityAi/moderator/moderatorReviews/{moderatorReviewId}","method":"put","name":"update"},{"specification":"This operation updates an existing moderator review record identified by `moderatorReviewId` in the `community_ai_moderator_reviews` database table. It allows modification of decision outcomes, comments, and linked associations. The request body contains the fields to update as per the Prisma schema. Successful operations return the updated record, supporting the moderation workflow by enabling corrections or changes to prior reviews.","description":"Update an existing moderator review by its unique identifier. This allows modification of the review decision, comments, and references to content flags or user reports.\n\nAuthorization is limited to moderators and admins who have the proper credentials to change reviews. The request requires the valid UUID path parameter `moderatorReviewId` and an update body conforming to the `ICommunityAiModeratorReview.IUpdate` schema. The body may include changes to decision, comments, or linked flag/report IDs.\n\nOn successful update, the system returns the updated moderator review record including the latest timestamps.\n\nThis operation supports flexibility in content moderation workflows, enabling reviewers to amend or correct their previous decisions while maintaining data consistency within related entities.","summary":"Update an existing moderator review","parameters":[{"name":"moderatorReviewId","in":"path","description":"Unique identifier of the moderator review to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated data for the moderator review","typeName":"ICommunityAiModeratorReview.IUpdate"},"responseBody":{"description":"Updated moderator review record","typeName":"ICommunityAiModeratorReview"},"authorizationType":null,"authorizationRole":"admin","path":"/communityAi/admin/moderatorReviews/{moderatorReviewId}","method":"put","name":"update"},{"specification":"This operation deletes a specific moderator review identified by `moderatorReviewId` from the `community_ai_moderator_reviews` table. The reviews may have a soft-delete capability via a nullable `deleted_at` field; thus, deletion marks the record with a timestamp rather than permanently removing it, ensuring audit trail retention. The API endpoint removes the visibility of the review in standard queries and maintains referential integrity.","description":"Remove a moderator review record from the system by marking it as deleted. This soft deletion retains the record for auditing but hides it from active views.\n\nAccess is restricted to authorized moderators and admins only to prevent unauthorized data modification.\n\nThe path parameter `moderatorReviewId` must be a valid UUID of the review to delete. The system sets the `deleted_at` timestamp to indicate deletion.\n\nClients should note that the record is not physically removed but flagged as deleted to comply with auditing and traceability policies.\n\nThis operation complements the create, read, and update endpoints for full lifecycle management of moderator reviews.","summary":"Delete a moderator review by ID (soft delete)","parameters":[{"name":"moderatorReviewId","in":"path","description":"Unique identifier of the moderator review to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"moderator","path":"/communityAi/moderator/moderatorReviews/{moderatorReviewId}","method":"delete","name":"erase"},{"specification":"This operation deletes a specific moderator review identified by `moderatorReviewId` from the `community_ai_moderator_reviews` table. The reviews may have a soft-delete capability via a nullable `deleted_at` field; thus, deletion marks the record with a timestamp rather than permanently removing it, ensuring audit trail retention. The API endpoint removes the visibility of the review in standard queries and maintains referential integrity.","description":"Remove a moderator review record from the system by marking it as deleted. This soft deletion retains the record for auditing but hides it from active views.\n\nAccess is restricted to authorized moderators and admins only to prevent unauthorized data modification.\n\nThe path parameter `moderatorReviewId` must be a valid UUID of the review to delete. The system sets the `deleted_at` timestamp to indicate deletion.\n\nClients should note that the record is not physically removed but flagged as deleted to comply with auditing and traceability policies.\n\nThis operation complements the create, read, and update endpoints for full lifecycle management of moderator reviews.","summary":"Delete a moderator review by ID (soft delete)","parameters":[{"name":"moderatorReviewId","in":"path","description":"Unique identifier of the moderator review to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","path":"/communityAi/admin/moderatorReviews/{moderatorReviewId}","method":"delete","name":"erase"},{"specification":"This operation retrieves a paginated list of administrative actions performed by admins on moderation cases or user accounts within the community AI platform. It is associated with the \"community_ai_admin_actions\" Prisma DB table. This endpoint supports search, filtering, sorting, and pagination of admin action records to review past administrative activities such as user bans, content deletion, and warnings. It provides metadata including action type, details, timestamps, and linked references to admins and moderation reviews or user reports.","description":"Retrieve a filtered and paginated list of admin action records from the system. This operation allows querying of admin activities such as banning users, unbanning, warnings, and content deletion actions across the platform.\n\nThe records include details of the admin performing the action, references to related moderator reviews or user reports, action type classifications, commentary, and timestamps for auditing.\n\nSecurity is critical: only authenticated administrators can access this endpoint. The system enforces role-based authorization to prevent unauthorized access.\n\nRelated operations include retrieving details of a single admin action, creating new admin actions, and updating existing actions. This list endpoint supports administrative oversight and audit compliance.\n\nThis operation returns summarized information suitable for list views and audit logs management.","summary":"Search and retrieve a filtered, paginated list of community AI admin actions","parameters":[],"requestBody":{"description":"Request body containing search criteria, filters, pagination, and sorting options for admin actions","typeName":"ICommunityAiAdminActions.IRequest"},"responseBody":{"description":"Paginated list of admin actions matching search criteria","typeName":"IPageICommunityAiAdminAction.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/communityAi/admin/adminActions","method":"patch"},{"specification":"This operation retrieves detailed information of a specific admin action record identified by its unique adminActionId. It queries the \"community_ai_admin_actions\" Prisma DB table to fetch the data about an administrative action taken by an admin user such as bans, warnings, and content removals.\n\nThe response includes fields such as action type, details, timestamps, references to moderator reviews or user reports involved, and the admin user who performed the action.\n\nAccess to this information is restricted to users with admin role to maintain security and compliance. This endpoint is crucial for audit trail inspection and administrative transparency.","description":"Retrieve detailed information about a specific admin action by its unique identifier. This includes the admin who performed the action, related moderation or user report references, the type and details of the action, and timestamps.\n\nThis operation supports administrative review and audit compliance. Only admins have access permissions.\n\nInvalid or non-existent adminActionId requests return appropriate error responses indicating the resource is not found.","summary":"Retrieve detailed information of a specific admin action","parameters":[{"name":"adminActionId","description":"Unique identifier of the admin action record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed admin action record information","typeName":"ICommunityAiAdminAction"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/communityAi/admin/adminActions/{adminActionId}","method":"get"},{"specification":"This operation creates a new admin action record in the system, representing an administrative activity performed by an admin user such as banning a user, deleting content, or issuing warnings.\n\nIt inserts a new record in the \"community_ai_admin_actions\" Prisma DB table with details including the admin performing the action, references to related moderator reviews or user reports, the type of action taken, additional action details, and timestamps.\n\nThis endpoint requires the caller to have admin authorization to ensure only authorized personnel can perform administrative actions.\n\nUpon successful creation, the full admin action record is returned, enabling integration with UI workflows and audit logging systems.","description":"Create a new admin action record representing an administrative activity such as user ban, content deletion, or warning issuance.\n\nRequires the admin to specify the action type, details, involved moderator review or user report references, and admin performing the action.\n\nOnly users with the admin role can perform this operation. Proper validation is enforced to ensure integrity and completeness of the action record.\n\nReturns the created admin action record with all details and timestamps.","summary":"Create a new admin action record","parameters":[],"requestBody":{"description":"Information necessary for creating a new admin action record","typeName":"ICommunityAiAdminAction.ICreate"},"responseBody":{"description":"The newly created admin action record","typeName":"ICommunityAiAdminAction"},"authorizationType":null,"authorizationRole":"admin","name":"create","path":"/communityAi/admin/adminActions","method":"post"},{"specification":"This operation updates an existing admin action record identified by adminActionId. It applies changes such as modifying the action type, action details, or related moderation records in the \"community_ai_admin_actions\" Prisma DB table.\n\nOnly users with the admin role are authorized to modify admin action records to maintain strict compliance and security.\n\nReturns the updated admin action record including all modified fields, timestamps, and relational references.\n\nInvalid adminActionId results in error responses indicating resource absence.","description":"Update an existing admin action record with new information. Admins can change action type, details, and relational references.\n\nRequires the unique adminActionId path parameter to identify the record to update.\n\nThis operation enforces admin-only authorization and validates all input for consistency.\n\nReturns the updated admin action record.","summary":"Update an existing admin action record","parameters":[{"name":"adminActionId","description":"Unique identifier of the admin action record to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information for the admin action record","typeName":"ICommunityAiAdminAction.IUpdate"},"responseBody":{"description":"The updated admin action record","typeName":"ICommunityAiAdminAction"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/communityAi/admin/adminActions/{adminActionId}","method":"put"},{"specification":"This operation retrieves a paginated list of notifications for authenticated community AI platform members. It allows filtering, sorting, and pagination of notifications, enabling users to manage and view their notifications efficiently. The operation interacts with the community_ai_notifications table which stores notification records including recipient, type, title, message, and timestamps.","path":"/communityAi/member/notifications","method":"patch","summary":"Search and retrieve a filtered, paginated list of user notifications","description":"This operation provides the functionality to search and retrieve notifications targeted to users in the community AI platform. Notifications are stored in the community_ai_notifications table with detailed information such as notification type, title, message content, recipient user ID, creation date, and read status.\n\nThe search supports parameters for filtering by recipient user, notification types, creation date ranges, and read status. Pagination parameters allow slicing large notification sets for efficient UI display. Sorting rules facilitate ordering notifications by created date or other supported fields.\n\nSecurity considerations ensure that only authorized users can access their own notifications. This operation requires authenticated user roles to protect personal notification data and maintain confidentiality.\n\nResponse includes paginated notification summaries, providing essential details for list views such as title, type, read status, and timestamps. UI clients may link individual notification details via separate operations.\n\nThis operation corresponds to the community_ai_notifications table defined in the Prisma DB schema under the Notifications namespace.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for notifications filtering","typeName":"ICommunityAiNotification.IRequest"},"responseBody":{"description":"Paginated list of notification summary information matching search criteria","typeName":"IPageICommunityAiNotification.ISummary"},"authorizationType":null,"authorizationRole":"member","name":"index"},{"specification":"This operation retrieves detailed information about a specific notification by its unique identifier. It fetches data from the community_ai_notifications table, returning all relevant fields including notification content, type, recipient, read status, and timestamps.","path":"/communityAi/member/notifications/{notificationId}","method":"get","summary":"Retrieve detailed information of a user notification","description":"This operation allows an authenticated user to retrieve detailed information about a single notification identified by its unique notificationId. The notification data is stored in the community_ai_notifications table and includes comprehensive fields such as notification type, title, message, recipient user ID, read timestamp, creation and update timestamps.\n\nSecurity is enforced by restricting access to only authorized users who own the notification record. This supports privacy and data protection policies.\n\nClients use this operation to show detailed notification views, mark notifications as read, or provide additional user interactions based on notification content.\n\nThis corresponds to the community_ai_notifications table in the Prisma schema within the Notifications module.","parameters":[{"name":"notificationId","description":"Unique identifier of the target notification","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed notification information","typeName":"ICommunityAiNotification"},"authorizationType":null,"authorizationRole":"member","name":"at"},{"specification":"This operation creates a new notification record in the community AI platform, storing user-targeted messages about various events. It inserts data into the community_ai_notifications table including recipient user ID, notification type, title, and message.","path":"/communityAi/admin/notifications","method":"post","summary":"Create a new user notification","description":"This operation allows authorized users or system components to create new notifications targeted at specific users within the community AI platform. Notifications include details such as the recipient, notification type (e.g., comment reply, factcheck alert), title, and message body.\n\nCreation of notifications supports real-time messaging for user interaction triggers including AI comment suggestions, moderation alerts, and factcheck flags.\n\nAccess control ensures only authorized roles can create notifications to prevent abuse. The operation records timestamps and soft delete flags according to schema standards.\n\nThis corresponds to the community_ai_notifications table in the Prisma DB schema under the Notifications namespace.","parameters":[],"requestBody":{"description":"Information necessary to create a notification record","typeName":"ICommunityAiNotification.ICreate"},"responseBody":{"description":"Created notification record","typeName":"ICommunityAiNotification"},"authorizationType":null,"authorizationRole":"admin","name":"create"},{"specification":"This operation creates a new notification record in the community AI platform, storing user-targeted messages about various events. It inserts data into the community_ai_notifications table including recipient user ID, notification type, title, and message.","path":"/communityAi/moderator/notifications","method":"post","summary":"Create a new user notification","description":"This operation allows authorized users or system components to create new notifications targeted at specific users within the community AI platform. Notifications include details such as the recipient, notification type (e.g., comment reply, factcheck alert), title, and message body.\n\nCreation of notifications supports real-time messaging for user interaction triggers including AI comment suggestions, moderation alerts, and factcheck flags.\n\nAccess control ensures only authorized roles can create notifications to prevent abuse. The operation records timestamps and soft delete flags according to schema standards.\n\nThis corresponds to the community_ai_notifications table in the Prisma DB schema under the Notifications namespace.","parameters":[],"requestBody":{"description":"Information necessary to create a notification record","typeName":"ICommunityAiNotification.ICreate"},"responseBody":{"description":"Created notification record","typeName":"ICommunityAiNotification"},"authorizationType":null,"authorizationRole":"moderator","name":"create"},{"specification":"This operation permanently deletes a specific administrative action record identified by its unique ID from the system. It impacts the community_ai_admin_actions table which logs admin actions related to moderation and user management.\n\nDeletion is irreversible. The operation is restricted to admin role due to the sensitive nature of admin action audit logs.","path":"/communityAi/admin/adminActions/{adminActionId}","method":"delete","summary":"Permanently delete an admin action record","description":"This operation allows an admin user to permanently delete a specific administrative action record identified by adminActionId. The record is removed from the community_ai_admin_actions table.\n\nDue to the sensitive and audit-critical nature of admin actions, only users with the admin role have permission to perform this operation. The operation results in the irrevocable removal of the record.\n\nClients should be aware that this removes all trace of the admin action from the system database. This operation corresponds to the community_ai_admin_actions table in the database schema.","parameters":[{"name":"adminActionId","description":"Unique identifier of the admin action to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase"},{"specification":"This operation updates an existing notification by its unique identifier. It allows modification of notification properties such as notification type, title, message, and read status. The notification references a recipient user and optionally a triggering post. This operation acts on the community_ai_notifications table in the Community AI platform database. Only authenticated member users can perform this operation on notifications addressed to them or those they are allowed to manage.","path":"/communityAi/member/notifications/{notificationId}","method":"put","summary":"Update a specific notification by notificationId","description":"Update the details of a user notification identified by notificationId. The notification contains information such as notification type (e.g., comment reply, fact-check flag), title, message content, and its read status.\n\nThis operation interacts with the community_ai_notifications table from the Community AI schema, which stores notifications sent to community members for various events.\n\nSecurity considerations require that only authorized authenticated users can update their notifications or administratively managed notifications.\n\nThe operation supports updating notification text and status, which allows users to mark notifications as read or modify the content as needed. It requires the unique identifier of the notification in the path parameter.\n\nValidation ensures that notificationId matches a UUID format, and updated fields comply with their data type and length constraints.\n\nRelated operations include retrieving notification details, listing notification statuses, and creating new notifications.\n\nOn success, the updated notification entity is returned with all its details.","parameters":[{"name":"notificationId","in":"path","description":"Unique identifier of the notification to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for the notification","typeName":"ICommunityAiNotification.IUpdate"},"responseBody":{"description":"Updated notification information","typeName":"ICommunityAiNotification"},"authorizationType":null,"authorizationRole":"member","name":"updateNotification"},{"specification":"This operation permanently deletes a user notification identified by notificationId from the community_ai_notifications table. Deleted notifications are no longer accessible or recoverable through the API.\n\nOnly authorized member users may perform this delete operation on notifications they own or manage. This supports user privacy and data retention policies by enabling manual removal of notifications.\n\nValidation requires that the notificationId parameter be a valid UUID representing the target notification record.\n\nRelated operations include reading notification details, updating notifications, and managing notification statuses.\n\nNo request body is necessary for this operation. The response returns no content confirming successful deletion.","path":"/communityAi/member/notifications/{notificationId}","method":"delete","summary":"Delete a specific notification by notificationId","description":"Delete a notification permanently by its unique identifier notificationId.\n\nThis operation deletes the record from the community_ai_notifications table and removes it entirely from the system.\n\nOnly authorized users can delete notifications.\n\nPath parameter notificationId must be a valid UUID.\n\nSuccessful deletion results in no response content.\n\nUse this operation to remove notifications that are no longer relevant or required.","parameters":[{"name":"notificationId","in":"path","description":"Unique identifier of the notification to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"eraseNotification"},{"specification":"Retrieve paginated list of notification statuses for a specific notification identified by notificationId. This operation provides historical delivery and processing states, such as pending, delivered, or failed, associated with the notification.\n\nIt queries the community_ai_notification_statuses table, supporting auditing and lifecycle tracking of notification state changes.\n\nThe notificationId serves as a path parameter and must be a valid UUID. This operation supports pagination, filtering, and sorting criteria passed in the request body.\n\nAuthorized users with role 'member' can retrieve statuses for notifications they own.\n\nThe response returns a paginated collection of notification status records including status, description, timestamps, and deletion flags.\n\nSupporting operations include reading a specific status detail and managing notifications themselves.","path":"/communityAi/member/notifications/{notificationId}/statuses","method":"patch","summary":"List notification statuses for a specific notification","description":"Retrieve paginated list of statuses related to a notification specified by notificationId.\n\nThis operation fetches historical status entries from community_ai_notification_statuses.\n\nPath parameter notificationId is required and must be a valid UUID.\n\nRequest body contains filtering, sorting and pagination options.\n\nOnly authorized users with appropriate permissions can view notification statuses.\n\nResponse includes paginated list with details such as status code, description, and timestamps.","parameters":[{"name":"notificationId","in":"path","description":"Unique identifier of the target notification","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering, sorting and pagination parameters for notification statuses","typeName":"ICommunityAiNotificationStatus.IRequest"},"responseBody":{"description":"Paginated list of notification status records","typeName":"IPageICommunityAiNotificationStatus"},"authorizationType":null,"authorizationRole":"member","name":"indexNotificationStatuses"},{"specification":"Retrieve the detailed information of a specific notification status identified by notificationStatusId within a notification specified by notificationId.\n\nThe operation queries the community_ai_notification_statuses table for the given status record.\n\nPath parameters notificationId and notificationStatusId are both required and must be valid UUIDs representing the notification and status respectively.\n\nAuthorized users with role 'member' can retrieve detailed status information for notifications they own.\n\nThe response returns full detail of the notification status including status code, description, timestamps, and deletion flag.\n\nRelated operations include listing statuses and managing notifications.","path":"/communityAi/member/notifications/{notificationId}/statuses/{notificationStatusId}","method":"get","summary":"Retrieve detailed notification status information","description":"Retrieve detailed information of a specific notification status by notificationStatusId for the given notificationId.\n\nBoth path parameters must be valid UUIDs.\n\nOperation requires user authorization to access notification status information.\n\nResponse returns the single notification status entity with all properties.","parameters":[{"name":"notificationId","in":"path","description":"Unique identifier of the target notification","schema":{"type":"string","format":"uuid"}},{"name":"notificationStatusId","in":"path","description":"Unique identifier of the notification status","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed notification status information","typeName":"ICommunityAiNotificationStatus"},"authorizationType":null,"authorizationRole":"member","name":"atNotificationStatus"},{"specification":"This operation creates a new notification status for a notification identified by notificationId in the Community AI system. It operates on the community_ai_notification_statuses table linked to community_ai_notifications and allows recording status changes like 'pending', 'delivered', or 'failed'. The POST request body conforms to ICommunityAiNotificationStatus.ICreate and response returns the created status entity. Access is restricted to roles admin, moderator, or member to ensure authorized usage.","path":"/communityAi/admin/notifications/{notificationId}/statuses","method":"post","summary":"Create notification status for a specific notification","description":"Create a new status entry associated with a notification identified by notificationId. This operation supports tracking the lifecycle of notifications sent to users by storing status entries with codes such as 'pending', 'delivered', or 'failed'.\n\nOnly authenticated users with roles admin, moderator, or member are authorized to create status entries.\n\nThe API expects a JSON request body with status details conforming to ICommunityAiNotificationStatus.ICreate schema.\n\nThe response provides the newly created notification status entity including metadata.\n\nErrors may arise if the notificationId is invalid or the provided data fails validation.","parameters":[{"name":"notificationId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique UUID identifier of the notification"}],"requestBody":{"description":"Notification status creation details","typeName":"ICommunityAiNotificationStatus.ICreate"},"responseBody":{"description":"Created notification status entity","typeName":"ICommunityAiNotificationStatus"},"authorizationType":null,"authorizationRole":"admin","name":"createStatus"},{"specification":"This operation creates a new notification status for a notification identified by notificationId in the Community AI system. It operates on the community_ai_notification_statuses table linked to community_ai_notifications and allows recording status changes like 'pending', 'delivered', or 'failed'. The POST request body conforms to ICommunityAiNotificationStatus.ICreate and response returns the created status entity. Access is restricted to roles admin, moderator, or member to ensure authorized usage.","path":"/communityAi/moderator/notifications/{notificationId}/statuses","method":"post","summary":"Create notification status for a specific notification","description":"Create a new status entry associated with a notification identified by notificationId. This operation supports tracking the lifecycle of notifications sent to users by storing status entries with codes such as 'pending', 'delivered', or 'failed'.\n\nOnly authenticated users with roles admin, moderator, or member are authorized to create status entries.\n\nThe API expects a JSON request body with status details conforming to ICommunityAiNotificationStatus.ICreate schema.\n\nThe response provides the newly created notification status entity including metadata.\n\nErrors may arise if the notificationId is invalid or the provided data fails validation.","parameters":[{"name":"notificationId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique UUID identifier of the notification"}],"requestBody":{"description":"Notification status creation details","typeName":"ICommunityAiNotificationStatus.ICreate"},"responseBody":{"description":"Created notification status entity","typeName":"ICommunityAiNotificationStatus"},"authorizationType":null,"authorizationRole":"moderator","name":"createStatus"},{"specification":"This operation creates a new status entry for a specific user notification in the community_ai_notification_statuses table, identified by the parent notification id provided in the path parameter. The purpose of this endpoint is to add lifecycle status updates to user notifications, such as delivery states or read receipt indicators. This closely relates to the community_ai_notifications table, linking statuses back to their parent notification. The request body expects an object that conforms to the ICommunityAiNotificationStatus.ICreate DTO schema, including required status codes and optional descriptions. The response includes the created notification status details. Authorization requires a user role as defined in the system's roles (admin, moderator, member) to ensure proper access control.","path":"/communityAi/member/notifications/{notificationId}/statuses","method":"post","summary":"Create a new status for a specific notification","description":"Create a new status record for an existing notification by specifying the notification ID in the path.\n\nThis operation allows clients to track and update the lifecycle state of a notification such as 'pending', 'delivered', or 'failed'.\n\nPermission to create notification statuses is granted to authorized authenticated users managing notification workflows.\n\nThe notificationId path parameter ensures the status is linked to a parent notification in the community_ai_notifications table.\n\nThe request body contains the status data including required status code and optional descriptive details.\n\nThe response returns the created notification status entity.\n\nNo soft delete operations are applicable for statuses, as they are append-only logs.\n\nCommon errors include invalid notification ID, authorization failures, or missing/invalid status code.\n\nRelated endpoints include retrieving statuses for notifications and deleting status entries.\n\nAuthorization roles require one of the system's defined roles (admin, moderator, member) for user context access.","parameters":[{"name":"notificationId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Target notification's ID"}],"requestBody":{"description":"Details for the new notification status","typeName":"ICommunityAiNotificationStatus.ICreate"},"responseBody":{"description":"Created notification status details","typeName":"ICommunityAiNotificationStatus"},"authorizationType":null,"authorizationRole":"member","name":"createStatus"},{"specification":"Update an existing notification status record by specifying the notification ID and status ID in the path. This operation modifies entries in the community_ai_notification_statuses table, which store lifecycle details for user notifications such as delivery progress or read flags. The request body expects updated notification status data conforming to ICommunityAiNotificationStatus.IUpdate DTO schema. The response returns the updated notification status data. Access is restricted to authorized roles (admin, moderator, member) to prevent unauthorized modifications.","path":"/communityAi/member/notifications/{notificationId}/statuses/{notificationStatusId}","method":"put","summary":"Update a specific notification status by ID","description":"Update an existing status record for a specified notification.\n\nThis allows clients to modify notification lifecycle statuses, such as changing a status from 'pending' to 'delivered'.\n\nThe notificationId and notificationStatusId path parameters uniquely identify the status record in the community_ai_notification_statuses table.\n\nThe request body includes updated status information with required status code and optional description.\n\nThe response returns the updated status record.\n\nAuthorization ensures that only authenticated users with designated roles can perform updates on their notification statuses.\n\nThis operation complements status creation and deletion endpoints.\n\nSoft delete is not implemented as statuses represent active log entries.\n\nCommon errors include invalid IDs, authorization failures, and validation errors on input data.","parameters":[{"name":"notificationId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Target notification's ID"},{"name":"notificationStatusId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Target notification status's ID"}],"requestBody":{"description":"Updated information for the notification status","typeName":"ICommunityAiNotificationStatus.IUpdate"},"responseBody":{"description":"Updated notification status details","typeName":"ICommunityAiNotificationStatus"},"authorizationType":null,"authorizationRole":"member","name":"updateStatus"},{"specification":"Permanently delete a notification status record by specifying notification ID and status ID in the path parameters. This removes the targeted record from the community_ai_notification_statuses table without soft deletion. This operation is intended for authorized users with appropriate roles (admin, moderator, member) to manage their notification status records responsibly. No response body is returned after successful deletion.","path":"/communityAi/member/notifications/{notificationId}/statuses/{notificationStatusId}","method":"delete","summary":"Delete a notification status record","description":"Permanently remove a notification status record linked to a specific notification.\n\nDeletion is a hard delete removing the record permanently from the database.\n\nThe notificationId and notificationStatusId path parameters uniquely identify the status record to remove.\n\nThis operation requires authorization for admin, moderator, or member users to ensure secure management.\n\nNo content is returned upon successful deletion.\n\nTypical errors involve invalid IDs or permission restrictions.\n\nThis operation complements the create and update endpoints for notification statuses.\n\nSoft delete is not implemented for these records.\n\nEnsure that callers understand that deletion is permanent and irreversible.","parameters":[{"name":"notificationId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Target notification's ID"},{"name":"notificationStatusId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Target notification status's ID"}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"eraseStatus"},{"specification":"Search and retrieve a paginated list of user notification preferences from community_ai_user_notification_preferences table using complex filtering, sorting, and pagination parameters. The request body uses ICommunityAiUserNotificationPreference.IRequest DTO schema defining search criteria such as notification types and user IDs. The response returns a paginated list of summarized user notification preferences matching the search criteria. Authentication is required for users with admin, moderator, or member roles to ensure privacy and proper data access control.","path":"/communityAi/member/userNotificationPreferences","method":"patch","summary":"Search user notification preferences with advanced filtering","description":"Search and retrieve a paginated list of user notification preferences.\n\nSupports filtering, sorting, and pagination to find notification preference records tailored to the requesting user's criteria.\n\nQueries the community_ai_user_notification_preferences table, which stores per-user notification delivery channel settings.\n\nThe response contains paginated summary data describing user preferences.\n\nRequires authenticated user access through admin, moderator, or member roles.\n\nComplements the notification preference update operations in the API.\n\nThis operation is read-only and does not modify database state.\n\nTypical errors include authorization denial or malformed search criteria.\n\nEnsure returned data respects user privacy and permission scopes.\n\n","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for user notification preferences","typeName":"ICommunityAiUserNotificationPreference.IRequest"},"responseBody":{"description":"Paginated list of user notification preference summaries matching search criteria","typeName":"IPageICommunityAiUserNotificationPreference.ISummary"},"authorizationType":null,"authorizationRole":"member","name":"searchUserNotificationPreferences"},{"specification":"This operation retrieves the detailed user notification preferences for a specific community AI member based on their unique notification preference ID. It reads from the community_ai_user_notification_preferences table in the Prisma schema, which stores per-user settings for notification delivery channels like email, push, and SMS notifications. The operation requires a valid UUID path parameter for userNotificationPreferenceId to identify the target record. The response returns the current notification preferences including enabled flags for email_notifications_enabled, push_notifications_enabled, and sms_notifications_enabled. The operation is intended for authenticated users to view their own notification settings securely.","description":"Retrieve detailed notification preferences of a specific community AI user by their unique notification preference ID. This operation accesses the community_ai_user_notification_preferences table as defined in the Prisma schema, which stores user-specific per-channel notification settings such as email, push, and SMS delivery options.\n\nThe retrieval supports secure access by requiring authenticated roles. It returns notification preferences including flags indicating which notification types the user has enabled or disabled. The operation helps client applications provide customized notification experiences based on these preferences.\n\nThis get operation requires the userNotificationPreferenceId path parameter, which must be a UUID identifying the specific preferences record. No request body is necessary.\n\nOn success, it returns the full user notification preferences record matching the ID. Errors occur when the ID is invalid or the user lacks authorization.","summary":"Retrieve specific user notification preferences by ID","parameters":[{"name":"userNotificationPreferenceId","in":"path","description":"Unique identifier of the user notification preference","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"User notification preferences object","typeName":"ICommunityAiUserNotificationPreferences"},"authorizationType":null,"authorizationRole":"member","name":"at","path":"/communityAi/member/userNotificationPreferences/{userNotificationPreferenceId}","method":"get"},{"specification":"This operation creates new user notification preferences for a community AI member. It writes to the community_ai_user_notification_preferences table defined in the Prisma schema, storing a user's notification delivery settings. The creation payload includes the user ID and flags to enable or disable email, push, and SMS notifications. This operation enables users to establish their notification preferences for different delivery channels.\n\nSecurity requires authenticated users to create preferences for their accounts only. The request body must contain the necessary fields except for system-generated timestamps.\n\nThe response returns the created notification preferences including all fields.","description":"Create new user notification preferences for a community AI user. The operation accepts a JSON payload specifying notification delivery channel enablement flags: email_notifications_enabled, push_notifications_enabled, and sms_notifications_enabled, along with the user ID to associate the preferences with.\n\nThis operation ensures users can configure their notification settings upon registration or anytime after. Upon success, the newly created notification preferences record is returned with creation timestamps.\n\nThe user ID must be a valid UUID matching an existing community AI member. This create operation requires authentication and authorization for the requesting user.","summary":"Create user notification preferences","parameters":[],"requestBody":{"description":"User notification preferences creation data","typeName":"ICommunityAiUserNotificationPreferences.ICreate"},"responseBody":{"description":"Created user notification preferences record","typeName":"ICommunityAiUserNotificationPreferences"},"authorizationType":null,"authorizationRole":"member","name":"create","path":"/communityAi/member/userNotificationPreferences","method":"post"},{"specification":"This operation updates existing user notification preferences by ID in the community AI system. It modifies records in the community_ai_user_notification_preferences table from the Prisma schema. Incoming payload specifies updated notification enablement flags for email, push, and SMS channels.\n\nThe path parameter userNotificationPreferenceId uniquely identifies the preferences record to update by UUID. The request body must include the modifiable fields excluding system fields like id and timestamps.\n\nThis update operation ensures users can adjust their notification settings securely. The response returns the updated notification preferences record.\n\nAuthorization verifies that users can only update their own preferences safely.","description":"Update user notification preferences for a specific user notification preference ID. Allows modification of notification delivery channel flags including email_notifications_enabled, push_notifications_enabled, and sms_notifications_enabled.\n\nThis operation requires the userNotificationPreferenceId path parameter to specify which record to update. The request body contains updated values for the preferences.\n\nOn success, returns the fully updated user notification preferences object. Only authenticated users can update their own preferences.\n\nValidation ensures IDs and payloads are correct, and unauthorized updates are rejected.","summary":"Update user notification preferences by ID","parameters":[{"name":"userNotificationPreferenceId","in":"path","description":"Unique identifier of the user notification preference to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"User notification preferences update data","typeName":"ICommunityAiUserNotificationPreferences.IUpdate"},"responseBody":{"description":"Updated user notification preferences record","typeName":"ICommunityAiUserNotificationPreferences"},"authorizationType":null,"authorizationRole":"member","name":"update","path":"/communityAi/member/userNotificationPreferences/{userNotificationPreferenceId}","method":"put"},{"specification":"This operation deletes user notification preferences by their unique ID in the community AI platform. It removes the record from the community_ai_user_notification_preferences table in the Prisma schema. The path parameter userNotificationPreferenceId is required as a UUID for identifying the preferences record.\n\nDeletion permanently removes the preferences and disables any stored user notification settings. The operation requires authenticated user roles and ensures users can only delete their own notification preferences.\n\nNo request body or response content is necessary for this deletion.\n\nErrors occur if the ID is invalid or the user lacks authorization.","description":"Delete user notification preferences permanently by their ID. This hard delete operation removes the user's notification settings from the system.\n\nRequires the userNotificationPreferenceId path parameter to specify the record to remove.\n\nFor security, only the authenticated user owning the preferences can perform deletion.\n\nNo response body is returned on success. Errors result from invalid IDs or unauthorized access attempts.","summary":"Delete user notification preferences by ID","parameters":[{"name":"userNotificationPreferenceId","in":"path","description":"Unique identifier of the user notification preference to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"erase","path":"/communityAi/member/userNotificationPreferences/{userNotificationPreferenceId}","method":"delete"},{"specification":"Handles community AI user session records that store authentication sessions of members including tokens, expiration, IP address, and user agent, supporting session lifecycle and auditing. This operation allows retrieval of a paginated list of user sessions with filtering, sorting, and searching capabilities to manage user authentication state for security and convenience.","path":"/communityAi/admin/userSessions","method":"patch","summary":"Search and retrieve a filtered, paginated list of community AI user sessions","description":"Retrieve a filtered and paginated list of community AI user sessions from the system. This operation supports searching, sorting, and filtering by various session attributes such as expiration date, user ID, and status.\n\nThe operation is designed for administrative use to monitor active, expired, or revoked sessions to maintain platform security and proper user authentication management.\n\nSecurity considerations include restricting access to authorized administrative roles. Data privacy is ensured by limiting session details exposure.\n\nThe underlying database table is community_ai_user_sessions, which contains fields for session tokens, expiration times, refresh tokens, IP addresses, and user agents.\n\nFiltering and pagination parameters can be specified in the request body to efficiently retrieve relevant sessions. The response contains a paginated list of session summaries to facilitate management tasks and auditing.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for user sessions filtering","typeName":"ICommunityAiUserSessions.IRequest"},"responseBody":{"description":"Paginated list of community AI user session summaries matching search criteria","typeName":"IPageICommunityAiUserSessions.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index"},{"specification":"Retrieves detailed information about a specific community AI user session by its unique ID. This operation provides comprehensive session details including token information, expiration times, associated member ID, IP address, and user agent information, enabling administrators to audit and manage user authentication sessions effectively.","path":"/communityAi/admin/userSessions/{userSessionId}","method":"get","summary":"Retrieve detailed information of a specific community AI user session","description":"Retrieve detailed information for a specified community AI user session identified by its unique sessionId in UUID format.\n\nThe response includes all session attributes recorded in the community_ai_user_sessions database table, such as session and refresh tokens, expiration timestamps, IP address, and user agent strings.\n\nAccess to this endpoint is restricted to administrators to ensure secure session management. Proper error handling for invalid or missing session ID is expected.\n\nThis operation supports auditing user sessions and investigating authentication issues.\n\nA successful response returns the full session record as a structured object.","parameters":[{"name":"userSessionId","description":"Unique identifier of the user session to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the community AI user session","typeName":"ICommunityAiUserSession"},"authorizationType":null,"authorizationRole":"admin","name":"at"},{"specification":"Creates a new community AI user session record, storing authentication tokens, expiration information, IP address, and client user agent details. This operation allows new user sessions to be established when members log in, facilitating secure access management and session lifecycle control.","path":"/communityAi/admin/userSessions","method":"post","summary":"Create a new user session for community AI member","description":"Create a new community AI user session by providing the necessary authentication and session details.\n\nThe request must include the associated member ID, session token and expiration, optional refresh token and its expiration, and optionally client IP address and user agent.\n\nThis operation is typically called after successful user login and token issuance, recording the session details in the community_ai_user_sessions table.\n\nSecurity controls ensure only authorized roles can create sessions.\n\nThe response returns the newly created session record with all stored attributes, confirming successful creation.","parameters":[],"requestBody":{"description":"Information required to create a new user session","typeName":"ICommunityAiUserSession.ICreate"},"responseBody":{"description":"Newly created community AI user session information","typeName":"ICommunityAiUserSession"},"authorizationType":null,"authorizationRole":"admin","name":"create"},{"specification":"Updates an existing community AI user session identified by userSessionId with provided session data including tokens, expiration times, IP address, and user agent information. This operation allows modification of session attributes for maintenance, token refresh, or security purpose.","path":"/communityAi/admin/userSessions/{userSessionId}","method":"put","summary":"Update an existing community AI user session","description":"Update existing community AI user session details identified by userSessionId.\n\nThe request payload must include updated session tokens, expiration times, and optionally IP address and user agent information.\n\nAccess is restricted to administrative users for security.\n\nThe operation returns the updated session record upon success.\n\nValidation ensures session ID is valid and the update preserves data integrity.\n\nThe session record is stored in the community_ai_user_sessions database table.","parameters":[{"name":"userSessionId","description":"Unique identifier of the user session to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated user session information","typeName":"ICommunityAiUserSession.IUpdate"},"responseBody":{"description":"Updated community AI user session details","typeName":"ICommunityAiUserSession"},"authorizationType":null,"authorizationRole":"admin","name":"update"},{"specification":"This operation deletes a specific user session record from the system, identified by the unique userSessionId. It operates on the community_ai_user_sessions table from the Prisma schema. The deletion permanently removes the session record, including all associated JWT tokens, from the database. This operation supports security practices such as session invalidation and logout by administrators or the user themselves.","description":"This DELETE operation permanently removes a user session identified by its unique ID (userSessionId) from the database. The user session corresponds to an authenticated session of a member user in the community AI system.\n\nSecurity considerations include ensuring that only authorized roles (e.g., the session owner or administrators) may perform this action.\n\nThe underlying data is from the community_ai_user_sessions table in the Prisma schema, which stores session tokens, expiration timestamps, and metadata. Deleting a session effectively revokes all authentication tokens related to that session.\n\nNo request body is needed, as only the session ID path parameter is required.\n\nOn success, no response body is returned. Errors include not found if the session does not exist.\n\nThis operation links closely with JWT token management endpoints under the same session resource.\n","summary":"Delete a user session by ID","parameters":[{"name":"userSessionId","in":"path","description":"Unique identifier of the target user session","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member"],"name":"erase","path":"/communityAi/member/userSessions/{userSessionId}","method":"delete","authorizationRole":"member","authorizationType":null},{"specification":"This operation retrieves a list of JWT tokens associated with a specific user session identified by userSessionId. It corresponds to the community_ai_jwt_tokens table linked to the community_ai_user_sessions via the foreign key. The operation supports search and pagination of JWT tokens for security auditing and token management purposes.","description":"This PATCH operation retrieves a filtered and paginated list of JWT tokens associated with a specific user session. The session is identified by the path parameter userSessionId.\n\nThe JWT tokens represent authentication and refresh tokens currently or previously issued for this session.\n\nThe request body allows specifying search criteria such as token type, expiration, revocation status, or pagination parameters.\n\nSecurity considerations include restricting access to the session's owner or admin roles only.\n\nThe response contains a paginated list of JWT tokens with relevant details.\n\nThis operation is used to audit or manage active and revoked tokens under a single user session.\n","summary":"Search and retrieve JWT tokens for a user session","parameters":[{"name":"userSessionId","in":"path","description":"Unique identifier of the target user session","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for JWT token filtering","typeName":"ICommunityAiUserSessionJwtTokens.IRequest"},"responseBody":{"description":"Paginated list of JWT token information matching search criteria","typeName":"IPageICommunityAiUserSessionJwtToken"},"authorizationRoles":["member"],"name":"index","path":"/communityAi/member/userSessions/{userSessionId}/jwtTokens","method":"patch","authorizationRole":"member","authorizationType":null},{"specification":"This operation gets details of a specific JWT token identified by jwtTokenId, belonging to a user session identified by userSessionId. It corresponds to the community_ai_jwt_tokens table, which stores token strings, types, expiration times, and revocation timestamps. It is used for token inspection or auditing purposes.","description":"This GET operation returns detailed information about a specific JWT token within a user session, identified by both userSessionId and jwtTokenId path parameters.\n\nThe JWT token includes token string, type (access or refresh), expiration, and revocation timestamps.\n\nSecurity restrictions apply to ensure only authorized users access their tokens.\n\nNo request body is required.\n\nThe response contains the full JWT token record matching the specified IDs.\n","summary":"Retrieve detailed information of a JWT token by its ID within a user session","parameters":[{"name":"userSessionId","in":"path","description":"Unique identifier of the target user session","schema":{"type":"string","format":"uuid"}},{"name":"jwtTokenId","in":"path","description":"Unique identifier of the target JWT token","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed JWT token information","typeName":"ICommunityAiUserSessionJwtToken"},"authorizationRoles":["member"],"name":"at","path":"/communityAi/member/userSessions/{userSessionId}/jwtTokens/{jwtTokenId}","method":"get","authorizationRole":"member","authorizationType":null},{"specification":"This operation creates a new JWT token under a specified user session identified by userSessionId. It corresponds to community_ai_jwt_tokens table entries linked to a session for authentication purposes. The request body must specify token details including token string, type (access or refresh), expiration timestamps, and optional revoked date. This is typically used for issuing new tokens in user session management.","description":"This POST operation creates a new JWT token associated with a user session indicated by the userSessionId path parameter.\n\nThe request body must specify the token string, token type, expiration time, and optionally the revoked timestamp.\n\nThis is used for authenticating users and managing active sessions.\n\nSecurity is critical; only authorized users or system components may create tokens.\n\nThe response returns the newly created JWT token record.\n","summary":"Create a new JWT token in a user session","parameters":[{"name":"userSessionId","in":"path","description":"Unique identifier of the target user session","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Creation info of the JWT token","typeName":"ICommunityAiUserSessionJwtToken.ICreate"},"responseBody":{"description":"Newly created JWT token information","typeName":"ICommunityAiUserSessionJwtToken"},"authorizationRoles":["member"],"name":"create","path":"/communityAi/member/userSessions/{userSessionId}/jwtTokens","method":"post","authorizationRole":"member","authorizationType":null},{"specification":"This operation updates a JWT token belonging to a specific user session within the Community AI platform. It allows authorized users to modify properties of a JWT token, such as token values, expiration timestamps, or revocation status. The operation maps to the community_ai_jwt_tokens table in the Prisma schema and requires the userSessionId and jwtTokenId path parameters to identify the target token. Authorization roles must enforce that only authenticated and authorized users can update tokens. Input validation ensures that provided token data conforms to expected formats and allowed fields for update.","description":"This API endpoint allows updating an existing JWT token record associated with a particular user session identified by `userSessionId` and `jwtTokenId`. The JWT tokens are essential for managing authentication and session security within the Community AI platform.\n\nThe update operation supports modifying token attributes such as the token string, token type (e.g., access or refresh), expiration timestamps, and revocation time. Updating these fields enables session validation, token renewal, or administrative revocation.\n\nSecurity considerations demand that only authorized roles related to user management or session administration can invoke this operation. The system validates all input fields for correctness and conformity to security standards.\n\nThe underlying database entity is `community_ai_jwt_tokens` as defined in the Prisma schema, ensuring consistency and integrity of token data storage. Path parameters precisely identify the token record to update.\n\nIf the specified JWT token or user session is not found, the operation should return a suitable error. All updates follow strict audit trails and validation rules accordingly.","summary":"Update a specific JWT token for a user session in Community AI","parameters":[{"name":"userSessionId","description":"Unique identifier of the user session","schema":{"type":"string","format":"uuid"}},{"name":"jwtTokenId","description":"Unique identifier of the JWT token to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Properties for updating the JWT token","typeName":"ICommunityAiJwtTokens.IUpdate"},"responseBody":{"description":"Updated JWT token information","typeName":"ICommunityAiJwtTokens"},"authorizationRoles":["member"],"path":"/communityAi/member/userSessions/{userSessionId}/jwtTokens/{jwtTokenId}","method":"put","name":"updateJwtToken","authorizationRole":"member","authorizationType":null},{"specification":"This operation permanently deletes a JWT token record associated with a specific user session. It removes the token from the database, identified by the userSessionId and jwtTokenId path parameters, effectively revoking the token and terminating its validity. The deletion corresponds to a hard delete because the community_ai_jwt_tokens table does not have soft delete columns in the Prisma schema.\n\nSecurity constraints require that only authorized users such as administrators or session managers invoke this endpoint to prevent unauthorized token removals. Upon successful execution, the JWT token is no longer valid for authentication, and appropriate audit logging must be performed.\n\nAssociated Prisma schema table: community_ai_jwt_tokens.","description":"Deletes a JWT token permanently by its ID and associated user session ID. This hard delete operation removes the token record from the Community AI database, revoking its authentication capabilities.\n\nOnly authorized users with sufficient permissions should perform this operation to maintain system security. The endpoint strictly requires the path parameters `userSessionId` and `jwtTokenId` identifying the token to be deleted.\n\nThe operation has no request body since it only removes data. On success, a 204 No Content response is returned. If the JWT token does not exist, an appropriate error must be returned.\n\nThis operation directly affects session security and token lifecycle management.","summary":"Delete a JWT token for a user session in Community AI","parameters":[{"name":"userSessionId","description":"Unique identifier of the user session","schema":{"type":"string","format":"uuid"}},{"name":"jwtTokenId","description":"Unique identifier of the JWT token to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member"],"path":"/communityAi/member/userSessions/{userSessionId}/jwtTokens/{jwtTokenId}","method":"delete","name":"eraseJwtToken","authorizationRole":"member","authorizationType":null},{"specification":"This operation provides a filtered, paginated list of AI service providers integrated into the Community AI platform. It accesses the community_ai_ai_service_providers Prisma schema table, returning provider details such as provider names, API endpoints, authentication types, and configuration states. The endpoint supports search, filtering, and sorting criteria via a request body.\n\nThis operation is used to display AI service providers in administrative or configuration UIs. Access is restricted to authorized users, typically administrators or system managers. Proper pagination and filtering allow efficient browsing of active and inactive services, supporting system monitoring and management.\n\nRequest body must include filtering criteria, while the response body returns a paginated list of AI service provider entities.","description":"Retrieve a paginated list of AI service providers configured in the Community AI platform. The response includes provider names, API URIs, authentication details, and status flags.\n\nThis operation supports pagination, filtering by active status, and sorting by creation date or provider name. It targets the `community_ai_ai_service_providers` table from Prisma schema.\n\nOnly authorized roles may access this endpoint to manage or review AI service settings.\n\nThe request body schema defines filter and pagination parameters, while the response delivers paged detailed entities.","summary":"List AI service providers with filtering and pagination","parameters":[],"requestBody":{"description":"Filter and pagination parameters for AI service providers","typeName":"ICommunityAiAiServiceProviders.IRequest"},"responseBody":{"description":"Paginated list of AI service providers matching filter criteria","typeName":"IPageICommunityAiAiServiceProviders"},"authorizationRoles":["admin"],"path":"/communityAi/admin/aiServiceProviders","method":"patch","name":"indexAiServiceProviders","authorizationRole":"admin","authorizationType":null},{"specification":"This operation retrieves detailed information about a specific AI service provider identified by its ID. It connects to the community_ai_ai_service_providers table defined in the Prisma schema and returns all stored details such as provider name, API endpoint, authentication type, and configuration settings.\n\nAccess is restricted to authorized administrator roles to secure configuration data. The operation uses path parameter `id` to find the exact record.\n\nThe response includes the full AI service provider entity with all applicable fields for administrative review and management.\n\nIf the specified AI service provider does not exist, an appropriate error response must be returned.","description":"Retrieve detailed information about an AI service provider using its unique identifier.\n\nThe operation applies strict access control and returns the full details of the provider entity from the `community_ai_ai_service_providers` table.\n\nThe path parameter identifies the provider record to fetch. On success, detailed provider information is returned. On failure, appropriate error messages are provided.\n\nDesigned to support administration and configuration UIs requiring provider details.","summary":"Get detailed info of an AI service provider by ID","parameters":[{"name":"id","description":"Unique identifier of the AI service provider","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed AI service provider information","typeName":"ICommunityAiAiServiceProviders"},"authorizationRoles":["admin"],"path":"/communityAi/admin/aiServiceProviders/{id}","method":"get","name":"atAiServiceProvider","authorizationRole":"admin","authorizationType":null},{"specification":"This operation creates a new AI service provider in the community AI platform. It adds a record to the underlying community_ai_ai_service_providers table, storing provider name, API base URL, authentication type, API key (optional), and dynamic configuration JSON. This supports managing external AI service integrations used for comment analysis, fact-checking and content generation. The creation endpoint requires admin role authorization to control system-wide AI integrations securely.","path":"/communityAi/admin/aiServiceProviders","method":"post","summary":"Create a new AI service provider","description":"Create a new AI service provider record in the community AI system. The API accepts details such as the provider's name, API base URL, authentication type, optional API key, and configuration parameters as JSON. Only users with the 'admin' role are authorized to create AI service providers.\n\nThe created record will be stored in the community_ai_ai_service_providers table, which includes metadata fields like created_at and updated_at timestamps.\n\nThis operation is essential for configuring and managing external AI services that enable features such as AI commenting, sentiment analysis, and fact-checking within the platform. Proper access controls ensure only authorized personnel can modify service provider data.\n\nFailure to provide accurate details or lack of admin permissions will result in operation rejection.\n\nNo response body content is returned as this is a creation operation.\n","parameters":[],"requestBody":{"description":"Information required to create a new AI service provider","typeName":"ICommunityAiAiServiceProvider.ICreate"},"responseBody":{"description":"The created AI service provider record","typeName":"ICommunityAiAiServiceProvider"},"authorizationType":null,"authorizationRole":"admin","name":"create"},{"specification":"This operation updates an existing AI service provider identified by its ID. It modifies the community_ai_ai_service_providers table entry by updating fields such as provider name, API base URL, authentication type, API key, and configuration JSON.\n\nThe API requires the ID path parameter to accurately identify the target record for update. Only users with the 'admin' role can perform the update operation.\n\nThis functionality supports maintenance and configuration of AI integrations supporting comment assistance and fact-checking features within the community AI platform.","path":"/communityAi/admin/aiServiceProviders/{id}","method":"put","summary":"Update an existing AI service provider","description":"Update an existing AI service provider by its unique ID. The API accepts the updated provider details including name, API base URL, auth type, API key, and configuration JSON. Only 'admin' role users are authorized to perform this operation.\n\nThe path parameter 'id' specifies which service provider to update. The system validates the ID exists and updates the corresponding record in the community_ai_ai_service_providers table.\n\nAccurate data input is essential to maintain service integrations. Authorization restrictions enforce security and prevent unauthorized modifications.\n\nNo response body content is included as this operation acknowledges update success.","parameters":[{"name":"id","in":"path","description":"Unique identifier of the AI service provider to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated AI service provider details","typeName":"ICommunityAiAiServiceProvider.IUpdate"},"responseBody":{"description":"The updated AI service provider record","typeName":"ICommunityAiAiServiceProvider"},"authorizationType":null,"authorizationRole":"admin","name":"update"},{"specification":"This operation deletes an existing AI service provider identified by its ID from the community AI platform. It removes the record from the community_ai_ai_service_providers table.\n\nThe delete action requires the 'id' path parameter to specify the exact provider to delete. Only users with 'admin' role authorization can perform this sensitive operation.\n\nThis deletion is a hard delete as the model does not explicitly include soft delete handling for this operation.\n\nProper care must be taken as removal affects AI service availability used for comment suggestion, fact-checking, and other platform AI features.","path":"/communityAi/admin/aiServiceProviders/{id}","method":"delete","summary":"Delete an AI service provider","description":"Delete an existing AI service provider record by its ID. This permanently removes the AI service provider from the system, including all associated integration configurations.\n\nOnly admin users can perform deletions to protect system integrity. The operation expects the provider ID as a path parameter and removes the corresponding record from the community_ai_ai_service_providers table.\n\nNo response body content is returned upon successful deletion.\n\nThis is a critical operation and must be secured carefully.","parameters":[{"name":"id","in":"path","description":"Unique identifier of the AI service provider to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase"},{"specification":"This operation retrieves a paginated list of notification providers used by the community AI platform. It supports filtering, searching, and sorting of notification providers stored in the community_ai_notification_providers table.\n\nUsers with 'admin' role authorization can query this endpoint to manage and review notification service providers.\n\nThe endpoint supports PATCH method with query parameters encapsulated in the request body, enabling advanced search criteria and pagination.\n\nThe response includes a paginated collection of notification provider summary information reflecting the current database state.","path":"/communityAi/admin/notificationProviders","method":"patch","summary":"List and search notification providers","description":"Retrieve a filtered and paginated list of notification providers in the community AI system. This endpoint supports complex queries for filtering by provider name, status, and other metadata.\n\nOnly users with 'admin' privileges can access this resource. The operation returns a paginated summary list of notification providers stored in the community_ai_notification_providers table.\n\nAdvanced search, sorting, and pagination are facilitated through the request body parameters.\n\nThis operation supports managing notification integrations and monitoring their status and configurations.\n","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for notification providers","typeName":"ICommunityAiNotificationProvider.IRequest"},"responseBody":{"description":"Paginated list of notification provider summaries matching search criteria","typeName":"IPageICommunityAiNotificationProvider.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index"},{"specification":"This API endpoint retrieves detailed information about a specific notification provider from the database table community_ai_notification_providers. It requires the unique identifier of the provider as a path parameter to fetch the corresponding record. This provider entity includes data such as the provider's name, configuration JSON, current status, creation and update timestamps, and a possible deletion timestamp indicating a soft delete. This read operation is accessible publicly and does not require authorization roles, allowing clients to view notification provider details for integration or auditing purposes.","description":"Retrieves detailed information about a notification provider identified by its unique ID. \n\nThis operation interacts with the community_ai_notification_providers table, which stores configuration and operational metadata for external notification service providers integrated into the Community AI platform. \n\nClients use this endpoint to obtain provider settings such as configuration parameters JSON and current status. It is a read-only operation and requires only the unique provider ID.\n\nThe operation supports standard security practices and is designed for public or internal system consumption depending on deployment scenarios. \n\nIf the specified ID does not correspond to a valid notification provider, the system will respond with a 404 Not Found error.","summary":"Retrieve notification provider details by ID","parameters":[{"name":"id","description":"Unique identifier of the notification provider","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Notification provider information","typeName":"ICommunityAiNotificationProvider"},"authorizationType":null,"authorizationRole":null,"name":"at","path":"/communityAi/notificationProviders/{id}","method":"get"},{"specification":"This API endpoint creates a new notification provider record in the community_ai_notification_providers table. It accepts a JSON payload containing the provider's name, optional configuration JSON string, and the current status. Upon successful creation, it returns the full details of the created provider entity including timestamps and any soft delete timestamp if applicable. This operation requires appropriate user authorization, typically admin role, as creating new notification providers affects system-wide notification delivery configurations.","description":"Creates a new notification provider with the given configuration and status.\n\nThe community_ai_notification_providers table stores notification service providers' metadata, including provider name, configuration JSON, and operational status. This operation validates the uniqueness of the provider name before insertion.\n\nAccess to this operation requires administrative authorization due to its impact on notification behaviors.\n\nSuccessful creation results in the full provider entity being returned with database-generated fields such as created_at and updated_at timestamps.\n\nIf a provider with the given name already exists, the system returns a conflict error.","summary":"Create a new notification provider","parameters":[],"requestBody":{"description":"Notification provider creation data","typeName":"ICommunityAiNotificationProvider.ICreate"},"responseBody":{"description":"Created notification provider information","typeName":"ICommunityAiNotificationProvider"},"authorizationType":null,"authorizationRole":"admin","name":"create","path":"/communityAi/admin/notificationProviders","method":"post"},{"specification":"This API endpoint updates an existing notification provider record in the community_ai_notification_providers table. It requires the unique provider ID in the path and a JSON body containing updatable fields such as configuration JSON and status. The provider name is immutable and cannot be changed through this endpoint. This operation returns the updated notification provider entity. Authorization is restricted to admin users due to the critical nature of notification provider configurations.","description":"Updates configuration and status of an existing notification provider identified by ID.\n\nOnly configuration JSON and status fields are updatable as provider_name is immutable.\n\nThis operation ensures the continued integrity and availability of notification service integrations.\n\nIt requires admin-level authorization to perform updates.\n\nReturns the full updated provider entity on success.\n\nIf the specified ID does not exist, returns a 404 Not Found error.","summary":"Update notification provider settings","parameters":[{"name":"id","description":"Unique identifier of the notification provider to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Notification provider update data","typeName":"ICommunityAiNotificationProvider.IUpdate"},"responseBody":{"description":"Updated notification provider information","typeName":"ICommunityAiNotificationProvider"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/communityAi/admin/notificationProviders/{id}","method":"put"},{"specification":"This API endpoint deletes an existing notification provider from the community_ai_notification_providers table by its unique ID. This is a soft delete operation, meaning the record is not physically removed but marked as deleted by setting the deleted_at timestamp. This allows for potential recovery or audit compliance. The operation requires admin role authorization due to its impact on notification delivery. No response body is returned upon successful deletion.","description":"Soft deletes a notification provider identified by its unique ID.\n\nMarks the provider record as deleted by setting deleted_at timestamp, preserving data for recovery or audits.\n\nRequires admin authorization as this impacts system notification behavior.\n\nReturns no content upon successful operation.\n\nIf the provider does not exist, returns a 404 Not Found error.","summary":"Soft delete a notification provider","parameters":[{"name":"id","description":"Unique identifier of the notification provider to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/communityAi/admin/notificationProviders/{id}","method":"delete"},{"specification":"This operation provides a paginated and searchable list of API usage logs, capturing the detailed metrics and metadata of requests made to external AI and notification services. The logs include fields such as the service provider ID, API endpoint called, request timestamp, response time, HTTP status code, and any error messages. This endpoint allows administrators or system monitors to analyze external API usage patterns, identify potential bottlenecks or failures, and audit interactions with third-party services. It operates on the community_ai_api_usage_logs table in the Prisma schema.","description":"Retrieve a filtered and paginated list of external API usage logs recorded by the community AI platform. This operation supports complex search criteria allowing users to query by attributes such as service provider, API endpoint path, time ranges, response times, and status codes.\n\nThe data originates from the community_ai_api_usage_logs table in the Prisma schema, which stores detailed request and response metadata for API calls to external AI and notification services. This enables auditing API performance and reliability.\n\nUsers accessing this endpoint must be authorized appropriately. The operation returns paginated results including structured data matching the community_ai_api_usage_logs entity.\n\nFilters and pagination parameters are supplied in the request body.\n\nThis operation serves as a key tool for monitoring and troubleshooting third-party integration performance and usage patterns within the platform.","summary":"Search and retrieve paginated list of external API usage logs","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for API usage logs filtering","typeName":"ICommunityAiApiUsageLog.IRequest"},"responseBody":{"description":"Paginated list of API usage log entries matching search criteria","typeName":"IPageICommunityAiApiUsageLog"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/communityAi/admin/apiUsageLogs","method":"patch"},{"specification":"This operation retrieves a single detailed external API usage log record by its unique ID. It provides all recorded attributes such as the linked service provider ID, endpoint, request timestamps, response details, status codes, and any error messages. This enables detailed inspection and audit of individual external API calls.\n\nThe operation corresponds to the community_ai_api_usage_logs table in the Prisma schema and requires specifying the log entry ID as a path parameter.\n\nThe response returns the full detailed API usage log entity.\n\nAccess to this endpoint requires appropriate administrative authorization.","description":"Retrieve detailed information about a specific external API usage log entry by its unique identifier. This record originates from the community_ai_api_usage_logs table in the Prisma schema and contains comprehensive data including service provider references, API endpoints called, timing metrics, HTTP status, and error details.\n\nThe path parameter `id` must be a valid UUID representing the target API usage log entry.\n\nThis operation requires administrative authorization due to the sensitive nature of external service logs.","summary":"Retrieve a detailed external API usage log by ID","parameters":[{"name":"id","description":"Unique identifier of the API usage log entry","in":"path","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed API usage log information","typeName":"ICommunityAiApiUsageLog"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/communityAi/admin/apiUsageLogs/{id}","method":"get"},{"specification":"This operation provides a paginated, searchable list of audit log entries that capture system actions performed by users, administrators, moderators, or the system itself. Audit logs include metadata such as action type, description, IP address, user agent, and timestamps. This record set facilitates compliance monitoring, forensic analysis, and security auditing.\n\nThe data is sourced from the community_ai_audit_logs table in the Prisma schema. Filters and pagination criteria can be specified to narrow down results.\n\nThis endpoint is restricted to administrative users and returns result sets formatted with summary information optimized for listing.\n\nRequest filtering options are defined in the request body.","description":"Retrieve a filtered and paginated list of audit logs for system actions and events. This operation accesses the community_ai_audit_logs table in the Prisma schema, which records detailed immutable entries for compliance and forensic needs.\n\nUsers with administrative roles can utilize this endpoint to monitor system-wide activities including user actions, admin changes, and moderator interventions.\n\nThe request body supports advanced search and paging parameters.\n\nThe response returns paginated audit log summaries suitable for display in administrative UIs.","summary":"Search and retrieve paginated list of audit logs","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for audit logs filtering","typeName":"ICommunityAiAuditLog.IRequest"},"responseBody":{"description":"Paginated list of audit log entries matching search criteria","typeName":"IPageICommunityAiAuditLog.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/communityAi/admin/auditLogs","method":"patch"},{"specification":"This operation retrieves a specific detailed audit log entry identified by its unique ID. Each record represents an immutable audit trail entry recording system actions such as user events, administrative tasks, or moderator activities. Details include the action type, descriptive data, IP and user agent for traceability, and relevant timestamps.\n\nThe operation reads from the community_ai_audit_logs table in the Prisma schema, requiring a UUID path parameter for the log entry.\n\nOnly users with administrative privileges may access this sensitive audit data.\n\nThe response provides the full detailed audit log entity.","description":"Retrieve detailed information about a specific audit log entry by its unique identifier. The entry is sourced from the community_ai_audit_logs table in the Prisma schema and contains comprehensive metadata including user and admin references, action descriptions, and system context.\n\nThe path parameter `id` should be a valid UUID corresponding to the target audit log entry.\n\nAccess to this endpoint is restricted to administrators for security and privacy reasons.","summary":"Retrieve a detailed audit log by ID","parameters":[{"name":"id","description":"Unique identifier of the audit log entry","in":"path","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed audit log information","typeName":"ICommunityAiAuditLog"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/communityAi/admin/auditLogs/{id}","method":"get"},{"specification":"This operation creates a new audit log entry in the community_ai_audit_logs table. Audit logs capture detailed records of system actions including those by users, admins, moderators, and system events for compliance and forensic analysis. Each log entry is immutable and includes metadata such as IP address and user agent. This POST endpoint accepts information about the acting user or admin, the action type and a detailed description to be stored permanently with timestamps.","path":"/communityAi/admin/auditLogs","method":"post","summary":"Create a new audit log entry","description":"Creates a new audit log record representing an action performed by a user, admin, moderator, or system component. The operation requires identification of the actor (optional member, admin, or moderator ids), an action type string describing the performed event, and optional detailed description, including IP and user-agent context.\n\nSecurity considerations ensure only authorized services or administrators can create audit logs to maintain integrity. The audit log stores immutable historical data for compliance, forensic, and monitoring purposes.\n\nThis operation is directly linked to the community_ai_audit_logs table in the Prisma schema, ensuring all mandatory fields are properly handled. Timestamping and relations to users allow traceability and auditability.\n\nValidation ensures that provided references (ids) exist and that action types conform to known log types. Errors may result from invalid references or insufficient authorization.\n\nRelated API operations include update and delete, mainly for administrative reasons although audit logs generally should not be deleted.\n\nThis endpoint returns the created audit log object for confirmation.","parameters":[],"requestBody":{"description":"Data to create a community AI audit log entry","typeName":"ICommunityAiAuditLogs.ICreate"},"responseBody":{"description":"Created community AI audit log entry","typeName":"ICommunityAiAuditLogs"},"authorizationRoles":["admin"],"authorizationRole":"admin","authorizationType":null,"name":"create"},{"specification":"This operation updates an existing audit log entry identified by its unique ID. It modifies properties such as user references, action type, description, and related metadata. The community_ai_audit_logs table supports updating audit log entries primarily for maintenance or correction purposes.\n\nPATCH-like behavior is implemented through PUT for full record updates. All timestamps and relations are handled according to Prisma schema relations. Soft deletion timestamp is not manually changed here.\n\nSecurity implementation requires admin authorization due to the sensitive and critical nature of audit logs. Unauthorized attempts will be rejected.\n\nThis endpoint returns the updated audit log record confirming changes.","path":"/communityAi/admin/auditLogs/{id}","method":"put","summary":"Update an existing audit log entry","description":"Updates the specified audit log by its ID, allowing changes to user/admin/moderator associations, action type, and descriptive details.\n\nThis operation modifies immutable audit data only for legitimate maintenance or correction, and should be tightly controlled.\n\nInvalid or missing ID leads to errors. The underlying Prisma schema enforces constraints on foreign key relations and timestamp updates.\n\nUpdates do not affect audit log integrity beyond allowed fields. Related operations include creation and deletion endpoints.\n\nReturns the updated audit log object.","parameters":[{"name":"id","description":"Unique identifier of the target audit log entry","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated audit log data","typeName":"ICommunityAiAuditLogs.IUpdate"},"responseBody":{"description":"Updated community AI audit log entry","typeName":"ICommunityAiAuditLogs"},"authorizationRoles":["admin"],"authorizationRole":"admin","authorizationType":null,"name":"update"},{"specification":"This operation deletes an audit log entry permanently from the community_ai_audit_logs table. Since the audit log contains immutable records for compliance, deletion is a sensitive operation and requires admin authorization. The deletion here is a hard delete removing the record entirely.\n\nThe API expects the audit log ID to precisely target the record. After execution, the audit entry is irreversibly removed and cannot be recovered.\n\nThis endpoint does not return data. It is used only by system administrators for exceptional cases.\n\nNo soft delete mechanisms are changed by this operation; it's a full hard deletion.","path":"/communityAi/admin/auditLogs/{id}","method":"delete","summary":"Delete an audit log entry permanently","description":"Permanently erases the specified audit log entry from the system. This action removes all traces of the audit record from the storage.\n\nBecause audit logs are critical for compliance, this action should be restricted to highly privileged admins. The operation expects a valid log ID and will error if the entry does not exist.\n\nThis hard delete permanently removes the data and cannot be undone.\n\nRelated APIs exist for creating and updating audit logs.\n\nNo response body is returned upon successful deletion.","parameters":[{"name":"id","description":"Unique identifier of the target audit log entry","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"authorizationRole":"admin","authorizationType":null,"name":"erase"},{"specification":"This operation retrieves a paginated and filtered list of content access logs representing records of member interactions with posts and comments. The community_ai_content_access_logs table captures member identity, accessed content references, access type (e.g., view, edit), device info, IP address, and timestamps.\n\nThis PATCH endpoint supports complex search, filtering, sorting, and pagination capabilities to analyze user engagement and content usage behaviors.\n\nThe operation returns paginated content access logs optimized for analysis. Authorization is limited to admins and authorized moderators due to sensitive nature of user access activity.\n\nRelated API operations include detail retrieval by ID and export for audit purposes.","path":"/communityAi/admin/auditContentAccessLogs","method":"patch","summary":"List content access logs with filtering and pagination","description":"Retrieve a paginated, filtered list of content access records showing member interactions with posts and comments. Supports search criteria including access types, member IDs, date ranges, and device info.\n\nThis operation is essential for monitoring user behavior, auditing content popularity, and compliance tracking.\n\nThe endpoint includes pagination and sorting capabilities, returning summary data optimized for list display.\n\nSecurity and privacy considerations restrict access to authorized personnel only.\n\nTypical use involves audit dashboards and reporting tools. Errors occur if invalid filtering parameters are specified.\n\nReturns a paginated collection of content access log summaries matching search criteria.","parameters":[],"requestBody":{"description":"Search filter and pagination parameters for content access logs","typeName":"ICommunityAiContentAccessLogs.IRequest"},"responseBody":{"description":"Paginated list of content access log summaries","typeName":"IPageICommunityAiContentAccessLogs.ISummary"},"authorizationRoles":["admin","moderator"],"authorizationRole":"admin","authorizationType":null,"name":"index"},{"specification":"This operation retrieves a paginated and filtered list of content access logs representing records of member interactions with posts and comments. The community_ai_content_access_logs table captures member identity, accessed content references, access type (e.g., view, edit), device info, IP address, and timestamps.\n\nThis PATCH endpoint supports complex search, filtering, sorting, and pagination capabilities to analyze user engagement and content usage behaviors.\n\nThe operation returns paginated content access logs optimized for analysis. Authorization is limited to admins and authorized moderators due to sensitive nature of user access activity.\n\nRelated API operations include detail retrieval by ID and export for audit purposes.","path":"/communityAi/moderator/auditContentAccessLogs","method":"patch","summary":"List content access logs with filtering and pagination","description":"Retrieve a paginated, filtered list of content access records showing member interactions with posts and comments. Supports search criteria including access types, member IDs, date ranges, and device info.\n\nThis operation is essential for monitoring user behavior, auditing content popularity, and compliance tracking.\n\nThe endpoint includes pagination and sorting capabilities, returning summary data optimized for list display.\n\nSecurity and privacy considerations restrict access to authorized personnel only.\n\nTypical use involves audit dashboards and reporting tools. Errors occur if invalid filtering parameters are specified.\n\nReturns a paginated collection of content access log summaries matching search criteria.","parameters":[],"requestBody":{"description":"Search filter and pagination parameters for content access logs","typeName":"ICommunityAiContentAccessLogs.IRequest"},"responseBody":{"description":"Paginated list of content access log summaries","typeName":"IPageICommunityAiContentAccessLogs.ISummary"},"authorizationRoles":["admin","moderator"],"authorizationRole":"moderator","authorizationType":null,"name":"index"},{"specification":"Retrieve detailed information about a specific content access log entry by UUID, representing a member's access event on community content including post or comment identifiers, access type, device info, and IP address. Corresponds to community_ai_content_access_logs table in Prisma.","path":"/communityAi/admin/auditContentAccessLogs/{id}","method":"get","summary":"Retrieve a specific communityAi content access log entry by ID","description":"Retrieve detailed information about a specific content access log entry by its unique identifier. This operation fetches the access event data including member ID, accessed post or comment, access type, device information, IP address, and timestamps.\n\nThis endpoint requires admin authorization to secure audit data.\n\nThe operation respects the community_ai_content_access_logs Prisma schema ensuring accurate mapping.\n\nPath parameter 'id' is validated as UUID.\n\nReturns a single access log record.","parameters":[{"name":"id","description":"Unique identifier of the content access log entry","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete content access log record","typeName":"ICommunityAiAuditCommunityAiContentAccessLog"},"authorizationType":null,"authorizationRole":"admin","name":"at"},{"specification":"Create a new entry recording a communityAi member's access to community content. This operation inserts a new record into the community_ai_content_access_logs database table. The required data includes the member's ID, optional post ID, optional comment ID, access type such as 'view' or 'edit', and optional device and IP address information. Timestamps for creation and updates are handled by the system.\n\nThe operation validates the input payload according to Prisma schema fields and constraints.\n\nCreated entries support later auditing, compliance checks, and activity tracking.","path":"/communityAi/admin/auditContentAccessLogs","method":"post","summary":"Create a new communityAi content access log entry","description":"Create a new communityAi content access log entry to record a member's interaction with posts or comments. Validates input including member association, accessed content references, access type, and optional metadata.\n\nThe API ensures data integrity and timestamps the creation automatically.\n\nAuthorization requires elevated roles such as admin to securely add audit records.\n\nSuccessful creation returns the full stored content access log entry.","parameters":[],"requestBody":{"description":"Data required to create a communityAi content access log entry","typeName":"ICommunityAiAuditCommunityAiContentAccessLogICreate"},"responseBody":{"description":"Newly created communityAi content access log entry","typeName":"ICommunityAiAuditCommunityAiContentAccessLog"},"authorizationType":null,"authorizationRole":"admin","name":"create"},{"specification":"Update an existing communityAi content access log entry identified by its unique ID. This operation allows modification of allowed fields such as accessed post, comment, access type, device info, and IP address according to the Prisma schema. It securely updates the record with proper validation and updates the timestamp.\n\nSoft-deletion is not reversed or altered by this operation.\n\nAuthorization is restricted to admin role for audit log integrity.\n\nSuccessful completion returns the updated content access log entry with new modification timestamp.","path":"/communityAi/admin/auditContentAccessLogs/{id}","method":"put","summary":"Update a specific communityAi content access log entry by ID","description":"Update an existing communityAi content access log entry using the unique identifier. Validates update payload fields and enforces schema constraints.\n\nUpdates pertain to user content access events and audit integrity.\n\nRequires admin authorization to perform.\n\nReturns the updated content access log data on success.\n\nHandles errors such as invalid IDs or data validation failures.","parameters":[{"name":"id","description":"Unique identifier of the content access log to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated data for communityAi content access log entry","typeName":"ICommunityAiAuditCommunityAiContentAccessLogIUpdate"},"responseBody":{"description":"Updated communityAi content access log entry","typeName":"ICommunityAiAuditCommunityAiContentAccessLog"},"authorizationType":null,"authorizationRole":"admin","name":"update"},{"specification":"Delete a specific entry of communityAi content access logs identified by its unique ID. This operation permanently removes the record from the community_ai_content_access_logs table.\n\nThe deletion is a hard delete since the schema supports deleted_at as soft delete, but this endpoint is designed to erase completely.\n\nOnly authorized admin roles can perform this sensitive operation to protect audit data integrity.\n\nSuccessful completion results in permanent removal of the content access log entry with no response body.","path":"/communityAi/admin/auditContentAccessLogs/{id}","method":"delete","summary":"Delete a specific communityAi content access log entry by ID","description":"Permanently erase a communityAi content access log entry by its unique ID. This operation removes the data entirely from the system without the possibility of recovery.\n\nRequires admin authorization due to audit sensitivity.\n\nErrors occur if the ID is invalid or the entry does not exist.\n\nNo response body is returned upon success.\n\nUse cautiously as this action is irreversible.","parameters":[{"name":"id","description":"Unique identifier of the content access log to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase"},{"specification":"This operation retrieves a paginated list of Community AI post edit history records, enabling clients to search and filter edit history entries for posts and comments. It uses the community_ai_edit_histories table from the Prisma DB schema, which records all edits made by members with relevant metadata for auditing and traceability.","path":"/communityAi/admin/auditEditHistories","method":"patch","summary":"Retrieve a paginated list of Community AI edit histories with search and filtering","description":"Retrieve a filtered and paginated list of edit history records related to posts and comments within the Community AI system. Each record contains details about the change event including the editor (community_ai_members), references to the post or comment edited, edit type, and before/after content snapshots.\n\nThis operation supports advanced search criteria such as filtering by editedByMember, edit type, date ranges, and associated post or comment IDs.\n\nSecurity considerations ensure that only users with appropriate roles can access historical edit data. Audit logs are crucial for compliance and content traceability.\n\nThe community_ai_edit_histories table stores immutable audit information and this operation allows clients to explore these audit trails programmatically for governance and review purposes.","parameters":[],"requestBody":{"description":"Search and pagination parameters for listing Community AI edit histories","typeName":"ICommunityAiAuditEditHistory.IRequest"},"responseBody":{"description":"Paginated list of edit history records matching search criteria","typeName":"IPageICommunityAiAuditEditHistory"},"authorizationType":null,"authorizationRole":"admin","name":"index"},{"specification":"This operation retrieves a paginated list of Community AI post edit history records, enabling clients to search and filter edit history entries for posts and comments. It uses the community_ai_edit_histories table from the Prisma DB schema, which records all edits made by members with relevant metadata for auditing and traceability.","path":"/communityAi/moderator/auditEditHistories","method":"patch","summary":"Retrieve a paginated list of Community AI edit histories with search and filtering","description":"Retrieve a filtered and paginated list of edit history records related to posts and comments within the Community AI system. Each record contains details about the change event including the editor (community_ai_members), references to the post or comment edited, edit type, and before/after content snapshots.\n\nThis operation supports advanced search criteria such as filtering by editedByMember, edit type, date ranges, and associated post or comment IDs.\n\nSecurity considerations ensure that only users with appropriate roles can access historical edit data. Audit logs are crucial for compliance and content traceability.\n\nThe community_ai_edit_histories table stores immutable audit information and this operation allows clients to explore these audit trails programmatically for governance and review purposes.","parameters":[],"requestBody":{"description":"Search and pagination parameters for listing Community AI edit histories","typeName":"ICommunityAiAuditEditHistory.IRequest"},"responseBody":{"description":"Paginated list of edit history records matching search criteria","typeName":"IPageICommunityAiAuditEditHistory"},"authorizationType":null,"authorizationRole":"moderator","name":"index"},{"specification":"This operation retrieves a specific Community AI edit history record by its unique ID (UUID). The record provides detailed information about the editing action performed by a member on a particular post or comment, including the content changes before and after the edit, timestamps, and edit type. The data is sourced from the community_ai_edit_histories Prisma DB table.","path":"/communityAi/admin/auditEditHistories/{id}","method":"get","summary":"Get a Community AI edit history record by ID","description":"Retrieve detailed information for a specific edit history record identified by its unique ID. The record includes editor details, the content before and after the edit, associated post or comment IDs, edit type, and timestamps.\n\nThis operation is essential for audit and compliance scenarios, enabling authorized users to view precise edit event details.\n\nThe community_ai_edit_histories table records are immutable for audit integrity, and this endpoint provides read-only access.\n\nAccess is limited to roles with permission to access audit data such as admin and moderator roles.","parameters":[{"name":"id","description":"Unique identifier of the edit history record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the requested edit history record","typeName":"ICommunityAiAuditEditHistory"},"authorizationType":null,"authorizationRole":"admin","name":"at"},{"specification":"This operation retrieves a specific Community AI edit history record by its unique ID (UUID). The record provides detailed information about the editing action performed by a member on a particular post or comment, including the content changes before and after the edit, timestamps, and edit type. The data is sourced from the community_ai_edit_histories Prisma DB table.","path":"/communityAi/moderator/auditEditHistories/{id}","method":"get","summary":"Get a Community AI edit history record by ID","description":"Retrieve detailed information for a specific edit history record identified by its unique ID. The record includes editor details, the content before and after the edit, associated post or comment IDs, edit type, and timestamps.\n\nThis operation is essential for audit and compliance scenarios, enabling authorized users to view precise edit event details.\n\nThe community_ai_edit_histories table records are immutable for audit integrity, and this endpoint provides read-only access.\n\nAccess is limited to roles with permission to access audit data such as admin and moderator roles.","parameters":[{"name":"id","description":"Unique identifier of the edit history record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the requested edit history record","typeName":"ICommunityAiAuditEditHistory"},"authorizationType":null,"authorizationRole":"moderator","name":"at"},{"specification":"This operation creates a new Community AI edit history record, documenting changes made by members to posts or comments. The record includes metadata such as editor ID, edit type, and before/after content snapshots for auditing purposes. It interacts with the community_ai_edit_histories table in the Prisma DB, which maintains edit audit records.","path":"/communityAi/admin/auditEditHistories","method":"post","summary":"Create a new Community AI edit history record","description":"Create a new edit history entry to track changes made to posts or comments by community members. This record captures the state of content before and after edits, as well as edit type and timestamps.\n\nThe operation helps maintain a comprehensive audit trail required for compliance and content moderation review.\n\nData integrity is critical; only validated edit actions should be stored. The audit history serves as an immutable record once created.\n\nAccess to creation is typically granted only to trusted system components or services that handle edit tracking.","parameters":[],"requestBody":{"description":"Information needed to create a new edit history record","typeName":"ICommunityAiAuditEditHistory.ICreate"},"responseBody":{"description":"The created edit history record with detailed info","typeName":"ICommunityAiAuditEditHistory"},"authorizationRoles":["admin","moderator"],"name":"create","authorizationRole":"admin","authorizationType":null},{"specification":"This operation creates a new Community AI edit history record, documenting changes made by members to posts or comments. The record includes metadata such as editor ID, edit type, and before/after content snapshots for auditing purposes. It interacts with the community_ai_edit_histories table in the Prisma DB, which maintains edit audit records.","path":"/communityAi/moderator/auditEditHistories","method":"post","summary":"Create a new Community AI edit history record","description":"Create a new edit history entry to track changes made to posts or comments by community members. This record captures the state of content before and after edits, as well as edit type and timestamps.\n\nThe operation helps maintain a comprehensive audit trail required for compliance and content moderation review.\n\nData integrity is critical; only validated edit actions should be stored. The audit history serves as an immutable record once created.\n\nAccess to creation is typically granted only to trusted system components or services that handle edit tracking.","parameters":[],"requestBody":{"description":"Information needed to create a new edit history record","typeName":"ICommunityAiAuditEditHistory.ICreate"},"responseBody":{"description":"The created edit history record with detailed info","typeName":"ICommunityAiAuditEditHistory"},"authorizationRoles":["admin","moderator"],"name":"create","authorizationRole":"moderator","authorizationType":null},{"specification":"This operation updates an existing Community AI edit history record by its unique ID. It modifies stored information about edits made to posts or comments, including content snapshots, edit type, and timestamps. The modification reflects changes in the audit trail stored in the community_ai_edit_histories table of the Prisma DB.","path":"/communityAi/admin/auditEditHistories/{id}","method":"put","summary":"Update a Community AI edit history record by ID","description":"Modify an existing edit history record to update information about edits made by members on posts or comments. Updates may include the before/after content, edit type, or timestamps.\n\nAudit trail consistency is important; updates should be controlled and logged.\n\nAccess is typically restricted to administrative users or automated processes managing audit data.\n\nThe community_ai_edit_histories table holds versioned content changes to facilitate historical analysis and moderation.","parameters":[{"name":"id","description":"Unique identifier of the edit history record","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated information for the edit history record","typeName":"ICommunityAiAuditEditHistory.IUpdate"},"responseBody":{"description":"The updated edit history record with detailed info","typeName":"ICommunityAiAuditHistory"},"authorizationRoles":["admin","moderator"],"name":"update","authorizationRole":"admin","authorizationType":null},{"specification":"This operation updates an existing Community AI edit history record by its unique ID. It modifies stored information about edits made to posts or comments, including content snapshots, edit type, and timestamps. The modification reflects changes in the audit trail stored in the community_ai_edit_histories table of the Prisma DB.","path":"/communityAi/moderator/auditEditHistories/{id}","method":"put","summary":"Update a Community AI edit history record by ID","description":"Modify an existing edit history record to update information about edits made by members on posts or comments. Updates may include the before/after content, edit type, or timestamps.\n\nAudit trail consistency is important; updates should be controlled and logged.\n\nAccess is typically restricted to administrative users or automated processes managing audit data.\n\nThe community_ai_edit_histories table holds versioned content changes to facilitate historical analysis and moderation.","parameters":[{"name":"id","description":"Unique identifier of the edit history record","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated information for the edit history record","typeName":"ICommunityAiAuditEditHistory.IUpdate"},"responseBody":{"description":"The updated edit history record with detailed info","typeName":"ICommunityAiAuditHistory"},"authorizationRoles":["admin","moderator"],"name":"update","authorizationRole":"moderator","authorizationType":null},{"specification":"This operation permanently deletes an edit history record identified by its unique ID from the community_ai_edit_histories table in the Prisma schema. The community_ai_edit_histories table stores audit records of edits made to posts and comments including editor identity, edit type, before and after content, and timestamps. The API facilitates removal of an edit history record on request by authorized users (usually admins or moderators with appropriate permissions). The operation deletes the record from the database, removing all associated audit trail information for the specified edit history ID. No request body is needed, and the operation expects only the edit history ID parameter in the path. The response does not return any content. This endpoint is essential for administrative and data governance tasks where specific edit histories must be erased.","path":"/communityAi/admin/auditEditHistories/{id}","method":"delete","summary":"Delete a specific edit history record by ID","description":"Deletes the edit history record identified by the provided unique ID from the community_ai_edit_histories table. \n\nThis operation allows authorized users to permanently remove edit history data related to posts or comments. Edit histories include details such as which member edited the content, the type of edit performed, and content before and after the edit. \n\nOnly users with appropriate authorization roles should execute this operation to ensure audit trails are preserved when necessary. The deletion is hard, removing the record entirely from the system.\n\nPath parameter `id` must be a valid UUID corresponding to an existing edit history record. No request body is needed. The server returns a success status upon deletion without content.\n\nThis operation is closely related to other content auditing APIs such as retrieving edit histories and managing posts and comments, but specifically targets removal of audit records.","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the edit history record"}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase"},{"specification":"This operation permanently deletes an edit history record identified by its unique ID from the community_ai_edit_histories table in the Prisma schema. The community_ai_edit_histories table stores audit records of edits made to posts and comments including editor identity, edit type, before and after content, and timestamps. The API facilitates removal of an edit history record on request by authorized users (usually admins or moderators with appropriate permissions). The operation deletes the record from the database, removing all associated audit trail information for the specified edit history ID. No request body is needed, and the operation expects only the edit history ID parameter in the path. The response does not return any content. This endpoint is essential for administrative and data governance tasks where specific edit histories must be erased.","path":"/communityAi/moderator/auditEditHistories/{id}","method":"delete","summary":"Delete a specific edit history record by ID","description":"Deletes the edit history record identified by the provided unique ID from the community_ai_edit_histories table. \n\nThis operation allows authorized users to permanently remove edit history data related to posts or comments. Edit histories include details such as which member edited the content, the type of edit performed, and content before and after the edit. \n\nOnly users with appropriate authorization roles should execute this operation to ensure audit trails are preserved when necessary. The deletion is hard, removing the record entirely from the system.\n\nPath parameter `id` must be a valid UUID corresponding to an existing edit history record. No request body is needed. The server returns a success status upon deletion without content.\n\nThis operation is closely related to other content auditing APIs such as retrieving edit histories and managing posts and comments, but specifically targets removal of audit records.","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the edit history record"}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"moderator","name":"erase"}],"components":{"authorization":[{"name":"admin","description":"System administrators with full control over user management, AI features configuration, and content moderation.","kind":"admin"},{"name":"moderator","description":"Moderators responsible for content review, flagging, and managing user-generated posts and comments.","kind":"member"},{"name":"member","description":"Regular authenticated users who can create posts and comments, use AI commenting and fact-checking features.","kind":"member"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageICommunityAiCommunityAiSystemSettings":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityAiCommunityAiSystemSettings"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityAiRoles.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityAiRoles.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityAiPermission.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityAiPermission.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityAiExternalService.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityAiExternalService.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityAiAdmin":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityAiAdmin"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityAiModerator.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityAiModerator.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityAiMember.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityAiMember.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityAiPosts.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityAiPosts.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityAiPosts":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityAiPosts"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityAiComment.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityAiComment.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityAiComments.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityAiComments.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityAiAiCommentSuggestion.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityAiAiCommentSuggestion.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityAiCommentSentimentAnalysis":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityAiCommentSentimentAnalysis"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityAiAiGeneratedReplies":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityAiAiGeneratedReplies"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityAiFactcheckClaims.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityAiFactcheckClaims.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityAiFactcheckResult":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityAiFactcheckResult"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityAiFactcheckFlag.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityAiFactcheckFlag.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityAiContentFlag.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityAiContentFlag.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityAiModeratorReviews.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityAiModeratorReviews.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityAiUserReports.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityAiUserReports.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityAiModeratorReview":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityAiModeratorReview"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityAiAdminAction.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityAiAdminAction.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityAiNotification.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityAiNotification.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityAiNotificationStatus":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityAiNotificationStatus"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityAiUserNotificationPreference.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityAiUserNotificationPreference.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityAiUserSessions.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityAiUserSessions.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityAiUserSessionJwtToken":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityAiUserSessionJwtToken"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityAiAiServiceProviders":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityAiAiServiceProviders"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityAiNotificationProvider.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityAiNotificationProvider.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityAiApiUsageLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityAiApiUsageLog"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityAiAuditLog.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityAiAuditLog.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityAiContentAccessLogs.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityAiContentAccessLogs.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityAiAuditEditHistory":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityAiAuditEditHistory"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"ICommunityAiAdmin.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Unique email address of the admin user for login and contact."},"password_hash":{"type":"string","description":"Hash of the admin's password for authentication purposes."},"display_name":{"type":"string","description":"Admin user's display name or nickname."}},"required":["email","password_hash","display_name"],"description":"Data required to create a new admin user.\n\nEmail must be unique and valid.\nPassword_hash is the password hash string.\nDisplay_name is the admin's display name."},"ICommunityAiAdmin.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Unique email address of the admin user for login and contact."},"password_hash":{"type":"string","description":"Hash of the admin's password for authentication purposes."}},"required":["email","password_hash"],"description":"Admin login credentials.\n\nEmail and password_hash are required for authentication.\nEmail must be a valid email string and registered.\nPassword_hash is expected to be already hashed."},"ICommunityAiAdmin.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token"}},"required":["refresh_token"],"description":"Refresh token request.\n\nContains the refresh token string used to obtain new JWT access tokens.\nToken must be valid and unexpired."},"ICommunityAiAdmin.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated admin user"},"email":{"type":"string","description":"Unique email address of the admin user for login and contact."},"password_hash":{"type":"string","description":"Hash of the admin's password for authentication purposes."},"display_name":{"type":"string","description":"Admin user's display name or nickname."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the admin user was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the admin user was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the admin user was soft deleted, if applicable."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","password_hash","display_name","created_at","updated_at","token"],"description":"Authorization response containing JWT token.\n\nReturned after successful authentication operations such as login or join.\nIncludes the admin user's unique ID and token property referencing JWT info."},"ICommunityAiModerator":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the moderator user."},"email":{"type":"string","description":"The moderator's unique email address for login and contact."},"password_hash":{"type":"string","description":"Hashed password of the moderator user. This field is sensitive and should not be exposed in response types."},"display_name":{"type":"string","description":"Display name or nickname of the moderator user."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the moderator user was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the moderator user was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the moderator was deleted (soft delete). Nullable."}},"required":["id","email","password_hash","display_name","created_at","updated_at"],"description":"Moderator user entity representing users with moderation privileges in the community AI platform."},"ICommunityAiModerator.ICreate":{"type":"object","properties":{"email":{"type":"string","description":"Unique email address of the moderator user for login and contact."},"password_hash":{"type":"string","description":"Hash of the moderator's password for authentication purposes. Stored securely, not plain text."},"display_name":{"type":"string","description":"Moderator user's display name or nickname for display purposes."}},"required":["email","password_hash","display_name"],"description":"Request body for creating a new moderator user account.\n\nIncludes the email, password hash, and display name.\n\nUsed in registration processes, ensuring required identity data is provided."},"ICommunityAiModerator.ILogin":{"type":"object","properties":{"email":{"type":"string","description":"Email address for moderator login."},"password":{"type":"string","description":"Plain text password provided by the user during login."}},"required":["email","password"],"description":"Request body for moderator login operation.\n\nContains email and plain text password credentials."},"ICommunityAiModerator.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token string used to get new access tokens."}},"required":["refresh_token"],"description":"Request body for refreshing JWT tokens for moderator users."},"ICommunityAiModerator.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated moderator"},"email":{"type":"string","description":"The moderator's unique email address for login and contact."},"password_hash":{"type":"string","description":"Hashed password of the moderator user. This field is sensitive and should not be exposed in response types."},"display_name":{"type":"string","description":"Display name or nickname of the moderator user."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the moderator user was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the moderator user was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the moderator was deleted (soft delete). Nullable."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"},"moderator":{"$ref":"#/components/schemas/ICommunityAiModerator","description":"Moderator user information excluding sensitive data"}},"required":["id","email","password_hash","display_name","created_at","updated_at","token"],"description":"Authorization response including JWT tokens and moderator user info."},"ICommunityAiMember":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the member user"},"email":{"type":"string","description":"Member user's unique email address for login and contact"},"display_name":{"type":"string","description":"Member user's display name or nickname"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the member was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the member was last updated"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the member was soft deleted, if applicable"}},"required":["id","email","display_name","created_at","updated_at"],"description":"Member user entity representing community participants who can create content.\n\nThis type corresponds exactly to the Prisma database model community_ai_members, including all fields and relations pertinent to user management and content.\n\nSensitive data like password hashes are intentionally excluded from response types to protect security."},"ICommunityAiMember.ICreate":{"type":"object","properties":{"email":{"type":"string","description":"Unique email address of the member user for login and contact."},"password_hash":{"type":"string","description":"Hash of the member's password for authentication purposes."},"display_name":{"type":"string","description":"Member user's display name or nickname."}},"required":["email","password_hash","display_name"],"description":"Data required to create a new member user with unique email, password hash, and display name."},"ICommunityAiMember.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"email":{"type":"string","description":"Member user's unique email address for login and contact"},"display_name":{"type":"string","description":"Member user's display name or nickname"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the member was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the member was last updated"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the member was soft deleted, if applicable"},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","display_name","created_at","updated_at","token"],"description":"Authorized response with JWT tokens and user info after authentication."},"ICommunityAiMember.ILogin":{"type":"object","properties":{"email":{"type":"string","description":"Unique email address of the member user for login and contact."},"password_hash":{"type":"string","description":"Hash of the member's password for authentication purposes."}},"required":["email","password_hash"],"description":"Login data for member users requiring email and password hash."},"ICommunityAiMember.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Valid refresh token string for renewal."}},"required":["refresh_token"],"description":"Refresh token request data containing refresh token string for token renewal."},"ICommunityAiCommunityAiSystemSettings.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number.\n\nDetermines which page of the paginated results is requested.\n\n@minimum 1\n@default 1"},"limit":{"oneOf":[{"type":"integer","minimum":1,"maximum":1000},{"type":"null"}],"description":"Limitation of records per a page.\n\nDefines the maximum number of records returned in a single paginated response.\n\n@minimum 1\n@maximum 1000\n@default 20"},"searchKey":{"oneOf":[{"type":"string","minLength":1,"maxLength":255},{"type":"null"}],"description":"Search by setting key.\n\nAllows filtering settings by their unique keys.\n\n@minLength 1\n@maxLength 255"},"searchValue":{"oneOf":[{"type":"string","maxLength":10000},{"type":"null"}],"description":"Search by setting value substring.\n\nEnables filtering by partial matching of the setting's value.\n\n@maxLength 10000"},"createdAfter":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Date range start filter for creation date.\n\nFilters settings created on or after this date/time.\n\n@format date-time"},"createdBefore":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Date range end filter for creation date.\n\nFilters settings created before or on this date/time.\n\n@format date-time"},"updatedAfter":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Date range start filter for last updated date.\n\nFilters settings updated on or after this date/time.\n\n@format date-time"},"updatedBefore":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Date range end filter for last updated date.\n\nFilters settings updated before or on this date/time.\n\n@format date-time"}},"description":"Request parameters to filter and paginate community AI system settings.\n\nIncludes paging controls, textual search filters, and date range constraints for both creation and update timestamps.","required":[]},"ICommunityAiCommunityAiSystemSettings":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier for the system setting."},"setting_key":{"type":"string","description":"Unique key identifying the system setting.\n\nRepresents the name of a configuration parameter controlling system behaviour.\n\n@minLength 1\n@maxLength 255"},"setting_value":{"type":"string","description":"Value of the system setting as string.\n\nRepresents the value associated with the 'setting_key', controlling feature or platform parameters.\n\n@minLength 0\n@maxLength 10000"},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional human-readable description of the setting purpose and usage.\n\nProvides admins with context about this configuration parameter.\nCan be null when no description is available."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp.\n\nThe time at which this setting record was created."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp.\n\nThe last time this setting was modified."}},"required":["id","setting_key","setting_value","created_at","updated_at"],"description":"Community AI platform system configuration setting record.\n\nStores key-value pairs defining operational parameters such as feature toggles and system modes.\n\nUnique keys ensure unambiguous configurations.\n\nEach record tracks creation and modification timestamps for auditing."},"ICommunityAiCommunityAiSystemSettings.ICreate":{"type":"object","properties":{"setting_key":{"type":"string","description":"Unique key identifying the system setting.\n\nMandatory unique identifier for the system configuration.\n\n@minLength 1\n@maxLength 255"},"setting_value":{"type":"string","description":"Value of the system setting as string.\n\nValue to assign to the setting key.\n\n@minLength 0\n@maxLength 10000"},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description for the setting.\n\nProvides additional contextual information for administrators."}},"required":["setting_key","setting_value"],"description":"Data required to create a new community AI system setting.\n\nThis represents a key-value pair configuration with an optional description."},"ICommunityAiCommunityAiSystemSettings.IUpdate":{"type":"object","properties":{"setting_value":{"oneOf":[{"type":"string","maxLength":10000},{"type":"null"}],"description":"Value of the system setting as string.\n\nUpdated value for the configuration key.\n\n@minLength 0\n@maxLength 10000"},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description for the setting.\n\nAllows changing or clearing the descriptive text."}},"required":[],"description":"Data fields allowed to update in an existing system setting.\n\nThis includes setting value and optional description."},"ICommunityAiRoles":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the user role."},"role_name":{"type":"string","description":"Unique name of the user role."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Detailed description of the role and its purpose in the system."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp."}},"required":["id","role_name","created_at","updated_at"],"description":"User role entity representing different authorization levels and permissions within the Community AI system. This entity defines role names, descriptions, and audit timestamps to support role-based access control.\n\nThis schema corresponds to the Prisma schema 'community_ai_roles' and encapsulates all necessary properties for role management and enforcement in API operations."},"ICommunityAiRoles.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number for pagination. Defaults to 1 if unspecified."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Limit of roles per page. Defaults to 20 if unspecified."},"role_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Role name filter allowing case-insensitive matching."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Description filter allowing case-insensitive matching."},"order":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort direction: ascending or descending."},"order_by":{"oneOf":[{"const":"role_name"},{"const":"created_at"},{"type":"null"}],"description":"Field to sort results by."}},"description":"Request parameters for filtering and paginating user roles. Supports searching by role name and description with sorting options.","required":[]},"ICommunityAiRoles.ICreate":{"type":"object","properties":{"role_name":{"type":"string","description":"Unique name of the user role to create."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description of the user role."}},"required":["role_name"],"description":"Data required to create a new user role including unique role name and optional description."},"ICommunityAiRole.IUpdate":{"type":"object","properties":{"role_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Updated unique name of the user role."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Updated description of the user role."}},"required":[],"description":"Data used to update existing user roles. Fields are optional and can be null."},"ICommunityAiRole":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the user role."},"role_name":{"type":"string","description":"Unique role name within the community AI system. Roles define user permission groups such as admin or moderator."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional descriptive explanation of the role's purpose."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the role was created. ISO 8601 date-time string."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the role was last updated. ISO 8601 date-time string."}},"required":["id","role_name","created_at","updated_at"],"description":"User role entity representing access control groups within the community AI platform.\n\nContains role names and descriptions associating permissions and responsibilities.\nUsed for assigning roles to users and enforcing authorization policies.\n\nReflects the community_ai_roles table from the Prisma schema."},"ICommunityAiPermission.IRequest":{"type":"object","properties":{"permission_name":{"type":"string","description":"Filter by partial or full permission name."},"page":{"oneOf":[{"type":"number","format":"double","description":"Pagination page number; minimum 1."},{"type":"null"}],"description":"Pagination page number; minimum 1."},"limit":{"oneOf":[{"type":"number","format":"double","description":"Pagination limit; minimum 1, maximum 100, default is 20."},{"type":"null"}],"description":"Pagination limit; minimum 1, maximum 100, default is 20."}},"required":[],"description":"Request body for searching and filtering permissions.\n\nSupports filtering by permission_name, date ranges, pagination."},"ICommunityAiPermission":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the permission."},"permission_name":{"type":"string","description":"Unique permission name representing a capability."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional human-readable description of the permission."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp in ISO 8601 format."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp in ISO 8601 format."}},"required":["id","permission_name","created_at","updated_at"],"description":"Permission management entity defining discrete permissions.\n\nGoverns access rights, associated with roles for fine-grained control.\n\nMapped from community_ai_permissions table in the Prisma schema."},"ICommunityAiPermission.ICreate":{"type":"object","properties":{"permission_name":{"type":"string","description":"Unique permission name identifying the access right."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description explaining the permission."}},"required":["permission_name"],"description":"Data required to create a new permission.\n\nMust include a unique permission name, optional description."},"ICommunityAiPermission.IUpdate":{"type":"object","properties":{"permission_name":{"type":"string","description":"Unique identifier name for the permission."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Detailed explanation of what actions the permission allows."}},"required":["permission_name"],"description":"Property schema for updating a community AI permission entity, allowing optional modification of the permission name and description.\n\nSecurity: This schema is used for update operations ensuring flexibility and partial update capabilities."},"ICommunityAiExternalService.IRequest":{"type":"object","properties":{"service_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Unique name of the external service used for filtering."},"is_active":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Flag indicating if the service is currently active and enabled for filtering."},"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Record creation timestamp used for filtering."},"updated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Record last update timestamp used for filtering."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Limit of records per page for pagination."},"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number for pagination."}},"required":[],"description":"Request schema for querying external system services with optional filtering by service name, active status, and timestamps. Supports pagination parameters to control data retrieval size and pages."},"ICommunityAiExternalServices":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"service_name":{"type":"string","description":"Unique name of the external service."},"api_endpoint":{"type":"string","description":"URI endpoint for API access to the external service."},"auth_token":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Authentication token or key for service API calls, may be null if not needed."},"is_active":{"type":"boolean","description":"Flag indicating if the service is currently active and enabled."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp."}},"required":["id","service_name","api_endpoint","is_active","created_at","updated_at"],"description":"Community AI external system service entity representing registered AI, notification, or integration providers configured in the platform."},"ICommunityAiExternalServices.ICreate":{"type":"object","properties":{"service_name":{"type":"string","description":"Unique name of the external service."},"api_endpoint":{"type":"string","description":"URI endpoint for API access to the external service."},"auth_token":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Authentication token or key for service API calls, may be null if not needed."},"is_active":{"type":"boolean","description":"Flag indicating if the service is currently active and enabled."}},"required":["service_name","api_endpoint","is_active"],"description":"Request body schema for creating a new external system service record with service name, API endpoint, optional authentication token, and active status flag."},"ICommunityAiExternalServices.IUpdate":{"type":"object","properties":{"service_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Unique name of the external service."},"api_endpoint":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"URI endpoint for API access to the external service."},"auth_token":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Authentication token or key for service API calls, may be null if not needed."},"is_active":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Flag indicating if the service is currently active and enabled."},"id":{"type":"string","format":"uuid","description":"Primary Key."}},"required":["id"],"description":"Represents updateable properties of an external AI or system integration service.\n\nAllows partial update of service configuration such as service name, API endpoint,\nauthentication token, and activity status. All fields are optional and may be null to clear values.\n\nThis schema enforces uniqueness and integrity by restricting updates to valid service records."},"ICommunityAiAdmin.IRequest":{"type":"object","properties":{"email":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Unique email address of the admin user for login and contact."},"password_hash":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Hash of the admin's password for authentication purposes."},"display_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Admin user's display name or nickname."},"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the admin user was created."},"updated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the admin user was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the admin user was soft deleted, if applicable."}},"required":[],"description":"Represents request criteria for searching or filtering admin users.\n\nAllows filtering based on email, password hash, display name, creation,\nupdate, and deletion timestamps. All fields are optional and nullable\n to support partial queries.\n\nUsed primarily for paginated searches of admin user records."},"ICommunityAiAdmin":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"email":{"type":"string","description":"Unique email address of the admin user for login and contact."},"password_hash":{"type":"string","description":"Hash of the admin's password for authentication purposes."},"display_name":{"type":"string","description":"Admin user's display name or nickname."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the admin user was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the admin user was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the admin user was soft deleted, if applicable."}},"required":["id","email","password_hash","display_name","created_at","updated_at"],"description":"Table representing admin users with full system control including user\nmanagement, content moderation, and AI feature configuration. Each admin\nhas unique identity attributes and audit timestamps."},"ICommunityAiAdmin.IUpdate":{"type":"object","properties":{"email":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Unique email address of the admin user for login and contact."},"password_hash":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Hash of the admin's password for authentication purposes."},"display_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Admin user's display name or nickname."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the admin user was soft deleted, if applicable."}},"required":[],"description":"Represents updateable information for an admin user account.\n\nAllows partial update of email, password hash, display name, and soft deletion timestamp.\nAll fields are optional and may be null to clear values.\n\nPreserves integrity by enforcing valid UUID and string formats."},"ICommunityAiModerator.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","format":"uint32"},{"type":"null"}],"description":"Page number for pagination (unsigned 32-bit integer)."},"limit":{"oneOf":[{"type":"integer","format":"uint32"},{"type":"null"}],"description":"Maximum number of items per page (unsigned 32-bit integer)."},"email":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter moderators by email address."},"display_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter moderators by display name."},"created_at_start":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter moderators created after this date/time."},"created_at_end":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter moderators created before this date/time."}},"required":[],"description":"Request parameters for filtering and paginating moderators list."},"ICommunityAiModerator.IUpdate":{"type":"object","properties":{"email":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Moderator user email address to update, nullable."},"password_hash":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Hashed password to update, nullable."},"display_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Display name to update, nullable."}},"required":[],"description":"Properties for updating a moderator user. All fields optional."},"ICommunityAiMember.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","format":"uint32"},{"type":"null"}],"description":"Page number to fetch (unsigned 32-bit integer)"},"limit":{"oneOf":[{"type":"integer","format":"uint32"},{"type":"null"}],"description":"Number of entries per page (unsigned 32-bit integer)"},"email":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by member email address."},"display_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by display name."},"created_at_start":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter members created after this date/time (ISO 8601)"},"created_at_end":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter members created before this date/time (ISO 8601)"}},"required":[],"description":"Request parameters for filtering and paginating member list."},"ICommunityAiMember.IUpdate":{"type":"object","properties":{"email":{"type":"string","description":"Optional updated email address"},"password_hash":{"type":"string","description":"Optional updated password hash"},"display_name":{"type":"string","description":"Optional updated display name"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional timestamp for soft deletion"},"holderMethodName":{"type":"string","description":"Holder method name for the system internal use","deprecated":true}},"required":[],"description":"Partial update type for ICommunityAiMember where all fields are optional and nullable where appropriate.\n"},"ICommunityAiPosts.IRequest":{"type":"object","properties":{"search":{"oneOf":[{"type":"string","description":"Optional search keyword to filter post titles or bodies"},{"type":"null"}],"description":"Optional search keyword to filter post titles or bodies"},"status":{"oneOf":[{"type":"string","description":"Optional filter by post status, e.g., 'published', 'draft'"},{"type":"null"}],"description":"Optional filter by post status, e.g., 'published', 'draft'"},"business_status":{"oneOf":[{"type":"string","description":"Optional filter by business workflow status"},{"type":"null"}],"description":"Optional filter by business workflow status"},"author_id":{"oneOf":[{"type":"string","description":"Optional filter by author's user ID"},{"type":"null"}],"description":"Optional filter by author's user ID"},"page":{"oneOf":[{"type":"integer","description":"Optional page number for pagination"},{"type":"null"}],"description":"Optional page number for pagination"},"limit":{"oneOf":[{"type":"integer","description":"Optional limit of records per page"},{"type":"null"}],"description":"Optional limit of records per page"},"sortBy":{"oneOf":[{"type":"string","description":"Optional field name to sort results by"},{"type":"null"}],"description":"Optional field name to sort results by"},"sortOrder":{"oneOf":[{"const":"asc","description":"Optional sort direction: 'asc' or 'desc'"},{"const":"desc","description":"Optional sort direction: 'asc' or 'desc'"},{"type":"null"}],"description":"Optional sort direction: 'asc' or 'desc'"},"holderMethodName":{"type":"string","description":"Holder method name for the system internal use","deprecated":true}},"required":[],"description":"Request type used for paginated, filterable, and searchable list of posts."},"ICommunityAiPost":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier for posts in UUID format."},"author_id":{"type":"string","format":"uuid","description":"Foreign Key to the member who authored the post.\n\nMust reference a valid member UUID."},"title":{"type":"string","description":"Post title.\n\nMust not be empty. Max length of 100 characters."},"slug":{"type":"string","description":"Unique slug for the post URL.\n\nMust be unique string identifying the post."},"body":{"type":"string","description":"Main content of the post."},"status":{"type":"string","description":"Workflow status of the post, e.g., draft, published."},"business_status":{"type":"string","description":"Business specific status for workflows."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp.\n\nISO 8601 date-time formatted string."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp.\n\nISO 8601 date-time formatted string."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp.\n\nNullable ISO 8601 date-time string indicating when post was deleted."}},"required":["id","author_id","title","slug","body","status","business_status","created_at","updated_at"],"description":"Main post entity representing community member created posts. Contains full details with timestamps and soft delete support."},"ICommunityAiPost.ICreate":{"type":"object","properties":{"author_id":{"type":"string","format":"uuid","description":"Foreign Key to the member who authored the post.\n\nMust reference a valid member UUID."},"title":{"type":"string","description":"Post title.\n\nMust not be empty. Max length of 100 characters."},"slug":{"type":"string","description":"Unique slug for the post URL.\n\nMust be unique string identifying the post."},"body":{"type":"string","description":"Main content of the post."},"status":{"type":"string","description":"Workflow status of the post, e.g., draft, published."},"business_status":{"type":"string","description":"Business specific status for workflows."}},"required":["author_id","title","slug","body","status","business_status"],"description":"Request type to create a new post.\n\nExcludes system-generated fields like id, timestamps.\nauthor_id is required."},"ICommunityAiPost.IUpdate":{"type":"object","properties":{"title":{"type":"string","description":"Post title.\n\nMust not be empty. Max length of 100 characters."},"slug":{"type":"string","description":"Unique slug for the post URL.\n\nMust be unique string identifying the post."},"body":{"type":"string","description":"Main content of the post."},"status":{"type":"string","description":"Workflow status of the post, e.g., draft, published."},"business_status":{"type":"string","description":"Business specific status for workflows."}},"required":[],"description":"Request type to update an existing post.\n\nAll fields optional.\nSystem-generated fields are excluded."},"ICommunityAiPosts":{"type":"object","properties":{"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityAiPost"},"description":"Paginated data array of posts."},"pagination":{"type":"object","properties":{"current":{"type":"integer","description":"Current page number."},"limit":{"type":"integer","description":"Number of items per page."},"records":{"type":"integer","description":"Total records matching query."},"pages":{"type":"integer","description":"Total pages available."}},"required":["current","limit","records","pages"],"description":"Pagination metadata."}},"required":["data","pagination"],"description":"Paginated list of community AI posts."},"ICommunityAiPosts.ICreate":{"type":"object","properties":{"author_id":{"type":"string","format":"uuid","description":"Foreign Key to the member who authored the post.\n\nMust reference a valid member UUID."},"title":{"type":"string","description":"Post title.\n\nMust not be empty. Max length of 100 characters."},"slug":{"type":"string","description":"Unique slug for the post URL.\n\nMust be unique string identifying the post."},"body":{"type":"string","description":"Main content of the post."},"status":{"type":"string","description":"Workflow status of the post, e.g., draft, published."},"business_status":{"type":"string","description":"Business specific status for workflows."}},"required":["author_id","title","slug","body","status","business_status"],"description":"Request type to create a post. Same as ICommunityAiPost.ICreate."},"ICommunityAiPosts.IUpdate":{"type":"object","properties":{"title":{"type":"string","description":"Post title, up to 100 characters, non-empty.\n\nOptional updated title of the post with max length 100."},"slug":{"type":"string","description":"Unique slug for post URL identification.\n\nOptional updated slug for the post."},"body":{"type":"string","description":"Main content body of the post.\n\nOptional updated content body."},"status":{"type":"string","description":"Current workflow status of the post.\n\nOptional status string representing workflow phase."},"business_status":{"type":"string","description":"Business specific state for the post workflow.\n\nOptional business status string."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp; null if not deleted.\n\nOptional null or datetime string indicating soft deletion."}},"required":[],"description":"Update data for a community_ai_posts record.\n\nAll properties are optional and can be used to update a post's mutable fields including soft deletion."},"ICommunityAiComment.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"number","format":"uint32"},{"type":"null"}],"description":"Page number for pagination.\n\nOptional page number to retrieve."},"limit":{"oneOf":[{"type":"number","format":"uint32"},{"type":"null"}],"description":"Limit of records per page for pagination.\n\nOptional limit size per page."},"author_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter comments by author ID.\n\nOptional UUID filter for author."},"community_ai_post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter comments by post ID.\n\nOptional UUID filter for post."},"keyword":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Keyword search on comment body.\n\nOptional string to search within comment text."},"sort_created_at":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort order by created_at timestamp.\n\nOptional string: 'asc' or 'desc'."}},"required":[],"description":"Search and pagination criteria for community_ai_comments records.\n\nIncludes pagination controls and optional filtering fields.\n\nUsed for retrieving filtered lists of comments in paginated form."},"ICommunityAiComment":{"type":"object","properties":{"id":{"type":"string","description":"Primary Key.\n\nUnique identifier of the comment.","format":"uuid"},"community_ai_post_id":{"type":"string","description":"Belonged post's community_ai_posts.id.\n\nThe ID of the post this comment is associated with.","format":"uuid"},"author_id":{"type":"string","description":"Belonged author's community_ai_members.id.\n\nThe ID of the member who authored this comment.","format":"uuid"},"body":{"type":"string","description":"Comment content, non-empty and up to 1000 characters.\n\nThe textual content of the comment.","maxLength":1000},"created_at":{"type":"string","description":"Timestamp when the comment was created.\n\nISO 8601 date-time format.","format":"date-time"},"updated_at":{"type":"string","description":"Timestamp when the comment was last updated.\n\nISO 8601 date-time format.","format":"date-time"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp; null if not deleted.\n\nISO 8601 date-time format or null."}},"required":["id","community_ai_post_id","author_id","body","created_at","updated_at"],"description":"Primary entity representing comments made by community members on posts.\n\nContains comment content, author association, linked post, timestamps,\n\nand soft deletion support. Comments support independent management and AI\n\nmoderation features."},"ICommunityAiComment.ICreate":{"type":"object","properties":{"community_ai_post_id":{"type":"string","format":"uuid","description":"Belonged post's community_ai_posts.id.\n\nUUID of the post this comment belongs to.\nThis must be provided when creating a comment."},"author_id":{"type":"string","format":"uuid","description":"Belonged author's community_ai_members.id.\n\nUUID of the author member who created the comment.\nThis must be provided when creating the comment."},"body":{"type":"string","description":"Comment content, non-empty and up to 1000 characters.\n\nThe textual body of the comment."}},"required":["community_ai_post_id","author_id","body"],"description":"Payload for creating a new community_ai_comments record.\n\nRequires the post and author IDs along with comment body text."},"ICommunityAiComments":{"type":"object","properties":{"id":{"type":"string","description":"Primary Key.\n\nUnique identifier of the comment.","format":"uuid"},"community_ai_post_id":{"type":"string","description":"Belonged post's community_ai_posts.id.\n\nThe ID of the post this comment is associated with.","format":"uuid"},"author_id":{"type":"string","description":"Belonged author's community_ai_members.id.\n\nThe ID of the member who authored this comment.","format":"uuid"},"body":{"type":"string","description":"Comment content, non-empty and up to 1000 characters.\n\nThe textual content of the comment.","maxLength":1000},"created_at":{"type":"string","description":"Timestamp when the comment was created.\n\nISO 8601 date-time format.","format":"date-time"},"updated_at":{"type":"string","description":"Timestamp when the comment was last updated.\n\nISO 8601 date-time format.","format":"date-time"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp; null if not deleted.\n\nISO 8601 date-time format or null."}},"required":["id","community_ai_post_id","author_id","body","created_at","updated_at"],"description":"Primary entity representing comments made by community members on posts.\n\nContains comment content, author association, linked post, timestamps,\n\nand soft deletion support. Comments support independent management and AI\n\nmoderation features."},"ICommunityAiComments.IUpdate":{"type":"object","properties":{"community_ai_post_id":{"type":"string","description":"Belonged post's community_ai_posts.id.\n\nThe ID of the post this comment is associated with.","format":"uuid"},"author_id":{"type":"string","description":"Belonged author's community_ai_members.id.\n\nThe ID of the member who authored this comment.","format":"uuid"},"body":{"type":"string","description":"Comment content, non-empty and up to 1000 characters.\n\nThe textual content of the comment.","maxLength":1000},"created_at":{"type":"string","description":"Timestamp when the comment was created.\n\nISO 8601 date-time format.","format":"date-time"},"updated_at":{"type":"string","description":"Timestamp when the comment was last updated.\n\nISO 8601 date-time format.","format":"date-time"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp; null if not deleted.\n\nISO 8601 date-time format or null."}},"required":[],"description":"Update input type for community_ai_comments.\n\nAllows partial updates of comment properties.\n\nUsed for patch or put update operations.\n\nID is not included because it is used as path parameter and not updatable.\n\nAll properties are optional to allow partial updates."},"ICommunityAiComments.IRequest":{"type":"object","properties":{"community_ai_post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"ID of the post to filter comments by.\n\nOptional filter property."},"author_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"ID of the author member to filter comments by.\n\nOptional filter property."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search text to filter comment content.\n\nUsed for full-text matching on comment bodies."},"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Page number.\n\nUsed for paginated query requests."},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Number of items per page.\n\nUsed to control the number of records per page."},"orderBy":{"oneOf":[{"type":"array","items":{"type":"object","properties":{"field":{"type":"string","description":"The property name used for sorting."},"direction":{"oneOf":[{"const":"asc","description":"Sort direction, either ascending or descending."},{"const":"desc","description":"Sort direction, either ascending or descending."}],"description":"Sort direction, either ascending or descending."}},"required":["field","direction"]}},{"type":"null"}],"description":"Sort order by field and direction.\nExample: [{\"field\":\"created_at\",\"direction\":\"desc\"}]"}},"required":[],"description":"Request parameters for querying community_ai_comments.\n\nSupports filtering, searching, ordering, and pagination.\n\nUsed for listing or searching comments externally."},"ICommunityAiComment.IUpdate":{"type":"object","properties":{"community_ai_post_id":{"type":"string","description":"Belonged post's community_ai_posts.id.\n\nThe ID of the post this comment is associated with.","format":"uuid"},"author_id":{"type":"string","description":"Belonged author's community_ai_members.id.\n\nThe ID of the member who authored this comment.","format":"uuid"},"body":{"type":"string","description":"Comment content, non-empty and up to 1000 characters.\n\nThe textual content of the comment.","maxLength":1000},"created_at":{"type":"string","description":"Timestamp when the comment was created.\n\nISO 8601 date-time format.","format":"date-time"},"updated_at":{"type":"string","description":"Timestamp when the comment was last updated.\n\nISO 8601 date-time format.","format":"date-time"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp; null if not deleted.\n\nISO 8601 date-time format or null."}},"required":[],"description":"Update input type for community_ai_comments.\n\nAllows partial updates of comment properties.\n\nUsed for patch or put update operations.\n\nID is not included because it is used as path parameter and not updatable.\n\nAll properties are optional to allow partial updates."},"ICommunityAiAiCommentSuggestion.IRequest":{"oneOf":[{"type":"object","description":"Pagination, filtering, and sorting request parameters for AI comment suggestions.\n\nThis request schema allows filtering by confidence scores, member ID, creation date ranges, search keywords, and supports pagination and sorting options.\n\nAll fields are optional and nullable when not provided.","properties":{"search":{"type":"string","description":"Optional search keyword to match suggestion text."},"confidence_score_min":{"type":"number","format":"float","description":"Minimum confidence score filter (0.0 to 1.0)."},"confidence_score_max":{"type":"number","format":"float","description":"Maximum confidence score filter (0.0 to 1.0)."},"member_id":{"type":"string","format":"uuid","description":"Filter suggestions by specific member ID."},"created_at_from":{"type":"string","format":"date-time","description":"Start date for filtering suggestions by creation time."},"created_at_to":{"type":"string","format":"date-time","description":"End date for filtering suggestions by creation time."},"page":{"type":"integer","format":"int32","description":"Page number for pagination (default 1)."},"limit":{"type":"integer","format":"int32","description":"Number of items per page for pagination (default 20)."},"sort":{"type":"string","description":"Sort field; e.g., 'created_at' or 'confidence_score'. Must respect defined sort fields."},"order":{"oneOf":[{"const":"asc","description":"Sort order direction: 'asc' or 'desc'."},{"const":"desc","description":"Sort order direction: 'asc' or 'desc'."}],"description":"Sort order direction: 'asc' or 'desc'."}},"required":[]},{"type":"null"}],"description":"Pagination, filtering, and sorting request parameters for AI comment suggestions.\n\nThis request schema allows filtering by confidence scores, member ID, creation date ranges, search keywords, and supports pagination and sorting options.\n\nAll fields are optional and nullable when not provided."},"ICommunityAiAiCommentSuggestions":{"type":"object","description":"AI-generated comment suggestion entity detailing the suggestion text, confidence score, and associated comment and member references.\n\nThis entity stores the actual suggested text computed by AI for improving user comments, with audit data including creation, update, and optional deletion timestamps.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the AI comment suggestion."},"community_ai_comment_id":{"type":"string","format":"uuid","description":"Reference to the comment ID for which this is an AI suggestion."},"member_id":{"type":"string","format":"uuid","description":"Member ID who owns the original comment."},"suggestion_text":{"type":"string","description":"The AI-generated suggestion text for improving the comment."},"confidence_score":{"type":"number","format":"float","description":"Confidence score of the AI suggestion from 0.0 to 1.0."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp of the suggestion."},"updated_at":{"type":"string","format":"date-time","description":"Last updated timestamp of the suggestion."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft deletion timestamp; null if not deleted."},{"type":"null"}],"description":"Soft deletion timestamp; null if not deleted."}},"required":["id","community_ai_comment_id","member_id","suggestion_text","confidence_score","created_at","updated_at"]},"ICommunityAiAiCommentSuggestions.ICreate":{"type":"object","description":"Request body schema for creating a new AI comment suggestion.\n\nIncludes references to comment ID and member ID, the suggestion text, and a confidence score from 0.0 to 1.0.","properties":{"community_ai_comment_id":{"type":"string","format":"uuid","description":"Reference to the comment ID to which this suggestion applies."},"member_id":{"type":"string","format":"uuid","description":"The member ID who owns the original comment for proper attribution."},"suggestion_text":{"type":"string","description":"The suggestion text generated by AI for improving the comment."},"confidence_score":{"type":"number","format":"float","description":"Confidence score (0.0 to 1.0) attributed to the suggestion."}},"required":["community_ai_comment_id","member_id","suggestion_text","confidence_score"]},"ICommunityAiAiCommentSuggestions.IUpdate":{"type":"object","description":"Request body schema for updating an existing AI comment suggestion.\n\nProperties are optional to allow partial updates. Fields can be set to null to clear them, except for required properties during creation.\n\nIncludes optional fields for comment ID, member ID, suggestion text, confidence score, and deletion timestamp.","properties":{"community_ai_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional updated reference to the comment ID."},{"type":"null"}],"description":"Optional updated reference to the comment ID."},"member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional updated member ID who owns the original comment."},{"type":"null"}],"description":"Optional updated member ID who owns the original comment."},"suggestion_text":{"oneOf":[{"type":"string","description":"Optional updated AI suggestion text."},{"type":"null"}],"description":"Optional updated AI suggestion text."},"confidence_score":{"oneOf":[{"type":"number","format":"float","description":"Optional updated confidence score."},{"type":"null"}],"description":"Optional updated confidence score."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Optional soft deletion timestamp."},{"type":"null"}],"description":"Optional soft deletion timestamp."}},"required":[]},"ICommunityAiCommentSentimentAnalysis.IRequest":{"type":"object","properties":{"community_ai_comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional comment ID to filter analyses for a specific comment."},"sentiment":{"oneOf":[{"const":"positive"},{"const":"neutral"},{"const":"negative"},{"type":"null"}],"description":"Sentiment type to filter specific sentiment categories."},"confidence_score_min":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Confidence score minimum threshold for filtering analyses."},"confidence_score_max":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Confidence score maximum threshold for filtering analyses."},"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Pagination: current page number, starting from 1."},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Pagination: limiting number of records per page."},"sort":{"oneOf":[{"type":"array","items":{"type":"string"}},{"type":"null"}],"description":"Sorting fields as array of strings (field names with optional order)."}},"required":[],"description":"Request parameters for filtering and paginating comment sentiment analyses."},"ICommunityAiCommentSentimentAnalysis":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the comment sentiment analysis record."},"community_ai_comment_id":{"type":"string","format":"uuid","description":"Foreign key linking to the analyzed comment."},"sentiment":{"oneOf":[{"const":"positive","description":"Represents the determined sentiment category of the comment."},{"const":"neutral","description":"Represents the determined sentiment category of the comment."},{"const":"negative","description":"Represents the determined sentiment category of the comment."}],"description":"Represents the determined sentiment category of the comment."},"confidence_score":{"type":"number","format":"double","description":"Indicates AI's confidence in the sentiment determination."},"analyzed_at":{"type":"string","format":"date-time","description":"ISO 8601 date-time string representing analysis time."}},"required":["id","community_ai_comment_id","sentiment","confidence_score","analyzed_at"],"description":"Community AI comment sentiment analysis record.\n\nCaptures AI classified sentiment for comments with confidence score and timestamp."},"ICommunityAiCommentSentimentAnalysis.ICreate":{"type":"object","properties":{"community_ai_comment_id":{"type":"string","format":"uuid","description":"Referenced comment's community_ai_comments.id."},"sentiment":{"oneOf":[{"const":"positive","description":"Sentiment classification: positive, neutral, or negative."},{"const":"neutral","description":"Sentiment classification: positive, neutral, or negative."},{"const":"negative","description":"Sentiment classification: positive, neutral, or negative."}],"description":"Sentiment classification: positive, neutral, or negative."},"confidence_score":{"type":"number","format":"double","description":"Confidence score for sentiment analysis from AI, range 0.0 to 1.0."},"analyzed_at":{"type":"string","format":"date-time","description":"Timestamp when the sentiment analysis was performed."}},"required":["community_ai_comment_id","sentiment","confidence_score","analyzed_at"],"description":"Creation payload for comment sentiment analysis.\n\nIncludes comment ID, sentiment label, confidence score, and analysis timestamp."},"ICommunityAiCommentSentimentAnalysis.IUpdate":{"type":"object","properties":{"sentiment":{"oneOf":[{"const":"positive","description":"Sentiment classification: positive, neutral, or negative."},{"const":"neutral","description":"Sentiment classification: positive, neutral, or negative."},{"const":"negative","description":"Sentiment classification: positive, neutral, or negative."}],"description":"Sentiment classification: positive, neutral, or negative."},"confidence_score":{"type":"number","format":"double","description":"Confidence score for sentiment analysis from AI, range 0.0 to 1.0."},"analyzed_at":{"type":"string","format":"date-time","description":"Timestamp when the sentiment analysis was performed."}},"required":[],"description":"Update payload for comment sentiment analysis.\n\nAllows partial modification of sentiment label, confidence score, and analysis timestamp."},"ICommunityAiAiGeneratedReplies":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key identifier of the AI generated reply record."},"community_ai_comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional foreign key to the referenced comment ID from community_ai_comments table."},"community_ai_post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional foreign key to the referenced post ID from community_ai_posts table."},"reply_text":{"type":"string","description":"Text content of the AI-generated reply provided by the AI model."},"confidence_score":{"type":"number","format":"double","description":"Confidence score of the AI-generated reply, ranging from 0.0 to 1.0."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the AI-generated reply was created (ISO 8601 date-time format)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the AI-generated reply was last updated (ISO 8601 date-time format)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional timestamp marking when the AI-generated reply was soft deleted; null if active."}},"required":["id","reply_text","confidence_score","created_at","updated_at"],"description":"AI-generated replies to user posts or comments providing textual response enhancements. These replies include content, confidence scores, timestamps, and optional soft deletion marker.\n\nThis type represents the main data object used in the AICommenting namespace for storing and transmitting AI-generated reply information."},"ICommunityAiAiGeneratedReplies.ICreate":{"type":"object","properties":{"community_ai_comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional foreign key to the referenced comment ID. Can be null if not associated with a comment."},"community_ai_post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional foreign key to the referenced post ID. Can be null if not associated with a post."},"reply_text":{"type":"string","description":"Text content of the AI-generated reply to be created. Non-empty string required."},"confidence_score":{"type":"number","format":"double","description":"Confidence score for the AI-generated reply ranging from 0.0 (lowest) to 1.0 (highest)."}},"required":["reply_text","confidence_score"],"description":"Request body schema for creating a new AI-generated reply containing reply text and confidence score with optional associations to comments or posts."},"ICommunityAiAiGeneratedReplies.IUpdate":{"type":"object","properties":{"community_ai_comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional updated foreign key to the comment ID; can be null to detach."},"community_ai_post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional updated foreign key to the post ID; can be null to detach."},"reply_text":{"type":"string","description":"Updated text content of the AI-generated reply."},"confidence_score":{"type":"number","format":"double","description":"Updated confidence score of the AI-generated reply, range from 0.0 to 1.0."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp marking when the AI-generated reply was soft deleted; null if nothing."}},"required":[],"description":"Request body schema for updating AI-generated reply details including content, confidence score, related entities, and soft deletion timestamp."},"ICommunityAiAiGeneratedReplies.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Pagination page number (0-based index)."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Pagination limit defining maximum number of records per page."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Textual search keyword to filter AI-generated reply content."},"filter":{"type":"object","properties":{"community_ai_comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by comment ID (nullable)."},"community_ai_post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by post ID (nullable)."},"reply_text":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by reply text content (nullable)."}},"required":[],"description":"Filters to apply on AI-generated replies collection."},"sort":{"type":"object","properties":{"created_at":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort by creation datetime."},"confidence_score":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort by confidence score ascending or descending."}},"required":[],"description":"Sorting criteria for AI-generated replies."}},"required":[],"description":"Request schema for retrieving a paginated, filtered, and sorted collection of AI-generated replies."},"ICommunityAiFactcheckClaims.IRequest":{"type":"object","properties":{"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional search keyword to match claim text."},"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Pagination: page number (must be uint32)."},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Pagination: limit records per page (must be uint32)."},"post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional filter: post ID to limit claims to a specific post."},"comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional filter: comment ID to limit claims to a specific comment."},"orderBy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional sorting field name, e.g., created_at."},"orderDirection":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Optional sort direction: asc or desc.\nOnly \"asc\" or \"desc\" allowed."}},"description":"Request payload for searching factcheck claims.\n\nIncludes pagination, filtering, and sorting options.\n\nUsed for querying textual factual claims extracted from posts or comments.","required":[]},"ICommunityAiFactcheckClaims":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique ID of the factcheck claim."},"post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional post ID referenced by the claim."},"comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional comment ID referenced by the claim."},"claim_text":{"type":"string","description":"Text content of the factual claim.\nMust be non-empty."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp in ISO 8601 format with time zone."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp in ISO 8601 format with time zone."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional deletion timestamp indicating soft delete status."}},"required":["id","claim_text","created_at","updated_at"],"description":"Factcheck Claims request with filters, pagination, and sorting.\n\nAllows clients to specify search criteria to filter factcheck claims.\nIncludes pagination details for result sets.\nUsed for querying textual factual claims extracted from posts or comments."},"ICommunityAiFactcheckClaim.ICreate":{"type":"object","properties":{"post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional post ID related to the claim."},"comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional comment ID related to the claim."},"claim_text":{"type":"string","description":"Claim text to verify.\nMust be non-empty string."}},"required":["claim_text"],"description":"Input structure for creating a factcheck claim.\n\nRequired fields: claim_text\nOptional: post_id, comment_id\nTimestamps created_at, updated_at handled by system."},"ICommunityAiFactcheckClaim":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique ID of the factcheck claim."},"post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional post ID the claim is extracted from."},"comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional comment ID the claim is extracted from."},"claim_text":{"type":"string","description":"Text of the factual claim, must be non-empty."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp.\n@format date-time"},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp.\n@format date-time"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional deletion timestamp for soft delete.\n@format date-time"}},"required":["id","claim_text","created_at","updated_at"],"description":"Factcheck claim creation input.\n\nUsed when creating a new factual claim associated to a post or comment.\nContains the claim text and optional references."},"ICommunityAiFactcheckClaim.IUpdate":{"type":"object","properties":{"post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Source post's {\\@link community_ai_posts.id}."},"comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Source comment's {\\@link community_ai_comments.id}."},"claim_text":{"type":"string","description":"Extracted factual claim text to be verified."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp for claim."}},"description":"Update DTO for factcheck claim.","required":[]},"ICommunityAiFactcheckResult.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Limitation of records per a page."},"factcheck_claim_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by factcheck claim ID to narrow results."},"is_verified":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Filter by verification status."},"min_confidence_score":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Filter by minimum confidence score (0.0 to 1.0)."},"max_confidence_score":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Filter by maximum confidence score (0.0 to 1.0)."}},"description":"Request parameters for searching factcheck result with pagination.","required":[]},"ICommunityAiFactcheckResult":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"factcheck_claim_id":{"type":"string","format":"uuid","description":"Linked factual claim's {@link community_ai_factcheck_claims.id}."},"is_verified":{"type":"boolean","description":"Indicates if the claim was verified as true or false."},"confidence_score":{"type":"number","format":"double","description":"Confidence level of the verification result provided by the AI."},"source_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Reference URL to source data backing the verification."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the verification result was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the verification result was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp for verification result."}},"required":["id","factcheck_claim_id","is_verified","confidence_score","created_at","updated_at"],"description":"Entity representing an AI factchecking result record."},"ICommunityAiFactcheckFlag.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Limitation of records per a page."},"factcheck_claim_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by factcheck claim ID."},"post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by post ID."},"comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by comment ID."},"reported_by_member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by reporting member ID."},"flag_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by flag type (e.g., misinformation, spam)."},"flag_status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by flag status (e.g., pending, reviewed)."},"created_after":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter by date range start (ISO 8601)."},"created_before":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter by date range end (ISO 8601)."}},"description":"Request parameters for searching factcheck flag with pagination.","required":[]},"ICommunityAiFactcheckFlag":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"factcheck_claim_id":{"type":"string","format":"uuid","description":"Linked factual claim's {@link community_ai_factcheck_claims.id}."},"post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Offending post's {@link community_ai_posts.id}."},"comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Offending comment's {@link community_ai_comments.id}."},"reported_by_member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Member who reported the flag's {@link community_ai_members.id}."},"flag_type":{"type":"string","description":"Type of flag raised, e.g., misinformation, spam, inappropriate content."},"flag_status":{"type":"string","description":"Current status of the flag, e.g., pending, reviewed, dismissed."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the flag was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last flag update."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp for the flag record."}},"required":["id","factcheck_claim_id","flag_type","flag_status","created_at","updated_at"],"description":"Flags raised by AI fact-checking on content indicating potential misinformation or issues. Includes references to source claims, content IDs, flag type, status, and reporting member details for moderation and traceability."},"ICommunityAiContentFlag.IRequest":{"type":"object","properties":{"id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by content flag unique ID."},"community_ai_member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by member who raised the flag."},"community_ai_post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by flagged post."},"community_ai_comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by flagged comment."},"reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by reason text content."},"status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by status of the flag."},"created_at_start":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter by creation range start."},"created_at_end":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter by creation range end."},"updated_at_start":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter by updated range start."},"updated_at_end":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter by updated range end."},"page":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Page number for pagination (uint32)."},"limit":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Limitation of records per page (uint32)."},"order_by":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sort column name."},"order_direction":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort direction."}},"required":[],"description":"Search and filter parameters for content flags with pagination support."},"ICommunityAiContentFlag":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"community_ai_member_id":{"type":"string","format":"uuid","description":"Member who raised the flag. {@link community_ai_members.id}"},"community_ai_post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Targeted post flagged (nullable if the flag is for a comment). {@link community_ai_posts.id}"},"community_ai_comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Targeted comment flagged (nullable if the flag is for a post). {@link community_ai_comments.id}"},"reason":{"type":"string","description":"Reason given by member for flagging the content."},"status":{"type":"string","description":"Current status of the flag such as 'pending', 'reviewed', or 'dismissed'."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the flag was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the flag was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Nullable soft delete timestamp to mark if the flag is deleted and hidden from public."}},"required":["id","community_ai_member_id","reason","status","created_at","updated_at"],"description":"Flags raised by members regarding community content such as posts or comments. Each flag indicates the member who raised it, the content targeted, reason, status, and timestamps. Serves as primary data for moderation workflows and triggers."},"ICommunityAiContentFlag.ICreate":{"type":"object","properties":{"community_ai_member_id":{"type":"string","format":"uuid","description":"Member who raised the flag. {@link community_ai_members.id}"},"community_ai_post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Targeted post flagged (nullable if the flag is for a comment). {@link community_ai_posts.id}"},"community_ai_comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Targeted comment flagged (nullable if the flag is for a post). {@link community_ai_comments.id}"},"reason":{"type":"string","description":"Reason given by member for flagging the content."},"status":{"type":"string","description":"Current status of the flag such as 'pending', 'reviewed', or 'dismissed'."}},"required":["community_ai_member_id","reason","status"],"description":"Input data for creating a community content flag raised by a member."},"ICommunityAiContentFlag.IUpdate":{"type":"object","properties":{"reason":{"type":"string","description":"Reason given by member for flagging the content."},"status":{"oneOf":[{"const":"pending","description":"Current status of the flag such as 'pending', 'reviewed', or 'dismissed'."},{"const":"reviewed","description":"Current status of the flag such as 'pending', 'reviewed', or 'dismissed'."},{"const":"dismissed","description":"Current status of the flag such as 'pending', 'reviewed', or 'dismissed'."}],"description":"Current status of the flag such as 'pending', 'reviewed', or 'dismissed'."},"community_ai_post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Targeted post flagged (nullable if the flag is for a comment)."},"community_ai_comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Targeted comment flagged (nullable if the flag is for a post)."}},"required":["reason","status","community_ai_post_id","community_ai_comment_id"],"description":"Update payload for a community content flag, representing mutable properties."},"ICommunityAiContentFlags.IModeratorReviewsRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Page number for pagination"},"limit":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Limit of records per page"},"decision":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter decision value"},"sort":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sorting specification"}},"required":[],"description":"Request parameters to filter and paginate moderator reviews linked to content flags."},"ICommunityAiModeratorReviews":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"community_ai_moderator_id":{"type":"string","format":"uuid","description":"Moderator performing the review. {@link community_ai_moderators.id}"},"community_ai_content_flag_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Referenced content flag under review. {@link community_ai_content_flags.id}"},"community_ai_user_report_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Referenced user report under review. {@link community_ai_user_reports.id}"},"decision":{"type":"string","description":"Decision outcome such as 'approved', 'rejected', or 'needs more info'."},"comments":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Additional comments or reasons by the moderator."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the review was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the review was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Nullable soft delete timestamp to mark if the review is deleted and hidden."}},"required":["id","community_ai_moderator_id","decision","created_at","updated_at"],"description":"Reviews and decisions made by moderators regarding flagged or reported content. Includes reference to the moderator, related flag or report, decision details, and audit timestamps. Facilitates moderation workflow tracking and accountability."},"ICommunityAiModeratorReviews.ICreate":{"type":"object","properties":{"community_ai_moderator_id":{"type":"string","format":"uuid","description":"Moderator performing the review"},"community_ai_content_flag_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Referenced content flag under review"},"community_ai_user_report_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Referenced user report under review"},"decision":{"type":"string","description":"Decision outcome such as 'approved', 'rejected', or 'needs more info'"},"comments":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Additional comments or reasons by the moderator"}},"required":["community_ai_moderator_id","decision"],"description":"Payload to create a new moderator review associated with content flags or user reports."},"ICommunityAiModeratorReviews.IUpdate":{"type":"object","properties":{"community_ai_moderator_id":{"type":"string","format":"uuid","description":"Moderator performing the review. {@link community_ai_moderators.id}"},"community_ai_content_flag_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Referenced content flag under review. {@link community_ai_content_flags.id}"},"community_ai_user_report_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Referenced user report under review. {@link community_ai_user_reports.id}"},"decision":{"type":"string","description":"Decision outcome such as 'approved', 'rejected', or 'needs more info'."},"comments":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Additional comments or reasons by the moderator."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the review was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the review was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Nullable soft delete timestamp to mark if the review is deleted and hidden."}},"required":[],"description":"Update input for moderator review, allowing partial modifications."},"ICommunityAiUserReports.IRequest":{"type":"object","properties":{"id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Primary Key."},"community_ai_member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Member who submitted the report. {@link community_ai_members.id}"},"community_ai_post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Post reported (nullable if the report targets a comment). {@link community_ai_posts.id}"},"community_ai_comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Comment reported (nullable if the report targets a post). {@link community_ai_comments.id}"},"report_reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Reason for reporting the content or user behavior."},"resolution_status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Current resolution status such as 'open', 'investigating', or 'closed'."},"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the report was created."},"updated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the report was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Nullable soft delete timestamp to mark if the report is deleted and hidden."}},"required":[],"description":"Filter and pagination parameters for searching user reports."},"ICommunityAiUserReport.ICreate":{"type":"object","properties":{"community_ai_member_id":{"type":"string","format":"uuid","description":"Member who submitted the report. {@link community_ai_members.id}"},"community_ai_post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Post reported (nullable if the report targets a comment). {@link community_ai_posts.id}"},"community_ai_comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Comment reported (nullable if the report targets a post). {@link community_ai_comments.id}"},"report_reason":{"type":"string","description":"Reason for reporting the content or user behavior."},"resolution_status":{"type":"string","description":"Current resolution status such as 'open', 'investigating', or 'closed'."}},"required":["community_ai_member_id","report_reason","resolution_status"],"description":"Create data for a user report"},"ICommunityAiUserReport":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the user report"},"community_ai_member_id":{"type":"string","format":"uuid","description":"Member who submitted the report. {@link community_ai_members.id}"},"community_ai_post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Post reported (nullable if the report targets a comment). {@link community_ai_posts.id}"},"community_ai_comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Comment reported (nullable if the report targets a post). {@link community_ai_comments.id}"},"report_reason":{"type":"string","description":"Reason for reporting the content or user behavior."},"resolution_status":{"type":"string","description":"Current resolution status such as 'open', 'investigating', or 'closed'."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the report was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the report was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Nullable soft delete timestamp to mark if the report is deleted and hidden from public."}},"required":["id","community_ai_member_id","report_reason","resolution_status","created_at","updated_at"],"description":"Reports submitted independently by members regarding inappropriate content or user behavior. Tracks the reporting member, referenced content, report reason, resolution status, and timestamps. Supports moderation escalation workflows.\n\n@namespace Moderation\n@author AutoBE - https://github.com/wrtnlabs/autobe"},"ICommunityAiUserReport.IUpdate":{"type":"object","properties":{"community_ai_member_id":{"type":"string","format":"uuid","description":"UUID of the member who submitted the report"},"community_ai_post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional UUID of the reported post"},"community_ai_comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional UUID of the reported comment"},"report_reason":{"type":"string","description":"Reason for reporting"},"resolution_status":{"type":"string","description":"Current resolution status"}},"required":[],"description":"Update parameters for a community AI user report. All fields are optional and provide partial update capabilities."},"ICommunityAiUserReport.IRequest":{"type":"object","properties":{"community_ai_member_id":{"type":"string","format":"uuid","description":"Member who submitted the report. {@link community_ai_members.id}"},"community_ai_post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Post reported (nullable if the report targets a comment). {@link community_ai_posts.id}"},"community_ai_comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Comment reported (nullable if the report targets a post). {@link community_ai_comments.id}"},"report_reason":{"type":"string","description":"Reason for reporting the content or user behavior."},"resolution_status":{"type":"string","description":"Current resolution status such as 'open', 'investigating', or 'closed'."},"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Current page number."},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Limitation of records per a page."}},"required":[],"description":"Request data for filtering and paginating user reports"},"ICommunityAiUserReport.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the user report"},"report_reason":{"type":"string","description":"Reason for reporting the content or user behavior."},"resolution_status":{"type":"string","description":"Current resolution status such as 'open', 'investigating', or 'closed'."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the report was created."}},"required":["id","report_reason","resolution_status","created_at"],"description":"Summary information of a user report"},"ICommunityAiModeratorReview.IRequest":{"type":"object","properties":{"decision":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional filter by decision"},"createdFrom":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter by creation date range start (ISO 8601)"},"createdTo":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter by creation date range end (ISO 8601)"},"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Pagination: page number"},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Pagination: items per page"}},"required":[],"description":"Request payload for querying paginated moderator reviews. Supports filtering by decision and creation date range, with pagination parameters."},"ICommunityAiModeratorReview":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) of the moderator review"},"community_ai_moderator_id":{"type":"string","format":"uuid","description":"Moderator ID who performed the review"},"community_ai_content_flag_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Linked content flag ID if any"},"community_ai_user_report_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Linked user report ID if any"},"decision":{"type":"string","description":"Review decision such as 'approved', 'rejected'"},"comments":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional comments by the moderator"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the review was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the review was last updated"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp if deleted"}},"required":["id","community_ai_moderator_id","decision","created_at","updated_at"],"description":"Represents a moderator's review of content flags or user reports within the community AI platform.\n\nThis entity captures decisions, comments, and auditing timestamps for moderation actions."},"ICommunityAiUserReport.IModeratorReviewICreate":{"type":"object","properties":{"decision":{"type":"string","description":"Decision outcome of the moderator's review"},"comments":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional comments from the moderator"},"community_ai_moderator_id":{"type":"string","format":"uuid","description":"Unique identifier of the moderator performing the review"},"community_ai_user_report_id":{"type":"string","format":"uuid","description":"Unique identifier of the user report being reviewed"}},"required":["decision","community_ai_moderator_id","community_ai_user_report_id"],"description":"Data required to create a new moderator review associated with a user report.\n\nIncludes decision details, optional comments, and IDs of the reviewer and report."},"ICommunityAiUserReport.IModeratorReviewIUpdate":{"type":"object","properties":{"community_ai_moderator_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Moderator performing the review. community_ai_moderators.id"},"community_ai_content_flag_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Referenced content flag under review. community_ai_content_flags.id"},"community_ai_user_report_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Referenced user report under review. community_ai_user_reports.id"},"decision":{"type":"string","description":"Decision outcome such as 'approved', 'rejected', or 'needs more info'."},"comments":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Additional comments or reasons by the moderator."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the review was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the review was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Nullable soft delete timestamp to mark if the review is deleted and hidden."}},"required":[],"description":"Modifier review update type allowing partial updates to moderator review fields with timestamps and soft delete support."},"ICommunityAiModeratorReview.ICreate":{"type":"object","properties":{"community_ai_moderator_id":{"type":"string","format":"uuid","description":"Moderator performing the review. community_ai_moderators.id"},"community_ai_content_flag_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Referenced content flag under review. community_ai_content_flags.id"},"community_ai_user_report_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Referenced user report under review. community_ai_user_reports.id"},"decision":{"type":"string","description":"Decision outcome such as 'approved', 'rejected', or 'needs more info'."},"comments":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Additional comments or reasons by the moderator."}},"required":["community_ai_moderator_id","decision"],"description":"Create moderator review type requiring moderator ID and decision with optional comments, linked to content flag or user report."},"ICommunityAiModeratorReview.IUpdate":{"type":"object","properties":{"community_ai_moderator_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Moderator performing the review. community_ai_moderators.id"},"community_ai_content_flag_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Referenced content flag under review. community_ai_content_flags.id"},"community_ai_user_report_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Referenced user report under review. community_ai_user_reports.id"},"decision":{"type":"string","description":"Decision outcome such as 'approved', 'rejected', or 'needs more info'."},"comments":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Additional comments or reasons by the moderator."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the review was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the review was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Nullable soft delete timestamp to mark if the review is deleted and hidden."}},"required":[],"description":"Update type for moderator review allowing partial updates to all fields with timestamp and soft delete support."},"ICommunityAiAdminActions.IRequest":{"type":"object","properties":{"community_ai_admin_id":{"type":"string","format":"uuid","description":"The admin who performed the action. community_ai_admins.id"},"community_ai_moderator_review_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Moderator review on which this action is based (nullable if action is based on a user report)."},"community_ai_user_report_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"User report on which this action is based (nullable if action is based on a moderator review)."},"action_type":{"type":"string","description":"Type of administrative action such as 'ban user', 'unban user', 'warn user', or 'delete content'."},"details":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Additional details or reasons regarding the action by the admin."},"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of when the action was performed."},"updated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of the last update on the action."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Nullable soft delete timestamp to mark if the action is deleted and hidden."}},"required":["community_ai_admin_id","action_type"],"description":"Request type for searching or filtering admin actions with optional date filters and detail text."},"ICommunityAiAdminAction":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"community_ai_admin_id":{"type":"string","format":"uuid","description":"Admin performing the action. Reference to community_ai_admins.id"},"community_ai_moderator_review_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Moderator review on which this action is based (nullable if action is based on a user report)."},"community_ai_user_report_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"User report on which this action is based (nullable if action is based on a moderator review)."},"action_type":{"type":"string","description":"Type of administrative action such as 'ban user', 'unban user', 'warn user', or 'delete content'."},"details":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Additional details or reasons regarding the action by the admin."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of when the action was performed."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last update on the action."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Nullable soft delete timestamp to mark if the action is deleted and hidden."}},"required":["id","community_ai_admin_id","action_type","created_at","updated_at"],"description":"Audit logs capturing detailed records of admin actions including user bans, content deletion, warnings, and other administrative tasks.\n\nThese records allow tracking of administrative activities with timestamps, linked identities, and descriptive details."},"ICommunityAiAdminAction.ICreate":{"type":"object","properties":{"community_ai_admin_id":{"type":"string","format":"uuid","description":"Admin performing the action. Reference to community_ai_admins.id"},"community_ai_moderator_review_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Moderator review on which this action is based (nullable if action is based on a user report)."},"community_ai_user_report_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"User report on which this action is based (nullable if action is based on a moderator review)."},"action_type":{"type":"string","description":"Type of administrative action such as 'ban user', 'unban user', 'warn user', or 'delete content'."},"details":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Additional details or reasons regarding the action by the admin."}},"required":["community_ai_admin_id","action_type"],"description":"Data required to create a new admin action record.\n\nIncludes mandatory admin identifier and action type, with optional references to moderator reviews, user reports, and additional details."},"ICommunityAiAdminAction.IUpdate":{"type":"object","properties":{"community_ai_admin_id":{"type":"string","format":"uuid","description":"Admin performing the action. Reference to community_ai_admins.id"},"community_ai_moderator_review_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Moderator review on which this action is based (nullable if action is based on a user report)."},"community_ai_user_report_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"User report on which this action is based (nullable if action is based on a moderator review)."},"action_type":{"type":"string","description":"Type of administrative action such as 'ban user', 'unban user', 'warn user', or 'delete content'."},"details":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Additional details or reasons regarding the action by the admin."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of when the action was performed."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last update on the action."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Nullable soft delete timestamp to mark if the action is deleted and hidden."}},"required":[],"description":"Data for updating an existing admin action record.\n\nAll fields are optional, allowing partial updates\n\nIncludes identifiers, action details, timestamps, and soft deletion status."},"ICommunityAiNotification.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Page number."},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Limitation of records per a page."},"userId":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"User id."},"notificationType":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Notification type such as 'comment_reply', 'factcheck_flagged', or 'moderator_alert'."},"readStatus":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Notification read status."},"keywords":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search keywords to filter notifications."},"sort":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort order such as 'asc' or 'desc' on creation time."}},"required":[],"description":"Page request data\n\nIncludes pagination, filtering, and sorting parameters for user notifications."},"ICommunityAiNotification":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the notification"},"recipient_user_id":{"type":"string","format":"uuid","description":"Recipient user for the notification, referencing community_ai_members.id"},"trigger_post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional post that triggered this notification, referencing community_ai_posts.id"},"notification_type":{"type":"string","description":"Type of notification such as 'comment_reply', 'factcheck_flagged', or 'moderator_alert'"},"title":{"type":"string","description":"Notification title to be displayed to the user"},"message":{"type":"string","description":"Detailed notification message content"},"read_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the notification was read by the user"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the notification was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the notification was last updated"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp, if the notification was deleted"}},"required":["id","recipient_user_id","notification_type","title","message","created_at","updated_at"],"description":"User notification entity representing system-generated notifications to users. Includes notification type, recipient data, message content, and timestamps.\n\nThis entity is crucial for delivering real-time and event-based user alerts across various notification channels."},"ICommunityAiNotification.ICreate":{"type":"object","properties":{"recipient_user_id":{"type":"string","format":"uuid","description":"Recipient user for the notification, referencing community_ai_members.id."},"trigger_post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional post that triggered this notification, referencing community_ai_posts.id."},"notification_type":{"type":"string","description":"Type of notification such as 'comment_reply', 'factcheck_flagged', or 'moderator_alert'."},"title":{"type":"string","description":"Notification title to be displayed to the user."},"message":{"type":"string","description":"Detailed notification message content."}},"required":["recipient_user_id","notification_type","title","message"],"description":"Input data required to create a new user notification record. Includes recipient, notification type, title, and message contents."},"ICommunityAiNotification.IUpdate":{"type":"object","properties":{"recipient_user_id":{"type":"string","format":"uuid","description":"Recipient user for the notification, referencing community_ai_members.id."},"trigger_post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional post that triggered this notification, referencing community_ai_posts.id."},"notification_type":{"type":"string","description":"Type of notification such as 'comment_reply', 'factcheck_flagged', or 'moderator_alert'."},"title":{"type":"string","description":"Notification title to be displayed to the user."},"message":{"type":"string","description":"Detailed notification message content."},"read_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the notification was read by the user."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the notification was deleted."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the notification was last updated."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the notification was created."}},"required":[],"description":"Data required to update an existing user notification record. All fields are optional allowing partial updates."},"ICommunityAiNotificationStatus.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","format":"uint32"},{"type":"null"}],"description":"Page number."},"limit":{"oneOf":[{"type":"integer","format":"uint32"},{"type":"null"}],"description":"Limitation of records per a page."},"orderBy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sort order specifying field name and direction."},"notification_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter condition based on notification_id."}},"required":[],"description":"Request parameters to filter, sort, paginate notification status entries."},"ICommunityAiNotificationStatus":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the notification status record.\n\n@format uuid"},"notification_id":{"type":"string","format":"uuid","description":"Notification ID this status belongs to.\n\n@format uuid"},"status":{"type":"string","description":"Status code representing notification processing state such as 'pending', 'delivered', or 'failed'."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description or reason for the status."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this status entry was recorded.\n\n@format date-time"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this status entry was last updated.\n\n@format date-time"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp for this status entry.\n\n@format date-time"}},"required":["id","notification_id","status","created_at","updated_at"],"description":"Represents a historical status record for a user notification, capturing the processing state, timestamps, and optional descriptions for audit and lifecycle management."},"ICommunityAiNotificationStatus.ICreate":{"type":"object","properties":{"notification_id":{"type":"string","format":"uuid","description":"ID of the notification this status is associated with.\n\n@format uuid"},"status":{"type":"string","description":"Status code representing the notification state, e.g., 'pending', 'delivered', 'failed'."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description or reason for the status."}},"required":["notification_id","status"],"description":"Request body schema for creating a new notification status entry."},"ICommunityAiNotificationStatus.IUpdate":{"type":"object","properties":{"status":{"type":"string","description":"Status code representing the notification processing state."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description providing more details on status."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp indicating if the status entry is considered deleted.\n\n@format date-time"}},"required":[],"description":"Request body schema for updating an existing notification status entry."},"ICommunityAiUserNotificationPreference.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Page number.\n\n@default 1"},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Limit, number of records per page.\n\n@default 100"},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search keyword"},"email_notifications_enabled":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Filter for enabled email notifications"},"push_notifications_enabled":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Filter for enabled push notifications"},"sms_notifications_enabled":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Filter for enabled SMS notifications"}},"required":[],"description":"Request body schema for searching user notification preferences with filters and pagination."},"ICommunityAiUserNotificationPreferences":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier for the user notification preference record."},"user_id":{"type":"string","format":"uuid","description":"User this preference belongs to, referencing community_ai_members.id.\n\nThis identifies the member user who owns these notification preferences."},"email_notifications_enabled":{"type":"boolean","description":"Flag indicating whether the user has enabled email notifications.\n\nTrue if user opts to receive notifications via email."},"push_notifications_enabled":{"type":"boolean","description":"Flag indicating whether the user has enabled push notifications.\n\nTrue if push notifications are enabled for the user."},"sms_notifications_enabled":{"type":"boolean","description":"Flag indicating whether the user has enabled SMS notifications.\n\nTrue if user opts to receive SMS notifications."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the preferences were created.\n\nISO 8601 format date-time indicating creation time."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the preferences were last updated.\n\nISO 8601 date-time string of last update."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp for the preferences record.\n\nNullable timestamp indicating when this record was soft deleted."}},"required":["id","user_id","email_notifications_enabled","push_notifications_enabled","sms_notifications_enabled","created_at","updated_at","deleted_at"],"description":"User-specific notification preferences that store per-user settings for notification delivery channels, opt-ins, and categories. Preferences are linked to the associated user account and provide customization options for notification management."},"ICommunityAiUserNotificationPreferences.ICreate":{"type":"object","properties":{"user_id":{"type":"string","format":"uuid","description":"User this preference belongs to, referencing community_ai_members.id."},"email_notifications_enabled":{"type":"boolean","description":"Flag indicating whether the user has enabled email notifications."},"push_notifications_enabled":{"type":"boolean","description":"Flag indicating whether the user has enabled push notifications."},"sms_notifications_enabled":{"type":"boolean","description":"Flag indicating whether the user has enabled SMS notifications."}},"required":["user_id","email_notifications_enabled","push_notifications_enabled","sms_notifications_enabled"],"description":"User-specific notification preferences that store per-user settings for notification delivery channels, opt-ins, and categories. Preferences are linked to the associated user account and provide customization options for notification management."},"ICommunityAiUserNotificationPreferences.IUpdate":{"type":"object","properties":{"email_notifications_enabled":{"type":"boolean","description":"Flag indicating whether the user has enabled email notifications."},"push_notifications_enabled":{"type":"boolean","description":"Flag indicating whether the user has enabled push notifications."},"sms_notifications_enabled":{"type":"boolean","description":"Flag indicating whether the user has enabled SMS notifications."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp for the preferences record."}},"required":[],"description":"User-specific notification preferences that store per-user settings for notification delivery channels, opt-ins, and categories. Preferences are linked to the associated user account and provide customization options for notification management."},"ICommunityAiUserSessions.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","format":"uint32"},{"type":"null"}],"description":"Page number."},"limit":{"oneOf":[{"type":"integer","format":"uint32"},{"type":"null"}],"description":"Limitation of records per a page."},"community_ai_member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional filter with user id to restrict search to specific member."},"is_deleted":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Optional filter with soft deletion status: true for deleted, false for existing, null for all."}},"required":[],"description":"Page request data for community AI user sessions with optional filters for member ID and deletion status."},"ICommunityAiUserSession":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"community_ai_member_id":{"type":"string","format":"uuid","description":"Associated community AI member's id."},"session_token":{"type":"string","description":"Unique token used for session authentication."},"expires_at":{"type":"string","format":"date-time","description":"Timestamp when the session expires."},"refresh_token":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional token used to refresh the session."},"refresh_token_expires_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Expiration timestamp for the refresh token."},"ip_address":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"IP address from which the session was initiated."},"user_agent":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"User agent string of the client device."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of session creation."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to the session record."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the session was soft deleted or invalidated."}},"required":["id","community_ai_member_id","session_token","expires_at","created_at","updated_at"],"description":"Stores authentication sessions for community AI members, including session tokens, expiration info, IP address, and user agent data. This model facilitates session lifecycle management, revocation, and auditing."},"ICommunityAiUserSession.ICreate":{"type":"object","properties":{"community_ai_member_id":{"type":"string","format":"uuid","description":"Associated community AI member's id."},"session_token":{"type":"string","description":"Unique token used for session authentication."},"expires_at":{"type":"string","format":"date-time","description":"Timestamp when the session expires."},"refresh_token":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional token used to refresh the session."},"refresh_token_expires_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Expiration timestamp for the refresh token."},"ip_address":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"IP address from which the session was initiated."},"user_agent":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"User agent string of the client device."}},"required":["community_ai_member_id","session_token","expires_at"],"description":"Stores authentication sessions for community AI members, including session tokens, expiration info, IP address, and user agent data. This model facilitates session lifecycle management, revocation, and auditing."},"ICommunityAiUserSession.IUpdate":{"type":"object","properties":{"community_ai_member_id":{"type":"string","format":"uuid","description":"Associated community AI member's id."},"session_token":{"type":"string","description":"Unique token used for session authentication."},"expires_at":{"type":"string","format":"date-time","description":"Timestamp when the session expires."},"refresh_token":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional token used to refresh the session."},"refresh_token_expires_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Expiration timestamp for the refresh token."},"ip_address":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"IP address from which the session was initiated."},"user_agent":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"User agent string of the client device."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the session was soft deleted or invalidated."}},"required":[],"description":"Stores authentication sessions for community AI members, including session tokens, expiration info, IP address, and user agent data. This model facilitates session lifecycle management, revocation, and auditing."},"ICommunityAiUserSessionJwtTokens.IRequest":{"type":"object","properties":{"token_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by token type such as 'access' or 'refresh'."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter records by revocation timestamp."},"expires_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter records by expiration timestamp."},"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Record limit per page for pagination."}},"required":[],"description":"Search criteria for filtering JWT tokens associated with user sessions."},"ICommunityAiUserSessionJwtToken":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"community_ai_user_session_id":{"type":"string","format":"uuid","description":"Associated community AI user session's community_ai_user_sessions.id."},"token":{"type":"string","description":"JWT token string used for authentication or refresh processes."},"token_type":{"type":"string","description":"Type of JWT token, such as 'access' or 'refresh'."},"expires_at":{"type":"string","format":"date-time","description":"Expiration timestamp of the JWT token."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp at which the token was revoked, if applicable."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of token creation."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last token update."}},"required":["id","community_ai_user_session_id","token","token_type","expires_at","created_at","updated_at"],"description":"JWT tokens issued in relation to community AI user sessions, recording token strings, their types (access or refresh), expiration timestamps, and revocation status. Supports token lifecycle management and security enforcement."},"ICommunityAiUserSessionJwtToken.ICreate":{"type":"object","properties":{"community_ai_user_session_id":{"type":"string","format":"uuid","description":"Associated community AI user session's community_ai_user_sessions.id."},"token":{"type":"string","description":"JWT token string used for authentication or refresh processes."},"token_type":{"type":"string","description":"Type of JWT token, such as 'access' or 'refresh'."},"expires_at":{"type":"string","format":"date-time","description":"Expiration timestamp of the JWT token."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp at which the token was revoked, if applicable."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of token creation."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last token update."}},"required":["community_ai_user_session_id","token","token_type","expires_at","created_at","updated_at"],"description":"Request body schema to create a new JWT token associated with a user session."},"ICommunityAiJwtTokens.IUpdate":{"type":"object","properties":{"community_ai_user_session_id":{"type":"string","format":"uuid","description":"Associated community AI user session's community_ai_user_sessions.id."},"token":{"type":"string","description":"JWT token string used for authentication or refresh processes."},"token_type":{"type":"string","description":"Type of JWT token, such as 'access' or 'refresh'."},"expires_at":{"type":"string","format":"date-time","description":"Expiration timestamp of the JWT token."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp at which the token was revoked, if applicable."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of token creation."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last token update."}},"required":[],"description":"Request body schema to update an existing JWT token. All properties are optional to allow partial updates."},"ICommunityAiJwtTokens":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"community_ai_user_session_id":{"type":"string","format":"uuid","description":"Associated community AI user session's community_ai_user_sessions.id."},"token":{"type":"string","description":"JWT token string used for authentication or refresh processes."},"token_type":{"type":"string","description":"Type of JWT token, such as 'access' or 'refresh'."},"expires_at":{"type":"string","format":"date-time","description":"Expiration timestamp of the JWT token."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp at which the token was revoked, if applicable."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of token creation."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last token update."}},"required":["id","community_ai_user_session_id","token","token_type","expires_at","created_at","updated_at"],"description":"JWT tokens issued in relation to community AI user sessions, recording token strings, their types (access or refresh), expiration timestamps, and revocation status. Supports token lifecycle management and security enforcement."},"ICommunityAiAiServiceProviders":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the AI service provider."},"provider_name":{"type":"string","description":"Unique official name of the AI service provider used for display and identification."},"api_base_url":{"type":"string","description":"The base URI for the provider's API endpoints, with a maximum length supporting very long URLs (up to 80000 characters)."},"auth_type":{"type":"string","description":"Authentication mechanism used by the provider such as OAuth2 or API Key."},"api_key":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"API key or token used for accessing the AI service. This field is optional and may be null."},"config_json":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"JSON string storing dynamic configuration parameters for the AI provider. This is an optional property used to customize behavior."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the AI service provider record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the AI service provider record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp to indicate if the record is deleted. Nullable."}},"required":["id","provider_name","api_base_url","auth_type","created_at","updated_at"],"description":"AI service provider entity representing configuration metadata to connect to external AI services used in community AI platform for comment analysis and fact-checking.\n\nEach record maintains critical connection details, authentication info, and operational parameters.\n\nTimestamps track the life-cycle of the provider record.\n"},"ICommunityAiAiServiceProviders.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","description":"Current page number for paginated results."},{"type":"null"}],"description":"Current page number for paginated results."},"limit":{"oneOf":[{"type":"integer","description":"Number of records to return per page."},{"type":"null"}],"description":"Number of records to return per page."},"search":{"oneOf":[{"type":"string","description":"Optional search keyword to filter AI service providers by name or related fields."},{"type":"null"}],"description":"Optional search keyword to filter AI service providers by name or related fields."},"is_active":{"oneOf":[{"type":"boolean","description":"Filter to include only active service providers when true."},{"type":"null"}],"description":"Filter to include only active service providers when true."},"sort_by":{"oneOf":[{"type":"string","description":"Sorting criteria, e.g., 'provider_name' or 'created_at'."},{"type":"null"}],"description":"Sorting criteria, e.g., 'provider_name' or 'created_at'."}},"required":[],"description":"Request object for filtering, sorting, and paginating AI service providers list."},"ICommunityAiAiServiceProvider.ICreate":{"type":"object","properties":{"provider_name":{"type":"string","description":"Official name of the AI service provider."},"api_base_url":{"type":"string","maxLength":80000,"description":"Base URI for the provider's API endpoints."},"auth_type":{"type":"string","description":"Authentication mechanism used by the provider (e.g., OAuth2, API Key)."},"api_key":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"API key or token for accessing the AI service, optional."},"config_json":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"JSON string storing dynamic configuration parameters for the AI provider."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Logical deletion timestamp, if applicable."}},"required":["provider_name","api_base_url","auth_type"],"description":"Request payload to create a new AI service provider within the community AI platform, including necessary identification, authentication, and configuration information."},"ICommunityAiAiServiceProvider":{"description":"AI service provider entity representing external AI integrations with configuration credentials and metadata.\n\nEach record includes provider name, API endpoint, authentication type, optional API key, dynamic configuration JSON, state flags, and audit timestamps.\n\nThis entity is essential for managing and connecting external AI services used for comment analysis, content generation, and fact-checking features throughout the community AI platform.\n\n@namespace ExternalIntegrations","type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the AI service provider.\n\nUnique identifier for an AI service provider."},"provider_name":{"type":"string","description":"The official name used to reference the AI service provider in the system."},"api_base_url":{"type":"string","description":"The base URL where AI service API endpoints are located."},"auth_type":{"type":"string","description":"The method used for authenticating requests to the AI service, like OAuth2 or API Key."},"api_key":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"An optional key or token needed to authenticate API requests to the AI service."},"config_json":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional dynamic configuration in JSON format for advanced settings."},"created_at":{"type":"string","format":"date-time","description":"When this service provider record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the service provider record was last modified."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"If set, indicates the record was soft deleted and is no longer active."}},"required":["id","provider_name","api_base_url","auth_type","created_at","updated_at"]},"ICommunityAiAiServiceProvider.IUpdate":{"description":"Update model for AI service provider allowing partial updates of properties like provider name, API base URL, auth type, API key, and config JSON.\n\nUsed for patch or put operations in API.\n\n@namespace ExternalIntegrations","type":"object","properties":{"provider_name":{"type":"string","description":"The official name used to reference the AI service provider in the system."},"api_base_url":{"type":"string","description":"The base URL where AI service API endpoints are located."},"auth_type":{"type":"string","description":"The method used for authenticating requests to the AI service, like OAuth2 or API Key."},"api_key":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"An optional key or token needed to authenticate API requests to the AI service."},"config_json":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional dynamic configuration in JSON format for advanced settings."}},"required":[]},"ICommunityAiAiServiceProvider.IRequest":{"type":"object","properties":{"provider_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by provider name containing the given substring."},"auth_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by authentication type."},"is_active":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Filter by active status (true for active, false for inactive)."},"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Pagination: current page number."},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Pagination: items per page."},"orderBy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sorting criteria as a string, e.g., \"created_at desc\"."}},"required":[],"description":"Filtering and pagination parameters for AI service providers search."},"ICommunityAiNotificationProvider.IRequest":{"type":"object","properties":{"provider_name":{"oneOf":[{"type":"string","description":"Name of the notification service provider.\n\nFiltering parameter to search providers by name."},{"type":"null"}],"description":"Name of the notification service provider.\n\nFiltering parameter to search providers by name."},"status":{"oneOf":[{"type":"string","description":"Operational status filter.\n\nAllows filtering notification providers by status such as 'active' or 'inactive'."},{"type":"null"}],"description":"Operational status filter.\n\nAllows filtering notification providers by status such as 'active' or 'inactive'."},"page":{"oneOf":[{"type":"integer","description":"Page number for pagination.\n\nDefines the current page of paginated results to retrieve.","format":"int32"},{"type":"null"}],"description":"Page number for pagination.\n\nDefines the current page of paginated results to retrieve."},"limit":{"oneOf":[{"type":"integer","description":"Number of items per page.\n\nSpecifies how many notification providers to return in each paginated response.","format":"int32"},{"type":"null"}],"description":"Number of items per page.\n\nSpecifies how many notification providers to return in each paginated response."}},"description":"Search and pagination parameters for notification providers filtering","required":[]},"ICommunityAiNotificationProvider":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key identifier"},"provider_name":{"type":"string","description":"Name of the notification service provider"},"config_json":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional JSON string storing provider configuration"},"status":{"type":"string","description":"Operational status of the notification provider, e.g., active, inactive"},"created_at":{"type":"string","format":"date-time","description":"Timestamp of creation"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Nullable soft delete timestamp for the provider"}},"required":["id","provider_name","status","created_at","updated_at"],"description":"Notification service provider metadata storing configuration, operational status and audit timestamps."},"ICommunityAiNotificationProvider.ICreate":{"type":"object","properties":{"provider_name":{"type":"string","description":"Name of the notification service provider.\n\nThis field must be unique and is required for creating a new notification provider."},"config_json":{"oneOf":[{"type":"string","description":"JSON string storing dynamic configuration for the notification provider.\n\nOptional configuration JSON containing service credentials and settings."},{"type":"null"}],"description":"JSON string storing dynamic configuration for the notification provider.\n\nOptional configuration JSON containing service credentials and settings."},"status":{"type":"string","description":"Current operational status of the notification provider.\n\nIndicates if the service provider is active, inactive, or in error state.\nThis field is required."}},"required":["provider_name","status"],"description":"Request schema for creating a new notification provider, requiring unique provider name and operational status."},"ICommunityAiNotificationProvider.IUpdate":{"type":"object","properties":{"config_json":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Notification provider configuration JSON string, nullable."},"status":{"type":"string","description":"Current operational status of the notification provider (e.g., active, inactive, error)."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp for the preferences record, nullable."}},"required":["status"],"description":"Update request data structure for notification provider, allowing modification of configuration JSON and operational status."},"ICommunityAiApiUsageLog.IRequest":{"type":"object","properties":{"id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Primary Key UUID of the API usage log entry, optional for filtering."},"service_provider_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Referenced AI service provider ID for filtering, nullable."},"api_endpoint":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"API endpoint path called on the external service, nullable."},"request_timestamp":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"API request timestamp, nullable."},"response_time_ms":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Duration of the API request response in milliseconds, nullable."},"status_code":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"HTTP status code returned by the service, nullable."},"error_message":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Error message returned by the server if any, nullable."},"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Record creation timestamp, nullable."},"updated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Record last update timestamp, nullable."}},"required":[],"description":"Request object with optional filtering criteria for searching API usage logs."},"ICommunityAiApiUsageLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key UUID of the API usage log entry."},"service_provider_id":{"type":"string","format":"uuid","description":"Referenced AI service provider ID."},"api_endpoint":{"type":"string","description":"API endpoint path called on the external service."},"request_timestamp":{"type":"string","format":"date-time","description":"API request timestamp."},"response_time_ms":{"type":"integer","description":"Duration of the API request response in milliseconds."},"status_code":{"type":"integer","description":"HTTP status code returned by the service."},"error_message":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Error message returned by the server if any."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp."}},"required":["id","service_provider_id","api_endpoint","request_timestamp","response_time_ms","status_code","created_at","updated_at"],"description":"Entity capturing detailed API usage logs of external AI and notification services."},"ICommunityAiAuditLog.IRequest":{"type":"object","properties":{"id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Primary Key UUID of the audit log entry, nullable."},"user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Acting member user ID, nullable."},"admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Admin user ID, nullable."},"moderator_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Moderator user ID, nullable."},"system_setting_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Related system setting ID, nullable."},"action_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Type of action performed, e.g., 'login', 'post_create', 'comment_delete', nullable."},"action_description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Detailed description of the action performed, nullable."},"ip_address":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"IP address from which the action originated, nullable."},"user_agent":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"User agent string of the client, nullable."},"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the audit log entry was created, nullable."}},"required":[],"description":"Request object with optional filtering criteria for searching audit logs."},"ICommunityAiAuditLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the audit log entry."},"user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Member user ID associated with the action, nullable if not applicable."},"admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Admin user ID associated with the action, nullable if not applicable."},"moderator_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Moderator user ID associated with the action, nullable if not applicable."},"system_setting_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"System setting ID related to action, nullable if not applicable."},"action_type":{"type":"string","description":"Type of action, such as 'login', 'post_create'."},"action_description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Detailed description of the action performed."},"ip_address":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"IP address from which the action originated."},"user_agent":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"User agent string of the client performing the action."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the audit log entry was created."}},"required":["id","action_type","created_at"],"description":"Audit log entry capturing detailed records of system actions including user, admin, moderator, and system events for compliance and forensic analysis.\n\nEach log entry is immutable and includes metadata such as IP address and user agent for traceability."},"ICommunityAiAuditLogs.ICreate":{"type":"object","properties":{"user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Member user ID associated with the action, nullable if not applicable."},"admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Admin user ID associated with the action, nullable if not applicable."},"moderator_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Moderator user ID associated with the action, nullable if not applicable."},"system_setting_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"System setting ID related to action, nullable if not applicable."},"action_type":{"type":"string","description":"Type of action, such as 'login', 'post_create'."},"action_description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Detailed description of the action performed."},"ip_address":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"IP address from which the action originated."},"user_agent":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"User agent string of the client performing the action."},"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the audit log entry was created."}},"required":["action_type"],"description":"Payload for creating a new audit log entry. Certain fields are optional and nullable."},"ICommunityAiAuditLogs":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityAiAuditLog"},"description":"List of audit log records."}},"required":["pagination","data"],"description":"Paginated collection of audit logs matching search criteria."},"ICommunityAiAuditLogs.IUpdate":{"type":"object","properties":{"user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Member user ID associated with the action, nullable if not applicable."},"admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Admin user ID associated with the action, nullable if not applicable."},"moderator_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Moderator user ID associated with the action, nullable if not applicable."},"system_setting_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"System setting ID related to action, nullable if not applicable."},"action_type":{"type":"string","description":"Type of action, such as 'login', 'post_create'."},"action_description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Detailed description of the action performed."},"ip_address":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"IP address from which the action originated."},"user_agent":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"User agent string of the client performing the action."},"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the audit log entry was created."}},"required":[],"description":"Data for updating an existing audit log entry."},"ICommunityAiContentAccessLogs.IRequest":{"type":"object","properties":{"member_id":{"type":"string","description":"Filter by accessing member UUID","format":"uuid"},"post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by accessed post UUID"},"comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by accessed comment UUID"},"access_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by access event type e.g. 'view', 'edit'"},"device_info":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by client device information"},"ip_address":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by client IP address"},"created_at_start":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter by access event start timestamp"},"created_at_end":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter by access event end timestamp"},"page":{"oneOf":[{"type":"integer","minimum":1,"format":"int32"},{"type":"null"}],"description":"Current page number"},"limit":{"oneOf":[{"type":"integer","minimum":1,"format":"int32"},{"type":"null"}],"description":"Record limit per page"},"order_by":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Field to sort by"},"order_direction":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort direction asc or desc"}},"required":[],"description":"Request object for filtering and paginating content access logs. Contains optional filters, pagination, and sorting options."},"ICommunityAiAuditCommunityAiContentAccessLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the content access log record"},"member_id":{"type":"string","format":"uuid","description":"Accessing member's unique identifier"},"post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Accessed post ID, nullable if not applicable"},"comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Accessed comment ID, nullable if not applicable"},"access_type":{"type":"string","description":"Type of access event, e.g. 'view', 'edit', 'share'"},"device_info":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Device information of the client, nullable"},"ip_address":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"IP address from which the access was made, nullable"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the access event occurred"}},"required":["id","member_id","access_type","created_at"],"description":"Content access log record capturing member interactions with posts and comments, including metadata like access type, device info, IP address, and access timestamp."},"ICommunityAiAuditCommunityAiContentAccessLogICreate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"Accessing member's unique identifier"},"post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Accessed post ID, nullable if not applicable"},"comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Accessed comment ID, nullable if not applicable"},"access_type":{"type":"string","description":"Type of access event"},"device_info":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional device information"},"ip_address":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional IP address"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the access occurred"}},"required":["member_id","access_type","created_at"],"description":"Input data structure for creating a content access log record."},"ICommunityAiAuditCommunityAiContentAccessLogIUpdate":{"type":"object","properties":{"member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Accessing member's unique identifier"},"post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Accessed post ID, nullable if not applicable"},"comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Accessed comment ID, nullable if not applicable"},"access_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Type of access event"},"device_info":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional device info"},"ip_address":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional IP address"},"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the access event occurred"}},"required":[],"description":"Data structure for updating a content access log record, where all fields are optional."},"ICommunityAiAuditEditHistory":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the audit log entry.\n\n@format uuid\n@example \"9e8c7f4a-2bcd-4a01-b629-0b27a9177193\""},"edited_by_member_id":{"type":"string","format":"uuid","description":"Identifier of the member who performed the edit.\n\n@format uuid\n@example \"65f3b3f4-0d1b-48fa-a2e7-332b0ca682d6\""},"post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Identifier of the post that was edited, if applicable.\n\n@format uuid\n@example \"25cd6870-d772-429d-8b53-f37f8d0e4ae8\"\n@nullable"},"comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Identifier of the comment that was edited, if applicable.\n\n@format uuid\n@example \"739e2c7c-2310-4b11-88c8-2157a8e334ec\"\n@nullable"},"edit_type":{"type":"string","description":"Type of edit performed (e.g., \"content_update\", \"title_change\").\n\n@example \"content_update\""},"before_edit":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Content before the edit.\n\n@nullable"},"after_edit":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Content after the edit.\n\n@nullable"},"created_at":{"type":"string","format":"date-time","description":"When the edit was recorded.\n\n@format date-time\n@example \"2025-09-15T00:00:00.000Z\""}},"required":["id","edited_by_member_id","edit_type","created_at"],"description":"Community AI audit log record representing edit histories for posts and comments. This entity captures who edited the content, what was edited, previous and new content, and timestamps for audit purposes.\n\nAll fields adhere strictly to the Prisma schema definition with accurate format annotations to ensure data integrity and conformance with expected UUID and date-time formats.\n\nThis type is key for auditing content modifications and supporting content traceability and compliance requirements.\n"},"ICommunityAiAuditEditHistory.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Page number to retrieve.\n\nNumber must be an unsigned 32-bit integer.\n@default 1\n@example 1\n@minimum 1"},"limit":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Number of items per page.\n\nNumber must be an unsigned 32-bit integer.\n@default 20\n@example 20\n@minimum 1"},"edited_by_member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by member ID who edited.\n\nMember who performed the edit, UUID format.\n@nullable"},"post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by post ID.\n\nPost that was edited, UUID format, nullable.\n@nullable"},"comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by comment ID.\n\nComment that was edited, UUID format, nullable.\n@nullable"},"edit_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by edit type.\n\nType string to filter edits by type.\n@nullable"},"created_after":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter for edits recorded after this date.\n\nISO 8601 date-time string, nullable.\n@nullable"},"created_before":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter for edits recorded before this date.\n\nISO 8601 date-time string, nullable.\n@nullable"},"description":{"type":"string","description":"Description of the request for search and pagination parameters."}},"required":[],"description":"Request type for searching and paginating Community AI Edit Histories.\n\nThis interface supports filtering, sorting, and pagination parameters to query edit history logs efficiently."},"ICommunityAiAuditEditHistory.ICreate":{"type":"object","properties":{"edited_by_member_id":{"type":"string","format":"uuid","description":"Identifier of the member who performed the edit.\n\n@format uuid\n@example \"65f3b3f4-0d1b-48fa-a2e7-332b0ca682d6\""},"post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Identifier of the post that was edited, if applicable.\n\n@format uuid\n@example \"25cd6870-d772-429d-8b53-f37f8d0e4ae8\"\n@nullable"},"comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Identifier of the comment that was edited, if applicable.\n\n@format uuid\n@example \"739e2c7c-2310-4b11-88c8-2157a8e334ec\"\n@nullable"},"edit_type":{"type":"string","description":"Type of edit performed (e.g., \"content_update\", \"title_change\").\n\n@example \"content_update\""},"before_edit":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Content before the edit.\n\n@nullable"},"after_edit":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Content after the edit.\n\n@nullable"}},"required":["edited_by_member_id","edit_type"],"description":"Create new Community AI edit history record"},"ICommunityAiAuditEditHistory.IUpdate":{"type":"object","properties":{"edited_by_member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Identifier of the member who performed the edit.\n\n@format uuid\n@example \"65f3b3f4-0d1b-48fa-a2e7-332b0ca682d6\"\n@nullable"},"post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Identifier of the post that was edited, if applicable.\n\n@format uuid\n@example \"25cd6870-d772-429d-8b53-f37f8d0e4ae8\"\n@nullable"},"comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Identifier of the comment that was edited, if applicable.\n\n@format uuid\n@example \"739e2c7c-2310-4b11-88c8-2157a8e334ec\"\n@nullable"},"edit_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Type of edit performed (e.g., \"content_update\", \"title_change\").\n\n@nullable"},"before_edit":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Content before the edit.\n\n@nullable"},"after_edit":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Content after the edit.\n\n@nullable"}},"required":[],"description":"Update properties of Community AI edit history record"},"ICommunityAiAuditHistory":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Acting member user.\n\nOptional foreign key referencing community_ai_members.id indicating the user performing the action."},"admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Admin user.\n\nOptional foreign key referencing community_ai_admins.id indicating the admin performing the action."},"moderator_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Moderator user.\n\nOptional foreign key referencing community_ai_moderators.id indicating the moderator performing the action."},"system_setting_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Related system setting.\n\nOptional foreign key referencing community_ai_system_settings.id indicating the system setting involved in the action."},"action_type":{"type":"string","description":"Type of action performed, e.g., 'login', 'post_create', 'comment_delete'."},"action_description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Detailed description of the action performed."},"ip_address":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"IP address from which the action originated."},"user_agent":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"User agent string of the client performing the action."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the audit log entry was created."}},"required":["id","action_type","created_at"],"description":"Audit logs capturing detailed records of system actions including user, admin, moderator, and system events for compliance and forensic analysis.\n\nEach log entry is immutable and includes metadata such as IP address and user agent for traceability."},"ICommunityAiRoles.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"role_name":{"type":"string","description":"Unique name of the user role."}},"required":["id","role_name"],"description":"Summary information of user roles within the community AI platform.\n\nIncludes essential identifiers for role management and selection."},"ICommunityAiPermission.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"permission_name":{"type":"string","description":"Unique identifier name for the permission."}},"required":["id","permission_name"],"description":"Summary information of permission definitions within the community AI platform.\n\nIncludes key identifiers and names necessary for access control management."},"ICommunityAiExternalService.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"service_name":{"type":"string","description":"Unique name of the external service."},"is_active":{"type":"boolean","description":"Flag indicating if the service is currently active and enabled."}},"required":["id","service_name","is_active"],"description":"Summary information of external AI and system integration services.\n\nIncludes key status indicators and unique service names."},"ICommunityAiModerator.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the moderator user"},"email":{"type":"string","description":"Email address of the moderator user"},"display_name":{"type":"string","description":"Display name or nickname of the moderator user"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the moderator was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the moderator was last updated"}},"required":["id","email","display_name","created_at","updated_at"],"description":"Summary view representation of moderator user excluding sensitive details such as password hash.\n\nThis summary is optimized for listings and does not expose sensitive authentication fields."},"ICommunityAiMember.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the member user"},"email":{"type":"string","description":"Email address of the member user"},"display_name":{"type":"string","description":"Display name or nickname of the member user"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the member was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the member was last updated"}},"required":["id","email","display_name","created_at","updated_at"],"description":"Summary view representation of member user excluding sensitive details such as password hash.\n\nThis summary is optimized for listings and does not expose sensitive authentication fields."},"ICommunityAiPosts.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the post"},"author_id":{"type":"string","format":"uuid","description":"Author ID referring to a community member"},"title":{"type":"string","description":"Post title, up to 100 characters"},"slug":{"type":"string","description":"Unique slug for post URL"},"status":{"type":"string","description":"Current workflow status of the post"},"business_status":{"type":"string","description":"Business-specific post workflow status"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the post was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the post was last updated"}},"required":["id","author_id","title","slug","status","business_status","created_at","updated_at"],"description":"Summary view representation of a community post.\n\nThis summary is optimized for list views and search results, providing essential post information excluding full post content."},"ICommunityAiComment.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the comment"},"community_ai_post_id":{"type":"string","format":"uuid","description":"Identifier of the related community AI post"},"author_id":{"type":"string","format":"uuid","description":"Identifier of the comment author member"},"body":{"type":"string","description":"Body content of the comment"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the comment was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the comment was last updated"}},"required":["id","community_ai_post_id","author_id","body","created_at","updated_at"],"description":"Summary view for a comment on a community AI post.\n\nThis summary is optimized for comment lists and excludes internal system fields or sensitive information."},"ICommunityAiComments.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the comment."},"body":{"type":"string","description":"Comment content, non-empty and up to 1000 characters."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the comment was created."}},"required":["id","body","created_at"],"description":"Summary view of a community AI comment.\n\nIncludes essential fields for comment list views such as the unique comment ID, body text, and creation timestamp."},"ICommunityAiAiCommentSuggestion.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the AI comment suggestion."},"suggestion_text":{"type":"string","description":"AI-generated comment improvement suggestion text."},"confidence_score":{"type":"number","format":"double","description":"Confidence score for the AI suggestion ranging from 0.0 to 1.0."}},"required":["id","suggestion_text","confidence_score"],"description":"Summary of an AI-generated comment suggestion.\n\nIncludes unique ID, suggestion text, and confidence score for brief display in suggestion lists."},"ICommunityAiFactcheckClaims.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the factcheck claim."},"claim_text":{"type":"string","description":"Extracted factual claim text to be verified."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the claim was created."}},"required":["id","claim_text","created_at"],"description":"Summary view of a community AI fact-check claim.\n\nContains the claim's unique ID, the claim text, and the creation timestamp for overview and listing."},"ICommunityAiFactcheckFlag.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the fact-check flag."},"flag_type":{"type":"string","description":"Type of flag raised, e.g., misinformation, spam, inappropriate content."},"flag_status":{"type":"string","description":"Current status of the flag, e.g., pending, reviewed, dismissed."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the flag was created."}},"required":["id","flag_type","flag_status","created_at"],"description":"Summary view of a fact-check flag within the community AI platform.\n\nIncludes basic identifying and status fields for list views and moderation overviews."},"ICommunityAiContentFlag.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the content flag\n\n@format uuid"},"reason":{"type":"string","description":"Reason given by member for flagging the content."},"status":{"type":"string","description":"Current status of the flag such as 'pending', 'reviewed', or 'dismissed'."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the flag was created."}},"required":["id","reason","status","created_at"],"description":"Summary view of a community content flag raised by a member.\n\nThis summarized version includes only essential fields appropriate for list views or lightweight processing.\n\nIt references the community_ai_content_flags Prisma table's important properties regarding flags and moderation status."},"ICommunityAiModeratorReviews.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the moderator review\n\n@format uuid"},"decision":{"type":"string","description":"Decision outcome such as 'approved', 'rejected', or 'needs more info'."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the review was created."}},"required":["id","decision","created_at"],"description":"Summary view of moderator reviews.\n\nCaptures key decision information and creation timestamp, referencing the community_ai_moderator_reviews table.\n\nSuitable for moderation list displays or audit summarization."},"ICommunityAiUserReports.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the user report\n\n@format uuid"},"report_reason":{"type":"string","description":"Reason for reporting the content or user behavior."},"resolution_status":{"type":"string","description":"Current resolution status such as 'open', 'investigating', or 'closed'."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the report was created."}},"required":["id","report_reason","resolution_status","created_at"],"description":"Summary view of user reports.\n\nContains essential information about member-submitted content or user behavior reports.\n\nReferences the community_ai_user_reports Prisma table's key fields for report processing."},"ICommunityAiAdminAction.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the admin action\n\n@format uuid"},"action_type":{"type":"string","description":"Type of administrative action such as 'ban user', 'unban user', 'warn user', or 'delete content'."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of when the action was performed."}},"required":["id","action_type","created_at"],"description":"Summary view of admin actions performed in the Community AI platform.\n\nThis summary includes the action type, unique admin action identifier, and timestamps.\n\nIt corresponds to the community_ai_admin_actions table for audit and administrative tracking purposes."},"ICommunityAiNotification.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the notification"},"notification_type":{"type":"string","description":"Type of notification such as 'comment_reply', 'factcheck_flagged', or 'moderator_alert'"},"title":{"type":"string","description":"Notification title to be displayed to the user"},"read_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the notification was read by the user"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the notification was created"}},"required":["id","notification_type","title","created_at"],"description":"Summary of user notification for efficient list display including key identifying and status fields."},"ICommunityAiUserNotificationPreference":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the user notification preference"},"user_id":{"type":"string","format":"uuid","description":"User this preference belongs to, referencing community_ai_members.id"},"email_notifications_enabled":{"type":"boolean","description":"Flag indicating whether the user has enabled email notifications"},"push_notifications_enabled":{"type":"boolean","description":"Flag indicating whether the user has enabled push notifications"},"sms_notifications_enabled":{"type":"boolean","description":"Flag indicating whether the user has enabled SMS notifications"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the preferences were created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the preferences were last updated"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp for the preferences record"}},"required":["id","user_id","email_notifications_enabled","push_notifications_enabled","sms_notifications_enabled","created_at","updated_at"],"description":"User-specific notification preferences that store per-user settings for notification delivery channels, opt-ins, and categories.\n\nThis entity enables personalized notification management and user control over message delivery."},"ICommunityAiUserNotificationPreference.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the user notification preference"},"user_id":{"type":"string","format":"uuid","description":"User this preference belongs to, referencing community_ai_members.id"},"email_notifications_enabled":{"type":"boolean","description":"Flag indicating whether the user has enabled email notifications"},"push_notifications_enabled":{"type":"boolean","description":"Flag indicating whether the user has enabled push notifications"},"sms_notifications_enabled":{"type":"boolean","description":"Flag indicating whether the user has enabled SMS notifications"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the preferences were created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the preferences were last updated"}},"required":["id","user_id","email_notifications_enabled","push_notifications_enabled","sms_notifications_enabled","created_at","updated_at"],"description":"Summary of user notification preferences providing core delivery channel settings without audit deletion timestamps."},"ICommunityAiUserSessions":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier"},"community_ai_member_id":{"type":"string","format":"uuid","description":"Associated community AI member's id"},"session_token":{"type":"string","description":"Unique token for session authentication"},"expires_at":{"type":"string","format":"date-time","description":"Expiration timestamp of the session"},"refresh_token":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional token for session renewal"},"refresh_token_expires_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Expiration timestamp of the refresh token"},"ip_address":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"IP address from which the session was initiated"},"user_agent":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"User agent string of the client device"},"created_at":{"type":"string","format":"date-time","description":"Timestamp of session creation"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the session was soft deleted or invalidated"}},"required":["id","community_ai_member_id","session_token","expires_at","created_at","updated_at"],"description":"Authentication session data storing tokens, expiration info, client device and connection info, supporting lifecycle and audit of user sessions."},"ICommunityAiUserSessions.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the user session"},"community_ai_member_id":{"type":"string","format":"uuid","description":"The associated member's unique identifier"},"session_token":{"type":"string","description":"Unique token for authentication session"},"expires_at":{"type":"string","format":"date-time","description":"Timestamp when the session expires"},"created_at":{"type":"string","format":"date-time","description":"Session creation timestamp"},"updated_at":{"type":"string","format":"date-time","description":"Session update timestamp"}},"required":["id","community_ai_member_id","session_token","expires_at","created_at","updated_at"],"description":"Minimal summary of a community AI member's authentication session, including essential identification and expiration timestamps."},"ICommunityAiNotificationProvider.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the notification provider"},"provider_name":{"type":"string","description":"Name of the notification service provider"},"status":{"type":"string","description":"Operational status of the notification provider"},"created_at":{"type":"string","format":"date-time","description":"Timestamp of creation"}},"required":["id","provider_name","status","created_at"],"description":"Summary view of notification providers showing basic identification and operational status."},"ICommunityAiAuditLog.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the audit log entry"},"action_type":{"type":"string","description":"Type of action performed, e.g., 'login', 'post_create'"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the audit log entry was created"}},"required":["id","action_type","created_at"],"description":"Summary view of audit log entry\n\nThis type includes only basic identifying information and action type along with creation timestamp for listing and brief representations."},"ICommunityAiContentAccessLogs.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the content access log entry"},"member_id":{"type":"string","format":"uuid","description":"ID of the accessing member (user)"},"post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Accessed post ID (optional)"},"comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Accessed comment ID (optional)"},"access_type":{"type":"string","description":"Type of access event, e.g., 'view', 'edit'"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the access event occurred"}},"required":["id","member_id","access_type","created_at"],"description":"Summary of content access log entries\n\nProvides essential information about user interactions with posts and comments for auditing and compliance purposes."}}}}