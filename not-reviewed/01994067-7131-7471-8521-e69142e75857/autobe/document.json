{"operations":[{"specification":"This API operation allows guest users (unauthenticated) to register a temporary guest account. It creates an entry in the guest users table ('oauth_server_guests'), which only contains an id and auditing timestamps. Upon registration, the system issues temporary JWT tokens for the session. There is no password or email authentication since guests are anonymous or temporary users. The registration endpoint is public with no authentication required. This operation follows the pattern '/auth/guest/join' with HTTP POST method. The request body uses the 'IOauthServerGuest.ICreate' schema. The response body follows the 'IOauthServerOauthServerGuest.IAuthorized' schema, which represents the authorized JWT token response customized for the prefix 'OauthServer' and role 'Guest'. This operation has authorizationType 'join' indicating user registration flow and is accessible publicly (authorizationRole null). Future security considerations include ensuring the tokens issued are temporary and expire quickly, aligning with guest session management. Related refresh token issuance is handled in a separate API.","authorizationType":"join","description":"This operation implements guest user registration creating a new guest account record in the 'oauth_server_guests' table which tracks only creation and update timestamps and supports soft delete via 'deleted_at'. No authentication fields exist as guests do not possess credentials. Tokens issued upon join allow temporary access without login. This endpoint is public as guests are unauthenticated entities. Tokens issued are optimized for ephemeral sessions as guests' access is limited. Related operations include the token refresh endpoint for guests. \n\nClients may use this join API to start a new guest session before proceeding to authenticated workflows or browse limited resources.\n\nSoft delete policy applies but guest entries are expected to be temporary.\n\nThis API operation is essential for temporary, unauthenticated access management in the OAuth server system.","summary":"Guest user registration creating a temporary unauthenticated session and issuing temporary JWT tokens with no credentials.","parameters":[],"requestBody":{"description":"Payload to create a new guest user account entry in the 'oauth_server_guests' table.","typeName":"IOauthServerGuest.ICreate"},"responseBody":{"description":"Response containing JWT authorization tokens for the guest account.","typeName":"IOauthServerOauthServerGuest.IAuthorized"},"authorizationRole":null,"name":"join","path":"/auth/guest/join","method":"post"},{"specification":"Guest user token refresh operation supporting ephemeral session extension. This API uses the 'oauth_server_guests' table structure confirming guests are unauthenticated, ephemeral users. The endpoint receives a refresh token and issues new temporary access tokens without requiring login credentials. Tokens remain consistent with guest user permissions and scope. The refresh operation path is '/auth/guest/refresh' with HTTP POST method. Request body schema is 'IOauthServerGuest.IRefresh' representing a refresh token input type. Response body uses 'IOauthServerOauthServerGuest.IAuthorized' type representing renewed authorization tokens. Authorization type is 'refresh' indicating token renewal. This operation is restricted to guest role context but does not require logged-in user credentials since guests lack persistent identity. It enforces token validation and refresh logic internally.","authorizationType":"refresh","description":"Token refresh operation for guests who have temporary access tokens issued after registration but no traditional authentication credentials. The 'oauth_server_guests' table contains no password or email fields, confirming ephemeral access. This endpoint renews tokens based on valid refresh token presented, extending guest sessions temporarily.\n\nThis process helps maintain lightweight guest access without persistent login.\n\nSoft delete field 'deleted_at' applies to guest entries.\n\nRefresh tokens and access tokens have short TTLs aligned with guest session management.\n\nThis API complements the 'join' operation for guests to maintain ephemeral authenticated state safely.\n\nSecurity considerations include strict validation of refresh tokens and expiration.","summary":"Guest user refreshes temporary tokens to extend ephemeral sessions without login.","parameters":[],"requestBody":{"description":"Refresh token payload to request new tokens for guest user session.","typeName":"IOauthServerGuest.IRefresh"},"responseBody":{"description":"Response with new JWT authorization tokens for the guest user.","typeName":"IOauthServerOauthServerGuest.IAuthorized"},"authorizationRole":null,"name":"refresh","path":"/auth/guest/refresh","method":"post"},{"specification":"This API operation handles member user registration in the OAuth server system. It is associated with the oauth_server_members table in the Prisma schema. It supports creating new member accounts with required email, verified flag, and password hash fields, and issues JWT tokens upon successful registration. The user is unauthenticated before registration, so this operation uses 'join' authorization type. The path is /auth/member/join with POST method, reflecting a public endpoint for account creation.\n\nThe operation validates that the new email is unique in the oauth_server_members table, encrypts the password to store as password_hash, and initializes the email_verified flag to false or handled accordingly as per system policies. It returns JWT tokens following the I{Prefix}Member.IAuthorized pattern, e.g., IOauthServerMember.IAuthorized.\n\nThis operation aligns with the member role kind of 'member', enabling registration for authenticated users. It leverages the email, email_verified, and password_hash fields from the schema.\n\nRelated operations include login (/auth/member/login) and token refresh (/auth/member/refresh).\n\nSecurity considerations include handling sensitive password data securely, ensuring unique emails, and returning tokens only after successful creation.","authorizationType":"join","description":"This operation allows member users to join/register by providing email and password credentials. It leverages the oauth_server_members table fields such as email, email_verified, and password_hash for user creation and management.\n\nThe registration process requires validating unique emails, securely hashing passwords, and initializing the email_verified flag.\n\nUpon successful registration, JWT access and refresh tokens are issued to authenticate the user for subsequent requests.\n\nThe operation is public, allowing unauthenticated users to access it for account creation.\n\nThis operation is part of the authentication workflow alongside login and token refresh operations for member users.","summary":"Register a new member user and issue JWT tokens","parameters":[],"requestBody":{"description":"Member registration info including email and password","typeName":"IOauthServerMember.ICreate"},"responseBody":{"description":"Member user info and JWT authorization tokens","typeName":"IOauthServerMember.IAuthorized"},"authorizationRole":"member","name":"join","path":"/auth/member/join","method":"post"},{"specification":"This API operation handles member user login for the OAuth server. It authenticates provided credentials against the oauth_server_members table, checking email, password hash, and verified status.\n\nUpon successful authentication, the operation issues JWT access and refresh tokens encoded for the oauthServer member role with pattern IOauthServerMember.IAuthorized.\n\nThis is a public endpoint at /auth/member/login using POST method. Authentication type is 'login'.\n\nThe operation ensures secure credential validation, resistance to common attacks, and token issuance for session management.\n\nRelated operations include registration (/auth/member/join) and token refresh (/auth/member/refresh).","authorizationType":"login","description":"Authenticates a member user's credentials (email and password) and, upon success, issues JWT access and refresh tokens for authenticated session management.\n\nThe operation validates the user's email and compares the password hash with the stored value in oauth_server_members.\n\nIt returns tokens adhering to the IOauthServerMember.IAuthorized response schema.\n\nThis endpoint is public to allow user authentication before session initiation.\n\nIt complements the registration and token refresh endpoints in the OAuth authentication lifecycle.","summary":"Member user login and JWT token issuance","parameters":[],"requestBody":{"description":"Member login credentials including email and password","typeName":"IOauthServerMember.ILogin"},"responseBody":{"description":"JWT tokens for authenticated member user","typeName":"IOauthServerMember.IAuthorized"},"authorizationRole":"member","name":"login","path":"/auth/member/login","method":"post"},{"specification":"This API operation handles token refreshing for member users in the OAuth server. It accepts a valid refresh token and issues new JWT access and refresh tokens adhering to the IOauthServerMember.IAuthorized pattern.\n\nThe operation verifies the refresh token from oauth_server_refresh_tokens related to member users, ensuring token validity, expiration, and revocation status.\n\nThis is a secured endpoint but public in terms of initial authentication at /auth/member/refresh using POST method, with 'refresh' authorization type.\n\nIt is critical to keep sessions active securely without requiring user re-login.\n\nRelated operations include join (registration) and login.\n\nSecurity considerations include preventing token replay and misuse.","authorizationType":"refresh","description":"Refreshes JWT tokens for member users by accepting a valid refresh token and issuing new authorization tokens.\n\nEnsures the provided refresh token is valid and not revoked.\n\nReturns new JWT access and refresh tokens adhering to IOauthServerMember.IAuthorized response schema.\n\nThis operation maintains secure session continuity.\n\nIt complements the authentication flow of join and login operations for members.","summary":"Refresh JWT tokens for member user","parameters":[],"requestBody":{"description":"Refresh token request","typeName":"IOauthServerMember.IRefresh"},"responseBody":{"description":"New JWT tokens for member user","typeName":"IOauthServerMember.IAuthorized"},"authorizationRole":"member","name":"refresh","path":"/auth/member/refresh","method":"post"},{"specification":"This API operation allows system administrators to register new admin accounts on the OAuth server. It uses the oauth_server_admins table for storing admin user data including unique email, email verification status, password hash, and timestamps for auditing and soft deletion. The creation process ensures the admin can subsequently authenticate using JWT-based login. The schema includes fields: id, email, email_verified, password_hash, created_at, updated_at, deleted_at. The join operation generates an account and provides initial JWT tokens. It's publicly accessible since registration is an entry point operation and does not require prior login.","authorizationType":"join","description":"This join operation for admin users creates a new administrator account with a unique email, hashed password, and an email verified flag. The operation stores data in the oauth_server_admins table and includes audit timestamps and soft delete support. Upon successful registration, the system returns JWT tokens granting admin access rights. Security includes validation of email uniqueness and password hashing. Related operations include login and token refresh for full authentication lifecycle.","summary":"Create a new admin user account with JWT authorization using oauth_server_admins table.","parameters":[],"requestBody":{"description":"Admin user creation request data with email, password, and verification flag.","typeName":"IOauthServerAdmin.ICreate"},"responseBody":{"description":"Authorized admin user authentication response with JWT tokens.","typeName":"IOauthServerAdmin.IAuthorized"},"authorizationRole":"admin","name":"join","path":"/auth/admin/join","method":"post"},{"specification":"This API operation allows admin users to authenticate by login. It verifies credentials against the oauth_server_admins table storing email and hashed password and upon success, issues JWT tokens for authenticated sessions. The login operation requires email and password, performs validation, and returns JWT tokens representing admin user sessions. Security measures include password hash verification and token issuance with expiration. This operation is public as it serves as an entry point for authentication.","authorizationType":"login","description":"Admin user login authenticates credentials stored in the oauth_server_admins table including email and hashed password fields. Successful login returns JWT tokens that provide access rights for admin operations. Security involves safe handling of password verification and token generation. Follow-up operations include token refresh and join for account lifecycle management.","summary":"Authenticate admin user and issue JWT tokens using oauth_server_admins table.","parameters":[],"requestBody":{"description":"Admin user login request containing email and password.","typeName":"IOauthServerAdmin.ILogin"},"responseBody":{"description":"Authorized admin user authentication response with JWT tokens.","typeName":"IOauthServerAdmin.IAuthorized"},"authorizationRole":"admin","name":"login","path":"/auth/admin/login","method":"post"},{"specification":"This API operation refreshes JWT tokens for authenticated admin users using a valid refresh token. It manages session continuity and renews access rights. The underlying database table involved is oauth_server_admins, which stores admin user details. The refresh token must be valid and associated with an existing session. Upon successful validation, new JWT tokens are issued. Security includes validation of refresh tokens and expiration management.","authorizationType":"refresh","description":"Refreshes authentication tokens for admin users maintaining session continuity. It validates refresh tokens associated with the oauth_server_admins table. Successfully refreshed tokens grant continued access rights without requiring re-login. Security includes protecting against token replay and expiration errors. This operation supports secure token lifecycle management alongside join and login.","summary":"Refresh JWT tokens for admin users using oauth_server_admins table.","parameters":[],"requestBody":{"description":"Token refresh request payload with refresh token info.","typeName":"IOauthServerAdmin.IRefresh"},"responseBody":{"description":"Authorized admin user authentication response with renewed JWT tokens.","typeName":"IOauthServerAdmin.IAuthorized"},"authorizationRole":"admin","name":"refresh","path":"/auth/admin/refresh","method":"post"},{"specification":"This API operation enables a developer to register a new developer account in the OAuth server system, consistent with the oauth_server_developers table fields. It allows creation of developer accounts with email and password, storing hashed passwords securely. The operation issues initial JWT authorization tokens upon successful registration. The response type is IOauthServerDeveloper.IAuthorized, reflecting initial authorized state. This endpoint is publicly accessible and requires no prior authorization.\n\nSecurity considerations include verifying email uniqueness and password hash storage. It integrates with login and refresh processes. The registration data ensures compliance with the oauth_server_developers schema, including email (unique), password_hash, timestamps handled internally.","authorizationType":"join","description":"Registers a new developer account using email and password according to the oauth_server_developers schema. This is part of the member kind user system, supporting registration and initial authorization. The operation is public with join authorizationType. It stores hashed passwords as password_hash field. On successful registration, IOauthServerDeveloper.IAuthorized type with access and refresh tokens is returned. Required fields correspond exactly to oauth_server_developers columns relevant to creation.","summary":"Create a new developer account for OAuth server as defined in oauth_server_developers table.","parameters":[],"requestBody":{"description":"Required data to create a developer account by registration API.","typeName":"IOauthServerDeveloper.ICreate"},"responseBody":{"description":"Authorized developer response including tokens.","typeName":"IOauthServerDeveloper.IAuthorized"},"authorizationRole":null,"name":"join","path":"/auth/developer/join","method":"post"},{"specification":"This developer login API enables an existing developer user to authenticate with email and password, validating credentials against the oauth_server_developers table. It issues opaque JWT access and refresh tokens upon successful authentication. The operation uses the login authorizationType to indicate credential validation. This endpoint is publicly accessible.\n\nSecurity considerations include secure password hash comparison and token issuance consistent with the stored oauth_server_developers.password_hash field. On success, the API returns IOauthServerDeveloper.IAuthorized object containing authorized tokens. This is essential for developer users with kind 'member'.","authorizationType":"login","description":"Authenticate developer user by verifying email and password against oauth_server_developers schema. On success returns authorized tokens in IOauthServerDeveloper.IAuthorized format. Public endpoint with login authorizationType. It is part of full authentication flow for member kind users.","summary":"Login for developer user according to oauth_server_developers table credentials.","parameters":[],"requestBody":{"description":"Login credentials for developer user authentication.","typeName":"IOauthServerDeveloper.ILogin"},"responseBody":{"description":"Authorized developer response with access and refresh tokens.","typeName":"IOauthServerDeveloper.IAuthorized"},"authorizationRole":null,"name":"login","path":"/auth/developer/login","method":"post"},{"specification":"This API endpoint allows refresh of JWT tokens using valid refresh tokens for developer users by validation against the oauth_server_developers credentials and stored tokens. It supports refresh authorization flow, issuing new access and refresh tokens encoded as IOauthServerDeveloper.IAuthorized on success. Implements token renewal without requiring re-login.\n\nSecurity enforced by validating refresh tokens and revocation checks. Only authenticated developers with kind 'member' can access. Uses refresh authorizationType to mark token renewal actions. Route is /auth/developer/refresh.","authorizationType":"refresh","description":"Refresh access and refresh tokens for developer accounts. Validates the refresh token and issues new tokens. Returns IOauthServerDeveloper.IAuthorized type containing new tokens. Only accessible with valid refresh token authorization. Member kind user operation matching oauth_server_developers schema.","summary":"Refresh JWT tokens for developer users to maintain authenticated session.","parameters":[],"requestBody":{"description":"Refresh token request payload.","typeName":"IOauthServerDeveloper.IRefresh"},"responseBody":{"description":"New authorized developer tokens in response.","typeName":"IOauthServerDeveloper.IAuthorized"},"authorizationRole":null,"name":"refresh","path":"/auth/developer/refresh","method":"post"},{"specification":"This operation retrieves a filtered and paginated list of OAuth server configuration settings from the oauth_server_configs table. It supports complex search criteria, paging, and sorting to allow administrators or authorized users to list and filter the system configuration key-value pairs, including parameters such as keys, values, descriptions, creation date, and update date. This facilitates dynamic system configuration management through an API endpoint supporting patch method for flexible queries.","description":"Retrieve a filtered and paginated list of OAuth server configuration settings. The oauth_server_configs table contains key-value configuration pairs used to control various aspects of the OAuth server's behavior.\n\nThis operation supports advanced filtering by key, value, description, and active status (non-deleted). It also supports pagination and sorting to efficiently handle large numbers of configurations.\n\nSecurity considerations require that only authorized users can access these settings, as exposing configuration details may reveal sensitive system internals.\n\nThe operation integrates with the oauth_server_configs Prisma model, reflecting the full set of fields including created_at, updated_at, and deleted_at timestamps.\n\nRequest parameters should allow partial key matching, exact or partial value filtering, and filtering by deleted or active status.\n\nResponse includes paginated data with summary information about each configuration item.","summary":"Search and retrieve filtered, paginated list of OAuth server configurations","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for OAuth server configurations","typeName":"IOauthServerOauthServerConfigs.IRequest"},"responseBody":{"description":"Paginated list of OAuth server configuration summaries matching search criteria","typeName":"IPageIOauthServerOauthServerConfigs.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/oauthServer/admin/oauthServerConfigs","method":"patch"},{"specification":"This operation retrieves detailed information of a specific OAuth server configuration identified by its unique ID from the oauth_server_configs table. This allows administrators or authorized users to view the entire data of a configuration record including key, value, description, and timestamps.","description":"Retrieve detailed information of a single OAuth server configuration by its unique ID.\n\nThe record includes key, value, description, creation and update timestamps, and deleted_at status.\n\nThis is a secured operation accessible only by administrators to prevent exposure of sensitive configuration data.\n\nThe response returns the full OAuth server configuration record corresponding to the requested ID as defined in the oauth_server_configs Prisma model.\n\nIf the configuration ID does not exist or is soft deleted, an appropriate error should be returned by the API implementation.","summary":"Retrieve detailed OAuth server configuration by ID","parameters":[{"name":"id","description":"Unique identifier of the OAuth server configuration","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"OAuth server configuration details for the specified ID","typeName":"IOauthServerOauthServerConfigs"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/oauthServer/admin/oauthServerConfigs/{id}","method":"get"},{"specification":"This operation creates a new OAuth server configuration record in the oauth_server_configs table. It accepts key, value, and optional description fields to define new system configuration settings dynamically through the API. The creation timestamps are set automatically upon record creation, and deleted_at is null by default.\n\nThis operation requires administrative privileges, ensuring only authorized personnel can modify system-wide configuration.","description":"Create a new OAuth server configuration setting.\n\nInput includes configuration key, its value, and optional description.\n\nThe operation sets creation and update timestamps automatically and leaves deleted_at as null.\n\nOnly authorized administrators can perform this operation to manage system configurations.\n\nCreated configuration can be queried later through the list or detail APIs.\n\nValidation shall ensure unique key constraint.\n\nError handling must prevent duplicate key creation.","summary":"Create a new OAuth server configuration record","parameters":[],"requestBody":{"description":"Creation information for OAuth server configuration","typeName":"IOauthServerOauthServerConfigs.ICreate"},"responseBody":{"description":"Newly created OAuth server configuration details","typeName":"IOauthServerOauthServerConfigs"},"authorizationType":null,"authorizationRole":"admin","name":"create","path":"/oauthServer/admin/oauthServerConfigs","method":"post"},{"specification":"This operation updates an existing OAuth server configuration record identified by its unique ID in the oauth_server_configs table. It allows modification of value and description fields. Key is immutable and creation timestamp remains unchanged. Update timestamp is set automatically.\n\nOnly authorized administrators have access to update configurations to prevent unauthorized system behavior changes.\n\nIf the configuration ID does not exist or is soft deleted, update should fail gracefully.\n\nValidation on fields is performed to ensure consistency and uniqueness where applicable.","description":"Update an existing OAuth server configuration identified by ID.\n\nAllows changing value and description fields. Key cannot be changed.\n\nUpdate timestamp is automatically refreshed.\n\nOperation is restricted to administrators to protect system integrity.\n\nErrors returned if ID not found or record is soft deleted.\n\nSuccessful update returns the full updated configuration record.","summary":"Update an existing OAuth server configuration by ID","parameters":[{"name":"id","description":"Unique identifier of the OAuth server configuration to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information for OAuth server configuration","typeName":"IOauthServerOauthServerConfigs.IUpdate"},"responseBody":{"description":"Updated OAuth server configuration details","typeName":"IOauthServerOauthServerConfigs"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/oauthServer/admin/oauthServerConfigs/{id}","method":"put"},{"specification":"This operation permanently deletes an oauth_server_configs record identified by its UUID. It removes the system configuration setting from the database, including all its metadata such as the key, value, description, and auditing timestamps. This endpoint corresponds to the oauth_server_configs Prisma model and does not support soft deletion signal in API operation since the deleted_at field handles soft delete internally. The client must supply the unique id of the config record to delete.","description":"Deletes a system configuration record from the OAuth server's settings. This operation is intended for administrative use to permanently remove obsolete or erroneous configuration entries.\n\nOnly users with appropriate administrative authorization should perform this deletion.\n\nThe record identified by the provided id will be removed permanently from the database and cannot be recovered via this API.\n\nIt is associated with the oauth_server_configs Prisma table representing key-value system configuration.\n\nNo request body is required since this is a deletion by id.\n\nErrors such as record not found or unauthorized access must be properly handled by the service.","summary":"Delete an OAuth server config by id","parameters":[{"name":"id","in":"path","description":"Unique identifier of the OAuth server config to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/oauthServer/admin/oauthServerConfigs/{id}","method":"delete","authorizationRole":"admin","authorizationType":null},{"specification":"This operation retrieves a paginated and searchable list of Redis cache configurations used by the OAuth server. It supports advanced filtering, sorting, and pagination parameters in the request body. The API fetches cache metadata such as cache_name, prefix, TTL seconds, description, and timestamps from the oauth_server_redis_caches table.\n\nThis is useful for administrators or system operators to review and manage caching strategies in the system.\n\nThe operation requires authorization and is limited to admin users only.","description":"Retrieve a list of Redis cache configurations with filtering and pagination.\n\nThis operation offers system administrators the ability to query Redis cache settings applied for OAuth token verification caching, user info caching, external API response caching, and client info caching.\n\nResults include detailed cache names, TTL settings, prefixes, and descriptions.\n\nRequest body must specify search filters and pagination options.\n\nThe response provides a paginated list of cache configuration summaries.\n\nAdmin role authorization is required due to sensitive system settings access.","summary":"List Redis cache configurations with filters and pagination","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for Redis cache configurations","typeName":"IOauthServerRedisCache.IRequest"},"responseBody":{"description":"Paginated list of Redis cache configuration summaries matching the search criteria","typeName":"IPageIOauthServerRedisCache.ISummary"},"authorizationRoles":["admin"],"name":"index","path":"/oauthServer/admin/oauthServerRedisCaches","method":"patch","authorizationRole":"admin","authorizationType":null},{"specification":"This operation retrieves detailed information about a specific Redis cache configuration identified by UUID from the oauth_server_redis_caches table. It includes the cache name, prefix, TTL, description, and timestamps.\n\nThis endpoint is intended for administrators to view configuration details of Redis caches employed for token validation, caching of user and client info, and external API data.\n\nThe operation requires authorization for the admin role and fetches a single resource by path parameter id.","description":"Retrieve detailed Redis cache configuration by unique ID.\n\nThis operation allows administrators to view full configuration details of a Redis cache used within the OAuth server system.\n\nIt corresponds to the OAuth server Redis cache table with fields describing TTL values, key prefixes, and usage descriptions.\n\nThe exact cache configuration is identified by the UUID provided as path parameter.\n\nOwnership and permission restrictions ensure that only authorized admin users can access this data.","summary":"Get Redis cache configuration detail by id","parameters":[{"name":"id","in":"path","description":"Unique identifier of the Redis cache configuration to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed Redis cache configuration information","typeName":"IOauthServerRedisCache"},"authorizationRoles":["admin"],"name":"at","path":"/oauthServer/admin/oauthServerRedisCaches/{id}","method":"get","authorizationRole":"admin","authorizationType":null},{"specification":"This operation creates a new Redis cache configuration record in the system, storing metadata such as cache_name, prefix, TTL seconds, and description. The operation ties to the oauth_server_redis_caches Prisma table and requires administrative permission.\n\nThe request body must provide the new cache configuration details including name, prefix, TTL, and an optional description.\n\nThe response returns the newly created cache configuration entity with its unique ID and timestamps.\n\nThis is crucial for managing Redis caches used for token verification caching, user info caching, external API response caching, and client info caching in the OAuth server service.","description":"Create a new Redis cache configuration for OAuth server.\n\nAdministrators can add new cache configurations specifying cache names, TTL durations, key prefixes, and usage descriptions.\n\nThis allows flexible and performant caching strategies in Redis for various OAuth server data.\n\nProper validation ensures unique cache names and valid TTL values.\n\nThe created cache record is returned with full details.\n\nAuthorization with admin role is mandatory.","summary":"Create Redis cache configuration","parameters":[],"requestBody":{"description":"Creation info of the Redis cache configuration","typeName":"IOauthServerRedisCache.ICreate"},"responseBody":{"description":"Created Redis cache configuration information","typeName":"IOauthServerRedisCache"},"authorizationRoles":["admin"],"name":"create","path":"/oauthServer/admin/oauthServerRedisCaches","method":"post","authorizationRole":"admin","authorizationType":null},{"specification":"This operation updates an existing Redis cache configuration in the oauth_server_redis_caches table. The Redis cache configurations include cache name, prefix, TTL, and description to optimize token and data caching performance for the OAuth server. The operation allows modification of these properties by specifying the cache configuration ID. Appropriate validation on the ID and input data is required. Soft deletion is supported via the deleted_at field but not modified by this operation.","description":"Update an existing Redis cache configuration by ID in the OAuth Server system.\n\nThis operation modifies the properties like cache_name, prefix, ttl_seconds, and description to adjust caching behavior for token validation, user info caching, and external API result caching.\n\nSecurity considerations include ensuring authorized access for updating cache configurations to avoid caching inconsistencies or stale data.\n\nIt relates directly to the oauth_server_redis_caches table which stores settings for Redis caching.\n\nValidation rules require the ID to be a valid UUID and the updated fields to respect constraints like TTL positivity.\n\nThis operation complements the create and delete endpoints for Redis cache management.\n\nIt returns the updated Redis cache entity as confirmation of successful modification.","summary":"Update Redis cache configuration by ID in oauth_server_redis_caches","parameters":[{"name":"id","in":"path","description":"UUID of the Redis cache configuration to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated Redis cache configuration data","typeName":"IOauthServerredisServerRedisCaches.IUpdate"},"responseBody":{"description":"Updated Redis cache configuration data","typeName":"IOauthServerredisServerRedisCaches"},"authorizationType":null,"authorizationRole":"admin","method":"put","path":"/oauthServer/admin/oauthServerRedisCaches/{id}","name":"updateRedisCacheConfig"},{"specification":"This operation deletes (soft deletes) an existing Redis cache configuration in the oauth_server_redis_caches table by setting its deleted_at timestamp. This marks the cache config as inactive and prevents its further use by the OAuth system caching layers.\n\nThis delete is a logical soft delete, preserving the record for historical and audit purposes. No physical data removal occurs.\n\nSecurity considerations require admin privileges for deletion to prevent cache configuration tampering.\n\nRelated operations include create, update, and list cache configurations.\n\nNo response body is returned upon successful deletion.","description":"Soft delete a Redis cache configuration by ID in the OAuth Server system.\n\nThis sets the deleted_at timestamp, disabling the cache configuration from further use while retaining the record for auditing.\n\nOnly users with admin role are authorized to perform this operation due to its impact on caching behavior.\n\nThis endpoint interacts with the oauth_server_redis_caches table that manages Redis caching settings.\n\nDeletion is logical, preserving the data but marking it as inactive.\n\nNo content is returned upon success.","summary":"Soft delete Redis cache configuration by ID in oauth_server_redis_caches","parameters":[{"name":"id","in":"path","description":"UUID of the Redis cache configuration to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","method":"delete","path":"/oauthServer/admin/oauthServerRedisCaches/{id}","name":"eraseRedisCacheConfig"},{"specification":"This operation returns a paginated and filtered list of guest user accounts from the oauth_server_guests table. Guests are unauthenticated users with limited permissions who can initiate login or registration.\n\nThe operation supports advanced filtering, pagination, and sorting based on creation and update timestamps.\n\nSecurity considerations include public access or restricted to authorized system components since guests do not hold sensitive data.\n\nResponse includes guest summaries optimized for listing.\n\nThis operation complements get and create operations for guest accounts.","description":"Search and retrieve paginated list of guest user accounts.\n\nGuests represent unauthenticated users able to browse limited information or start authentication processes.\n\nThe list can be filtered by creation and modification times, and sorted accordingly.\n\nNo sensitive personal information is exposed in the guest records.\n\nAccess may be public or restricted depending on system policies.\n\nRelated endpoints include get by ID and potential create operations.\n\nResponse data includes paginated guest account summaries for efficient UI consumption.","summary":"Search guest accounts with pagination and filtering","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for guest account filtering","typeName":"IOauthServerguests.IRequest"},"responseBody":{"description":"Paginated list of guest account summaries","typeName":"IPageIOauthServerguests.ISummary"},"authorizationType":null,"authorizationRole":"admin","method":"patch","path":"/oauthServer/admin/oauthServerGuests","name":"indexGuests"},{"specification":"This operation retrieves detailed information of a guest user account identified by its UUID from the oauth_server_guests table. Guests are anonymous or unauthenticated users with minimal stored information.\n\nThe returned data includes creation, update, and deletion timestamps but excludes any authentication secrets.\n\nSecurity concerns restrict this operation to authorized admin users to avoid information leakage.\n\nRelated endpoints include list guests and create guest operations.\n\nThe response returns the full guest entity for the specified ID.","description":"Get detailed information of a guest user account by ID.\n\nGuests are unauthenticated users primarily tracked for audit or system purposes.\n\nThis operation includes timestamps for record lifecycle and soft deletion status.\n\nAccess is restricted to admins to maintain security and privacy.\n\nIt is useful for admin auditing or support tasks.\n\nReturns the full guest user entity for the given UUID.","summary":"Retrieve guest account details by ID","parameters":[{"name":"id","in":"path","description":"UUID of the guest account","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed guest account information","typeName":"IOauthServerguests"},"authorizationType":null,"authorizationRole":"admin","method":"get","path":"/oauthServer/admin/oauthServerGuests/{id}","name":"atGuest"},{"specification":"This operation creates a new oauthServerGuest record, representing a guest user entity in the OAuth server system. It requires submitting information conforming to the IOauthServerGuest.ICreate interface and results in the creation of a new guest user with system managed timestamps for creation and updates. The guest user entity has only the ID and supports soft deletion capabilities via the database schema with the deleted_at field.","description":"Create a new guest user entity in the OAuth server system. \n\nThis endpoint allows the creation of a new oauthServerGuest record, which represents an unauthenticated or anonymous visitor able to utilize public-facing services such as login and registration initiation.\n\nGuest user entities have minimal details, primarily a unique UUID identifier, with audit timestamps for creation and last modification.\n\nSoft deletion is handled automatically via the deleted_at timestamp field and is not explicitly managed by the user during creation.\n\nNo user authentication is required to create a guest user since it represents an anonymous entity.\n\nThis resource follows standard REST principles with POST method to /oauthServerGuests endpoint.","summary":"Create new oauthServerGuest entity","parameters":[],"requestBody":{"description":"Creation info of the oauthServerGuest entity","typeName":"IOauthServerGuest.ICreate"},"responseBody":{"description":"Newly created oauthServerGuest entity","typeName":"IOauthServerGuest"},"authorizationRoles":["guest"],"name":"create","path":"/oauthServer/guest/oauthServerGuests","method":"post","authorizationRole":"guest","authorizationType":null},{"specification":"This operation updates details of an existing oauthServerGuest entity identified by the path parameter ID. This entity represents a guest user record and supports soft deletion via the deleted_at field in the database schema. Update operations typically alter audit timestamp data or status fields as allowed by the schema.","description":"Update an existing oauthServerGuest entity by its unique ID.\n\nThe operation allows modifying the guest user record, which minimally contains system-managed timestamps and soft delete support.\n\nSince guest entities represent anonymous users, modifications might be limited.\n\nPUT method is applied to the endpoint /oauthServerGuests/{id} where the {id} parameter identifies the target guest record.\n\nAuthorization role required is 'guest' representing the allowed access level to update this entity.\n\nRequest body must conform to IOauthServerGuest.IUpdate input interface containing update fields.\n\nResponse returns the updated oauthServerGuest entity data.","summary":"Update an existing oauthServerGuest entity","parameters":[{"name":"id","description":"Unique identifier of the target oauthServerGuest entity","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update info for the target oauthServerGuest entity","typeName":"IOauthServerGuest.IUpdate"},"responseBody":{"description":"Updated oauthServerGuest entity","typeName":"IOauthServerGuest"},"authorizationRoles":["guest"],"name":"update","path":"/oauthServer/guest/oauthServerGuests/{id}","method":"put","authorizationRole":"guest","authorizationType":null},{"specification":"This operation permanently removes an oauthServerGuest entity identified by the unique ID path parameter. It performs a hard delete on the guest user record as the deleted_at timestamp soft delete is supported but this endpoint applies full delete. The deletion removes all guest user data and audit history.","description":"Erase (delete) a specific oauthServerGuest entity by unique ID.\n\nThis operation removes the guest user record from the database entirely. \n\nPerforming this operation deletes all related data permanently and cannot be undone.\n\nIt handles deletion via HTTP DELETE method on /oauthServerGuests/{id} endpoint.\n\nAuthorization requires the 'guest' role.\n\nNo request body or response body is included for this endpoint.","summary":"Erase an oauthServerGuest entity by ID","parameters":[{"name":"id","description":"Unique identifier of the target oauthServerGuest entity","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["guest"],"name":"erase","path":"/oauthServer/guest/oauthServerGuests/{id}","method":"delete","authorizationRole":"guest","authorizationType":null},{"specification":"This operation retrieves a paginated list of oauthServerMember entities with advanced filtering and searching capabilities. Members represent registered users authenticated via email/password and social login. The response contains summaries of members including essential profile and authentication data but excludes sensitive fields like password hashes. This endpoint supports pagination, sorting, and filters according to the IOauthServerMember.IRequest interface properties.","description":"Search and retrieve a paginated list of registered oauthServerMember users.\n\nThe operation supports filtering by member attributes such as email and email verification status. It supports pagination and sorting to efficiently browse large user sets.\n\nSensitive authentication fields such as password_hash are never included in the response summaries to maintain user credential confidentiality.\n\nReturns a paginated response containing summary objects for each member matched by the criteria.\n\nNo path parameters are required.\n\nAuthorization requires 'member' role as it exposes member information.\n\nThe request body should specify filtering, sorting, and pagination criteria conforming to IOauthServerMember.IRequest.\n\nThe response body includes paginated data with paging metadata and member summaries, type IOauthServerMember.ISummary.","summary":"Search and list oauthServerMember entities","parameters":[],"requestBody":{"description":"Filtering and pagination criteria for oauthServerMembers","typeName":"IOauthServerMember.IRequest"},"responseBody":{"description":"Paginated list of oauthServerMember summaries","typeName":"IPageIOauthServerMember.ISummary"},"authorizationRoles":["member"],"name":"index","path":"/oauthServer/member/oauthServerMembers","method":"patch","authorizationRole":"member","authorizationType":null},{"specification":"This operation retrieves a single oauth_server_members record by its unique ID. It allows clients to obtain detailed member information including email, email verification status, and audit timestamps. This entity represents authenticated users in the OAuth server supporting local email/password login and social linkage. The 'id' path parameter is the UUID primary key of the oauth_server_members table. The operation results in a JSON response containing the member's full details. Authorization role is 'member' to restrict access to authenticated members.","description":"Retrieve details of a specific OAuth server member by their unique identifier.\n\nThis operation fetches the member's email, email verification status, password hash (usually not exposed), and timestamps including creation, update, and soft delete status if applicable.\n\nAccess is restricted to authenticated members to protect personal information.\n\nThe 'id' parameter must be a UUID matching the database record's primary key. If the member does not exist or is soft deleted, the response will reflect not found or appropriate error.\n\nThis operation complements the POST /oauthServerMembers endpoint and PUT /oauthServerMembers/{id} endpoint for member management.","summary":"Get detailed information of an OAuth member by ID","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the member"}],"requestBody":null,"responseBody":{"description":"OAuth server member details","typeName":"IOauthServerMember"},"authorizationType":null,"authorizationRole":"member","name":"at","path":"/oauthServer/member/oauthServerMembers/{id}","method":"get"},{"specification":"This operation creates a new OAuth server member record using provided email, password hash, and default initial values. The member entity stores email (unique), email verification status (defaults to false), hashed password, and timestamp fields. The request body requires the creation DTO with necessary fields. The operation returns the created member entity's details upon success. Authorization role is empty, indicating public access for user signup endpoints.","description":"Create a new OAuth server member account.\n\nThis operation accepts member creation data including email, password hash, and optionally email verification status.\n\nUpon success, a new member record is created with audit timestamps set.\n\nThis endpoint is publicly accessible to allow user registration.\n\nValidation ensures unique email constraint. Passwords must be hashed before submission.\n\nRefer to GET and PUT members endpoints for retrieval and update.","summary":"Create a new OAuth member account","parameters":[],"requestBody":{"description":"New member creation data","typeName":"IOauthServerMember.ICreate"},"responseBody":{"description":"Created OAuth member information","typeName":"IOauthServerMember"},"authorizationType":null,"authorizationRole":null,"name":"create","path":"/oauthServer/oauthServerMembers","method":"post"},{"specification":"This operation updates an existing OAuth server member record identified by UUID path parameter. It accepts update DTO with allowed fields including email, email verification flag, and password hash. It replaces existing values with provided data except for audit timestamps which are updated automatically. Authorization role is 'member' for authenticated user access control. Response returns updated member detail.","description":"Update an existing OAuth server member's information by their unique ID.\n\nThis operation accepts partial or full update data including email, email verification flag, and password hash.\n\nThe member identified by the 'id' path parameter will be updated with provided fields.\n\nTimestamp fields are updated automatically during the update operation.\n\nAuthorization for this operation requires 'member' role to ensure members update only their own info.\n\nIf the member does not exist or is soft deleted, appropriate error is returned.\n\nUse with GET and POST endpoints for complete member management lifecycle.","summary":"Update an OAuth member by ID","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the member to update"}],"requestBody":{"description":"Member update data","typeName":"IOauthServerMember.IUpdate"},"responseBody":{"description":"Updated OAuth member information","typeName":"IOauthServerMember"},"authorizationType":null,"authorizationRole":"member","name":"update","path":"/oauthServer/member/oauthServerMembers/{id}","method":"put"},{"specification":"This operation deletes an existing OAuth server member record permanently from the database identified by UUID path parameter. The oauth_server_members table supports soft delete using deleted_at column, but for member deletion this endpoint performs a hard delete. No request body is needed. Authorization role is 'admin' to restrict member removal to administrators. Upon success, no content is returned.","description":"Permanently delete an OAuth server member by their unique ID.\n\nThis operation performs a hard delete, removing all associated data from the database.\n\nOnly administrators are authorized to execute this operation.\n\nSoft delete is supported generally but this endpoint enforces permanent deletion.\n\nFailure to locate the member results in appropriate error codes.\n\nComplementary to CRUD operations on OAuth server members.","summary":"Delete an OAuth member by ID (hard delete)","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the member to delete"}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/oauthServer/admin/oauthServerMembers/{id}","method":"delete"},{"specification":"This operation retrieves a paginated and filtered list of OAuth server admin users from the database. The data is from the 'oauth_server_admins' table in the Prisma schema which stores administrators with unique emails, password hashes, email verification flags, and audit timestamps including soft deletion support via 'deleted_at'. This PATCH endpoint supports advanced search, filtering, sorting, and pagination capabilities suitable for admin user management interfaces. The request body carries filtering parameters consistent with IOauthServerOauthServerAdmins.IRequest and the response includes paginated admin user summaries in a structure IOPageIOauthServerOauthServerAdmins.ISummary.","description":"This endpoint provides a paginated search and retrieval operation for OAuth server administrator user accounts. It queries the 'oauth_server_admins' table, including all relevant fields such as email, email verification status, and audit timestamps. \n\nPaging, sorting, and search filters are supported to facilitate administrative management and review.\n\nAuthorization for this operation is granted to users with the 'admin' role only, ensuring sensitive data protection.\n\nThe response delivers concise summary information optimized for listing views.\n\nThis operation is a standard search endpoint and is integral to the administrator management UI and monitoring tools.","summary":"Search and retrieve a filtered, paginated list of OAuth server admins","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for OAuth server admins filtering","typeName":"IOauthServerOauthServerAdmins.IRequest"},"responseBody":{"description":"Paginated list of OAuth server admin user summary data matching search criteria","typeName":"IPageIOauthServerOauthServerAdmins.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/oauthServer/admin/oauthServerAdmins","method":"patch"},{"specification":"This operation fetches detailed information about a specific OAuth server admin user identified by their unique UUID. The data source is the 'oauth_server_admins' table of the Prisma schema which maintains administrator accounts including email, email verification status, hashed passwords, creation, update timestamps, and soft deletion status. This GET endpoint returns detailed admin user data for review or editing.","description":"Retrieve detailed information of a specific OAuth server administrator by their unique ID.\n\nThis operation accesses the 'oauth_server_admins' table, fetching all properties including email, verification flag, and audit timestamps.\n\nAccess is restricted to authenticated users with the 'admin' role to maintain sensitive data confidentiality.\n\nErrors occur if the specified admin ID does not exist or is soft deleted.\n\nThis operation is critical for admin user profile management and detail viewing.","summary":"Get specific OAuth server admin user by ID","parameters":[{"name":"id","description":"Unique identifier of the target OAuth server admin user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed OAuth server admin user information","typeName":"IOauthServerOauthServerAdmins"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/oauthServer/admin/oauthServerAdmins/{id}","method":"get"},{"specification":"Creates a new OAuth server admin user in the system database 'oauth_server_admins' table. This entity stores administrator data including email, email verification status, password hash, and timestamps. The creation involves input validation to ensure email uniqueness and secure password hashing. This POST endpoint requires an authenticated user with admin role to create new admin accounts for management purposes.","description":"Create a new OAuth server administrator user account with specified email, verified status, hashed password, and timestamps.\n\nThe operation validates uniqueness of the email and password security.\n\nOnly users with the 'admin' role can perform this operation due to its sensitive nature.\n\nUpon success, the created administrator record is returned.\n\nThis operation supports administrative delegation and expansion of the admin user base securely.","summary":"Create a new OAuth server admin user","parameters":[],"requestBody":{"description":"Creation information of OAuth server admin user","typeName":"IOauthServerOauthServerAdmins.ICreate"},"responseBody":{"description":"Created OAuth server admin user information","typeName":"IOauthServerOauthServerAdmins"},"authorizationType":null,"authorizationRole":"admin","name":"create","path":"/oauthServer/admin/oauthServerAdmins","method":"post"},{"specification":"Updates an existing OAuth server admin user in the database identified by their UUID. The 'oauth_server_admins' table stores administrator data including email, verification flags, password hash, and audit timestamps. This PUT operation requires the admin's ID as a path parameter and update payload for fields that can be modified. Only users with 'admin' role may invoke this to maintain administrative control and security.","description":"Modify details of an existing OAuth server admin user identified by the unique ID.\n\nFields such as email, email verification status, and password hash can be updated.\n\nThe operation is restricted to users with the 'admin' role.\n\nFailure occurs if the admin ID is not found or soft deleted.\n\nThis supports secure and controlled administrative user data management.","summary":"Update an existing OAuth server admin user","parameters":[{"name":"id","description":"Unique identifier of the target OAuth server admin user","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated information for the OAuth server admin user","typeName":"IOauthServerOauthServerAdmins.IUpdate"},"responseBody":{"description":"Updated OAuth server admin user information","typeName":"IOauthServerOauthServerAdmins"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/oauthServer/admin/oauthServerAdmins/{id}","method":"put"},{"specification":"This operation retrieves a paginated list of OAuth developer user accounts with advanced filtering and pagination, operating on the oauth_server_developers table. It supports searching by email, registration date, and status, enabling management of developer client accounts for OAuth integration.","description":"Retrieve a filtered and paginated list of OAuth server developer accounts. This operation allows administrators and authorized users to search developers based on criteria such as email, verification status, and creation date.\n\nThe oauth_server_developers model includes fields such as the unique id, email, email verification flag, password hash, and timestamps. The operation supports sorting and pagination to efficiently navigate large developer lists.\n\nSecurity considerations dictate that only authorized roles such as admin or developer themselves can access this data. Proper pagination prevents performance issues.\n\nThis operation corresponds to a PATCH HTTP method for supporting complex search criteria passed in the request body.","summary":"Search and retrieve a filtered, paginated list of OAuth developers","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for OAuth developer filtering","typeName":"IOauthServerDeveloper.IRequest"},"responseBody":{"description":"Paginated list of OAuth developer accounts matching search criteria","typeName":"IPageIOauthServerDeveloper"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/oauthServer/admin/oauthServerDevelopers","method":"patch"},{"specification":"This operation fetches detailed information of a specific OAuth developer user account by its unique identifier. It queries the oauth_server_developers table including fields like id, email, email verification, and timestamps. It ensures secure access to the developer's data by authorized roles.","description":"Retrieve detailed information of a single OAuth server developer by their unique ID.\n\nThe operation requires the developer ID as path parameter and returns all fields defined in the oauth_server_developers model including email and verification status.\n\nOnly authorized users such as admin and the developer themselves should access this endpoint to protect sensitive data like password hashes.\n\nThis corresponds to a GET HTTP method with path parameter 'id'.","summary":"Get OAuth developer details by ID","parameters":[{"name":"id","description":"Unique identifier of the OAuth developer","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed OAuth developer information","typeName":"IOauthServerDeveloper"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/oauthServer/admin/oauthServerDevelopers/{id}","method":"get"},{"specification":"This operation creates a new OAuth developer user account for OAuth client integration. It receives developer creation information such as email, verified flag, and password hash, and persists it in the oauth_server_developers table with timestamps.\n\nThe operation enforces email uniqueness and input validation to maintain data integrity. Upon success, it returns the new developer account data.","description":"Create a new OAuth developer user account.\n\nAccepts developer data including email, email verification status, and password hash. Stores new record in oauth_server_developers table with creation timestamps.\n\nThis endpoint requires administrative or developer privileges to perform.\n\nReturns the created developer information including assigned UUID.","summary":"Create a new OAuth developer","parameters":[],"requestBody":{"description":"Developer creation data","typeName":"IOauthServerDeveloper.ICreate"},"responseBody":{"description":"Created OAuth developer information","typeName":"IOauthServerDeveloper"},"authorizationType":null,"authorizationRole":"admin","name":"create","path":"/oauthServer/admin/oauthServerDevelopers","method":"post"},{"specification":"This operation permanently removes an OAuth administrator user account by its unique ID. It deletes the record from the oauth_server_admins table, removing all associated data.\n\nSoft delete is implemented via the deleted_at timestamp field in the database - this operation marks the account as deleted but retains the record for audit purposes.\n\nOnly authorized admin users may invoke this operation due to sensitivity and security.\n\nThe operation performs a DELETE HTTP method with a path parameter for 'id'.","description":"Delete an OAuth administrator account by its ID.\n\nThis operation performs a soft delete by setting the deleted_at field. It ensures that the user's data is not permanently lost for auditing but is excluded from active records.\n\nOnly users with admin role should access this operation.\n\nThe request requires the administrator's ID as a path parameter.","summary":"Soft delete an OAuth admin account","parameters":[{"name":"id","description":"Unique identifier of the OAuth admin to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/oauthServer/admin/oauthServerAdmins/{id}","method":"delete"},{"specification":"This operation updates the details of an OAuth server developer identified by the unique UUID. The developer entity includes email, email verification status, and password hash, but for security reasons, only certain fields are modifiable via this endpoint. The update operation is responsible for applying valid modifications to developer records by their ID. It validates the ID parameter to ensure it corresponds to an existing developer and accepts a request body containing fields permitted for update, adhering strictly to the oauth_server_developers Prisma model. The operation requires authentication with the 'developer' role to permit developers to manage their own profiles.","description":"Update an existing OAuth server developer's information by their unique ID. This operation allows modification of developer-specific fields such as email verification status and password hash. The ID parameter must be a valid UUID string corresponding to an existing developer.\n\nSecurity considerations emphasize that only authorized developers can invoke this endpoint. It references the oauth_server_developers table in the Prisma schema, which dictates the developer data structure. Validation rules ensure the ID path parameter is a UUID and the request body matches the IUpdate schema structure.\n\nThis endpoint complements fetch operations to retrieve developer details and delete operations to remove developer records. Upon success, it returns the updated developer entity information.","summary":"Update OAuth server developer details by ID","parameters":[{"name":"id","description":"Unique identifier of the OAuth server developer to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated information of the OAuth server developer","typeName":"IOauthServerDeveloper.IUpdate"},"responseBody":{"description":"Updated OAuth server developer information","typeName":"IOauthServerDeveloper"},"authorizationType":null,"authorizationRole":"developer","path":"/oauthServer/developer/oauthServerDevelopers/{id}","method":"put","name":"update"},{"specification":"This operation permanently deletes an OAuth server developer by their unique UUID identifier from the system database. It performs a hard delete as no soft delete column is defined explicitly for developers in the Prisma schema. The deletion removes all associated data and access rights for the developer user entity.\n\nThe API requires authentication with the 'developer' role to ensure that only authorized users can delete their developer accounts. This endpoint acknowledges that such deletions are irreversible, so proper validation of the ID parameter is mandatory to prevent accidental data loss.\n\nThis delete operation is related to the CRUD lifecycle of developer entities, providing an explicit erase endpoint for resource management.","description":"Permanently erase the OAuth server developer record identified by the ID parameter. This operation removes the developer from the system database irreversibly.\n\nSecurity concerns require the caller to have the 'developer' role. The ID must be a valid UUID corresponding to an existing developer.\n\nNo soft delete behavior is applied as per schema design. This operation complements update and fetch endpoints for developer entities.","summary":"Delete OAuth server developer by ID","parameters":[{"name":"id","description":"Unique identifier of the OAuth server developer to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"developer","path":"/oauthServer/developer/oauthServerDevelopers/{id}","method":"delete","name":"erase"},{"specification":"This operation searches authorization codes assigned to OAuth clients in a paginated manner. It supports filtering, sorting, and complex search criteria via a request body. Authorization codes encompass unique codes, jsonb OAuth data, redirect URIs, and expiration timestamps stored securely. This operation queries the `oauth_server_authorization_codes` table from the Prisma schema.\n\nUsers with the 'developer' role can perform this query, allowing efficient retrieval of authorization codes for management, inspection, or audit purposes. The response returns a paginated list of authorization code summaries matching the criteria defined in the request body.\n\nThe endpoint serves as a comprehensive search tool complementing detail views and lifecycle operations like creation, update, and deletion of authorization codes, though these latter are not exposed externally manually due to system generation.","description":"Retrieve a paginated list of OAuth authorization codes with advanced filtering and sorting support. The authorization codes are linked to OAuth clients and include data such as the unique code string, OAuth jsonb request data, redirect URI, and expiry information.\n\nThis operation accesses the `oauth_server_authorization_codes` table in the database, leveraging the Prisma schema structure. The request allows specifying filters on various properties to narrow down results.\n\nOnly users with the 'developer' role can perform this operation, ensuring access control. The response contains a paginated collection of authorization code summary data, useful for client credential management and auditing.","summary":"Search OAuth authorization codes with filters and pagination","parameters":[],"requestBody":{"description":"Filtering, sorting, and pagination parameters for authorization code search","typeName":"IOauthServerAuthorizationCode.IRequest"},"responseBody":{"description":"Paginated list of authorization code summary information","typeName":"IPageIOauthServerAuthorizationCode.ISummary"},"authorizationType":null,"authorizationRole":"developer","path":"/oauthServer/developer/authorizationCodes","method":"patch","name":"index"},{"specification":"This operation retrieves detailed information for a specific OAuth authorization code by its unique UUID identifier. It accesses the `oauth_server_authorization_codes` table in the Prisma schema, returning full OAuth code details including the JSONB OAuth request data, redirect URI, expiration, and client associations.\n\nAccess to this operation is restricted to users with the `developer` role for security and confidentiality. The path parameter `id` is required and must be a valid UUID string corresponding to the target authorization code.\n\nThis retrieval complements search (index) operations and is essential for inspection, troubleshooting, or administrative review of OAuth authorization codes.","description":"Retrieve detailed OAuth authorization code information identified by its unique ID.\n\nThe operation is secure and visible only to users with the 'developer' role. The ID parameter must be a UUID string of an existing authorization code.\n\nIt returns the full structure of the authorization code including the secure OAuth JSONB request data and metadata about the code's lifecycle and client association.","summary":"Get detailed OAuth authorization code by ID","parameters":[{"name":"id","description":"Unique identifier of the OAuth authorization code","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full OAuth authorization code information","typeName":"IOauthServerAuthorizationCode"},"authorizationType":null,"authorizationRole":"developer","path":"/oauthServer/developer/authorizationCodes/{id}","method":"get","name":"at"},{"specification":"This operation creates a new OAuth authorization code record in the oauth_server_authorization_codes table. It receives necessary OAuth authorization request details including client ID, unique authorization code string, JSONB formatted OAuth request data, redirect URI, and code expiration time. This operation is critical in supporting the OAuth 2.0 Authorization Code grant flow by securely generating and storing authorization codes for clients. The stored JSONB data enables robust protocol compliance and auditing. Proper validation ensures uniqueness of the code. No request body or response modifications occur other than the creation of the record. The operation includes audit timestamps and soft deletion support for revocation and compliance logging.","description":"Creates a new OAuth authorization code record. This operation accepts a unique authorization code linked to a specific OAuth client along with data including the OAuth request JSONB and redirect URI. The authorization code is used as part of the OAuth 2.0 authorization code grant flow to grant tokens to clients.\n\nThe response confirms creation of the record including timestamps and soft delete fields.\n\nSecurity requires that only authenticated clients or management systems can perform this creation. Proper validation protects against duplicate authorization code issuance.\n\nThis operation is foundational for OAuth authorization processes and pairs with token issuance operations that consume these authorization codes.","summary":"Create a new OAuth authorization code record","path":"/oauthServer/developer/authorizationCodes","method":"post","parameters":[],"requestBody":{"description":"Creation information for authorization code","typeName":"IOauthServerAuthorizationCode.ICreate"},"responseBody":{"description":"The created authorization code record","typeName":"IOauthServerAuthorizationCode"},"authorizationType":null,"authorizationRole":"developer","name":"create"},{"specification":"This operation updates an existing OAuth authorization code record in the oauth_server_authorization_codes table by unique id. It allows modification of certain authorization code fields such as redirect URI and JSONB OAuth request data, respecting business logic constraints. The authorization code itself and primary keys are not changed. It provides audit timestamps and soft deletion data for compliance. The operation ensures validation of id matching path parameter and data integrity. Typically used by system administrators or automated processes to amend authorization code details.","description":"Updates the OAuth authorization code record identified by the given ID. Allows changes to mutable fields such as redirect URI and JSON data representing the OAuth request.\n\nThe unique authorization code string and creation timestamp remain immutable to preserve audit trail and protocol integrity.\n\nOnly authorized system components and administrators may perform updates to maintain security.\n\nThe operation responds with the updated record including timestamps and deleted_at to confirm current state.\n\nCareful validation prevents accidental overwrite or data conflicts.","summary":"Update an existing OAuth authorization code record by ID","path":"/oauthServer/admin/authorizationCodes/{id}","method":"put","parameters":[{"name":"id","description":"ID of the authorization code record to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information for authorization code","typeName":"IOauthServerAuthorizationCode.IUpdate"},"responseBody":{"description":"The updated authorization code record","typeName":"IOauthServerAuthorizationCode"},"authorizationType":null,"authorizationRole":"admin","name":"update"},{"specification":"This operation permanently removes an OAuth authorization code record from the oauth_server_authorization_codes table by unique id. Since the table includes soft delete field deleted_at, deletion is performed as a hard delete and does not affect other related tokens or clients. The operation is designed for administrative cleanup or revocation of obsolete authorization codes. Access is restricted to administrative users. The operation returns no content upon successful deletion.","description":"Deletes the OAuth authorization code record identified by the given ID from the database.\n\nThis is a hard delete operation that permanently removes the record, including all associated metadata. It is an administrative operation used to clean up revoked or obsolete authorization codes.\n\nSecurity controls enforce that only administrators can perform this operation.\n\nNo response body is returned. Upon failure, standard HTTP error responses provide diagnostic information.","summary":"Delete an OAuth authorization code record by ID","path":"/oauthServer/admin/authorizationCodes/{id}","method":"delete","parameters":[{"name":"id","description":"ID of the authorization code record to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase"},{"specification":"This operation searches and retrieves a paginated list of OAuth access tokens. It operates on the oauth_server_access_tokens table, supporting filtering, sorting, and pagination to allow administrators to manage active tokens effectively. Tokens are opaque strings linked to clients and optionally authorization codes, with associated scope and expiry information. This search is essential for token monitoring and security audits. The operation accepts search criteria as request body and returns paginated summaries of tokens.","description":"Provides a filtered and paginated list of OAuth access tokens stored in the system. Allows administrators to search based on client IDs, scopes, expiration, and issuance dates.\n\nThe response includes tokens summary information optimized for monitoring active tokens and auditing.\n\nAccess is restricted to administrative roles to protect sensitive security information.\n\nProper validation of search parameters ensures efficient data retrieval and response accuracy.\n\nThis facilitates operational oversight and token lifecycle management.","summary":"Search OAuth access tokens with filtering and pagination","path":"/oauthServer/admin/accessTokens","method":"patch","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for access tokens","typeName":"IOauthServerAccessToken.IRequest"},"responseBody":{"description":"Paginated list of access token summaries","typeName":"IPageIOauthServerAccessToken.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index"},{"specification":"This operation retrieves a specific OAuth access token entity by its unique identifier. It is designed to return detailed information about the access token, including its token string, scopes, expiration timestamp, and related client and authorization code identifiers as defined in the oauth_server_access_tokens Prisma table. This endpoint supports token management features such as verification, status checks, and auditing.","path":"/oauthServer/admin/accessTokens/{id}","method":"get","summary":"Get a specific OAuth access token by ID","description":"Retrieve detailed information of a single OAuth access token by its unique ID. This operation queries the oauth_server_access_tokens database entity, returning comprehensive token details including the opaque token string, scopes granted, expiration date, and associated authorization context.\n\nSecurity and access control must ensure that only authorized roles or systems can query sensitive token information. \n\nThis operation is crucial for audits, token validation in token revocation workflows, and administrative monitoring.\n\nInput validation must enforce correct UUID formatting for the token ID path parameter.\n\nErrors returned will indicate non-existence or lack of permission.","parameters":[{"name":"id","in":"path","description":"Unique identifier of the OAuth access token","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"OAuth access token entity with detailed information","typeName":"IOauthServerAccessToken"},"authorizationType":null,"authorizationRole":"admin","name":"at"},{"specification":"This operation creates a new OAuth access token entry representing an OAuth 2.0 access credential. It stores the token string, scopes, expiration, and links to it the OAuth client and optionally the authorization code that granted it, reflecting the oauth_server_access_tokens Prisma model structure. It supports business workflows involving token issuance and management.","path":"/oauthServer/admin/accessTokens","method":"post","summary":"Create a new OAuth access token","description":"Create a new OAuth access token in the system. This endpoint accepts token details such as the opaque token string, scope string, expiration timestamp, and references to the OAuth client and authorization code.\n\nSecurity considerations include validating the client permissions and ensuring token generation follows secure practices.\n\nThe request body must comply with the IOauthServerAccessToken.ICreate structure, encapsulating all required creation fields.\n\nUpon successful creation, the detailed OAuth access token entity is returned.\n\nErrors related to duplicate tokens or invalid references are to be handled gracefully.","parameters":[],"requestBody":{"description":"Information to create a new OAuth access token","typeName":"IOauthServerAccessToken.ICreate"},"responseBody":{"description":"Created OAuth access token entity","typeName":"IOauthServerAccessToken"},"authorizationType":null,"authorizationRole":"admin","name":"create"},{"specification":"This operation updates an existing OAuth access token by its unique ID. It modifies token properties such as token string, scope, expiration, and associates related client and authorization code data as needed. The structure follows the oauth_server_access_tokens Prisma schema, supporting token lifecycle management and updates.","path":"/oauthServer/admin/accessTokens/{id}","method":"put","summary":"Update an existing OAuth access token","description":"Update an existing OAuth access token identified by its unique ID. The request body must conform to IOauthServerAccessToken.IUpdate schema with fields to modify.\n\nSecurity enforcement ensures only authorized roles may perform token updates.\n\nInvalid token IDs or malformed update data will produce errors.\n\nThe updated OAuth access token entity is returned upon success.","parameters":[{"name":"id","in":"path","description":"Unique identifier of the OAuth access token to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"OAuth access token update information","typeName":"IOauthServerAccessToken.IUpdate"},"responseBody":{"description":"Updated OAuth access token entity","typeName":"IOauthServerAccessToken"},"authorizationType":null,"authorizationRole":"admin","name":"update"},{"specification":"This operation deletes an OAuth access token identified by its unique ID. The deletion is a hard delete as the oauth_server_access_tokens table does not implement soft delete for tokens, permanently removing the token from storage. It supports security-critical workflows requiring immediate token revocation and cleanup.","path":"/oauthServer/admin/accessTokens/{id}","method":"delete","summary":"Delete an OAuth access token by ID","description":"Permanently delete an OAuth access token from the system by its unique ID. This operation performs a hard delete, removing the token record entirely and irreversibly.\n\nAuthorization checks ensure only administrators or authorized services can perform this operation.\n\nNo request body is required.\n\nResponse success indicates removal; failure reflects invalid ID or permission issues.\n\nUse with caution as deleted tokens cannot be recovered.","parameters":[{"name":"id","in":"path","description":"Unique identifier of the OAuth access token to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase"},{"specification":"This operation retrieves a paginated list of opaque refresh tokens managed by the OAuth server. It operates on the oauth_server_refresh_tokens table defined in the Prisma schema. The endpoint supports complex filtering, searching, sorting, and pagination via the request body. The response provides a paginated list of refresh token summaries including token string, scope, expiration, and associated OAuth client information. Authorization is limited to members with the 'member' role.","description":"Retrieve a filtered and paginated list of OAuth server refresh tokens from the oauth_server_refresh_tokens table. This operation allows clients to search for tokens by various fields including token string, associated client, expiration time, and scopes.\n\nThe operation supports pagination with offset and limit parameters, sorting by created_at or expires_at, and filtering by token status or associated client.\n\nSecurity considerations include restricting access to authenticated members to prevent exposure of sensitive token information. The refresh tokens are opaque strings used for renewing access tokens in OAuth flows.\n\nThis operation is essential for client and admin monitoring tools to audit and manage token usage and lifecycle. Error handling includes validation for search criteria and pagination bounds.","summary":"Search and retrieve a paginated list of opaque OAuth refresh tokens","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for listing refresh tokens","typeName":"IOauthServerRefreshToken.IRequest"},"responseBody":{"description":"Paginated list of refresh token summary information matching search criteria","typeName":"IPageIOauthServerRefreshToken.ISummary"},"authorizationType":null,"authorizationRole":"member","name":"index","path":"/oauthServer/member/refreshTokens","method":"patch"},{"specification":"This operation retrieves detailed information for a specific opaque refresh token identified by its UUID ID from the oauth_server_refresh_tokens table in the OAuth server database. The refresh token includes the token string, scope, expiration time, associated OAuth client, and optional authorization code relations. The operation supports secure token inspection by members with the 'member' role.\n\nThe response includes all detailed token fields needed to inspect and validate token status for audit or user support purposes. If the token ID does not exist, the operation returns an appropriate not found error.\n\nThis endpoint is necessary for token management consoles or debugging tools that require exact token details.","description":"Retrieve detailed information about a specific OAuth refresh token using its unique identifier from the oauth_server_refresh_tokens table.\n\nThe response includes token string, scopes granted, expiration, linked OAuth client, and related authorization code data for comprehensive token inspection.\n\nOnly authenticated members with appropriate roles can access this endpoint for security.\n\nErrors include token not found or access denied.","summary":"Get detailed information for a specific OAuth refresh token by ID","parameters":[{"name":"id","description":"Unique identifier of the target refresh token","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed refresh token information","typeName":"IOauthServerRefreshToken"},"authorizationType":null,"authorizationRole":"member","name":"at","path":"/oauthServer/member/refreshTokens/{id}","method":"get"},{"specification":"This operation creates a new opaque refresh token in the oauth_server_refresh_tokens table. It accepts token data including associated OAuth client ID, optional authorization code ID, token string, scopes, expiration, and timestamps. The creation supports system issuance of refresh tokens during OAuth token exchange flows.\n\nThe operation validates required fields such as token string uniqueness, valid client references, and proper expiration times. It returns the created refresh token record including assigned UUID and timestamps.\n\nAuthorization is restricted to members with 'member' role to prevent unauthorized token creation.\n\nThis endpoint is used internally by the OAuth token service and for administrative token management.","description":"Create a new OAuth refresh token record. This token is opaque and linked to an OAuth client and optionally an authorization code.\n\nThe request includes token string, scopes, expiry, and related OAuth client information.\n\nAccess control restricts this operation to authenticated members.\n\nValidation ensures token uniqueness and correct expiration formatting.","summary":"Create a new opaque OAuth refresh token","parameters":[],"requestBody":{"description":"Creation information of the refresh token","typeName":"IOauthServerRefreshToken.ICreate"},"responseBody":{"description":"Created refresh token details","typeName":"IOauthServerRefreshToken"},"authorizationType":null,"authorizationRole":"member","name":"create","path":"/oauthServer/member/refreshTokens","method":"post"},{"specification":"This operation updates an existing OAuth server opaque refresh token identified by its UUID from the oauth_server_refresh_tokens table. The update allows modification of token string, scopes, expiration time, and optionally linked authorization code.\n\nThe update request must include all required updatable fields conforming to schema validation. The operation returns the updated refresh token object.\n\nAuthorization roles restrict access to authenticated members only. This operation is critical for maintaining token validity, revocation, and lifecycle changes.\n\nError responses include token not found or validation failures.","description":"Update an existing OAuth refresh token by its unique ID.\n\nSupports modification of token string, scopes, expiration, and associated authorization code.\n\nAccess restricted to authenticated members for security.\n\nErrors include token not found or invalid update data.","summary":"Update existing OAuth refresh token information","parameters":[{"name":"id","description":"Unique identifier of the target refresh token","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information of the refresh token","typeName":"IOauthServerRefreshToken.IUpdate"},"responseBody":{"description":"Updated refresh token details","typeName":"IOauthServerRefreshToken"},"authorizationType":null,"authorizationRole":"member","name":"update","path":"/oauthServer/member/refreshTokens/{id}","method":"put"},{"specification":"This operation deletes an OAuth refresh token in the oauth_server_refresh_tokens table in the Prisma schema. It uses a path parameter 'id' which is a UUID to identify the refresh token record. The delete operation is a hard delete, permanently removing the token record. No request body is required, and no response is returned upon successful deletion. Authorization roles restricted to actual user roles in the schema which are one of guest, member, admin, developer; 'member' role is chosen for authenticated users managing tokens.","description":"Permanently delete a specific OAuth refresh token by its unique identifier. This refresh token is stored in the oauth_server_refresh_tokens table and is used for renewing access tokens securely.\n\nPerforming this operation requires appropriate authorization to prevent malicious revocation of tokens by unauthorized users.\n\nThe operation accepts the refresh token ID as a UUID path parameter. It does not require any request body, and on successful execution, no content is returned.\n\nErrors may occur if the token ID does not exist or the caller lacks permissions. Proper authorization and validation must be enforced.\n\nRelated token management APIs include creation, listing, and validation of refresh tokens.\n\nThis delete operation removes the record completely from the database, as opposed to soft deletion.\n","summary":"Delete an OAuth refresh token by ID","parameters":[{"name":"id","description":"Unique identifier of the OAuth refresh token","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"eraseRefreshToken","path":"/oauthServer/member/refreshTokens/{id}","method":"delete"},{"specification":"Retrieve a paginated list of OAuth ID tokens from the oauth_server_id_tokens table. This operation supports advanced filtering, search, and pagination via request body parameters defined in IOauthServerIdToken.IRequest. The response contains paginated summaries of ID tokens, useful for clients and admins to manage issued tokens. Authorization is granted for authenticated users ('member').","description":"Return a filtered, paginated collection of OAuth ID tokens from the system. These ID tokens conform to OpenID Connect standards and are stored in the oauth_server_id_tokens table.\n\nThe search parameters include filtering by various token attributes such as client ID, expiration dates, and status.\n\nThis operation requires user authentication and returns summaries of tokens matching the search criteria.\n\nRequest is sent by PATCH method with JSON body matching IOauthServerIdToken.IRequest. Response includes a page of IOauthServerIdToken.ISummary objects.\n\nErrors are handled with appropriate authorization and validation.\n\nThis operation is typically used in token management interfaces for monitoring and auditing tokens.\n","summary":"Search and retrieve filtered, paginated list of OAuth ID tokens","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for ID token filtering","typeName":"IOauthServerIdToken.IRequest"},"responseBody":{"description":"Paginated list of OAuth ID token summaries","typeName":"IPageIOauthServerIdToken.ISummary"},"authorizationType":null,"authorizationRole":"member","name":"indexIdToken","path":"/oauthServer/member/idTokens","method":"patch"},{"specification":"Retrieve details of an OAuth ID token identified by ID from the oauth_server_id_tokens table. Returns the full token entity including token string, expiration, and client association. The ID is a UUID path parameter. No request body is required. Authorization is restricted to authenticated users ('member') to ensure confidentiality.","description":"Fetch detailed information of a specific OAuth ID token by its unique ID. The ID token is stored in the oauth_server_id_tokens table representing OpenID Connect ID tokens issued to clients.\n\nThis query requires the ID as a UUID path parameter and returns all details of the ID token entity.\n\nAuthorization roles are limited to authenticated members for security.\n\nErrors will be returned if the token ID is invalid or access is denied.\n\nThis GET operation does not require a request body and returns a detailed response.\n\nTypical use cases include token audits and token detail retrieval in management systems.\n","summary":"Retrieve OAuth ID token details by ID","parameters":[{"name":"id","description":"Unique identifier of the OAuth ID token","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed OAuth ID token information","typeName":"IOauthServerIdToken"},"authorizationType":null,"authorizationRole":"member","name":"atIdToken","path":"/oauthServer/member/idTokens/{id}","method":"get"},{"specification":"Create a new OAuth ID token in the oauth_server_id_tokens table. The creation data must be provided in the request body as per IOauthServerIdToken.ICreate schema. On success, the created entity is returned with full details including token string, expiration, and client information. The operation requires authentication, granted to the 'member' role for token management capability.","description":"Create a new OAuth ID token according to OpenID Connect standards. This token is recorded in the oauth_server_id_tokens table.\n\nThe request body must contain all required fields for creating the ID token, matching the IOauthServerIdToken.ICreate schema.\n\nUpon successful creation, the new ID token entity is returned including token string, timestamps, expiration, and associated client details.\n\nThis operation requires authorization limited to authenticated members to prevent unauthorized token issuance.\n\nErrors due to validation or authorization failures must be handled accordingly.\n\nThis API uses POST method with JSON request body and returns the created token entity.\n","summary":"Create a new OAuth ID token","parameters":[],"requestBody":{"description":"Creation info for the new OAuth ID token","typeName":"IOauthServerIdToken.ICreate"},"responseBody":{"description":"Newly created OAuth ID token information","typeName":"IOauthServerIdToken"},"authorizationType":null,"authorizationRole":"member","name":"createIdToken","path":"/oauthServer/member/idTokens","method":"post"},{"specification":"This operation updates an existing ID token record in the database associated with the OAuth server. It operates on the oauth_server_id_tokens table as defined in the Prisma schema. The operation allows modification of fields such as the token string and expiration time. The ID token is linked to an OAuth client and optionally to an authorization code. The update ensures the record is refreshed with new token data and timestamps to maintain accurate token lifecycle management.","description":"Update an existing opaque OpenID Connect ID token record in the system. This endpoint enables modification of the token string and expiration timestamp to reflect renewed or refreshed token data.\n\nAuthorization is required as only authorized users like admins or relevant system components should update ID token data.\n\nThe ID token record belongs to an OAuth client and is optionally linked to an authorization code, representing a critical component in the OAuth token flow.\n\nOnly valid existing token entries can be updated; attempts to update non-existent tokens must be handled with proper error responses.\n\nThe response returns the updated ID token record for confirmation.","summary":"Update an existing ID token record in oauth_server_id_tokens","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the ID token to update"}],"requestBody":{"description":"Update data for the ID token, including new token string and expiration date","typeName":"IOauthServerIdToken.IUpdate"},"responseBody":{"description":"The updated ID token record","typeName":"IOauthServerIdToken"},"authorizationRoles":["admin"],"name":"update","path":"/oauthServer/admin/idTokens/{id}","method":"put","authorizationRole":"admin","authorizationType":null},{"specification":"This operation deletes an ID token record from the oauth_server_id_tokens table permanently. It removes the record identified by the token's unique ID.\n\nAs the table supports soft delete via deleted_at timestamp, this endpoint performs a hard delete, permanently removing the record.\n\nOnly admin role authorized to execute this operation.\n\nNo body or response content is returned; status only indicates successful deletion.","description":"Remove an existing ID token record permanently from the system. This endpoint deletes the record identified by the unique ID.\n\nThis is a hard delete operation, meaning the record is completely removed and cannot be recovered.\n\nSince the table schema includes a soft delete column deleted_at, this operation intentionally bypasses soft delete for permanent removal.\n\nAuthorization is restricted to admin users to prevent unauthorized token manipulation.\n\nNo response body is returned upon success.","summary":"Delete an ID token record permanently from oauth_server_id_tokens","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the ID token to delete"}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/oauthServer/admin/idTokens/{id}","method":"delete","authorizationRole":"admin","authorizationType":null},{"specification":"Retrieve a paginated list of OAuth scopes registered in the system. This operates on the oauth_server_scopes table defined in Prisma schema.\n\nSupports filtering, searching, sorting, and pagination based on the fields defined in the OAuth scopes schema. Returns simplified scope information optimized for list views.\n\nPublic or authenticated access depending on system policies; here assumed admin access is needed due to scope management sensitivity.\n\nNo path parameters needed, request body includes search and pagination parameters.","description":"Fetch a filtered, sorted, and paginated list of OAuth 2.0 scopes. This operation allows clients to query the scopes available in the system, supporting criteria such as code filtering, description matching, and pagination.\n\nAccess is protected and typically limited to admin roles due to the security impact of scope management.\n\nResults include essential details like scope code and description optimized for UI representation.\n\nThe response contains pages of scope summary records.","summary":"List and search OAuth scopes with pagination","parameters":[],"requestBody":{"description":"Filtering and paging parameters for querying scopes","typeName":"IOauthServerScope.IRequest"},"responseBody":{"description":"Paginated list of OAuth scope summaries","typeName":"IPageIOauthServerScope.ISummary"},"authorizationRoles":["admin"],"name":"index","path":"/oauthServer/admin/scopes","method":"patch","authorizationRole":"admin","authorizationType":null},{"specification":"Retrieve detailed information of a single OAuth scope identified by its unique ID, based on the oauth_server_scopes Prisma schema table.\n\nThis endpoint supports fetching full details of the scope including code and description.\n\nAccess restricted to admin role for scope integrity management.\n\nRequires path parameter identifying the scope.","description":"Retrieve detailed information about a specific OAuth 2.0 scope given its unique ID.\n\nThe data includes scope code, description, and timestamps.\n\nProper authorization is required to access scope details.\n\nThis operation returns the full scope entry matching the provided ID.","summary":"Get details of a specific OAuth scope by ID","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the scope"}],"requestBody":null,"responseBody":{"description":"Detailed OAuth scope information","typeName":"IOauthServerScope"},"authorizationRoles":["admin"],"name":"at","path":"/oauthServer/admin/scopes/{id}","method":"get","authorizationRole":"admin","authorizationType":null},{"specification":"This operation creates a new OAuth scope entry in the database. It involves adding a unique scope code and its corresponding description to the oauth_server_scopes table. This operation is essential for extending the permissions model of the OAuth server, allowing clients to request additional authorization scopes. The system enforces uniqueness of the scope code to prevent conflicts. Access to this operation should be restricted to administrators or system roles responsible for authorization policies.","path":"/oauthServer/admin/scopes","method":"post","summary":"Create a new OAuth scope","description":"Create a new OAuth scope with a unique code and a descriptive explanation of the permissions it grants. This operation allows administrators to extend the set of available OAuth scopes that clients can request during authorization.\n\nSecurity considerations require that only authorized users with admin privileges can create new scopes to ensure controlled expansion of permission settings.\n\nThe underlying database table is oauth_server_scopes, which enforces uniqueness for the scope code. Validation includes checking for code uniqueness and ensuring the description is informative.\n\nThis operation is typically used in an administrative interface managing OAuth permissions.\n\nErrors are returned if the scope code already exists or if required fields are missing.","parameters":[],"requestBody":{"description":"Information needed to create an OAuth scope","typeName":"IOauthServerScope.ICreate"},"responseBody":{"description":"Details of the created OAuth scope","typeName":"IOauthServerScope"},"authorizationType":null,"authorizationRole":"admin","name":"create"},{"specification":"This operation updates an existing OAuth scope identified by its UUID primary key in the oauth_server_scopes table. It allows modification of the scope code and description, enabling administrators to manage and revise permission sets as needed. Ensuring the uniqueness of the scope code remains critical during updates to prevent conflicts.","path":"/oauthServer/admin/scopes/{id}","method":"put","summary":"Update an existing OAuth scope by ID","description":"Update the code or description of an existing OAuth scope by specifying its unique ID. This operation ensures scopes remain current and accurately describe the permissions they represent.\n\nOnly users with administrative privileges should perform this action to maintain security and control over OAuth scopes.\n\nThe underlying database enforces uniqueness of the scope code. The operation supports partial or full updates depending on the provided fields.\n\nErrors are handled for non-existent IDs or duplicate scope codes.","parameters":[{"name":"id","description":"Target scope's UUID","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated information for the OAuth scope","typeName":"IOauthServerScope.IUpdate"},"responseBody":{"description":"Details of the updated OAuth scope","typeName":"IOauthServerScope"},"authorizationType":null,"authorizationRole":"admin","name":"update"},{"specification":"This operation deletes an OAuth scope entry identified by its UUID primary key from the oauth_server_scopes table. Deletion is handled as a soft delete by populating the deleted_at timestamp, preserving historical data for audit and compliance purposes while making the scope inactive. This prevents broken authorization references and potential security issues.","path":"/oauthServer/admin/scopes/{id}","method":"delete","summary":"Soft delete an OAuth scope by ID","description":"Soft delete the OAuth scope identified by the given ID. This marks the scope as deleted by setting the deleted_at timestamp, effectively deactivating it.\n\nOnly administrators should be permitted to delete scopes to prevent unauthorized removal of critical authorization elements.\n\nThe operation ensures that deleted scopes are excluded from active queries but remain in the database for historical reference.\n\nErrors return when the specified scope ID does not exist or is already deleted.","parameters":[{"name":"id","description":"Target scope's UUID","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase"},{"specification":"Retrieve a paginated, searchable, and sortable list of OAuth clients from the oauth_server_oauth_clients table, including their profile information stored separately in oauth_server_client_profiles. Supports filtering by client attributes and excludes soft deleted entries to maintain data integrity and provide accurate listings.\nThe operation is essential for administrative interfaces managing OAuth client registrations and their metadata.","path":"/oauthServer/admin/oauthClients","method":"patch","summary":"Search and retrieve paginated OAuth clients","description":"Retrieve a filtered and paginated list of OAuth clients registered in the system. Clients are returned with summary profile information and key OAuth client fields.\n\nThis operation supports search, sorting, and pagination to efficiently manage large client sets.\n\nSecurity enforces that only administrators or authorized developers access client data.\n\nSoft deleted clients are excluded from responses. Filters may include client_id, trusted status, and created date ranges.\n\nErrors are returned for invalid filter parameters.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for OAuth clients","typeName":"IOauthServerOauthClient.IRequest"},"responseBody":{"description":"Paginated list of OAuth clients","typeName":"IPageIOauthServerOauthClient.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index"},{"specification":"This operation retrieves the detailed information of a specific OAuth client identified by its ID from the 'oauth_server_oauth_clients' table. It allows authorized users to view the client's metadata including client ID, secret, redirect URI, logo URI, trust status, creation and update timestamps, and soft deletion status if applicable. The operation enforces appropriate authorization to ensure only permitted users can access sensitive client data.","description":"Retrieve detailed information of a specific OAuth client by its unique identifier. This endpoint allows authorized personnel such as developers and admins to access client metadata necessary for management and auditing purposes.\n\nSecurity considerations require authentication and role-based access to protect the client secret and related sensitive data. Only authenticated developers or admins may perform this operation.\n\nThe data is sourced from the 'oauth_server_oauth_clients' table, which maintains the core client credentials and associated metadata. The response excludes client profiles which are managed separately.\n\nErrors may occur if the client ID does not exist or access is unauthorized. Proper HTTP error codes and messages will be returned accordingly.","summary":"Retrieve a specific OAuth client by ID","parameters":[{"name":"id","description":"Unique identifier of the OAuth client to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed OAuth client information","typeName":"IOauthServerOauthClient"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/oauthServer/admin/oauthClients/{id}","method":"get"},{"specification":"This operation retrieves the detailed information of a specific OAuth client identified by its ID from the 'oauth_server_oauth_clients' table. It allows authorized users to view the client's metadata including client ID, secret, redirect URI, logo URI, trust status, creation and update timestamps, and soft deletion status if applicable. The operation enforces appropriate authorization to ensure only permitted users can access sensitive client data.","description":"Retrieve detailed information of a specific OAuth client by its unique identifier. This endpoint allows authorized personnel such as developers and admins to access client metadata necessary for management and auditing purposes.\n\nSecurity considerations require authentication and role-based access to protect the client secret and related sensitive data. Only authenticated developers or admins may perform this operation.\n\nThe data is sourced from the 'oauth_server_oauth_clients' table, which maintains the core client credentials and associated metadata. The response excludes client profiles which are managed separately.\n\nErrors may occur if the client ID does not exist or access is unauthorized. Proper HTTP error codes and messages will be returned accordingly.","summary":"Retrieve a specific OAuth client by ID","parameters":[{"name":"id","description":"Unique identifier of the OAuth client to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed OAuth client information","typeName":"IOauthServerOauthClient"},"authorizationType":null,"authorizationRole":"developer","name":"at","path":"/oauthServer/developer/oauthClients/{id}","method":"get"},{"specification":"This operation creates a new OAuth client in the system by storing client credentials, redirect URI, optional logo URI, trust flag, and timestamps in the 'oauth_server_oauth_clients' table. It accepts client creation data including client_id, client_secret, redirect_uri, logo_uri, and is_trusted fields.\n\nThe operation enforces authorization for developers and admins to manage client registrations. Upon success, it returns the created OAuth client entity including assigned fields and audit timestamps.\n\nBusiness rules ensure unique client IDs and validate redirect URIs. Soft deletion is supported after creation but not part of creation.\n","description":"Create a new OAuth client by providing client credentials and metadata. This operation is restricted to authorized developers and administrators.\n\nThe client_id must be unique and redirect_uri valid. The is_trusted flag determines if automatic consent is granted during OAuth flows.\n\nSuccessful creation returns the full client record including creation timestamps. Failure occurs if validation fails or the client_id already exists.\n\nThis operation interacts directly with the 'oauth_server_oauth_clients' table for data persistence.","summary":"Create a new OAuth client","parameters":[],"requestBody":{"description":"Client creation data including client_id, client_secret, redirect_uri, logo_uri, and trust flag","typeName":"IOauthServerOauthClient.ICreate"},"responseBody":{"description":"Newly created OAuth client entity","typeName":"IOauthServerOauthClient"},"authorizationType":null,"authorizationRole":"admin","name":"create","path":"/oauthServer/admin/oauthClients","method":"post"},{"specification":"This operation creates a new OAuth client in the system by storing client credentials, redirect URI, optional logo URI, trust flag, and timestamps in the 'oauth_server_oauth_clients' table. It accepts client creation data including client_id, client_secret, redirect_uri, logo_uri, and is_trusted fields.\n\nThe operation enforces authorization for developers and admins to manage client registrations. Upon success, it returns the created OAuth client entity including assigned fields and audit timestamps.\n\nBusiness rules ensure unique client IDs and validate redirect URIs. Soft deletion is supported after creation but not part of creation.\n","description":"Create a new OAuth client by providing client credentials and metadata. This operation is restricted to authorized developers and administrators.\n\nThe client_id must be unique and redirect_uri valid. The is_trusted flag determines if automatic consent is granted during OAuth flows.\n\nSuccessful creation returns the full client record including creation timestamps. Failure occurs if validation fails or the client_id already exists.\n\nThis operation interacts directly with the 'oauth_server_oauth_clients' table for data persistence.","summary":"Create a new OAuth client","parameters":[],"requestBody":{"description":"Client creation data including client_id, client_secret, redirect_uri, logo_uri, and trust flag","typeName":"IOauthServerOauthClient.ICreate"},"responseBody":{"description":"Newly created OAuth client entity","typeName":"IOauthServerOauthClient"},"authorizationType":null,"authorizationRole":"developer","name":"create","path":"/oauthServer/developer/oauthClients","method":"post"},{"specification":"This operation updates an existing OAuth client identified by its ID, allowing modification of client secret, redirect URI, logo URI, and trust status fields. It persists changes to the 'oauth_server_oauth_clients' table along with update timestamps.\n\nAuthorization is required for developers and admins who manage client configurations. Input data must include the updated fields adhering to validation rules for client secrets and URIs.\n\nSoft deletion status is not modifiable via this operation and is managed separately.\n\nSuccessful completion returns the updated OAuth client entity.","description":"Update an existing OAuth client's credentials and metadata by specifying its unique ID. Authorized developers and admins can modify client secret, redirect URI, logo URI, and trust status.\n\nThis operation validates inputs and updates the 'oauth_server_oauth_clients' table accordingly with new timestamps.\n\nThe client_id field is immutable and cannot be changed by this operation.\n\nErrors arise if the client does not exist or user lacks permission.","summary":"Update an existing OAuth client by ID","parameters":[{"name":"id","description":"Unique identifier of the OAuth client to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Client update data with modifiable fields","typeName":"IOauthServerOauthClient.IUpdate"},"responseBody":{"description":"Updated OAuth client entity","typeName":"IOauthServerOauthClient"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/oauthServer/admin/oauthClients/{id}","method":"put"},{"specification":"This operation updates an existing OAuth client identified by its ID, allowing modification of client secret, redirect URI, logo URI, and trust status fields. It persists changes to the 'oauth_server_oauth_clients' table along with update timestamps.\n\nAuthorization is required for developers and admins who manage client configurations. Input data must include the updated fields adhering to validation rules for client secrets and URIs.\n\nSoft deletion status is not modifiable via this operation and is managed separately.\n\nSuccessful completion returns the updated OAuth client entity.","description":"Update an existing OAuth client's credentials and metadata by specifying its unique ID. Authorized developers and admins can modify client secret, redirect URI, logo URI, and trust status.\n\nThis operation validates inputs and updates the 'oauth_server_oauth_clients' table accordingly with new timestamps.\n\nThe client_id field is immutable and cannot be changed by this operation.\n\nErrors arise if the client does not exist or user lacks permission.","summary":"Update an existing OAuth client by ID","parameters":[{"name":"id","description":"Unique identifier of the OAuth client to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Client update data with modifiable fields","typeName":"IOauthServerOauthClient.IUpdate"},"responseBody":{"description":"Updated OAuth client entity","typeName":"IOauthServerOauthClient"},"authorizationType":null,"authorizationRole":"developer","name":"update","path":"/oauthServer/developer/oauthClients/{id}","method":"put"},{"specification":"This operation deletes an existing OAuth client identified by its ID from the 'oauth_server_oauth_clients' table. The deletion is performed as a soft delete by setting the 'deleted_at' timestamp to mark the client as inactive without removing the record from the database.\n\nAuthorized users with developer or admin roles can perform this operation to deactivate clients. The operation does not return a response body.\n\nBusiness rules ensure that soft deleted clients are excluded from active client listings and OAuth flows.\n\nErrors are raised if the client does not exist or deletion is forbidden due to permissions.","description":"Soft delete an OAuth client by setting its deletion timestamp. This marks the client as inactive and excludes it from OAuth processes without permanently removing data.\n\nOnly authorized developers and admins may perform this operation.\n\nProper error handling is included for non-existent clients or unauthorized access attempts.","summary":"Soft delete an OAuth client by ID","parameters":[{"name":"id","description":"Unique identifier of the OAuth client to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/oauthServer/admin/oauthClients/{id}","method":"delete"},{"specification":"This operation deletes an existing OAuth client identified by its ID from the 'oauth_server_oauth_clients' table. The deletion is performed as a soft delete by setting the 'deleted_at' timestamp to mark the client as inactive without removing the record from the database.\n\nAuthorized users with developer or admin roles can perform this operation to deactivate clients. The operation does not return a response body.\n\nBusiness rules ensure that soft deleted clients are excluded from active client listings and OAuth flows.\n\nErrors are raised if the client does not exist or deletion is forbidden due to permissions.","description":"Soft delete an OAuth client by setting its deletion timestamp. This marks the client as inactive and excludes it from OAuth processes without permanently removing data.\n\nOnly authorized developers and admins may perform this operation.\n\nProper error handling is included for non-existent clients or unauthorized access attempts.","summary":"Soft delete an OAuth client by ID","parameters":[{"name":"id","description":"Unique identifier of the OAuth client to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"developer","name":"erase","path":"/oauthServer/developer/oauthClients/{id}","method":"delete"},{"specification":"This operation retrieves a paginated list of OAuth client profiles associated with a specific OAuth client. It supports filtering, searching, sorting, and pagination to manage frequently updated client metadata separately from primary client data. This API operates on the oauth_server_client_profiles table in the database, ensuring that only active and non-deleted profiles are returned. It is accessible to authenticated developers for client management and monitoring.","description":"Retrieve a filtered and paginated list of OAuth client profiles for the specified OAuth client. This operation enables developers to search and manage client profile metadata such as nicknames and descriptions, which are frequently updated independently from the main client record.\n\nSecurity considerations include role-based access, permitting only authenticated developers to access this endpoint. Proper authorization checks ensure that developers can only view profiles belonging to OAuth clients they are authorized to manage.\n\nThis operation directly queries the oauth_server_client_profiles table, filtering out soft-deleted records and returning results with pagination and ordering options.\n\nExpected behavior includes returning profiles with current metadata, supporting client management UIs and API integrations.","summary":"List OAuth client profiles for a given OAuth client with pagination and filtering","parameters":[{"name":"oauthClientId","description":"Unique identifier of the target OAuth client","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for OAuth client profiles","typeName":"IOauthServerClientProfile.IRequest"},"responseBody":{"description":"Paginated list of OAuth client profiles matching search criteria","typeName":"IPageIOauthServerClientProfile"},"authorizationRoles":["developer"],"path":"/oauthServer/developer/oauthClients/{oauthClientId}/clientProfiles","method":"patch","name":"index","authorizationRole":"developer","authorizationType":null},{"specification":"This operation retrieves detailed information of a specific OAuth client profile identified by its unique ID and belonging to a specific OAuth client. It allows developers to fetch profile metadata like nicknames and descriptions separately from the main client entity. This API is essential for client profile detail views and editing workflows.","description":"Retrieve detailed information of the specified OAuth client profile by its unique identifier for a given OAuth client. This endpoint supports detailed profile viewing, including nickname and description fields.\n\nSecurity measures restrict access to authenticated developers associated with the OAuth client. Data integrity is maintained by ensuring the profile belongs to the specified client and has not been soft deleted.\n\nThe operation maps directly to the oauth_server_client_profiles table in the database, excluding soft-deleted profiles from retrieval.\n\nErrors are handled gracefully with appropriate HTTP status codes if the profile does not exist or access is unauthorized.","summary":"Retrieve detailed OAuth client profile information by ID","parameters":[{"name":"oauthClientId","description":"Unique identifier of the target OAuth client","schema":{"type":"string","format":"uuid"}},{"name":"id","description":"Unique identifier of the OAuth client profile","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"OAuth client profile detailed information","typeName":"IOauthServerClientProfile"},"authorizationRoles":["developer"],"path":"/oauthServer/developer/oauthClients/{oauthClientId}/clientProfiles/{id}","method":"get","name":"at","authorizationRole":"developer","authorizationType":null},{"specification":"This operation creates a new OAuth client profile associated with a specified OAuth client. It enables developers to add or update frequently changing client metadata such as nicknames or descriptions separately from the main client record. The operation performs validations on the parent OAuth client and the profile data before creation.","description":"Create a new OAuth client profile under the specified OAuth client. This endpoint accepts profile metadata including nickname and optional description.\n\nAccess is restricted to authenticated developers with permission to manage the client. Input validation and uniqueness checks are performed.\n\nThe profile is stored in the oauth_server_client_profiles table with timestamps and soft delete disabled by default.\n\nUpon successful creation, the full profile details are returned.","summary":"Create a new OAuth client profile for a given OAuth client","parameters":[{"name":"oauthClientId","description":"Unique identifier of the target OAuth client","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data for creating new OAuth client profile","typeName":"IOauthServerClientProfile.ICreate"},"responseBody":{"description":"Created OAuth client profile information","typeName":"IOauthServerClientProfile"},"authorizationRoles":["developer"],"path":"/oauthServer/developer/oauthClients/{oauthClientId}/clientProfiles","method":"post","name":"create","authorizationRole":"developer","authorizationType":null},{"specification":"This operation updates an existing OAuth client profile identified by its unique ID and belonging to a specified OAuth client. It allows developers to modify frequently changing client metadata such as nicknames and descriptions independently from the main client data. This operation ensures data consistency and enforces authorization checks.","description":"Update the specified OAuth client profile for a given OAuth client with new metadata such as nickname and description.\n\nOnly authenticated developers authorized for the OAuth client can perform this operation. The profile must exist and not be soft-deleted.\n\nThe update operation modifies the oauth_server_client_profiles table and returns the updated profile data upon successful completion.\n\nErrors such as missing profile or unauthorized access are properly handled with relevant HTTP status codes and messages.","summary":"Update an existing OAuth client profile by ID","parameters":[{"name":"oauthClientId","description":"Unique identifier of the target OAuth client","schema":{"type":"string","format":"uuid"}},{"name":"id","description":"Unique identifier of the OAuth client profile","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated data for the OAuth client profile","typeName":"IOauthServerClientProfile.IUpdate"},"responseBody":{"description":"Updated OAuth client profile information","typeName":"IOauthServerClientProfile"},"authorizationRoles":["developer"],"path":"/oauthServer/developer/oauthClients/{oauthClientId}/clientProfiles/{id}","method":"put","name":"update","authorizationRole":"developer","authorizationType":null},{"specification":"This operation deletes a specific OAuth client profile record identified by its unique ID and associated OAuth client ID. It operates on the oauth_server_client_profiles table, which stores frequently changing metadata such as nickname and description for OAuth clients. This endpoint permanently removes the specified client profile record for the given OAuth client, ensuring that stale or unwanted profile data is removed. The operation requires authorization by developers who manage client profiles. It uses explicit hard delete semantics as indicated by the lack of restoration or soft delete undo features.","description":"Delete a client profile entry associated with a particular OAuth client.\n\nThis endpoint permanently deletes the profile record identified by the unique profile ID under the specified OAuth client ID. The oauth_server_client_profiles table stores display nicknames and descriptions that often change and are managed separately from the main OAuth client data.\n\nAccess control requires developer-level authorization to ensure only authorized users can delete client profile entries.\n\nAll deletions are hard deletes; once deleted, the profile entry cannot be recovered.\n\nThis complements client profile retrieval and update operations to provide full client profile management capabilities.","summary":"Delete one OAuth client profile record by client ID and profile ID","parameters":[{"name":"oauthClientId","description":"Unique identifier of the target OAuth client","schema":{"type":"string","format":"uuid"}},{"name":"id","description":"Unique identifier of the client profile to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"developer","name":"eraseClientProfile","path":"/oauthServer/developer/oauthClients/{oauthClientId}/clientProfiles/{id}","method":"delete"},{"specification":"This operation retrieves a paginated list of social login provider configurations with support for search, filtering, sorting and pagination parameters in the request body. It operates on the oauth_server_social_providers table, which stores settings for external OAuth providers such as Naver, Google, Apple, and others. The operation returns provider data including provider name, client ID, secrets, endpoint URLs, scopes, and activation status. It requires administrative authorization for access due to the sensitivity of provider credentials and configuration data.","description":"Retrieve a filtered and paginated list of social login providers configured in the system.\n\nThis operation supports advanced search criteria, pagination, and sorting passed through the request body to efficiently browse and manage OAuth social login providers such as Naver, Google, Apple, and others.\n\nThe oauth_server_social_providers table stores provider configurations including client IDs, secrets, OAuth endpoints, and active status. Because these configurations include sensitive information, this operation requires admin-level authorization.\n\nThe response includes only active and soft-deleted (if applicable) providers according to filtering and sorting options. This operation is typically used in administrative UIs to manage available social login options.","summary":"Search and retrieve a paginated list of social login providers","parameters":[],"requestBody":{"description":"Search criteria and pagination for social login providers","typeName":"IOauthServerSocialProviders.IRequest"},"responseBody":{"description":"Paginated social login providers matching search criteria","typeName":"IPageIOauthServerSocialProviders"},"authorizationType":null,"authorizationRole":"admin","name":"indexSocialLoginProviders","path":"/oauthServer/admin/socialLoginProviders","method":"patch"},{"specification":"This operation retrieves a detailed information record about a specific social login provider based on its unique identifier. It fetches provider credentials, OAuth endpoint URLs, scopes, status, and timestamps from the oauth_server_social_providers table. Access is restricted to admin users because sensitive client secret information is involved. This allows authorized administrators to view configuration details for individual external OAuth providers.","description":"Retrieve a specific social login provider configuration by its unique ID.\n\nThis endpoint returns detailed information including provider name, client credentials, authorization and token URLs, scopes, and active status.\n\nAdmin-level authorization is required for accessing this sensitive data.\n\nIf the social provider ID does not exist or is soft deleted, a proper error response should be returned.\n\nThis is typically used for administrative configuration review and update preparation.","summary":"Retrieve detailed social login provider by ID","parameters":[{"name":"id","description":"Unique identifier of the social login provider","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed social login provider information","typeName":"IOauthServerSocialProviders"},"authorizationType":null,"authorizationRole":"admin","name":"atSocialLoginProvider","path":"/oauthServer/admin/socialLoginProviders/{id}","method":"get"},{"specification":"This operation creates a new social login provider configuration in the system, storing credentials and endpoint URLs for external OAuth providers like Naver, Google, or Apple. It writes to the oauth_server_social_providers table and requires admin authorization due to the sensitivity and impact of provider configurations. The request body contains the necessary client ID, secret, URLs, scopes, and activation flag. Successful creation returns the created social provider record with all set fields and timestamps.","description":"Create a new social login provider configuration.\n\nThis endpoint allows administrators to add new OAuth social login providers by specifying their client ID, secret, authorization and token endpoints, user info URL, scopes, and activation status.\n\nBecause this operation affects external authentication flows and includes sensitive credentials, it requires administrator authorization.\n\nOn success, the newly created provider record is returned with timestamps and identifiers.\n\nClients should ensure the uniqueness of provider_name before creation.","summary":"Create a new social login provider","parameters":[],"requestBody":{"description":"Social login provider creation details","typeName":"IOauthServerSocialProviders.ICreate"},"responseBody":{"description":"Created social login provider information","typeName":"IOauthServerSocialProviders"},"authorizationType":null,"authorizationRole":"admin","name":"createSocialLoginProvider","path":"/oauthServer/admin/socialLoginProviders","method":"post"},{"specification":"This operation updates an existing social login provider record in the database. It specifically targets the oauth_server_social_providers table from the Prisma schema, which stores OAuth external provider configurations such as client IDs, secrets, authorization/token/userinfo endpoints, scopes, and activity status. The update allows modification of all provider fields including client credentials and endpoints. This API requires specifying the provider ID as a path parameter, and the request body must conform to the IOauthServerSocialProvider.IUpdate schema, ensuring all updated fields respect validation rules and data types defined in the schema. The response returns the updated provider entity reflecting all changes. Checking for uniqueness of provider_name and maintaining proper OAuth flows in the system is recommended.","path":"/oauthServer/developer/socialLoginProviders/{id}","method":"put","summary":"Update a social login provider configuration","description":"Update an existing OAuth social login provider configuration in the system. This operation allows full modification of the provider's OAuth client ID, secret, authorization URLs, scopes, and active status.\n\nOnly authorized users with \"developer\" role can perform this update.\n\nThe underlying database table is `oauth_server_social_providers`, which stores the external OAuth provider details necessary for social login integration such as Naver, Google, Apple, etc.\n\nValidation includes uniqueness of the provider_name and verifying URLs are well-formed.\n\nThe response returns the updated social login provider record.\n\nProper authorization and careful client secret management are crucial for security.\n\nThis operation supports the administrative use case of maintaining external OAuth integrations securely and flexibly.","parameters":[{"name":"id","in":"path","description":"Target social login provider's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information of the social login provider","typeName":"IOauthServerSocialProvider.IUpdate"},"responseBody":{"description":"Updated social login provider entity","typeName":"IOauthServerSocialProvider"},"authorizationType":null,"authorizationRole":"developer","name":"updateSocialLoginProvider"},{"specification":"This operation permanently deletes a specific social login provider entry from the oauth_server_social_providers database table. It requires the social login provider ID be specified as a UUID path parameter. The deletion is irreversible and removes all associated OAuth configuration data for the external provider. Only users with the \"developer\" role are authorized to perform this administrative action. Proper care should be taken since removal affects all social login flows relying on this provider.","path":"/oauthServer/developer/socialLoginProviders/{id}","method":"delete","summary":"Delete a social login provider","description":"Permanently remove a social login provider from the system. This operation cannot be undone and deletes all related OAuth configuration records.\n\nOnly users with the \"developer\" role are authorized to execute this.\n\nEnsure no active integrations remain with the provider before deletion to prevent OAuth flow disruptions.\n\nThis operation targets the `oauth_server_social_providers` table.\n\nUse with caution as it affects social login availability for the provider.","parameters":[{"name":"id","in":"path","description":"Target social login provider's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"developer","name":"eraseSocialLoginProvider"},{"specification":"This operation searches and retrieves a filtered, paginated list of social user links associated to a specific social login provider. It operates on the oauth_server_social_user_links table which links internal users to external social accounts identifiable by provider and external user IDs. The search supports query parameters in the request body conforming to IOauthServerSocialUserLink.IRequest to allow filtering, sorting, and pagination. The response returns a paginated list of social user link summaries. This API requires the social login provider ID as a path parameter to scope the search to a given provider. It serves the use case of managing and auditing social user link data related to external login providers in the OAuth system.","path":"/oauthServer/developer/socialLoginProviders/{socialLoginProviderId}/socialUserLinks","method":"patch","summary":"Search social user links for a provider","description":"Retrieve a paginated list of social user links filtered by the specified social login provider.\n\nThis operation supports advanced filtering, sorting, and pagination via the request body.\n\nIt targets the `oauth_server_social_user_links` table which maintains linkage between internal users and external social OAuth identities.\n\nOnly authorized users with the \"developer\" role can access this data.\n\nThe response contains summarized social user link data for easy overview and management.\n\nThis operation is essential for administrators and developers managing social authentication links securely and efficiently.","parameters":[{"name":"socialLoginProviderId","in":"path","description":"Target social login provider's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for social user links","typeName":"IOauthServerSocialUserLink.IRequest"},"responseBody":{"description":"Paginated list of social user link summaries","typeName":"IPageIOauthServerSocialUserLink.ISummary"},"authorizationType":null,"authorizationRole":"developer","name":"indexSocialUserLinksByProvider"},{"specification":"This operation retrieves a single social user link entity by its unique identifier. It fetches detailed information from the oauth_server_social_user_links table, including references to the internal user and the linked social provider, external user ID, tokens, and token expiry. The path parameters require the social login provider ID and the social user link ID to uniquely identify the resource. The response returns the detailed social user link entity. Authorized users with the \"developer\" role can perform this retrieval. This API supports the administrative need to view detailed linkage data for social OAuth users within the system.","path":"/oauthServer/developer/socialLoginProviders/{socialLoginProviderId}/socialUserLinks/{id}","method":"get","summary":"Get detailed social user link information","description":"Fetch detailed information of a single social user link by ID under the specified social login provider.\n\nAccess restricted to users with the \"developer\" role.\n\nThis operation reads from `oauth_server_social_user_links` table.\n\nProvides comprehensive data about the linkage between internal user accounts and external social provider identities.\n\nUseful for auditing, troubleshooting, or management of social login associations.","parameters":[{"name":"socialLoginProviderId","in":"path","description":"Target social login provider's ID","schema":{"type":"string","format":"uuid"}},{"name":"id","in":"path","description":"Target social user link's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed social user link entity","typeName":"IOauthServerSocialUserLink"},"authorizationType":null,"authorizationRole":"developer","name":"atSocialUserLink"},{"specification":"This operation creates a new social user link entity associated with a specified social login provider. It inserts a record into the oauth_server_social_user_links table, linking an internal user (member) to an external social provider user ID. The operation requires full ID, user ID, social provider ID, external user ID, optional tokens, token expiry, and auditing timestamps. This allows the system to track social login mappings for the given provider.","description":"Create a new social user link associated with a given social login provider. This operation records the mapping between the internal OAuth server member and the external social provider's user ID and tokens.\n\nSecurity considerations include ensuring the user is authorized to link social accounts.\n\nUpon success, the created social user link with its unique ID and timestamps is returned.\n\nReferences the oauth_server_social_user_links table in the Prisma schema, including user_id and social_provider_id foreign key constraints.\n\nThis operation is intended to be used exclusively by authenticated systems managing social account linkages.","summary":"Create a social user link for a social login provider","parameters":[{"name":"socialLoginProviderId","description":"Target social login provider's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Social user link creation data with user and external provider info","typeName":"IOauthServerSocialUserLinks.ICreate"},"responseBody":{"description":"Successfully created social user link information","typeName":"IOauthServerSocialUserLinks"},"authorizationRoles":["member"],"name":"create","path":"/oauthServer/member/socialLoginProviders/{socialLoginProviderId}/socialUserLinks","method":"post","authorizationRole":"member","authorizationType":null},{"specification":"This operation updates an existing social user link record identified by its unique ID and the social login provider ID it belongs to. It modifies associated OAuth server member linkage, external user ID, tokens, and token expiry, as defined in the oauth_server_social_user_links table.\n\nThe request body must include all fields that can be updated, and proper validation of IDs is required. Timestamp fields reflect update times. Security requires user authentication and authorization to modify linked social user records.\n\nUpon success, the updated social user link details are returned.\n\nThis operation references the oauth_server_social_user_links table and is mainly for user-based updates in social account management.","description":"Update a social user link identified by the provider and link ID. This updates the external user ID, tokens, and token expiry.\n\nEnsures that the user has permission to update social link data.\n\nWorks with oauth_server_social_user_links table, referencing existing relationships.\n\nReturns the updated record information with timestamps.","summary":"Update existing social user link for a social login provider","parameters":[{"name":"socialLoginProviderId","description":"Target social login provider's ID","schema":{"type":"string","format":"uuid"}},{"name":"id","description":"ID of the social user link to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Social user link update data with updated tokens and user info","typeName":"IOauthServerSocialUserLinks.IUpdate"},"responseBody":{"description":"Information of the updated social user link","typeName":"IOauthServerSocialUserLinks"},"authorizationRoles":["member"],"name":"update","path":"/oauthServer/member/socialLoginProviders/{socialLoginProviderId}/socialUserLinks/{id}","method":"put","authorizationRole":"member","authorizationType":null},{"specification":"This operation deletes a social user link record identified by its unique ID and the social login provider ID. It removes the linkage between internal members and their external social provider user IDs from the oauth_server_social_user_links table.\n\nDeletion is a hard delete operation removing the record completely from the system, as indicated by the absence of a soft delete column in this context.\n\nSecurity requires authenticated user permission to delete social user link records.\n\nNo response body is returned upon success. The operation is intended to permanently remove user social link associations.","description":"Delete a social user link by provider and link ID. This operation permanently removes the record from the database.\n\nOnly authorized users can delete their linked social accounts.\n\nNo response body is returned upon successful deletion.\n\nReferences the oauth_server_social_user_links Prisma schema.","summary":"Delete a social user link for a given social login provider","parameters":[{"name":"socialLoginProviderId","description":"Target social login provider's ID","schema":{"type":"string","format":"uuid"}},{"name":"id","description":"ID of the social user link to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member"],"name":"erase","path":"/oauthServer/member/socialLoginProviders/{socialLoginProviderId}/socialUserLinks/{id}","method":"delete","authorizationRole":"member","authorizationType":null},{"specification":"This operation retrieves a filtered and paginated list of user profiles from the oauth_server_user_profiles table. User profile info includes nicknames, profile pictures, biographies, and related game profiles. The operation supports complex searching, filtering, sorting, and pagination.\n\nIt enables client systems to efficiently browse and manage user profile data with pagination. Filters may include nickname, user ID, and update date.\n\nSecurity checks ensure only authorized requests (members) retrieve user profile data.\n\nReturns paginated summary data optimized for list display with relevant user profile fields.","description":"Search and retrieve a filtered, paginated list of user profiles. Supports nickname filtering, pagination, and sorting.\n\nThis operation queries the oauth_server_user_profiles table and returns user profile summary information.\n\nAuthorization is restricted to authenticated users.\n\nSupports complex queries via request body with pagination and filter parameters.","summary":"Search and list user profiles with filtering and pagination","parameters":[],"requestBody":{"description":"User profile search criteria and pagination parameters","typeName":"IOauthServerUserProfiles.IRequest"},"responseBody":{"description":"Paginated user profile summaries matching the criteria","typeName":"IPageIOauthServerUserProfiles.ISummary"},"authorizationRoles":["member"],"name":"index","path":"/oauthServer/member/userProfiles","method":"patch","authorizationRole":"member","authorizationType":null},{"specification":"This operation retrieves detailed user profile information by the unique identifier from the oauth_server_user_profiles table. It provides user profile attributes such as nickname, profile picture URL, and biography, along with auditing timestamps. The operation supports fetching valid profiles only and does not include soft-deleted profiles (where deleted_at is non-null). This endpoint is essential for client applications to display user profile data and allows reading profile details securely with appropriate authorization.","description":"This API operation fetches a user profile by its ID from the OAuth server system. The user profile contains frequently changing information like nickname, profile picture URL, and biography, which are stored separately from core user data for optimized update operations.\n\nOnly active profiles are accessible; profiles marked as deleted (with deleted_at timestamp) are excluded from retrieval.\n\nSecurity considerations ensure that only authorized users or processes can access detailed profile information. Authorization controls should verify user permissions before allowing data access.\n\nThe operation ties directly to the oauth_server_user_profiles table, fetching a single profile record matching the provided UUID. Proper error handling should be implemented to respond with appropriate errors if the profile is not found or if the user lacks permissions.\n\nThis retrieval operation assists client apps requiring read access to user profile metadata for user-facing features.","summary":"Retrieve user profile details by ID","parameters":[{"name":"id","description":"Unique identifier (UUID) of the user profile to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"User profile detailed information","typeName":"IOauthServerUserProfile"},"authorizationType":null,"authorizationRole":"member","name":"at","path":"/oauthServer/member/userProfiles/{id}","method":"get"},{"specification":"This operation creates a new user profile record in the oauth_server_user_profiles table. The user profile contains optional attributes such as nickname, profile picture URL, and biography for a specific user identified by user_id. This allows frequent updates to profile metadata without affecting core user identity data. The creation includes time-stamping fields for auditing and supports validation of mandatory user_id linkage.","description":"This API operation registers a new user profile for a user in the OAuth server system. User profile fields such as nickname, profile picture URL, and biography can be supplied optionally, enabling flexible profile customization.\n\nThe user_id is mandatory to link the profile to a valid user in the OAuth server_members table. Data validation should ensure user_id exists before creation.\n\nThe operation generates audit timestamps for record creation and updates.\n\nUpon successful creation, the detailed user profile is returned to the client.\n\nSecurity checks are necessary to verify that the requester has rights to create a user profile for the specified user.\n\nThis operation supports the dynamic profile requirements without altering the main user entity, optimized for frequent profile data changes.","summary":"Create a new user profile","parameters":[],"requestBody":{"description":"Information required to create a user profile","typeName":"IOauthServerUserProfile.ICreate"},"responseBody":{"description":"Details of the created user profile","typeName":"IOauthServerUserProfile"},"authorizationType":null,"authorizationRole":"member","name":"create","path":"/oauthServer/member/userProfiles","method":"post"},{"specification":"This operation updates an existing user profile record in the oauth_server_user_profiles table identified by its unique ID. Allows modification of optional fields such as nickname, profile picture URL, and biography. Ensures audit timestamp updates and respects soft delete status (only non-deleted records can be updated). This facilitates real-time profile metadata updates distinct from core user authentication data.","description":"This API operation updates user profile details identified by the profile ID. Clients can update nickname, profile picture URL, and biography. Fields may be omitted or null for partial updates.\n\nThe ID path parameter uniquely identifies the profile record. Security mechanisms must verify user's authorization before applying changes.\n\nSoft-deleted profiles are excluded from modification.\n\nThe response returns the updated profile information for confirmation.\n\nThis update operation supports user-driven profile customization within the OAuth server environment optimizing decoupled profile data management.","summary":"Update user profile by ID","parameters":[{"name":"id","description":"Unique identifier (UUID) of the user profile to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"User profile update data","typeName":"IOauthServerUserProfile.IUpdate"},"responseBody":{"description":"Updated user profile details","typeName":"IOauthServerUserProfile"},"authorizationType":null,"authorizationRole":"member","name":"update","path":"/oauthServer/member/userProfiles/{id}","method":"put"},{"specification":"This operation deletes a user profile record from the oauth_server_user_profiles table, identified by its unique ID. Deletion is performed as a soft delete by setting the deleted_at timestamp, preserving audit trails and record recovery options. Soft deletion ensures the records are excluded from active queries while maintaining historical data for compliance and operational requirements.","description":"This API operation soft deletes a user profile identified by its unique ID. Instead of physical deletion, it marks the profile as deleted by setting the deleted_at timestamp.\n\nSoft deletion supports audit compliance and enables future recovery or undelete if necessary.\n\nAuthorization checks should ensure only permitted users can perform deletion.\n\nOnce marked deleted, the profile is excluded from subsequent retrieval and update operations.\n\nClients receive no content in response as deletion confirmation.\n\nThis approach facilitates compliance requirements while maintaining data integrity within the OAuth server profile management.","summary":"Soft delete user profile by ID","parameters":[{"name":"id","description":"Unique identifier (UUID) of the user profile to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"erase","path":"/oauthServer/member/userProfiles/{id}","method":"delete"},{"specification":"This operation retrieves a paginated list of game profiles linked to a specific user profile. It operates on the oauth_server_game_profiles table which defines player names and identifiers for external games such as PUBG and League of Legends. Supports filtering with pagination and sorting options to efficiently query game profile entries for a user profile.","path":"/oauthServer/member/userProfiles/{userProfileId}/gameProfiles","method":"patch","summary":"Search and list game profiles for a user profile","description":"Retrieve a filtered and paginated list of game profiles associated with a specified user profile. This operation enables clients to search, filter, and sort through a user's game profiles, including platform, player names, and seasons.\n\nThe operation requires the userProfileId path parameter to identify the target user profile. It utilizes standard pagination parameters for efficient data retrieval.\n\nSecurity considerations are in place to ensure only authorized users can view game profiles. The response includes game profile summaries optimized for list displays.\n\nThis operation directly interacts with the oauth_server_game_profiles table, supporting all queryable columns and filterable fields as defined in the Prisma schema.\n\nClients should use this endpoint to build user-facing features showing linked game accounts.","parameters":[{"name":"userProfileId","description":"Unique identifier of the target user profile","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for user game profiles","typeName":"IOauthServerUserGameProfile.IRequest"},"responseBody":{"description":"Paginated list of user game profile summaries matching search criteria","typeName":"IPageIOauthServerUserGameProfile.ISummary"},"authorizationType":null,"authorizationRole":"member","name":"index"},{"specification":"This operation retrieves detailed information of a single game profile identified by the game profile ID under a specific user profile. It targets the oauth_server_game_profiles table, representing specific game accounts linked to user profiles, including platform and player names.\n\nThe path parameters userProfileId and id uniquely identify the game profile. The operation ensures data is restricted to authorized users with access rights.\n\nThe response includes full entity details conforming to the oauth_server_game_profiles schema definition.","path":"/oauthServer/member/userProfiles/{userProfileId}/gameProfiles/{id}","method":"get","summary":"Get details of a specific game profile","description":"Retrieve detailed information of a specific game profile for a given user profile by the game profile ID. This includes platform, player name, season, and timestamps.\n\nAccess is restricted to authorized users associated with the user profile.\n\nDirectly queries the oauth_server_game_profiles table using the provided identifiers.","parameters":[{"name":"userProfileId","description":"Unique identifier of the target user profile","schema":{"type":"string","format":"uuid"}},{"name":"id","description":"Unique identifier of the user game profile","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed user game profile information","typeName":"IOauthServerUserGameProfile"},"authorizationType":null,"authorizationRole":"member","name":"at"},{"specification":"This operation creates a new game profile linked to a specified user profile in the system. The game profile includes details such as the game platform, player name, and optionally the season. It writes to the oauth_server_game_profiles table, maintaining relational integrity with the user profile.\n\nThe userProfileId path parameter specifies the parent user profile. The request body contains the necessary information to create the game profile.\n\nAuthorization ensures only authenticated users can create profiles associated with their accounts.\n\nOn success, the response returns the created game profile entry with all relevant data.","path":"/oauthServer/member/userProfiles/{userProfileId}/gameProfiles","method":"post","summary":"Create a new user game profile","description":"Create a new game profile under a specific user profile. This includes platform identifier, player name, and optional season for external game accounts like PUBG and League of Legends.\n\nThe operation validates user permissions and maintains referential integrity with the user profile.\n\nResponds with the created game profile details.","parameters":[{"name":"userProfileId","description":"Unique identifier of the target user profile","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information needed to create a user game profile","typeName":"IOauthServerUserGameProfile.ICreate"},"responseBody":{"description":"Created user game profile information","typeName":"IOauthServerUserGameProfile"},"authorizationType":null,"authorizationRole":"member","name":"create"},{"specification":"This operation updates an existing game profile identified by ID for a specific user profile in the system. It operates on the oauth_server_game_profiles table, managing external game accounts linked to user profiles.\n\nPath parameters userProfileId and id specify the resource to update. The request body contains the fields to update, including platform, player name, and season.\n\nAuthorization verifies the requester has rights to modify the target game profile.\n\nThe response returns the updated entity information upon success.","path":"/oauthServer/member/userProfiles/{userProfileId}/gameProfiles/{id}","method":"put","summary":"Update user game profile details","description":"Update an existing game profile for a user profile. Allows changing the platform, player name, and season fields.\n\nThe operation ensures the user has permission to modify the resource and maintains data integrity.\n\nResponse contains the updated game profile information.","parameters":[{"name":"userProfileId","description":"Unique identifier of the target user profile","schema":{"type":"string","format":"uuid"}},{"name":"id","description":"Unique identifier of the user game profile","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data to update the user game profile","typeName":"IOauthServerUserGameProfile.IUpdate"},"responseBody":{"description":"Updated user game profile information","typeName":"IOauthServerUserGameProfile"},"authorizationType":null,"authorizationRole":"member","name":"update"},{"specification":"This operation deletes a specific game profile associated with a user profile by their unique identifiers. It targets the oauth_server_game_profiles table, which contains game platform identifiers and player names linked to user profiles. The deletion is permanent as the table does not have a soft delete field.","path":"/oauthServer/member/userProfiles/{userProfileId}/gameProfiles/{id}","method":"delete","summary":"Delete a user game profile by userProfileId and id","description":"Permanently deletes a user's game profile record specified by userProfileId and game profile id from the system.\n\nOnly authorized users or administrators can perform this operation. Proper validation ensures the specified record exists before deletion.\n\nThe operation removes the entire record with no residual data. This API is crucial for managing outdated or incorrect game profile data.\n\nRelated operations include retrieval and update of game profiles and user profiles for management and display.\n\nErrors are returned if the requested record does not exist or the requester lacks permission.","parameters":[{"name":"userProfileId","description":"Unique identifier of the user profile","schema":{"type":"string","format":"uuid"}},{"name":"id","description":"Unique identifier of the game profile to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member"],"name":"erase","authorizationRole":"member","authorizationType":null},{"specification":"Retrieve a paginated list of user point balances, representing current point holdings for each user. This operation queries the oauth_server_user_points table which tracks balances, creation/update timestamps, and supports soft deletion. It provides filtering and pagination support.","path":"/oauthServer/admin/userPoints","method":"patch","summary":"List user points with pagination and filtering","description":"Provides a paginated listing of user point balances with optional filtering criteria. Intended for administrative use due to sensitive financial data.\n\nAccess control limits this endpoint to admin roles.\n\nSupports pagination, filtering, and sorting to facilitate efficient user point management.\n\nRelates to user point histories and coupon usage records in the system.\n\nErrors include invalid filters or lack of privileges.","parameters":[],"requestBody":{"description":"Request parameters including pagination and filtering criteria for user points","typeName":"IOauthServerUserPoint.IRequest"},"responseBody":{"description":"Paginated user point balance data","typeName":"IPageIOauthServerUserPoint"},"authorizationRoles":["admin"],"name":"index","authorizationRole":"admin","authorizationType":null},{"specification":"Retrieve detailed information about a user point record specified by its unique identifier. Operates on the oauth_server_user_points table storing user balances and timestamps, with soft deletion support.","path":"/oauthServer/admin/userPoints/{id}","method":"get","summary":"Get user point details by id","description":"Returns the detailed user point record for the given id. Includes balance and related metadata.\n\nLimited to admin role access due to sensitive data.\n\nHandles errors when record does not exist with proper HTTP responses.","parameters":[{"name":"id","description":"Unique identifier of the user point record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"User point detailed information","typeName":"IOauthServerUserPoint"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin","authorizationType":null},{"specification":"Create a new user point record for a user. This operation inputs the user identifier and initial point balance to the oauth_server_user_points table, which includes balance tracking, creation/update timestamps, and soft delete support.","path":"/oauthServer/admin/userPoints","method":"post","summary":"Create a user point record","description":"Creates a user point record, initializing point balance for a given user.\n\nRestricted to admin role due to financial sensitivity.\n\nRequires validation that user exists and balance is valid.\n\nSupports system integration with point transaction histories and coupon usage.\n\nErrors arise from duplicate records or invalid input.","parameters":[],"requestBody":{"description":"User point creation data including user ID and initial balance","typeName":"IOauthServerUserPoint.ICreate"},"responseBody":{"description":"Created user point record","typeName":"IOauthServerUserPoint"},"authorizationRoles":["admin"],"name":"create","authorizationRole":"admin","authorizationType":null},{"specification":"This operation updates the detailed information of a user's point balance record as stored in the oauth_server_user_points table. It handles modifications to the user's current point balance and accepts update requests that align with the database schema including soft deletion capability via the deleted_at timestamp. User reference and audit timestamps remain unchanged manually, focusing on point balance updates. Authorization is restricted to roles permitted to manage user point balances and histories, typically administrators or system processes.","description":"Update the details of an existing user point balance record in the OAuth server. This operation is responsible for modifying the user's current point balance, an essential part of the system managing point transactions for various usage scenarios like icon purchases or other digital goods.\n\nOnly authorized users such as administrators or internal systems should perform this update operation to ensure data integrity and security.\n\nThe oauth_server_user_points table includes the following key fields:\n- id: Unique identifier of the user point record\n- user_id: Reference to the user owning the points (immutable here)\n- balance: The current total point balance of the user\n- created_at and updated_at: These timestamps represent audit fields\n- deleted_at: Soft delete timestamp to mark record as logically deleted\n\nThis update operation focuses on modifying the balance field while maintaining data consistency and valid audit mechanisms. Proper validation must be enforced to prevent negative balances unless business logic allows it.\n\nThe operation requires the unique identifier of the user point record and the new balance value. It returns the updated user point record upon success.","summary":"Update a user point balance record","parameters":[{"name":"id","in":"path","description":"Unique identifier of the user point record to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated information for the user point balance record","typeName":"IOauthServerUserPoint.IUpdate"},"responseBody":{"description":"Updated user point balance record","typeName":"IOauthServerUserPoint"},"authorizationType":null,"authorizationRole":"admin","path":"/oauthServer/admin/userPoints/{id}","method":"put","name":"update"},{"specification":"This operation permanently removes a user point balance record from the database. It performs a hard delete on the oauth_server_user_points table, entirely removing the entry identified by the provided unique identifier. This action cannot be undone and is intended only for authorized administrators who require permanent deletion of point records, such as for compliance or data cleanup.\n\nSoft deletion is supported in the schema but this operation explicitly performs a hard removal of data.\n\nThe operation requires the user point record ID as a path parameter. No request or response body is involved.","description":"Delete a user point balance record from the OAuth server database. This action irreversibly removes the record for compliance or cleanup purposes.\n\nEnsure that only users with administrator privileges perform this permanent deletion action.\n\nThe OAuth server schema natively supports soft deletion via deleted_at fields; however, this operation explicitly performs a hard delete to fully remove the record.\n\nNo additional data is provided or returned.\n\nThe operation accepts the unique user point record ID as a path parameter.","summary":"Delete a user point balance record permanently","parameters":[{"name":"id","in":"path","description":"Unique identifier of the user point record to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","path":"/oauthServer/admin/userPoints/{id}","method":"delete","name":"erase"},{"specification":"This operation retrieves a paginated list of user point transaction histories associated with a specific user point record. It allows filtering, sorting, and pagination per the schema for histories related to a user point. The underlying database table is oauth_server_user_point_histories, which stores transactions including changes in point balance, reasons, and timestamps.\n\nThe operation requires the user point ID to filter the transaction histories belonging to that specific user point balance. It returns a paginated summary list of user point histories under that user point record.","description":"Retrieve a filtered and paginated list of point transaction histories for a particular user point balance. This operation helps admins or automated systems monitor and audit point changes including additions and subtractions.\n\nPagination and filtering parameters allow control over the volume and order of results.\n\nThe response includes summaries of each transaction, such as amount changed, resulting balance, reason for change, and timestamps.\n\nThis operation requires the user point ID to narrow down the histories and is authorized for administrative roles due to sensitive nature.","summary":"List point transaction histories for a user point","parameters":[{"name":"userPointId","in":"path","description":"Unique identifier of the user point whose transaction histories are to be retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter and pagination parameters for user point transaction histories","typeName":"IOauthServerUserPointHistory.IRequest"},"responseBody":{"description":"Paginated list of user point history summaries","typeName":"IPageIOauthServerUserPointHistory.ISummary"},"authorizationType":null,"authorizationRole":"admin","path":"/oauthServer/admin/userPoints/{userPointId}/histories","method":"patch","name":"index"},{"specification":"This operation fetches detailed information about a specific user point transaction history record identified by its unique ID. It retrieves data from the oauth_server_user_point_histories table, including the amount changed, balance after change, reason for update, and timestamps for auditing.\n\nThis endpoint requires the ID of the specific user point history record as a path parameter and returns the detailed history record. This operation is typically used for administrative review or detailed auditing.","description":"Retrieve detailed information of a single point transaction history record pertaining to a user point balance. This is used for audit or investigation of specific point changes.\n\nThe response includes the change amount, balance after change, reason string, and audit timestamps.\n\nAuthorization is restricted to users with administrative permissions.\n\nThis operation requires the unique history record ID to fetch the detailed record.","summary":"Get details of a user point transaction history record","parameters":[{"name":"userPointId","in":"path","description":"User point ID to which the history belongs","schema":{"type":"string","format":"uuid"}},{"name":"id","in":"path","description":"Unique identifier of the point transaction history record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed user point transaction history record","typeName":"IOauthServerUserPointHistory"},"authorizationType":null,"authorizationRole":"admin","path":"/oauthServer/admin/userPoints/{userPointId}/histories/{id}","method":"get","name":"at"},{"specification":"This operation creates a new user point history entry linked to a specific user point balance record. It operates on the oauth_server_user_point_histories table from the Prisma schema, capturing increments or decrements to user points with reason tracking. The parent user point is identified by the userPointId path parameter. This allows auditing of point changes linked to a user account, essential for transaction traceability and history across all user point modifications.","path":"/oauthServer/member/userPoints/{userPointId}/histories","method":"post","summary":"Create a new user point history entry","description":"Create a new point transaction history entry under a specific user points account. This operation is used when points are added or deducted, such as when users purchase icons or redeem coupons. The userPointId path parameter identifies the target user points record.\n\nSecurity considerations require the caller to have suitable rights to update the user's points. The system logs all point changes for audit purposes to prevent fraud.\n\nThe data is stored in the oauth_server_user_point_histories table. The reason property indicates the business context of the point change (e.g., \"coupon redemption\", \"icon purchase\").\n\nRelated operations include fetching user point balances and listing histories. Removal of histories is not supported via this endpoint.\n\nErrors occur on invalid userPointId or data integrity violations. The operation provides the newly created user point history entry on success.","parameters":[{"name":"userPointId","in":"path","description":"Identifier of the user point record to append history","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data for creating a new user point history entry","typeName":"IOauthServerUserPointHistory.ICreate"},"responseBody":{"description":"Created user point history entry","typeName":"IOauthServerUserPointHistory"},"authorizationRoles":["member"],"authorizationRole":"member","authorizationType":null,"name":"create"},{"specification":"This operation updates a specific user point history record, allowing modification of change_amount, reason, and balance_after_change fields. It operates on the oauth_server_user_point_histories table, identified by the id and userPointId path parameters to prevent ambiguity. It supports audit trails by allowing revision of point transaction details when necessary.","path":"/oauthServer/member/userPoints/{userPointId}/histories/{id}","method":"put","summary":"Update a specific user point history entry","description":"Update an existing point transaction history record linked to a user point account. The parameters userPointId and id identify the target record.\n\nThis operation enables correction of point history entries when necessary, such as fixing mistaken point changes or updating reason descriptions.\n\nSecurity requires proper authorization to prevent unauthorized changes which could compromise point integrity.\n\nThe updated entry is returned upon success. Validation ensures balance_after_change correctly reflects the post-change balance.\n\nRelated operations include listing point histories and creating new histories.\n\nErrors may occur due to invalid references or data validation errors.","parameters":[{"name":"userPointId","in":"path","description":"Identifier of the user point record containing the history","schema":{"type":"string","format":"uuid"}},{"name":"id","in":"path","description":"Unique identifier of the user point history record","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"User point history update data","typeName":"IOauthServerUserPointHistory.IUpdate"},"responseBody":{"description":"Updated user point history entry","typeName":"IOauthServerUserPointHistory"},"authorizationRoles":["member"],"authorizationRole":"member","authorizationType":null,"name":"update"},{"specification":"This operation deletes a specific user point history record identified by the id and userPointId path parameters. It performs a hard delete removing the record completely from the oauth_server_user_point_histories table, ensuring audit and data integrity policies are met by only allowing authorized users to perform this operation.","path":"/oauthServer/member/userPoints/{userPointId}/histories/{id}","method":"delete","summary":"Delete a specific user point history entry","description":"Delete a user point history entry permanently from the system. This operation removes the record identified by the userPointId and id parameters from the oauth_server_user_point_histories table.\n\nSecurity: This operation is restricted to authorized users with adequate permissions.\n\nThis action is irreversible and deletes all data related to the target history record.\n\nRelated operations include creating and updating user point history entries.\n\nError handling covers invalid parameters or insufficient permissions.","parameters":[{"name":"userPointId","in":"path","description":"Identifier of the user point record containing the history","schema":{"type":"string","format":"uuid"}},{"name":"id","in":"path","description":"Unique identifier of the user point history record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member"],"authorizationRole":"member","authorizationType":null,"name":"erase"},{"specification":"This operation retrieves a paginated and filtered list of current point coupons available in the system. It operates on the oauth_server_point_coupons table, supporting search criteria such as code matching, expiration date filtering, and active status. Pagination and sorting allow efficient browsing of available coupons for UI or API clients.","path":"/oauthServer/member/pointCoupons","method":"patch","summary":"List and search point coupons","description":"Retrieve a list of point coupons with filtering and pagination. This operation enables clients to search for coupons by code, filter by expiration dates, and list only active coupons.\n\nThe data is returned paginated for scalability in user interfaces and includes coupon metadata such as description, value, and expiry.\n\nSecurity considerations include allowing only authorized users to view coupon details if sensitive information is included.\n\nRelated operations include redeeming coupons via user point histories and managing coupon issuance.\n\nError handling covers invalid filters or pagination parameters.","parameters":[],"requestBody":{"description":"Filtering, pagination, and sorting options for point coupons retrieval","typeName":"IOauthServerPointCoupon.IRequest"},"responseBody":{"description":"Paginated list of point coupons matching criteria","typeName":"IPageIOauthServerPointCoupon"},"authorizationRoles":["member"],"authorizationRole":"member","authorizationType":null,"name":"index"},{"specification":"This operation retrieves detailed information about a specific point coupon by its unique identifier from the PointCoupon table within the OAuth server database. It fetches all relevant coupon details including code, description, value, usage limits, expiration date, and audit timestamps. This API is intended for authenticated admin users or developers who need to view coupon configurations and details for management or integration purposes.","description":"Retrieve detailed information about a point coupon identified by its unique ID. This operation accesses the PointCoupon entity, which represents coupon codes used for granting points to users. The entity includes fields such as unique code, description, value, usage limits, expiration date, and audit tracking timestamps.\n\nThis operation requires administrative or developer permissions to access sensitive coupon data. It ensures that the requesting user is authorized to view point coupon details.\n\nThe response includes all cached and up-to-date coupon metadata as stored in the database. Proper error handling is expected for invalid or non-existent coupon IDs.","summary":"Retrieve details of a specific point coupon by ID","parameters":[{"name":"id","in":"path","description":"Unique identifier of the point coupon","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Point coupon details","typeName":"IOauthServerPointCoupon"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/oauthServer/admin/pointCoupons/{id}","method":"get"},{"specification":"This operation retrieves detailed information about a specific point coupon by its unique identifier from the PointCoupon table within the OAuth server database. It fetches all relevant coupon details including code, description, value, usage limits, expiration date, and audit timestamps. This API is intended for authenticated admin users or developers who need to view coupon configurations and details for management or integration purposes.","description":"Retrieve detailed information about a point coupon identified by its unique ID. This operation accesses the PointCoupon entity, which represents coupon codes used for granting points to users. The entity includes fields such as unique code, description, value, usage limits, expiration date, and audit tracking timestamps.\n\nThis operation requires administrative or developer permissions to access sensitive coupon data. It ensures that the requesting user is authorized to view point coupon details.\n\nThe response includes all cached and up-to-date coupon metadata as stored in the database. Proper error handling is expected for invalid or non-existent coupon IDs.","summary":"Retrieve details of a specific point coupon by ID","parameters":[{"name":"id","in":"path","description":"Unique identifier of the point coupon","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Point coupon details","typeName":"IOauthServerPointCoupon"},"authorizationType":null,"authorizationRole":"developer","name":"at","path":"/oauthServer/developer/pointCoupons/{id}","method":"get"},{"specification":"This operation creates a new point coupon in the OAuth server system's PointCoupon table. It accepts input defining the coupon code, description, value, maximum issuance count, expiration date, and initializes audit timestamps. This API endpoint is restricted to administrative users who manage promotional or reward campaigns.\n\nThe API enforces uniqueness of coupon codes and validates input data such as expiration date and maximum issuance count. Upon successful creation, the full point coupon entity is returned including system-generated IDs and timestamps.","description":"Create a new point coupon used for granting points to users. The coupon includes properties such as a unique code, description, point value, maximum issuance limit, and expiration date.\n\nThis operation enables administrators to define new promotions or reward coupons which users can redeem for points. Validation ensures coupon code uniqueness and the validity of expiration dates.\n\nThe created coupon's full detail, including timestamps, is returned in the response upon success.","summary":"Create a new point coupon record","parameters":[],"requestBody":{"description":"Data for creating a new point coupon","typeName":"IOauthServerPointCoupon.ICreate"},"responseBody":{"description":"Created point coupon details","typeName":"IOauthServerPointCoupon"},"authorizationType":null,"authorizationRole":"admin","name":"create","path":"/oauthServer/admin/pointCoupons","method":"post"},{"specification":"This operation updates an existing point coupon identified by its unique ID within the OAuth server's PointCoupon table. It allows modification of coupon attributes such as code, description, value, usage limits, and expiration date. Only administrative users with permissions can invoke this endpoint.\n\nThe API validates input data to maintain coupon code uniqueness and proper expiration date formats. It returns the updated point coupon entity upon successful update.\n\nSoft delete status is respected and updated entities remain consistent with business rules.","description":"Update an existing point coupon's details by ID. This operation modifies coupon properties including code, description, point value, max issuance count, and expiration date.\n\nAdministrative authorization is required to make changes to ensure controlled promotional campaign management.\n\nThe updated coupon entity with current timestamps is returned in the response. Proper error handling is expected for invalid IDs or input.","summary":"Update details of an existing point coupon","parameters":[{"name":"id","in":"path","description":"Unique identifier of the point coupon to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Point coupon update data","typeName":"IOauthServerPointCoupon.IUpdate"},"responseBody":{"description":"Updated point coupon details","typeName":"IOauthServerPointCoupon"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/oauthServer/admin/pointCoupons/{id}","method":"put"},{"specification":"This operation permanently deletes a point coupon record identified by its unique ID from the OAuth server system. The PointCoupon entity includes a soft delete timestamp (deletedAt). This deletion operation marks the record as deleted by setting the deletedAt field rather than physical deletion to preserve audit history.\n\nOnly administrators are authorized to perform this delete operation, ensuring controlled management of promotional offers.\n\nOnce deleted, the coupon is excluded from active queries and cannot be used for point redemption. Proper validation is required to confirm the coupon exists and is not already deleted before processing the delete request.","description":"Soft delete a point coupon by marking its deletedAt timestamp. This operation restricts physical removal to maintain historical data for audit and compliance purposes.\n\nAccess is limited to administrators to prevent unauthorized removal of coupons.\n\nSuccessful operation returns no content and removes the coupon from active usage.","summary":"Soft delete a point coupon by ID","parameters":[{"name":"id","in":"path","description":"Unique identifier of the point coupon to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/oauthServer/admin/pointCoupons/{id}","method":"delete"},{"specification":"This operation retrieves a filtered and paginated list of user point coupon usage records from the oauth_server_user_point_coupons table. It supports search and filter criteria such as user ID, coupon ID, usage date ranges, and active status. The purpose is to allow administrators to review historical coupon redemptions for auditing and user account management. Pagination and sorting are supported for efficient data access. The underlying table maintains referential integrity to the user and coupon tables.","description":"Retrieve a filtered and paginated list of user point coupon usage entries.\n\nThis operation allows clients to query the oauth_server_user_point_coupons table records with support for various search, filter, and pagination parameters to facilitate efficient retrieval of user's coupon usage history.\n\nSecurity considerations include restricting access to authenticated roles with appropriate permissions to view user payment and coupon histories.\n\nThis operation connects to the oauth_server_user_point_coupons relational table which links users with point coupons redeemed. It supports retrieving related user and coupon linked data through foreign keys.\n\n Expected behaviors include paginated responses, validation of request parameters, and error handling for unauthorized or malformed requests.\n\nNo request body is needed for this read operation except complex filtering handled via the PATCH method request body.","summary":"Search and retrieve a paginated list of user point coupon usage records","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for filtering user point coupons","typeName":"IOauthServerUserPointCoupon.IRequest"},"responseBody":{"description":"Paginated list of user point coupon usage records matching filter criteria","typeName":"IPageIOauthServerUserPointCoupon"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/oauthServer/admin/userPointCoupons","method":"patch"},{"specification":"This operation retrieves a single user point coupon usage record by its unique ID from the oauth_server_user_point_coupons table. It returns detailed information about the coupon usage including the user who redeemed it, the coupon details, usage time, and audit timestamps.\n\nIt ensures that only authorized roles can access this personal and financial usage data. The record can be fetched for inspection, support, or audit purposes.","description":"Retrieve detailed information for a specific user point coupon usage record by its unique identifier.\n\nAccess control is critical to protect user financial data; this operation restricts access to administrators.\n\nThe underlying data includes user ID, coupon ID, usage timestamp, creation and update times, and soft deletion timestamp.\n\nProper error handling for non-existent IDs and authorization is implemented.\n\nThis endpoint is a straightforward retrieval of the user point coupon usage entity record.","summary":"Retrieve a specific user point coupon usage record by ID","parameters":[{"name":"id","description":"Unique identifier of the user point coupon usage record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed user point coupon usage record","typeName":"IOauthServerUserPointCoupon"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/oauthServer/admin/userPointCoupons/{id}","method":"get"},{"specification":"This operation creates a new user point coupon usage record in the oauth_server_user_point_coupons table, representing when a user redeems a coupon code to add points to their account. It accepts the user ID, coupon ID, and the usage timestamp.\n\nThe system validates coupon availability, user eligibility, and coupon expiration before recording.\n\nIt ensures transactional consistency and updates the user's point balance accordingly.\n\nThis creation is protected and only accessible to admin roles.\n\nUpon successful creation, the new record with audit timestamps is returned.","description":"Create a new user point coupon usage record to represent coupon redemption by a user.\n\nThis endpoint accepts user ID, coupon ID, and usage time, validates business rules such as coupon validity and user eligibility,\nthen records the usage event and updates related point balances.\n\nAccess is restricted to administrators to maintain integrity.\n\nSuccessful creation returns the newly created usage record with all audit information.","summary":"Create a new user point coupon usage record","parameters":[],"requestBody":{"description":"User point coupon usage creation data","typeName":"IOauthServerUserPointCoupon.ICreate"},"responseBody":{"description":"Created user point coupon usage record","typeName":"IOauthServerUserPointCoupon"},"authorizationType":null,"authorizationRole":"admin","name":"create","path":"/oauthServer/admin/userPointCoupons","method":"post"},{"specification":"This operation updates an existing user point coupon usage record in the oauth_server_user_point_coupons table by its unique identifier. It allows modification of usage time or associated coupon information.\n\nOnly administrators can perform this operation to maintain data integrity of point histories.\n\nValidation of coupon usage rules applies.\n\nReturns the updated user point coupon usage entity with audit fields included.","description":"Update an existing user point coupon usage record by unique ID.\n\nAllows modification of coupon usage details with validations to ensure integrity.\n\nRestricted to admin roles only for security and audit compliance.\n\nReturns the updated user point coupon usage record after changes.","summary":"Update an existing user point coupon usage record","parameters":[{"name":"id","description":"Unique identifier of the user point coupon usage record to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"User point coupon usage update data","typeName":"IOauthServerUserPointCoupon.IUpdate"},"responseBody":{"description":"Updated user point coupon usage record","typeName":"IOauthServerUserPointCoupon"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/oauthServer/admin/userPointCoupons/{id}","method":"put"},{"specification":"This operation deletes a user point coupon record from the system by its unique identifier. It permanently removes the record from the oauth_server_user_point_coupons table, ensuring that the coupon usage association with a user is erased. This API is designed for administrative control over coupon usage records and requires appropriate authorization.","path":"/oauthServer/admin/userPointCoupons/{id}","method":"delete","summary":"Delete user point coupon by ID","description":"Permanently deletes a user point coupon record identified by the 'id' path parameter.\n\nThis operation targets the oauth_server_user_point_coupons table, which tracks the association between users and point coupons they have redeemed.\n\nOnly authorized users with 'admin' role can perform this action to prevent unauthorized data loss.\n\nNo request body is required. The response body is empty upon successful deletion.\n\nError handling includes validation of existence of the ID and permission checks.","parameters":[{"name":"id","description":"Unique identifier of the user point coupon to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase"},{"specification":"This endpoint provides advanced search and filtering capabilities over the audit logs collected by the OAuth server. It allows clients to query the oauth_server_audit_logs table for specific event types, timestamps, actors, or descriptions. Pagination, sorting, and complex search conditions can be specified in the request body. This operation is essential for security audit, compliance, and operational monitoring.","path":"/oauthServer/admin/oauthServerAuditLogs","method":"patch","summary":"Search OAuth server audit logs with filtering and pagination","description":"Retrieve a filtered and paginated list of OAuth server audit logs.\n\nThe audit logs contain security and operational events for authentication, token issuance, client management, and system activities.\n\nClients can search by event_type, time ranges, actor_id, and other criteria.\n\nOnly users with admin role have access to audit log data due to sensitivity.\n\nThe response provides paginated detailed audit log entries with essential fields.\n\nSecurity measures ensure sensitive data is not exposed.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for audit logs filtering","typeName":"IOauthServerAuditLog.IRequest"},"responseBody":{"description":"Paginated list of audit log entries matching search criteria","typeName":"IPageIOauthServerAuditLog"},"authorizationType":null,"authorizationRole":"admin","name":"index"},{"specification":"Retrieve specific OAuth server audit log entry identified by its unique ID from the oauth_server_audit_logs table. This provides detailed information on a single event, including event type, timestamp, actor identity, and description. This operation supports investigation and audit processes. Only users with admin role are authorized to access audit log details due to the sensitive nature of the data.","path":"/oauthServer/admin/oauthServerAuditLogs/{id}","method":"get","summary":"Get OAuth server audit log by ID","description":"Retrieve detailed information of a single OAuth server audit log entry by its ID.\n\nThis operation returns full event details for security monitoring and auditing.\n\nOnly authorized admin users may access this endpoint.\n\nThe response includes all relevant fields of the audit log record.\n\nErrors are returned if the ID is invalid or record not found.","parameters":[{"name":"id","description":"Unique identifier of the audit log entry","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed audit log record","typeName":"IOauthServerAuditLog"},"authorizationType":null,"authorizationRole":"admin","name":"at"},{"specification":"Provides a paginated list of administrative notifications for OAuth server admins, with filtering and sorting capabilities. Notifications include alert titles, messages, read status, and timestamps. This endpoint queries the oauth_server_admin_notifications table and returns paginated data. Access is restricted to authenticated admins. Supports operational monitoring and management of admin notifications.","path":"/oauthServer/admin/oauthServerAdminNotifications","method":"patch","summary":"List and filter admin notifications with pagination","description":"Retrieve a filtered and paginated list of admin notifications.\n\nThis operation gives authorized admins access to their notification alerts with read status and timestamps.\n\nFilters and pagination options help manage large numbers of notifications.\n\nOnly users with admin role should access this resource.\n\nThe response delivers paginated notification data suited for display in admin dashboards.","parameters":[],"requestBody":{"description":"Search and pagination criteria for admin notifications","typeName":"IOauthServerAdminNotification.IRequest"},"responseBody":{"description":"Paginated list of admin notification entries","typeName":"IPageIOauthServerAdminNotification"},"authorizationType":null,"authorizationRole":"admin","name":"index"},{"specification":"This operation retrieves detailed information about a specific administrative notification from the oauth_server_admin_notifications table. It fetches the notification identified by the unique ID, providing the title, message content, read status, and associated timestamps. This enables administrators to view specific important system alerts or messages intended for them. Only authenticated admin users have the authorization to access this endpoint. The response returns the complete structure of the notification entity as defined in the schema, facilitating display or further processing in the admin UI.","description":"Retrieve an individual administrative notification for OAuth server administrators.\n\nThis operation allows an authenticated admin to fetch detailed information about a single notification by specifying its unique ID in the path parameter. It returns the notification's title, message content, read status, and audit timestamps.\n\nSecurity considerations restrict this endpoint to users with admin privileges only, ensuring sensitive admin notices are protected.\n\nThe operation interacts with the oauth_server_admin_notifications table defined in the Prisma schema, utilizing ID-based lookup.\n\nIf the notification does not exist or is soft deleted, an appropriate error response should be returned.\n\nNo request body is required as this is a read operation.\n\nThe response provides a full representation of the notification entity.","summary":"Get details of a specific admin notification in oauth_server_admin_notifications","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target admin notification"}],"requestBody":null,"responseBody":{"description":"The requested admin notification details","typeName":"IOauthServerAdminNotification"},"authorizationRoles":["admin"],"name":"at","path":"/oauthServer/admin/oauthServerAdminNotifications/{id}","method":"get","authorizationRole":"admin","authorizationType":null},{"specification":"This operation creates a new administrative notification for OAuth server administrators. It accepts data specifying the admin ID recipient, message title, message content, and read status. The operation inserts a new entry into the oauth_server_admin_notifications table with creation and update timestamps, initializing it as active (deleted_at = null). This supports notifying administrators of system events or important messages. Only authorized admin users can perform this action.","description":"Create a new admin notification for the OAuth server.\n\nThis endpoint allows authenticated administrators to create a new notification message for other administrators. The request body must provide the admin ID to which the notification is addressed, the title and content of the notification, and the read/unread status.\n\nThe operation inserts a new record into the oauth_server_admin_notifications table in the Prisma schema, initializing audit timestamps automatically.\n\nSecurity is enforced by restricting access to admin users only.\n\nUpon successful creation, the newly created notification entity is returned.","summary":"Create a new admin notification in oauth_server_admin_notifications","parameters":[],"requestBody":{"description":"Information needed to create an admin notification","typeName":"IOauthServerAdminNotification.ICreate"},"responseBody":{"description":"Details of the newly created admin notification","typeName":"IOauthServerAdminNotification"},"authorizationRoles":["admin"],"name":"create","path":"/oauthServer/admin/oauthServerAdminNotifications","method":"post","authorizationRole":"admin","authorizationType":null},{"specification":"This operation updates an existing administrative notification identified by its unique ID. It allows modification of mutable fields such as title, message content, and read status. The operation updates the corresponding row in the oauth_server_admin_notifications table, adjusting the updated_at timestamp accordingly. Access is strictly limited to users with admin roles to prevent unauthorized changes.","description":"Update an existing admin notification for OAuth server administrators.\n\nAdministrators can modify the title, message content, and read status of a notification by specifying its ID and providing updated data in the request body.\n\nThe operation updates the record in the oauth_server_admin_notifications table in the Prisma schema, refreshing the updated_at timestamp.\n\nOnly authenticated admin users may perform this operation.\n\nThis operation does not alter creation timestamps or soft delete status.\n\nReturns the updated notification entity after successful modification.","summary":"Update a specific admin notification in oauth_server_admin_notifications","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the admin notification to update"}],"requestBody":{"description":"Updated data for the admin notification","typeName":"IOauthServerAdminNotification.IUpdate"},"responseBody":{"description":"Details of the updated admin notification","typeName":"IOauthServerAdminNotification"},"authorizationRoles":["admin"],"name":"update","path":"/oauthServer/admin/oauthServerAdminNotifications/{id}","method":"put","authorizationRole":"admin","authorizationType":null},{"specification":"This operation deletes an existing administrative notification identified by its unique ID. It performs a soft delete by setting the deleted_at timestamp in the oauth_server_admin_notifications table, marking the notification as removed without physically deleting the record. This supports audit compliance and recoverability. Only users with admin privileges are authorized to execute this action.","description":"Soft delete an admin notification, marking it as deleted in the system.\n\nThis operation allows authenticated admin users to delete a notification by setting its deleted_at timestamp, effectively removing it from active queries.\n\nThe notification remains in the database for audit purposes.\n\nAccess control restricts this action to admin users.\n\nNo request body is required.\n\nNo response body is returned upon success.","summary":"Soft delete a specific admin notification in oauth_server_admin_notifications","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the admin notification to delete"}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/oauthServer/admin/oauthServerAdminNotifications/{id}","method":"delete","authorizationRole":"admin","authorizationType":null},{"specification":"This operation retrieves a paginated list of OAuth server token monitor records, each representing events such as access token validation, expiration, or revocation. It operates on the 'oauth_server_token_monitors' table from the Prisma schema, which stores event metadata including event type, timestamps, IP address, user agent, and references to associated access tokens and OAuth clients. This endpoint supports complex search filters, pagination, and sorting to facilitate efficient monitoring and auditing of token usage events.","description":"Retrieve a filtered and paginated list of OAuth server token monitor records from the system. This operation provides advanced querying capabilities allowing clients to filter token events by event type, client id, IP address, and time ranges.\n\nThe response includes metadata capturing details such as event type (e.g., validation, expiration, revocation), event timestamp, associated OAuth client, IP address, and user agent string.\n\nSecurity considerations include restricting this endpoint to authorized admin and developer roles due to sensitive nature of token event logs. Efficient access and pagination help handle large event volumes.\n\nThis operation corresponds to the 'oauth_server_token_monitors' table in Prisma schema. It is essential for token usage auditing, security monitoring, and forensic analysis.\n\nAdvanced searching and pagination capabilities allow administrators to monitor token activity trends and detect anomalies. The API supports sorting results by event timestamp and filtering by client identifier.\n\nErrors are handled with standard HTTP codes and descriptive messages for invalid filter parameters and unauthorized access attempts.","summary":"Search and retrieve paginated OAuth token monitor events","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for OAuth token monitor filtering","typeName":"IOauthServerTokenMonitor.IRequest"},"responseBody":{"description":"Paginated list of OAuth token monitor summary information matching search criteria","typeName":"IPageIOauthServerTokenMonitor.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/oauthServer/admin/oauthServerTokenMonitors","method":"patch"},{"specification":"This operation retrieves a paginated list of OAuth server token monitor records, each representing events such as access token validation, expiration, or revocation. It operates on the 'oauth_server_token_monitors' table from the Prisma schema, which stores event metadata including event type, timestamps, IP address, user agent, and references to associated access tokens and OAuth clients. This endpoint supports complex search filters, pagination, and sorting to facilitate efficient monitoring and auditing of token usage events.","description":"Retrieve a filtered and paginated list of OAuth server token monitor records from the system. This operation provides advanced querying capabilities allowing clients to filter token events by event type, client id, IP address, and time ranges.\n\nThe response includes metadata capturing details such as event type (e.g., validation, expiration, revocation), event timestamp, associated OAuth client, IP address, and user agent string.\n\nSecurity considerations include restricting this endpoint to authorized admin and developer roles due to sensitive nature of token event logs. Efficient access and pagination help handle large event volumes.\n\nThis operation corresponds to the 'oauth_server_token_monitors' table in Prisma schema. It is essential for token usage auditing, security monitoring, and forensic analysis.\n\nAdvanced searching and pagination capabilities allow administrators to monitor token activity trends and detect anomalies. The API supports sorting results by event timestamp and filtering by client identifier.\n\nErrors are handled with standard HTTP codes and descriptive messages for invalid filter parameters and unauthorized access attempts.","summary":"Search and retrieve paginated OAuth token monitor events","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for OAuth token monitor filtering","typeName":"IOauthServerTokenMonitor.IRequest"},"responseBody":{"description":"Paginated list of OAuth token monitor summary information matching search criteria","typeName":"IPageIOauthServerTokenMonitor.ISummary"},"authorizationType":null,"authorizationRole":"developer","name":"index","path":"/oauthServer/developer/oauthServerTokenMonitors","method":"patch"},{"specification":"This operation retrieves detailed information about a specific OAuth server token monitor record by its unique identifier. The record includes event type, event timestamps, IP address, user agent, and related OAuth client and access token associations. It is designed for auditing and detailed inspection of individual token events.\n\nThe operation accesses the 'oauth_server_token_monitors' table in the Prisma schema. It enforces authorization to allow only admin and developer roles to view sensitive token event data.\n\nParameter 'id' is a UUID representing the unique identifier of the target token monitor event. The response returns the full detailed entity as defined in the Prisma schema including relationships and metadata.\n\nError scenarios include token monitor not found and unauthorized access, with standardized error responses.","description":"Retrieve detailed information about a specific OAuth token monitor event by its ID. This includes event type, timestamps, client IP, user agent data, and related client and token details.\n\nAccess is restricted to users with admin or developer roles to protect sensitive audit data.\n\nThis corresponds to the 'oauth_server_token_monitors' table in the Prisma schema.","summary":"Get detailed information of a specific OAuth token monitor event","parameters":[{"name":"id","description":"Unique identifier of the OAuth token monitor event","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the OAuth token monitor event","typeName":"IOauthServerTokenMonitor"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/oauthServer/admin/oauthServerTokenMonitors/{id}","method":"get"},{"specification":"This operation retrieves detailed information about a specific OAuth server token monitor record by its unique identifier. The record includes event type, event timestamps, IP address, user agent, and related OAuth client and access token associations. It is designed for auditing and detailed inspection of individual token events.\n\nThe operation accesses the 'oauth_server_token_monitors' table in the Prisma schema. It enforces authorization to allow only admin and developer roles to view sensitive token event data.\n\nParameter 'id' is a UUID representing the unique identifier of the target token monitor event. The response returns the full detailed entity as defined in the Prisma schema including relationships and metadata.\n\nError scenarios include token monitor not found and unauthorized access, with standardized error responses.","description":"Retrieve detailed information about a specific OAuth token monitor event by its ID. This includes event type, timestamps, client IP, user agent data, and related client and token details.\n\nAccess is restricted to users with admin or developer roles to protect sensitive audit data.\n\nThis corresponds to the 'oauth_server_token_monitors' table in the Prisma schema.","summary":"Get detailed information of a specific OAuth token monitor event","parameters":[{"name":"id","description":"Unique identifier of the OAuth token monitor event","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the OAuth token monitor event","typeName":"IOauthServerTokenMonitor"},"authorizationType":null,"authorizationRole":"developer","name":"at","path":"/oauthServer/developer/oauthServerTokenMonitors/{id}","method":"get"},{"specification":"This operation creates a new OAuth server token monitor record to log a token-related security or operational event. It is linked to existing OAuth access tokens and clients.\n\nThe 'oauth_server_token_monitors' table stores token event type, origin IP, user agent, and timestamps with soft delete support.\n\nOnly authorized roles (admin, developer) can create such records. The request must include all necessary fields relevant to the token event detection and reporting.\n\nValidation rules enforce unique token events per token and timestamp.\n\nThis operation is crucial for maintaining an audit trail of token activities for monitoring and compliance purposes.","description":"Create a new OAuth token monitor event record linking an access token event with the related client, including event type, IP address, user agent, and timestamps.\n\nOnly users with admin or developer roles may create token monitor events.\n\nThe input request must provide event_type (e.g., validation, expiration), access_token_id, client IP, and optionally user agent information.\n\nThe API responds with the newly created event record details.\n\nFailure occurs on missing required fields, duplicate entries, or unauthorized roles.","summary":"Create a new OAuth token monitor event","parameters":[],"requestBody":{"description":"Creation info of the OAuth token monitor event","typeName":"IOauthServerTokenMonitor.ICreate"},"responseBody":{"description":"Created OAuth token monitor event information","typeName":"IOauthServerTokenMonitor"},"authorizationType":null,"authorizationRole":"admin","name":"create","path":"/oauthServer/admin/oauthServerTokenMonitors","method":"post"},{"specification":"This operation creates a new OAuth server token monitor record to log a token-related security or operational event. It is linked to existing OAuth access tokens and clients.\n\nThe 'oauth_server_token_monitors' table stores token event type, origin IP, user agent, and timestamps with soft delete support.\n\nOnly authorized roles (admin, developer) can create such records. The request must include all necessary fields relevant to the token event detection and reporting.\n\nValidation rules enforce unique token events per token and timestamp.\n\nThis operation is crucial for maintaining an audit trail of token activities for monitoring and compliance purposes.","description":"Create a new OAuth token monitor event record linking an access token event with the related client, including event type, IP address, user agent, and timestamps.\n\nOnly users with admin or developer roles may create token monitor events.\n\nThe input request must provide event_type (e.g., validation, expiration), access_token_id, client IP, and optionally user agent information.\n\nThe API responds with the newly created event record details.\n\nFailure occurs on missing required fields, duplicate entries, or unauthorized roles.","summary":"Create a new OAuth token monitor event","parameters":[],"requestBody":{"description":"Creation info of the OAuth token monitor event","typeName":"IOauthServerTokenMonitor.ICreate"},"responseBody":{"description":"Created OAuth token monitor event information","typeName":"IOauthServerTokenMonitor"},"authorizationType":null,"authorizationRole":"developer","name":"create","path":"/oauthServer/developer/oauthServerTokenMonitors","method":"post"},{"specification":"This operation updates an existing OAuth server token monitor event record identified by its unique ID. It allows modifying event metadata such as event type, IP address, and user agent, while preserving audit timestamps.\n\nThe operation targets the 'oauth_server_token_monitors' table in the Prisma schema. Authentication restricts access to admin and developer roles.\n\nThe 'id' path parameter specifies the target token monitor record. The request body includes fields available for update.\n\nErrors include not found (invalid ID), unauthorized access, and validation errors. Successful update returns the modified token monitor record details.\n\nThis operation supports token monitoring maintenance and correction activities within the OAuth server platform.","description":"Update details of an existing OAuth token monitor event by its ID. Allows modification of event type, IP address, user agent, etc.\n\nAuthorized roles 'admin' and 'developer' only.\n\nThe request includes updated event data except for immutable fields like ID and timestamps.\n\nError handling for invalid IDs and permission violations is implemented.\n\nThis operation modifies 'oauth_server_token_monitors' table records.","summary":"Update an existing OAuth token monitor event","parameters":[{"name":"id","description":"Unique identifier of the OAuth token monitor event to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information for the OAuth token monitor event","typeName":"IOauthServerTokenMonitor.IUpdate"},"responseBody":{"description":"Updated OAuth token monitor event information","typeName":"IOauthServerTokenMonitor"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/oauthServer/admin/oauthServerTokenMonitors/{id}","method":"put"},{"specification":"This operation updates an existing OAuth server token monitor event record identified by its unique ID. It allows modifying event metadata such as event type, IP address, and user agent, while preserving audit timestamps.\n\nThe operation targets the 'oauth_server_token_monitors' table in the Prisma schema. Authentication restricts access to admin and developer roles.\n\nThe 'id' path parameter specifies the target token monitor record. The request body includes fields available for update.\n\nErrors include not found (invalid ID), unauthorized access, and validation errors. Successful update returns the modified token monitor record details.\n\nThis operation supports token monitoring maintenance and correction activities within the OAuth server platform.","description":"Update details of an existing OAuth token monitor event by its ID. Allows modification of event type, IP address, user agent, etc.\n\nAuthorized roles 'admin' and 'developer' only.\n\nThe request includes updated event data except for immutable fields like ID and timestamps.\n\nError handling for invalid IDs and permission violations is implemented.\n\nThis operation modifies 'oauth_server_token_monitors' table records.","summary":"Update an existing OAuth token monitor event","parameters":[{"name":"id","description":"Unique identifier of the OAuth token monitor event to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information for the OAuth token monitor event","typeName":"IOauthServerTokenMonitor.IUpdate"},"responseBody":{"description":"Updated OAuth token monitor event information","typeName":"IOauthServerTokenMonitor"},"authorizationType":null,"authorizationRole":"developer","name":"update","path":"/oauthServer/developer/oauthServerTokenMonitors/{id}","method":"put"},{"specification":"This operation deletes an existing oauth_server_token_monitors record identified by its UUID. The oauth_server_token_monitors table tracks OAuth access token events such as validation, expiration, and revocation for audit and security tracking purposes. Deleting a token monitor removes the event record permanently from the system. Only users with 'admin' role are authorized to perform this deletion as it involves sensitive audit data management.","description":"This DELETE operation permanently removes a token monitor record from the database based on its unique identifier.\n\nToken monitors record critical OAuth access token events, including validation attempts, expirations, and revocations, providing essential security and audit information. Managing these records allows maintaining audit logs and removing obsolete or erroneous entries.\n\nThis operation is restricted to admin users due to the sensitive nature of audit information. The endpoint expects the ID of the token monitor to be provided as a path parameter. Upon successful deletion, the record will no longer be accessible or recoverable.\n\nErrors may occur if the provided ID does not correspond to any existing record. Proper authorization checks must be enforced to prevent unauthorized deletions.","summary":"Delete an OAuth server token monitor record by ID","parameters":[{"name":"id","description":"Unique identifier of the token monitor to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/oauthServer/admin/oauthServerTokenMonitors/{id}","method":"delete","authorizationRole":"admin","authorizationType":null},{"specification":"Retrieve a paginated list of OAuth server client secret regeneration records. These records track regeneration events of client secrets, including timestamp and reason, linked to the admin user who performed the change. This allows historical audit and compliance tracking.","description":"This PATCH operation retrieves a list of client secret regeneration records with pagination, filtering, and sorting.\n\nClient secret regenerations document each time a client secret is changed, capturing the admin who performed the regeneration, the time, and optional reason. This historical record supports security auditing and compliance requirements.\n\nThe list supports pagination parameters and optional filters such as admin ID or client ID. The response includes summary information of each regeneration event.\n\nThis operation typically requires admin-level authorization to access confidential security audit data.","summary":"List OAuth server client secret regeneration records","parameters":[],"requestBody":{"description":"Filter and pagination parameters for listing client secret regenerations","typeName":"IOauthServerClientSecretRegeneration.IRequest"},"responseBody":{"description":"Paginated list of client secret regeneration summaries","typeName":"IPageIOauthServerClientSecretRegeneration.ISummary"},"authorizationRoles":["admin"],"name":"index","path":"/oauthServer/admin/oauthServerClientSecretRegenerations","method":"patch","authorizationRole":"admin","authorizationType":null},{"specification":"Retrieve detailed information about a specific OAuth server client secret regeneration record by its ID. This record includes information about the client secret regeneration event including when it was regenerated, the admin responsible, and the reason for regeneration.","description":"This GET operation fetches detailed information for a client secret regeneration record identified by its unique ID.\n\nClient secret regeneration logs store historical data on when and why a client's secret was regenerated and by whom. Detailed access is restricted to authorized admins.\n\nThe detailed record includes timestamps, reason for regeneration, and references to the associated client and admin user.\n\nErrors will be returned if the specified ID does not exist or if access is unauthorized.","summary":"Get detailed client secret regeneration record by ID","parameters":[{"name":"id","description":"Unique identifier of the client secret regeneration record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed client secret regeneration record information","typeName":"IOauthServerClientSecretRegeneration"},"authorizationRoles":["admin"],"name":"at","path":"/oauthServer/admin/oauthServerClientSecretRegenerations/{id}","method":"get","authorizationRole":"admin","authorizationType":null},{"specification":"Create a new OAuth server client secret regeneration record. This operation records the event of regenerating a client's secret, including the admin who initiated the change and the reason. It helps maintain audit trails and compliance logs for security purposes.","description":"This POST operation creates a new client secret regeneration event, recording which client secret was regenerated, the admin responsible, and the reason.\n\nCreating a client secret regeneration log is essential for tracking changes to client credentials, ensuring traceability and security.\n\nThe request body must include the details of the regeneration event. The operation provides the created record in the response.\n\nThis operation is restricted to admin users to prevent unauthorized audit log creation.","summary":"Create a client secret regeneration record","parameters":[],"requestBody":{"description":"Information about the client secret regeneration to create","typeName":"IOauthServerClientSecretRegeneration.ICreate"},"responseBody":{"description":"Created client secret regeneration record","typeName":"IOauthServerClientSecretRegeneration"},"authorizationRoles":["admin"],"name":"create","path":"/oauthServer/admin/oauthServerClientSecretRegenerations","method":"post","authorizationRole":"admin","authorizationType":null},{"specification":"This operation updates an existing client secret regeneration record in the OAuth server system's admin domain. It corresponds to the 'oauth_server_client_secret_regenerations' table in the Prisma DB schema. This entity tracks historical client secret regeneration events, linked to specific OAuth clients and administrators, including regeneration time and reason. The update operation allows modifying the reason or other mutable fields while preserving audit timestamps. Business rules ensure the record exists and belongs to a valid client and admin. Role-based access control restricts this operation to admin users with appropriate privilege. Validation includes ensuring the record ID is valid UUID and submitted data matches schema constraints. This supports audit transparency and operational integrity by allowing authorized corrections or additional notes post secret regeneration events.","description":"Update details of a client secret regeneration record for the OAuth server.\n\nThis operation allows administrative users to modify recorded information such as the reason for regeneration. It deals with the oauth_server_client_secret_regenerations entity, which documents every instance of client secret changes for OAuth clients.\n\nSecurity considerations limit access to admin roles only to protect audit integrity.\n\nThe record includes references to the OAuth client and the administrator who performed the operation, with timestamps and soft deletion support.\n\nValidation ensures the record ID provided is a valid UUID corresponding to an existing record.\n\nRelated operations include deletion of secret regeneration records and listing regeneration history.\n\nError handling covers invalid IDs, unauthorized access, and schema validation failures.\n","summary":"Update a client secret regeneration record","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"The unique identifier of the client secret regeneration record to update"}],"requestBody":{"description":"Update information of the client secret regeneration record","typeName":"IOauthServerClientSecretRegeneration.IUpdate"},"responseBody":{"description":"Updated client secret regeneration record information","typeName":"IOauthServerClientSecretRegeneration"},"authorizationRoles":["admin"],"path":"/oauthServer/admin/oauthServerClientSecretRegenerations/{id}","method":"put","authorizationType":null,"authorizationRole":"admin","name":"updateSecretRegenerationRecord"},{"specification":"This operation deletes a client secret regeneration record from the OAuth server system's admin domain permanently. It targets the 'oauth_server_client_secret_regenerations' table as defined in the Prisma schema. Deletion effectively removes the record, which tracks client secret regeneration events, ensuring it is no longer retrievable. This can be required for data retention compliance or administrative cleanup. User permissions restrict this action to admin role users. Input validation confirms the record identifier is a valid UUID. This operation performs a hard delete, fully purging the data from the database with no soft-delete mechanism. It complements retrieval and update operations for client secret regeneration histories.","description":"Erase a client secret regeneration record from the OAuth server.\n\nThis operation permanently removes the specified regeneration record by its unique identifier.\n\nThe record tracks client secret changes associated with OAuth clients and administrators.\n\nOnly admin users are authorized to execute this operation to maintain security standards.\n\nValidation on the record ID ensures only valid UUIDs are processed.\n\nRelated operations include listing and updating regeneration records.\n\nError handling includes invalid ID format and unauthorized access rejection.\n\nThis performs a hard delete with no recovery option.\n","summary":"Delete a client secret regeneration record","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"The unique identifier of the client secret regeneration record to delete"}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"path":"/oauthServer/admin/oauthServerClientSecretRegenerations/{id}","method":"delete","authorizationType":null,"authorizationRole":"admin","name":"eraseSecretRegenerationRecord"}],"components":{"authorization":[{"name":"guest","description":"Unauthenticated users with limited access, able to view public information and perform basic authentication actions like login and registration.","kind":"guest"},{"name":"member","description":"Authenticated users who can manage their own profiles, view their own data, and use OAuth authentication flows including social login and email login.","kind":"member"},{"name":"admin","description":"System administrators who have elevated permissions to manage users, clients, tokens, system settings, and perform monitoring and auditing tasks.","kind":"admin"},{"name":"developer","description":"Developers or third-party services that integrate with the OAuth server via API, including registering clients, and accessing developer tools like SDK generation and API tester.","kind":"member"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageIOauthServerOauthServerConfigs.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IOauthServerOauthServerConfigs.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIOauthServerRedisCache.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IOauthServerRedisCache.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIOauthServerguests.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IOauthServerguests.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIOauthServerMember.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IOauthServerMember.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIOauthServerOauthServerAdmins.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IOauthServerOauthServerAdmins.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIOauthServerDeveloper":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IOauthServerDeveloper"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIOauthServerAuthorizationCode.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IOauthServerAuthorizationCode.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIOauthServerAccessToken.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IOauthServerAccessToken.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIOauthServerRefreshToken.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IOauthServerRefreshToken.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIOauthServerIdToken.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IOauthServerIdToken.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIOauthServerScope.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IOauthServerScope.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIOauthServerOauthClient.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IOauthServerOauthClient.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIOauthServerClientProfile":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IOauthServerClientProfile"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIOauthServerSocialProviders":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IOauthServerSocialProviders"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIOauthServerSocialUserLink.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IOauthServerSocialUserLink.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIOauthServerUserProfiles.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IOauthServerUserProfiles.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIOauthServerUserGameProfile.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IOauthServerUserGameProfile.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIOauthServerUserPoint":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IOauthServerUserPoint"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIOauthServerUserPointHistory.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IOauthServerUserPointHistory.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIOauthServerPointCoupon":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IOauthServerPointCoupon"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIOauthServerUserPointCoupon":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IOauthServerUserPointCoupon"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIOauthServerAuditLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IOauthServerAuditLog"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIOauthServerAdminNotification":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IOauthServerAdminNotification"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIOauthServerTokenMonitor.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IOauthServerTokenMonitor.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIOauthServerClientSecretRegeneration.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IOauthServerClientSecretRegeneration.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IOauthServerGuest":{"type":"object","properties":{"id":{"type":"string","description":"Unique identifier of the guest user."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp for the guest record."},"updated_at":{"type":"string","format":"date-time","description":"Last updated timestamp for the guest record."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Nullable soft delete timestamp for logical deletion."}},"required":["id","created_at","updated_at"],"description":"Guest user entity representing unauthenticated or anonymous users with minimal stored information."},"IOauthServerGuest.ICreate":{"type":"object","description":"Data required to create a new guest user.\n\nGuest user entities only contain auditing timestamps and id, so creation might be empty or minimal.","properties":{},"required":[]},"IOauthServerGuest.IRefresh":{"type":"object","description":"Refresh token data for guest user token refreshing.","properties":{"refresh_token":{"type":"string","description":"Refresh token string used to obtain new access tokens"}},"required":["refresh_token"]},"IOauthServerOauthServerGuest.IAuthorized":{"type":"object","description":"Authorization response containing JWT token.\n\nThis response is returned after successful authentication operations such as login, join, or token refresh for guest users.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated guest user"},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","token"]},"IOauthServerMember.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Member email address for login."},"password":{"type":"string","description":"Password in plain text during creation.\nMust be hashed server-side upon receiving."}},"required":["email","password"],"description":"Schema for creating a new member during registration, requires email and plaintext password to be provided which will be hashed internally."},"IOauthServerMember":{"type":"object","description":"Member user entity represents a registered OAuth server user with necessary authentication fields and auditing timestamps.\n\nThe entity includes unique email and password hash fields to support authentication, and a soft delete policy.\n\nThis model excludes sensitive raw password fields and only stores hashed versions for security.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) for the member user."},"email":{"type":"string","description":"Email address used for authentication and communication."},"email_verified":{"type":"boolean","description":"Flag indicating whether the user's email has been verified."},"password_hash":{"type":"string","description":"Hashed password stored securely for authentication purposes."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the member record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the member record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp indicating soft deletion; null if active."}},"required":["id","email","email_verified","password_hash","created_at","updated_at"]},"IOauthServerMember.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Member email address."},"password":{"type":"string","description":"Password in plain text to be verified."}},"required":["email","password"],"description":"Login credentials input, used for authenticating a member with email and password."},"IOauthServerMember.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token string issued previously."}},"required":["refresh_token"],"description":"Input DTO for token refresh operations carrying the valid refresh token string."},"IOauthServerMember.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Member id in UUID format."},"email":{"type":"string","description":"Email address used for authentication and communication."},"email_verified":{"type":"boolean","description":"Flag indicating whether the user's email has been verified."},"password_hash":{"type":"string","description":"Hashed password stored securely for authentication purposes."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the member record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the member record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp indicating soft deletion; null if active."},"access_token":{"type":"string","description":"JWT access token string."},"refresh_token":{"type":"string","description":"JWT refresh token string."},"expires_in":{"type":"number","description":"Expiration seconds for the access token."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","email_verified","password_hash","created_at","updated_at","token"],"description":"Authorized response presenting member information with access and refresh tokens for authenticated session management."},"IOauthServerAdmin.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Email address for the admin."},"email_verified":{"type":"boolean","description":"Flag whether the email has been verified."},"password":{"type":"string","description":"Plain password string to be hashed on server."}},"required":["email","email_verified","password"],"description":"Input data DTO for creating admin user accounts requiring email, email verified flag, and plain password."},"IOauthServerAdmin":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique UUID identifier of the administrator"},"email":{"type":"string","description":"Administrator account email.\n\nMust be a valid unique email."},"email_verified":{"type":"boolean","description":"Flag indicating if the administrator's email is verified."},"password_hash":{"type":"string","description":"Hashed password string for authentication."},"created_at":{"type":"string","format":"date-time","description":"Account creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Account last update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp for soft deletion; null when active."}},"required":["id","email","email_verified","password_hash","created_at","updated_at"],"description":"Administrator user entity with elevated privileges for system management.\n\nStores unique email, verified flag, hashed password, with auditing and soft delete timestamps.\n\n@namespace Actors\n@author AutoBE - https://github.com/wrtnlabs/autobe"},"IOauthServerAdmin.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique UUID identifier of the admin user"},"email":{"type":"string","description":"Administrator account email.\n\nMust be a valid unique email."},"email_verified":{"type":"boolean","description":"Flag indicating if the administrator's email is verified."},"password_hash":{"type":"string","description":"Hashed password string for authentication."},"created_at":{"type":"string","format":"date-time","description":"Account creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Account last update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp for soft deletion; null when active."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","email_verified","password_hash","created_at","updated_at","token"],"description":"Authorization response containing JWT token.\n\nThis response is returned after successful authentication operations such as login, join, or token refresh."},"IOauthServerAdmin.ILogin":{"type":"object","properties":{"email":{"type":"string","description":"Email address used for login"},"password":{"type":"string","description":"Plain password string (should be protected in transit)"}},"required":["email","password"],"description":"Login credentials for admin user including email and password."},"IOauthServerAdmin.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token string to request a new JWT"}},"required":["refresh_token"],"description":"Refresh token request containing the refresh_token string."},"IOauthServerDeveloper":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the developer user (UUID format)."},"email":{"type":"string","description":"Email address of the developer user."},"email_verified":{"type":"boolean","description":"Indicates whether the developer's email is verified."},"password_hash":{"type":"string","description":"Hashed password for authentication."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the record was soft deleted; null if active."}},"required":["id","email","email_verified","password_hash","created_at","updated_at"],"description":"Developer user entity representing OAuth client developers with permissions to manage clients and SDKs. Includes unique email, email verification flag, password hash, with auditing and soft delete timestamps."},"IOauthServerDeveloper.ICreate":{"type":"object","properties":{"email":{"type":"string","description":"Developer's unique email address for login and communication."},"email_verified":{"type":"boolean","description":"Flag indicating whether the developer's email has been verified."},"password_hash":{"type":"string","description":"Hashed password used for authentication."}},"required":["email","email_verified","password_hash"],"description":"Payload to create a new developer account.\nContains email, email_verified flag, and password hash but not id or timestamps."},"IOauthServerDeveloper.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Developer's email address for authentication."},"password":{"type":"string","description":"Plaintext password to authenticate; must be securely handled."}},"required":["email","password"],"description":"Developer user login credentials for authentication."},"IOauthServerDeveloper.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token string to obtain new access tokens."}},"required":["refresh_token"],"description":"Request schema for refreshing developer user JWT tokens."},"IOauthServerDeveloper.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Developer's unique UUID identifier."},"email":{"type":"string","description":"Email address of the developer user."},"email_verified":{"type":"boolean","description":"Indicates whether the developer's email is verified."},"password_hash":{"type":"string","description":"Hashed password for authentication."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the record was soft deleted; null if active."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","email_verified","password_hash","created_at","updated_at","token"],"description":"Authorized response containing JWT access and refresh tokens for developer user sessions."},"IOauthServerOauthServerConfigs":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"key":{"type":"string","description":"Unique configuration key identifying a system setting."},"value":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Value of the configuration setting, stored as string."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Detailed explanation of the configuration setting's purpose and usage."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the record was soft deleted; null if active."}},"required":["id","key","created_at","updated_at"],"description":"System configuration settings for the OAuth server including general parameters and environment-specific options. This primary table holds key-value pairs that control system behavior. It includes timestamps for audit and a soft delete field."},"IOauthServerOauthServerConfigs.IRequest":{"type":"object","properties":{"key":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional filter to search by config key pattern."},"value":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional filter to search by exact value."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional filter to search by description substring."},"is_active":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Optional flag true=active configs, false=deleted configs."},"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Pagination: page number requested."},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Pagination: number of records per page."},"sortOrder":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sorting order, \"asc\" or \"desc\"."},"sortField":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional sorting field name."}},"required":[],"description":"Parameters to search, filter and paginate OAuth server configuration records."},"IOauthServerOauthServerConfigs.ICreate":{"type":"object","properties":{"key":{"type":"string","description":"Unique configuration key identifying a system setting."},"value":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Value of the configuration setting, stored as string."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Detailed explanation of the configuration setting's purpose and usage."}},"required":["key"],"description":"Payload to create a new guest user account entry in the 'oauth_server_guests' table."},"IOauthServerOauthServerConfigs.IUpdate":{"type":"object","properties":{"value":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Value of the configuration setting, stored as string."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Detailed explanation of the configuration setting's purpose and usage."}},"required":[],"description":"Payload to create a new guest user account entry in the 'oauth_server_guests' table."},"IOauthServerRedisCache.IRequest":{"type":"object","properties":{"cache_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Name of the Redis cache configuration."},"prefix":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Key prefix used for Redis keys in this cache."},"ttl_seconds":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Time to live for cache entries, in seconds."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Description of the cache purpose and usage."},"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the cache configuration was created."},"updated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the cache configuration was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the cache configuration was soft deleted; null if active."},"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Limitation of records per a page."},"sortBy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sort by property name."},"sortDirection":{"oneOf":[{"const":"ASC"},{"const":"DESC"},{"type":"null"}],"description":"Sort direction."}},"required":[],"description":"Search criteria and pagination parameters for Redis cache configurations"},"IOauthServerRedisCache":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the Redis cache configuration. UUID format."},"cache_name":{"type":"string","description":"Name of the Redis cache configuration; unique among all caches"},"prefix":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Key prefix used for Redis keys; optional, can be null"},"ttl_seconds":{"type":"integer","format":"int32","description":"Time to live (TTL) in seconds for cache entries"},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Description of cache purpose and usage; optional, can be null"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this cache configuration record was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this cache configuration was last updated"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp; null if cache configuration is active"}},"required":["id","cache_name","ttl_seconds","created_at","updated_at"],"description":"Redis cache configuration details including TTL, key prefix, and descriptive metadata. This entity controls caching for token verification, user info, external API responses, and client info across the OAuth server."},"IOauthServerRedisCache.ICreate":{"type":"object","properties":{"cache_name":{"type":"string","description":"Unique name for the Redis cache configuration; must be unique"},"ttl_seconds":{"type":"integer","format":"int32","description":"TTL (time to live) for cache entries in seconds"},"prefix":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional key prefix to use in Redis for this cache configuration"},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional textual description of cache usage and role in the system"}},"required":["cache_name","ttl_seconds"],"description":"Request body schema for creating a new Redis cache configuration."},"IOauthServerredisServerRedisCaches.IUpdate":{"type":"object","properties":{"cache_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Redis cache name to update (optional)"},"ttl_seconds":{"type":"integer","format":"int32","description":"TTL in seconds for cache expiration when updating"},"prefix":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Key prefix used for Redis keys (optional when updating)"},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Description of the cache configuration (optional when updating)"}},"required":[],"description":"Request body schema for updating an existing Redis cache configuration. All fields optional to allow partial updates."},"IOauthServerredisServerRedisCaches":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique ID of the Redis cache configuration"},"cache_name":{"type":"string","description":"Redis cache name; must be unique"},"prefix":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Key prefix for Redis keys; may be null"},"ttl_seconds":{"type":"integer","format":"int32","description":"TTL for cache entries in seconds"},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Description of the cache usage; nullable"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when record was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when record was last updated"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp; null if active"}},"required":["id","cache_name","ttl_seconds","created_at","updated_at"],"description":"Redis cache configuration entity including full details, timestamps, and soft deletion status."},"IOauthServerguests.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"number","format":"uint32"},{"type":"null"}],"description":"Page number to retrieve (optional)."},"limit":{"oneOf":[{"type":"number","format":"uint32"},{"type":"null"}],"description":"Number of records per page (optional, default 100)."},"created_at_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Date-time string. Filter records created after or on this date."},"created_at_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Date-time string. Filter records created before or on this date."},"updated_at_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Date-time string. Filter records updated after or on this date."},"updated_at_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Date-time string. Filter records updated before or on this date."},"deleted_only":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Filter by soft delete status. True means only deleted records."}},"required":[],"description":"Request input structure for paginated search of guest users.\n\nIncludes pagination, filtering, and sorting options."},"IOauthServerguests":{"type":"object","properties":{"id":{"type":"string","description":"Unique identifier of the guest user."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp for guest user record."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to guest user record."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp if the guest user record is deleted."}},"required":["id","created_at","updated_at"],"description":"Guest user entity representing unauthenticated or anonymous users who can\ninitiate authentication processes or browse limited services.\n\nContains only auditing timestamps and soft delete support but no authentication\nfields."},"IOauthServerGuest.IUpdate":{"type":"object","properties":{"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Updated creation timestamp. Should be ISO 8601 formatted string or null."},"updated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Updated timestamp for last modification. ISO 8601 string or null."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp when marking guest as deleted or null if not deleted."}},"required":[],"description":"Request model for updating guest user data. Primarily for optional timestamps."},"IOauthServerMember.IRequest":{"type":"object","description":"Request properties for searching members with filters and pagination support.","properties":{"email":{"type":"string","description":"Optional email filter for searching members."},"email_verified":{"type":"boolean","description":"Optional email verification status filter."},"page":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Optional page number for pagination."},"limit":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Optional limit for pagination."},"sort":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional sort order, e.g., 'asc', 'desc'."}},"required":[]},"IOauthServerMember.IUpdate":{"type":"object","description":"Input type for updating a member user with optional fields for partial update.","properties":{"email":{"type":"string","description":"Optional updated email address."},"email_verified":{"type":"boolean","description":"Optional updated email verification status."},"password_hash":{"type":"string","description":"Optional updated hashed password."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional soft deletion timestamp; null if active."}},"required":[]},"IOauthServerOauthServerAdmins.IRequest":{"type":"object","description":"Request properties for filtered and paginated retrieval of OAuth server admin users.","properties":{"email":{"type":"string","description":"Optional email filter for searching admins."},"email_verified":{"type":"boolean","description":"Optional email verification status filter."},"page":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Optional page number for pagination."},"limit":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Optional limit for pagination."},"sort":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional sort order, e.g., 'asc', 'desc'."}},"required":[]},"IOauthServerOauthServerAdmins":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"email":{"type":"string","description":"Administrator email address; unique for login and communication."},"email_verified":{"type":"boolean","description":"Indicates whether the administrator's email has been verified."},"password_hash":{"type":"string","description":"Hashed password for administrator authentication."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of account creation."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last account update."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp representing soft deletion status."}},"required":["id","email","email_verified","password_hash","created_at","updated_at"],"description":"Administrator user entity with elevated privileges for system management.\nStores unique email, verified flag, hashed password, with auditing and soft delete timestamps.\n\n@namespace Actors\n@author AutoBE - https://github.com/wrtnlabs/autobe"},"IOauthServerOauthServerAdmins.ICreate":{"type":"object","properties":{"email":{"type":"string","description":"Administrator email address; unique for login and communication."},"email_verified":{"type":"boolean","description":"Indicates whether the administrator's email has been verified."},"password_hash":{"type":"string","description":"Hashed password for administrator authentication."}},"required":["email","email_verified","password_hash"],"description":"Admin user creation request data with email, password, and verification flag."},"IOauthServerOauthServerAdmins.IUpdate":{"type":"object","properties":{"email":{"type":"string","description":"Administrator email address; unique for login and communication."},"email_verified":{"type":"boolean","description":"Indicates whether the administrator's email has been verified."},"password_hash":{"type":"string","description":"Hashed password for administrator authentication."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp representing soft deletion status."}},"required":[],"description":"Updated information for the OAuth server admin user."},"IOauthServerDeveloper.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Page number."},"limit":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Number of records per page."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search keyword for filtering developer list."},"sortBy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Property name for sorting."},"sortOrder":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sorting direction."}},"required":[],"description":"Request parameters for listing developers with filtering and pagination."},"IOauthServerDeveloper.IUpdate":{"type":"object","properties":{"email":{"type":"string","description":"Email address of the developer user."},"email_verified":{"type":"boolean","description":"Indicates whether the developer's email is verified."},"password_hash":{"type":"string","description":"Hashed password for authentication."}},"required":[],"description":"Input type for updating a developer user. All fields are optional for partial updates."},"IOauthServerAuthorizationCode.IRequest":{"type":"object","properties":{"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional text search on authorization code or related fields."},"oauth_client_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional filter by OAuth client UUID."},"expires_before":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional filter: retrieve codes expiring before this date-time."},"expires_after":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional filter: retrieve codes expiring after this date-time."},"page":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Optional pagination page number."},"limit":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Optional pagination limit per page."},"orderBy":{"oneOf":[{"const":"created_at"},{"const":"expires_at"},{"type":"null"}],"description":"Optional order by field."},"orderDirection":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Optional order direction."}},"required":[],"description":"Request type for searching/filtering OAuth authorization codes."},"IOauthServerAuthorizationCode":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authorization code record"},"oauth_client_id":{"type":"string","format":"uuid","description":"Reference to the OAuth client requesting authorization."},"code":{"type":"string","description":"Unique authorization code string issued to client."},"data":{"type":"string","description":"OAuth request data as JSONB string for full protocol details."},"redirect_uri":{"type":"string","description":"Redirect URI used in the authorization flow."},"expires_at":{"type":"string","format":"date-time","description":"Expiration datetime of the authorization code."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp for revocation."}},"required":["id","oauth_client_id","code","data","redirect_uri","expires_at","created_at","updated_at"],"description":"OAuth authorization code records. Stores unique code strings, JSONB OAuth request data for robust protocol compliance, and redirect URIs. Linked to OAuth clients. Includes timestamps for creation, update, and soft deletion to support revocation and audit trails.\n\n@namespace Oauth\n@author AutoBE - https://github.com/wrtnlabs/autobe"},"IOauthServerAuthorizationCode.ICreate":{"type":"object","properties":{"oauth_client_id":{"type":"string","format":"uuid","description":"Reference to the OAuth client requesting authorization."},"code":{"type":"string","description":"Unique authorization code string issued to client."},"data":{"type":"string","description":"OAuth request data as JSONB string for full protocol details."},"redirect_uri":{"type":"string","description":"Redirect URI used in the authorization flow."},"expires_at":{"type":"string","format":"date-time","description":"Expiration datetime of the authorization code."}},"required":["oauth_client_id","code","data","redirect_uri","expires_at"],"description":"Creation input for OAuth authorization codes.\n\n@namespace Oauth\n@author AutoBE - https://github.com/wrtnlabs/autobe"},"IOauthServerAuthorizationCode.IUpdate":{"type":"object","properties":{"oauth_client_id":{"type":"string","format":"uuid","description":"Reference to the OAuth client requesting authorization."},"code":{"type":"string","description":"Unique authorization code string issued to client."},"data":{"type":"string","description":"OAuth request data as JSONB string for full protocol details."},"redirect_uri":{"type":"string","description":"Redirect URI used in the authorization flow."},"expires_at":{"type":"string","format":"date-time","description":"Expiration datetime of the authorization code."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp for revocation."}},"required":[],"description":"Update input for OAuth authorization codes.\n\n@namespace Oauth\n@author AutoBE - https://github.com/wrtnlabs/autobe"},"IOauthServerAccessToken.IRequest":{"type":"object","properties":{"oauth_client_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"OAuth client owning this access token."},"scope":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Space-separated scopes granted for this token."},"expires_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Start filter for token expiration date."},"expires_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"End filter for token expiration date."},"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Limit of records per page."}},"required":[],"description":"Request parameters to filter and paginate a list of access tokens.\n\n@namespace Oauth\n@author AutoBE - https://github.com/wrtnlabs/autobe"},"IOauthServerAccessToken":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the access token record"},"oauth_client_id":{"type":"string","format":"uuid","description":"OAuth client ID owning the access token"},"authorization_code_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional authorization code ID linking to this token"},"token":{"type":"string","description":"Opaque access token string"},"scope":{"type":"string","description":"Space separated scopes granted for this access token"},"expires_at":{"type":"string","format":"date-time","description":"Expiration datetime in ISO 8601 format"},"created_at":{"type":"string","format":"date-time","description":"Timestamp of record creation"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional soft delete datetime"}},"required":["id","oauth_client_id","token","scope","expires_at","created_at","updated_at"],"description":"OAuth access token entity representing opaque access credentials issued to clients, including association to OAuth clients and optional authorization codes. All tokens have scopes and expiration timestamps. Soft deletion is supported via 'deleted_at'."},"IOauthServerAccessToken.ICreate":{"type":"object","properties":{"oauth_client_id":{"type":"string","format":"uuid","description":"OAuth client ID owning this access token (UUID)"},"authorization_code_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional authorization code ID that granted this token (UUID or null)"},"token":{"type":"string","description":"Opaque access token string to be issued"},"scope":{"type":"string","description":"Space separated scopes granted by this token"},"expires_at":{"type":"string","format":"date-time","description":"Expiration datetime in ISO 8601 format"}},"required":["oauth_client_id","token","scope","expires_at"],"description":"Request payload to create a new OAuth access token with required client association, token string, scopes, and expiration."},"IOauthServerAccessToken.IUpdate":{"type":"object","properties":{"oauth_client_id":{"type":"string","format":"uuid","description":"OAuth client ID owning this access token (UUID)"},"authorization_code_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional authorization code ID related to this token"},"token":{"type":"string","description":"Opaque access token string"},"scope":{"type":"string","description":"Space separated scope strings"},"expires_at":{"type":"string","format":"date-time","description":"Expiration datetime"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional soft delete date"}},"required":[],"description":"Payload to update an existing OAuth access token. All fields are optional and can be updated as needed."},"IOauthServerRefreshToken.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Optional page number for pagination (uint32)"},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Optional limit of records per page (uint32)"},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional search or filter string"}},"required":[],"description":"Request parameters for searching and paginating OAuth refresh tokens. Supports page, limit, and search filter."},"IOauthServerRefreshToken":{"type":"object","description":"Opaque OAuth refresh token entity.\n\nRepresents an OAuth refresh token linked to a client and optionally an authorization code.\n\nIncludes token string, scopes, expiration, and audit timestamps.\n\nSupports soft deletion.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the refresh token"},"oauth_client_id":{"type":"string","format":"uuid","description":"Identifier of the associated OAuth client"},"authorization_code_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional identifier of related authorization code"},"token":{"type":"string","description":"The opaque refresh token string"},"scope":{"type":"string","description":"Space-separated list of granted scopes"},"expires_at":{"type":"string","format":"date-time","description":"Expiration timestamp of the refresh token"},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp"},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp, null when active"}},"required":["id","oauth_client_id","token","scope","expires_at","created_at","updated_at"]},"IOauthServerRefreshToken.ICreate":{"type":"object","description":"Payload to create a new opaque refresh token associated with an OAuth client and optionally an authorization code.","properties":{"oauth_client_id":{"type":"string","format":"uuid","description":"UUID of the OAuth client owning the refresh token."},"authorization_code_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional UUID of the authorization code that granted this refresh token; nullable."},"token":{"type":"string","description":"Opaque refresh token string unique within the system."},"scope":{"type":"string","description":"Space-separated list of scopes granted to this refresh token."},"expires_at":{"type":"string","format":"date-time","description":"Expiration time of this refresh token in ISO 8601 format."}},"required":["oauth_client_id","token","scope","expires_at"]},"IOauthServerRefreshToken.IUpdate":{"type":"object","description":"Payload to update an existing OAuth refresh token with any subset of modifiable fields. Nullable fields support explicit null.","properties":{"oauth_client_id":{"type":"string","format":"uuid","description":"UUID of the OAuth client owning the refresh token."},"authorization_code_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional UUID of authorization code that granted this refresh token; nullable."},"token":{"type":"string","description":"Opaque refresh token string unique within the system."},"scope":{"type":"string","description":"Space-separated list of scopes granted to this refresh token."},"expires_at":{"type":"string","format":"date-time","description":"Expiration time of this refresh token in ISO 8601 format."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp marking soft deletion or null if active."}},"required":[]},"IOauthServerIdToken.IRequest":{"type":"object","description":"Request object for querying OAuth ID tokens with pagination and filtering options.","properties":{"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for pagination, optional."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Maximum number of records per page, optional."},"oauth_client_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter tokens by OAuth client UUID, optional."},"expires_before":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter for tokens expiring before the given date-time, optional."},"expires_after":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter for tokens expiring after the given date-time, optional."}},"required":[]},"IOauthServerIdToken":{"type":"object","description":"OpenID Connect ID tokens issued to clients for identity claims, linked to OAuth clients and optionally authorization codes. Contains token strings, expirations, timestamps, and soft deletion timestamps for lifecycle management.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the ID token."},"oauth_client_id":{"type":"string","format":"uuid","description":"Reference to the OAuth client owning this ID token."},"authorization_code_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Authorization code related to this ID token, if any."},"token":{"type":"string","description":"ID token string containing OIDC claims normally a JWT or opaque token."},"expires_at":{"type":"string","format":"date-time","description":"Expiration timestamp of the ID token."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when ID token was issued."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when ID token was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp."}},"required":["id","oauth_client_id","token","expires_at","created_at","updated_at"]},"IOauthServerIdToken.ICreate":{"type":"object","description":"Payload to create a new ID token record. Includes client ID, optional authorization code ID, token string, and expiration time.","properties":{"oauth_client_id":{"type":"string","format":"uuid","description":"Reference to the OAuth client owning this ID token."},"authorization_code_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional authorization code related to this ID token."},"token":{"type":"string","description":"ID token string containing OIDC claims normally a JWT or opaque token."},"expires_at":{"type":"string","format":"date-time","description":"Expiration timestamp of the ID token."}},"required":["oauth_client_id","token","expires_at"]},"IOauthServerIdToken.IUpdate":{"type":"object","description":"Payload to update an existing ID token record. Allows changes to client ID, optional authorization code ID, token string, expiration time, and soft delete timestamp.","properties":{"oauth_client_id":{"type":"string","format":"uuid","description":"Reference to the OAuth client owning this ID token."},"authorization_code_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional authorization code related to this ID token."},"token":{"type":"string","description":"ID token string containing OIDC claims normally a JWT or opaque token."},"expires_at":{"type":"string","format":"date-time","description":"Expiration timestamp of the ID token."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp."}},"required":[]},"IOauthServerScope.IRequest":{"type":"object","description":"Request object for querying OAuth scopes with filters, pagination, and sorting.","properties":{"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search string to match scope codes or descriptions including partial matching."},"page":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Page number for pagination, zero-based."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Number of records per page."},"sortBy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Name of the property to sort by, e.g., 'code' or 'created_at'."},"sortDirection":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Direction of sorting: ascending or descending."}},"required":[]},"IOauthServerScope":{"type":"object","description":"OAuth 2.0 scopes defining permissions granted via authorization codes or tokens.","properties":{"id":{"type":"string","format":"uuid","description":"Unique scope identifier."},"code":{"type":"string","description":"Code defining the OAuth scope."},"description":{"type":"string","description":"Explanation of the scope's permissions."},"created_at":{"type":"string","format":"date-time","description":"Timestamp scope was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp scope was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp."}},"required":["id","code","description","created_at","updated_at"]},"IOauthServerScope.ICreate":{"type":"object","properties":{"code":{"type":"string","description":"Unique code representing the scope."},"description":{"type":"string","description":"Description of the scope's permissions."}},"required":["code","description"],"description":"Input payload to create a new OAuth scope.\n\nIncludes unique scope code and its description.\n\nUsed by admin users to define new authorization scopes."},"IOauthServerScope.IUpdate":{"type":"object","properties":{"code":{"type":"string","description":"Unique code representing the scope."},"description":{"type":"string","description":"Description of the scope's permissions."}},"required":[],"description":"Payload to update an existing OAuth scope.\n\nPartial updates allowed.\n\nAdmin users can modify scope code and description."},"IOauthServerOauthClient.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Optional current page number for pagination."},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Optional limits the number of records per page."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional search string to filter clients by client_id or other searchable fields."},"is_trusted":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Optional boolean filter to return only trusted/untrusted clients."}},"required":[],"description":"Request parameters for paginated search of OAuth clients.\n\nSupports pagination, filtering, and searching by attributes such as client_id or trust status."},"IOauthServerOauthClient":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the OAuth client."},"client_id":{"type":"string","description":"Unique client identifier string."},"client_secret":{"type":"string","description":"Client secret string."},"redirect_uri":{"type":"string","description":"Redirect URI URL string."},"logo_uri":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional URL string for the client's logo."},"is_trusted":{"type":"boolean","description":"Boolean flag indicating if client is trusted for automatic consent."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp with timezone; nullable if client is active."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of record creation."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last record update."}},"required":["id","client_id","client_secret","redirect_uri","is_trusted","created_at","updated_at"],"description":"OAuth client registered in the system.\n\nIncludes credentials, metadata, trust flag, and audit timestamps.\n\nSupports soft deletion with 'deleted_at' date.\n\nUsed for OAuth authorization and token issuance."},"IOauthServerOauthClient.ICreate":{"type":"object","properties":{"client_id":{"type":"string","description":"Unique client identifier used by OAuth clients."},"client_secret":{"type":"string","description":"Client secret used for authentication."},"redirect_uri":{"type":"string","description":"Redirect URI for OAuth response callbacks."},"logo_uri":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"URI to the client's logo image. Optional."},"is_trusted":{"type":"boolean","description":"Flag indicating whether the client is trusted, allowing automatic consent."}},"required":["client_id","client_secret","redirect_uri","is_trusted"],"description":"Schema for creating a new OAuth client with mandatory client ID, secret, redirect URI, trust flag, and optional logo URI."},"IOauthServerOauthClient.IUpdate":{"type":"object","properties":{"client_secret":{"type":"string","description":"Client secret used for authentication."},"redirect_uri":{"type":"string","description":"Redirect URI for OAuth response callbacks."},"logo_uri":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"URI to the client's logo image. Optional."},"is_trusted":{"type":"boolean","description":"Flag indicating whether the client is trusted, allowing automatic consent."}},"required":[],"description":"Schema for updating an existing OAuth client. All fields are optional."},"IOauthServerClientProfile.IRequest":{"type":"object","properties":{"nickname":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Nickname of the OAuth client for display purposes. Optional filter."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Detailed description of the OAuth client. Optional filter."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp; filter by deleted status."},"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Record creation timestamp; optional filter."},"updated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Record last update timestamp; optional filter."},"page":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Number of records per page for pagination."},"orderBy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sorting criteria for results."}},"required":[],"description":"Search and pagination request schema for OAuth client profiles. All fields are optional."},"IOauthServerClientProfile":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"oauth_client_id":{"type":"string","format":"uuid","description":"Belonged OAuth client ID."},"nickname":{"type":"string","description":"Nickname of the OAuth client for display purposes."},"description":{"oneOf":[{"type":"string","description":"Detailed description of the OAuth client."},{"type":"null"}],"description":"Detailed description of the OAuth client."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp; records when the profile was deleted."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp."}},"required":["id","oauth_client_id","nickname","description","created_at","updated_at"],"description":"Profile information related to OAuth clients, containing frequently\nchanging metadata such as nickname and description. Linked to the main\nclient entity to allow separation of frequently updated profile data."},"IOauthServerClientProfile.ICreate":{"type":"object","properties":{"oauth_client_id":{"type":"string","format":"uuid","description":"Belonged OAuth client ID."},"nickname":{"type":"string","description":"Nickname of the OAuth client for display purposes."},"description":{"oneOf":[{"type":"string","description":"Detailed description of the OAuth client."},{"type":"null"}],"description":"Detailed description of the OAuth client."}},"required":["oauth_client_id","nickname"],"description":"Data required for creating a new OAuth client profile.\n\nIncludes the OAuth client ID it belongs to, the nickname, and optional description."},"IOauthServerClientProfile.IUpdate":{"type":"object","properties":{"nickname":{"oneOf":[{"type":"string","description":"Nickname of the OAuth client for display purposes."},{"type":"null"}],"description":"Nickname of the OAuth client for display purposes."},"description":{"oneOf":[{"type":"string","description":"Detailed description of the OAuth client."},{"type":"null"}],"description":"Detailed description of the OAuth client."}},"required":["nickname","description"],"description":"Data for updating an existing OAuth client profile.\n\nAllows modifying nickname and description independently."},"IOauthServerSocialProviders":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"provider_name":{"type":"string","description":"Unique provider identifier name, e.g., 'naver', 'google', 'apple'."},"client_id":{"type":"string","description":"Client ID used in OAuth flows for this provider."},"client_secret":{"type":"string","description":"Client secret associated with the client ID."},"auth_url":{"type":"string","description":"OAuth authorization endpoint URL for the social provider."},"token_url":{"type":"string","description":"OAuth token endpoint URL for the social provider."},"user_info_url":{"type":"string","description":"User info API endpoint URL to fetch user details from social provider."},"scopes":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"OAuth scopes requested for this provider, space separated."},"is_active":{"type":"boolean","description":"Flag indicating if this social provider integration is active."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp."}},"required":["id","provider_name","client_id","client_secret","auth_url","token_url","user_info_url","is_active","created_at","updated_at"],"description":"Social login OAuth external providers information, managing client IDs,\nsecrets, and authorization endpoints. Provides configuration for\nintegrating external OAuth systems such as Naver, Google, Apple, and\nothers. Supports multi-tenancy and security management for social login\nintegrations."},"IOauthServerSocialProviders.IRequest":{"type":"object","properties":{"cache_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Name of the Redis cache configuration."},"prefix":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Key prefix used for Redis keys in this cache."},"ttl_seconds":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Time to live for cache entries, in seconds."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Description of the cache purpose and usage."},"is_active":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Flag indicating if this social provider integration is active."},"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Record creation timestamp."},"updated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Record last update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp."}},"required":["nickname","description"],"description":"Search criteria and pagination parameters for social login providers.\n\nThis request allows filtering by Redis cache configuration properties such as name, prefix, TTL, description, and activity status."},"IOauthServerSocialProviders.ICreate":{"type":"object","properties":{"provider_name":{"type":"string","description":"Unique provider identifier name, e.g., 'naver', 'google', 'apple'."},"client_id":{"type":"string","description":"Client ID used in OAuth flows for this provider."},"client_secret":{"type":"string","description":"Client secret associated with the client ID."},"auth_url":{"type":"string","description":"OAuth authorization endpoint URL for the social provider."},"token_url":{"type":"string","description":"OAuth token endpoint URL for the social provider."},"user_info_url":{"type":"string","description":"User info API endpoint URL to fetch user details from social provider."},"scopes":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"OAuth scopes requested for this provider, space separated."},"is_active":{"type":"boolean","description":"Flag indicating if this social provider integration is active."}},"required":["provider_name","client_id","client_secret","auth_url","token_url","user_info_url","is_active"],"description":"Input schema for creating a new social login provider.\n\nThis includes unique provider name, OAuth client credentials, endpoints, and activation flag."},"IOauthServerSocialProvider.IUpdate":{"type":"object","properties":{"provider_name":{"type":"string","description":"Unique provider identifier name, e.g., 'naver', 'google', 'apple'."},"client_id":{"type":"string","description":"Client ID used in OAuth flows for this provider."},"client_secret":{"type":"string","description":"Client secret associated with the client ID."},"auth_url":{"type":"string","description":"OAuth authorization endpoint URL for the social provider."},"token_url":{"type":"string","description":"OAuth token endpoint URL for the social provider."},"user_info_url":{"type":"string","description":"User info API endpoint URL to fetch user details from social provider."},"scopes":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"OAuth scopes requested for this provider, space separated."},"is_active":{"type":"boolean","description":"Flag indicating if this social provider integration is active."}},"required":[],"description":"Input schema for updating a social login provider.\n\nAllows partial update of any property of the social login provider entity."},"IOauthServerSocialProvider":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"provider_name":{"type":"string","description":"Unique provider identifier name, e.g., 'naver', 'google', 'apple'."},"client_id":{"type":"string","description":"Client ID used in OAuth flows for this provider."},"client_secret":{"type":"string","description":"Client secret associated with the client ID."},"auth_url":{"type":"string","description":"OAuth authorization endpoint URL for the social provider."},"token_url":{"type":"string","description":"OAuth token endpoint URL for the social provider."},"user_info_url":{"type":"string","description":"User info API endpoint URL to fetch user details from social provider."},"scopes":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"OAuth scopes requested for this provider, space separated."},"is_active":{"type":"boolean","description":"Flag indicating if this social provider integration is active."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp."}},"required":["id","provider_name","client_id","client_secret","auth_url","token_url","user_info_url","is_active","created_at","updated_at"],"description":"Represents a social login provider configuration entity.\n\nIncludes identifiers, credentials, OAuth endpoint URLs, activation status, and auditing timestamps."},"IOauthServerSocialUserLink.IRequest":{"type":"object","properties":{"user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by user ID uniquely identifying a member in the system."},"social_provider_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by the social login provider's unique ID."},"external_user_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by external user ID provided by the social login provider."},"created_at_gte":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter for records created after or at the specified datetime."},"created_at_lte":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter for records created before or at the specified datetime."},"updated_at_gte":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter for records updated after or at the specified datetime."},"updated_at_lte":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter for records updated before or at the specified datetime."},"deleted_at_null":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"If true, filters for records that are not soft-deleted (i.e., deleted_at is null). If false, filters for records that are soft-deleted. Null means no filter on this field."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Maximum number of records to return for pagination."},"offset":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Number of records to skip for pagination."},"order_by":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sorting criteria specified as a string, such as 'created_at desc'."}},"required":[],"description":"Request schema for searching and filtering social user links.\n\nIncludes filter criteria such as user ID, social provider ID, external user ID, timestamps, deletion status, and pagination parameters."},"IOauthServerSocialUserLink":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key unique identifier of the social user link"},"user_id":{"type":"string","format":"uuid","description":"Internal user reference linked to oauth_server_members.id"},"social_provider_id":{"type":"string","format":"uuid","description":"Social OAuth provider reference linked to oauth_server_social_providers.id"},"external_user_id":{"type":"string","description":"Unique user identifier assigned by the social provider"},"access_token":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"OAuth access token for the user on the social provider; nullable"},"refresh_token":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"OAuth refresh token for the user on the social provider; nullable"},"token_expiry":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Expiration datetime of the OAuth access token; nullable"},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp"},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp; nullable"}},"required":["id","user_id","social_provider_id","external_user_id","created_at","updated_at"],"description":"Association table linking internal users with external social login accounts from various providers. Maintains unique external user IDs per provider, enabling unified user identity management across multiple social OAuth services."},"IOauthServerSocialUserLinks.ICreate":{"type":"object","properties":{"user_id":{"type":"string","format":"uuid","description":"Internal user reference linked to oauth_server_members.id."},"social_provider_id":{"type":"string","format":"uuid","description":"Social OAuth provider reference linked to oauth_server_social_providers.id."},"external_user_id":{"type":"string","description":"Unique user identifier assigned by the social provider."},"access_token":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"OAuth access token for the user on the social provider."},"refresh_token":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"OAuth refresh token for the user on the social provider."},"token_expiry":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Expiration datetime of the OAuth access token."}},"required":["user_id","social_provider_id","external_user_id"],"description":"Association table linking internal users with external social login accounts from various providers. Maintains unique external user IDs per provider, enabling unified user identity management across multiple social OAuth services."},"IOauthServerSocialUserLinks.IUpdate":{"type":"object","properties":{"user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Internal user reference linked to oauth_server_members.id."},"social_provider_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Social OAuth provider reference linked to oauth_server_social_providers.id."},"external_user_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Unique user identifier assigned by the social provider."},"access_token":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"OAuth access token for the user on the social provider."},"refresh_token":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"OAuth refresh token for the user on the social provider."},"token_expiry":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Expiration datetime of the OAuth access token."}},"required":[],"description":"Association table linking internal users with external social login accounts from various providers. Maintains unique external user IDs per provider, enabling unified user identity management across multiple social OAuth services."},"IOauthServerSocialUserLinks":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"user_id":{"type":"string","format":"uuid","description":"Internal user reference linked to oauth_server_members.id."},"social_provider_id":{"type":"string","format":"uuid","description":"Social OAuth provider reference linked to oauth_server_social_providers.id."},"external_user_id":{"type":"string","description":"Unique user identifier assigned by the social provider."},"access_token":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"OAuth access token for the user on the social provider."},"refresh_token":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"OAuth refresh token for the user on the social provider."},"token_expiry":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Expiration datetime of the OAuth access token."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp."}},"required":["id","user_id","social_provider_id","external_user_id","created_at","updated_at"],"description":"Association table linking internal users with external social login accounts from various providers. Maintains unique external user IDs per provider, enabling unified user identity management across multiple social OAuth services."},"IOauthServerUserProfiles.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Page number for paginated results.\n\nNullable for default first page."},"limit":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Record limit per page for pagination.\n\nNullable for default limit."},"nickname":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Nickname to filter user profiles by.\n\nNullable to allow no filtering."},"user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by specific user ID.\n\nNullable for no filtering."}},"required":[],"description":"Filter and pagination request for user profiles."},"IOauthServerUserProfile":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the user profile."},"user_id":{"type":"string","format":"uuid","description":"Foreign key referencing the user entity this profile belongs to."},"nickname":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"User's display nickname, optional and nullable."},"profile_picture_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"URL to the user's profile picture, optional."},"biography":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Short biography or description of the user, optional."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the profile was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the profile was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the profile was soft deleted, if applicable."}},"required":["id","user_id","created_at","updated_at"],"description":"User profile entity containing optional nickname, profile picture, and biography. Represents volatile user information separately from core user data."},"IOauthServerUserProfile.ICreate":{"type":"object","properties":{"user_id":{"type":"string","format":"uuid","description":"Identifier of the user to whom this profile belongs."},"nickname":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional display nickname for the user."},"profile_picture_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional URL to the profile picture."},"biography":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional short biography or description."}},"required":["user_id"],"description":"Payload for creating a new user profile with optional metadata."},"IOauthServerUserProfile.IUpdate":{"type":"object","properties":{"nickname":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional display nickname for updating."},"profile_picture_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional URL to update the profile picture."},"biography":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional updated short biography."}},"required":[],"description":"Payload for updating an existing user profile continuously and optionally."},"IOauthServerUserGameProfile.IRequest":{"type":"object","properties":{"user_profile_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by user profile ID. Supports UUID format for user profile identifier.\n\nAllows narrowing the search to game profiles linked to a specific user profile.\n\nOptional for generalized querying."},"platform":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by game platform such as 'pubg', 'kakao_pubg', or 'league_of_legends'.\n\nSupports exact matching or pattern-based queries.\n\nNullable to allow absence of this filter parameter."},"player_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by player name for external games.\n\nSupports partial or full matching to facilitate search.\n\nNullable property allows flexible search criteria."},"season":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by season identifier to segment game profiles per competitive season.\n\nAllows narrowing results to specific seasons, optional in queries."},"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter by creation date/time of game profile record.\n\nSupports ISO 8601 date-time format.\n\nAllows time range based filtering when used with additional query parameters."},"updated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter by last update date/time of the game profile.\n\nAllows temporal filtering similar to created_at."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter by deletion timestamp to include or exclude soft deleted records.\n\nNullable to indicate filter is not applied."},"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for paginated results.\n\nMust be a positive integer if specified."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Max records per page in pagination.\n\nMust be a positive integer, defaults to system configuration if omitted."},"sort":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sort order specification.\n\nAccepts field names with optional direction, e.g. 'created_at desc'."}},"required":[],"description":"Request parameters for querying paginated game profile records linked to user profiles. Includes filtering by user profile, platform, player name, season, and timestamps.\n\nSupports pagination and sort parameters for efficient data access."},"IOauthServerUserGameProfile":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the user game profile record."},"user_profile_id":{"type":"string","format":"uuid","description":"The foreign key linking the game profile to the user profile."},"platform":{"type":"string","description":"Game platform identifier such as 'pubg', 'kakao_pubg', or 'league_of_legends' where the player's stats are from."},"player_name":{"type":"string","description":"Player's username or in-game name associated with the game platform."},"season":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Season identifier for the game profile; optional or null if not applicable."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the game profile was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the game profile was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp; null if the record is active."}},"required":["id","user_profile_id","platform","player_name","created_at","updated_at"],"description":"Represents a game profile linked to a user profile in the OAuth server. This entity stores game platform, player name, season, and audit timestamps. Supports soft deletion via deleted_at timestamp."},"IOauthServerUserGameProfile.ICreate":{"type":"object","properties":{"user_profile_id":{"type":"string","format":"uuid","description":"The foreign key linking the game profile to the user profile."},"platform":{"type":"string","description":"Game platform identifier such as 'pubg', 'kakao_pubg', or 'league_of_legends' where the player's stats are from."},"player_name":{"type":"string","description":"Player's username or in-game name associated with the game platform."},"season":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Season identifier for the game profile; optional or null if not applicable."}},"required":["user_profile_id","platform","player_name"],"description":"Payload for creating a new user game profile record. Includes user profile linkage, platform identifier, player name, and optional season. Used during create operations to register new game profiles."},"IOauthServerUserGameProfile.IUpdate":{"type":"object","properties":{"user_profile_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Foreign key linking the game profile to user profile; nullable in update to allow no change."},"platform":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Game platform identifier such as 'pubg', 'kakao_pubg', or 'league_of_legends'. Allows null to indicate no update."},"player_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Player's username or in-game name; nullable to allow optional update."},"season":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Season identifier; nullable for optional update."}},"required":[],"description":"Payload for updating an existing user game profile entity. All fields are optional and nullable to allow partial updates. Includes linking user profile, platform, player name, and season."},"IOauthServerUserPoint":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key identifier of the user point record in the system."},"user_id":{"type":"string","format":"uuid","description":"The unique identifier (UUID) of the user to whom the points belong."},"balance":{"type":"integer","format":"int32","description":"Current total points available for the user."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this user point record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this user point record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp; null if active."}},"required":["id","user_id","balance","created_at","updated_at"],"description":"User points entity representing the total point balance a user holds.\n\nThis entity includes audit timestamps and soft delete status.\n\nThe balance field represents the current points the user can spend or use within the system."},"IOauthServerUserPoint.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Current page number for pagination."},"limit":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Maximum number of records per page."},"user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by specific user identifier."},"balance_min":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Filter records with balance greater than or equal to this value."},"balance_max":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Filter records with balance less than or equal to this value."}},"required":[],"description":"Search criteria and pagination parameters for user points."},"IOauthServerUserPoint.ICreate":{"type":"object","properties":{"user_id":{"type":"string","format":"uuid","description":"The identifier of the user to whom points are assigned."},"balance":{"type":"integer","format":"int32","description":"Starting total point balance for the user."}},"required":["user_id","balance"],"description":"Data required to create a new user point record."},"IOauthServerUserPoint.IUpdate":{"type":"object","properties":{"balance":{"type":"integer","format":"int32","description":"New value for the user's total points balance."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp marking soft deletion; null means undeleted."}},"required":[],"description":"Fields allowed to be updated in a user point record."},"IOauthServerUserPointHistory":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"user_point_id":{"type":"string","format":"uuid","description":"Related user points record."},"change_amount":{"type":"integer","description":"Amount of points added or subtracted in this transaction."},"balance_after_change":{"type":"integer","description":"Point balance after this transaction update."},"reason":{"type":"string","description":"Description of the reason for the point change."},"created_at":{"type":"string","format":"date-time","description":"Transaction record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update, usually same as created_at for historical record."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp for soft deletion; null if active."}},"required":["id","user_point_id","change_amount","balance_after_change","reason","created_at","updated_at"],"description":"Transaction history records capturing increments and decrements to user points for audit purposes, linked to the user_points record. Supports soft deletion and audit timestamps."},"IOauthServerUserPointHistory.IRequest":{"type":"object","properties":{"user_point_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by user_point_id."},"reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by reason keyword."},"change_amount":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Filter by change amount."},"created_at_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter transactions created after this datetime."},"created_at_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter transactions created before this datetime."},"updated_at_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter transactions updated after this datetime."},"updated_at_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter transactions updated before this datetime."},"deleted_at_null":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Filter transactions by null deleted_at field (active records)."},"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Limit of records per page."},"sort":{"oneOf":[{"$ref":"#/components/schemas/ISort"},{"type":"null"}],"description":"Sort information with key and direction."}},"required":[],"description":"Parameters to filter and paginate user point history records."},"IOauthServerUserPointHistory.ICreate":{"type":"object","properties":{"user_point_id":{"type":"string","format":"uuid","description":"User points record reference for this transaction."},"change_amount":{"type":"integer","description":"Points added or removed in this transaction."},"balance_after_change":{"type":"integer","description":"Total balance after the change."},"reason":{"type":"string","description":"Reason for the point change."}},"required":["user_point_id","change_amount","balance_after_change","reason"],"description":"Parameters required to create a user point history transaction record."},"IOauthServerUserPointHistory.IUpdate":{"type":"object","properties":{"user_point_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"User points record reference for this transaction."},"change_amount":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Points added or removed in this transaction."},"balance_after_change":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Total balance after the change."},"reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Reason for the point change."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp, null if record active."}},"required":[],"description":"Parameters for updating a user point history transaction record."},"ISort":{"type":"object","properties":{"key":{"type":"string","description":"Property name to sort by"},"direction":{"oneOf":[{"const":"asc","description":"Sort direction, ascending or descending"},{"const":"desc","description":"Sort direction, ascending or descending"}],"description":"Sort direction, ascending or descending"}},"required":["key","direction"],"description":"Sort information consisting of property key and direction"},"IOauthServerPointCoupon.IRequest":{"type":"object","properties":{"code":{"type":"string","description":"Optional partial match search for coupon code."},"expire_at_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter by expiration date greater or equal."},"expire_at_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter by expiration date lesser or equal."},"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Page number for pagination, unsigned 32-bit integer."},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Limit of items per page, unsigned 32-bit integer."},"order_by":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sorting order criteria."},"order_direction":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort order: asc or desc, only these two values allowed."}},"required":[],"description":"Search criteria and pagination parameters for OAuth server coupons filtering."},"IOauthServerPointCoupon":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key unique identifier of the point coupon.\n\nUnique identifier in UUID format.\n\nThis identifier is the unique key across all point coupons."},"code":{"type":"string","description":"Unique coupon code string used for redemption.\n\nEnforces uniqueness in the system."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description explaining the coupon usage.\n\nProvides context about the coupon."},"value":{"type":"integer","description":"Points credited upon successful coupon redemption.\n\nMust be a number with integer format."},"max_issuance":{"type":"integer","description":"Maximum number of times this coupon can be issued or redeemed.\n\nNumeric integer field."},"expire_at":{"type":"string","format":"date-time","description":"Expiration timestamp of the coupon.\n\nMust be an ISO 8601 datetime string with timezone."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the coupon record was created.\n\nISO 8601 datetime format with timezone."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last update of the coupon record.\n\nISO 8601 datetime format with timezone."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional soft delete timestamp.\n\nNull indicates active record, otherwise soft deleted."}},"required":["id","code","value","max_issuance","expire_at","created_at","updated_at"],"description":"Represents a point coupon for granting user points, including unique code, value, expiration, usage limits, and audit timestamps."},"IOauthServerPointCoupon.ICreate":{"type":"object","properties":{"code":{"type":"string","description":"Coupon code string.\n\nRequired field."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description of the coupon usage."},"value":{"type":"integer","description":"Point value granted by the coupon.\n\nRequired."},"max_issuance":{"type":"integer","description":"Max number of times coupon can be issued or redeemed.\n\nRequired."},"expire_at":{"type":"string","format":"date-time","description":"Expiration datetime of the coupon.\n\nRequired."}},"required":["code","value","max_issuance","expire_at"],"description":"Payload for creating a new OAuth server point coupon."},"IOauthServerPointCoupon.IUpdate":{"type":"object","properties":{"code":{"type":"string","description":"Optional coupon code to update."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description field to update."},"value":{"type":"integer","description":"Optional point value."},"max_issuance":{"type":"integer","description":"Optional max issuance count."},"expire_at":{"type":"string","format":"date-time","description":"Optional expiration datetime."}},"required":[],"description":"Payload for updating an existing OAuth server point coupon."},"IOauthServerUserPointCoupon":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key of the user point coupon record."},"user_id":{"type":"string","format":"uuid","description":"User who redeemed the coupon referenced by their unique identifier."},"point_coupon_id":{"type":"string","format":"uuid","description":"The coupon redeemed by the user."},"used_at":{"type":"string","format":"date-time","description":"The datetime when the coupon was used."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp, nullable if active."}},"required":["id","user_id","point_coupon_id","used_at","created_at","updated_at"],"description":"Tracks which coupons have been used by users for point redemption, linking users to coupons. Includes timestamps and soft delete support. Enforces uniqueness on user-coupon pairs to prevent duplicate redemptions."},"IOauthServerUserPointCoupon.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Page number."},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Limit of records per page."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search string."},"user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"User ID filter."},"point_coupon_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Coupon ID filter."}},"required":[],"description":"Search criteria and pagination parameters for filtering user point coupons."},"IOauthServerUserPointCoupon.ICreate":{"type":"object","properties":{"user_id":{"type":"string","format":"uuid","description":"User who redeems the coupon."},"point_coupon_id":{"type":"string","format":"uuid","description":"Coupon code to redeem."},"used_at":{"type":"string","format":"date-time","description":"Date and time of redemption."}},"required":["user_id","point_coupon_id","used_at"],"description":"User point coupon usage creation payload."},"IOauthServerUserPointCoupon.IUpdate":{"type":"object","properties":{"user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"User who redeems the coupon."},"point_coupon_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Coupon code redeemed."},"used_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Date and time when the coupon was used."}},"required":[],"description":"User point coupon usage update payload."},"IOauthServerAuditLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier of the audit log entry. UUID format."},"event_type":{"type":"string","description":"Type of the audited event such as 'authentication_success', 'authentication_failure', 'token_issued', 'client_registered', etc.\n\nCategorizes the event for audit purposes."},"event_timestamp":{"type":"string","format":"date-time","description":"Timestamp when the event occurred, stored in ISO 8601 format.\n\nIndicates when the event took place."},"actor_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional UUID identifying the user or client who triggered the event.\n\nReferences the entity responsible for the event."},"actor_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional type of the actor triggering the event, e.g., 'user', 'client', 'system'.\n\nDescribes the role or nature of the actor."},"event_description":{"type":"string","description":"Detailed description providing context or metadata about the event.\n\nProvides additional information about the audit event."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp for audit logs.\n\nWhen the audit log entry was created."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp. Usually same as creation time since logs are immutable.\n\nTracks updates to this audit entry (rarely used)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft delete timestamp; null if active."},{"type":"null"}],"description":"Soft delete timestamp; null if active."}},"required":["id","event_type","event_timestamp","event_description","created_at","updated_at"],"description":"Audit logs capturing critical security and operational events including\nauthentication attempts, token issuance, client operations, and system\nactivities for compliance and traceability. This table is append-only\ncapturing immutable event data with timestamps to support audit trails.\nDoes not store sensitive data but records success and failure status with\ncontext for monitoring and forensic analysis."},"IOauthServerAuditLog.IRequest":{"type":"object","properties":{"event_type":{"type":"string","description":"Type of the audited event such as 'authentication_success', 'authentication_failure', 'token_issued', 'client_registered', etc."},"event_timestamp":{"type":"string","format":"date-time","description":"Timestamp when the event occurred, stored in ISO 8601 format."},"actor_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional UUID identifying the user or client who triggered the event.\n\nNullable if event is system-generated."},"actor_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional type of the actor triggering the event, e.g., 'user', 'client', 'system'.\n\nNullable when not applicable."},"event_description":{"type":"string","description":"Detailed description providing context or metadata about the event."},"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Record creation timestamp for audit logs."},"updated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Record last update timestamp. Usually same as creation time since logs are immutable."}},"required":["event_type","event_timestamp","event_description"],"description":"Request schema for searching audit logs with filtering criteria."},"IOauthServerAdminNotification":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n Unique identifier of the notification."},"admin_id":{"type":"string","format":"uuid","description":"References the administrator user who receives this notification."},"title":{"type":"string","description":"Title of the notification message."},"message":{"type":"string","description":"Detailed message content of the notification."},"is_read":{"type":"boolean","description":"Flag indicating if the notification has been read."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp; null if active."}},"required":["id","admin_id","title","message","is_read","created_at","updated_at"],"description":"Administrator user notification entity storing title, message, read status, creation and update timestamps, with optional soft delete timestamp."},"IOauthServerAdminNotification.IRequest":{"type":"object","properties":{"admin_id":{"type":"string","format":"uuid","description":"References the administrator user {@link oauth_server_admins.id} who receives or is associated with the notification."},"title":{"type":"string","description":"Title of the notification message."},"message":{"type":"string","description":"Detailed notification content providing context to the admin."},"is_read":{"type":"boolean","description":"Indicates whether the notification has been read by the admin."},"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the notification was initially created."},"updated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of the last update to the notification."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the notification was soft deleted; null if active."}},"required":["admin_id","title","message","is_read"],"description":"Request schema for creating or searching admin notifications with filters."},"IOauthServerAdminNotification.ICreate":{"type":"object","properties":{"admin_id":{"type":"string","format":"uuid","description":"References the administrator user who receives this notification."},"title":{"type":"string","description":"Title of the notification message."},"message":{"type":"string","description":"Detailed message content of the notification."},"is_read":{"type":"boolean","description":"Flag indicating if the notification has been read."}},"required":["admin_id","title","message","is_read"],"description":"Payload for creating a new admin user notification with required fields including admin ID, title, message, and read status."},"IOauthServerAdminNotification.IUpdate":{"type":"object","properties":{"admin_id":{"type":"string","format":"uuid","description":"References the administrator user who receives this notification."},"title":{"type":"string","description":"Title of the notification message."},"message":{"type":"string","description":"Detailed message content of the notification."},"is_read":{"type":"boolean","description":"Flag indicating if the notification has been read."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp; null if active."}},"required":[],"description":"Payload for updating existing admin user notification with optional properties and soft delete support."},"IOauthServerTokenMonitor.IRequest":{"type":"object","properties":{"event_type":{"type":"string","description":"Optional filter to specify token event type (e.g. validation, expiration, revocation)."},"oauth_client_id":{"type":"string","format":"uuid","description":"Optional filter by OAuth client ID (UUID)."},"ip_address":{"type":"string","description":"Optional filter by IP address."},"page":{"type":"number","description":"Optional pagination parameter specifying current page number."},"limit":{"type":"number","description":"Optional pagination parameter specifying records per page."},"sortField":{"type":"string","description":"Optional pagination sort field."},"sortDirection":{"oneOf":[{"const":"asc","description":"Optional pagination sort direction; enum containing \"asc\" or \"desc\"."},{"const":"desc","description":"Optional pagination sort direction; enum containing \"asc\" or \"desc\"."}],"description":"Optional pagination sort direction; enum containing \"asc\" or \"desc\"."}},"required":[],"description":"Request parameters for filtering and paginating OAuth token monitor records."},"IOauthServerTokenMonitor":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier of the token monitor event."},"access_token_id":{"type":"string","format":"uuid","description":"Links to OAuth access token.\n\nReference to the OAuth access token involved in the event."},"oauth_client_id":{"type":"string","format":"uuid","description":"OAuth client related to the token event.\n\nIdentifies the OAuth client associated with the token."},"event_type":{"type":"string","description":"Type of event like 'validation', 'expiration', 'revocation'.\n\nEvent category describing the token lifecycle action."},"event_timestamp":{"type":"string","format":"date-time","description":"DateTime when event occurred.\n\nTimestamp of the token audit event in ISO 8601 format."},"ip_address":{"type":"string","description":"IP address origin of the event.\n\nSource IP where the token event originated."},"user_agent":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"User agent of the client; nullable.\n\nOptional user agent string for the token event source."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp; null if active."}},"required":["id","access_token_id","oauth_client_id","event_type","event_timestamp","ip_address","created_at","updated_at"],"description":"Token monitor events capturing access token validations, expirations, and revocations.\n\nEach record stores event metadata, including event type, timestamps, client IPs, user agents, and associated OAuth client and token references for audit and security purposes."},"IOauthServerTokenMonitor.ICreate":{"type":"object","properties":{"access_token_id":{"type":"string","format":"uuid","description":"Links to OAuth access token.\n\nRequired."},"oauth_client_id":{"type":"string","format":"uuid","description":"OAuth client related to the token event.\n\nRequired."},"event_type":{"type":"string","description":"Type of event like 'validation', 'expiration', 'revocation'.\n\nRequired."},"event_timestamp":{"type":"string","format":"date-time","description":"DateTime when event occurred.\n\nRequired."},"ip_address":{"type":"string","description":"IP address origin of the event.\n\nRequired."},"user_agent":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"User agent of the client; nullable."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp; null if active."}},"required":["access_token_id","oauth_client_id","event_type","event_timestamp","ip_address"],"description":"Input model for creating a token monitor event.\n\nIncludes details about the related access token, client, event type, time, source IP, and optional user agent."},"IOauthServerTokenMonitor.IUpdate":{"type":"object","properties":{"access_token_id":{"type":"string","format":"uuid","description":"Links to OAuth access token.\n\nOptional."},"oauth_client_id":{"type":"string","format":"uuid","description":"OAuth client related to the token event.\n\nOptional."},"event_type":{"type":"string","description":"Type of event like 'validation', 'expiration', 'revocation'.\n\nOptional."},"event_timestamp":{"type":"string","format":"date-time","description":"DateTime when event occurred.\n\nOptional."},"ip_address":{"type":"string","description":"IP address origin of the event.\n\nOptional."},"user_agent":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"User agent of the client; nullable.\n\nOptional."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp; null if active.\n\nOptional."}},"description":"Model for updating a token monitor event.","required":[]},"IOauthServerClientSecretRegeneration.IRequest":{"type":"object","properties":{"limit":{"oneOf":[{"type":"integer","format":"int32","description":"Number of records to return per page.\n\nOptional."},{"type":"null"}],"description":"Number of records to return per page.\n\nOptional."},"page":{"oneOf":[{"type":"integer","format":"int32","description":"Page number to retrieve.\n\nOptional."},{"type":"null"}],"description":"Page number to retrieve.\n\nOptional."},"id":{"oneOf":[{"type":"string","format":"uuid","description":"ID filter targeting specific client secret regeneration.\n\nOptional."},{"type":"null"}],"description":"ID filter targeting specific client secret regeneration.\n\nOptional."},"oauth_client_id":{"oneOf":[{"type":"string","format":"uuid","description":"OAuth client ID filter.\n\nOptional."},{"type":"null"}],"description":"OAuth client ID filter.\n\nOptional."},"admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"Admin user ID filter.\n\nOptional."},{"type":"null"}],"description":"Admin user ID filter.\n\nOptional."},"regenerated_at_start":{"oneOf":[{"type":"string","format":"date-time","description":"DateTime range start for regeneration timestamps.\n\nOptional."},{"type":"null"}],"description":"DateTime range start for regeneration timestamps.\n\nOptional."},"regenerated_at_end":{"oneOf":[{"type":"string","format":"date-time","description":"DateTime range end for regeneration timestamps.\n\nOptional."},{"type":"null"}],"description":"DateTime range end for regeneration timestamps.\n\nOptional."},"order_by":{"oneOf":[{"type":"string","description":"Sorting instructions (e.g., \"regenerated_at DESC\").\n\nOptional."},{"type":"null"}],"description":"Sorting instructions (e.g., \"regenerated_at DESC\").\n\nOptional."}},"required":[],"description":"Request criteria for searching client secret regeneration records.\n\nIncludes filters, pagination, and sorting options."},"IOauthServerClientSecretRegeneration":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"oauth_client_id":{"type":"string","format":"uuid","description":"OAuth client ID whose secret was regenerated."},"admin_id":{"type":"string","format":"uuid","description":"Admin user ID who performed regeneration."},"regenerated_at":{"type":"string","format":"date-time","description":"Timestamp when regeneration occurred."},"reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional reason for regeneration."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp; null if active."}},"required":["id","oauth_client_id","admin_id","regenerated_at","created_at","updated_at"],"description":"A record of client secret regeneration events for audit and compliance.\n\nDocuments when a client secret was regenerated, by whom, and the reason."},"IOauthServerClientSecretRegeneration.ICreate":{"type":"object","properties":{"oauth_client_id":{"type":"string","format":"uuid","description":"References the OAuth client {@link oauth_server_oauth_clients.id} whose secret was regenerated."},"admin_id":{"type":"string","format":"uuid","description":"References the administrator {@link oauth_server_admins.id} who performed the secret regeneration."},"regenerated_at":{"type":"string","format":"date-time","description":"Timestamp when the client secret regeneration occurred."},"reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional reason or notes explaining the secret regeneration."}},"required":["oauth_client_id","admin_id","regenerated_at"],"description":"Create a new OAuth server client secret regeneration record. \nThis operation records the event of regenerating a client's secret, including the admin who initiated the change and the reason. It helps maintain audit trails and compliance logs for security purposes."},"IOauthServerClientSecretRegeneration.IUpdate":{"type":"object","properties":{"reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Reason or notes explaining the secret regeneration."}},"required":["reason"],"description":"Update a client secret regeneration record. \nThis operation updates an existing client secret regeneration record in the OAuth server system's admin domain. It corresponds to the 'oauth_server_client_secret_regenerations' table in the Prisma DB schema. This entity tracks historical client secret regeneration events, linked to specific OAuth clients and administrators, including regeneration time and reason. The update operation allows modifying the reason or other mutable fields while preserving audit timestamps. Business rules ensure the record exists and belongs to a valid client and admin. Role-based access control restricts this operation to admin users with appropriate privilege. Validation includes ensuring the record ID is valid UUID and submitted data matches schema constraints. This supports audit transparency and operational integrity by allowing authorized corrections or additional notes post secret regeneration events."},"IOauthServerOauthServerConfigs.ISummary":{"type":"object","properties":{"key":{"type":"string","description":"Unique configuration key identifying a system setting."},"value":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Value of the configuration setting, stored as string."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Detailed explanation of the configuration setting's purpose and usage."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the record was last updated."}},"required":["key","created_at","updated_at"],"description":"Retrieve a filtered and paginated list of OAuth server configuration settings. The oauth_server_configs table contains key-value configuration pairs used to control various aspects of the OAuth server's behavior.\n\nThis operation supports advanced filtering by key, value, description, and active status (non-deleted). It also supports pagination and sorting to efficiently handle large numbers of configurations.\n\nSecurity considerations require that only authorized users can access these settings, as exposing configuration details may reveal sensitive system internals.\n\nThe operation integrates with the oauth_server_configs Prisma model, reflecting the full set of fields including created_at, updated_at, and deleted_at timestamps.\n\nRequest parameters should allow partial key matching, exact or partial value filtering, and filtering by deleted or active status.\n\nResponse includes paginated data with summary information about each configuration item."},"IOauthServerRedisCache.ISummary":{"type":"object","properties":{"cache_name":{"type":"string","description":"Name of the Redis cache configuration."},"prefix":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Key prefix used for Redis keys in this cache."},"ttl_seconds":{"type":"integer","format":"int32","description":"Time to live for cache entries, in seconds."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Description of the cache purpose and usage."}},"required":["cache_name","ttl_seconds"],"description":"Retrieve a list of Redis cache configurations with filtering and pagination.\n\nThis operation offers system administrators the ability to query Redis cache settings applied for OAuth token verification caching, user info caching, external API response caching, and client info caching.\n\nResults include detailed cache names, TTL settings, prefixes, and descriptions.\n\nRequest body must specify search filters and pagination options.\n\nThe response provides a paginated list of cache configuration summaries.\n\nAdmin role authorization is required due to sensitive system settings access."},"IOauthServerguests.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the guest user."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the guest user record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the guest user record was last updated."}},"required":["id","created_at","updated_at"],"description":"Summary information for an OAuth server guest user, including unique id and timestamps.\n\nGuest users represent temporary or unauthenticated sessions without credentials.\n\nThis summary type includes minimal data suitable for list views or brief references."},"IOauthServerMember.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the member user."},"email":{"type":"string","format":"email","description":"Email address of the member user, used for login and communication."},"email_verified":{"type":"boolean","description":"Flag indicating whether the member user's email has been verified."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the member account was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the member account was last updated."}},"required":["id","email","email_verified","created_at","updated_at"],"description":"Summary information for an OAuth server member user.\n\nIncludes essential identification and verification status.\n\nSuitable for paginated lists, overviews, and minimal profile views."},"IOauthServerOauthServerAdmins.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the admin user."},"email":{"type":"string","format":"email","description":"Email address of the admin user for authentication and communication."},"email_verified":{"type":"boolean","description":"Flag indicating whether the admin user's email is verified."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the admin account was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the admin account was last updated."}},"required":["id","email","email_verified","created_at","updated_at"],"description":"Summary information for OAuth server administrative users.\n\nIncludes identification and verification flags essential for administration access controls."},"IOauthServerAuthorizationCode.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authorization code record."},"oauth_client_id":{"type":"string","format":"uuid","description":"Identifier of the OAuth client which owns the authorization code."},"code":{"type":"string","description":"The unique authorization code string issued to the client."},"redirect_uri":{"type":"string","description":"The redirect URI associated with the authorization code in the OAuth flow."},"expires_at":{"type":"string","format":"date-time","description":"Expiration timestamp after which the authorization code becomes invalid."}},"required":["id","oauth_client_id","code","redirect_uri","expires_at"],"description":"Summary information for OAuth authorization codes.\n\nProvides minimal fields needed to identify and manage authorization code lifecycle and possession."},"IOauthServerAccessToken.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the access token (UUID format)."},"token":{"type":"string","description":"Opaque access token string used for authorization."},"scope":{"type":"string","description":"Space separated list of OAuth scopes granted."},"expires_at":{"type":"string","format":"date-time","description":"Expiration datetime in ISO 8601 format."}},"required":["id","token","scope","expires_at"],"description":"Access token summary including token string, scopes, and expiration."},"IOauthServerRefreshToken.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the refresh token (UUID)."},"token":{"type":"string","description":"The opaque refresh token string."},"scope":{"type":"string","description":"Space separated scopes granted by the token."},"expires_at":{"type":"string","format":"date-time","description":"Expiration time in ISO 8601 format."}},"required":["id","token","scope","expires_at"],"description":"Refresh token summary with token string, scopes, and expiration."},"IOauthServerIdToken.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique ID token identifier (UUID)."},"token":{"type":"string","description":"Opaque ID token string (JWT or opaque format)."},"expires_at":{"type":"string","format":"date-time","description":"ISO 8601 formatted expiration datetime."}},"required":["id","token","expires_at"],"description":"ID token summary including token string and expiration."},"IOauthServerScope.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the scope (UUID)."},"code":{"type":"string","description":"Unique scope code string defining the scope."},"description":{"type":"string","description":"Descriptive text explaining the scope's permission."}},"required":["id","code","description"],"description":"OAuth scope summary with code and description."},"IOauthServerOauthClient.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the OAuth client entity"},"client_id":{"type":"string","description":"Unique client identifier string used by OAuth clients"},"is_trusted":{"type":"boolean","description":"Indicates if the client is trusted enabling automatic consent"},"logo_uri":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"URI to client logo image; nullable"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp marking when client was deleted; null if active"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when client record was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when client record was last updated"},"client_secret":{"type":"string","description":"Client secret used for authentication"},"redirect_uri":{"type":"string","description":"Redirect URI for OAuth response callbacks"}},"required":["id","client_id","is_trusted","created_at","updated_at"],"description":"Summary information for OAuth clients exposing essential identity and trust state."},"IOauthServerSocialUserLink.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the social user link entity"},"user_id":{"type":"string","format":"uuid","description":"ID of the internal user linked to this social account"},"social_provider_id":{"type":"string","format":"uuid","description":"ID of the external social login provider"},"external_user_id":{"type":"string","description":"Unique user ID provided by the social OAuth provider"},"access_token":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Access token issued by the social provider; nullable"},"refresh_token":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Refresh token issued by the social provider; nullable"},"token_expiry":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Expiration time of the access token; nullable"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this social user link record was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this social user link record was last updated"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp for the record; null if active"}},"required":["id","user_id","social_provider_id","external_user_id","created_at","updated_at"],"description":"Summary info about the mapping between a system user and their linked external social login accounts."},"IOauthServerUserProfiles.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the user profile record"},"user_id":{"type":"string","format":"uuid","description":"User ID this profile belongs to"},"nickname":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"User's display nickname; nullable"},"profile_picture_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"URL of user's profile picture; nullable"},"biography":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"User's biography information; nullable"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the user profile was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the user profile was last updated"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp for the user profile; null if active"}},"required":["id","user_id","created_at","updated_at"],"description":"Summary information for user profiles capturing frequently changing display info."},"IOauthServerUserGameProfile.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the user game profile"},"user_profile_id":{"type":"string","format":"uuid","description":"ID of the user profile to which this game profile belongs"},"platform":{"type":"string","description":"Game platform identifier (e.g., PUBG, League of Legends)"},"player_name":{"type":"string","description":"Player's in-game name or ID"},"season":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Season identifier if applicable; nullable"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the game profile record was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the game profile was last updated"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp for the game profile; null if active"}},"required":["id","user_profile_id","platform","player_name","created_at","updated_at"],"description":"Summary information of user game profiles linked to external game accounts."},"IOauthServerUserPointHistory.ISummary":{"type":"object","properties":{"id":{"type":"string","description":"Unique ID of the user point history."},"change_amount":{"type":"integer","description":"The amount of points changed."},"balance_after_change":{"type":"integer","description":"The user's point balance after the change."},"reason":{"type":"string","description":"Reason for the point change."},"created_at":{"type":"string","format":"date-time","description":"Creation time of the record."}},"required":["id","change_amount","balance_after_change","reason","created_at"],"description":"Summary of a user point history record for list display."},"IOauthServerTokenMonitor.ISummary":{"type":"object","properties":{"id":{"type":"string","description":"Unique token monitor event ID."},"event_type":{"type":"string","description":"Type of event such as validation or expiration."},"event_timestamp":{"type":"string","format":"date-time","description":"Timestamp of the event."},"ip_address":{"type":"string","description":"Origin IP of the event."},"user_agent":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"User agent of the client, optional."}},"required":["id","event_type","event_timestamp","ip_address"],"description":"Summary information for OAuth server token monitor events."},"IOauthServerClientSecretRegeneration.ISummary":{"type":"object","properties":{"id":{"type":"string","description":"Unique ID of the regeneration event."},"oauth_client_id":{"type":"string","description":"ID of OAuth client."},"admin_id":{"type":"string","description":"ID of admin user."},"regenerated_at":{"type":"string","format":"date-time","description":"Timestamp of regeneration."},"reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional reason for regeneration."}},"required":["id","oauth_client_id","admin_id","regenerated_at"],"description":"Summary of a client secret regeneration event."}}}}