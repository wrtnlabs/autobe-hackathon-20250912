import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthAdminJoin } from "../../../providers/postauthAdminJoin";
import { AdminAuth } from "../../../decorators/AdminAuth";
import { AdminPayload } from "../../../decorators/payload/AdminPayload";
import { postauthAdminLogin } from "../../../providers/postauthAdminLogin";
import { postauthAdminRefresh } from "../../../providers/postauthAdminRefresh";

import { IOauthServerAdmin } from "../../../api/structures/IOauthServerAdmin";

@Controller("/auth/admin")
export class AuthAdminController {
  /**
   * Create a new admin user account with JWT authorization using
   * oauth_server_admins table.
   *
   * This join operation for admin users creates a new administrator account
   * with a unique email, hashed password, and an email verified flag. The
   * operation stores data in the oauth_server_admins table and includes audit
   * timestamps and soft delete support. Upon successful registration, the
   * system returns JWT tokens granting admin access rights. Security includes
   * validation of email uniqueness and password hashing. Related operations
   * include login and token refresh for full authentication lifecycle.
   *
   * @param connection
   * @param body Admin user creation request data with email, password, and
   *   verification flag.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IOauthServerAdmin.ICreate,
  ): Promise<IOauthServerAdmin.IAuthorized> {
    try {
      return await postauthAdminJoin({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Authenticate admin user and issue JWT tokens using oauth_server_admins
   * table.
   *
   * Admin user login authenticates credentials stored in the
   * oauth_server_admins table including email and hashed password fields.
   * Successful login returns JWT tokens that provide access rights for admin
   * operations. Security involves safe handling of password verification and
   * token generation. Follow-up operations include token refresh and join for
   * account lifecycle management.
   *
   * @param connection
   * @param body Admin user login request containing email and password.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IOauthServerAdmin.ILogin,
  ): Promise<IOauthServerAdmin.IAuthorized> {
    try {
      return await postauthAdminLogin({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh JWT tokens for admin users using oauth_server_admins table.
   *
   * Refreshes authentication tokens for admin users maintaining session
   * continuity. It validates refresh tokens associated with the
   * oauth_server_admins table. Successfully refreshed tokens grant continued
   * access rights without requiring re-login. Security includes protecting
   * against token replay and expiration errors. This operation supports secure
   * token lifecycle management alongside join and login.
   *
   * @param connection
   * @param body Token refresh request payload with refresh token info.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IOauthServerAdmin.IRefresh,
  ): Promise<IOauthServerAdmin.IAuthorized> {
    try {
      return await postauthAdminRefresh({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
