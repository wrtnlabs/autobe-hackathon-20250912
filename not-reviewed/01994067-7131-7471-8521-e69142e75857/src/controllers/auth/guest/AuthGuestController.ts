import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthGuestJoin } from "../../../providers/postauthGuestJoin";
import { postauthGuestRefresh } from "../../../providers/postauthGuestRefresh";

import { IOauthServerOauthServerGuest } from "../../../api/structures/IOauthServerOauthServerGuest";
import { IOauthServerGuest } from "../../../api/structures/IOauthServerGuest";

@Controller("/auth/guest")
export class AuthGuestController {
  /**
   * Guest user registration creating a temporary unauthenticated session and
   * issuing temporary JWT tokens with no credentials.
   *
   * This operation implements guest user registration creating a new guest
   * account record in the 'oauth_server_guests' table which tracks only
   * creation and update timestamps and supports soft delete via 'deleted_at'.
   * No authentication fields exist as guests do not possess credentials. Tokens
   * issued upon join allow temporary access without login. This endpoint is
   * public as guests are unauthenticated entities. Tokens issued are optimized
   * for ephemeral sessions as guests' access is limited. Related operations
   * include the token refresh endpoint for guests.
   *
   * Clients may use this join API to start a new guest session before
   * proceeding to authenticated workflows or browse limited resources.
   *
   * Soft delete policy applies but guest entries are expected to be temporary.
   *
   * This API operation is essential for temporary, unauthenticated access
   * management in the OAuth server system.
   *
   * @param connection
   * @param body Payload to create a new guest user account entry in the
   *   'oauth_server_guests' table.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: IOauthServerGuest.ICreate,
  ): Promise<IOauthServerOauthServerGuest.IAuthorized> {
    try {
      return await postauthGuestJoin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Guest user refreshes temporary tokens to extend ephemeral sessions without
   * login.
   *
   * Token refresh operation for guests who have temporary access tokens issued
   * after registration but no traditional authentication credentials. The
   * 'oauth_server_guests' table contains no password or email fields,
   * confirming ephemeral access. This endpoint renews tokens based on valid
   * refresh token presented, extending guest sessions temporarily.
   *
   * This process helps maintain lightweight guest access without persistent
   * login.
   *
   * Soft delete field 'deleted_at' applies to guest entries.
   *
   * Refresh tokens and access tokens have short TTLs aligned with guest session
   * management.
   *
   * This API complements the 'join' operation for guests to maintain ephemeral
   * authenticated state safely.
   *
   * Security considerations include strict validation of refresh tokens and
   * expiration.
   *
   * @param connection
   * @param body Refresh token payload to request new tokens for guest user
   *   session.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: IOauthServerGuest.IRefresh,
  ): Promise<IOauthServerOauthServerGuest.IAuthorized> {
    try {
      return await postauthGuestRefresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
