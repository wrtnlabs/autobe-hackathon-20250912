import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthDeveloperJoin } from "../../../providers/postauthDeveloperJoin";
import { postauthDeveloperLogin } from "../../../providers/postauthDeveloperLogin";
import { postauthDeveloperRefresh } from "../../../providers/postauthDeveloperRefresh";

import { IOauthServerDeveloper } from "../../../api/structures/IOauthServerDeveloper";

@Controller("/auth/developer")
export class AuthDeveloperController {
  /**
   * Create a new developer account for OAuth server as defined in
   * oauth_server_developers table.
   *
   * Registers a new developer account using email and password according to the
   * oauth_server_developers schema. This is part of the member kind user
   * system, supporting registration and initial authorization. The operation is
   * public with join authorizationType. It stores hashed passwords as
   * password_hash field. On successful registration,
   * IOauthServerDeveloper.IAuthorized type with access and refresh tokens is
   * returned. Required fields correspond exactly to oauth_server_developers
   * columns relevant to creation.
   *
   * @param connection
   * @param body Required data to create a developer account by registration
   *   API.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: IOauthServerDeveloper.ICreate,
  ): Promise<IOauthServerDeveloper.IAuthorized> {
    try {
      return await postauthDeveloperJoin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Login for developer user according to oauth_server_developers table
   * credentials.
   *
   * Authenticate developer user by verifying email and password against
   * oauth_server_developers schema. On success returns authorized tokens in
   * IOauthServerDeveloper.IAuthorized format. Public endpoint with login
   * authorizationType. It is part of full authentication flow for member kind
   * users.
   *
   * @param connection
   * @param body Login credentials for developer user authentication.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: IOauthServerDeveloper.ILogin,
  ): Promise<IOauthServerDeveloper.IAuthorized> {
    try {
      return await postauthDeveloperLogin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh JWT tokens for developer users to maintain authenticated session.
   *
   * Refresh access and refresh tokens for developer accounts. Validates the
   * refresh token and issues new tokens. Returns
   * IOauthServerDeveloper.IAuthorized type containing new tokens. Only
   * accessible with valid refresh token authorization. Member kind user
   * operation matching oauth_server_developers schema.
   *
   * @param connection
   * @param body Refresh token request payload.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: IOauthServerDeveloper.IRefresh,
  ): Promise<IOauthServerDeveloper.IAuthorized> {
    try {
      return await postauthDeveloperRefresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
