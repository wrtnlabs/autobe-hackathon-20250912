import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthMemberJoin } from "../../../providers/postauthMemberJoin";
import { MemberAuth } from "../../../decorators/MemberAuth";
import { MemberPayload } from "../../../decorators/payload/MemberPayload";
import { postauthMemberLogin } from "../../../providers/postauthMemberLogin";
import { postauthMemberRefresh } from "../../../providers/postauthMemberRefresh";

import { IOauthServerMember } from "../../../api/structures/IOauthServerMember";

@Controller("/auth/member")
export class AuthMemberController {
  /**
   * Register a new member user and issue JWT tokens.
   *
   * This operation allows member users to join/register by providing email and
   * password credentials. It leverages the oauth_server_members table fields
   * such as email, email_verified, and password_hash for user creation and
   * management.
   *
   * The registration process requires validating unique emails, securely
   * hashing passwords, and initializing the email_verified flag.
   *
   * Upon successful registration, JWT access and refresh tokens are issued to
   * authenticate the user for subsequent requests.
   *
   * The operation is public, allowing unauthenticated users to access it for
   * account creation.
   *
   * This operation is part of the authentication workflow alongside login and
   * token refresh operations for member users.
   *
   * @param connection
   * @param body Member registration info including email and password
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IOauthServerMember.ICreate,
  ): Promise<IOauthServerMember.IAuthorized> {
    try {
      return await postauthMemberJoin({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Member user login and JWT token issuance.
   *
   * Authenticates a member user's credentials (email and password) and, upon
   * success, issues JWT access and refresh tokens for authenticated session
   * management.
   *
   * The operation validates the user's email and compares the password hash
   * with the stored value in oauth_server_members.
   *
   * It returns tokens adhering to the IOauthServerMember.IAuthorized response
   * schema.
   *
   * This endpoint is public to allow user authentication before session
   * initiation.
   *
   * It complements the registration and token refresh endpoints in the OAuth
   * authentication lifecycle.
   *
   * @param connection
   * @param body Member login credentials including email and password
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IOauthServerMember.ILogin,
  ): Promise<IOauthServerMember.IAuthorized> {
    try {
      return await postauthMemberLogin({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh JWT tokens for member user.
   *
   * Refreshes JWT tokens for member users by accepting a valid refresh token
   * and issuing new authorization tokens.
   *
   * Ensures the provided refresh token is valid and not revoked.
   *
   * Returns new JWT access and refresh tokens adhering to
   * IOauthServerMember.IAuthorized response schema.
   *
   * This operation maintains secure session continuity.
   *
   * It complements the authentication flow of join and login operations for
   * members.
   *
   * @param connection
   * @param body Refresh token request
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IOauthServerMember.IRefresh,
  ): Promise<IOauthServerMember.IAuthorized> {
    try {
      return await postauthMemberRefresh({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
