import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchoauthServerAdminUserPointsUserPointIdHistories } from "../../../../../providers/patchoauthServerAdminUserPointsUserPointIdHistories";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { getoauthServerAdminUserPointsUserPointIdHistoriesId } from "../../../../../providers/getoauthServerAdminUserPointsUserPointIdHistoriesId";

import { IPageIOauthServerUserPointHistory } from "../../../../../api/structures/IPageIOauthServerUserPointHistory";
import { IOauthServerUserPointHistory } from "../../../../../api/structures/IOauthServerUserPointHistory";

@Controller("/oauthServer/admin/userPoints/:userPointId/histories")
export class OauthserverAdminUserpointsHistoriesController {
  /**
   * List point transaction histories for a user point.
   *
   * Retrieve a filtered and paginated list of point transaction histories for a
   * particular user point balance. This operation helps admins or automated
   * systems monitor and audit point changes including additions and
   * subtractions.
   *
   * Pagination and filtering parameters allow control over the volume and order
   * of results.
   *
   * The response includes summaries of each transaction, such as amount
   * changed, resulting balance, reason for change, and timestamps.
   *
   * This operation requires the user point ID to narrow down the histories and
   * is authorized for administrative roles due to sensitive nature.
   *
   * @param connection
   * @param userPointId Unique identifier of the user point whose transaction
   *   histories are to be retrieved
   * @param body Filter and pagination parameters for user point transaction
   *   histories
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("userPointId")
    userPointId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IOauthServerUserPointHistory.IRequest,
  ): Promise<IPageIOauthServerUserPointHistory.ISummary> {
    try {
      return await patchoauthServerAdminUserPointsUserPointIdHistories({
        admin,
        userPointId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details of a user point transaction history record.
   *
   * Retrieve detailed information of a single point transaction history record
   * pertaining to a user point balance. This is used for audit or investigation
   * of specific point changes.
   *
   * The response includes the change amount, balance after change, reason
   * string, and audit timestamps.
   *
   * Authorization is restricted to users with administrative permissions.
   *
   * This operation requires the unique history record ID to fetch the detailed
   * record.
   *
   * @param connection
   * @param userPointId User point ID to which the history belongs
   * @param id Unique identifier of the point transaction history record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("userPointId")
    userPointId: string & tags.Format<"uuid">,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IOauthServerUserPointHistory> {
    try {
      return await getoauthServerAdminUserPointsUserPointIdHistoriesId({
        admin,
        userPointId,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
