import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postoauthServerAdminUserPoints } from "../../../../providers/postoauthServerAdminUserPoints";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchoauthServerAdminUserPoints } from "../../../../providers/patchoauthServerAdminUserPoints";
import { getoauthServerAdminUserPointsId } from "../../../../providers/getoauthServerAdminUserPointsId";
import { putoauthServerAdminUserPointsId } from "../../../../providers/putoauthServerAdminUserPointsId";
import { deleteoauthServerAdminUserPointsId } from "../../../../providers/deleteoauthServerAdminUserPointsId";

import { IOauthServerUserPoint } from "../../../../api/structures/IOauthServerUserPoint";
import { IPageIOauthServerUserPoint } from "../../../../api/structures/IPageIOauthServerUserPoint";

@Controller("/oauthServer/admin/userPoints")
export class OauthserverAdminUserpointsController {
  /**
   * Create a user point record.
   *
   * Creates a user point record, initializing point balance for a given user.
   *
   * Restricted to admin role due to financial sensitivity.
   *
   * Requires validation that user exists and balance is valid.
   *
   * Supports system integration with point transaction histories and coupon
   * usage.
   *
   * Errors arise from duplicate records or invalid input.
   *
   * @param connection
   * @param body User point creation data including user ID and initial balance
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IOauthServerUserPoint.ICreate,
  ): Promise<IOauthServerUserPoint> {
    try {
      return await postoauthServerAdminUserPoints({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List user points with pagination and filtering.
   *
   * Provides a paginated listing of user point balances with optional filtering
   * criteria. Intended for administrative use due to sensitive financial data.
   *
   * Access control limits this endpoint to admin roles.
   *
   * Supports pagination, filtering, and sorting to facilitate efficient user
   * point management.
   *
   * Relates to user point histories and coupon usage records in the system.
   *
   * Errors include invalid filters or lack of privileges.
   *
   * @param connection
   * @param body Request parameters including pagination and filtering criteria
   *   for user points
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IOauthServerUserPoint.IRequest,
  ): Promise<IPageIOauthServerUserPoint> {
    try {
      return await patchoauthServerAdminUserPoints({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get user point details by id.
   *
   * Returns the detailed user point record for the given id. Includes balance
   * and related metadata.
   *
   * Limited to admin role access due to sensitive data.
   *
   * Handles errors when record does not exist with proper HTTP responses.
   *
   * @param connection
   * @param id Unique identifier of the user point record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IOauthServerUserPoint> {
    try {
      return await getoauthServerAdminUserPointsId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a user point balance record.
   *
   * Update the details of an existing user point balance record in the OAuth
   * server. This operation is responsible for modifying the user's current
   * point balance, an essential part of the system managing point transactions
   * for various usage scenarios like icon purchases or other digital goods.
   *
   * Only authorized users such as administrators or internal systems should
   * perform this update operation to ensure data integrity and security.
   *
   * The oauth_server_user_points table includes the following key fields:
   *
   * - Id: Unique identifier of the user point record
   * - User_id: Reference to the user owning the points (immutable here)
   * - Balance: The current total point balance of the user
   * - Created_at and updated_at: These timestamps represent audit fields
   * - Deleted_at: Soft delete timestamp to mark record as logically deleted
   *
   * This update operation focuses on modifying the balance field while
   * maintaining data consistency and valid audit mechanisms. Proper validation
   * must be enforced to prevent negative balances unless business logic allows
   * it.
   *
   * The operation requires the unique identifier of the user point record and
   * the new balance value. It returns the updated user point record upon
   * success.
   *
   * @param connection
   * @param id Unique identifier of the user point record to update
   * @param body Updated information for the user point balance record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IOauthServerUserPoint.IUpdate,
  ): Promise<IOauthServerUserPoint> {
    try {
      return await putoauthServerAdminUserPointsId({
        admin,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a user point balance record permanently.
   *
   * Delete a user point balance record from the OAuth server database. This
   * action irreversibly removes the record for compliance or cleanup purposes.
   *
   * Ensure that only users with administrator privileges perform this permanent
   * deletion action.
   *
   * The OAuth server schema natively supports soft deletion via deleted_at
   * fields; however, this operation explicitly performs a hard delete to fully
   * remove the record.
   *
   * No additional data is provided or returned.
   *
   * The operation accepts the unique user point record ID as a path parameter.
   *
   * @param connection
   * @param id Unique identifier of the user point record to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteoauthServerAdminUserPointsId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
