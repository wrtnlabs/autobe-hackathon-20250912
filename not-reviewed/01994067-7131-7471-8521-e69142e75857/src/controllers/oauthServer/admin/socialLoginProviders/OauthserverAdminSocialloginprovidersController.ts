import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postoauthServerAdminSocialLoginProviders } from "../../../../providers/postoauthServerAdminSocialLoginProviders";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchoauthServerAdminSocialLoginProviders } from "../../../../providers/patchoauthServerAdminSocialLoginProviders";
import { getoauthServerAdminSocialLoginProvidersId } from "../../../../providers/getoauthServerAdminSocialLoginProvidersId";

import { IOauthServerSocialProviders } from "../../../../api/structures/IOauthServerSocialProviders";
import { IPageIOauthServerSocialProviders } from "../../../../api/structures/IPageIOauthServerSocialProviders";

@Controller("/oauthServer/admin/socialLoginProviders")
export class OauthserverAdminSocialloginprovidersController {
  /**
   * Create a new social login provider configuration.
   *
   * This endpoint allows administrators to add new OAuth social login providers
   * by specifying their client ID, secret, authorization and token endpoints,
   * user info URL, scopes, and activation status.
   *
   * Because this operation affects external authentication flows and includes
   * sensitive credentials, it requires administrator authorization.
   *
   * On success, the newly created provider record is returned with timestamps
   * and identifiers.
   *
   * Clients should ensure the uniqueness of provider_name before creation.
   *
   * @param connection
   * @param body Social login provider creation details
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createSocialLoginProvider(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IOauthServerSocialProviders.ICreate,
  ): Promise<IOauthServerSocialProviders> {
    try {
      return await postoauthServerAdminSocialLoginProviders({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a paginated list of social login providers.
   *
   * Retrieve a filtered and paginated list of social login providers configured
   * in the system.
   *
   * This operation supports advanced search criteria, pagination, and sorting
   * passed through the request body to efficiently browse and manage OAuth
   * social login providers such as Naver, Google, Apple, and others.
   *
   * The oauth_server_social_providers table stores provider configurations
   * including client IDs, secrets, OAuth endpoints, and active status. Because
   * these configurations include sensitive information, this operation requires
   * admin-level authorization.
   *
   * The response includes only active and soft-deleted (if applicable)
   * providers according to filtering and sorting options. This operation is
   * typically used in administrative UIs to manage available social login
   * options.
   *
   * @param connection
   * @param body Search criteria and pagination for social login providers
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexSocialLoginProviders(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IOauthServerSocialProviders.IRequest,
  ): Promise<IPageIOauthServerSocialProviders> {
    try {
      return await patchoauthServerAdminSocialLoginProviders({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed social login provider by ID.
   *
   * Retrieve a specific social login provider configuration by its unique ID.
   *
   * This endpoint returns detailed information including provider name, client
   * credentials, authorization and token URLs, scopes, and active status.
   *
   * Admin-level authorization is required for accessing this sensitive data.
   *
   * If the social provider ID does not exist or is soft deleted, a proper error
   * response should be returned.
   *
   * This is typically used for administrative configuration review and update
   * preparation.
   *
   * @param connection
   * @param id Unique identifier of the social login provider
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async atSocialLoginProvider(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IOauthServerSocialProviders> {
    try {
      return await getoauthServerAdminSocialLoginProvidersId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
