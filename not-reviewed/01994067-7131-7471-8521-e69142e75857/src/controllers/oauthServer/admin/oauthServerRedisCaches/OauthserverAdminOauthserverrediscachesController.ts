import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postoauthServerAdminOauthServerRedisCaches } from "../../../../providers/postoauthServerAdminOauthServerRedisCaches";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchoauthServerAdminOauthServerRedisCaches } from "../../../../providers/patchoauthServerAdminOauthServerRedisCaches";
import { getoauthServerAdminOauthServerRedisCachesId } from "../../../../providers/getoauthServerAdminOauthServerRedisCachesId";
import { putoauthServerAdminOauthServerRedisCachesId } from "../../../../providers/putoauthServerAdminOauthServerRedisCachesId";
import { deleteoauthServerAdminOauthServerRedisCachesId } from "../../../../providers/deleteoauthServerAdminOauthServerRedisCachesId";

import { IOauthServerRedisCache } from "../../../../api/structures/IOauthServerRedisCache";
import { IPageIOauthServerRedisCache } from "../../../../api/structures/IPageIOauthServerRedisCache";
import { IOauthServerredisServerRedisCaches } from "../../../../api/structures/IOauthServerredisServerRedisCaches";

@Controller("/oauthServer/admin/oauthServerRedisCaches")
export class OauthserverAdminOauthserverrediscachesController {
  /**
   * Create Redis cache configuration.
   *
   * Create a new Redis cache configuration for OAuth server.
   *
   * Administrators can add new cache configurations specifying cache names, TTL
   * durations, key prefixes, and usage descriptions.
   *
   * This allows flexible and performant caching strategies in Redis for various
   * OAuth server data.
   *
   * Proper validation ensures unique cache names and valid TTL values.
   *
   * The created cache record is returned with full details.
   *
   * Authorization with admin role is mandatory.
   *
   * @param connection
   * @param body Creation info of the Redis cache configuration
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IOauthServerRedisCache.ICreate,
  ): Promise<IOauthServerRedisCache> {
    try {
      return await postoauthServerAdminOauthServerRedisCaches({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List Redis cache configurations with filters and pagination.
   *
   * Retrieve a list of Redis cache configurations with filtering and
   * pagination.
   *
   * This operation offers system administrators the ability to query Redis
   * cache settings applied for OAuth token verification caching, user info
   * caching, external API response caching, and client info caching.
   *
   * Results include detailed cache names, TTL settings, prefixes, and
   * descriptions.
   *
   * Request body must specify search filters and pagination options.
   *
   * The response provides a paginated list of cache configuration summaries.
   *
   * Admin role authorization is required due to sensitive system settings
   * access.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for Redis cache
   *   configurations
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IOauthServerRedisCache.IRequest,
  ): Promise<IPageIOauthServerRedisCache.ISummary> {
    try {
      return await patchoauthServerAdminOauthServerRedisCaches({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get Redis cache configuration detail by id.
   *
   * Retrieve detailed Redis cache configuration by unique ID.
   *
   * This operation allows administrators to view full configuration details of
   * a Redis cache used within the OAuth server system.
   *
   * It corresponds to the OAuth server Redis cache table with fields describing
   * TTL values, key prefixes, and usage descriptions.
   *
   * The exact cache configuration is identified by the UUID provided as path
   * parameter.
   *
   * Ownership and permission restrictions ensure that only authorized admin
   * users can access this data.
   *
   * @param connection
   * @param id Unique identifier of the Redis cache configuration to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IOauthServerRedisCache> {
    try {
      return await getoauthServerAdminOauthServerRedisCachesId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update Redis cache configuration by ID in oauth_server_redis_caches.
   *
   * Update an existing Redis cache configuration by ID in the OAuth Server
   * system.
   *
   * This operation modifies the properties like cache_name, prefix,
   * ttl_seconds, and description to adjust caching behavior for token
   * validation, user info caching, and external API result caching.
   *
   * Security considerations include ensuring authorized access for updating
   * cache configurations to avoid caching inconsistencies or stale data.
   *
   * It relates directly to the oauth_server_redis_caches table which stores
   * settings for Redis caching.
   *
   * Validation rules require the ID to be a valid UUID and the updated fields
   * to respect constraints like TTL positivity.
   *
   * This operation complements the create and delete endpoints for Redis cache
   * management.
   *
   * It returns the updated Redis cache entity as confirmation of successful
   * modification.
   *
   * @param connection
   * @param id UUID of the Redis cache configuration to update
   * @param body Updated Redis cache configuration data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async updateRedisCacheConfig(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IOauthServerredisServerRedisCaches.IUpdate,
  ): Promise<IOauthServerredisServerRedisCaches> {
    try {
      return await putoauthServerAdminOauthServerRedisCachesId({
        admin,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete Redis cache configuration by ID in oauth_server_redis_caches.
   *
   * Soft delete a Redis cache configuration by ID in the OAuth Server system.
   *
   * This sets the deleted_at timestamp, disabling the cache configuration from
   * further use while retaining the record for auditing.
   *
   * Only users with admin role are authorized to perform this operation due to
   * its impact on caching behavior.
   *
   * This endpoint interacts with the oauth_server_redis_caches table that
   * manages Redis caching settings.
   *
   * Deletion is logical, preserving the data but marking it as inactive.
   *
   * No content is returned upon success.
   *
   * @param connection
   * @param id UUID of the Redis cache configuration to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async eraseRedisCacheConfig(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteoauthServerAdminOauthServerRedisCachesId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
