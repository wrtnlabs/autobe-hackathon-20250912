import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchoauthServerAdminOauthServerGuests } from "../../../../providers/patchoauthServerAdminOauthServerGuests";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getoauthServerAdminOauthServerGuestsId } from "../../../../providers/getoauthServerAdminOauthServerGuestsId";

import { IPageIOauthServerguests } from "../../../../api/structures/IPageIOauthServerguests";
import { IOauthServerguests } from "../../../../api/structures/IOauthServerguests";

@Controller("/oauthServer/admin/oauthServerGuests")
export class OauthserverAdminOauthserverguestsController {
  /**
   * Search guest accounts with pagination and filtering.
   *
   * Search and retrieve paginated list of guest user accounts.
   *
   * Guests represent unauthenticated users able to browse limited information
   * or start authentication processes.
   *
   * The list can be filtered by creation and modification times, and sorted
   * accordingly.
   *
   * No sensitive personal information is exposed in the guest records.
   *
   * Access may be public or restricted depending on system policies.
   *
   * Related endpoints include get by ID and potential create operations.
   *
   * Response data includes paginated guest account summaries for efficient UI
   * consumption.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for guest account
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexGuests(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IOauthServerguests.IRequest,
  ): Promise<IPageIOauthServerguests.ISummary> {
    try {
      return await patchoauthServerAdminOauthServerGuests({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve guest account details by ID.
   *
   * Get detailed information of a guest user account by ID.
   *
   * Guests are unauthenticated users primarily tracked for audit or system
   * purposes.
   *
   * This operation includes timestamps for record lifecycle and soft deletion
   * status.
   *
   * Access is restricted to admins to maintain security and privacy.
   *
   * It is useful for admin auditing or support tasks.
   *
   * Returns the full guest user entity for the given UUID.
   *
   * @param connection
   * @param id UUID of the guest account
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async atGuest(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IOauthServerguests> {
    try {
      return await getoauthServerAdminOauthServerGuestsId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
