import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postoauthServerAdminOauthServerClientSecretRegenerations } from "../../../../providers/postoauthServerAdminOauthServerClientSecretRegenerations";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchoauthServerAdminOauthServerClientSecretRegenerations } from "../../../../providers/patchoauthServerAdminOauthServerClientSecretRegenerations";
import { getoauthServerAdminOauthServerClientSecretRegenerationsId } from "../../../../providers/getoauthServerAdminOauthServerClientSecretRegenerationsId";
import { putoauthServerAdminOauthServerClientSecretRegenerationsId } from "../../../../providers/putoauthServerAdminOauthServerClientSecretRegenerationsId";
import { deleteoauthServerAdminOauthServerClientSecretRegenerationsId } from "../../../../providers/deleteoauthServerAdminOauthServerClientSecretRegenerationsId";

import { IOauthServerClientSecretRegeneration } from "../../../../api/structures/IOauthServerClientSecretRegeneration";
import { IPageIOauthServerClientSecretRegeneration } from "../../../../api/structures/IPageIOauthServerClientSecretRegeneration";

@Controller("/oauthServer/admin/oauthServerClientSecretRegenerations")
export class OauthserverAdminOauthserverclientsecretregenerationsController {
  /**
   * Create a client secret regeneration record.
   *
   * This POST operation creates a new client secret regeneration event,
   * recording which client secret was regenerated, the admin responsible, and
   * the reason.
   *
   * Creating a client secret regeneration log is essential for tracking changes
   * to client credentials, ensuring traceability and security.
   *
   * The request body must include the details of the regeneration event. The
   * operation provides the created record in the response.
   *
   * This operation is restricted to admin users to prevent unauthorized audit
   * log creation.
   *
   * @param connection
   * @param body Information about the client secret regeneration to create
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IOauthServerClientSecretRegeneration.ICreate,
  ): Promise<IOauthServerClientSecretRegeneration> {
    try {
      return await postoauthServerAdminOauthServerClientSecretRegenerations({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List OAuth server client secret regeneration records.
   *
   * This PATCH operation retrieves a list of client secret regeneration records
   * with pagination, filtering, and sorting.
   *
   * Client secret regenerations document each time a client secret is changed,
   * capturing the admin who performed the regeneration, the time, and optional
   * reason. This historical record supports security auditing and compliance
   * requirements.
   *
   * The list supports pagination parameters and optional filters such as admin
   * ID or client ID. The response includes summary information of each
   * regeneration event.
   *
   * This operation typically requires admin-level authorization to access
   * confidential security audit data.
   *
   * @param connection
   * @param body Filter and pagination parameters for listing client secret
   *   regenerations
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IOauthServerClientSecretRegeneration.IRequest,
  ): Promise<IPageIOauthServerClientSecretRegeneration.ISummary> {
    try {
      return await patchoauthServerAdminOauthServerClientSecretRegenerations({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed client secret regeneration record by ID.
   *
   * This GET operation fetches detailed information for a client secret
   * regeneration record identified by its unique ID.
   *
   * Client secret regeneration logs store historical data on when and why a
   * client's secret was regenerated and by whom. Detailed access is restricted
   * to authorized admins.
   *
   * The detailed record includes timestamps, reason for regeneration, and
   * references to the associated client and admin user.
   *
   * Errors will be returned if the specified ID does not exist or if access is
   * unauthorized.
   *
   * @param connection
   * @param id Unique identifier of the client secret regeneration record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IOauthServerClientSecretRegeneration> {
    try {
      return await getoauthServerAdminOauthServerClientSecretRegenerationsId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a client secret regeneration record.
   *
   * Update details of a client secret regeneration record for the OAuth server.
   *
   * This operation allows administrative users to modify recorded information
   * such as the reason for regeneration. It deals with the
   * oauth_server_client_secret_regenerations entity, which documents every
   * instance of client secret changes for OAuth clients.
   *
   * Security considerations limit access to admin roles only to protect audit
   * integrity.
   *
   * The record includes references to the OAuth client and the administrator
   * who performed the operation, with timestamps and soft deletion support.
   *
   * Validation ensures the record ID provided is a valid UUID corresponding to
   * an existing record.
   *
   * Related operations include deletion of secret regeneration records and
   * listing regeneration history.
   *
   * Error handling covers invalid IDs, unauthorized access, and schema
   * validation failures.
   *
   * @param connection
   * @param id The unique identifier of the client secret regeneration record to
   *   update
   * @param body Update information of the client secret regeneration record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async updateSecretRegenerationRecord(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IOauthServerClientSecretRegeneration.IUpdate,
  ): Promise<IOauthServerClientSecretRegeneration> {
    try {
      return await putoauthServerAdminOauthServerClientSecretRegenerationsId({
        admin,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a client secret regeneration record.
   *
   * Erase a client secret regeneration record from the OAuth server.
   *
   * This operation permanently removes the specified regeneration record by its
   * unique identifier.
   *
   * The record tracks client secret changes associated with OAuth clients and
   * administrators.
   *
   * Only admin users are authorized to execute this operation to maintain
   * security standards.
   *
   * Validation on the record ID ensures only valid UUIDs are processed.
   *
   * Related operations include listing and updating regeneration records.
   *
   * Error handling includes invalid ID format and unauthorized access
   * rejection.
   *
   * This performs a hard delete with no recovery option.
   *
   * @param connection
   * @param id The unique identifier of the client secret regeneration record to
   *   delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async eraseSecretRegenerationRecord(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteoauthServerAdminOauthServerClientSecretRegenerationsId(
        {
          admin,
          id,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
