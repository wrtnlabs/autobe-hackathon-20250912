import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getoauthServerAdminPointCouponsId } from "../../../../providers/getoauthServerAdminPointCouponsId";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { putoauthServerAdminPointCouponsId } from "../../../../providers/putoauthServerAdminPointCouponsId";
import { deleteoauthServerAdminPointCouponsId } from "../../../../providers/deleteoauthServerAdminPointCouponsId";
import { postoauthServerAdminPointCoupons } from "../../../../providers/postoauthServerAdminPointCoupons";

import { IOauthServerPointCoupon } from "../../../../api/structures/IOauthServerPointCoupon";

@Controller("/oauthServer/admin/pointCoupons")
export class OauthserverAdminPointcouponsController {
  /**
   * Retrieve details of a specific point coupon by ID.
   *
   * Retrieve detailed information about a point coupon identified by its unique
   * ID. This operation accesses the PointCoupon entity, which represents coupon
   * codes used for granting points to users. The entity includes fields such as
   * unique code, description, value, usage limits, expiration date, and audit
   * tracking timestamps.
   *
   * This operation requires administrative or developer permissions to access
   * sensitive coupon data. It ensures that the requesting user is authorized to
   * view point coupon details.
   *
   * The response includes all cached and up-to-date coupon metadata as stored
   * in the database. Proper error handling is expected for invalid or
   * non-existent coupon IDs.
   *
   * @param connection
   * @param id Unique identifier of the point coupon
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IOauthServerPointCoupon> {
    try {
      return await getoauthServerAdminPointCouponsId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update details of an existing point coupon.
   *
   * Update an existing point coupon's details by ID. This operation modifies
   * coupon properties including code, description, point value, max issuance
   * count, and expiration date.
   *
   * Administrative authorization is required to make changes to ensure
   * controlled promotional campaign management.
   *
   * The updated coupon entity with current timestamps is returned in the
   * response. Proper error handling is expected for invalid IDs or input.
   *
   * @param connection
   * @param id Unique identifier of the point coupon to update
   * @param body Point coupon update data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IOauthServerPointCoupon.IUpdate,
  ): Promise<IOauthServerPointCoupon> {
    try {
      return await putoauthServerAdminPointCouponsId({
        admin,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a point coupon by ID.
   *
   * Soft delete a point coupon by marking its deletedAt timestamp. This
   * operation restricts physical removal to maintain historical data for audit
   * and compliance purposes.
   *
   * Access is limited to administrators to prevent unauthorized removal of
   * coupons.
   *
   * Successful operation returns no content and removes the coupon from active
   * usage.
   *
   * @param connection
   * @param id Unique identifier of the point coupon to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteoauthServerAdminPointCouponsId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create a new point coupon record.
   *
   * Create a new point coupon used for granting points to users. The coupon
   * includes properties such as a unique code, description, point value,
   * maximum issuance limit, and expiration date.
   *
   * This operation enables administrators to define new promotions or reward
   * coupons which users can redeem for points. Validation ensures coupon code
   * uniqueness and the validity of expiration dates.
   *
   * The created coupon's full detail, including timestamps, is returned in the
   * response upon success.
   *
   * @param connection
   * @param body Data for creating a new point coupon
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IOauthServerPointCoupon.ICreate,
  ): Promise<IOauthServerPointCoupon> {
    try {
      return await postoauthServerAdminPointCoupons({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
