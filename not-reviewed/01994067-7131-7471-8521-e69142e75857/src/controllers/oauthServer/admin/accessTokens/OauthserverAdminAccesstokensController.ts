import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postoauthServerAdminAccessTokens } from "../../../../providers/postoauthServerAdminAccessTokens";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchoauthServerAdminAccessTokens } from "../../../../providers/patchoauthServerAdminAccessTokens";
import { getoauthServerAdminAccessTokensId } from "../../../../providers/getoauthServerAdminAccessTokensId";
import { putoauthServerAdminAccessTokensId } from "../../../../providers/putoauthServerAdminAccessTokensId";
import { deleteoauthServerAdminAccessTokensId } from "../../../../providers/deleteoauthServerAdminAccessTokensId";

import { IOauthServerAccessToken } from "../../../../api/structures/IOauthServerAccessToken";
import { IPageIOauthServerAccessToken } from "../../../../api/structures/IPageIOauthServerAccessToken";

@Controller("/oauthServer/admin/accessTokens")
export class OauthserverAdminAccesstokensController {
  /**
   * Create a new OAuth access token in the system. This endpoint accepts token
   * details such as the opaque token string, scope string, expiration
   * timestamp, and references to the OAuth client and authorization code.
   *
   * Security considerations include validating the client permissions and
   * ensuring token generation follows secure practices.
   *
   * The request body must comply with the IOauthServerAccessToken.ICreate
   * structure, encapsulating all required creation fields.
   *
   * Upon successful creation, the detailed OAuth access token entity is
   * returned.
   *
   * Errors related to duplicate tokens or invalid references are to be handled
   * gracefully.
   *
   * @param connection
   * @param body Information to create a new OAuth access token
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IOauthServerAccessToken.ICreate,
  ): Promise<IOauthServerAccessToken> {
    try {
      return await postoauthServerAdminAccessTokens({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search OAuth access tokens with filtering and pagination.
   *
   * Provides a filtered and paginated list of OAuth access tokens stored in the
   * system. Allows administrators to search based on client IDs, scopes,
   * expiration, and issuance dates.
   *
   * The response includes tokens summary information optimized for monitoring
   * active tokens and auditing.
   *
   * Access is restricted to administrative roles to protect sensitive security
   * information.
   *
   * Proper validation of search parameters ensures efficient data retrieval and
   * response accuracy.
   *
   * This facilitates operational oversight and token lifecycle management.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for access tokens
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IOauthServerAccessToken.IRequest,
  ): Promise<IPageIOauthServerAccessToken.ISummary> {
    try {
      return await patchoauthServerAdminAccessTokens({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a specific OAuth access token by ID.
   *
   * Retrieve detailed information of a single OAuth access token by its unique
   * ID. This operation queries the oauth_server_access_tokens database entity,
   * returning comprehensive token details including the opaque token string,
   * scopes granted, expiration date, and associated authorization context.
   *
   * Security and access control must ensure that only authorized roles or
   * systems can query sensitive token information.
   *
   * This operation is crucial for audits, token validation in token revocation
   * workflows, and administrative monitoring.
   *
   * Input validation must enforce correct UUID formatting for the token ID path
   * parameter.
   *
   * Errors returned will indicate non-existence or lack of permission.
   *
   * @param connection
   * @param id Unique identifier of the OAuth access token
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IOauthServerAccessToken> {
    try {
      return await getoauthServerAdminAccessTokensId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing OAuth access token identified by its unique ID. The
   * request body must conform to IOauthServerAccessToken.IUpdate schema with
   * fields to modify.
   *
   * Security enforcement ensures only authorized roles may perform token
   * updates.
   *
   * Invalid token IDs or malformed update data will produce errors.
   *
   * The updated OAuth access token entity is returned upon success.
   *
   * @param connection
   * @param id Unique identifier of the OAuth access token to update
   * @param body OAuth access token update information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IOauthServerAccessToken.IUpdate,
  ): Promise<IOauthServerAccessToken> {
    try {
      return await putoauthServerAdminAccessTokensId({
        admin,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete an OAuth access token by ID.
   *
   * Permanently delete an OAuth access token from the system by its unique ID.
   * This operation performs a hard delete, removing the token record entirely
   * and irreversibly.
   *
   * Authorization checks ensure only administrators or authorized services can
   * perform this operation.
   *
   * No request body is required.
   *
   * Response success indicates removal; failure reflects invalid ID or
   * permission issues.
   *
   * Use with caution as deleted tokens cannot be recovered.
   *
   * @param connection
   * @param id Unique identifier of the OAuth access token to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteoauthServerAdminAccessTokensId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
