import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { deleteoauthServerAdminOauthServerMembersId } from "../../../../providers/deleteoauthServerAdminOauthServerMembersId";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";

@Controller("/oauthServer/admin/oauthServerMembers/:id")
export class OauthserverAdminOauthservermembersController {
  /**
   * Delete an OAuth member by ID (hard delete).
   *
   * Permanently delete an OAuth server member by their unique ID.
   *
   * This operation performs a hard delete, removing all associated data from
   * the database.
   *
   * Only administrators are authorized to execute this operation.
   *
   * Soft delete is supported generally but this endpoint enforces permanent
   * deletion.
   *
   * Failure to locate the member results in appropriate error codes.
   *
   * Complementary to CRUD operations on OAuth server members.
   *
   * @param connection
   * @param id Unique identifier of the member to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteoauthServerAdminOauthServerMembersId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
