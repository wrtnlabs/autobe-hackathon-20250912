import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postoauthServerAdminOauthServerAdminNotifications } from "../../../../providers/postoauthServerAdminOauthServerAdminNotifications";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchoauthServerAdminOauthServerAdminNotifications } from "../../../../providers/patchoauthServerAdminOauthServerAdminNotifications";
import { getoauthServerAdminOauthServerAdminNotificationsId } from "../../../../providers/getoauthServerAdminOauthServerAdminNotificationsId";
import { putoauthServerAdminOauthServerAdminNotificationsId } from "../../../../providers/putoauthServerAdminOauthServerAdminNotificationsId";
import { deleteoauthServerAdminOauthServerAdminNotificationsId } from "../../../../providers/deleteoauthServerAdminOauthServerAdminNotificationsId";

import { IOauthServerAdminNotification } from "../../../../api/structures/IOauthServerAdminNotification";
import { IPageIOauthServerAdminNotification } from "../../../../api/structures/IPageIOauthServerAdminNotification";

@Controller("/oauthServer/admin/oauthServerAdminNotifications")
export class OauthserverAdminOauthserveradminnotificationsController {
  /**
   * Create a new admin notification in oauth_server_admin_notifications.
   *
   * Create a new admin notification for the OAuth server.
   *
   * This endpoint allows authenticated administrators to create a new
   * notification message for other administrators. The request body must
   * provide the admin ID to which the notification is addressed, the title and
   * content of the notification, and the read/unread status.
   *
   * The operation inserts a new record into the
   * oauth_server_admin_notifications table in the Prisma schema, initializing
   * audit timestamps automatically.
   *
   * Security is enforced by restricting access to admin users only.
   *
   * Upon successful creation, the newly created notification entity is
   * returned.
   *
   * @param connection
   * @param body Information needed to create an admin notification
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IOauthServerAdminNotification.ICreate,
  ): Promise<IOauthServerAdminNotification> {
    try {
      return await postoauthServerAdminOauthServerAdminNotifications({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List and filter admin notifications with pagination.
   *
   * Retrieve a filtered and paginated list of admin notifications.
   *
   * This operation gives authorized admins access to their notification alerts
   * with read status and timestamps.
   *
   * Filters and pagination options help manage large numbers of notifications.
   *
   * Only users with admin role should access this resource.
   *
   * The response delivers paginated notification data suited for display in
   * admin dashboards.
   *
   * @param connection
   * @param body Search and pagination criteria for admin notifications
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IOauthServerAdminNotification.IRequest,
  ): Promise<IPageIOauthServerAdminNotification> {
    try {
      return await patchoauthServerAdminOauthServerAdminNotifications({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details of a specific admin notification in
   * oauth_server_admin_notifications.
   *
   * Retrieve an individual administrative notification for OAuth server
   * administrators.
   *
   * This operation allows an authenticated admin to fetch detailed information
   * about a single notification by specifying its unique ID in the path
   * parameter. It returns the notification's title, message content, read
   * status, and audit timestamps.
   *
   * Security considerations restrict this endpoint to users with admin
   * privileges only, ensuring sensitive admin notices are protected.
   *
   * The operation interacts with the oauth_server_admin_notifications table
   * defined in the Prisma schema, utilizing ID-based lookup.
   *
   * If the notification does not exist or is soft deleted, an appropriate error
   * response should be returned.
   *
   * No request body is required as this is a read operation.
   *
   * The response provides a full representation of the notification entity.
   *
   * @param connection
   * @param id Unique identifier of the target admin notification
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IOauthServerAdminNotification> {
    try {
      return await getoauthServerAdminOauthServerAdminNotificationsId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific admin notification in oauth_server_admin_notifications.
   *
   * Update an existing admin notification for OAuth server administrators.
   *
   * Administrators can modify the title, message content, and read status of a
   * notification by specifying its ID and providing updated data in the request
   * body.
   *
   * The operation updates the record in the oauth_server_admin_notifications
   * table in the Prisma schema, refreshing the updated_at timestamp.
   *
   * Only authenticated admin users may perform this operation.
   *
   * This operation does not alter creation timestamps or soft delete status.
   *
   * Returns the updated notification entity after successful modification.
   *
   * @param connection
   * @param id Unique identifier of the admin notification to update
   * @param body Updated data for the admin notification
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IOauthServerAdminNotification.IUpdate,
  ): Promise<IOauthServerAdminNotification> {
    try {
      return await putoauthServerAdminOauthServerAdminNotificationsId({
        admin,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a specific admin notification in
   * oauth_server_admin_notifications.
   *
   * Soft delete an admin notification, marking it as deleted in the system.
   *
   * This operation allows authenticated admin users to delete a notification by
   * setting its deleted_at timestamp, effectively removing it from active
   * queries.
   *
   * The notification remains in the database for audit purposes.
   *
   * Access control restricts this action to admin users.
   *
   * No request body is required.
   *
   * No response body is returned upon success.
   *
   * @param connection
   * @param id Unique identifier of the admin notification to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteoauthServerAdminOauthServerAdminNotificationsId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
