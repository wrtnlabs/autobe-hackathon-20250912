import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchoauthServerAdminOauthServerAuditLogs } from "../../../../providers/patchoauthServerAdminOauthServerAuditLogs";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getoauthServerAdminOauthServerAuditLogsId } from "../../../../providers/getoauthServerAdminOauthServerAuditLogsId";

import { IPageIOauthServerAuditLog } from "../../../../api/structures/IPageIOauthServerAuditLog";
import { IOauthServerAuditLog } from "../../../../api/structures/IOauthServerAuditLog";

@Controller("/oauthServer/admin/oauthServerAuditLogs")
export class OauthserverAdminOauthserverauditlogsController {
  /**
   * Search OAuth server audit logs with filtering and pagination.
   *
   * Retrieve a filtered and paginated list of OAuth server audit logs.
   *
   * The audit logs contain security and operational events for authentication,
   * token issuance, client management, and system activities.
   *
   * Clients can search by event_type, time ranges, actor_id, and other
   * criteria.
   *
   * Only users with admin role have access to audit log data due to
   * sensitivity.
   *
   * The response provides paginated detailed audit log entries with essential
   * fields.
   *
   * Security measures ensure sensitive data is not exposed.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for audit logs
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IOauthServerAuditLog.IRequest,
  ): Promise<IPageIOauthServerAuditLog> {
    try {
      return await patchoauthServerAdminOauthServerAuditLogs({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get OAuth server audit log by ID.
   *
   * Retrieve detailed information of a single OAuth server audit log entry by
   * its ID.
   *
   * This operation returns full event details for security monitoring and
   * auditing.
   *
   * Only authorized admin users may access this endpoint.
   *
   * The response includes all relevant fields of the audit log record.
   *
   * Errors are returned if the ID is invalid or record not found.
   *
   * @param connection
   * @param id Unique identifier of the audit log entry
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IOauthServerAuditLog> {
    try {
      return await getoauthServerAdminOauthServerAuditLogsId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
