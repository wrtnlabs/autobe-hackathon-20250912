import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postoauthServerAdminUserPointCoupons } from "../../../../providers/postoauthServerAdminUserPointCoupons";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchoauthServerAdminUserPointCoupons } from "../../../../providers/patchoauthServerAdminUserPointCoupons";
import { getoauthServerAdminUserPointCouponsId } from "../../../../providers/getoauthServerAdminUserPointCouponsId";
import { putoauthServerAdminUserPointCouponsId } from "../../../../providers/putoauthServerAdminUserPointCouponsId";
import { deleteoauthServerAdminUserPointCouponsId } from "../../../../providers/deleteoauthServerAdminUserPointCouponsId";

import { IOauthServerUserPointCoupon } from "../../../../api/structures/IOauthServerUserPointCoupon";
import { IPageIOauthServerUserPointCoupon } from "../../../../api/structures/IPageIOauthServerUserPointCoupon";

@Controller("/oauthServer/admin/userPointCoupons")
export class OauthserverAdminUserpointcouponsController {
  /**
   * Create a new user point coupon usage record to represent coupon redemption
   * by a user.
   *
   * This endpoint accepts user ID, coupon ID, and usage time, validates
   * business rules such as coupon validity and user eligibility, then records
   * the usage event and updates related point balances.
   *
   * Access is restricted to administrators to maintain integrity.
   *
   * Successful creation returns the newly created usage record with all audit
   * information.
   *
   * @param connection
   * @param body User point coupon usage creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IOauthServerUserPointCoupon.ICreate,
  ): Promise<IOauthServerUserPointCoupon> {
    try {
      return await postoauthServerAdminUserPointCoupons({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a paginated list of user point coupon usage records.
   *
   * Retrieve a filtered and paginated list of user point coupon usage entries.
   *
   * This operation allows clients to query the oauth_server_user_point_coupons
   * table records with support for various search, filter, and pagination
   * parameters to facilitate efficient retrieval of user's coupon usage
   * history.
   *
   * Security considerations include restricting access to authenticated roles
   * with appropriate permissions to view user payment and coupon histories.
   *
   * This operation connects to the oauth_server_user_point_coupons relational
   * table which links users with point coupons redeemed. It supports retrieving
   * related user and coupon linked data through foreign keys.
   *
   * Expected behaviors include paginated responses, validation of request
   * parameters, and error handling for unauthorized or malformed requests.
   *
   * No request body is needed for this read operation except complex filtering
   * handled via the PATCH method request body.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for filtering user
   *   point coupons
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IOauthServerUserPointCoupon.IRequest,
  ): Promise<IPageIOauthServerUserPointCoupon> {
    try {
      return await patchoauthServerAdminUserPointCoupons({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific user point coupon usage record by ID.
   *
   * Retrieve detailed information for a specific user point coupon usage record
   * by its unique identifier.
   *
   * Access control is critical to protect user financial data; this operation
   * restricts access to administrators.
   *
   * The underlying data includes user ID, coupon ID, usage timestamp, creation
   * and update times, and soft deletion timestamp.
   *
   * Proper error handling for non-existent IDs and authorization is
   * implemented.
   *
   * This endpoint is a straightforward retrieval of the user point coupon usage
   * entity record.
   *
   * @param connection
   * @param id Unique identifier of the user point coupon usage record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IOauthServerUserPointCoupon> {
    try {
      return await getoauthServerAdminUserPointCouponsId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing user point coupon usage record by unique ID.
   *
   * Allows modification of coupon usage details with validations to ensure
   * integrity.
   *
   * Restricted to admin roles only for security and audit compliance.
   *
   * Returns the updated user point coupon usage record after changes.
   *
   * @param connection
   * @param id Unique identifier of the user point coupon usage record to update
   * @param body User point coupon usage update data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IOauthServerUserPointCoupon.IUpdate,
  ): Promise<IOauthServerUserPointCoupon> {
    try {
      return await putoauthServerAdminUserPointCouponsId({
        admin,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete user point coupon by ID.
   *
   * Permanently deletes a user point coupon record identified by the 'id' path
   * parameter.
   *
   * This operation targets the oauth_server_user_point_coupons table, which
   * tracks the association between users and point coupons they have redeemed.
   *
   * Only authorized users with 'admin' role can perform this action to prevent
   * unauthorized data loss.
   *
   * No request body is required. The response body is empty upon successful
   * deletion.
   *
   * Error handling includes validation of existence of the ID and permission
   * checks.
   *
   * @param connection
   * @param id Unique identifier of the user point coupon to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteoauthServerAdminUserPointCouponsId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
