import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { putoauthServerAdminIdTokensId } from "../../../../providers/putoauthServerAdminIdTokensId";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { deleteoauthServerAdminIdTokensId } from "../../../../providers/deleteoauthServerAdminIdTokensId";

import { IOauthServerIdToken } from "../../../../api/structures/IOauthServerIdToken";

@Controller("/oauthServer/admin/idTokens/:id")
export class OauthserverAdminIdtokensController {
  /**
   * Update an existing ID token record in oauth_server_id_tokens.
   *
   * Update an existing opaque OpenID Connect ID token record in the system.
   * This endpoint enables modification of the token string and expiration
   * timestamp to reflect renewed or refreshed token data.
   *
   * Authorization is required as only authorized users like admins or relevant
   * system components should update ID token data.
   *
   * The ID token record belongs to an OAuth client and is optionally linked to
   * an authorization code, representing a critical component in the OAuth token
   * flow.
   *
   * Only valid existing token entries can be updated; attempts to update
   * non-existent tokens must be handled with proper error responses.
   *
   * The response returns the updated ID token record for confirmation.
   *
   * @param connection
   * @param id Unique identifier of the ID token to update
   * @param body Update data for the ID token, including new token string and
   *   expiration date
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IOauthServerIdToken.IUpdate,
  ): Promise<IOauthServerIdToken> {
    try {
      return await putoauthServerAdminIdTokensId({
        admin,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete an ID token record permanently from oauth_server_id_tokens.
   *
   * Remove an existing ID token record permanently from the system. This
   * endpoint deletes the record identified by the unique ID.
   *
   * This is a hard delete operation, meaning the record is completely removed
   * and cannot be recovered.
   *
   * Since the table schema includes a soft delete column deleted_at, this
   * operation intentionally bypasses soft delete for permanent removal.
   *
   * Authorization is restricted to admin users to prevent unauthorized token
   * manipulation.
   *
   * No response body is returned upon success.
   *
   * @param connection
   * @param id Unique identifier of the ID token to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteoauthServerAdminIdTokensId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
