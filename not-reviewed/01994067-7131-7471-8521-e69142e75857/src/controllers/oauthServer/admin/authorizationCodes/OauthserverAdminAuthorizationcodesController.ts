import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { putoauthServerAdminAuthorizationCodesId } from "../../../../providers/putoauthServerAdminAuthorizationCodesId";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { deleteoauthServerAdminAuthorizationCodesId } from "../../../../providers/deleteoauthServerAdminAuthorizationCodesId";

import { IOauthServerAuthorizationCode } from "../../../../api/structures/IOauthServerAuthorizationCode";

@Controller("/oauthServer/admin/authorizationCodes/:id")
export class OauthserverAdminAuthorizationcodesController {
  /**
   * Update an existing OAuth authorization code record by ID.
   *
   * Updates the OAuth authorization code record identified by the given ID.
   * Allows changes to mutable fields such as redirect URI and JSON data
   * representing the OAuth request.
   *
   * The unique authorization code string and creation timestamp remain
   * immutable to preserve audit trail and protocol integrity.
   *
   * Only authorized system components and administrators may perform updates to
   * maintain security.
   *
   * The operation responds with the updated record including timestamps and
   * deleted_at to confirm current state.
   *
   * Careful validation prevents accidental overwrite or data conflicts.
   *
   * @param connection
   * @param id ID of the authorization code record to update
   * @param body Update information for authorization code
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IOauthServerAuthorizationCode.IUpdate,
  ): Promise<IOauthServerAuthorizationCode> {
    try {
      return await putoauthServerAdminAuthorizationCodesId({
        admin,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete an OAuth authorization code record by ID.
   *
   * Deletes the OAuth authorization code record identified by the given ID from
   * the database.
   *
   * This is a hard delete operation that permanently removes the record,
   * including all associated metadata. It is an administrative operation used
   * to clean up revoked or obsolete authorization codes.
   *
   * Security controls enforce that only administrators can perform this
   * operation.
   *
   * No response body is returned. Upon failure, standard HTTP error responses
   * provide diagnostic information.
   *
   * @param connection
   * @param id ID of the authorization code record to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteoauthServerAdminAuthorizationCodesId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
