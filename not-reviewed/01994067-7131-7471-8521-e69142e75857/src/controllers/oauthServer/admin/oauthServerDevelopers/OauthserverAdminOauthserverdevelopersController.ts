import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postoauthServerAdminOauthServerDevelopers } from "../../../../providers/postoauthServerAdminOauthServerDevelopers";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchoauthServerAdminOauthServerDevelopers } from "../../../../providers/patchoauthServerAdminOauthServerDevelopers";
import { getoauthServerAdminOauthServerDevelopersId } from "../../../../providers/getoauthServerAdminOauthServerDevelopersId";

import { IOauthServerDeveloper } from "../../../../api/structures/IOauthServerDeveloper";
import { IPageIOauthServerDeveloper } from "../../../../api/structures/IPageIOauthServerDeveloper";

@Controller("/oauthServer/admin/oauthServerDevelopers")
export class OauthserverAdminOauthserverdevelopersController {
  /**
   * Create a new OAuth developer user account.
   *
   * Accepts developer data including email, email verification status, and
   * password hash. Stores new record in oauth_server_developers table with
   * creation timestamps.
   *
   * This endpoint requires administrative or developer privileges to perform.
   *
   * Returns the created developer information including assigned UUID.
   *
   * @param connection
   * @param body Developer creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IOauthServerDeveloper.ICreate,
  ): Promise<IOauthServerDeveloper> {
    try {
      return await postoauthServerAdminOauthServerDevelopers({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of OAuth developers.
   *
   * Retrieve a filtered and paginated list of OAuth server developer accounts.
   * This operation allows administrators and authorized users to search
   * developers based on criteria such as email, verification status, and
   * creation date.
   *
   * The oauth_server_developers model includes fields such as the unique id,
   * email, email verification flag, password hash, and timestamps. The
   * operation supports sorting and pagination to efficiently navigate large
   * developer lists.
   *
   * Security considerations dictate that only authorized roles such as admin or
   * developer themselves can access this data. Proper pagination prevents
   * performance issues.
   *
   * This operation corresponds to a PATCH HTTP method for supporting complex
   * search criteria passed in the request body.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for OAuth developer
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IOauthServerDeveloper.IRequest,
  ): Promise<IPageIOauthServerDeveloper> {
    try {
      return await patchoauthServerAdminOauthServerDevelopers({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get OAuth developer details by ID.
   *
   * Retrieve detailed information of a single OAuth server developer by their
   * unique ID.
   *
   * The operation requires the developer ID as path parameter and returns all
   * fields defined in the oauth_server_developers model including email and
   * verification status.
   *
   * Only authorized users such as admin and the developer themselves should
   * access this endpoint to protect sensitive data like password hashes.
   *
   * This corresponds to a GET HTTP method with path parameter 'id'.
   *
   * @param connection
   * @param id Unique identifier of the OAuth developer
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IOauthServerDeveloper> {
    try {
      return await getoauthServerAdminOauthServerDevelopersId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
