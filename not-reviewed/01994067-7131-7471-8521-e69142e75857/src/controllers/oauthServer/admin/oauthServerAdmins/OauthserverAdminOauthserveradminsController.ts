import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postoauthServerAdminOauthServerAdmins } from "../../../../providers/postoauthServerAdminOauthServerAdmins";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchoauthServerAdminOauthServerAdmins } from "../../../../providers/patchoauthServerAdminOauthServerAdmins";
import { getoauthServerAdminOauthServerAdminsId } from "../../../../providers/getoauthServerAdminOauthServerAdminsId";
import { putoauthServerAdminOauthServerAdminsId } from "../../../../providers/putoauthServerAdminOauthServerAdminsId";
import { deleteoauthServerAdminOauthServerAdminsId } from "../../../../providers/deleteoauthServerAdminOauthServerAdminsId";

import { IOauthServerOauthServerAdmins } from "../../../../api/structures/IOauthServerOauthServerAdmins";
import { IPageIOauthServerOauthServerAdmins } from "../../../../api/structures/IPageIOauthServerOauthServerAdmins";

@Controller("/oauthServer/admin/oauthServerAdmins")
export class OauthserverAdminOauthserveradminsController {
  /**
   * Create a new OAuth server admin user.
   *
   * Create a new OAuth server administrator user account with specified email,
   * verified status, hashed password, and timestamps.
   *
   * The operation validates uniqueness of the email and password security.
   *
   * Only users with the 'admin' role can perform this operation due to its
   * sensitive nature.
   *
   * Upon success, the created administrator record is returned.
   *
   * This operation supports administrative delegation and expansion of the
   * admin user base securely.
   *
   * @param connection
   * @param body Creation information of OAuth server admin user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IOauthServerOauthServerAdmins.ICreate,
  ): Promise<IOauthServerOauthServerAdmins> {
    try {
      return await postoauthServerAdminOauthServerAdmins({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of OAuth server admins.
   *
   * This endpoint provides a paginated search and retrieval operation for OAuth
   * server administrator user accounts. It queries the 'oauth_server_admins'
   * table, including all relevant fields such as email, email verification
   * status, and audit timestamps.
   *
   * Paging, sorting, and search filters are supported to facilitate
   * administrative management and review.
   *
   * Authorization for this operation is granted to users with the 'admin' role
   * only, ensuring sensitive data protection.
   *
   * The response delivers concise summary information optimized for listing
   * views.
   *
   * This operation is a standard search endpoint and is integral to the
   * administrator management UI and monitoring tools.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for OAuth server
   *   admins filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IOauthServerOauthServerAdmins.IRequest,
  ): Promise<IPageIOauthServerOauthServerAdmins.ISummary> {
    try {
      return await patchoauthServerAdminOauthServerAdmins({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get specific OAuth server admin user by ID.
   *
   * Retrieve detailed information of a specific OAuth server administrator by
   * their unique ID.
   *
   * This operation accesses the 'oauth_server_admins' table, fetching all
   * properties including email, verification flag, and audit timestamps.
   *
   * Access is restricted to authenticated users with the 'admin' role to
   * maintain sensitive data confidentiality.
   *
   * Errors occur if the specified admin ID does not exist or is soft deleted.
   *
   * This operation is critical for admin user profile management and detail
   * viewing.
   *
   * @param connection
   * @param id Unique identifier of the target OAuth server admin user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IOauthServerOauthServerAdmins> {
    try {
      return await getoauthServerAdminOauthServerAdminsId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing OAuth server admin user.
   *
   * Modify details of an existing OAuth server admin user identified by the
   * unique ID.
   *
   * Fields such as email, email verification status, and password hash can be
   * updated.
   *
   * The operation is restricted to users with the 'admin' role.
   *
   * Failure occurs if the admin ID is not found or soft deleted.
   *
   * This supports secure and controlled administrative user data management.
   *
   * @param connection
   * @param id Unique identifier of the target OAuth server admin user
   * @param body Updated information for the OAuth server admin user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IOauthServerOauthServerAdmins.IUpdate,
  ): Promise<IOauthServerOauthServerAdmins> {
    try {
      return await putoauthServerAdminOauthServerAdminsId({
        admin,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete an OAuth admin account.
   *
   * Delete an OAuth administrator account by its ID.
   *
   * This operation performs a soft delete by setting the deleted_at field. It
   * ensures that the user's data is not permanently lost for auditing but is
   * excluded from active records.
   *
   * Only users with admin role should access this operation.
   *
   * The request requires the administrator's ID as a path parameter.
   *
   * @param connection
   * @param id Unique identifier of the OAuth admin to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteoauthServerAdminOauthServerAdminsId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
