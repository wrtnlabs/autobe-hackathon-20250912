import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postoauthServerAdminOauthServerConfigs } from "../../../../providers/postoauthServerAdminOauthServerConfigs";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchoauthServerAdminOauthServerConfigs } from "../../../../providers/patchoauthServerAdminOauthServerConfigs";
import { getoauthServerAdminOauthServerConfigsId } from "../../../../providers/getoauthServerAdminOauthServerConfigsId";
import { putoauthServerAdminOauthServerConfigsId } from "../../../../providers/putoauthServerAdminOauthServerConfigsId";
import { deleteoauthServerAdminOauthServerConfigsId } from "../../../../providers/deleteoauthServerAdminOauthServerConfigsId";

import { IOauthServerOauthServerConfigs } from "../../../../api/structures/IOauthServerOauthServerConfigs";
import { IPageIOauthServerOauthServerConfigs } from "../../../../api/structures/IPageIOauthServerOauthServerConfigs";

@Controller("/oauthServer/admin/oauthServerConfigs")
export class OauthserverAdminOauthserverconfigsController {
  /**
   * Create a new OAuth server configuration record.
   *
   * Create a new OAuth server configuration setting.
   *
   * Input includes configuration key, its value, and optional description.
   *
   * The operation sets creation and update timestamps automatically and leaves
   * deleted_at as null.
   *
   * Only authorized administrators can perform this operation to manage system
   * configurations.
   *
   * Created configuration can be queried later through the list or detail APIs.
   *
   * Validation shall ensure unique key constraint.
   *
   * Error handling must prevent duplicate key creation.
   *
   * @param connection
   * @param body Creation information for OAuth server configuration
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IOauthServerOauthServerConfigs.ICreate,
  ): Promise<IOauthServerOauthServerConfigs> {
    try {
      return await postoauthServerAdminOauthServerConfigs({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve filtered, paginated list of OAuth server
   * configurations.
   *
   * Retrieve a filtered and paginated list of OAuth server configuration
   * settings. The oauth_server_configs table contains key-value configuration
   * pairs used to control various aspects of the OAuth server's behavior.
   *
   * This operation supports advanced filtering by key, value, description, and
   * active status (non-deleted). It also supports pagination and sorting to
   * efficiently handle large numbers of configurations.
   *
   * Security considerations require that only authorized users can access these
   * settings, as exposing configuration details may reveal sensitive system
   * internals.
   *
   * The operation integrates with the oauth_server_configs Prisma model,
   * reflecting the full set of fields including created_at, updated_at, and
   * deleted_at timestamps.
   *
   * Request parameters should allow partial key matching, exact or partial
   * value filtering, and filtering by deleted or active status.
   *
   * Response includes paginated data with summary information about each
   * configuration item.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for OAuth server
   *   configurations
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IOauthServerOauthServerConfigs.IRequest,
  ): Promise<IPageIOauthServerOauthServerConfigs.ISummary> {
    try {
      return await patchoauthServerAdminOauthServerConfigs({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed OAuth server configuration by ID.
   *
   * Retrieve detailed information of a single OAuth server configuration by its
   * unique ID.
   *
   * The record includes key, value, description, creation and update
   * timestamps, and deleted_at status.
   *
   * This is a secured operation accessible only by administrators to prevent
   * exposure of sensitive configuration data.
   *
   * The response returns the full OAuth server configuration record
   * corresponding to the requested ID as defined in the oauth_server_configs
   * Prisma model.
   *
   * If the configuration ID does not exist or is soft deleted, an appropriate
   * error should be returned by the API implementation.
   *
   * @param connection
   * @param id Unique identifier of the OAuth server configuration
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IOauthServerOauthServerConfigs> {
    try {
      return await getoauthServerAdminOauthServerConfigsId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing OAuth server configuration by ID.
   *
   * Update an existing OAuth server configuration identified by ID.
   *
   * Allows changing value and description fields. Key cannot be changed.
   *
   * Update timestamp is automatically refreshed.
   *
   * Operation is restricted to administrators to protect system integrity.
   *
   * Errors returned if ID not found or record is soft deleted.
   *
   * Successful update returns the full updated configuration record.
   *
   * @param connection
   * @param id Unique identifier of the OAuth server configuration to update
   * @param body Update information for OAuth server configuration
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IOauthServerOauthServerConfigs.IUpdate,
  ): Promise<IOauthServerOauthServerConfigs> {
    try {
      return await putoauthServerAdminOauthServerConfigsId({
        admin,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete an OAuth server config by id.
   *
   * Deletes a system configuration record from the OAuth server's settings.
   * This operation is intended for administrative use to permanently remove
   * obsolete or erroneous configuration entries.
   *
   * Only users with appropriate administrative authorization should perform
   * this deletion.
   *
   * The record identified by the provided id will be removed permanently from
   * the database and cannot be recovered via this API.
   *
   * It is associated with the oauth_server_configs Prisma table representing
   * key-value system configuration.
   *
   * No request body is required since this is a deletion by id.
   *
   * Errors such as record not found or unauthorized access must be properly
   * handled by the service.
   *
   * @param connection
   * @param id Unique identifier of the OAuth server config to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteoauthServerAdminOauthServerConfigsId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
