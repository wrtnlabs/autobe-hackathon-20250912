import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postoauthServerOauthServerMembers } from "../../../providers/postoauthServerOauthServerMembers";

import { IOauthServerMember } from "../../../api/structures/IOauthServerMember";

@Controller("/oauthServer/oauthServerMembers")
export class OauthserverOauthservermembersController {
  /**
   * Create a new OAuth member account.
   *
   * Create a new OAuth server member account.
   *
   * This operation accepts member creation data including email, password hash,
   * and optionally email verification status.
   *
   * Upon success, a new member record is created with audit timestamps set.
   *
   * This endpoint is publicly accessible to allow user registration.
   *
   * Validation ensures unique email constraint. Passwords must be hashed before
   * submission.
   *
   * Refer to GET and PUT members endpoints for retrieval and update.
   *
   * @param connection
   * @param body New member creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @TypedBody()
    body: IOauthServerMember.ICreate,
  ): Promise<IOauthServerMember> {
    try {
      return await postoauthServerOauthServerMembers({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
