import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postoauthServerGuestOauthServerGuests } from "../../../../providers/postoauthServerGuestOauthServerGuests";
import { GuestAuth } from "../../../../decorators/GuestAuth";
import { GuestPayload } from "../../../../decorators/payload/GuestPayload";
import { putoauthServerGuestOauthServerGuestsId } from "../../../../providers/putoauthServerGuestOauthServerGuestsId";
import { deleteoauthServerGuestOauthServerGuestsId } from "../../../../providers/deleteoauthServerGuestOauthServerGuestsId";

import { IOauthServerGuest } from "../../../../api/structures/IOauthServerGuest";

@Controller("/oauthServer/guest/oauthServerGuests")
export class OauthserverGuestOauthserverguestsController {
  /**
   * Create new oauthServerGuest entity.
   *
   * Create a new guest user entity in the OAuth server system.
   *
   * This endpoint allows the creation of a new oauthServerGuest record, which
   * represents an unauthenticated or anonymous visitor able to utilize
   * public-facing services such as login and registration initiation.
   *
   * Guest user entities have minimal details, primarily a unique UUID
   * identifier, with audit timestamps for creation and last modification.
   *
   * Soft deletion is handled automatically via the deleted_at timestamp field
   * and is not explicitly managed by the user during creation.
   *
   * No user authentication is required to create a guest user since it
   * represents an anonymous entity.
   *
   * This resource follows standard REST principles with POST method to
   * /oauthServerGuests endpoint.
   *
   * @param connection
   * @param body Creation info of the oauthServerGuest entity
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @GuestAuth()
    guest: GuestPayload,
    @TypedBody()
    body: IOauthServerGuest.ICreate,
  ): Promise<IOauthServerGuest> {
    try {
      return await postoauthServerGuestOauthServerGuests({
        guest,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing oauthServerGuest entity by its unique ID.
   *
   * The operation allows modifying the guest user record, which minimally
   * contains system-managed timestamps and soft delete support.
   *
   * Since guest entities represent anonymous users, modifications might be
   * limited.
   *
   * PUT method is applied to the endpoint /oauthServerGuests/{id} where the
   * {id} parameter identifies the target guest record.
   *
   * Authorization role required is 'guest' representing the allowed access
   * level to update this entity.
   *
   * Request body must conform to IOauthServerGuest.IUpdate input interface
   * containing update fields.
   *
   * Response returns the updated oauthServerGuest entity data.
   *
   * @param connection
   * @param id Unique identifier of the target oauthServerGuest entity
   * @param body Update info for the target oauthServerGuest entity
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @GuestAuth()
    guest: GuestPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IOauthServerGuest.IUpdate,
  ): Promise<IOauthServerGuest> {
    try {
      return await putoauthServerGuestOauthServerGuestsId({
        guest,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Erase an oauthServerGuest entity by ID.
   *
   * Erase (delete) a specific oauthServerGuest entity by unique ID.
   *
   * This operation removes the guest user record from the database entirely.
   *
   * Performing this operation deletes all related data permanently and cannot
   * be undone.
   *
   * It handles deletion via HTTP DELETE method on /oauthServerGuests/{id}
   * endpoint.
   *
   * Authorization requires the 'guest' role.
   *
   * No request body or response body is included for this endpoint.
   *
   * @param connection
   * @param id Unique identifier of the target oauthServerGuest entity
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @GuestAuth()
    guest: GuestPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteoauthServerGuestOauthServerGuestsId({
        guest,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
