import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postoauthServerMemberSocialLoginProvidersSocialLoginProviderIdSocialUserLinks } from "../../../../../providers/postoauthServerMemberSocialLoginProvidersSocialLoginProviderIdSocialUserLinks";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";
import { putoauthServerMemberSocialLoginProvidersSocialLoginProviderIdSocialUserLinksId } from "../../../../../providers/putoauthServerMemberSocialLoginProvidersSocialLoginProviderIdSocialUserLinksId";
import { deleteoauthServerMemberSocialLoginProvidersSocialLoginProviderIdSocialUserLinksId } from "../../../../../providers/deleteoauthServerMemberSocialLoginProvidersSocialLoginProviderIdSocialUserLinksId";

import { IOauthServerSocialUserLinks } from "../../../../../api/structures/IOauthServerSocialUserLinks";

@Controller(
  "/oauthServer/member/socialLoginProviders/:socialLoginProviderId/socialUserLinks",
)
export class OauthserverMemberSocialloginprovidersSocialuserlinksController {
  /**
   * Create a social user link for a social login provider.
   *
   * Create a new social user link associated with a given social login
   * provider. This operation records the mapping between the internal OAuth
   * server member and the external social provider's user ID and tokens.
   *
   * Security considerations include ensuring the user is authorized to link
   * social accounts.
   *
   * Upon success, the created social user link with its unique ID and
   * timestamps is returned.
   *
   * References the oauth_server_social_user_links table in the Prisma schema,
   * including user_id and social_provider_id foreign key constraints.
   *
   * This operation is intended to be used exclusively by authenticated systems
   * managing social account linkages.
   *
   * @param connection
   * @param socialLoginProviderId Target social login provider's ID
   * @param body Social user link creation data with user and external provider
   *   info
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("socialLoginProviderId")
    socialLoginProviderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IOauthServerSocialUserLinks.ICreate,
  ): Promise<IOauthServerSocialUserLinks> {
    try {
      return await postoauthServerMemberSocialLoginProvidersSocialLoginProviderIdSocialUserLinks(
        {
          member,
          socialLoginProviderId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update existing social user link for a social login provider.
   *
   * Update a social user link identified by the provider and link ID. This
   * updates the external user ID, tokens, and token expiry.
   *
   * Ensures that the user has permission to update social link data.
   *
   * Works with oauth_server_social_user_links table, referencing existing
   * relationships.
   *
   * Returns the updated record information with timestamps.
   *
   * @param connection
   * @param socialLoginProviderId Target social login provider's ID
   * @param id ID of the social user link to update
   * @param body Social user link update data with updated tokens and user info
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("socialLoginProviderId")
    socialLoginProviderId: string & tags.Format<"uuid">,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IOauthServerSocialUserLinks.IUpdate,
  ): Promise<IOauthServerSocialUserLinks> {
    try {
      return await putoauthServerMemberSocialLoginProvidersSocialLoginProviderIdSocialUserLinksId(
        {
          member,
          socialLoginProviderId,
          id,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a social user link for a given social login provider.
   *
   * Delete a social user link by provider and link ID. This operation
   * permanently removes the record from the database.
   *
   * Only authorized users can delete their linked social accounts.
   *
   * No response body is returned upon successful deletion.
   *
   * References the oauth_server_social_user_links Prisma schema.
   *
   * @param connection
   * @param socialLoginProviderId Target social login provider's ID
   * @param id ID of the social user link to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("socialLoginProviderId")
    socialLoginProviderId: string & tags.Format<"uuid">,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteoauthServerMemberSocialLoginProvidersSocialLoginProviderIdSocialUserLinksId(
        {
          member,
          socialLoginProviderId,
          id,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
