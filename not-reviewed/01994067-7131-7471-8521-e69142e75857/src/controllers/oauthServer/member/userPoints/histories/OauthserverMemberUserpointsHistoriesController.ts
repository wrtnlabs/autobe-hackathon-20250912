import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postoauthServerMemberUserPointsUserPointIdHistories } from "../../../../../providers/postoauthServerMemberUserPointsUserPointIdHistories";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";
import { putoauthServerMemberUserPointsUserPointIdHistoriesId } from "../../../../../providers/putoauthServerMemberUserPointsUserPointIdHistoriesId";
import { deleteoauthServerMemberUserPointsUserPointIdHistoriesId } from "../../../../../providers/deleteoauthServerMemberUserPointsUserPointIdHistoriesId";

import { IOauthServerUserPointHistory } from "../../../../../api/structures/IOauthServerUserPointHistory";

@Controller("/oauthServer/member/userPoints/:userPointId/histories")
export class OauthserverMemberUserpointsHistoriesController {
  /**
   * Create a new user point history entry.
   *
   * Create a new point transaction history entry under a specific user points
   * account. This operation is used when points are added or deducted, such as
   * when users purchase icons or redeem coupons. The userPointId path parameter
   * identifies the target user points record.
   *
   * Security considerations require the caller to have suitable rights to
   * update the user's points. The system logs all point changes for audit
   * purposes to prevent fraud.
   *
   * The data is stored in the oauth_server_user_point_histories table. The
   * reason property indicates the business context of the point change (e.g.,
   * "coupon redemption", "icon purchase").
   *
   * Related operations include fetching user point balances and listing
   * histories. Removal of histories is not supported via this endpoint.
   *
   * Errors occur on invalid userPointId or data integrity violations. The
   * operation provides the newly created user point history entry on success.
   *
   * @param connection
   * @param userPointId Identifier of the user point record to append history
   * @param body Data for creating a new user point history entry
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("userPointId")
    userPointId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IOauthServerUserPointHistory.ICreate,
  ): Promise<IOauthServerUserPointHistory> {
    try {
      return await postoauthServerMemberUserPointsUserPointIdHistories({
        member,
        userPointId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific user point history entry.
   *
   * Update an existing point transaction history record linked to a user point
   * account. The parameters userPointId and id identify the target record.
   *
   * This operation enables correction of point history entries when necessary,
   * such as fixing mistaken point changes or updating reason descriptions.
   *
   * Security requires proper authorization to prevent unauthorized changes
   * which could compromise point integrity.
   *
   * The updated entry is returned upon success. Validation ensures
   * balance_after_change correctly reflects the post-change balance.
   *
   * Related operations include listing point histories and creating new
   * histories.
   *
   * Errors may occur due to invalid references or data validation errors.
   *
   * @param connection
   * @param userPointId Identifier of the user point record containing the
   *   history
   * @param id Unique identifier of the user point history record
   * @param body User point history update data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("userPointId")
    userPointId: string & tags.Format<"uuid">,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IOauthServerUserPointHistory.IUpdate,
  ): Promise<IOauthServerUserPointHistory> {
    try {
      return await putoauthServerMemberUserPointsUserPointIdHistoriesId({
        member,
        userPointId,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a specific user point history entry.
   *
   * Delete a user point history entry permanently from the system. This
   * operation removes the record identified by the userPointId and id
   * parameters from the oauth_server_user_point_histories table.
   *
   * Security: This operation is restricted to authorized users with adequate
   * permissions.
   *
   * This action is irreversible and deletes all data related to the target
   * history record.
   *
   * Related operations include creating and updating user point history
   * entries.
   *
   * Error handling covers invalid parameters or insufficient permissions.
   *
   * @param connection
   * @param userPointId Identifier of the user point record containing the
   *   history
   * @param id Unique identifier of the user point history record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("userPointId")
    userPointId: string & tags.Format<"uuid">,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteoauthServerMemberUserPointsUserPointIdHistoriesId({
        member,
        userPointId,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
