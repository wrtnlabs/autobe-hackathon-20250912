import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchoauthServerMemberOauthServerMembers } from "../../../../providers/patchoauthServerMemberOauthServerMembers";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";
import { getoauthServerMemberOauthServerMembersId } from "../../../../providers/getoauthServerMemberOauthServerMembersId";
import { putoauthServerMemberOauthServerMembersId } from "../../../../providers/putoauthServerMemberOauthServerMembersId";

import { IPageIOauthServerMember } from "../../../../api/structures/IPageIOauthServerMember";
import { IOauthServerMember } from "../../../../api/structures/IOauthServerMember";

@Controller("/oauthServer/member/oauthServerMembers")
export class OauthserverMemberOauthservermembersController {
  /**
   * Search and list oauthServerMember entities.
   *
   * Search and retrieve a paginated list of registered oauthServerMember users.
   *
   * The operation supports filtering by member attributes such as email and
   * email verification status. It supports pagination and sorting to
   * efficiently browse large user sets.
   *
   * Sensitive authentication fields such as password_hash are never included in
   * the response summaries to maintain user credential confidentiality.
   *
   * Returns a paginated response containing summary objects for each member
   * matched by the criteria.
   *
   * No path parameters are required.
   *
   * Authorization requires 'member' role as it exposes member information.
   *
   * The request body should specify filtering, sorting, and pagination criteria
   * conforming to IOauthServerMember.IRequest.
   *
   * The response body includes paginated data with paging metadata and member
   * summaries, type IOauthServerMember.ISummary.
   *
   * @param connection
   * @param body Filtering and pagination criteria for oauthServerMembers
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IOauthServerMember.IRequest,
  ): Promise<IPageIOauthServerMember.ISummary> {
    try {
      return await patchoauthServerMemberOauthServerMembers({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information of an OAuth member by ID.
   *
   * Retrieve details of a specific OAuth server member by their unique
   * identifier.
   *
   * This operation fetches the member's email, email verification status,
   * password hash (usually not exposed), and timestamps including creation,
   * update, and soft delete status if applicable.
   *
   * Access is restricted to authenticated members to protect personal
   * information.
   *
   * The 'id' parameter must be a UUID matching the database record's primary
   * key. If the member does not exist or is soft deleted, the response will
   * reflect not found or appropriate error.
   *
   * This operation complements the POST /oauthServerMembers endpoint and PUT
   * /oauthServerMembers/{id} endpoint for member management.
   *
   * @param connection
   * @param id Unique identifier of the member
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IOauthServerMember> {
    try {
      return await getoauthServerMemberOauthServerMembersId({
        member,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an OAuth member by ID.
   *
   * Update an existing OAuth server member's information by their unique ID.
   *
   * This operation accepts partial or full update data including email, email
   * verification flag, and password hash.
   *
   * The member identified by the 'id' path parameter will be updated with
   * provided fields.
   *
   * Timestamp fields are updated automatically during the update operation.
   *
   * Authorization for this operation requires 'member' role to ensure members
   * update only their own info.
   *
   * If the member does not exist or is soft deleted, appropriate error is
   * returned.
   *
   * Use with GET and POST endpoints for complete member management lifecycle.
   *
   * @param connection
   * @param id Unique identifier of the member to update
   * @param body Member update data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IOauthServerMember.IUpdate,
  ): Promise<IOauthServerMember> {
    try {
      return await putoauthServerMemberOauthServerMembersId({
        member,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
