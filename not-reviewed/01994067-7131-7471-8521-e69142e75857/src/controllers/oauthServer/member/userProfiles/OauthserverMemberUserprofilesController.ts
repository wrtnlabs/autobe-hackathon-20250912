import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postoauthServerMemberUserProfiles } from "../../../../providers/postoauthServerMemberUserProfiles";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";
import { patchoauthServerMemberUserProfiles } from "../../../../providers/patchoauthServerMemberUserProfiles";
import { getoauthServerMemberUserProfilesId } from "../../../../providers/getoauthServerMemberUserProfilesId";
import { putoauthServerMemberUserProfilesId } from "../../../../providers/putoauthServerMemberUserProfilesId";
import { deleteoauthServerMemberUserProfilesId } from "../../../../providers/deleteoauthServerMemberUserProfilesId";

import { IOauthServerUserProfile } from "../../../../api/structures/IOauthServerUserProfile";
import { IPageIOauthServerUserProfiles } from "../../../../api/structures/IPageIOauthServerUserProfiles";
import { IOauthServerUserProfiles } from "../../../../api/structures/IOauthServerUserProfiles";

@Controller("/oauthServer/member/userProfiles")
export class OauthserverMemberUserprofilesController {
  /**
   * Create a new user profile.
   *
   * This API operation registers a new user profile for a user in the OAuth
   * server system. User profile fields such as nickname, profile picture URL,
   * and biography can be supplied optionally, enabling flexible profile
   * customization.
   *
   * The user_id is mandatory to link the profile to a valid user in the OAuth
   * server_members table. Data validation should ensure user_id exists before
   * creation.
   *
   * The operation generates audit timestamps for record creation and updates.
   *
   * Upon successful creation, the detailed user profile is returned to the
   * client.
   *
   * Security checks are necessary to verify that the requester has rights to
   * create a user profile for the specified user.
   *
   * This operation supports the dynamic profile requirements without altering
   * the main user entity, optimized for frequent profile data changes.
   *
   * @param connection
   * @param body Information required to create a user profile
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IOauthServerUserProfile.ICreate,
  ): Promise<IOauthServerUserProfile> {
    try {
      return await postoauthServerMemberUserProfiles({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and list user profiles with filtering and pagination.
   *
   * Search and retrieve a filtered, paginated list of user profiles. Supports
   * nickname filtering, pagination, and sorting.
   *
   * This operation queries the oauth_server_user_profiles table and returns
   * user profile summary information.
   *
   * Authorization is restricted to authenticated users.
   *
   * Supports complex queries via request body with pagination and filter
   * parameters.
   *
   * @param connection
   * @param body User profile search criteria and pagination parameters
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IOauthServerUserProfiles.IRequest,
  ): Promise<IPageIOauthServerUserProfiles.ISummary> {
    try {
      return await patchoauthServerMemberUserProfiles({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve user profile details by ID.
   *
   * This API operation fetches a user profile by its ID from the OAuth server
   * system. The user profile contains frequently changing information like
   * nickname, profile picture URL, and biography, which are stored separately
   * from core user data for optimized update operations.
   *
   * Only active profiles are accessible; profiles marked as deleted (with
   * deleted_at timestamp) are excluded from retrieval.
   *
   * Security considerations ensure that only authorized users or processes can
   * access detailed profile information. Authorization controls should verify
   * user permissions before allowing data access.
   *
   * The operation ties directly to the oauth_server_user_profiles table,
   * fetching a single profile record matching the provided UUID. Proper error
   * handling should be implemented to respond with appropriate errors if the
   * profile is not found or if the user lacks permissions.
   *
   * This retrieval operation assists client apps requiring read access to user
   * profile metadata for user-facing features.
   *
   * @param connection
   * @param id Unique identifier (UUID) of the user profile to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IOauthServerUserProfile> {
    try {
      return await getoauthServerMemberUserProfilesId({
        member,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update user profile by ID.
   *
   * This API operation updates user profile details identified by the profile
   * ID. Clients can update nickname, profile picture URL, and biography. Fields
   * may be omitted or null for partial updates.
   *
   * The ID path parameter uniquely identifies the profile record. Security
   * mechanisms must verify user's authorization before applying changes.
   *
   * Soft-deleted profiles are excluded from modification.
   *
   * The response returns the updated profile information for confirmation.
   *
   * This update operation supports user-driven profile customization within the
   * OAuth server environment optimizing decoupled profile data management.
   *
   * @param connection
   * @param id Unique identifier (UUID) of the user profile to update
   * @param body User profile update data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IOauthServerUserProfile.IUpdate,
  ): Promise<IOauthServerUserProfile> {
    try {
      return await putoauthServerMemberUserProfilesId({
        member,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete user profile by ID.
   *
   * This API operation soft deletes a user profile identified by its unique ID.
   * Instead of physical deletion, it marks the profile as deleted by setting
   * the deleted_at timestamp.
   *
   * Soft deletion supports audit compliance and enables future recovery or
   * undelete if necessary.
   *
   * Authorization checks should ensure only permitted users can perform
   * deletion.
   *
   * Once marked deleted, the profile is excluded from subsequent retrieval and
   * update operations.
   *
   * Clients receive no content in response as deletion confirmation.
   *
   * This approach facilitates compliance requirements while maintaining data
   * integrity within the OAuth server profile management.
   *
   * @param connection
   * @param id Unique identifier (UUID) of the user profile to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteoauthServerMemberUserProfilesId({
        member,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
