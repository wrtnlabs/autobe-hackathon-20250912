import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postoauthServerMemberUserProfilesUserProfileIdGameProfiles } from "../../../../../providers/postoauthServerMemberUserProfilesUserProfileIdGameProfiles";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";
import { patchoauthServerMemberUserProfilesUserProfileIdGameProfiles } from "../../../../../providers/patchoauthServerMemberUserProfilesUserProfileIdGameProfiles";
import { getoauthServerMemberUserProfilesUserProfileIdGameProfilesId } from "../../../../../providers/getoauthServerMemberUserProfilesUserProfileIdGameProfilesId";
import { putoauthServerMemberUserProfilesUserProfileIdGameProfilesId } from "../../../../../providers/putoauthServerMemberUserProfilesUserProfileIdGameProfilesId";
import { deleteoauthServerMemberUserProfilesUserProfileIdGameProfilesId } from "../../../../../providers/deleteoauthServerMemberUserProfilesUserProfileIdGameProfilesId";

import { IOauthServerUserGameProfile } from "../../../../../api/structures/IOauthServerUserGameProfile";
import { IPageIOauthServerUserGameProfile } from "../../../../../api/structures/IPageIOauthServerUserGameProfile";

@Controller("/oauthServer/member/userProfiles/:userProfileId/gameProfiles")
export class OauthserverMemberUserprofilesGameprofilesController {
  /**
   * Create a new user game profile.
   *
   * Create a new game profile under a specific user profile. This includes
   * platform identifier, player name, and optional season for external game
   * accounts like PUBG and League of Legends.
   *
   * The operation validates user permissions and maintains referential
   * integrity with the user profile.
   *
   * Responds with the created game profile details.
   *
   * @param connection
   * @param userProfileId Unique identifier of the target user profile
   * @param body Information needed to create a user game profile
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("userProfileId")
    userProfileId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IOauthServerUserGameProfile.ICreate,
  ): Promise<IOauthServerUserGameProfile> {
    try {
      return await postoauthServerMemberUserProfilesUserProfileIdGameProfiles({
        member,
        userProfileId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and list game profiles for a user profile.
   *
   * Retrieve a filtered and paginated list of game profiles associated with a
   * specified user profile. This operation enables clients to search, filter,
   * and sort through a user's game profiles, including platform, player names,
   * and seasons.
   *
   * The operation requires the userProfileId path parameter to identify the
   * target user profile. It utilizes standard pagination parameters for
   * efficient data retrieval.
   *
   * Security considerations are in place to ensure only authorized users can
   * view game profiles. The response includes game profile summaries optimized
   * for list displays.
   *
   * This operation directly interacts with the oauth_server_game_profiles
   * table, supporting all queryable columns and filterable fields as defined in
   * the Prisma schema.
   *
   * Clients should use this endpoint to build user-facing features showing
   * linked game accounts.
   *
   * @param connection
   * @param userProfileId Unique identifier of the target user profile
   * @param body Search criteria and pagination parameters for user game
   *   profiles
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("userProfileId")
    userProfileId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IOauthServerUserGameProfile.IRequest,
  ): Promise<IPageIOauthServerUserGameProfile.ISummary> {
    try {
      return await patchoauthServerMemberUserProfilesUserProfileIdGameProfiles({
        member,
        userProfileId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details of a specific game profile.
   *
   * Retrieve detailed information of a specific game profile for a given user
   * profile by the game profile ID. This includes platform, player name,
   * season, and timestamps.
   *
   * Access is restricted to authorized users associated with the user profile.
   *
   * Directly queries the oauth_server_game_profiles table using the provided
   * identifiers.
   *
   * @param connection
   * @param userProfileId Unique identifier of the target user profile
   * @param id Unique identifier of the user game profile
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("userProfileId")
    userProfileId: string & tags.Format<"uuid">,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IOauthServerUserGameProfile> {
    try {
      return await getoauthServerMemberUserProfilesUserProfileIdGameProfilesId({
        member,
        userProfileId,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update user game profile details.
   *
   * Update an existing game profile for a user profile. Allows changing the
   * platform, player name, and season fields.
   *
   * The operation ensures the user has permission to modify the resource and
   * maintains data integrity.
   *
   * Response contains the updated game profile information.
   *
   * @param connection
   * @param userProfileId Unique identifier of the target user profile
   * @param id Unique identifier of the user game profile
   * @param body Data to update the user game profile
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("userProfileId")
    userProfileId: string & tags.Format<"uuid">,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IOauthServerUserGameProfile.IUpdate,
  ): Promise<IOauthServerUserGameProfile> {
    try {
      return await putoauthServerMemberUserProfilesUserProfileIdGameProfilesId({
        member,
        userProfileId,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a user game profile by userProfileId and id.
   *
   * Permanently deletes a user's game profile record specified by userProfileId
   * and game profile id from the system.
   *
   * Only authorized users or administrators can perform this operation. Proper
   * validation ensures the specified record exists before deletion.
   *
   * The operation removes the entire record with no residual data. This API is
   * crucial for managing outdated or incorrect game profile data.
   *
   * Related operations include retrieval and update of game profiles and user
   * profiles for management and display.
   *
   * Errors are returned if the requested record does not exist or the requester
   * lacks permission.
   *
   * @param connection
   * @param userProfileId Unique identifier of the user profile
   * @param id Unique identifier of the game profile to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("userProfileId")
    userProfileId: string & tags.Format<"uuid">,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteoauthServerMemberUserProfilesUserProfileIdGameProfilesId(
        {
          member,
          userProfileId,
          id,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
