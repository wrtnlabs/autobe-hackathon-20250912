import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { patchoauthServerMemberPointCoupons } from "../../../../providers/patchoauthServerMemberPointCoupons";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";

import { IPageIOauthServerPointCoupon } from "../../../../api/structures/IPageIOauthServerPointCoupon";
import { IOauthServerPointCoupon } from "../../../../api/structures/IOauthServerPointCoupon";

@Controller("/oauthServer/member/pointCoupons")
export class OauthserverMemberPointcouponsController {
  /**
   * List and search point coupons.
   *
   * Retrieve a list of point coupons with filtering and pagination. This
   * operation enables clients to search for coupons by code, filter by
   * expiration dates, and list only active coupons.
   *
   * The data is returned paginated for scalability in user interfaces and
   * includes coupon metadata such as description, value, and expiry.
   *
   * Security considerations include allowing only authorized users to view
   * coupon details if sensitive information is included.
   *
   * Related operations include redeeming coupons via user point histories and
   * managing coupon issuance.
   *
   * Error handling covers invalid filters or pagination parameters.
   *
   * @param connection
   * @param body Filtering, pagination, and sorting options for point coupons
   *   retrieval
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IOauthServerPointCoupon.IRequest,
  ): Promise<IPageIOauthServerPointCoupon> {
    try {
      return await patchoauthServerMemberPointCoupons({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
