import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postoauthServerMemberIdTokens } from "../../../../providers/postoauthServerMemberIdTokens";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";
import { patchoauthServerMemberIdTokens } from "../../../../providers/patchoauthServerMemberIdTokens";
import { getoauthServerMemberIdTokensId } from "../../../../providers/getoauthServerMemberIdTokensId";

import { IOauthServerIdToken } from "../../../../api/structures/IOauthServerIdToken";
import { IPageIOauthServerIdToken } from "../../../../api/structures/IPageIOauthServerIdToken";

@Controller("/oauthServer/member/idTokens")
export class OauthserverMemberIdtokensController {
  /**
   * Create a new OAuth ID token according to OpenID Connect standards. This
   * token is recorded in the oauth_server_id_tokens table.
   *
   * The request body must contain all required fields for creating the ID
   * token, matching the IOauthServerIdToken.ICreate schema.
   *
   * Upon successful creation, the new ID token entity is returned including
   * token string, timestamps, expiration, and associated client details.
   *
   * This operation requires authorization limited to authenticated members to
   * prevent unauthorized token issuance.
   *
   * Errors due to validation or authorization failures must be handled
   * accordingly.
   *
   * This API uses POST method with JSON request body and returns the created
   * token entity.
   *
   * @param connection
   * @param body Creation info for the new OAuth ID token
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createIdToken(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IOauthServerIdToken.ICreate,
  ): Promise<IOauthServerIdToken> {
    try {
      return await postoauthServerMemberIdTokens({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve filtered, paginated list of OAuth ID tokens.
   *
   * Return a filtered, paginated collection of OAuth ID tokens from the system.
   * These ID tokens conform to OpenID Connect standards and are stored in the
   * oauth_server_id_tokens table.
   *
   * The search parameters include filtering by various token attributes such as
   * client ID, expiration dates, and status.
   *
   * This operation requires user authentication and returns summaries of tokens
   * matching the search criteria.
   *
   * Request is sent by PATCH method with JSON body matching
   * IOauthServerIdToken.IRequest. Response includes a page of
   * IOauthServerIdToken.ISummary objects.
   *
   * Errors are handled with appropriate authorization and validation.
   *
   * This operation is typically used in token management interfaces for
   * monitoring and auditing tokens.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for ID token
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexIdToken(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IOauthServerIdToken.IRequest,
  ): Promise<IPageIOauthServerIdToken.ISummary> {
    try {
      return await patchoauthServerMemberIdTokens({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve OAuth ID token details by ID.
   *
   * Fetch detailed information of a specific OAuth ID token by its unique ID.
   * The ID token is stored in the oauth_server_id_tokens table representing
   * OpenID Connect ID tokens issued to clients.
   *
   * This query requires the ID as a UUID path parameter and returns all details
   * of the ID token entity.
   *
   * Authorization roles are limited to authenticated members for security.
   *
   * Errors will be returned if the token ID is invalid or access is denied.
   *
   * This GET operation does not require a request body and returns a detailed
   * response.
   *
   * Typical use cases include token audits and token detail retrieval in
   * management systems.
   *
   * @param connection
   * @param id Unique identifier of the OAuth ID token
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async atIdToken(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IOauthServerIdToken> {
    try {
      return await getoauthServerMemberIdTokensId({
        member,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
