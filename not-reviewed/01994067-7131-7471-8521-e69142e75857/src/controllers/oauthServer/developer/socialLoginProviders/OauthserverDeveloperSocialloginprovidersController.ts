import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { putoauthServerDeveloperSocialLoginProvidersId } from "../../../../providers/putoauthServerDeveloperSocialLoginProvidersId";
import { DeveloperAuth } from "../../../../decorators/DeveloperAuth";
import { DeveloperPayload } from "../../../../decorators/payload/DeveloperPayload";
import { deleteoauthServerDeveloperSocialLoginProvidersId } from "../../../../providers/deleteoauthServerDeveloperSocialLoginProvidersId";

import { IOauthServerSocialProvider } from "../../../../api/structures/IOauthServerSocialProvider";

@Controller("/oauthServer/developer/socialLoginProviders/:id")
export class OauthserverDeveloperSocialloginprovidersController {
  /**
   * Update a social login provider configuration.
   *
   * Update an existing OAuth social login provider configuration in the system.
   * This operation allows full modification of the provider's OAuth client ID,
   * secret, authorization URLs, scopes, and active status.
   *
   * Only authorized users with "developer" role can perform this update.
   *
   * The underlying database table is `oauth_server_social_providers`, which
   * stores the external OAuth provider details necessary for social login
   * integration such as Naver, Google, Apple, etc.
   *
   * Validation includes uniqueness of the provider_name and verifying URLs are
   * well-formed.
   *
   * The response returns the updated social login provider record.
   *
   * Proper authorization and careful client secret management are crucial for
   * security.
   *
   * This operation supports the administrative use case of maintaining external
   * OAuth integrations securely and flexibly.
   *
   * @param connection
   * @param id Target social login provider's ID
   * @param body Update information of the social login provider
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async updateSocialLoginProvider(
    @DeveloperAuth()
    developer: DeveloperPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IOauthServerSocialProvider.IUpdate,
  ): Promise<IOauthServerSocialProvider> {
    try {
      return await putoauthServerDeveloperSocialLoginProvidersId({
        developer,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a social login provider.
   *
   * Permanently remove a social login provider from the system. This operation
   * cannot be undone and deletes all related OAuth configuration records.
   *
   * Only users with the "developer" role are authorized to execute this.
   *
   * Ensure no active integrations remain with the provider before deletion to
   * prevent OAuth flow disruptions.
   *
   * This operation targets the `oauth_server_social_providers` table.
   *
   * Use with caution as it affects social login availability for the provider.
   *
   * @param connection
   * @param id Target social login provider's ID
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async eraseSocialLoginProvider(
    @DeveloperAuth()
    developer: DeveloperPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteoauthServerDeveloperSocialLoginProvidersId({
        developer,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
