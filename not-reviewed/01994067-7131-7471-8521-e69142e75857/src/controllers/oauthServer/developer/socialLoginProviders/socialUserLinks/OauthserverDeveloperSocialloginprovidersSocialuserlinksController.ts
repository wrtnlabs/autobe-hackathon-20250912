import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchoauthServerDeveloperSocialLoginProvidersSocialLoginProviderIdSocialUserLinks } from "../../../../../providers/patchoauthServerDeveloperSocialLoginProvidersSocialLoginProviderIdSocialUserLinks";
import { DeveloperAuth } from "../../../../../decorators/DeveloperAuth";
import { DeveloperPayload } from "../../../../../decorators/payload/DeveloperPayload";
import { getoauthServerDeveloperSocialLoginProvidersSocialLoginProviderIdSocialUserLinksId } from "../../../../../providers/getoauthServerDeveloperSocialLoginProvidersSocialLoginProviderIdSocialUserLinksId";

import { IPageIOauthServerSocialUserLink } from "../../../../../api/structures/IPageIOauthServerSocialUserLink";
import { IOauthServerSocialUserLink } from "../../../../../api/structures/IOauthServerSocialUserLink";

@Controller(
  "/oauthServer/developer/socialLoginProviders/:socialLoginProviderId/socialUserLinks",
)
export class OauthserverDeveloperSocialloginprovidersSocialuserlinksController {
  /**
   * Search social user links for a provider.
   *
   * Retrieve a paginated list of social user links filtered by the specified
   * social login provider.
   *
   * This operation supports advanced filtering, sorting, and pagination via the
   * request body.
   *
   * It targets the `oauth_server_social_user_links` table which maintains
   * linkage between internal users and external social OAuth identities.
   *
   * Only authorized users with the "developer" role can access this data.
   *
   * The response contains summarized social user link data for easy overview
   * and management.
   *
   * This operation is essential for administrators and developers managing
   * social authentication links securely and efficiently.
   *
   * @param connection
   * @param socialLoginProviderId Target social login provider's ID
   * @param body Search criteria and pagination parameters for social user links
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexSocialUserLinksByProvider(
    @DeveloperAuth()
    developer: DeveloperPayload,
    @TypedParam("socialLoginProviderId")
    socialLoginProviderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IOauthServerSocialUserLink.IRequest,
  ): Promise<IPageIOauthServerSocialUserLink.ISummary> {
    try {
      return await patchoauthServerDeveloperSocialLoginProvidersSocialLoginProviderIdSocialUserLinks(
        {
          developer,
          socialLoginProviderId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed social user link information.
   *
   * Fetch detailed information of a single social user link by ID under the
   * specified social login provider.
   *
   * Access restricted to users with the "developer" role.
   *
   * This operation reads from `oauth_server_social_user_links` table.
   *
   * Provides comprehensive data about the linkage between internal user
   * accounts and external social provider identities.
   *
   * Useful for auditing, troubleshooting, or management of social login
   * associations.
   *
   * @param connection
   * @param socialLoginProviderId Target social login provider's ID
   * @param id Target social user link's ID
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async atSocialUserLink(
    @DeveloperAuth()
    developer: DeveloperPayload,
    @TypedParam("socialLoginProviderId")
    socialLoginProviderId: string & tags.Format<"uuid">,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IOauthServerSocialUserLink> {
    try {
      return await getoauthServerDeveloperSocialLoginProvidersSocialLoginProviderIdSocialUserLinksId(
        {
          developer,
          socialLoginProviderId,
          id,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
