import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postoauthServerDeveloperOauthServerTokenMonitors } from "../../../../providers/postoauthServerDeveloperOauthServerTokenMonitors";
import { DeveloperAuth } from "../../../../decorators/DeveloperAuth";
import { DeveloperPayload } from "../../../../decorators/payload/DeveloperPayload";
import { patchoauthServerDeveloperOauthServerTokenMonitors } from "../../../../providers/patchoauthServerDeveloperOauthServerTokenMonitors";
import { getoauthServerDeveloperOauthServerTokenMonitorsId } from "../../../../providers/getoauthServerDeveloperOauthServerTokenMonitorsId";
import { putoauthServerDeveloperOauthServerTokenMonitorsId } from "../../../../providers/putoauthServerDeveloperOauthServerTokenMonitorsId";

import { IOauthServerTokenMonitor } from "../../../../api/structures/IOauthServerTokenMonitor";
import { IPageIOauthServerTokenMonitor } from "../../../../api/structures/IPageIOauthServerTokenMonitor";

@Controller("/oauthServer/developer/oauthServerTokenMonitors")
export class OauthserverDeveloperOauthservertokenmonitorsController {
  /**
   * Create a new OAuth token monitor event record linking an access token event
   * with the related client, including event type, IP address, user agent, and
   * timestamps.
   *
   * Only users with admin or developer roles may create token monitor events.
   *
   * The input request must provide event_type (e.g., validation, expiration),
   * access_token_id, client IP, and optionally user agent information.
   *
   * The API responds with the newly created event record details.
   *
   * Failure occurs on missing required fields, duplicate entries, or
   * unauthorized roles.
   *
   * @param connection
   * @param body Creation info of the OAuth token monitor event
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @DeveloperAuth()
    developer: DeveloperPayload,
    @TypedBody()
    body: IOauthServerTokenMonitor.ICreate,
  ): Promise<IOauthServerTokenMonitor> {
    try {
      return await postoauthServerDeveloperOauthServerTokenMonitors({
        developer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve paginated OAuth token monitor events.
   *
   * Retrieve a filtered and paginated list of OAuth server token monitor
   * records from the system. This operation provides advanced querying
   * capabilities allowing clients to filter token events by event type, client
   * id, IP address, and time ranges.
   *
   * The response includes metadata capturing details such as event type (e.g.,
   * validation, expiration, revocation), event timestamp, associated OAuth
   * client, IP address, and user agent string.
   *
   * Security considerations include restricting this endpoint to authorized
   * admin and developer roles due to sensitive nature of token event logs.
   * Efficient access and pagination help handle large event volumes.
   *
   * This operation corresponds to the 'oauth_server_token_monitors' table in
   * Prisma schema. It is essential for token usage auditing, security
   * monitoring, and forensic analysis.
   *
   * Advanced searching and pagination capabilities allow administrators to
   * monitor token activity trends and detect anomalies. The API supports
   * sorting results by event timestamp and filtering by client identifier.
   *
   * Errors are handled with standard HTTP codes and descriptive messages for
   * invalid filter parameters and unauthorized access attempts.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for OAuth token
   *   monitor filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @DeveloperAuth()
    developer: DeveloperPayload,
    @TypedBody()
    body: IOauthServerTokenMonitor.IRequest,
  ): Promise<IPageIOauthServerTokenMonitor.ISummary> {
    try {
      return await patchoauthServerDeveloperOauthServerTokenMonitors({
        developer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information of a specific OAuth token monitor event.
   *
   * Retrieve detailed information about a specific OAuth token monitor event by
   * its ID. This includes event type, timestamps, client IP, user agent data,
   * and related client and token details.
   *
   * Access is restricted to users with admin or developer roles to protect
   * sensitive audit data.
   *
   * This corresponds to the 'oauth_server_token_monitors' table in the Prisma
   * schema.
   *
   * @param connection
   * @param id Unique identifier of the OAuth token monitor event
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @DeveloperAuth()
    developer: DeveloperPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IOauthServerTokenMonitor> {
    try {
      return await getoauthServerDeveloperOauthServerTokenMonitorsId({
        developer,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing OAuth token monitor event.
   *
   * Update details of an existing OAuth token monitor event by its ID. Allows
   * modification of event type, IP address, user agent, etc.
   *
   * Authorized roles 'admin' and 'developer' only.
   *
   * The request includes updated event data except for immutable fields like ID
   * and timestamps.
   *
   * Error handling for invalid IDs and permission violations is implemented.
   *
   * This operation modifies 'oauth_server_token_monitors' table records.
   *
   * @param connection
   * @param id Unique identifier of the OAuth token monitor event to update
   * @param body Update information for the OAuth token monitor event
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @DeveloperAuth()
    developer: DeveloperPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IOauthServerTokenMonitor.IUpdate,
  ): Promise<IOauthServerTokenMonitor> {
    try {
      return await putoauthServerDeveloperOauthServerTokenMonitorsId({
        developer,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
