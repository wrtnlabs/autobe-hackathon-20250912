import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postoauthServerDeveloperOauthClientsOauthClientIdClientProfiles } from "../../../../../providers/postoauthServerDeveloperOauthClientsOauthClientIdClientProfiles";
import { DeveloperAuth } from "../../../../../decorators/DeveloperAuth";
import { DeveloperPayload } from "../../../../../decorators/payload/DeveloperPayload";
import { patchoauthServerDeveloperOauthClientsOauthClientIdClientProfiles } from "../../../../../providers/patchoauthServerDeveloperOauthClientsOauthClientIdClientProfiles";
import { getoauthServerDeveloperOauthClientsOauthClientIdClientProfilesId } from "../../../../../providers/getoauthServerDeveloperOauthClientsOauthClientIdClientProfilesId";
import { putoauthServerDeveloperOauthClientsOauthClientIdClientProfilesId } from "../../../../../providers/putoauthServerDeveloperOauthClientsOauthClientIdClientProfilesId";
import { deleteoauthServerDeveloperOauthClientsOauthClientIdClientProfilesId } from "../../../../../providers/deleteoauthServerDeveloperOauthClientsOauthClientIdClientProfilesId";

import { IOauthServerClientProfile } from "../../../../../api/structures/IOauthServerClientProfile";
import { IPageIOauthServerClientProfile } from "../../../../../api/structures/IPageIOauthServerClientProfile";

@Controller("/oauthServer/developer/oauthClients/:oauthClientId/clientProfiles")
export class OauthserverDeveloperOauthclientsClientprofilesController {
  /**
   * Create a new OAuth client profile for a given OAuth client.
   *
   * Create a new OAuth client profile under the specified OAuth client. This
   * endpoint accepts profile metadata including nickname and optional
   * description.
   *
   * Access is restricted to authenticated developers with permission to manage
   * the client. Input validation and uniqueness checks are performed.
   *
   * The profile is stored in the oauth_server_client_profiles table with
   * timestamps and soft delete disabled by default.
   *
   * Upon successful creation, the full profile details are returned.
   *
   * @param connection
   * @param oauthClientId Unique identifier of the target OAuth client
   * @param body Data for creating new OAuth client profile
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @DeveloperAuth()
    developer: DeveloperPayload,
    @TypedParam("oauthClientId")
    oauthClientId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IOauthServerClientProfile.ICreate,
  ): Promise<IOauthServerClientProfile> {
    try {
      return await postoauthServerDeveloperOauthClientsOauthClientIdClientProfiles(
        {
          developer,
          oauthClientId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List OAuth client profiles for a given OAuth client with pagination and
   * filtering.
   *
   * Retrieve a filtered and paginated list of OAuth client profiles for the
   * specified OAuth client. This operation enables developers to search and
   * manage client profile metadata such as nicknames and descriptions, which
   * are frequently updated independently from the main client record.
   *
   * Security considerations include role-based access, permitting only
   * authenticated developers to access this endpoint. Proper authorization
   * checks ensure that developers can only view profiles belonging to OAuth
   * clients they are authorized to manage.
   *
   * This operation directly queries the oauth_server_client_profiles table,
   * filtering out soft-deleted records and returning results with pagination
   * and ordering options.
   *
   * Expected behavior includes returning profiles with current metadata,
   * supporting client management UIs and API integrations.
   *
   * @param connection
   * @param oauthClientId Unique identifier of the target OAuth client
   * @param body Search criteria and pagination parameters for OAuth client
   *   profiles
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @DeveloperAuth()
    developer: DeveloperPayload,
    @TypedParam("oauthClientId")
    oauthClientId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IOauthServerClientProfile.IRequest,
  ): Promise<IPageIOauthServerClientProfile> {
    try {
      return await patchoauthServerDeveloperOauthClientsOauthClientIdClientProfiles(
        {
          developer,
          oauthClientId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed OAuth client profile information by ID.
   *
   * Retrieve detailed information of the specified OAuth client profile by its
   * unique identifier for a given OAuth client. This endpoint supports detailed
   * profile viewing, including nickname and description fields.
   *
   * Security measures restrict access to authenticated developers associated
   * with the OAuth client. Data integrity is maintained by ensuring the profile
   * belongs to the specified client and has not been soft deleted.
   *
   * The operation maps directly to the oauth_server_client_profiles table in
   * the database, excluding soft-deleted profiles from retrieval.
   *
   * Errors are handled gracefully with appropriate HTTP status codes if the
   * profile does not exist or access is unauthorized.
   *
   * @param connection
   * @param oauthClientId Unique identifier of the target OAuth client
   * @param id Unique identifier of the OAuth client profile
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @DeveloperAuth()
    developer: DeveloperPayload,
    @TypedParam("oauthClientId")
    oauthClientId: string & tags.Format<"uuid">,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IOauthServerClientProfile> {
    try {
      return await getoauthServerDeveloperOauthClientsOauthClientIdClientProfilesId(
        {
          developer,
          oauthClientId,
          id,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing OAuth client profile by ID.
   *
   * Update the specified OAuth client profile for a given OAuth client with new
   * metadata such as nickname and description.
   *
   * Only authenticated developers authorized for the OAuth client can perform
   * this operation. The profile must exist and not be soft-deleted.
   *
   * The update operation modifies the oauth_server_client_profiles table and
   * returns the updated profile data upon successful completion.
   *
   * Errors such as missing profile or unauthorized access are properly handled
   * with relevant HTTP status codes and messages.
   *
   * @param connection
   * @param oauthClientId Unique identifier of the target OAuth client
   * @param id Unique identifier of the OAuth client profile
   * @param body Updated data for the OAuth client profile
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @DeveloperAuth()
    developer: DeveloperPayload,
    @TypedParam("oauthClientId")
    oauthClientId: string & tags.Format<"uuid">,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IOauthServerClientProfile.IUpdate,
  ): Promise<IOauthServerClientProfile> {
    try {
      return await putoauthServerDeveloperOauthClientsOauthClientIdClientProfilesId(
        {
          developer,
          oauthClientId,
          id,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete one OAuth client profile record by client ID and profile ID.
   *
   * Delete a client profile entry associated with a particular OAuth client.
   *
   * This endpoint permanently deletes the profile record identified by the
   * unique profile ID under the specified OAuth client ID. The
   * oauth_server_client_profiles table stores display nicknames and
   * descriptions that often change and are managed separately from the main
   * OAuth client data.
   *
   * Access control requires developer-level authorization to ensure only
   * authorized users can delete client profile entries.
   *
   * All deletions are hard deletes; once deleted, the profile entry cannot be
   * recovered.
   *
   * This complements client profile retrieval and update operations to provide
   * full client profile management capabilities.
   *
   * @param connection
   * @param oauthClientId Unique identifier of the target OAuth client
   * @param id Unique identifier of the client profile to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async eraseClientProfile(
    @DeveloperAuth()
    developer: DeveloperPayload,
    @TypedParam("oauthClientId")
    oauthClientId: string & tags.Format<"uuid">,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteoauthServerDeveloperOauthClientsOauthClientIdClientProfilesId(
        {
          developer,
          oauthClientId,
          id,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
