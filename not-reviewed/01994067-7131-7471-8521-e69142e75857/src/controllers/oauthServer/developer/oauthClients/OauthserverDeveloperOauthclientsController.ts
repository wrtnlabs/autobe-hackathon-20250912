import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getoauthServerDeveloperOauthClientsId } from "../../../../providers/getoauthServerDeveloperOauthClientsId";
import { DeveloperAuth } from "../../../../decorators/DeveloperAuth";
import { DeveloperPayload } from "../../../../decorators/payload/DeveloperPayload";
import { putoauthServerDeveloperOauthClientsId } from "../../../../providers/putoauthServerDeveloperOauthClientsId";
import { deleteoauthServerDeveloperOauthClientsId } from "../../../../providers/deleteoauthServerDeveloperOauthClientsId";
import { postoauthServerDeveloperOauthClients } from "../../../../providers/postoauthServerDeveloperOauthClients";

import { IOauthServerOauthClient } from "../../../../api/structures/IOauthServerOauthClient";

@Controller("/oauthServer/developer/oauthClients")
export class OauthserverDeveloperOauthclientsController {
  /**
   * Retrieve a specific OAuth client by ID.
   *
   * Retrieve detailed information of a specific OAuth client by its unique
   * identifier. This endpoint allows authorized personnel such as developers
   * and admins to access client metadata necessary for management and auditing
   * purposes.
   *
   * Security considerations require authentication and role-based access to
   * protect the client secret and related sensitive data. Only authenticated
   * developers or admins may perform this operation.
   *
   * The data is sourced from the 'oauth_server_oauth_clients' table, which
   * maintains the core client credentials and associated metadata. The response
   * excludes client profiles which are managed separately.
   *
   * Errors may occur if the client ID does not exist or access is unauthorized.
   * Proper HTTP error codes and messages will be returned accordingly.
   *
   * @param connection
   * @param id Unique identifier of the OAuth client to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @DeveloperAuth()
    developer: DeveloperPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IOauthServerOauthClient> {
    try {
      return await getoauthServerDeveloperOauthClientsId({
        developer,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing OAuth client by ID.
   *
   * Update an existing OAuth client's credentials and metadata by specifying
   * its unique ID. Authorized developers and admins can modify client secret,
   * redirect URI, logo URI, and trust status.
   *
   * This operation validates inputs and updates the
   * 'oauth_server_oauth_clients' table accordingly with new timestamps.
   *
   * The client_id field is immutable and cannot be changed by this operation.
   *
   * Errors arise if the client does not exist or user lacks permission.
   *
   * @param connection
   * @param id Unique identifier of the OAuth client to update
   * @param body Client update data with modifiable fields
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @DeveloperAuth()
    developer: DeveloperPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IOauthServerOauthClient.IUpdate,
  ): Promise<IOauthServerOauthClient> {
    try {
      return await putoauthServerDeveloperOauthClientsId({
        developer,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete an OAuth client by ID.
   *
   * Soft delete an OAuth client by setting its deletion timestamp. This marks
   * the client as inactive and excludes it from OAuth processes without
   * permanently removing data.
   *
   * Only authorized developers and admins may perform this operation.
   *
   * Proper error handling is included for non-existent clients or unauthorized
   * access attempts.
   *
   * @param connection
   * @param id Unique identifier of the OAuth client to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @DeveloperAuth()
    developer: DeveloperPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteoauthServerDeveloperOauthClientsId({
        developer,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create a new OAuth client by providing client credentials and metadata.
   * This operation is restricted to authorized developers and administrators.
   *
   * The client_id must be unique and redirect_uri valid. The is_trusted flag
   * determines if automatic consent is granted during OAuth flows.
   *
   * Successful creation returns the full client record including creation
   * timestamps. Failure occurs if validation fails or the client_id already
   * exists.
   *
   * This operation interacts directly with the 'oauth_server_oauth_clients'
   * table for data persistence.
   *
   * @param connection
   * @param body Client creation data including client_id, client_secret,
   *   redirect_uri, logo_uri, and trust flag
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @DeveloperAuth()
    developer: DeveloperPayload,
    @TypedBody()
    body: IOauthServerOauthClient.ICreate,
  ): Promise<IOauthServerOauthClient> {
    try {
      return await postoauthServerDeveloperOauthClients({
        developer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
