import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { putoauthServerDeveloperOauthServerDevelopersId } from "../../../../providers/putoauthServerDeveloperOauthServerDevelopersId";
import { DeveloperAuth } from "../../../../decorators/DeveloperAuth";
import { DeveloperPayload } from "../../../../decorators/payload/DeveloperPayload";
import { deleteoauthServerDeveloperOauthServerDevelopersId } from "../../../../providers/deleteoauthServerDeveloperOauthServerDevelopersId";

import { IOauthServerDeveloper } from "../../../../api/structures/IOauthServerDeveloper";

@Controller("/oauthServer/developer/oauthServerDevelopers/:id")
export class OauthserverDeveloperOauthserverdevelopersController {
  /**
   * Update OAuth server developer details by ID.
   *
   * Update an existing OAuth server developer's information by their unique ID.
   * This operation allows modification of developer-specific fields such as
   * email verification status and password hash. The ID parameter must be a
   * valid UUID string corresponding to an existing developer.
   *
   * Security considerations emphasize that only authorized developers can
   * invoke this endpoint. It references the oauth_server_developers table in
   * the Prisma schema, which dictates the developer data structure. Validation
   * rules ensure the ID path parameter is a UUID and the request body matches
   * the IUpdate schema structure.
   *
   * This endpoint complements fetch operations to retrieve developer details
   * and delete operations to remove developer records. Upon success, it returns
   * the updated developer entity information.
   *
   * @param connection
   * @param id Unique identifier of the OAuth server developer to update
   * @param body Updated information of the OAuth server developer
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @DeveloperAuth()
    developer: DeveloperPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IOauthServerDeveloper.IUpdate,
  ): Promise<IOauthServerDeveloper> {
    try {
      return await putoauthServerDeveloperOauthServerDevelopersId({
        developer,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete OAuth server developer by ID.
   *
   * Permanently erase the OAuth server developer record identified by the ID
   * parameter. This operation removes the developer from the system database
   * irreversibly.
   *
   * Security concerns require the caller to have the 'developer' role. The ID
   * must be a valid UUID corresponding to an existing developer.
   *
   * No soft delete behavior is applied as per schema design. This operation
   * complements update and fetch endpoints for developer entities.
   *
   * @param connection
   * @param id Unique identifier of the OAuth server developer to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @DeveloperAuth()
    developer: DeveloperPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteoauthServerDeveloperOauthServerDevelopersId({
        developer,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
