import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getoauthServerDeveloperPointCouponsId } from "../../../../providers/getoauthServerDeveloperPointCouponsId";
import { DeveloperAuth } from "../../../../decorators/DeveloperAuth";
import { DeveloperPayload } from "../../../../decorators/payload/DeveloperPayload";

import { IOauthServerPointCoupon } from "../../../../api/structures/IOauthServerPointCoupon";

@Controller("/oauthServer/developer/pointCoupons/:id")
export class OauthserverDeveloperPointcouponsController {
  /**
   * Retrieve details of a specific point coupon by ID.
   *
   * Retrieve detailed information about a point coupon identified by its unique
   * ID. This operation accesses the PointCoupon entity, which represents coupon
   * codes used for granting points to users. The entity includes fields such as
   * unique code, description, value, usage limits, expiration date, and audit
   * tracking timestamps.
   *
   * This operation requires administrative or developer permissions to access
   * sensitive coupon data. It ensures that the requesting user is authorized to
   * view point coupon details.
   *
   * The response includes all cached and up-to-date coupon metadata as stored
   * in the database. Proper error handling is expected for invalid or
   * non-existent coupon IDs.
   *
   * @param connection
   * @param id Unique identifier of the point coupon
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @DeveloperAuth()
    developer: DeveloperPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IOauthServerPointCoupon> {
    try {
      return await getoauthServerDeveloperPointCouponsId({
        developer,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
