import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postoauthServerDeveloperAuthorizationCodes } from "../../../../providers/postoauthServerDeveloperAuthorizationCodes";
import { DeveloperAuth } from "../../../../decorators/DeveloperAuth";
import { DeveloperPayload } from "../../../../decorators/payload/DeveloperPayload";
import { patchoauthServerDeveloperAuthorizationCodes } from "../../../../providers/patchoauthServerDeveloperAuthorizationCodes";
import { getoauthServerDeveloperAuthorizationCodesId } from "../../../../providers/getoauthServerDeveloperAuthorizationCodesId";

import { IOauthServerAuthorizationCode } from "../../../../api/structures/IOauthServerAuthorizationCode";
import { IPageIOauthServerAuthorizationCode } from "../../../../api/structures/IPageIOauthServerAuthorizationCode";

@Controller("/oauthServer/developer/authorizationCodes")
export class OauthserverDeveloperAuthorizationcodesController {
  /**
   * Create a new OAuth authorization code record.
   *
   * Creates a new OAuth authorization code record. This operation accepts a
   * unique authorization code linked to a specific OAuth client along with data
   * including the OAuth request JSONB and redirect URI. The authorization code
   * is used as part of the OAuth 2.0 authorization code grant flow to grant
   * tokens to clients.
   *
   * The response confirms creation of the record including timestamps and soft
   * delete fields.
   *
   * Security requires that only authenticated clients or management systems can
   * perform this creation. Proper validation protects against duplicate
   * authorization code issuance.
   *
   * This operation is foundational for OAuth authorization processes and pairs
   * with token issuance operations that consume these authorization codes.
   *
   * @param connection
   * @param body Creation information for authorization code
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @DeveloperAuth()
    developer: DeveloperPayload,
    @TypedBody()
    body: IOauthServerAuthorizationCode.ICreate,
  ): Promise<IOauthServerAuthorizationCode> {
    try {
      return await postoauthServerDeveloperAuthorizationCodes({
        developer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search OAuth authorization codes with filters and pagination.
   *
   * Retrieve a paginated list of OAuth authorization codes with advanced
   * filtering and sorting support. The authorization codes are linked to OAuth
   * clients and include data such as the unique code string, OAuth jsonb
   * request data, redirect URI, and expiry information.
   *
   * This operation accesses the `oauth_server_authorization_codes` table in the
   * database, leveraging the Prisma schema structure. The request allows
   * specifying filters on various properties to narrow down results.
   *
   * Only users with the 'developer' role can perform this operation, ensuring
   * access control. The response contains a paginated collection of
   * authorization code summary data, useful for client credential management
   * and auditing.
   *
   * @param connection
   * @param body Filtering, sorting, and pagination parameters for authorization
   *   code search
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @DeveloperAuth()
    developer: DeveloperPayload,
    @TypedBody()
    body: IOauthServerAuthorizationCode.IRequest,
  ): Promise<IPageIOauthServerAuthorizationCode.ISummary> {
    try {
      return await patchoauthServerDeveloperAuthorizationCodes({
        developer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed OAuth authorization code by ID.
   *
   * Retrieve detailed OAuth authorization code information identified by its
   * unique ID.
   *
   * The operation is secure and visible only to users with the 'developer'
   * role. The ID parameter must be a UUID string of an existing authorization
   * code.
   *
   * It returns the full structure of the authorization code including the
   * secure OAuth JSONB request data and metadata about the code's lifecycle and
   * client association.
   *
   * @param connection
   * @param id Unique identifier of the OAuth authorization code
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @DeveloperAuth()
    developer: DeveloperPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IOauthServerAuthorizationCode> {
    try {
      return await getoauthServerDeveloperAuthorizationCodesId({
        developer,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
