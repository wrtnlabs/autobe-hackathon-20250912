import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IOauthServerMember } from "../../../../structures/IOauthServerMember";
import { IPageIOauthServerMember } from "../../../../structures/IPageIOauthServerMember";

/**
 * Search and list oauthServerMember entities.
 *
 * Search and retrieve a paginated list of registered oauthServerMember users.
 *
 * The operation supports filtering by member attributes such as email and email
 * verification status. It supports pagination and sorting to efficiently browse
 * large user sets.
 *
 * Sensitive authentication fields such as password_hash are never included in
 * the response summaries to maintain user credential confidentiality.
 *
 * Returns a paginated response containing summary objects for each member
 * matched by the criteria.
 *
 * No path parameters are required.
 *
 * Authorization requires 'member' role as it exposes member information.
 *
 * The request body should specify filtering, sorting, and pagination criteria
 * conforming to IOauthServerMember.IRequest.
 *
 * The response body includes paginated data with paging metadata and member
 * summaries, type IOauthServerMember.ISummary.
 *
 * @param props.connection
 * @param props.body Filtering and pagination criteria for oauthServerMembers
 * @path /oauthServer/member/oauthServerMembers
 * @accessor api.functional.oauthServer.member.oauthServerMembers.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filtering and pagination criteria for oauthServerMembers */
    body: IOauthServerMember.IRequest;
  };
  export type Body = IOauthServerMember.IRequest;
  export type Response = IPageIOauthServerMember.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/oauthServer/member/oauthServerMembers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/oauthServer/member/oauthServerMembers";
  export const random = (): IPageIOauthServerMember.ISummary =>
    typia.random<IPageIOauthServerMember.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information of an OAuth member by ID.
 *
 * Retrieve details of a specific OAuth server member by their unique
 * identifier.
 *
 * This operation fetches the member's email, email verification status,
 * password hash (usually not exposed), and timestamps including creation,
 * update, and soft delete status if applicable.
 *
 * Access is restricted to authenticated members to protect personal
 * information.
 *
 * The 'id' parameter must be a UUID matching the database record's primary key.
 * If the member does not exist or is soft deleted, the response will reflect
 * not found or appropriate error.
 *
 * This operation complements the POST /oauthServerMembers endpoint and PUT
 * /oauthServerMembers/{id} endpoint for member management.
 *
 * @param props.connection
 * @param props.id Unique identifier of the member
 * @path /oauthServer/member/oauthServerMembers/:id
 * @accessor api.functional.oauthServer.member.oauthServerMembers.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the member */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IOauthServerMember;

  export const METADATA = {
    method: "GET",
    path: "/oauthServer/member/oauthServerMembers/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/member/oauthServerMembers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerMember =>
    typia.random<IOauthServerMember>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an OAuth member by ID.
 *
 * Update an existing OAuth server member's information by their unique ID.
 *
 * This operation accepts partial or full update data including email, email
 * verification flag, and password hash.
 *
 * The member identified by the 'id' path parameter will be updated with
 * provided fields.
 *
 * Timestamp fields are updated automatically during the update operation.
 *
 * Authorization for this operation requires 'member' role to ensure members
 * update only their own info.
 *
 * If the member does not exist or is soft deleted, appropriate error is
 * returned.
 *
 * Use with GET and POST endpoints for complete member management lifecycle.
 *
 * @param props.connection
 * @param props.id Unique identifier of the member to update
 * @param props.body Member update data
 * @path /oauthServer/member/oauthServerMembers/:id
 * @accessor api.functional.oauthServer.member.oauthServerMembers.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the member to update */
    id: string & tags.Format<"uuid">;

    /** Member update data */
    body: IOauthServerMember.IUpdate;
  };
  export type Body = IOauthServerMember.IUpdate;
  export type Response = IOauthServerMember;

  export const METADATA = {
    method: "PUT",
    path: "/oauthServer/member/oauthServerMembers/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/oauthServer/member/oauthServerMembers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerMember =>
    typia.random<IOauthServerMember>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
