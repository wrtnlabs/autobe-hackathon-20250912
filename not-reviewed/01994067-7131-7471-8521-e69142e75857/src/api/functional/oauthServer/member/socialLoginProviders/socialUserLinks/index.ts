import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IOauthServerSocialUserLinks } from "../../../../../structures/IOauthServerSocialUserLinks";

/**
 * Create a social user link for a social login provider.
 *
 * Create a new social user link associated with a given social login provider.
 * This operation records the mapping between the internal OAuth server member
 * and the external social provider's user ID and tokens.
 *
 * Security considerations include ensuring the user is authorized to link
 * social accounts.
 *
 * Upon success, the created social user link with its unique ID and timestamps
 * is returned.
 *
 * References the oauth_server_social_user_links table in the Prisma schema,
 * including user_id and social_provider_id foreign key constraints.
 *
 * This operation is intended to be used exclusively by authenticated systems
 * managing social account linkages.
 *
 * @param props.connection
 * @param props.socialLoginProviderId Target social login provider's ID
 * @param props.body Social user link creation data with user and external
 *   provider info
 * @path /oauthServer/member/socialLoginProviders/:socialLoginProviderId/socialUserLinks
 * @accessor api.functional.oauthServer.member.socialLoginProviders.socialUserLinks.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Target social login provider's ID */
    socialLoginProviderId: string & tags.Format<"uuid">;

    /** Social user link creation data with user and external provider info */
    body: IOauthServerSocialUserLinks.ICreate;
  };
  export type Body = IOauthServerSocialUserLinks.ICreate;
  export type Response = IOauthServerSocialUserLinks;

  export const METADATA = {
    method: "POST",
    path: "/oauthServer/member/socialLoginProviders/:socialLoginProviderId/socialUserLinks",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/oauthServer/member/socialLoginProviders/${encodeURIComponent(props.socialLoginProviderId ?? "null")}/socialUserLinks`;
  export const random = (): IOauthServerSocialUserLinks =>
    typia.random<IOauthServerSocialUserLinks>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("socialLoginProviderId")(() =>
        typia.assert(props.socialLoginProviderId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update existing social user link for a social login provider.
 *
 * Update a social user link identified by the provider and link ID. This
 * updates the external user ID, tokens, and token expiry.
 *
 * Ensures that the user has permission to update social link data.
 *
 * Works with oauth_server_social_user_links table, referencing existing
 * relationships.
 *
 * Returns the updated record information with timestamps.
 *
 * @param props.connection
 * @param props.socialLoginProviderId Target social login provider's ID
 * @param props.id ID of the social user link to update
 * @param props.body Social user link update data with updated tokens and user
 *   info
 * @path /oauthServer/member/socialLoginProviders/:socialLoginProviderId/socialUserLinks/:id
 * @accessor api.functional.oauthServer.member.socialLoginProviders.socialUserLinks.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Target social login provider's ID */
    socialLoginProviderId: string & tags.Format<"uuid">;

    /** ID of the social user link to update */
    id: string & tags.Format<"uuid">;

    /** Social user link update data with updated tokens and user info */
    body: IOauthServerSocialUserLinks.IUpdate;
  };
  export type Body = IOauthServerSocialUserLinks.IUpdate;
  export type Response = IOauthServerSocialUserLinks;

  export const METADATA = {
    method: "PUT",
    path: "/oauthServer/member/socialLoginProviders/:socialLoginProviderId/socialUserLinks/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/oauthServer/member/socialLoginProviders/${encodeURIComponent(props.socialLoginProviderId ?? "null")}/socialUserLinks/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerSocialUserLinks =>
    typia.random<IOauthServerSocialUserLinks>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("socialLoginProviderId")(() =>
        typia.assert(props.socialLoginProviderId),
      );
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a social user link for a given social login provider.
 *
 * Delete a social user link by provider and link ID. This operation permanently
 * removes the record from the database.
 *
 * Only authorized users can delete their linked social accounts.
 *
 * No response body is returned upon successful deletion.
 *
 * References the oauth_server_social_user_links Prisma schema.
 *
 * @param props.connection
 * @param props.socialLoginProviderId Target social login provider's ID
 * @param props.id ID of the social user link to delete
 * @path /oauthServer/member/socialLoginProviders/:socialLoginProviderId/socialUserLinks/:id
 * @accessor api.functional.oauthServer.member.socialLoginProviders.socialUserLinks.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Target social login provider's ID */
    socialLoginProviderId: string & tags.Format<"uuid">;

    /** ID of the social user link to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/oauthServer/member/socialLoginProviders/:socialLoginProviderId/socialUserLinks/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/member/socialLoginProviders/${encodeURIComponent(props.socialLoginProviderId ?? "null")}/socialUserLinks/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("socialLoginProviderId")(() =>
        typia.assert(props.socialLoginProviderId),
      );
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
