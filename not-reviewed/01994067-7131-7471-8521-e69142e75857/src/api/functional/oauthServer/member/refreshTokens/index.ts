import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IOauthServerRefreshToken } from "../../../../structures/IOauthServerRefreshToken";
import { IPageIOauthServerRefreshToken } from "../../../../structures/IPageIOauthServerRefreshToken";

/**
 * Create a new opaque OAuth refresh token.
 *
 * Create a new OAuth refresh token record. This token is opaque and linked to
 * an OAuth client and optionally an authorization code.
 *
 * The request includes token string, scopes, expiry, and related OAuth client
 * information.
 *
 * Access control restricts this operation to authenticated members.
 *
 * Validation ensures token uniqueness and correct expiration formatting.
 *
 * @param props.connection
 * @param props.body Creation information of the refresh token
 * @path /oauthServer/member/refreshTokens
 * @accessor api.functional.oauthServer.member.refreshTokens.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation information of the refresh token */
    body: IOauthServerRefreshToken.ICreate;
  };
  export type Body = IOauthServerRefreshToken.ICreate;
  export type Response = IOauthServerRefreshToken;

  export const METADATA = {
    method: "POST",
    path: "/oauthServer/member/refreshTokens",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/oauthServer/member/refreshTokens";
  export const random = (): IOauthServerRefreshToken =>
    typia.random<IOauthServerRefreshToken>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a paginated list of opaque OAuth refresh tokens.
 *
 * Retrieve a filtered and paginated list of OAuth server refresh tokens from
 * the oauth_server_refresh_tokens table. This operation allows clients to
 * search for tokens by various fields including token string, associated
 * client, expiration time, and scopes.
 *
 * The operation supports pagination with offset and limit parameters, sorting
 * by created_at or expires_at, and filtering by token status or associated
 * client.
 *
 * Security considerations include restricting access to authenticated members
 * to prevent exposure of sensitive token information. The refresh tokens are
 * opaque strings used for renewing access tokens in OAuth flows.
 *
 * This operation is essential for client and admin monitoring tools to audit
 * and manage token usage and lifecycle. Error handling includes validation for
 * search criteria and pagination bounds.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for listing
 *   refresh tokens
 * @path /oauthServer/member/refreshTokens
 * @accessor api.functional.oauthServer.member.refreshTokens.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for listing refresh tokens */
    body: IOauthServerRefreshToken.IRequest;
  };
  export type Body = IOauthServerRefreshToken.IRequest;
  export type Response = IPageIOauthServerRefreshToken.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/oauthServer/member/refreshTokens",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/oauthServer/member/refreshTokens";
  export const random = (): IPageIOauthServerRefreshToken.ISummary =>
    typia.random<IPageIOauthServerRefreshToken.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information for a specific OAuth refresh token by ID.
 *
 * Retrieve detailed information about a specific OAuth refresh token using its
 * unique identifier from the oauth_server_refresh_tokens table.
 *
 * The response includes token string, scopes granted, expiration, linked OAuth
 * client, and related authorization code data for comprehensive token
 * inspection.
 *
 * Only authenticated members with appropriate roles can access this endpoint
 * for security.
 *
 * Errors include token not found or access denied.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target refresh token
 * @path /oauthServer/member/refreshTokens/:id
 * @accessor api.functional.oauthServer.member.refreshTokens.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target refresh token */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IOauthServerRefreshToken;

  export const METADATA = {
    method: "GET",
    path: "/oauthServer/member/refreshTokens/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/member/refreshTokens/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerRefreshToken =>
    typia.random<IOauthServerRefreshToken>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update existing OAuth refresh token information.
 *
 * Update an existing OAuth refresh token by its unique ID.
 *
 * Supports modification of token string, scopes, expiration, and associated
 * authorization code.
 *
 * Access restricted to authenticated members for security.
 *
 * Errors include token not found or invalid update data.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target refresh token
 * @param props.body Update information of the refresh token
 * @path /oauthServer/member/refreshTokens/:id
 * @accessor api.functional.oauthServer.member.refreshTokens.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target refresh token */
    id: string & tags.Format<"uuid">;

    /** Update information of the refresh token */
    body: IOauthServerRefreshToken.IUpdate;
  };
  export type Body = IOauthServerRefreshToken.IUpdate;
  export type Response = IOauthServerRefreshToken;

  export const METADATA = {
    method: "PUT",
    path: "/oauthServer/member/refreshTokens/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/oauthServer/member/refreshTokens/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerRefreshToken =>
    typia.random<IOauthServerRefreshToken>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an OAuth refresh token by ID.
 *
 * Permanently delete a specific OAuth refresh token by its unique identifier.
 * This refresh token is stored in the oauth_server_refresh_tokens table and is
 * used for renewing access tokens securely.
 *
 * Performing this operation requires appropriate authorization to prevent
 * malicious revocation of tokens by unauthorized users.
 *
 * The operation accepts the refresh token ID as a UUID path parameter. It does
 * not require any request body, and on successful execution, no content is
 * returned.
 *
 * Errors may occur if the token ID does not exist or the caller lacks
 * permissions. Proper authorization and validation must be enforced.
 *
 * Related token management APIs include creation, listing, and validation of
 * refresh tokens.
 *
 * This delete operation removes the record completely from the database, as
 * opposed to soft deletion.
 *
 * @param props.connection
 * @param props.id Unique identifier of the OAuth refresh token
 * @path /oauthServer/member/refreshTokens/:id
 * @accessor api.functional.oauthServer.member.refreshTokens.eraseRefreshToken
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseRefreshToken(
  connection: IConnection,
  props: eraseRefreshToken.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseRefreshToken.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseRefreshToken.METADATA,
          path: eraseRefreshToken.path(props),
          status: null,
        },
      );
}
export namespace eraseRefreshToken {
  export type Props = {
    /** Unique identifier of the OAuth refresh token */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/oauthServer/member/refreshTokens/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/member/refreshTokens/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseRefreshToken.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseRefreshToken.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
