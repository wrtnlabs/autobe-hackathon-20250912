import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IOauthServerUserPointHistory } from "../../../../../structures/IOauthServerUserPointHistory";

/**
 * Create a new user point history entry.
 *
 * Create a new point transaction history entry under a specific user points
 * account. This operation is used when points are added or deducted, such as
 * when users purchase icons or redeem coupons. The userPointId path parameter
 * identifies the target user points record.
 *
 * Security considerations require the caller to have suitable rights to update
 * the user's points. The system logs all point changes for audit purposes to
 * prevent fraud.
 *
 * The data is stored in the oauth_server_user_point_histories table. The reason
 * property indicates the business context of the point change (e.g., "coupon
 * redemption", "icon purchase").
 *
 * Related operations include fetching user point balances and listing
 * histories. Removal of histories is not supported via this endpoint.
 *
 * Errors occur on invalid userPointId or data integrity violations. The
 * operation provides the newly created user point history entry on success.
 *
 * @param props.connection
 * @param props.userPointId Identifier of the user point record to append
 *   history
 * @param props.body Data for creating a new user point history entry
 * @path /oauthServer/member/userPoints/:userPointId/histories
 * @accessor api.functional.oauthServer.member.userPoints.histories.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Identifier of the user point record to append history */
    userPointId: string & tags.Format<"uuid">;

    /** Data for creating a new user point history entry */
    body: IOauthServerUserPointHistory.ICreate;
  };
  export type Body = IOauthServerUserPointHistory.ICreate;
  export type Response = IOauthServerUserPointHistory;

  export const METADATA = {
    method: "POST",
    path: "/oauthServer/member/userPoints/:userPointId/histories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/oauthServer/member/userPoints/${encodeURIComponent(props.userPointId ?? "null")}/histories`;
  export const random = (): IOauthServerUserPointHistory =>
    typia.random<IOauthServerUserPointHistory>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userPointId")(() => typia.assert(props.userPointId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific user point history entry.
 *
 * Update an existing point transaction history record linked to a user point
 * account. The parameters userPointId and id identify the target record.
 *
 * This operation enables correction of point history entries when necessary,
 * such as fixing mistaken point changes or updating reason descriptions.
 *
 * Security requires proper authorization to prevent unauthorized changes which
 * could compromise point integrity.
 *
 * The updated entry is returned upon success. Validation ensures
 * balance_after_change correctly reflects the post-change balance.
 *
 * Related operations include listing point histories and creating new
 * histories.
 *
 * Errors may occur due to invalid references or data validation errors.
 *
 * @param props.connection
 * @param props.userPointId Identifier of the user point record containing the
 *   history
 * @param props.id Unique identifier of the user point history record
 * @param props.body User point history update data
 * @path /oauthServer/member/userPoints/:userPointId/histories/:id
 * @accessor api.functional.oauthServer.member.userPoints.histories.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Identifier of the user point record containing the history */
    userPointId: string & tags.Format<"uuid">;

    /** Unique identifier of the user point history record */
    id: string & tags.Format<"uuid">;

    /** User point history update data */
    body: IOauthServerUserPointHistory.IUpdate;
  };
  export type Body = IOauthServerUserPointHistory.IUpdate;
  export type Response = IOauthServerUserPointHistory;

  export const METADATA = {
    method: "PUT",
    path: "/oauthServer/member/userPoints/:userPointId/histories/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/oauthServer/member/userPoints/${encodeURIComponent(props.userPointId ?? "null")}/histories/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerUserPointHistory =>
    typia.random<IOauthServerUserPointHistory>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userPointId")(() => typia.assert(props.userPointId));
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specific user point history entry.
 *
 * Delete a user point history entry permanently from the system. This operation
 * removes the record identified by the userPointId and id parameters from the
 * oauth_server_user_point_histories table.
 *
 * Security: This operation is restricted to authorized users with adequate
 * permissions.
 *
 * This action is irreversible and deletes all data related to the target
 * history record.
 *
 * Related operations include creating and updating user point history entries.
 *
 * Error handling covers invalid parameters or insufficient permissions.
 *
 * @param props.connection
 * @param props.userPointId Identifier of the user point record containing the
 *   history
 * @param props.id Unique identifier of the user point history record
 * @path /oauthServer/member/userPoints/:userPointId/histories/:id
 * @accessor api.functional.oauthServer.member.userPoints.histories.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Identifier of the user point record containing the history */
    userPointId: string & tags.Format<"uuid">;

    /** Unique identifier of the user point history record */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/oauthServer/member/userPoints/:userPointId/histories/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/member/userPoints/${encodeURIComponent(props.userPointId ?? "null")}/histories/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userPointId")(() => typia.assert(props.userPointId));
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
