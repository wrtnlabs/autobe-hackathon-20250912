import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IOauthServerPointCoupon } from "../../../../structures/IOauthServerPointCoupon";
import { IPageIOauthServerPointCoupon } from "../../../../structures/IPageIOauthServerPointCoupon";

/**
 * List and search point coupons.
 *
 * Retrieve a list of point coupons with filtering and pagination. This
 * operation enables clients to search for coupons by code, filter by expiration
 * dates, and list only active coupons.
 *
 * The data is returned paginated for scalability in user interfaces and
 * includes coupon metadata such as description, value, and expiry.
 *
 * Security considerations include allowing only authorized users to view coupon
 * details if sensitive information is included.
 *
 * Related operations include redeeming coupons via user point histories and
 * managing coupon issuance.
 *
 * Error handling covers invalid filters or pagination parameters.
 *
 * @param props.connection
 * @param props.body Filtering, pagination, and sorting options for point
 *   coupons retrieval
 * @path /oauthServer/member/pointCoupons
 * @accessor api.functional.oauthServer.member.pointCoupons.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Filtering, pagination, and sorting options for point coupons
     * retrieval
     */
    body: IOauthServerPointCoupon.IRequest;
  };
  export type Body = IOauthServerPointCoupon.IRequest;
  export type Response = IPageIOauthServerPointCoupon;

  export const METADATA = {
    method: "PATCH",
    path: "/oauthServer/member/pointCoupons",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/oauthServer/member/pointCoupons";
  export const random = (): IPageIOauthServerPointCoupon =>
    typia.random<IPageIOauthServerPointCoupon>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
