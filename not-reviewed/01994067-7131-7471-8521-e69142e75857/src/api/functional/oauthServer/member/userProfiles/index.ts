import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IOauthServerUserProfile } from "../../../../structures/IOauthServerUserProfile";
import { IOauthServerUserProfiles } from "../../../../structures/IOauthServerUserProfiles";
import { IPageIOauthServerUserProfiles } from "../../../../structures/IPageIOauthServerUserProfiles";
export * as gameProfiles from "./gameProfiles/index";

/**
 * Create a new user profile.
 *
 * This API operation registers a new user profile for a user in the OAuth
 * server system. User profile fields such as nickname, profile picture URL, and
 * biography can be supplied optionally, enabling flexible profile
 * customization.
 *
 * The user_id is mandatory to link the profile to a valid user in the OAuth
 * server_members table. Data validation should ensure user_id exists before
 * creation.
 *
 * The operation generates audit timestamps for record creation and updates.
 *
 * Upon successful creation, the detailed user profile is returned to the
 * client.
 *
 * Security checks are necessary to verify that the requester has rights to
 * create a user profile for the specified user.
 *
 * This operation supports the dynamic profile requirements without altering the
 * main user entity, optimized for frequent profile data changes.
 *
 * @param props.connection
 * @param props.body Information required to create a user profile
 * @path /oauthServer/member/userProfiles
 * @accessor api.functional.oauthServer.member.userProfiles.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information required to create a user profile */
    body: IOauthServerUserProfile.ICreate;
  };
  export type Body = IOauthServerUserProfile.ICreate;
  export type Response = IOauthServerUserProfile;

  export const METADATA = {
    method: "POST",
    path: "/oauthServer/member/userProfiles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/oauthServer/member/userProfiles";
  export const random = (): IOauthServerUserProfile =>
    typia.random<IOauthServerUserProfile>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and list user profiles with filtering and pagination.
 *
 * Search and retrieve a filtered, paginated list of user profiles. Supports
 * nickname filtering, pagination, and sorting.
 *
 * This operation queries the oauth_server_user_profiles table and returns user
 * profile summary information.
 *
 * Authorization is restricted to authenticated users.
 *
 * Supports complex queries via request body with pagination and filter
 * parameters.
 *
 * @param props.connection
 * @param props.body User profile search criteria and pagination parameters
 * @path /oauthServer/member/userProfiles
 * @accessor api.functional.oauthServer.member.userProfiles.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** User profile search criteria and pagination parameters */
    body: IOauthServerUserProfiles.IRequest;
  };
  export type Body = IOauthServerUserProfiles.IRequest;
  export type Response = IPageIOauthServerUserProfiles.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/oauthServer/member/userProfiles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/oauthServer/member/userProfiles";
  export const random = (): IPageIOauthServerUserProfiles.ISummary =>
    typia.random<IPageIOauthServerUserProfiles.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve user profile details by ID.
 *
 * This API operation fetches a user profile by its ID from the OAuth server
 * system. The user profile contains frequently changing information like
 * nickname, profile picture URL, and biography, which are stored separately
 * from core user data for optimized update operations.
 *
 * Only active profiles are accessible; profiles marked as deleted (with
 * deleted_at timestamp) are excluded from retrieval.
 *
 * Security considerations ensure that only authorized users or processes can
 * access detailed profile information. Authorization controls should verify
 * user permissions before allowing data access.
 *
 * The operation ties directly to the oauth_server_user_profiles table, fetching
 * a single profile record matching the provided UUID. Proper error handling
 * should be implemented to respond with appropriate errors if the profile is
 * not found or if the user lacks permissions.
 *
 * This retrieval operation assists client apps requiring read access to user
 * profile metadata for user-facing features.
 *
 * @param props.connection
 * @param props.id Unique identifier (UUID) of the user profile to retrieve
 * @path /oauthServer/member/userProfiles/:id
 * @accessor api.functional.oauthServer.member.userProfiles.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) of the user profile to retrieve */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IOauthServerUserProfile;

  export const METADATA = {
    method: "GET",
    path: "/oauthServer/member/userProfiles/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/member/userProfiles/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerUserProfile =>
    typia.random<IOauthServerUserProfile>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update user profile by ID.
 *
 * This API operation updates user profile details identified by the profile ID.
 * Clients can update nickname, profile picture URL, and biography. Fields may
 * be omitted or null for partial updates.
 *
 * The ID path parameter uniquely identifies the profile record. Security
 * mechanisms must verify user's authorization before applying changes.
 *
 * Soft-deleted profiles are excluded from modification.
 *
 * The response returns the updated profile information for confirmation.
 *
 * This update operation supports user-driven profile customization within the
 * OAuth server environment optimizing decoupled profile data management.
 *
 * @param props.connection
 * @param props.id Unique identifier (UUID) of the user profile to update
 * @param props.body User profile update data
 * @path /oauthServer/member/userProfiles/:id
 * @accessor api.functional.oauthServer.member.userProfiles.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier (UUID) of the user profile to update */
    id: string & tags.Format<"uuid">;

    /** User profile update data */
    body: IOauthServerUserProfile.IUpdate;
  };
  export type Body = IOauthServerUserProfile.IUpdate;
  export type Response = IOauthServerUserProfile;

  export const METADATA = {
    method: "PUT",
    path: "/oauthServer/member/userProfiles/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/oauthServer/member/userProfiles/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerUserProfile =>
    typia.random<IOauthServerUserProfile>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete user profile by ID.
 *
 * This API operation soft deletes a user profile identified by its unique ID.
 * Instead of physical deletion, it marks the profile as deleted by setting the
 * deleted_at timestamp.
 *
 * Soft deletion supports audit compliance and enables future recovery or
 * undelete if necessary.
 *
 * Authorization checks should ensure only permitted users can perform deletion.
 *
 * Once marked deleted, the profile is excluded from subsequent retrieval and
 * update operations.
 *
 * Clients receive no content in response as deletion confirmation.
 *
 * This approach facilitates compliance requirements while maintaining data
 * integrity within the OAuth server profile management.
 *
 * @param props.connection
 * @param props.id Unique identifier (UUID) of the user profile to delete
 * @path /oauthServer/member/userProfiles/:id
 * @accessor api.functional.oauthServer.member.userProfiles.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier (UUID) of the user profile to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/oauthServer/member/userProfiles/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/member/userProfiles/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
