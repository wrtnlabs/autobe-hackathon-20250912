import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IOauthServerUserGameProfile } from "../../../../../structures/IOauthServerUserGameProfile";
import { IPageIOauthServerUserGameProfile } from "../../../../../structures/IPageIOauthServerUserGameProfile";

/**
 * Create a new user game profile.
 *
 * Create a new game profile under a specific user profile. This includes
 * platform identifier, player name, and optional season for external game
 * accounts like PUBG and League of Legends.
 *
 * The operation validates user permissions and maintains referential integrity
 * with the user profile.
 *
 * Responds with the created game profile details.
 *
 * @param props.connection
 * @param props.userProfileId Unique identifier of the target user profile
 * @param props.body Information needed to create a user game profile
 * @path /oauthServer/member/userProfiles/:userProfileId/gameProfiles
 * @accessor api.functional.oauthServer.member.userProfiles.gameProfiles.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the target user profile */
    userProfileId: string & tags.Format<"uuid">;

    /** Information needed to create a user game profile */
    body: IOauthServerUserGameProfile.ICreate;
  };
  export type Body = IOauthServerUserGameProfile.ICreate;
  export type Response = IOauthServerUserGameProfile;

  export const METADATA = {
    method: "POST",
    path: "/oauthServer/member/userProfiles/:userProfileId/gameProfiles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/oauthServer/member/userProfiles/${encodeURIComponent(props.userProfileId ?? "null")}/gameProfiles`;
  export const random = (): IOauthServerUserGameProfile =>
    typia.random<IOauthServerUserGameProfile>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userProfileId")(() => typia.assert(props.userProfileId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and list game profiles for a user profile.
 *
 * Retrieve a filtered and paginated list of game profiles associated with a
 * specified user profile. This operation enables clients to search, filter, and
 * sort through a user's game profiles, including platform, player names, and
 * seasons.
 *
 * The operation requires the userProfileId path parameter to identify the
 * target user profile. It utilizes standard pagination parameters for efficient
 * data retrieval.
 *
 * Security considerations are in place to ensure only authorized users can view
 * game profiles. The response includes game profile summaries optimized for
 * list displays.
 *
 * This operation directly interacts with the oauth_server_game_profiles table,
 * supporting all queryable columns and filterable fields as defined in the
 * Prisma schema.
 *
 * Clients should use this endpoint to build user-facing features showing linked
 * game accounts.
 *
 * @param props.connection
 * @param props.userProfileId Unique identifier of the target user profile
 * @param props.body Search criteria and pagination parameters for user game
 *   profiles
 * @path /oauthServer/member/userProfiles/:userProfileId/gameProfiles
 * @accessor api.functional.oauthServer.member.userProfiles.gameProfiles.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the target user profile */
    userProfileId: string & tags.Format<"uuid">;

    /** Search criteria and pagination parameters for user game profiles */
    body: IOauthServerUserGameProfile.IRequest;
  };
  export type Body = IOauthServerUserGameProfile.IRequest;
  export type Response = IPageIOauthServerUserGameProfile.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/oauthServer/member/userProfiles/:userProfileId/gameProfiles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/oauthServer/member/userProfiles/${encodeURIComponent(props.userProfileId ?? "null")}/gameProfiles`;
  export const random = (): IPageIOauthServerUserGameProfile.ISummary =>
    typia.random<IPageIOauthServerUserGameProfile.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userProfileId")(() => typia.assert(props.userProfileId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a specific game profile.
 *
 * Retrieve detailed information of a specific game profile for a given user
 * profile by the game profile ID. This includes platform, player name, season,
 * and timestamps.
 *
 * Access is restricted to authorized users associated with the user profile.
 *
 * Directly queries the oauth_server_game_profiles table using the provided
 * identifiers.
 *
 * @param props.connection
 * @param props.userProfileId Unique identifier of the target user profile
 * @param props.id Unique identifier of the user game profile
 * @path /oauthServer/member/userProfiles/:userProfileId/gameProfiles/:id
 * @accessor api.functional.oauthServer.member.userProfiles.gameProfiles.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target user profile */
    userProfileId: string & tags.Format<"uuid">;

    /** Unique identifier of the user game profile */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IOauthServerUserGameProfile;

  export const METADATA = {
    method: "GET",
    path: "/oauthServer/member/userProfiles/:userProfileId/gameProfiles/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/member/userProfiles/${encodeURIComponent(props.userProfileId ?? "null")}/gameProfiles/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerUserGameProfile =>
    typia.random<IOauthServerUserGameProfile>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userProfileId")(() => typia.assert(props.userProfileId));
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update user game profile details.
 *
 * Update an existing game profile for a user profile. Allows changing the
 * platform, player name, and season fields.
 *
 * The operation ensures the user has permission to modify the resource and
 * maintains data integrity.
 *
 * Response contains the updated game profile information.
 *
 * @param props.connection
 * @param props.userProfileId Unique identifier of the target user profile
 * @param props.id Unique identifier of the user game profile
 * @param props.body Data to update the user game profile
 * @path /oauthServer/member/userProfiles/:userProfileId/gameProfiles/:id
 * @accessor api.functional.oauthServer.member.userProfiles.gameProfiles.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target user profile */
    userProfileId: string & tags.Format<"uuid">;

    /** Unique identifier of the user game profile */
    id: string & tags.Format<"uuid">;

    /** Data to update the user game profile */
    body: IOauthServerUserGameProfile.IUpdate;
  };
  export type Body = IOauthServerUserGameProfile.IUpdate;
  export type Response = IOauthServerUserGameProfile;

  export const METADATA = {
    method: "PUT",
    path: "/oauthServer/member/userProfiles/:userProfileId/gameProfiles/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/oauthServer/member/userProfiles/${encodeURIComponent(props.userProfileId ?? "null")}/gameProfiles/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerUserGameProfile =>
    typia.random<IOauthServerUserGameProfile>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userProfileId")(() => typia.assert(props.userProfileId));
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a user game profile by userProfileId and id.
 *
 * Permanently deletes a user's game profile record specified by userProfileId
 * and game profile id from the system.
 *
 * Only authorized users or administrators can perform this operation. Proper
 * validation ensures the specified record exists before deletion.
 *
 * The operation removes the entire record with no residual data. This API is
 * crucial for managing outdated or incorrect game profile data.
 *
 * Related operations include retrieval and update of game profiles and user
 * profiles for management and display.
 *
 * Errors are returned if the requested record does not exist or the requester
 * lacks permission.
 *
 * @param props.connection
 * @param props.userProfileId Unique identifier of the user profile
 * @param props.id Unique identifier of the game profile to delete
 * @path /oauthServer/member/userProfiles/:userProfileId/gameProfiles/:id
 * @accessor api.functional.oauthServer.member.userProfiles.gameProfiles.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the user profile */
    userProfileId: string & tags.Format<"uuid">;

    /** Unique identifier of the game profile to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/oauthServer/member/userProfiles/:userProfileId/gameProfiles/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/member/userProfiles/${encodeURIComponent(props.userProfileId ?? "null")}/gameProfiles/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userProfileId")(() => typia.assert(props.userProfileId));
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
