import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IOauthServerSocialUserLink } from "../../../../../structures/IOauthServerSocialUserLink";
import { IPageIOauthServerSocialUserLink } from "../../../../../structures/IPageIOauthServerSocialUserLink";

/**
 * Search social user links for a provider.
 *
 * Retrieve a paginated list of social user links filtered by the specified
 * social login provider.
 *
 * This operation supports advanced filtering, sorting, and pagination via the
 * request body.
 *
 * It targets the `oauth_server_social_user_links` table which maintains linkage
 * between internal users and external social OAuth identities.
 *
 * Only authorized users with the "developer" role can access this data.
 *
 * The response contains summarized social user link data for easy overview and
 * management.
 *
 * This operation is essential for administrators and developers managing social
 * authentication links securely and efficiently.
 *
 * @param props.connection
 * @param props.socialLoginProviderId Target social login provider's ID
 * @param props.body Search criteria and pagination parameters for social user
 *   links
 * @path /oauthServer/developer/socialLoginProviders/:socialLoginProviderId/socialUserLinks
 * @accessor api.functional.oauthServer.developer.socialLoginProviders.socialUserLinks.indexSocialUserLinksByProvider
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexSocialUserLinksByProvider(
  connection: IConnection,
  props: indexSocialUserLinksByProvider.Props,
): Promise<indexSocialUserLinksByProvider.Response> {
  return true === connection.simulate
    ? indexSocialUserLinksByProvider.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexSocialUserLinksByProvider.METADATA,
          path: indexSocialUserLinksByProvider.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace indexSocialUserLinksByProvider {
  export type Props = {
    /** Target social login provider's ID */
    socialLoginProviderId: string & tags.Format<"uuid">;

    /** Search criteria and pagination parameters for social user links */
    body: IOauthServerSocialUserLink.IRequest;
  };
  export type Body = IOauthServerSocialUserLink.IRequest;
  export type Response = IPageIOauthServerSocialUserLink.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/oauthServer/developer/socialLoginProviders/:socialLoginProviderId/socialUserLinks",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/oauthServer/developer/socialLoginProviders/${encodeURIComponent(props.socialLoginProviderId ?? "null")}/socialUserLinks`;
  export const random = (): IPageIOauthServerSocialUserLink.ISummary =>
    typia.random<IPageIOauthServerSocialUserLink.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: indexSocialUserLinksByProvider.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexSocialUserLinksByProvider.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("socialLoginProviderId")(() =>
        typia.assert(props.socialLoginProviderId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed social user link information.
 *
 * Fetch detailed information of a single social user link by ID under the
 * specified social login provider.
 *
 * Access restricted to users with the "developer" role.
 *
 * This operation reads from `oauth_server_social_user_links` table.
 *
 * Provides comprehensive data about the linkage between internal user accounts
 * and external social provider identities.
 *
 * Useful for auditing, troubleshooting, or management of social login
 * associations.
 *
 * @param props.connection
 * @param props.socialLoginProviderId Target social login provider's ID
 * @param props.id Target social user link's ID
 * @path /oauthServer/developer/socialLoginProviders/:socialLoginProviderId/socialUserLinks/:id
 * @accessor api.functional.oauthServer.developer.socialLoginProviders.socialUserLinks.atSocialUserLink
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atSocialUserLink(
  connection: IConnection,
  props: atSocialUserLink.Props,
): Promise<atSocialUserLink.Response> {
  return true === connection.simulate
    ? atSocialUserLink.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atSocialUserLink.METADATA,
          path: atSocialUserLink.path(props),
          status: null,
        },
      );
}
export namespace atSocialUserLink {
  export type Props = {
    /** Target social login provider's ID */
    socialLoginProviderId: string & tags.Format<"uuid">;

    /** Target social user link's ID */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IOauthServerSocialUserLink;

  export const METADATA = {
    method: "GET",
    path: "/oauthServer/developer/socialLoginProviders/:socialLoginProviderId/socialUserLinks/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/developer/socialLoginProviders/${encodeURIComponent(props.socialLoginProviderId ?? "null")}/socialUserLinks/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerSocialUserLink =>
    typia.random<IOauthServerSocialUserLink>();
  export const simulate = (
    connection: IConnection,
    props: atSocialUserLink.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atSocialUserLink.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("socialLoginProviderId")(() =>
        typia.assert(props.socialLoginProviderId),
      );
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
