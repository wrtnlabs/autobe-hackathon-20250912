import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IOauthServerSocialProvider } from "../../../../structures/IOauthServerSocialProvider";
export * as socialUserLinks from "./socialUserLinks/index";

/**
 * Update a social login provider configuration.
 *
 * Update an existing OAuth social login provider configuration in the system.
 * This operation allows full modification of the provider's OAuth client ID,
 * secret, authorization URLs, scopes, and active status.
 *
 * Only authorized users with "developer" role can perform this update.
 *
 * The underlying database table is `oauth_server_social_providers`, which
 * stores the external OAuth provider details necessary for social login
 * integration such as Naver, Google, Apple, etc.
 *
 * Validation includes uniqueness of the provider_name and verifying URLs are
 * well-formed.
 *
 * The response returns the updated social login provider record.
 *
 * Proper authorization and careful client secret management are crucial for
 * security.
 *
 * This operation supports the administrative use case of maintaining external
 * OAuth integrations securely and flexibly.
 *
 * @param props.connection
 * @param props.id Target social login provider's ID
 * @param props.body Update information of the social login provider
 * @path /oauthServer/developer/socialLoginProviders/:id
 * @accessor api.functional.oauthServer.developer.socialLoginProviders.updateSocialLoginProvider
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateSocialLoginProvider(
  connection: IConnection,
  props: updateSocialLoginProvider.Props,
): Promise<updateSocialLoginProvider.Response> {
  return true === connection.simulate
    ? updateSocialLoginProvider.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateSocialLoginProvider.METADATA,
          path: updateSocialLoginProvider.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateSocialLoginProvider {
  export type Props = {
    /** Target social login provider's ID */
    id: string & tags.Format<"uuid">;

    /** Update information of the social login provider */
    body: IOauthServerSocialProvider.IUpdate;
  };
  export type Body = IOauthServerSocialProvider.IUpdate;
  export type Response = IOauthServerSocialProvider;

  export const METADATA = {
    method: "PUT",
    path: "/oauthServer/developer/socialLoginProviders/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/oauthServer/developer/socialLoginProviders/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerSocialProvider =>
    typia.random<IOauthServerSocialProvider>();
  export const simulate = (
    connection: IConnection,
    props: updateSocialLoginProvider.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateSocialLoginProvider.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a social login provider.
 *
 * Permanently remove a social login provider from the system. This operation
 * cannot be undone and deletes all related OAuth configuration records.
 *
 * Only users with the "developer" role are authorized to execute this.
 *
 * Ensure no active integrations remain with the provider before deletion to
 * prevent OAuth flow disruptions.
 *
 * This operation targets the `oauth_server_social_providers` table.
 *
 * Use with caution as it affects social login availability for the provider.
 *
 * @param props.connection
 * @param props.id Target social login provider's ID
 * @path /oauthServer/developer/socialLoginProviders/:id
 * @accessor api.functional.oauthServer.developer.socialLoginProviders.eraseSocialLoginProvider
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseSocialLoginProvider(
  connection: IConnection,
  props: eraseSocialLoginProvider.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseSocialLoginProvider.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseSocialLoginProvider.METADATA,
          path: eraseSocialLoginProvider.path(props),
          status: null,
        },
      );
}
export namespace eraseSocialLoginProvider {
  export type Props = {
    /** Target social login provider's ID */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/oauthServer/developer/socialLoginProviders/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/developer/socialLoginProviders/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseSocialLoginProvider.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseSocialLoginProvider.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
