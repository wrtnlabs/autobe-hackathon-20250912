import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IOauthServerDeveloper } from "../../../../structures/IOauthServerDeveloper";

/**
 * Update OAuth server developer details by ID.
 *
 * Update an existing OAuth server developer's information by their unique ID.
 * This operation allows modification of developer-specific fields such as email
 * verification status and password hash. The ID parameter must be a valid UUID
 * string corresponding to an existing developer.
 *
 * Security considerations emphasize that only authorized developers can invoke
 * this endpoint. It references the oauth_server_developers table in the Prisma
 * schema, which dictates the developer data structure. Validation rules ensure
 * the ID path parameter is a UUID and the request body matches the IUpdate
 * schema structure.
 *
 * This endpoint complements fetch operations to retrieve developer details and
 * delete operations to remove developer records. Upon success, it returns the
 * updated developer entity information.
 *
 * @param props.connection
 * @param props.id Unique identifier of the OAuth server developer to update
 * @param props.body Updated information of the OAuth server developer
 * @path /oauthServer/developer/oauthServerDevelopers/:id
 * @accessor api.functional.oauthServer.developer.oauthServerDevelopers.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the OAuth server developer to update */
    id: string & tags.Format<"uuid">;

    /** Updated information of the OAuth server developer */
    body: IOauthServerDeveloper.IUpdate;
  };
  export type Body = IOauthServerDeveloper.IUpdate;
  export type Response = IOauthServerDeveloper;

  export const METADATA = {
    method: "PUT",
    path: "/oauthServer/developer/oauthServerDevelopers/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/oauthServer/developer/oauthServerDevelopers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerDeveloper =>
    typia.random<IOauthServerDeveloper>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete OAuth server developer by ID.
 *
 * Permanently erase the OAuth server developer record identified by the ID
 * parameter. This operation removes the developer from the system database
 * irreversibly.
 *
 * Security concerns require the caller to have the 'developer' role. The ID
 * must be a valid UUID corresponding to an existing developer.
 *
 * No soft delete behavior is applied as per schema design. This operation
 * complements update and fetch endpoints for developer entities.
 *
 * @param props.connection
 * @param props.id Unique identifier of the OAuth server developer to delete
 * @path /oauthServer/developer/oauthServerDevelopers/:id
 * @accessor api.functional.oauthServer.developer.oauthServerDevelopers.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the OAuth server developer to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/oauthServer/developer/oauthServerDevelopers/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/developer/oauthServerDevelopers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
