import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IOauthServerAuthorizationCode } from "../../../../structures/IOauthServerAuthorizationCode";
import { IPageIOauthServerAuthorizationCode } from "../../../../structures/IPageIOauthServerAuthorizationCode";

/**
 * Create a new OAuth authorization code record.
 *
 * Creates a new OAuth authorization code record. This operation accepts a
 * unique authorization code linked to a specific OAuth client along with data
 * including the OAuth request JSONB and redirect URI. The authorization code is
 * used as part of the OAuth 2.0 authorization code grant flow to grant tokens
 * to clients.
 *
 * The response confirms creation of the record including timestamps and soft
 * delete fields.
 *
 * Security requires that only authenticated clients or management systems can
 * perform this creation. Proper validation protects against duplicate
 * authorization code issuance.
 *
 * This operation is foundational for OAuth authorization processes and pairs
 * with token issuance operations that consume these authorization codes.
 *
 * @param props.connection
 * @param props.body Creation information for authorization code
 * @path /oauthServer/developer/authorizationCodes
 * @accessor api.functional.oauthServer.developer.authorizationCodes.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation information for authorization code */
    body: IOauthServerAuthorizationCode.ICreate;
  };
  export type Body = IOauthServerAuthorizationCode.ICreate;
  export type Response = IOauthServerAuthorizationCode;

  export const METADATA = {
    method: "POST",
    path: "/oauthServer/developer/authorizationCodes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/oauthServer/developer/authorizationCodes";
  export const random = (): IOauthServerAuthorizationCode =>
    typia.random<IOauthServerAuthorizationCode>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search OAuth authorization codes with filters and pagination.
 *
 * Retrieve a paginated list of OAuth authorization codes with advanced
 * filtering and sorting support. The authorization codes are linked to OAuth
 * clients and include data such as the unique code string, OAuth jsonb request
 * data, redirect URI, and expiry information.
 *
 * This operation accesses the `oauth_server_authorization_codes` table in the
 * database, leveraging the Prisma schema structure. The request allows
 * specifying filters on various properties to narrow down results.
 *
 * Only users with the 'developer' role can perform this operation, ensuring
 * access control. The response contains a paginated collection of authorization
 * code summary data, useful for client credential management and auditing.
 *
 * @param props.connection
 * @param props.body Filtering, sorting, and pagination parameters for
 *   authorization code search
 * @path /oauthServer/developer/authorizationCodes
 * @accessor api.functional.oauthServer.developer.authorizationCodes.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Filtering, sorting, and pagination parameters for authorization code
     * search
     */
    body: IOauthServerAuthorizationCode.IRequest;
  };
  export type Body = IOauthServerAuthorizationCode.IRequest;
  export type Response = IPageIOauthServerAuthorizationCode.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/oauthServer/developer/authorizationCodes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/oauthServer/developer/authorizationCodes";
  export const random = (): IPageIOauthServerAuthorizationCode.ISummary =>
    typia.random<IPageIOauthServerAuthorizationCode.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed OAuth authorization code by ID.
 *
 * Retrieve detailed OAuth authorization code information identified by its
 * unique ID.
 *
 * The operation is secure and visible only to users with the 'developer' role.
 * The ID parameter must be a UUID string of an existing authorization code.
 *
 * It returns the full structure of the authorization code including the secure
 * OAuth JSONB request data and metadata about the code's lifecycle and client
 * association.
 *
 * @param props.connection
 * @param props.id Unique identifier of the OAuth authorization code
 * @path /oauthServer/developer/authorizationCodes/:id
 * @accessor api.functional.oauthServer.developer.authorizationCodes.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the OAuth authorization code */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IOauthServerAuthorizationCode;

  export const METADATA = {
    method: "GET",
    path: "/oauthServer/developer/authorizationCodes/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/developer/authorizationCodes/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerAuthorizationCode =>
    typia.random<IOauthServerAuthorizationCode>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
