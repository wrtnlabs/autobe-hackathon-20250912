import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IOauthServerPointCoupon } from "../../../../structures/IOauthServerPointCoupon";

/**
 * Retrieve details of a specific point coupon by ID.
 *
 * Retrieve detailed information about a point coupon identified by its unique
 * ID. This operation accesses the PointCoupon entity, which represents coupon
 * codes used for granting points to users. The entity includes fields such as
 * unique code, description, value, usage limits, expiration date, and audit
 * tracking timestamps.
 *
 * This operation requires administrative or developer permissions to access
 * sensitive coupon data. It ensures that the requesting user is authorized to
 * view point coupon details.
 *
 * The response includes all cached and up-to-date coupon metadata as stored in
 * the database. Proper error handling is expected for invalid or non-existent
 * coupon IDs.
 *
 * @param props.connection
 * @param props.id Unique identifier of the point coupon
 * @path /oauthServer/developer/pointCoupons/:id
 * @accessor api.functional.oauthServer.developer.pointCoupons.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the point coupon */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IOauthServerPointCoupon;

  export const METADATA = {
    method: "GET",
    path: "/oauthServer/developer/pointCoupons/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/developer/pointCoupons/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerPointCoupon =>
    typia.random<IOauthServerPointCoupon>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
