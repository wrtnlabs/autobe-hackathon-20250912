import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IOauthServerTokenMonitor } from "../../../../structures/IOauthServerTokenMonitor";
import { IPageIOauthServerTokenMonitor } from "../../../../structures/IPageIOauthServerTokenMonitor";

/**
 * Create a new OAuth token monitor event record linking an access token event
 * with the related client, including event type, IP address, user agent, and
 * timestamps.
 *
 * Only users with admin or developer roles may create token monitor events.
 *
 * The input request must provide event_type (e.g., validation, expiration),
 * access_token_id, client IP, and optionally user agent information.
 *
 * The API responds with the newly created event record details.
 *
 * Failure occurs on missing required fields, duplicate entries, or unauthorized
 * roles.
 *
 * @param props.connection
 * @param props.body Creation info of the OAuth token monitor event
 * @path /oauthServer/developer/oauthServerTokenMonitors
 * @accessor api.functional.oauthServer.developer.oauthServerTokenMonitors.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation info of the OAuth token monitor event */
    body: IOauthServerTokenMonitor.ICreate;
  };
  export type Body = IOauthServerTokenMonitor.ICreate;
  export type Response = IOauthServerTokenMonitor;

  export const METADATA = {
    method: "POST",
    path: "/oauthServer/developer/oauthServerTokenMonitors",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/oauthServer/developer/oauthServerTokenMonitors";
  export const random = (): IOauthServerTokenMonitor =>
    typia.random<IOauthServerTokenMonitor>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve paginated OAuth token monitor events.
 *
 * Retrieve a filtered and paginated list of OAuth server token monitor records
 * from the system. This operation provides advanced querying capabilities
 * allowing clients to filter token events by event type, client id, IP address,
 * and time ranges.
 *
 * The response includes metadata capturing details such as event type (e.g.,
 * validation, expiration, revocation), event timestamp, associated OAuth
 * client, IP address, and user agent string.
 *
 * Security considerations include restricting this endpoint to authorized admin
 * and developer roles due to sensitive nature of token event logs. Efficient
 * access and pagination help handle large event volumes.
 *
 * This operation corresponds to the 'oauth_server_token_monitors' table in
 * Prisma schema. It is essential for token usage auditing, security monitoring,
 * and forensic analysis.
 *
 * Advanced searching and pagination capabilities allow administrators to
 * monitor token activity trends and detect anomalies. The API supports sorting
 * results by event timestamp and filtering by client identifier.
 *
 * Errors are handled with standard HTTP codes and descriptive messages for
 * invalid filter parameters and unauthorized access attempts.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for OAuth token
 *   monitor filtering
 * @path /oauthServer/developer/oauthServerTokenMonitors
 * @accessor api.functional.oauthServer.developer.oauthServerTokenMonitors.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for OAuth token monitor
     * filtering
     */
    body: IOauthServerTokenMonitor.IRequest;
  };
  export type Body = IOauthServerTokenMonitor.IRequest;
  export type Response = IPageIOauthServerTokenMonitor.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/oauthServer/developer/oauthServerTokenMonitors",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/oauthServer/developer/oauthServerTokenMonitors";
  export const random = (): IPageIOauthServerTokenMonitor.ISummary =>
    typia.random<IPageIOauthServerTokenMonitor.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information of a specific OAuth token monitor event.
 *
 * Retrieve detailed information about a specific OAuth token monitor event by
 * its ID. This includes event type, timestamps, client IP, user agent data, and
 * related client and token details.
 *
 * Access is restricted to users with admin or developer roles to protect
 * sensitive audit data.
 *
 * This corresponds to the 'oauth_server_token_monitors' table in the Prisma
 * schema.
 *
 * @param props.connection
 * @param props.id Unique identifier of the OAuth token monitor event
 * @path /oauthServer/developer/oauthServerTokenMonitors/:id
 * @accessor api.functional.oauthServer.developer.oauthServerTokenMonitors.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the OAuth token monitor event */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IOauthServerTokenMonitor;

  export const METADATA = {
    method: "GET",
    path: "/oauthServer/developer/oauthServerTokenMonitors/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/developer/oauthServerTokenMonitors/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerTokenMonitor =>
    typia.random<IOauthServerTokenMonitor>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing OAuth token monitor event.
 *
 * Update details of an existing OAuth token monitor event by its ID. Allows
 * modification of event type, IP address, user agent, etc.
 *
 * Authorized roles 'admin' and 'developer' only.
 *
 * The request includes updated event data except for immutable fields like ID
 * and timestamps.
 *
 * Error handling for invalid IDs and permission violations is implemented.
 *
 * This operation modifies 'oauth_server_token_monitors' table records.
 *
 * @param props.connection
 * @param props.id Unique identifier of the OAuth token monitor event to update
 * @param props.body Update information for the OAuth token monitor event
 * @path /oauthServer/developer/oauthServerTokenMonitors/:id
 * @accessor api.functional.oauthServer.developer.oauthServerTokenMonitors.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the OAuth token monitor event to update */
    id: string & tags.Format<"uuid">;

    /** Update information for the OAuth token monitor event */
    body: IOauthServerTokenMonitor.IUpdate;
  };
  export type Body = IOauthServerTokenMonitor.IUpdate;
  export type Response = IOauthServerTokenMonitor;

  export const METADATA = {
    method: "PUT",
    path: "/oauthServer/developer/oauthServerTokenMonitors/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/oauthServer/developer/oauthServerTokenMonitors/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerTokenMonitor =>
    typia.random<IOauthServerTokenMonitor>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
