import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IOauthServerGuest } from "../../../../structures/IOauthServerGuest";

/**
 * Create new oauthServerGuest entity.
 *
 * Create a new guest user entity in the OAuth server system.
 *
 * This endpoint allows the creation of a new oauthServerGuest record, which
 * represents an unauthenticated or anonymous visitor able to utilize
 * public-facing services such as login and registration initiation.
 *
 * Guest user entities have minimal details, primarily a unique UUID identifier,
 * with audit timestamps for creation and last modification.
 *
 * Soft deletion is handled automatically via the deleted_at timestamp field and
 * is not explicitly managed by the user during creation.
 *
 * No user authentication is required to create a guest user since it represents
 * an anonymous entity.
 *
 * This resource follows standard REST principles with POST method to
 * /oauthServerGuests endpoint.
 *
 * @param props.connection
 * @param props.body Creation info of the oauthServerGuest entity
 * @path /oauthServer/guest/oauthServerGuests
 * @accessor api.functional.oauthServer.guest.oauthServerGuests.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation info of the oauthServerGuest entity */
    body: IOauthServerGuest.ICreate;
  };
  export type Body = IOauthServerGuest.ICreate;
  export type Response = IOauthServerGuest;

  export const METADATA = {
    method: "POST",
    path: "/oauthServer/guest/oauthServerGuests",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/oauthServer/guest/oauthServerGuests";
  export const random = (): IOauthServerGuest =>
    typia.random<IOauthServerGuest>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing oauthServerGuest entity by its unique ID.
 *
 * The operation allows modifying the guest user record, which minimally
 * contains system-managed timestamps and soft delete support.
 *
 * Since guest entities represent anonymous users, modifications might be
 * limited.
 *
 * PUT method is applied to the endpoint /oauthServerGuests/{id} where the {id}
 * parameter identifies the target guest record.
 *
 * Authorization role required is 'guest' representing the allowed access level
 * to update this entity.
 *
 * Request body must conform to IOauthServerGuest.IUpdate input interface
 * containing update fields.
 *
 * Response returns the updated oauthServerGuest entity data.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target oauthServerGuest entity
 * @param props.body Update info for the target oauthServerGuest entity
 * @path /oauthServer/guest/oauthServerGuests/:id
 * @accessor api.functional.oauthServer.guest.oauthServerGuests.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target oauthServerGuest entity */
    id: string & tags.Format<"uuid">;

    /** Update info for the target oauthServerGuest entity */
    body: IOauthServerGuest.IUpdate;
  };
  export type Body = IOauthServerGuest.IUpdate;
  export type Response = IOauthServerGuest;

  export const METADATA = {
    method: "PUT",
    path: "/oauthServer/guest/oauthServerGuests/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/oauthServer/guest/oauthServerGuests/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerGuest =>
    typia.random<IOauthServerGuest>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Erase an oauthServerGuest entity by ID.
 *
 * Erase (delete) a specific oauthServerGuest entity by unique ID.
 *
 * This operation removes the guest user record from the database entirely.
 *
 * Performing this operation deletes all related data permanently and cannot be
 * undone.
 *
 * It handles deletion via HTTP DELETE method on /oauthServerGuests/{id}
 * endpoint.
 *
 * Authorization requires the 'guest' role.
 *
 * No request body or response body is included for this endpoint.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target oauthServerGuest entity
 * @path /oauthServer/guest/oauthServerGuests/:id
 * @accessor api.functional.oauthServer.guest.oauthServerGuests.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target oauthServerGuest entity */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/oauthServer/guest/oauthServerGuests/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/guest/oauthServerGuests/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
