import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IOauthServerDeveloper } from "../../../../structures/IOauthServerDeveloper";
import { IPageIOauthServerDeveloper } from "../../../../structures/IPageIOauthServerDeveloper";

/**
 * Create a new OAuth developer user account.
 *
 * Accepts developer data including email, email verification status, and
 * password hash. Stores new record in oauth_server_developers table with
 * creation timestamps.
 *
 * This endpoint requires administrative or developer privileges to perform.
 *
 * Returns the created developer information including assigned UUID.
 *
 * @param props.connection
 * @param props.body Developer creation data
 * @path /oauthServer/admin/oauthServerDevelopers
 * @accessor api.functional.oauthServer.admin.oauthServerDevelopers.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Developer creation data */
    body: IOauthServerDeveloper.ICreate;
  };
  export type Body = IOauthServerDeveloper.ICreate;
  export type Response = IOauthServerDeveloper;

  export const METADATA = {
    method: "POST",
    path: "/oauthServer/admin/oauthServerDevelopers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/oauthServer/admin/oauthServerDevelopers";
  export const random = (): IOauthServerDeveloper =>
    typia.random<IOauthServerDeveloper>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of OAuth developers.
 *
 * Retrieve a filtered and paginated list of OAuth server developer accounts.
 * This operation allows administrators and authorized users to search
 * developers based on criteria such as email, verification status, and creation
 * date.
 *
 * The oauth_server_developers model includes fields such as the unique id,
 * email, email verification flag, password hash, and timestamps. The operation
 * supports sorting and pagination to efficiently navigate large developer
 * lists.
 *
 * Security considerations dictate that only authorized roles such as admin or
 * developer themselves can access this data. Proper pagination prevents
 * performance issues.
 *
 * This operation corresponds to a PATCH HTTP method for supporting complex
 * search criteria passed in the request body.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for OAuth
 *   developer filtering
 * @path /oauthServer/admin/oauthServerDevelopers
 * @accessor api.functional.oauthServer.admin.oauthServerDevelopers.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for OAuth developer
     * filtering
     */
    body: IOauthServerDeveloper.IRequest;
  };
  export type Body = IOauthServerDeveloper.IRequest;
  export type Response = IPageIOauthServerDeveloper;

  export const METADATA = {
    method: "PATCH",
    path: "/oauthServer/admin/oauthServerDevelopers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/oauthServer/admin/oauthServerDevelopers";
  export const random = (): IPageIOauthServerDeveloper =>
    typia.random<IPageIOauthServerDeveloper>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get OAuth developer details by ID.
 *
 * Retrieve detailed information of a single OAuth server developer by their
 * unique ID.
 *
 * The operation requires the developer ID as path parameter and returns all
 * fields defined in the oauth_server_developers model including email and
 * verification status.
 *
 * Only authorized users such as admin and the developer themselves should
 * access this endpoint to protect sensitive data like password hashes.
 *
 * This corresponds to a GET HTTP method with path parameter 'id'.
 *
 * @param props.connection
 * @param props.id Unique identifier of the OAuth developer
 * @path /oauthServer/admin/oauthServerDevelopers/:id
 * @accessor api.functional.oauthServer.admin.oauthServerDevelopers.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the OAuth developer */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IOauthServerDeveloper;

  export const METADATA = {
    method: "GET",
    path: "/oauthServer/admin/oauthServerDevelopers/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/admin/oauthServerDevelopers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerDeveloper =>
    typia.random<IOauthServerDeveloper>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
