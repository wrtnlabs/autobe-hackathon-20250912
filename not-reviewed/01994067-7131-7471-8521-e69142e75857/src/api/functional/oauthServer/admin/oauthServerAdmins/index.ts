import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IOauthServerOauthServerAdmins } from "../../../../structures/IOauthServerOauthServerAdmins";
import { IPageIOauthServerOauthServerAdmins } from "../../../../structures/IPageIOauthServerOauthServerAdmins";

/**
 * Create a new OAuth server admin user.
 *
 * Create a new OAuth server administrator user account with specified email,
 * verified status, hashed password, and timestamps.
 *
 * The operation validates uniqueness of the email and password security.
 *
 * Only users with the 'admin' role can perform this operation due to its
 * sensitive nature.
 *
 * Upon success, the created administrator record is returned.
 *
 * This operation supports administrative delegation and expansion of the admin
 * user base securely.
 *
 * @param props.connection
 * @param props.body Creation information of OAuth server admin user
 * @path /oauthServer/admin/oauthServerAdmins
 * @accessor api.functional.oauthServer.admin.oauthServerAdmins.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation information of OAuth server admin user */
    body: IOauthServerOauthServerAdmins.ICreate;
  };
  export type Body = IOauthServerOauthServerAdmins.ICreate;
  export type Response = IOauthServerOauthServerAdmins;

  export const METADATA = {
    method: "POST",
    path: "/oauthServer/admin/oauthServerAdmins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/oauthServer/admin/oauthServerAdmins";
  export const random = (): IOauthServerOauthServerAdmins =>
    typia.random<IOauthServerOauthServerAdmins>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of OAuth server admins.
 *
 * This endpoint provides a paginated search and retrieval operation for OAuth
 * server administrator user accounts. It queries the 'oauth_server_admins'
 * table, including all relevant fields such as email, email verification
 * status, and audit timestamps.
 *
 * Paging, sorting, and search filters are supported to facilitate
 * administrative management and review.
 *
 * Authorization for this operation is granted to users with the 'admin' role
 * only, ensuring sensitive data protection.
 *
 * The response delivers concise summary information optimized for listing
 * views.
 *
 * This operation is a standard search endpoint and is integral to the
 * administrator management UI and monitoring tools.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for OAuth server
 *   admins filtering
 * @path /oauthServer/admin/oauthServerAdmins
 * @accessor api.functional.oauthServer.admin.oauthServerAdmins.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for OAuth server admins
     * filtering
     */
    body: IOauthServerOauthServerAdmins.IRequest;
  };
  export type Body = IOauthServerOauthServerAdmins.IRequest;
  export type Response = IPageIOauthServerOauthServerAdmins.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/oauthServer/admin/oauthServerAdmins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/oauthServer/admin/oauthServerAdmins";
  export const random = (): IPageIOauthServerOauthServerAdmins.ISummary =>
    typia.random<IPageIOauthServerOauthServerAdmins.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get specific OAuth server admin user by ID.
 *
 * Retrieve detailed information of a specific OAuth server administrator by
 * their unique ID.
 *
 * This operation accesses the 'oauth_server_admins' table, fetching all
 * properties including email, verification flag, and audit timestamps.
 *
 * Access is restricted to authenticated users with the 'admin' role to maintain
 * sensitive data confidentiality.
 *
 * Errors occur if the specified admin ID does not exist or is soft deleted.
 *
 * This operation is critical for admin user profile management and detail
 * viewing.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target OAuth server admin user
 * @path /oauthServer/admin/oauthServerAdmins/:id
 * @accessor api.functional.oauthServer.admin.oauthServerAdmins.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target OAuth server admin user */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IOauthServerOauthServerAdmins;

  export const METADATA = {
    method: "GET",
    path: "/oauthServer/admin/oauthServerAdmins/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/admin/oauthServerAdmins/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerOauthServerAdmins =>
    typia.random<IOauthServerOauthServerAdmins>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing OAuth server admin user.
 *
 * Modify details of an existing OAuth server admin user identified by the
 * unique ID.
 *
 * Fields such as email, email verification status, and password hash can be
 * updated.
 *
 * The operation is restricted to users with the 'admin' role.
 *
 * Failure occurs if the admin ID is not found or soft deleted.
 *
 * This supports secure and controlled administrative user data management.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target OAuth server admin user
 * @param props.body Updated information for the OAuth server admin user
 * @path /oauthServer/admin/oauthServerAdmins/:id
 * @accessor api.functional.oauthServer.admin.oauthServerAdmins.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target OAuth server admin user */
    id: string & tags.Format<"uuid">;

    /** Updated information for the OAuth server admin user */
    body: IOauthServerOauthServerAdmins.IUpdate;
  };
  export type Body = IOauthServerOauthServerAdmins.IUpdate;
  export type Response = IOauthServerOauthServerAdmins;

  export const METADATA = {
    method: "PUT",
    path: "/oauthServer/admin/oauthServerAdmins/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/oauthServer/admin/oauthServerAdmins/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerOauthServerAdmins =>
    typia.random<IOauthServerOauthServerAdmins>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete an OAuth admin account.
 *
 * Delete an OAuth administrator account by its ID.
 *
 * This operation performs a soft delete by setting the deleted_at field. It
 * ensures that the user's data is not permanently lost for auditing but is
 * excluded from active records.
 *
 * Only users with admin role should access this operation.
 *
 * The request requires the administrator's ID as a path parameter.
 *
 * @param props.connection
 * @param props.id Unique identifier of the OAuth admin to delete
 * @path /oauthServer/admin/oauthServerAdmins/:id
 * @accessor api.functional.oauthServer.admin.oauthServerAdmins.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the OAuth admin to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/oauthServer/admin/oauthServerAdmins/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/admin/oauthServerAdmins/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
