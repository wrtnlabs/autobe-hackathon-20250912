import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IOauthServerUserPointHistory } from "../../../../../structures/IOauthServerUserPointHistory";
import { IPageIOauthServerUserPointHistory } from "../../../../../structures/IPageIOauthServerUserPointHistory";

/**
 * List point transaction histories for a user point.
 *
 * Retrieve a filtered and paginated list of point transaction histories for a
 * particular user point balance. This operation helps admins or automated
 * systems monitor and audit point changes including additions and
 * subtractions.
 *
 * Pagination and filtering parameters allow control over the volume and order
 * of results.
 *
 * The response includes summaries of each transaction, such as amount changed,
 * resulting balance, reason for change, and timestamps.
 *
 * This operation requires the user point ID to narrow down the histories and is
 * authorized for administrative roles due to sensitive nature.
 *
 * @param props.connection
 * @param props.userPointId Unique identifier of the user point whose
 *   transaction histories are to be retrieved
 * @param props.body Filter and pagination parameters for user point transaction
 *   histories
 * @path /oauthServer/admin/userPoints/:userPointId/histories
 * @accessor api.functional.oauthServer.admin.userPoints.histories.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier of the user point whose transaction histories are
     * to be retrieved
     */
    userPointId: string & tags.Format<"uuid">;

    /** Filter and pagination parameters for user point transaction histories */
    body: IOauthServerUserPointHistory.IRequest;
  };
  export type Body = IOauthServerUserPointHistory.IRequest;
  export type Response = IPageIOauthServerUserPointHistory.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/oauthServer/admin/userPoints/:userPointId/histories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/oauthServer/admin/userPoints/${encodeURIComponent(props.userPointId ?? "null")}/histories`;
  export const random = (): IPageIOauthServerUserPointHistory.ISummary =>
    typia.random<IPageIOauthServerUserPointHistory.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userPointId")(() => typia.assert(props.userPointId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a user point transaction history record.
 *
 * Retrieve detailed information of a single point transaction history record
 * pertaining to a user point balance. This is used for audit or investigation
 * of specific point changes.
 *
 * The response includes the change amount, balance after change, reason string,
 * and audit timestamps.
 *
 * Authorization is restricted to users with administrative permissions.
 *
 * This operation requires the unique history record ID to fetch the detailed
 * record.
 *
 * @param props.connection
 * @param props.userPointId User point ID to which the history belongs
 * @param props.id Unique identifier of the point transaction history record
 * @path /oauthServer/admin/userPoints/:userPointId/histories/:id
 * @accessor api.functional.oauthServer.admin.userPoints.histories.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** User point ID to which the history belongs */
    userPointId: string & tags.Format<"uuid">;

    /** Unique identifier of the point transaction history record */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IOauthServerUserPointHistory;

  export const METADATA = {
    method: "GET",
    path: "/oauthServer/admin/userPoints/:userPointId/histories/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/admin/userPoints/${encodeURIComponent(props.userPointId ?? "null")}/histories/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerUserPointHistory =>
    typia.random<IOauthServerUserPointHistory>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userPointId")(() => typia.assert(props.userPointId));
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
