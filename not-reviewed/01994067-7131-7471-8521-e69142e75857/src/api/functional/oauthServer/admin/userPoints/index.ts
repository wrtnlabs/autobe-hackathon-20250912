import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IOauthServerUserPoint } from "../../../../structures/IOauthServerUserPoint";
import { IPageIOauthServerUserPoint } from "../../../../structures/IPageIOauthServerUserPoint";
export * as histories from "./histories/index";

/**
 * Create a user point record.
 *
 * Creates a user point record, initializing point balance for a given user.
 *
 * Restricted to admin role due to financial sensitivity.
 *
 * Requires validation that user exists and balance is valid.
 *
 * Supports system integration with point transaction histories and coupon
 * usage.
 *
 * Errors arise from duplicate records or invalid input.
 *
 * @param props.connection
 * @param props.body User point creation data including user ID and initial
 *   balance
 * @path /oauthServer/admin/userPoints
 * @accessor api.functional.oauthServer.admin.userPoints.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** User point creation data including user ID and initial balance */
    body: IOauthServerUserPoint.ICreate;
  };
  export type Body = IOauthServerUserPoint.ICreate;
  export type Response = IOauthServerUserPoint;

  export const METADATA = {
    method: "POST",
    path: "/oauthServer/admin/userPoints",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/oauthServer/admin/userPoints";
  export const random = (): IOauthServerUserPoint =>
    typia.random<IOauthServerUserPoint>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List user points with pagination and filtering.
 *
 * Provides a paginated listing of user point balances with optional filtering
 * criteria. Intended for administrative use due to sensitive financial data.
 *
 * Access control limits this endpoint to admin roles.
 *
 * Supports pagination, filtering, and sorting to facilitate efficient user
 * point management.
 *
 * Relates to user point histories and coupon usage records in the system.
 *
 * Errors include invalid filters or lack of privileges.
 *
 * @param props.connection
 * @param props.body Request parameters including pagination and filtering
 *   criteria for user points
 * @path /oauthServer/admin/userPoints
 * @accessor api.functional.oauthServer.admin.userPoints.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Request parameters including pagination and filtering criteria for
     * user points
     */
    body: IOauthServerUserPoint.IRequest;
  };
  export type Body = IOauthServerUserPoint.IRequest;
  export type Response = IPageIOauthServerUserPoint;

  export const METADATA = {
    method: "PATCH",
    path: "/oauthServer/admin/userPoints",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/oauthServer/admin/userPoints";
  export const random = (): IPageIOauthServerUserPoint =>
    typia.random<IPageIOauthServerUserPoint>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get user point details by id.
 *
 * Returns the detailed user point record for the given id. Includes balance and
 * related metadata.
 *
 * Limited to admin role access due to sensitive data.
 *
 * Handles errors when record does not exist with proper HTTP responses.
 *
 * @param props.connection
 * @param props.id Unique identifier of the user point record
 * @path /oauthServer/admin/userPoints/:id
 * @accessor api.functional.oauthServer.admin.userPoints.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the user point record */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IOauthServerUserPoint;

  export const METADATA = {
    method: "GET",
    path: "/oauthServer/admin/userPoints/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/admin/userPoints/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerUserPoint =>
    typia.random<IOauthServerUserPoint>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a user point balance record.
 *
 * Update the details of an existing user point balance record in the OAuth
 * server. This operation is responsible for modifying the user's current point
 * balance, an essential part of the system managing point transactions for
 * various usage scenarios like icon purchases or other digital goods.
 *
 * Only authorized users such as administrators or internal systems should
 * perform this update operation to ensure data integrity and security.
 *
 * The oauth_server_user_points table includes the following key fields:
 *
 * - Id: Unique identifier of the user point record
 * - User_id: Reference to the user owning the points (immutable here)
 * - Balance: The current total point balance of the user
 * - Created_at and updated_at: These timestamps represent audit fields
 * - Deleted_at: Soft delete timestamp to mark record as logically deleted
 *
 * This update operation focuses on modifying the balance field while
 * maintaining data consistency and valid audit mechanisms. Proper validation
 * must be enforced to prevent negative balances unless business logic allows
 * it.
 *
 * The operation requires the unique identifier of the user point record and the
 * new balance value. It returns the updated user point record upon success.
 *
 * @param props.connection
 * @param props.id Unique identifier of the user point record to update
 * @param props.body Updated information for the user point balance record
 * @path /oauthServer/admin/userPoints/:id
 * @accessor api.functional.oauthServer.admin.userPoints.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the user point record to update */
    id: string & tags.Format<"uuid">;

    /** Updated information for the user point balance record */
    body: IOauthServerUserPoint.IUpdate;
  };
  export type Body = IOauthServerUserPoint.IUpdate;
  export type Response = IOauthServerUserPoint;

  export const METADATA = {
    method: "PUT",
    path: "/oauthServer/admin/userPoints/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/oauthServer/admin/userPoints/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerUserPoint =>
    typia.random<IOauthServerUserPoint>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a user point balance record permanently.
 *
 * Delete a user point balance record from the OAuth server database. This
 * action irreversibly removes the record for compliance or cleanup purposes.
 *
 * Ensure that only users with administrator privileges perform this permanent
 * deletion action.
 *
 * The OAuth server schema natively supports soft deletion via deleted_at
 * fields; however, this operation explicitly performs a hard delete to fully
 * remove the record.
 *
 * No additional data is provided or returned.
 *
 * The operation accepts the unique user point record ID as a path parameter.
 *
 * @param props.connection
 * @param props.id Unique identifier of the user point record to delete
 * @path /oauthServer/admin/userPoints/:id
 * @accessor api.functional.oauthServer.admin.userPoints.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the user point record to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/oauthServer/admin/userPoints/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/admin/userPoints/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
