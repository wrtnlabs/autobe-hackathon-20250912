import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IOauthServerPointCoupon } from "../../../../structures/IOauthServerPointCoupon";

/**
 * Retrieve details of a specific point coupon by ID.
 *
 * Retrieve detailed information about a point coupon identified by its unique
 * ID. This operation accesses the PointCoupon entity, which represents coupon
 * codes used for granting points to users. The entity includes fields such as
 * unique code, description, value, usage limits, expiration date, and audit
 * tracking timestamps.
 *
 * This operation requires administrative or developer permissions to access
 * sensitive coupon data. It ensures that the requesting user is authorized to
 * view point coupon details.
 *
 * The response includes all cached and up-to-date coupon metadata as stored in
 * the database. Proper error handling is expected for invalid or non-existent
 * coupon IDs.
 *
 * @param props.connection
 * @param props.id Unique identifier of the point coupon
 * @path /oauthServer/admin/pointCoupons/:id
 * @accessor api.functional.oauthServer.admin.pointCoupons.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the point coupon */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IOauthServerPointCoupon;

  export const METADATA = {
    method: "GET",
    path: "/oauthServer/admin/pointCoupons/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/admin/pointCoupons/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerPointCoupon =>
    typia.random<IOauthServerPointCoupon>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update details of an existing point coupon.
 *
 * Update an existing point coupon's details by ID. This operation modifies
 * coupon properties including code, description, point value, max issuance
 * count, and expiration date.
 *
 * Administrative authorization is required to make changes to ensure controlled
 * promotional campaign management.
 *
 * The updated coupon entity with current timestamps is returned in the
 * response. Proper error handling is expected for invalid IDs or input.
 *
 * @param props.connection
 * @param props.id Unique identifier of the point coupon to update
 * @param props.body Point coupon update data
 * @path /oauthServer/admin/pointCoupons/:id
 * @accessor api.functional.oauthServer.admin.pointCoupons.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the point coupon to update */
    id: string & tags.Format<"uuid">;

    /** Point coupon update data */
    body: IOauthServerPointCoupon.IUpdate;
  };
  export type Body = IOauthServerPointCoupon.IUpdate;
  export type Response = IOauthServerPointCoupon;

  export const METADATA = {
    method: "PUT",
    path: "/oauthServer/admin/pointCoupons/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/oauthServer/admin/pointCoupons/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerPointCoupon =>
    typia.random<IOauthServerPointCoupon>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a point coupon by ID.
 *
 * Soft delete a point coupon by marking its deletedAt timestamp. This operation
 * restricts physical removal to maintain historical data for audit and
 * compliance purposes.
 *
 * Access is limited to administrators to prevent unauthorized removal of
 * coupons.
 *
 * Successful operation returns no content and removes the coupon from active
 * usage.
 *
 * @param props.connection
 * @param props.id Unique identifier of the point coupon to delete
 * @path /oauthServer/admin/pointCoupons/:id
 * @accessor api.functional.oauthServer.admin.pointCoupons.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the point coupon to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/oauthServer/admin/pointCoupons/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/admin/pointCoupons/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create a new point coupon record.
 *
 * Create a new point coupon used for granting points to users. The coupon
 * includes properties such as a unique code, description, point value, maximum
 * issuance limit, and expiration date.
 *
 * This operation enables administrators to define new promotions or reward
 * coupons which users can redeem for points. Validation ensures coupon code
 * uniqueness and the validity of expiration dates.
 *
 * The created coupon's full detail, including timestamps, is returned in the
 * response upon success.
 *
 * @param props.connection
 * @param props.body Data for creating a new point coupon
 * @path /oauthServer/admin/pointCoupons
 * @accessor api.functional.oauthServer.admin.pointCoupons.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Data for creating a new point coupon */
    body: IOauthServerPointCoupon.ICreate;
  };
  export type Body = IOauthServerPointCoupon.ICreate;
  export type Response = IOauthServerPointCoupon;

  export const METADATA = {
    method: "POST",
    path: "/oauthServer/admin/pointCoupons",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/oauthServer/admin/pointCoupons";
  export const random = (): IOauthServerPointCoupon =>
    typia.random<IOauthServerPointCoupon>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
