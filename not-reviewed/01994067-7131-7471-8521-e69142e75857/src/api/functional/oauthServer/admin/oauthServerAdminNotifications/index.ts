import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IOauthServerAdminNotification } from "../../../../structures/IOauthServerAdminNotification";
import { IPageIOauthServerAdminNotification } from "../../../../structures/IPageIOauthServerAdminNotification";

/**
 * Create a new admin notification in oauth_server_admin_notifications.
 *
 * Create a new admin notification for the OAuth server.
 *
 * This endpoint allows authenticated administrators to create a new
 * notification message for other administrators. The request body must provide
 * the admin ID to which the notification is addressed, the title and content of
 * the notification, and the read/unread status.
 *
 * The operation inserts a new record into the oauth_server_admin_notifications
 * table in the Prisma schema, initializing audit timestamps automatically.
 *
 * Security is enforced by restricting access to admin users only.
 *
 * Upon successful creation, the newly created notification entity is returned.
 *
 * @param props.connection
 * @param props.body Information needed to create an admin notification
 * @path /oauthServer/admin/oauthServerAdminNotifications
 * @accessor api.functional.oauthServer.admin.oauthServerAdminNotifications.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information needed to create an admin notification */
    body: IOauthServerAdminNotification.ICreate;
  };
  export type Body = IOauthServerAdminNotification.ICreate;
  export type Response = IOauthServerAdminNotification;

  export const METADATA = {
    method: "POST",
    path: "/oauthServer/admin/oauthServerAdminNotifications",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/oauthServer/admin/oauthServerAdminNotifications";
  export const random = (): IOauthServerAdminNotification =>
    typia.random<IOauthServerAdminNotification>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List and filter admin notifications with pagination.
 *
 * Retrieve a filtered and paginated list of admin notifications.
 *
 * This operation gives authorized admins access to their notification alerts
 * with read status and timestamps.
 *
 * Filters and pagination options help manage large numbers of notifications.
 *
 * Only users with admin role should access this resource.
 *
 * The response delivers paginated notification data suited for display in admin
 * dashboards.
 *
 * @param props.connection
 * @param props.body Search and pagination criteria for admin notifications
 * @path /oauthServer/admin/oauthServerAdminNotifications
 * @accessor api.functional.oauthServer.admin.oauthServerAdminNotifications.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search and pagination criteria for admin notifications */
    body: IOauthServerAdminNotification.IRequest;
  };
  export type Body = IOauthServerAdminNotification.IRequest;
  export type Response = IPageIOauthServerAdminNotification;

  export const METADATA = {
    method: "PATCH",
    path: "/oauthServer/admin/oauthServerAdminNotifications",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/oauthServer/admin/oauthServerAdminNotifications";
  export const random = (): IPageIOauthServerAdminNotification =>
    typia.random<IPageIOauthServerAdminNotification>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a specific admin notification in
 * oauth_server_admin_notifications.
 *
 * Retrieve an individual administrative notification for OAuth server
 * administrators.
 *
 * This operation allows an authenticated admin to fetch detailed information
 * about a single notification by specifying its unique ID in the path
 * parameter. It returns the notification's title, message content, read status,
 * and audit timestamps.
 *
 * Security considerations restrict this endpoint to users with admin privileges
 * only, ensuring sensitive admin notices are protected.
 *
 * The operation interacts with the oauth_server_admin_notifications table
 * defined in the Prisma schema, utilizing ID-based lookup.
 *
 * If the notification does not exist or is soft deleted, an appropriate error
 * response should be returned.
 *
 * No request body is required as this is a read operation.
 *
 * The response provides a full representation of the notification entity.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target admin notification
 * @path /oauthServer/admin/oauthServerAdminNotifications/:id
 * @accessor api.functional.oauthServer.admin.oauthServerAdminNotifications.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target admin notification */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IOauthServerAdminNotification;

  export const METADATA = {
    method: "GET",
    path: "/oauthServer/admin/oauthServerAdminNotifications/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/admin/oauthServerAdminNotifications/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerAdminNotification =>
    typia.random<IOauthServerAdminNotification>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific admin notification in oauth_server_admin_notifications.
 *
 * Update an existing admin notification for OAuth server administrators.
 *
 * Administrators can modify the title, message content, and read status of a
 * notification by specifying its ID and providing updated data in the request
 * body.
 *
 * The operation updates the record in the oauth_server_admin_notifications
 * table in the Prisma schema, refreshing the updated_at timestamp.
 *
 * Only authenticated admin users may perform this operation.
 *
 * This operation does not alter creation timestamps or soft delete status.
 *
 * Returns the updated notification entity after successful modification.
 *
 * @param props.connection
 * @param props.id Unique identifier of the admin notification to update
 * @param props.body Updated data for the admin notification
 * @path /oauthServer/admin/oauthServerAdminNotifications/:id
 * @accessor api.functional.oauthServer.admin.oauthServerAdminNotifications.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the admin notification to update */
    id: string & tags.Format<"uuid">;

    /** Updated data for the admin notification */
    body: IOauthServerAdminNotification.IUpdate;
  };
  export type Body = IOauthServerAdminNotification.IUpdate;
  export type Response = IOauthServerAdminNotification;

  export const METADATA = {
    method: "PUT",
    path: "/oauthServer/admin/oauthServerAdminNotifications/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/oauthServer/admin/oauthServerAdminNotifications/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerAdminNotification =>
    typia.random<IOauthServerAdminNotification>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a specific admin notification in
 * oauth_server_admin_notifications.
 *
 * Soft delete an admin notification, marking it as deleted in the system.
 *
 * This operation allows authenticated admin users to delete a notification by
 * setting its deleted_at timestamp, effectively removing it from active
 * queries.
 *
 * The notification remains in the database for audit purposes.
 *
 * Access control restricts this action to admin users.
 *
 * No request body is required.
 *
 * No response body is returned upon success.
 *
 * @param props.connection
 * @param props.id Unique identifier of the admin notification to delete
 * @path /oauthServer/admin/oauthServerAdminNotifications/:id
 * @accessor api.functional.oauthServer.admin.oauthServerAdminNotifications.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the admin notification to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/oauthServer/admin/oauthServerAdminNotifications/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/admin/oauthServerAdminNotifications/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
