import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IOauthServerSocialProviders } from "../../../../structures/IOauthServerSocialProviders";
import { IPageIOauthServerSocialProviders } from "../../../../structures/IPageIOauthServerSocialProviders";

/**
 * Create a new social login provider configuration.
 *
 * This endpoint allows administrators to add new OAuth social login providers
 * by specifying their client ID, secret, authorization and token endpoints,
 * user info URL, scopes, and activation status.
 *
 * Because this operation affects external authentication flows and includes
 * sensitive credentials, it requires administrator authorization.
 *
 * On success, the newly created provider record is returned with timestamps and
 * identifiers.
 *
 * Clients should ensure the uniqueness of provider_name before creation.
 *
 * @param props.connection
 * @param props.body Social login provider creation details
 * @path /oauthServer/admin/socialLoginProviders
 * @accessor api.functional.oauthServer.admin.socialLoginProviders.createSocialLoginProvider
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createSocialLoginProvider(
  connection: IConnection,
  props: createSocialLoginProvider.Props,
): Promise<createSocialLoginProvider.Response> {
  return true === connection.simulate
    ? createSocialLoginProvider.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createSocialLoginProvider.METADATA,
          path: createSocialLoginProvider.path(),
          status: null,
        },
        props.body,
      );
}
export namespace createSocialLoginProvider {
  export type Props = {
    /** Social login provider creation details */
    body: IOauthServerSocialProviders.ICreate;
  };
  export type Body = IOauthServerSocialProviders.ICreate;
  export type Response = IOauthServerSocialProviders;

  export const METADATA = {
    method: "POST",
    path: "/oauthServer/admin/socialLoginProviders",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/oauthServer/admin/socialLoginProviders";
  export const random = (): IOauthServerSocialProviders =>
    typia.random<IOauthServerSocialProviders>();
  export const simulate = (
    connection: IConnection,
    props: createSocialLoginProvider.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createSocialLoginProvider.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a paginated list of social login providers.
 *
 * Retrieve a filtered and paginated list of social login providers configured
 * in the system.
 *
 * This operation supports advanced search criteria, pagination, and sorting
 * passed through the request body to efficiently browse and manage OAuth social
 * login providers such as Naver, Google, Apple, and others.
 *
 * The oauth_server_social_providers table stores provider configurations
 * including client IDs, secrets, OAuth endpoints, and active status. Because
 * these configurations include sensitive information, this operation requires
 * admin-level authorization.
 *
 * The response includes only active and soft-deleted (if applicable) providers
 * according to filtering and sorting options. This operation is typically used
 * in administrative UIs to manage available social login options.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination for social login providers
 * @path /oauthServer/admin/socialLoginProviders
 * @accessor api.functional.oauthServer.admin.socialLoginProviders.indexSocialLoginProviders
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexSocialLoginProviders(
  connection: IConnection,
  props: indexSocialLoginProviders.Props,
): Promise<indexSocialLoginProviders.Response> {
  return true === connection.simulate
    ? indexSocialLoginProviders.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexSocialLoginProviders.METADATA,
          path: indexSocialLoginProviders.path(),
          status: null,
        },
        props.body,
      );
}
export namespace indexSocialLoginProviders {
  export type Props = {
    /** Search criteria and pagination for social login providers */
    body: IOauthServerSocialProviders.IRequest;
  };
  export type Body = IOauthServerSocialProviders.IRequest;
  export type Response = IPageIOauthServerSocialProviders;

  export const METADATA = {
    method: "PATCH",
    path: "/oauthServer/admin/socialLoginProviders",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/oauthServer/admin/socialLoginProviders";
  export const random = (): IPageIOauthServerSocialProviders =>
    typia.random<IPageIOauthServerSocialProviders>();
  export const simulate = (
    connection: IConnection,
    props: indexSocialLoginProviders.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexSocialLoginProviders.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed social login provider by ID.
 *
 * Retrieve a specific social login provider configuration by its unique ID.
 *
 * This endpoint returns detailed information including provider name, client
 * credentials, authorization and token URLs, scopes, and active status.
 *
 * Admin-level authorization is required for accessing this sensitive data.
 *
 * If the social provider ID does not exist or is soft deleted, a proper error
 * response should be returned.
 *
 * This is typically used for administrative configuration review and update
 * preparation.
 *
 * @param props.connection
 * @param props.id Unique identifier of the social login provider
 * @path /oauthServer/admin/socialLoginProviders/:id
 * @accessor api.functional.oauthServer.admin.socialLoginProviders.atSocialLoginProvider
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atSocialLoginProvider(
  connection: IConnection,
  props: atSocialLoginProvider.Props,
): Promise<atSocialLoginProvider.Response> {
  return true === connection.simulate
    ? atSocialLoginProvider.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atSocialLoginProvider.METADATA,
          path: atSocialLoginProvider.path(props),
          status: null,
        },
      );
}
export namespace atSocialLoginProvider {
  export type Props = {
    /** Unique identifier of the social login provider */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IOauthServerSocialProviders;

  export const METADATA = {
    method: "GET",
    path: "/oauthServer/admin/socialLoginProviders/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/admin/socialLoginProviders/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerSocialProviders =>
    typia.random<IOauthServerSocialProviders>();
  export const simulate = (
    connection: IConnection,
    props: atSocialLoginProvider.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atSocialLoginProvider.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
