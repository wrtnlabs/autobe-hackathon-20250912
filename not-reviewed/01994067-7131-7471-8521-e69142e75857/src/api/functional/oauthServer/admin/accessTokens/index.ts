import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IOauthServerAccessToken } from "../../../../structures/IOauthServerAccessToken";
import { IPageIOauthServerAccessToken } from "../../../../structures/IPageIOauthServerAccessToken";

/**
 * Create a new OAuth access token in the system. This endpoint accepts token
 * details such as the opaque token string, scope string, expiration timestamp,
 * and references to the OAuth client and authorization code.
 *
 * Security considerations include validating the client permissions and
 * ensuring token generation follows secure practices.
 *
 * The request body must comply with the IOauthServerAccessToken.ICreate
 * structure, encapsulating all required creation fields.
 *
 * Upon successful creation, the detailed OAuth access token entity is returned.
 *
 * Errors related to duplicate tokens or invalid references are to be handled
 * gracefully.
 *
 * @param props.connection
 * @param props.body Information to create a new OAuth access token
 * @path /oauthServer/admin/accessTokens
 * @accessor api.functional.oauthServer.admin.accessTokens.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information to create a new OAuth access token */
    body: IOauthServerAccessToken.ICreate;
  };
  export type Body = IOauthServerAccessToken.ICreate;
  export type Response = IOauthServerAccessToken;

  export const METADATA = {
    method: "POST",
    path: "/oauthServer/admin/accessTokens",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/oauthServer/admin/accessTokens";
  export const random = (): IOauthServerAccessToken =>
    typia.random<IOauthServerAccessToken>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search OAuth access tokens with filtering and pagination.
 *
 * Provides a filtered and paginated list of OAuth access tokens stored in the
 * system. Allows administrators to search based on client IDs, scopes,
 * expiration, and issuance dates.
 *
 * The response includes tokens summary information optimized for monitoring
 * active tokens and auditing.
 *
 * Access is restricted to administrative roles to protect sensitive security
 * information.
 *
 * Proper validation of search parameters ensures efficient data retrieval and
 * response accuracy.
 *
 * This facilitates operational oversight and token lifecycle management.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for access tokens
 * @path /oauthServer/admin/accessTokens
 * @accessor api.functional.oauthServer.admin.accessTokens.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for access tokens */
    body: IOauthServerAccessToken.IRequest;
  };
  export type Body = IOauthServerAccessToken.IRequest;
  export type Response = IPageIOauthServerAccessToken.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/oauthServer/admin/accessTokens",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/oauthServer/admin/accessTokens";
  export const random = (): IPageIOauthServerAccessToken.ISummary =>
    typia.random<IPageIOauthServerAccessToken.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a specific OAuth access token by ID.
 *
 * Retrieve detailed information of a single OAuth access token by its unique
 * ID. This operation queries the oauth_server_access_tokens database entity,
 * returning comprehensive token details including the opaque token string,
 * scopes granted, expiration date, and associated authorization context.
 *
 * Security and access control must ensure that only authorized roles or systems
 * can query sensitive token information.
 *
 * This operation is crucial for audits, token validation in token revocation
 * workflows, and administrative monitoring.
 *
 * Input validation must enforce correct UUID formatting for the token ID path
 * parameter.
 *
 * Errors returned will indicate non-existence or lack of permission.
 *
 * @param props.connection
 * @param props.id Unique identifier of the OAuth access token
 * @path /oauthServer/admin/accessTokens/:id
 * @accessor api.functional.oauthServer.admin.accessTokens.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the OAuth access token */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IOauthServerAccessToken;

  export const METADATA = {
    method: "GET",
    path: "/oauthServer/admin/accessTokens/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/admin/accessTokens/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerAccessToken =>
    typia.random<IOauthServerAccessToken>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing OAuth access token identified by its unique ID. The
 * request body must conform to IOauthServerAccessToken.IUpdate schema with
 * fields to modify.
 *
 * Security enforcement ensures only authorized roles may perform token updates.
 *
 * Invalid token IDs or malformed update data will produce errors.
 *
 * The updated OAuth access token entity is returned upon success.
 *
 * @param props.connection
 * @param props.id Unique identifier of the OAuth access token to update
 * @param props.body OAuth access token update information
 * @path /oauthServer/admin/accessTokens/:id
 * @accessor api.functional.oauthServer.admin.accessTokens.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the OAuth access token to update */
    id: string & tags.Format<"uuid">;

    /** OAuth access token update information */
    body: IOauthServerAccessToken.IUpdate;
  };
  export type Body = IOauthServerAccessToken.IUpdate;
  export type Response = IOauthServerAccessToken;

  export const METADATA = {
    method: "PUT",
    path: "/oauthServer/admin/accessTokens/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/oauthServer/admin/accessTokens/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerAccessToken =>
    typia.random<IOauthServerAccessToken>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an OAuth access token by ID.
 *
 * Permanently delete an OAuth access token from the system by its unique ID.
 * This operation performs a hard delete, removing the token record entirely and
 * irreversibly.
 *
 * Authorization checks ensure only administrators or authorized services can
 * perform this operation.
 *
 * No request body is required.
 *
 * Response success indicates removal; failure reflects invalid ID or permission
 * issues.
 *
 * Use with caution as deleted tokens cannot be recovered.
 *
 * @param props.connection
 * @param props.id Unique identifier of the OAuth access token to delete
 * @path /oauthServer/admin/accessTokens/:id
 * @accessor api.functional.oauthServer.admin.accessTokens.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the OAuth access token to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/oauthServer/admin/accessTokens/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/admin/accessTokens/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
