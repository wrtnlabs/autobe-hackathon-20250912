import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IOauthServerAuditLog } from "../../../../structures/IOauthServerAuditLog";
import { IPageIOauthServerAuditLog } from "../../../../structures/IPageIOauthServerAuditLog";

/**
 * Search OAuth server audit logs with filtering and pagination.
 *
 * Retrieve a filtered and paginated list of OAuth server audit logs.
 *
 * The audit logs contain security and operational events for authentication,
 * token issuance, client management, and system activities.
 *
 * Clients can search by event_type, time ranges, actor_id, and other criteria.
 *
 * Only users with admin role have access to audit log data due to sensitivity.
 *
 * The response provides paginated detailed audit log entries with essential
 * fields.
 *
 * Security measures ensure sensitive data is not exposed.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for audit logs
 *   filtering
 * @path /oauthServer/admin/oauthServerAuditLogs
 * @accessor api.functional.oauthServer.admin.oauthServerAuditLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for audit logs filtering */
    body: IOauthServerAuditLog.IRequest;
  };
  export type Body = IOauthServerAuditLog.IRequest;
  export type Response = IPageIOauthServerAuditLog;

  export const METADATA = {
    method: "PATCH",
    path: "/oauthServer/admin/oauthServerAuditLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/oauthServer/admin/oauthServerAuditLogs";
  export const random = (): IPageIOauthServerAuditLog =>
    typia.random<IPageIOauthServerAuditLog>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get OAuth server audit log by ID.
 *
 * Retrieve detailed information of a single OAuth server audit log entry by its
 * ID.
 *
 * This operation returns full event details for security monitoring and
 * auditing.
 *
 * Only authorized admin users may access this endpoint.
 *
 * The response includes all relevant fields of the audit log record.
 *
 * Errors are returned if the ID is invalid or record not found.
 *
 * @param props.connection
 * @param props.id Unique identifier of the audit log entry
 * @path /oauthServer/admin/oauthServerAuditLogs/:id
 * @accessor api.functional.oauthServer.admin.oauthServerAuditLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the audit log entry */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IOauthServerAuditLog;

  export const METADATA = {
    method: "GET",
    path: "/oauthServer/admin/oauthServerAuditLogs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/admin/oauthServerAuditLogs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerAuditLog =>
    typia.random<IOauthServerAuditLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
