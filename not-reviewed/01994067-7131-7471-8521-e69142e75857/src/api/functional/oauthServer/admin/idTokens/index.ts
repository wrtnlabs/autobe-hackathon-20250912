import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IOauthServerIdToken } from "../../../../structures/IOauthServerIdToken";

/**
 * Update an existing ID token record in oauth_server_id_tokens.
 *
 * Update an existing opaque OpenID Connect ID token record in the system. This
 * endpoint enables modification of the token string and expiration timestamp to
 * reflect renewed or refreshed token data.
 *
 * Authorization is required as only authorized users like admins or relevant
 * system components should update ID token data.
 *
 * The ID token record belongs to an OAuth client and is optionally linked to an
 * authorization code, representing a critical component in the OAuth token
 * flow.
 *
 * Only valid existing token entries can be updated; attempts to update
 * non-existent tokens must be handled with proper error responses.
 *
 * The response returns the updated ID token record for confirmation.
 *
 * @param props.connection
 * @param props.id Unique identifier of the ID token to update
 * @param props.body Update data for the ID token, including new token string
 *   and expiration date
 * @path /oauthServer/admin/idTokens/:id
 * @accessor api.functional.oauthServer.admin.idTokens.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the ID token to update */
    id: string & tags.Format<"uuid">;

    /**
     * Update data for the ID token, including new token string and
     * expiration date
     */
    body: IOauthServerIdToken.IUpdate;
  };
  export type Body = IOauthServerIdToken.IUpdate;
  export type Response = IOauthServerIdToken;

  export const METADATA = {
    method: "PUT",
    path: "/oauthServer/admin/idTokens/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/oauthServer/admin/idTokens/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerIdToken =>
    typia.random<IOauthServerIdToken>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an ID token record permanently from oauth_server_id_tokens.
 *
 * Remove an existing ID token record permanently from the system. This endpoint
 * deletes the record identified by the unique ID.
 *
 * This is a hard delete operation, meaning the record is completely removed and
 * cannot be recovered.
 *
 * Since the table schema includes a soft delete column deleted_at, this
 * operation intentionally bypasses soft delete for permanent removal.
 *
 * Authorization is restricted to admin users to prevent unauthorized token
 * manipulation.
 *
 * No response body is returned upon success.
 *
 * @param props.connection
 * @param props.id Unique identifier of the ID token to delete
 * @path /oauthServer/admin/idTokens/:id
 * @accessor api.functional.oauthServer.admin.idTokens.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the ID token to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/oauthServer/admin/idTokens/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/admin/idTokens/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
