import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IOauthServerOauthClient } from "../../../../structures/IOauthServerOauthClient";
import { IPageIOauthServerOauthClient } from "../../../../structures/IPageIOauthServerOauthClient";

/**
 * Create a new OAuth client by providing client credentials and metadata. This
 * operation is restricted to authorized developers and administrators.
 *
 * The client_id must be unique and redirect_uri valid. The is_trusted flag
 * determines if automatic consent is granted during OAuth flows.
 *
 * Successful creation returns the full client record including creation
 * timestamps. Failure occurs if validation fails or the client_id already
 * exists.
 *
 * This operation interacts directly with the 'oauth_server_oauth_clients' table
 * for data persistence.
 *
 * @param props.connection
 * @param props.body Client creation data including client_id, client_secret,
 *   redirect_uri, logo_uri, and trust flag
 * @path /oauthServer/admin/oauthClients
 * @accessor api.functional.oauthServer.admin.oauthClients.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Client creation data including client_id, client_secret,
     * redirect_uri, logo_uri, and trust flag
     */
    body: IOauthServerOauthClient.ICreate;
  };
  export type Body = IOauthServerOauthClient.ICreate;
  export type Response = IOauthServerOauthClient;

  export const METADATA = {
    method: "POST",
    path: "/oauthServer/admin/oauthClients",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/oauthServer/admin/oauthClients";
  export const random = (): IOauthServerOauthClient =>
    typia.random<IOauthServerOauthClient>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve paginated OAuth clients.
 *
 * Retrieve a filtered and paginated list of OAuth clients registered in the
 * system. Clients are returned with summary profile information and key OAuth
 * client fields.
 *
 * This operation supports search, sorting, and pagination to efficiently manage
 * large client sets.
 *
 * Security enforces that only administrators or authorized developers access
 * client data.
 *
 * Soft deleted clients are excluded from responses. Filters may include
 * client_id, trusted status, and created date ranges.
 *
 * Errors are returned for invalid filter parameters.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for OAuth clients
 * @path /oauthServer/admin/oauthClients
 * @accessor api.functional.oauthServer.admin.oauthClients.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for OAuth clients */
    body: IOauthServerOauthClient.IRequest;
  };
  export type Body = IOauthServerOauthClient.IRequest;
  export type Response = IPageIOauthServerOauthClient.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/oauthServer/admin/oauthClients",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/oauthServer/admin/oauthClients";
  export const random = (): IPageIOauthServerOauthClient.ISummary =>
    typia.random<IPageIOauthServerOauthClient.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific OAuth client by ID.
 *
 * Retrieve detailed information of a specific OAuth client by its unique
 * identifier. This endpoint allows authorized personnel such as developers and
 * admins to access client metadata necessary for management and auditing
 * purposes.
 *
 * Security considerations require authentication and role-based access to
 * protect the client secret and related sensitive data. Only authenticated
 * developers or admins may perform this operation.
 *
 * The data is sourced from the 'oauth_server_oauth_clients' table, which
 * maintains the core client credentials and associated metadata. The response
 * excludes client profiles which are managed separately.
 *
 * Errors may occur if the client ID does not exist or access is unauthorized.
 * Proper HTTP error codes and messages will be returned accordingly.
 *
 * @param props.connection
 * @param props.id Unique identifier of the OAuth client to retrieve
 * @path /oauthServer/admin/oauthClients/:id
 * @accessor api.functional.oauthServer.admin.oauthClients.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the OAuth client to retrieve */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IOauthServerOauthClient;

  export const METADATA = {
    method: "GET",
    path: "/oauthServer/admin/oauthClients/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/admin/oauthClients/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerOauthClient =>
    typia.random<IOauthServerOauthClient>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing OAuth client by ID.
 *
 * Update an existing OAuth client's credentials and metadata by specifying its
 * unique ID. Authorized developers and admins can modify client secret,
 * redirect URI, logo URI, and trust status.
 *
 * This operation validates inputs and updates the 'oauth_server_oauth_clients'
 * table accordingly with new timestamps.
 *
 * The client_id field is immutable and cannot be changed by this operation.
 *
 * Errors arise if the client does not exist or user lacks permission.
 *
 * @param props.connection
 * @param props.id Unique identifier of the OAuth client to update
 * @param props.body Client update data with modifiable fields
 * @path /oauthServer/admin/oauthClients/:id
 * @accessor api.functional.oauthServer.admin.oauthClients.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the OAuth client to update */
    id: string & tags.Format<"uuid">;

    /** Client update data with modifiable fields */
    body: IOauthServerOauthClient.IUpdate;
  };
  export type Body = IOauthServerOauthClient.IUpdate;
  export type Response = IOauthServerOauthClient;

  export const METADATA = {
    method: "PUT",
    path: "/oauthServer/admin/oauthClients/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/oauthServer/admin/oauthClients/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerOauthClient =>
    typia.random<IOauthServerOauthClient>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete an OAuth client by ID.
 *
 * Soft delete an OAuth client by setting its deletion timestamp. This marks the
 * client as inactive and excludes it from OAuth processes without permanently
 * removing data.
 *
 * Only authorized developers and admins may perform this operation.
 *
 * Proper error handling is included for non-existent clients or unauthorized
 * access attempts.
 *
 * @param props.connection
 * @param props.id Unique identifier of the OAuth client to delete
 * @path /oauthServer/admin/oauthClients/:id
 * @accessor api.functional.oauthServer.admin.oauthClients.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the OAuth client to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/oauthServer/admin/oauthClients/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/admin/oauthClients/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
