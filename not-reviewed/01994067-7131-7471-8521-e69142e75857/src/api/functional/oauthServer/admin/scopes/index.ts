import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IOauthServerScope } from "../../../../structures/IOauthServerScope";
import { IPageIOauthServerScope } from "../../../../structures/IPageIOauthServerScope";

/**
 * Create a new OAuth scope with a unique code and a descriptive explanation of
 * the permissions it grants. This operation allows administrators to extend the
 * set of available OAuth scopes that clients can request during authorization.
 *
 * Security considerations require that only authorized users with admin
 * privileges can create new scopes to ensure controlled expansion of permission
 * settings.
 *
 * The underlying database table is oauth_server_scopes, which enforces
 * uniqueness for the scope code. Validation includes checking for code
 * uniqueness and ensuring the description is informative.
 *
 * This operation is typically used in an administrative interface managing
 * OAuth permissions.
 *
 * Errors are returned if the scope code already exists or if required fields
 * are missing.
 *
 * @param props.connection
 * @param props.body Information needed to create an OAuth scope
 * @path /oauthServer/admin/scopes
 * @accessor api.functional.oauthServer.admin.scopes.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information needed to create an OAuth scope */
    body: IOauthServerScope.ICreate;
  };
  export type Body = IOauthServerScope.ICreate;
  export type Response = IOauthServerScope;

  export const METADATA = {
    method: "POST",
    path: "/oauthServer/admin/scopes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/oauthServer/admin/scopes";
  export const random = (): IOauthServerScope =>
    typia.random<IOauthServerScope>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List and search OAuth scopes with pagination.
 *
 * Fetch a filtered, sorted, and paginated list of OAuth 2.0 scopes. This
 * operation allows clients to query the scopes available in the system,
 * supporting criteria such as code filtering, description matching, and
 * pagination.
 *
 * Access is protected and typically limited to admin roles due to the security
 * impact of scope management.
 *
 * Results include essential details like scope code and description optimized
 * for UI representation.
 *
 * The response contains pages of scope summary records.
 *
 * @param props.connection
 * @param props.body Filtering and paging parameters for querying scopes
 * @path /oauthServer/admin/scopes
 * @accessor api.functional.oauthServer.admin.scopes.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filtering and paging parameters for querying scopes */
    body: IOauthServerScope.IRequest;
  };
  export type Body = IOauthServerScope.IRequest;
  export type Response = IPageIOauthServerScope.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/oauthServer/admin/scopes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/oauthServer/admin/scopes";
  export const random = (): IPageIOauthServerScope.ISummary =>
    typia.random<IPageIOauthServerScope.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a specific OAuth scope by ID.
 *
 * Retrieve detailed information about a specific OAuth 2.0 scope given its
 * unique ID.
 *
 * The data includes scope code, description, and timestamps.
 *
 * Proper authorization is required to access scope details.
 *
 * This operation returns the full scope entry matching the provided ID.
 *
 * @param props.connection
 * @param props.id Unique identifier of the scope
 * @path /oauthServer/admin/scopes/:id
 * @accessor api.functional.oauthServer.admin.scopes.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the scope */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IOauthServerScope;

  export const METADATA = {
    method: "GET",
    path: "/oauthServer/admin/scopes/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/admin/scopes/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerScope =>
    typia.random<IOauthServerScope>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing OAuth scope by ID.
 *
 * Update the code or description of an existing OAuth scope by specifying its
 * unique ID. This operation ensures scopes remain current and accurately
 * describe the permissions they represent.
 *
 * Only users with administrative privileges should perform this action to
 * maintain security and control over OAuth scopes.
 *
 * The underlying database enforces uniqueness of the scope code. The operation
 * supports partial or full updates depending on the provided fields.
 *
 * Errors are handled for non-existent IDs or duplicate scope codes.
 *
 * @param props.connection
 * @param props.id Target scope's UUID
 * @param props.body Updated information for the OAuth scope
 * @path /oauthServer/admin/scopes/:id
 * @accessor api.functional.oauthServer.admin.scopes.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Target scope's UUID */
    id: string & tags.Format<"uuid">;

    /** Updated information for the OAuth scope */
    body: IOauthServerScope.IUpdate;
  };
  export type Body = IOauthServerScope.IUpdate;
  export type Response = IOauthServerScope;

  export const METADATA = {
    method: "PUT",
    path: "/oauthServer/admin/scopes/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/oauthServer/admin/scopes/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerScope =>
    typia.random<IOauthServerScope>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete an OAuth scope by ID.
 *
 * Soft delete the OAuth scope identified by the given ID. This marks the scope
 * as deleted by setting the deleted_at timestamp, effectively deactivating it.
 *
 * Only administrators should be permitted to delete scopes to prevent
 * unauthorized removal of critical authorization elements.
 *
 * The operation ensures that deleted scopes are excluded from active queries
 * but remain in the database for historical reference.
 *
 * Errors return when the specified scope ID does not exist or is already
 * deleted.
 *
 * @param props.connection
 * @param props.id Target scope's UUID
 * @path /oauthServer/admin/scopes/:id
 * @accessor api.functional.oauthServer.admin.scopes.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Target scope's UUID */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/oauthServer/admin/scopes/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/admin/scopes/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
