import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IOauthServerOauthServerConfigs } from "../../../../structures/IOauthServerOauthServerConfigs";
import { IPageIOauthServerOauthServerConfigs } from "../../../../structures/IPageIOauthServerOauthServerConfigs";

/**
 * Create a new OAuth server configuration record.
 *
 * Create a new OAuth server configuration setting.
 *
 * Input includes configuration key, its value, and optional description.
 *
 * The operation sets creation and update timestamps automatically and leaves
 * deleted_at as null.
 *
 * Only authorized administrators can perform this operation to manage system
 * configurations.
 *
 * Created configuration can be queried later through the list or detail APIs.
 *
 * Validation shall ensure unique key constraint.
 *
 * Error handling must prevent duplicate key creation.
 *
 * @param props.connection
 * @param props.body Creation information for OAuth server configuration
 * @path /oauthServer/admin/oauthServerConfigs
 * @accessor api.functional.oauthServer.admin.oauthServerConfigs.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation information for OAuth server configuration */
    body: IOauthServerOauthServerConfigs.ICreate;
  };
  export type Body = IOauthServerOauthServerConfigs.ICreate;
  export type Response = IOauthServerOauthServerConfigs;

  export const METADATA = {
    method: "POST",
    path: "/oauthServer/admin/oauthServerConfigs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/oauthServer/admin/oauthServerConfigs";
  export const random = (): IOauthServerOauthServerConfigs =>
    typia.random<IOauthServerOauthServerConfigs>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve filtered, paginated list of OAuth server configurations.
 *
 * Retrieve a filtered and paginated list of OAuth server configuration
 * settings. The oauth_server_configs table contains key-value configuration
 * pairs used to control various aspects of the OAuth server's behavior.
 *
 * This operation supports advanced filtering by key, value, description, and
 * active status (non-deleted). It also supports pagination and sorting to
 * efficiently handle large numbers of configurations.
 *
 * Security considerations require that only authorized users can access these
 * settings, as exposing configuration details may reveal sensitive system
 * internals.
 *
 * The operation integrates with the oauth_server_configs Prisma model,
 * reflecting the full set of fields including created_at, updated_at, and
 * deleted_at timestamps.
 *
 * Request parameters should allow partial key matching, exact or partial value
 * filtering, and filtering by deleted or active status.
 *
 * Response includes paginated data with summary information about each
 * configuration item.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for OAuth server
 *   configurations
 * @path /oauthServer/admin/oauthServerConfigs
 * @accessor api.functional.oauthServer.admin.oauthServerConfigs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for OAuth server
     * configurations
     */
    body: IOauthServerOauthServerConfigs.IRequest;
  };
  export type Body = IOauthServerOauthServerConfigs.IRequest;
  export type Response = IPageIOauthServerOauthServerConfigs.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/oauthServer/admin/oauthServerConfigs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/oauthServer/admin/oauthServerConfigs";
  export const random = (): IPageIOauthServerOauthServerConfigs.ISummary =>
    typia.random<IPageIOauthServerOauthServerConfigs.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed OAuth server configuration by ID.
 *
 * Retrieve detailed information of a single OAuth server configuration by its
 * unique ID.
 *
 * The record includes key, value, description, creation and update timestamps,
 * and deleted_at status.
 *
 * This is a secured operation accessible only by administrators to prevent
 * exposure of sensitive configuration data.
 *
 * The response returns the full OAuth server configuration record corresponding
 * to the requested ID as defined in the oauth_server_configs Prisma model.
 *
 * If the configuration ID does not exist or is soft deleted, an appropriate
 * error should be returned by the API implementation.
 *
 * @param props.connection
 * @param props.id Unique identifier of the OAuth server configuration
 * @path /oauthServer/admin/oauthServerConfigs/:id
 * @accessor api.functional.oauthServer.admin.oauthServerConfigs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the OAuth server configuration */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IOauthServerOauthServerConfigs;

  export const METADATA = {
    method: "GET",
    path: "/oauthServer/admin/oauthServerConfigs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/admin/oauthServerConfigs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerOauthServerConfigs =>
    typia.random<IOauthServerOauthServerConfigs>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing OAuth server configuration by ID.
 *
 * Update an existing OAuth server configuration identified by ID.
 *
 * Allows changing value and description fields. Key cannot be changed.
 *
 * Update timestamp is automatically refreshed.
 *
 * Operation is restricted to administrators to protect system integrity.
 *
 * Errors returned if ID not found or record is soft deleted.
 *
 * Successful update returns the full updated configuration record.
 *
 * @param props.connection
 * @param props.id Unique identifier of the OAuth server configuration to update
 * @param props.body Update information for OAuth server configuration
 * @path /oauthServer/admin/oauthServerConfigs/:id
 * @accessor api.functional.oauthServer.admin.oauthServerConfigs.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the OAuth server configuration to update */
    id: string & tags.Format<"uuid">;

    /** Update information for OAuth server configuration */
    body: IOauthServerOauthServerConfigs.IUpdate;
  };
  export type Body = IOauthServerOauthServerConfigs.IUpdate;
  export type Response = IOauthServerOauthServerConfigs;

  export const METADATA = {
    method: "PUT",
    path: "/oauthServer/admin/oauthServerConfigs/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/oauthServer/admin/oauthServerConfigs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerOauthServerConfigs =>
    typia.random<IOauthServerOauthServerConfigs>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an OAuth server config by id.
 *
 * Deletes a system configuration record from the OAuth server's settings. This
 * operation is intended for administrative use to permanently remove obsolete
 * or erroneous configuration entries.
 *
 * Only users with appropriate administrative authorization should perform this
 * deletion.
 *
 * The record identified by the provided id will be removed permanently from the
 * database and cannot be recovered via this API.
 *
 * It is associated with the oauth_server_configs Prisma table representing
 * key-value system configuration.
 *
 * No request body is required since this is a deletion by id.
 *
 * Errors such as record not found or unauthorized access must be properly
 * handled by the service.
 *
 * @param props.connection
 * @param props.id Unique identifier of the OAuth server config to delete
 * @path /oauthServer/admin/oauthServerConfigs/:id
 * @accessor api.functional.oauthServer.admin.oauthServerConfigs.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the OAuth server config to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/oauthServer/admin/oauthServerConfigs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/admin/oauthServerConfigs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
