import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IOauthServerguests } from "../../../../structures/IOauthServerguests";
import { IPageIOauthServerguests } from "../../../../structures/IPageIOauthServerguests";

/**
 * Search guest accounts with pagination and filtering.
 *
 * Search and retrieve paginated list of guest user accounts.
 *
 * Guests represent unauthenticated users able to browse limited information or
 * start authentication processes.
 *
 * The list can be filtered by creation and modification times, and sorted
 * accordingly.
 *
 * No sensitive personal information is exposed in the guest records.
 *
 * Access may be public or restricted depending on system policies.
 *
 * Related endpoints include get by ID and potential create operations.
 *
 * Response data includes paginated guest account summaries for efficient UI
 * consumption.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for guest account
 *   filtering
 * @path /oauthServer/admin/oauthServerGuests
 * @accessor api.functional.oauthServer.admin.oauthServerGuests.indexGuests
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexGuests(
  connection: IConnection,
  props: indexGuests.Props,
): Promise<indexGuests.Response> {
  return true === connection.simulate
    ? indexGuests.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexGuests.METADATA,
          path: indexGuests.path(),
          status: null,
        },
        props.body,
      );
}
export namespace indexGuests {
  export type Props = {
    /** Search criteria and pagination parameters for guest account filtering */
    body: IOauthServerguests.IRequest;
  };
  export type Body = IOauthServerguests.IRequest;
  export type Response = IPageIOauthServerguests.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/oauthServer/admin/oauthServerGuests",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/oauthServer/admin/oauthServerGuests";
  export const random = (): IPageIOauthServerguests.ISummary =>
    typia.random<IPageIOauthServerguests.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: indexGuests.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexGuests.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve guest account details by ID.
 *
 * Get detailed information of a guest user account by ID.
 *
 * Guests are unauthenticated users primarily tracked for audit or system
 * purposes.
 *
 * This operation includes timestamps for record lifecycle and soft deletion
 * status.
 *
 * Access is restricted to admins to maintain security and privacy.
 *
 * It is useful for admin auditing or support tasks.
 *
 * Returns the full guest user entity for the given UUID.
 *
 * @param props.connection
 * @param props.id UUID of the guest account
 * @path /oauthServer/admin/oauthServerGuests/:id
 * @accessor api.functional.oauthServer.admin.oauthServerGuests.atGuest
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atGuest(
  connection: IConnection,
  props: atGuest.Props,
): Promise<atGuest.Response> {
  return true === connection.simulate
    ? atGuest.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atGuest.METADATA,
          path: atGuest.path(props),
          status: null,
        },
      );
}
export namespace atGuest {
  export type Props = {
    /** UUID of the guest account */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IOauthServerguests;

  export const METADATA = {
    method: "GET",
    path: "/oauthServer/admin/oauthServerGuests/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/admin/oauthServerGuests/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerguests =>
    typia.random<IOauthServerguests>();
  export const simulate = (
    connection: IConnection,
    props: atGuest.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atGuest.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
