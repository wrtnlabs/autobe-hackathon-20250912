import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IOauthServerClientSecretRegeneration } from "../../../../structures/IOauthServerClientSecretRegeneration";
import { IPageIOauthServerClientSecretRegeneration } from "../../../../structures/IPageIOauthServerClientSecretRegeneration";

/**
 * Create a client secret regeneration record.
 *
 * This POST operation creates a new client secret regeneration event, recording
 * which client secret was regenerated, the admin responsible, and the reason.
 *
 * Creating a client secret regeneration log is essential for tracking changes
 * to client credentials, ensuring traceability and security.
 *
 * The request body must include the details of the regeneration event. The
 * operation provides the created record in the response.
 *
 * This operation is restricted to admin users to prevent unauthorized audit log
 * creation.
 *
 * @param props.connection
 * @param props.body Information about the client secret regeneration to create
 * @path /oauthServer/admin/oauthServerClientSecretRegenerations
 * @accessor api.functional.oauthServer.admin.oauthServerClientSecretRegenerations.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information about the client secret regeneration to create */
    body: IOauthServerClientSecretRegeneration.ICreate;
  };
  export type Body = IOauthServerClientSecretRegeneration.ICreate;
  export type Response = IOauthServerClientSecretRegeneration;

  export const METADATA = {
    method: "POST",
    path: "/oauthServer/admin/oauthServerClientSecretRegenerations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/oauthServer/admin/oauthServerClientSecretRegenerations";
  export const random = (): IOauthServerClientSecretRegeneration =>
    typia.random<IOauthServerClientSecretRegeneration>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List OAuth server client secret regeneration records.
 *
 * This PATCH operation retrieves a list of client secret regeneration records
 * with pagination, filtering, and sorting.
 *
 * Client secret regenerations document each time a client secret is changed,
 * capturing the admin who performed the regeneration, the time, and optional
 * reason. This historical record supports security auditing and compliance
 * requirements.
 *
 * The list supports pagination parameters and optional filters such as admin ID
 * or client ID. The response includes summary information of each regeneration
 * event.
 *
 * This operation typically requires admin-level authorization to access
 * confidential security audit data.
 *
 * @param props.connection
 * @param props.body Filter and pagination parameters for listing client secret
 *   regenerations
 * @path /oauthServer/admin/oauthServerClientSecretRegenerations
 * @accessor api.functional.oauthServer.admin.oauthServerClientSecretRegenerations.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Filter and pagination parameters for listing client secret
     * regenerations
     */
    body: IOauthServerClientSecretRegeneration.IRequest;
  };
  export type Body = IOauthServerClientSecretRegeneration.IRequest;
  export type Response = IPageIOauthServerClientSecretRegeneration.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/oauthServer/admin/oauthServerClientSecretRegenerations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/oauthServer/admin/oauthServerClientSecretRegenerations";
  export const random =
    (): IPageIOauthServerClientSecretRegeneration.ISummary =>
      typia.random<IPageIOauthServerClientSecretRegeneration.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed client secret regeneration record by ID.
 *
 * This GET operation fetches detailed information for a client secret
 * regeneration record identified by its unique ID.
 *
 * Client secret regeneration logs store historical data on when and why a
 * client's secret was regenerated and by whom. Detailed access is restricted to
 * authorized admins.
 *
 * The detailed record includes timestamps, reason for regeneration, and
 * references to the associated client and admin user.
 *
 * Errors will be returned if the specified ID does not exist or if access is
 * unauthorized.
 *
 * @param props.connection
 * @param props.id Unique identifier of the client secret regeneration record
 * @path /oauthServer/admin/oauthServerClientSecretRegenerations/:id
 * @accessor api.functional.oauthServer.admin.oauthServerClientSecretRegenerations.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the client secret regeneration record */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IOauthServerClientSecretRegeneration;

  export const METADATA = {
    method: "GET",
    path: "/oauthServer/admin/oauthServerClientSecretRegenerations/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/admin/oauthServerClientSecretRegenerations/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerClientSecretRegeneration =>
    typia.random<IOauthServerClientSecretRegeneration>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a client secret regeneration record.
 *
 * Update details of a client secret regeneration record for the OAuth server.
 *
 * This operation allows administrative users to modify recorded information
 * such as the reason for regeneration. It deals with the
 * oauth_server_client_secret_regenerations entity, which documents every
 * instance of client secret changes for OAuth clients.
 *
 * Security considerations limit access to admin roles only to protect audit
 * integrity.
 *
 * The record includes references to the OAuth client and the administrator who
 * performed the operation, with timestamps and soft deletion support.
 *
 * Validation ensures the record ID provided is a valid UUID corresponding to an
 * existing record.
 *
 * Related operations include deletion of secret regeneration records and
 * listing regeneration history.
 *
 * Error handling covers invalid IDs, unauthorized access, and schema validation
 * failures.
 *
 * @param props.connection
 * @param props.id The unique identifier of the client secret regeneration
 *   record to update
 * @param props.body Update information of the client secret regeneration record
 * @path /oauthServer/admin/oauthServerClientSecretRegenerations/:id
 * @accessor api.functional.oauthServer.admin.oauthServerClientSecretRegenerations.updateSecretRegenerationRecord
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateSecretRegenerationRecord(
  connection: IConnection,
  props: updateSecretRegenerationRecord.Props,
): Promise<updateSecretRegenerationRecord.Response> {
  return true === connection.simulate
    ? updateSecretRegenerationRecord.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateSecretRegenerationRecord.METADATA,
          path: updateSecretRegenerationRecord.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateSecretRegenerationRecord {
  export type Props = {
    /**
     * The unique identifier of the client secret regeneration record to
     * update
     */
    id: string & tags.Format<"uuid">;

    /** Update information of the client secret regeneration record */
    body: IOauthServerClientSecretRegeneration.IUpdate;
  };
  export type Body = IOauthServerClientSecretRegeneration.IUpdate;
  export type Response = IOauthServerClientSecretRegeneration;

  export const METADATA = {
    method: "PUT",
    path: "/oauthServer/admin/oauthServerClientSecretRegenerations/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/oauthServer/admin/oauthServerClientSecretRegenerations/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerClientSecretRegeneration =>
    typia.random<IOauthServerClientSecretRegeneration>();
  export const simulate = (
    connection: IConnection,
    props: updateSecretRegenerationRecord.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateSecretRegenerationRecord.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a client secret regeneration record.
 *
 * Erase a client secret regeneration record from the OAuth server.
 *
 * This operation permanently removes the specified regeneration record by its
 * unique identifier.
 *
 * The record tracks client secret changes associated with OAuth clients and
 * administrators.
 *
 * Only admin users are authorized to execute this operation to maintain
 * security standards.
 *
 * Validation on the record ID ensures only valid UUIDs are processed.
 *
 * Related operations include listing and updating regeneration records.
 *
 * Error handling includes invalid ID format and unauthorized access rejection.
 *
 * This performs a hard delete with no recovery option.
 *
 * @param props.connection
 * @param props.id The unique identifier of the client secret regeneration
 *   record to delete
 * @path /oauthServer/admin/oauthServerClientSecretRegenerations/:id
 * @accessor api.functional.oauthServer.admin.oauthServerClientSecretRegenerations.eraseSecretRegenerationRecord
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseSecretRegenerationRecord(
  connection: IConnection,
  props: eraseSecretRegenerationRecord.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseSecretRegenerationRecord.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseSecretRegenerationRecord.METADATA,
          path: eraseSecretRegenerationRecord.path(props),
          status: null,
        },
      );
}
export namespace eraseSecretRegenerationRecord {
  export type Props = {
    /**
     * The unique identifier of the client secret regeneration record to
     * delete
     */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/oauthServer/admin/oauthServerClientSecretRegenerations/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/admin/oauthServerClientSecretRegenerations/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseSecretRegenerationRecord.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseSecretRegenerationRecord.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
