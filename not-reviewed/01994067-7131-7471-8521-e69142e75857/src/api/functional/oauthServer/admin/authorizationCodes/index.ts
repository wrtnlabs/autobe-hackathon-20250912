import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IOauthServerAuthorizationCode } from "../../../../structures/IOauthServerAuthorizationCode";

/**
 * Update an existing OAuth authorization code record by ID.
 *
 * Updates the OAuth authorization code record identified by the given ID.
 * Allows changes to mutable fields such as redirect URI and JSON data
 * representing the OAuth request.
 *
 * The unique authorization code string and creation timestamp remain immutable
 * to preserve audit trail and protocol integrity.
 *
 * Only authorized system components and administrators may perform updates to
 * maintain security.
 *
 * The operation responds with the updated record including timestamps and
 * deleted_at to confirm current state.
 *
 * Careful validation prevents accidental overwrite or data conflicts.
 *
 * @param props.connection
 * @param props.id ID of the authorization code record to update
 * @param props.body Update information for authorization code
 * @path /oauthServer/admin/authorizationCodes/:id
 * @accessor api.functional.oauthServer.admin.authorizationCodes.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** ID of the authorization code record to update */
    id: string & tags.Format<"uuid">;

    /** Update information for authorization code */
    body: IOauthServerAuthorizationCode.IUpdate;
  };
  export type Body = IOauthServerAuthorizationCode.IUpdate;
  export type Response = IOauthServerAuthorizationCode;

  export const METADATA = {
    method: "PUT",
    path: "/oauthServer/admin/authorizationCodes/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/oauthServer/admin/authorizationCodes/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerAuthorizationCode =>
    typia.random<IOauthServerAuthorizationCode>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an OAuth authorization code record by ID.
 *
 * Deletes the OAuth authorization code record identified by the given ID from
 * the database.
 *
 * This is a hard delete operation that permanently removes the record,
 * including all associated metadata. It is an administrative operation used to
 * clean up revoked or obsolete authorization codes.
 *
 * Security controls enforce that only administrators can perform this
 * operation.
 *
 * No response body is returned. Upon failure, standard HTTP error responses
 * provide diagnostic information.
 *
 * @param props.connection
 * @param props.id ID of the authorization code record to delete
 * @path /oauthServer/admin/authorizationCodes/:id
 * @accessor api.functional.oauthServer.admin.authorizationCodes.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** ID of the authorization code record to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/oauthServer/admin/authorizationCodes/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/admin/authorizationCodes/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
