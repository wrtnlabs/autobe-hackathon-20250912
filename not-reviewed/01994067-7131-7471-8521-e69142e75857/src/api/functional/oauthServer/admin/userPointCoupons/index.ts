import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IOauthServerUserPointCoupon } from "../../../../structures/IOauthServerUserPointCoupon";
import { IPageIOauthServerUserPointCoupon } from "../../../../structures/IPageIOauthServerUserPointCoupon";

/**
 * Create a new user point coupon usage record to represent coupon redemption by
 * a user.
 *
 * This endpoint accepts user ID, coupon ID, and usage time, validates business
 * rules such as coupon validity and user eligibility, then records the usage
 * event and updates related point balances.
 *
 * Access is restricted to administrators to maintain integrity.
 *
 * Successful creation returns the newly created usage record with all audit
 * information.
 *
 * @param props.connection
 * @param props.body User point coupon usage creation data
 * @path /oauthServer/admin/userPointCoupons
 * @accessor api.functional.oauthServer.admin.userPointCoupons.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** User point coupon usage creation data */
    body: IOauthServerUserPointCoupon.ICreate;
  };
  export type Body = IOauthServerUserPointCoupon.ICreate;
  export type Response = IOauthServerUserPointCoupon;

  export const METADATA = {
    method: "POST",
    path: "/oauthServer/admin/userPointCoupons",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/oauthServer/admin/userPointCoupons";
  export const random = (): IOauthServerUserPointCoupon =>
    typia.random<IOauthServerUserPointCoupon>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a paginated list of user point coupon usage records.
 *
 * Retrieve a filtered and paginated list of user point coupon usage entries.
 *
 * This operation allows clients to query the oauth_server_user_point_coupons
 * table records with support for various search, filter, and pagination
 * parameters to facilitate efficient retrieval of user's coupon usage history.
 *
 * Security considerations include restricting access to authenticated roles
 * with appropriate permissions to view user payment and coupon histories.
 *
 * This operation connects to the oauth_server_user_point_coupons relational
 * table which links users with point coupons redeemed. It supports retrieving
 * related user and coupon linked data through foreign keys.
 *
 * Expected behaviors include paginated responses, validation of request
 * parameters, and error handling for unauthorized or malformed requests.
 *
 * No request body is needed for this read operation except complex filtering
 * handled via the PATCH method request body.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for filtering
 *   user point coupons
 * @path /oauthServer/admin/userPointCoupons
 * @accessor api.functional.oauthServer.admin.userPointCoupons.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for filtering user point
     * coupons
     */
    body: IOauthServerUserPointCoupon.IRequest;
  };
  export type Body = IOauthServerUserPointCoupon.IRequest;
  export type Response = IPageIOauthServerUserPointCoupon;

  export const METADATA = {
    method: "PATCH",
    path: "/oauthServer/admin/userPointCoupons",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/oauthServer/admin/userPointCoupons";
  export const random = (): IPageIOauthServerUserPointCoupon =>
    typia.random<IPageIOauthServerUserPointCoupon>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific user point coupon usage record by ID.
 *
 * Retrieve detailed information for a specific user point coupon usage record
 * by its unique identifier.
 *
 * Access control is critical to protect user financial data; this operation
 * restricts access to administrators.
 *
 * The underlying data includes user ID, coupon ID, usage timestamp, creation
 * and update times, and soft deletion timestamp.
 *
 * Proper error handling for non-existent IDs and authorization is implemented.
 *
 * This endpoint is a straightforward retrieval of the user point coupon usage
 * entity record.
 *
 * @param props.connection
 * @param props.id Unique identifier of the user point coupon usage record
 * @path /oauthServer/admin/userPointCoupons/:id
 * @accessor api.functional.oauthServer.admin.userPointCoupons.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the user point coupon usage record */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IOauthServerUserPointCoupon;

  export const METADATA = {
    method: "GET",
    path: "/oauthServer/admin/userPointCoupons/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/admin/userPointCoupons/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerUserPointCoupon =>
    typia.random<IOauthServerUserPointCoupon>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing user point coupon usage record by unique ID.
 *
 * Allows modification of coupon usage details with validations to ensure
 * integrity.
 *
 * Restricted to admin roles only for security and audit compliance.
 *
 * Returns the updated user point coupon usage record after changes.
 *
 * @param props.connection
 * @param props.id Unique identifier of the user point coupon usage record to
 *   update
 * @param props.body User point coupon usage update data
 * @path /oauthServer/admin/userPointCoupons/:id
 * @accessor api.functional.oauthServer.admin.userPointCoupons.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the user point coupon usage record to update */
    id: string & tags.Format<"uuid">;

    /** User point coupon usage update data */
    body: IOauthServerUserPointCoupon.IUpdate;
  };
  export type Body = IOauthServerUserPointCoupon.IUpdate;
  export type Response = IOauthServerUserPointCoupon;

  export const METADATA = {
    method: "PUT",
    path: "/oauthServer/admin/userPointCoupons/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/oauthServer/admin/userPointCoupons/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerUserPointCoupon =>
    typia.random<IOauthServerUserPointCoupon>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete user point coupon by ID.
 *
 * Permanently deletes a user point coupon record identified by the 'id' path
 * parameter.
 *
 * This operation targets the oauth_server_user_point_coupons table, which
 * tracks the association between users and point coupons they have redeemed.
 *
 * Only authorized users with 'admin' role can perform this action to prevent
 * unauthorized data loss.
 *
 * No request body is required. The response body is empty upon successful
 * deletion.
 *
 * Error handling includes validation of existence of the ID and permission
 * checks.
 *
 * @param props.connection
 * @param props.id Unique identifier of the user point coupon to delete
 * @path /oauthServer/admin/userPointCoupons/:id
 * @accessor api.functional.oauthServer.admin.userPointCoupons.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the user point coupon to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/oauthServer/admin/userPointCoupons/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/admin/userPointCoupons/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
