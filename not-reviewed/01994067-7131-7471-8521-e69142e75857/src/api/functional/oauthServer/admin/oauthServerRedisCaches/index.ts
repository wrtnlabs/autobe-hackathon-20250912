import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IOauthServerRedisCache } from "../../../../structures/IOauthServerRedisCache";
import { IPageIOauthServerRedisCache } from "../../../../structures/IPageIOauthServerRedisCache";
import { IOauthServerredisServerRedisCaches } from "../../../../structures/IOauthServerredisServerRedisCaches";

/**
 * Create Redis cache configuration.
 *
 * Create a new Redis cache configuration for OAuth server.
 *
 * Administrators can add new cache configurations specifying cache names, TTL
 * durations, key prefixes, and usage descriptions.
 *
 * This allows flexible and performant caching strategies in Redis for various
 * OAuth server data.
 *
 * Proper validation ensures unique cache names and valid TTL values.
 *
 * The created cache record is returned with full details.
 *
 * Authorization with admin role is mandatory.
 *
 * @param props.connection
 * @param props.body Creation info of the Redis cache configuration
 * @path /oauthServer/admin/oauthServerRedisCaches
 * @accessor api.functional.oauthServer.admin.oauthServerRedisCaches.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation info of the Redis cache configuration */
    body: IOauthServerRedisCache.ICreate;
  };
  export type Body = IOauthServerRedisCache.ICreate;
  export type Response = IOauthServerRedisCache;

  export const METADATA = {
    method: "POST",
    path: "/oauthServer/admin/oauthServerRedisCaches",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/oauthServer/admin/oauthServerRedisCaches";
  export const random = (): IOauthServerRedisCache =>
    typia.random<IOauthServerRedisCache>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List Redis cache configurations with filters and pagination.
 *
 * Retrieve a list of Redis cache configurations with filtering and pagination.
 *
 * This operation offers system administrators the ability to query Redis cache
 * settings applied for OAuth token verification caching, user info caching,
 * external API response caching, and client info caching.
 *
 * Results include detailed cache names, TTL settings, prefixes, and
 * descriptions.
 *
 * Request body must specify search filters and pagination options.
 *
 * The response provides a paginated list of cache configuration summaries.
 *
 * Admin role authorization is required due to sensitive system settings access.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for Redis cache
 *   configurations
 * @path /oauthServer/admin/oauthServerRedisCaches
 * @accessor api.functional.oauthServer.admin.oauthServerRedisCaches.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for Redis cache
     * configurations
     */
    body: IOauthServerRedisCache.IRequest;
  };
  export type Body = IOauthServerRedisCache.IRequest;
  export type Response = IPageIOauthServerRedisCache.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/oauthServer/admin/oauthServerRedisCaches",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/oauthServer/admin/oauthServerRedisCaches";
  export const random = (): IPageIOauthServerRedisCache.ISummary =>
    typia.random<IPageIOauthServerRedisCache.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get Redis cache configuration detail by id.
 *
 * Retrieve detailed Redis cache configuration by unique ID.
 *
 * This operation allows administrators to view full configuration details of a
 * Redis cache used within the OAuth server system.
 *
 * It corresponds to the OAuth server Redis cache table with fields describing
 * TTL values, key prefixes, and usage descriptions.
 *
 * The exact cache configuration is identified by the UUID provided as path
 * parameter.
 *
 * Ownership and permission restrictions ensure that only authorized admin users
 * can access this data.
 *
 * @param props.connection
 * @param props.id Unique identifier of the Redis cache configuration to
 *   retrieve
 * @path /oauthServer/admin/oauthServerRedisCaches/:id
 * @accessor api.functional.oauthServer.admin.oauthServerRedisCaches.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the Redis cache configuration to retrieve */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IOauthServerRedisCache;

  export const METADATA = {
    method: "GET",
    path: "/oauthServer/admin/oauthServerRedisCaches/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/admin/oauthServerRedisCaches/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerRedisCache =>
    typia.random<IOauthServerRedisCache>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update Redis cache configuration by ID in oauth_server_redis_caches.
 *
 * Update an existing Redis cache configuration by ID in the OAuth Server
 * system.
 *
 * This operation modifies the properties like cache_name, prefix, ttl_seconds,
 * and description to adjust caching behavior for token validation, user info
 * caching, and external API result caching.
 *
 * Security considerations include ensuring authorized access for updating cache
 * configurations to avoid caching inconsistencies or stale data.
 *
 * It relates directly to the oauth_server_redis_caches table which stores
 * settings for Redis caching.
 *
 * Validation rules require the ID to be a valid UUID and the updated fields to
 * respect constraints like TTL positivity.
 *
 * This operation complements the create and delete endpoints for Redis cache
 * management.
 *
 * It returns the updated Redis cache entity as confirmation of successful
 * modification.
 *
 * @param props.connection
 * @param props.id UUID of the Redis cache configuration to update
 * @param props.body Updated Redis cache configuration data
 * @path /oauthServer/admin/oauthServerRedisCaches/:id
 * @accessor api.functional.oauthServer.admin.oauthServerRedisCaches.updateRedisCacheConfig
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateRedisCacheConfig(
  connection: IConnection,
  props: updateRedisCacheConfig.Props,
): Promise<updateRedisCacheConfig.Response> {
  return true === connection.simulate
    ? updateRedisCacheConfig.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateRedisCacheConfig.METADATA,
          path: updateRedisCacheConfig.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateRedisCacheConfig {
  export type Props = {
    /** UUID of the Redis cache configuration to update */
    id: string & tags.Format<"uuid">;

    /** Updated Redis cache configuration data */
    body: IOauthServerredisServerRedisCaches.IUpdate;
  };
  export type Body = IOauthServerredisServerRedisCaches.IUpdate;
  export type Response = IOauthServerredisServerRedisCaches;

  export const METADATA = {
    method: "PUT",
    path: "/oauthServer/admin/oauthServerRedisCaches/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/oauthServer/admin/oauthServerRedisCaches/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOauthServerredisServerRedisCaches =>
    typia.random<IOauthServerredisServerRedisCaches>();
  export const simulate = (
    connection: IConnection,
    props: updateRedisCacheConfig.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateRedisCacheConfig.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete Redis cache configuration by ID in oauth_server_redis_caches.
 *
 * Soft delete a Redis cache configuration by ID in the OAuth Server system.
 *
 * This sets the deleted_at timestamp, disabling the cache configuration from
 * further use while retaining the record for auditing.
 *
 * Only users with admin role are authorized to perform this operation due to
 * its impact on caching behavior.
 *
 * This endpoint interacts with the oauth_server_redis_caches table that manages
 * Redis caching settings.
 *
 * Deletion is logical, preserving the data but marking it as inactive.
 *
 * No content is returned upon success.
 *
 * @param props.connection
 * @param props.id UUID of the Redis cache configuration to delete
 * @path /oauthServer/admin/oauthServerRedisCaches/:id
 * @accessor api.functional.oauthServer.admin.oauthServerRedisCaches.eraseRedisCacheConfig
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseRedisCacheConfig(
  connection: IConnection,
  props: eraseRedisCacheConfig.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseRedisCacheConfig.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseRedisCacheConfig.METADATA,
          path: eraseRedisCacheConfig.path(props),
          status: null,
        },
      );
}
export namespace eraseRedisCacheConfig {
  export type Props = {
    /** UUID of the Redis cache configuration to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/oauthServer/admin/oauthServerRedisCaches/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/oauthServer/admin/oauthServerRedisCaches/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseRedisCacheConfig.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseRedisCacheConfig.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
