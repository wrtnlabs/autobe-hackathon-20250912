import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IOauthServerDeveloper } from "../../../structures/IOauthServerDeveloper";

/**
 * Create a new developer account for OAuth server as defined in
 * oauth_server_developers table.
 *
 * Registers a new developer account using email and password according to the
 * oauth_server_developers schema. This is part of the member kind user system,
 * supporting registration and initial authorization. The operation is public
 * with join authorizationType. It stores hashed passwords as password_hash
 * field. On successful registration, IOauthServerDeveloper.IAuthorized type
 * with access and refresh tokens is returned. Required fields correspond
 * exactly to oauth_server_developers columns relevant to creation.
 *
 * @param props.connection
 * @param props.body Required data to create a developer account by registration
 *   API.
 * @setHeader token.access Authorization
 *
 * @path /auth/developer/join
 * @accessor api.functional.auth.developer.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** Required data to create a developer account by registration API. */
    body: IOauthServerDeveloper.ICreate;
  };
  export type Body = IOauthServerDeveloper.ICreate;
  export type Response = IOauthServerDeveloper.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/developer/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/developer/join";
  export const random = (): IOauthServerDeveloper.IAuthorized =>
    typia.random<IOauthServerDeveloper.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Login for developer user according to oauth_server_developers table
 * credentials.
 *
 * Authenticate developer user by verifying email and password against
 * oauth_server_developers schema. On success returns authorized tokens in
 * IOauthServerDeveloper.IAuthorized format. Public endpoint with login
 * authorizationType. It is part of full authentication flow for member kind
 * users.
 *
 * @param props.connection
 * @param props.body Login credentials for developer user authentication.
 * @setHeader token.access Authorization
 *
 * @path /auth/developer/login
 * @accessor api.functional.auth.developer.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Login credentials for developer user authentication. */
    body: IOauthServerDeveloper.ILogin;
  };
  export type Body = IOauthServerDeveloper.ILogin;
  export type Response = IOauthServerDeveloper.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/developer/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/developer/login";
  export const random = (): IOauthServerDeveloper.IAuthorized =>
    typia.random<IOauthServerDeveloper.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh JWT tokens for developer users to maintain authenticated session.
 *
 * Refresh access and refresh tokens for developer accounts. Validates the
 * refresh token and issues new tokens. Returns
 * IOauthServerDeveloper.IAuthorized type containing new tokens. Only accessible
 * with valid refresh token authorization. Member kind user operation matching
 * oauth_server_developers schema.
 *
 * @param props.connection
 * @param props.body Refresh token request payload.
 * @setHeader token.access Authorization
 *
 * @path /auth/developer/refresh
 * @accessor api.functional.auth.developer.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Refresh token request payload. */
    body: IOauthServerDeveloper.IRefresh;
  };
  export type Body = IOauthServerDeveloper.IRefresh;
  export type Response = IOauthServerDeveloper.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/developer/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/developer/refresh";
  export const random = (): IOauthServerDeveloper.IAuthorized =>
    typia.random<IOauthServerDeveloper.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
