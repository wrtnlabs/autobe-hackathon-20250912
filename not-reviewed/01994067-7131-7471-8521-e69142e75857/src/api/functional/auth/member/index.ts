import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IOauthServerMember } from "../../../structures/IOauthServerMember";

/**
 * Register a new member user and issue JWT tokens.
 *
 * This operation allows member users to join/register by providing email and
 * password credentials. It leverages the oauth_server_members table fields such
 * as email, email_verified, and password_hash for user creation and
 * management.
 *
 * The registration process requires validating unique emails, securely hashing
 * passwords, and initializing the email_verified flag.
 *
 * Upon successful registration, JWT access and refresh tokens are issued to
 * authenticate the user for subsequent requests.
 *
 * The operation is public, allowing unauthenticated users to access it for
 * account creation.
 *
 * This operation is part of the authentication workflow alongside login and
 * token refresh operations for member users.
 *
 * @param props.connection
 * @param props.body Member registration info including email and password
 * @setHeader token.access Authorization
 *
 * @path /auth/member/join
 * @accessor api.functional.auth.member.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** Member registration info including email and password */
    body: IOauthServerMember.ICreate;
  };
  export type Body = IOauthServerMember.ICreate;
  export type Response = IOauthServerMember.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/member/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/member/join";
  export const random = (): IOauthServerMember.IAuthorized =>
    typia.random<IOauthServerMember.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Member user login and JWT token issuance.
 *
 * Authenticates a member user's credentials (email and password) and, upon
 * success, issues JWT access and refresh tokens for authenticated session
 * management.
 *
 * The operation validates the user's email and compares the password hash with
 * the stored value in oauth_server_members.
 *
 * It returns tokens adhering to the IOauthServerMember.IAuthorized response
 * schema.
 *
 * This endpoint is public to allow user authentication before session
 * initiation.
 *
 * It complements the registration and token refresh endpoints in the OAuth
 * authentication lifecycle.
 *
 * @param props.connection
 * @param props.body Member login credentials including email and password
 * @setHeader token.access Authorization
 *
 * @path /auth/member/login
 * @accessor api.functional.auth.member.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Member login credentials including email and password */
    body: IOauthServerMember.ILogin;
  };
  export type Body = IOauthServerMember.ILogin;
  export type Response = IOauthServerMember.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/member/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/member/login";
  export const random = (): IOauthServerMember.IAuthorized =>
    typia.random<IOauthServerMember.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh JWT tokens for member user.
 *
 * Refreshes JWT tokens for member users by accepting a valid refresh token and
 * issuing new authorization tokens.
 *
 * Ensures the provided refresh token is valid and not revoked.
 *
 * Returns new JWT access and refresh tokens adhering to
 * IOauthServerMember.IAuthorized response schema.
 *
 * This operation maintains secure session continuity.
 *
 * It complements the authentication flow of join and login operations for
 * members.
 *
 * @param props.connection
 * @param props.body Refresh token request
 * @setHeader token.access Authorization
 *
 * @path /auth/member/refresh
 * @accessor api.functional.auth.member.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Refresh token request */
    body: IOauthServerMember.IRefresh;
  };
  export type Body = IOauthServerMember.IRefresh;
  export type Response = IOauthServerMember.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/member/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/member/refresh";
  export const random = (): IOauthServerMember.IAuthorized =>
    typia.random<IOauthServerMember.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
