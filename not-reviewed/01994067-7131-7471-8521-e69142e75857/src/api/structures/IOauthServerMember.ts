import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Member user entity represents a registered OAuth server user with necessary
 * authentication fields and auditing timestamps.
 *
 * The entity includes unique email and password hash fields to support
 * authentication, and a soft delete policy.
 *
 * This model excludes sensitive raw password fields and only stores hashed
 * versions for security.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IOauthServerMember = {
  /** Unique identifier (UUID) for the member user. */
  id: string & tags.Format<"uuid">;

  /** Email address used for authentication and communication. */
  email: string;

  /** Flag indicating whether the user's email has been verified. */
  email_verified: boolean;

  /** Hashed password stored securely for authentication purposes. */
  password_hash: string;

  /** Timestamp when the member record was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the member record was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp indicating soft deletion; null if active. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IOauthServerMember {
  /**
   * Schema for creating a new member during registration, requires email and
   * plaintext password to be provided which will be hashed internally.
   */
  export type ICreate = {
    /** Member email address for login. */
    email: string & tags.Format<"email">;

    /**
     * Password in plain text during creation. Must be hashed server-side
     * upon receiving.
     */
    password: string;
  };

  /**
   * Login credentials input, used for authenticating a member with email and
   * password.
   */
  export type ILogin = {
    /** Member email address. */
    email: string & tags.Format<"email">;

    /** Password in plain text to be verified. */
    password: string;
  };

  /**
   * Input DTO for token refresh operations carrying the valid refresh token
   * string.
   */
  export type IRefresh = {
    /** Refresh token string issued previously. */
    refresh_token: string;
  };

  /**
   * Authorized response presenting member information with access and refresh
   * tokens for authenticated session management.
   */
  export type IAuthorized = {
    /** Member id in UUID format. */
    id: string & tags.Format<"uuid">;

    /** Email address used for authentication and communication. */
    email: string;

    /** Flag indicating whether the user's email has been verified. */
    email_verified: boolean;

    /** Hashed password stored securely for authentication purposes. */
    password_hash: string;

    /** Timestamp when the member record was created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when the member record was last updated. */
    updated_at: string & tags.Format<"date-time">;

    /** Timestamp indicating soft deletion; null if active. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT access token string. */
    access_token?: string | undefined;

    /** JWT refresh token string. */
    refresh_token?: string | undefined;

    /** Expiration seconds for the access token. */
    expires_in?: number | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Request properties for searching members with filters and pagination
   * support.
   */
  export type IRequest = {
    /** Optional email filter for searching members. */
    email?: string | undefined;

    /** Optional email verification status filter. */
    email_verified?: boolean | undefined;

    /** Optional page number for pagination. */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /** Optional limit for pagination. */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /** Optional sort order, e.g., 'asc', 'desc'. */
    sort?: string | null | undefined;
  };

  /**
   * Input type for updating a member user with optional fields for partial
   * update.
   */
  export type IUpdate = {
    /** Optional updated email address. */
    email?: string | undefined;

    /** Optional updated email verification status. */
    email_verified?: boolean | undefined;

    /** Optional updated hashed password. */
    password_hash?: string | undefined;

    /** Optional soft deletion timestamp; null if active. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Summary information for an OAuth server member user.
   *
   * Includes essential identification and verification status.
   *
   * Suitable for paginated lists, overviews, and minimal profile views.
   */
  export type ISummary = {
    /** Unique identifier of the member user. */
    id: string & tags.Format<"uuid">;

    /** Email address of the member user, used for login and communication. */
    email: string & tags.Format<"email">;

    /** Flag indicating whether the member user's email has been verified. */
    email_verified: boolean;

    /** Timestamp when the member account was created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when the member account was last updated. */
    updated_at: string & tags.Format<"date-time">;
  };
}
