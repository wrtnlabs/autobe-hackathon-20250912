import { tags } from "typia";

/**
 * Represents a point coupon for granting user points, including unique code,
 * value, expiration, usage limits, and audit timestamps.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IOauthServerPointCoupon = {
  /**
   * Primary key unique identifier of the point coupon.
   *
   * Unique identifier in UUID format.
   *
   * This identifier is the unique key across all point coupons.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Unique coupon code string used for redemption.
   *
   * Enforces uniqueness in the system.
   */
  code: string;

  /**
   * Optional description explaining the coupon usage.
   *
   * Provides context about the coupon.
   */
  description?: string | null | undefined;

  /**
   * Points credited upon successful coupon redemption.
   *
   * Must be a number with integer format.
   */
  value: number & tags.Type<"int32">;

  /**
   * Maximum number of times this coupon can be issued or redeemed.
   *
   * Numeric integer field.
   */
  max_issuance: number & tags.Type<"int32">;

  /**
   * Expiration timestamp of the coupon.
   *
   * Must be an ISO 8601 datetime string with timezone.
   */
  expire_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the coupon record was created.
   *
   * ISO 8601 datetime format with timezone.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of the last update of the coupon record.
   *
   * ISO 8601 datetime format with timezone.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Optional soft delete timestamp.
   *
   * Null indicates active record, otherwise soft deleted.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IOauthServerPointCoupon {
  /**
   * Search criteria and pagination parameters for OAuth server coupons
   * filtering.
   */
  export type IRequest = {
    /** Optional partial match search for coupon code. */
    code?: string | undefined;

    /** Filter by expiration date greater or equal. */
    expire_at_from?: (string & tags.Format<"date-time">) | null | undefined;

    /** Filter by expiration date lesser or equal. */
    expire_at_to?: (string & tags.Format<"date-time">) | null | undefined;

    /** Page number for pagination, unsigned 32-bit integer. */
    page?: number | null | undefined;

    /** Limit of items per page, unsigned 32-bit integer. */
    limit?: number | null | undefined;

    /** Sorting order criteria. */
    order_by?: string | null | undefined;

    /** Sort order: asc or desc, only these two values allowed. */
    order_direction?: "asc" | "desc" | null | undefined;
  };

  /** Payload for creating a new OAuth server point coupon. */
  export type ICreate = {
    /**
     * Coupon code string.
     *
     * Required field.
     */
    code: string;

    /** Optional description of the coupon usage. */
    description?: string | null | undefined;

    /**
     * Point value granted by the coupon.
     *
     * Required.
     */
    value: number & tags.Type<"int32">;

    /**
     * Max number of times coupon can be issued or redeemed.
     *
     * Required.
     */
    max_issuance: number & tags.Type<"int32">;

    /**
     * Expiration datetime of the coupon.
     *
     * Required.
     */
    expire_at: string & tags.Format<"date-time">;
  };

  /** Payload for updating an existing OAuth server point coupon. */
  export type IUpdate = {
    /** Optional coupon code to update. */
    code?: string | undefined;

    /** Optional description field to update. */
    description?: string | null | undefined;

    /** Optional point value. */
    value?: (number & tags.Type<"int32">) | undefined;

    /** Optional max issuance count. */
    max_issuance?: (number & tags.Type<"int32">) | undefined;

    /** Optional expiration datetime. */
    expire_at?: (string & tags.Format<"date-time">) | undefined;
  };
}
