import { tags } from "typia";

/**
 * Opaque OAuth refresh token entity.
 *
 * Represents an OAuth refresh token linked to a client and optionally an
 * authorization code.
 *
 * Includes token string, scopes, expiration, and audit timestamps.
 *
 * Supports soft deletion.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IOauthServerRefreshToken = {
  /** Unique identifier of the refresh token */
  id: string & tags.Format<"uuid">;

  /** Identifier of the associated OAuth client */
  oauth_client_id: string & tags.Format<"uuid">;

  /** Optional identifier of related authorization code */
  authorization_code_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** The opaque refresh token string */
  token: string;

  /** Space-separated list of granted scopes */
  scope: string;

  /** Expiration timestamp of the refresh token */
  expires_at: string & tags.Format<"date-time">;

  /** Creation timestamp */
  created_at: string & tags.Format<"date-time">;

  /** Last update timestamp */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp, null when active */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IOauthServerRefreshToken {
  /**
   * Request parameters for searching and paginating OAuth refresh tokens.
   * Supports page, limit, and search filter.
   */
  export type IRequest = {
    /** Optional page number for pagination (uint32) */
    page?: number | null | undefined;

    /** Optional limit of records per page (uint32) */
    limit?: number | null | undefined;

    /** Optional search or filter string */
    search?: string | null | undefined;
  };

  /**
   * Payload to create a new opaque refresh token associated with an OAuth
   * client and optionally an authorization code.
   */
  export type ICreate = {
    /** UUID of the OAuth client owning the refresh token. */
    oauth_client_id: string & tags.Format<"uuid">;

    /**
     * Optional UUID of the authorization code that granted this refresh
     * token; nullable.
     */
    authorization_code_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Opaque refresh token string unique within the system. */
    token: string;

    /** Space-separated list of scopes granted to this refresh token. */
    scope: string;

    /** Expiration time of this refresh token in ISO 8601 format. */
    expires_at: string & tags.Format<"date-time">;
  };

  /**
   * Payload to update an existing OAuth refresh token with any subset of
   * modifiable fields. Nullable fields support explicit null.
   */
  export type IUpdate = {
    /** UUID of the OAuth client owning the refresh token. */
    oauth_client_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Optional UUID of authorization code that granted this refresh token;
     * nullable.
     */
    authorization_code_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Opaque refresh token string unique within the system. */
    token?: string | undefined;

    /** Space-separated list of scopes granted to this refresh token. */
    scope?: string | undefined;

    /** Expiration time of this refresh token in ISO 8601 format. */
    expires_at?: (string & tags.Format<"date-time">) | undefined;

    /** Timestamp marking soft deletion or null if active. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /** Refresh token summary with token string, scopes, and expiration. */
  export type ISummary = {
    /** Unique identifier of the refresh token (UUID). */
    id: string & tags.Format<"uuid">;

    /** The opaque refresh token string. */
    token: string;

    /** Space separated scopes granted by the token. */
    scope: string;

    /** Expiration time in ISO 8601 format. */
    expires_at: string & tags.Format<"date-time">;
  };
}
