import { tags } from "typia";

/**
 * Association table linking internal users with external social login accounts
 * from various providers. Maintains unique external user IDs per provider,
 * enabling unified user identity management across multiple social OAuth
 * services.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IOauthServerSocialUserLink = {
  /** Primary Key unique identifier of the social user link */
  id: string & tags.Format<"uuid">;

  /** Internal user reference linked to oauth_server_members.id */
  user_id: string & tags.Format<"uuid">;

  /**
   * Social OAuth provider reference linked to
   * oauth_server_social_providers.id
   */
  social_provider_id: string & tags.Format<"uuid">;

  /** Unique user identifier assigned by the social provider */
  external_user_id: string;

  /** OAuth access token for the user on the social provider; nullable */
  access_token?: string | null | undefined;

  /** OAuth refresh token for the user on the social provider; nullable */
  refresh_token?: string | null | undefined;

  /** Expiration datetime of the OAuth access token; nullable */
  token_expiry?: (string & tags.Format<"date-time">) | null | undefined;

  /** Record creation timestamp */
  created_at: string & tags.Format<"date-time">;

  /** Record last update timestamp */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp; nullable */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IOauthServerSocialUserLink {
  /**
   * Request schema for searching and filtering social user links.
   *
   * Includes filter criteria such as user ID, social provider ID, external
   * user ID, timestamps, deletion status, and pagination parameters.
   */
  export type IRequest = {
    /** Filter by user ID uniquely identifying a member in the system. */
    user_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Filter by the social login provider's unique ID. */
    social_provider_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Filter by external user ID provided by the social login provider. */
    external_user_id?: string | null | undefined;

    /** Filter for records created after or at the specified datetime. */
    created_at_gte?: (string & tags.Format<"date-time">) | null | undefined;

    /** Filter for records created before or at the specified datetime. */
    created_at_lte?: (string & tags.Format<"date-time">) | null | undefined;

    /** Filter for records updated after or at the specified datetime. */
    updated_at_gte?: (string & tags.Format<"date-time">) | null | undefined;

    /** Filter for records updated before or at the specified datetime. */
    updated_at_lte?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * If true, filters for records that are not soft-deleted (i.e.,
     * deleted_at is null). If false, filters for records that are
     * soft-deleted. Null means no filter on this field.
     */
    deleted_at_null?: boolean | null | undefined;

    /** Maximum number of records to return for pagination. */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /** Number of records to skip for pagination. */
    offset?: (number & tags.Type<"int32">) | null | undefined;

    /** Sorting criteria specified as a string, such as 'created_at desc'. */
    order_by?: string | null | undefined;
  };

  /**
   * Summary info about the mapping between a system user and their linked
   * external social login accounts.
   */
  export type ISummary = {
    /** Unique identifier of the social user link entity */
    id: string & tags.Format<"uuid">;

    /** ID of the internal user linked to this social account */
    user_id: string & tags.Format<"uuid">;

    /** ID of the external social login provider */
    social_provider_id: string & tags.Format<"uuid">;

    /** Unique user ID provided by the social OAuth provider */
    external_user_id: string;

    /** Access token issued by the social provider; nullable */
    access_token?: string | null | undefined;

    /** Refresh token issued by the social provider; nullable */
    refresh_token?: string | null | undefined;

    /** Expiration time of the access token; nullable */
    token_expiry?: (string & tags.Format<"date-time">) | null | undefined;

    /** Timestamp when this social user link record was created */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when this social user link record was last updated */
    updated_at: string & tags.Format<"date-time">;

    /** Soft delete timestamp for the record; null if active */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
