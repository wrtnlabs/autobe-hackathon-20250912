import { tags } from "typia";

import { ISort } from "./ISort";

/**
 * Transaction history records capturing increments and decrements to user
 * points for audit purposes, linked to the user_points record. Supports soft
 * deletion and audit timestamps.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IOauthServerUserPointHistory = {
  /** Primary Key. */
  id: string & tags.Format<"uuid">;

  /** Related user points record. */
  user_point_id: string & tags.Format<"uuid">;

  /** Amount of points added or subtracted in this transaction. */
  change_amount: number & tags.Type<"int32">;

  /** Point balance after this transaction update. */
  balance_after_change: number & tags.Type<"int32">;

  /** Description of the reason for the point change. */
  reason: string;

  /** Transaction record creation timestamp. */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of last update, usually same as created_at for historical
   * record.
   */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp for soft deletion; null if active. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IOauthServerUserPointHistory {
  /** Parameters to filter and paginate user point history records. */
  export type IRequest = {
    /** Filter by user_point_id. */
    user_point_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Filter by reason keyword. */
    reason?: string | null | undefined;

    /** Filter by change amount. */
    change_amount?: (number & tags.Type<"int32">) | null | undefined;

    /** Filter transactions created after this datetime. */
    created_at_from?: (string & tags.Format<"date-time">) | null | undefined;

    /** Filter transactions created before this datetime. */
    created_at_to?: (string & tags.Format<"date-time">) | null | undefined;

    /** Filter transactions updated after this datetime. */
    updated_at_from?: (string & tags.Format<"date-time">) | null | undefined;

    /** Filter transactions updated before this datetime. */
    updated_at_to?: (string & tags.Format<"date-time">) | null | undefined;

    /** Filter transactions by null deleted_at field (active records). */
    deleted_at_null?: boolean | null | undefined;

    /** Page number for pagination. */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /** Limit of records per page. */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /** Sort information with key and direction. */
    sort?: ISort | null | undefined;
  };

  /** Parameters required to create a user point history transaction record. */
  export type ICreate = {
    /** User points record reference for this transaction. */
    user_point_id: string & tags.Format<"uuid">;

    /** Points added or removed in this transaction. */
    change_amount: number & tags.Type<"int32">;

    /** Total balance after the change. */
    balance_after_change: number & tags.Type<"int32">;

    /** Reason for the point change. */
    reason: string;
  };

  /** Parameters for updating a user point history transaction record. */
  export type IUpdate = {
    /** User points record reference for this transaction. */
    user_point_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Points added or removed in this transaction. */
    change_amount?: (number & tags.Type<"int32">) | null | undefined;

    /** Total balance after the change. */
    balance_after_change?: (number & tags.Type<"int32">) | null | undefined;

    /** Reason for the point change. */
    reason?: string | null | undefined;

    /** Soft deletion timestamp, null if record active. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /** Summary of a user point history record for list display. */
  export type ISummary = {
    /** Unique ID of the user point history. */
    id: string;

    /** The amount of points changed. */
    change_amount: number & tags.Type<"int32">;

    /** The user's point balance after the change. */
    balance_after_change: number & tags.Type<"int32">;

    /** Reason for the point change. */
    reason: string;

    /** Creation time of the record. */
    created_at: string & tags.Format<"date-time">;
  };
}
