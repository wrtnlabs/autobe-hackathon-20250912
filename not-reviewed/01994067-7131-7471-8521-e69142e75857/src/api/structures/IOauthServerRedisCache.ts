import { tags } from "typia";

/**
 * Redis cache configuration details including TTL, key prefix, and descriptive
 * metadata. This entity controls caching for token verification, user info,
 * external API responses, and client info across the OAuth server.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IOauthServerRedisCache = {
  /** Unique identifier of the Redis cache configuration. UUID format. */
  id: string & tags.Format<"uuid">;

  /** Name of the Redis cache configuration; unique among all caches */
  cache_name: string;

  /** Key prefix used for Redis keys; optional, can be null */
  prefix?: string | null | undefined;

  /** Time to live (TTL) in seconds for cache entries */
  ttl_seconds: number & tags.Type<"int32">;

  /** Description of cache purpose and usage; optional, can be null */
  description?: string | null | undefined;

  /** Timestamp when this cache configuration record was created */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when this cache configuration was last updated */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp; null if cache configuration is active */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IOauthServerRedisCache {
  /** Search criteria and pagination parameters for Redis cache configurations */
  export type IRequest = {
    /** Name of the Redis cache configuration. */
    cache_name?: string | null | undefined;

    /** Key prefix used for Redis keys in this cache. */
    prefix?: string | null | undefined;

    /** Time to live for cache entries, in seconds. */
    ttl_seconds?: (number & tags.Type<"int32">) | null | undefined;

    /** Description of the cache purpose and usage. */
    description?: string | null | undefined;

    /** Timestamp when the cache configuration was created. */
    created_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** Timestamp when the cache configuration was last updated. */
    updated_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Timestamp when the cache configuration was soft deleted; null if
     * active.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** Page number. */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /** Limitation of records per a page. */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /** Sort by property name. */
    sortBy?: string | null | undefined;

    /** Sort direction. */
    sortDirection?: "ASC" | "DESC" | null | undefined;
  };

  /** Request body schema for creating a new Redis cache configuration. */
  export type ICreate = {
    /** Unique name for the Redis cache configuration; must be unique */
    cache_name: string;

    /** TTL (time to live) for cache entries in seconds */
    ttl_seconds: number & tags.Type<"int32">;

    /** Optional key prefix to use in Redis for this cache configuration */
    prefix?: string | null | undefined;

    /** Optional textual description of cache usage and role in the system */
    description?: string | null | undefined;
  };

  /**
   * Retrieve a list of Redis cache configurations with filtering and
   * pagination.
   *
   * This operation offers system administrators the ability to query Redis
   * cache settings applied for OAuth token verification caching, user info
   * caching, external API response caching, and client info caching.
   *
   * Results include detailed cache names, TTL settings, prefixes, and
   * descriptions.
   *
   * Request body must specify search filters and pagination options.
   *
   * The response provides a paginated list of cache configuration summaries.
   *
   * Admin role authorization is required due to sensitive system settings
   * access.
   */
  export type ISummary = {
    /** Name of the Redis cache configuration. */
    cache_name: string;

    /** Key prefix used for Redis keys in this cache. */
    prefix?: string | null | undefined;

    /** Time to live for cache entries, in seconds. */
    ttl_seconds: number & tags.Type<"int32">;

    /** Description of the cache purpose and usage. */
    description?: string | null | undefined;
  };
}
