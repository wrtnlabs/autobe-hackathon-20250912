import { tags } from "typia";

/**
 * Audit logs capturing critical security and operational events including
 * authentication attempts, token issuance, client operations, and system
 * activities for compliance and traceability. This table is append-only
 * capturing immutable event data with timestamps to support audit trails. Does
 * not store sensitive data but records success and failure status with context
 * for monitoring and forensic analysis.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IOauthServerAuditLog = {
  /**
   * Primary Key.
   *
   * Unique identifier of the audit log entry. UUID format.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Type of the audited event such as 'authentication_success',
   * 'authentication_failure', 'token_issued', 'client_registered', etc.
   *
   * Categorizes the event for audit purposes.
   */
  event_type: string;

  /**
   * Timestamp when the event occurred, stored in ISO 8601 format.
   *
   * Indicates when the event took place.
   */
  event_timestamp: string & tags.Format<"date-time">;

  /**
   * Optional UUID identifying the user or client who triggered the event.
   *
   * References the entity responsible for the event.
   */
  actor_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Optional type of the actor triggering the event, e.g., 'user', 'client',
   * 'system'.
   *
   * Describes the role or nature of the actor.
   */
  actor_type?: string | null | undefined;

  /**
   * Detailed description providing context or metadata about the event.
   *
   * Provides additional information about the audit event.
   */
  event_description: string;

  /**
   * Record creation timestamp for audit logs.
   *
   * When the audit log entry was created.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Record last update timestamp. Usually same as creation time since logs
   * are immutable.
   *
   * Tracks updates to this audit entry (rarely used).
   */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp; null if active. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IOauthServerAuditLog {
  /** Request schema for searching audit logs with filtering criteria. */
  export type IRequest = {
    /**
     * Type of the audited event such as 'authentication_success',
     * 'authentication_failure', 'token_issued', 'client_registered', etc.
     */
    event_type: string;

    /** Timestamp when the event occurred, stored in ISO 8601 format. */
    event_timestamp: string & tags.Format<"date-time">;

    /**
     * Optional UUID identifying the user or client who triggered the event.
     *
     * Nullable if event is system-generated.
     */
    actor_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Optional type of the actor triggering the event, e.g., 'user',
     * 'client', 'system'.
     *
     * Nullable when not applicable.
     */
    actor_type?: string | null | undefined;

    /** Detailed description providing context or metadata about the event. */
    event_description: string;

    /** Record creation timestamp for audit logs. */
    created_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Record last update timestamp. Usually same as creation time since
     * logs are immutable.
     */
    updated_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
