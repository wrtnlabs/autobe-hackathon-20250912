import { tags } from "typia";

/**
 * Represents a game profile linked to a user profile in the OAuth server. This
 * entity stores game platform, player name, season, and audit timestamps.
 * Supports soft deletion via deleted_at timestamp.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IOauthServerUserGameProfile = {
  /** Unique identifier of the user game profile record. */
  id: string & tags.Format<"uuid">;

  /** The foreign key linking the game profile to the user profile. */
  user_profile_id: string & tags.Format<"uuid">;

  /**
   * Game platform identifier such as 'pubg', 'kakao_pubg', or
   * 'league_of_legends' where the player's stats are from.
   */
  platform: string;

  /** Player's username or in-game name associated with the game platform. */
  player_name: string;

  /**
   * Season identifier for the game profile; optional or null if not
   * applicable.
   */
  season?: string | null | undefined;

  /** Timestamp when the game profile was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the game profile was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp; null if the record is active. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IOauthServerUserGameProfile {
  /**
   * Request parameters for querying paginated game profile records linked to
   * user profiles. Includes filtering by user profile, platform, player name,
   * season, and timestamps.
   *
   * Supports pagination and sort parameters for efficient data access.
   */
  export type IRequest = {
    /**
     * Filter by user profile ID. Supports UUID format for user profile
     * identifier.
     *
     * Allows narrowing the search to game profiles linked to a specific
     * user profile.
     *
     * Optional for generalized querying.
     */
    user_profile_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Filter by game platform such as 'pubg', 'kakao_pubg', or
     * 'league_of_legends'.
     *
     * Supports exact matching or pattern-based queries.
     *
     * Nullable to allow absence of this filter parameter.
     */
    platform?: string | null | undefined;

    /**
     * Filter by player name for external games.
     *
     * Supports partial or full matching to facilitate search.
     *
     * Nullable property allows flexible search criteria.
     */
    player_name?: string | null | undefined;

    /**
     * Filter by season identifier to segment game profiles per competitive
     * season.
     *
     * Allows narrowing results to specific seasons, optional in queries.
     */
    season?: string | null | undefined;

    /**
     * Filter by creation date/time of game profile record.
     *
     * Supports ISO 8601 date-time format.
     *
     * Allows time range based filtering when used with additional query
     * parameters.
     */
    created_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Filter by last update date/time of the game profile.
     *
     * Allows temporal filtering similar to created_at.
     */
    updated_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Filter by deletion timestamp to include or exclude soft deleted
     * records.
     *
     * Nullable to indicate filter is not applied.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Page number for paginated results.
     *
     * Must be a positive integer if specified.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Max records per page in pagination.
     *
     * Must be a positive integer, defaults to system configuration if
     * omitted.
     */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Sort order specification.
     *
     * Accepts field names with optional direction, e.g. 'created_at desc'.
     */
    sort?: string | null | undefined;
  };

  /**
   * Payload for creating a new user game profile record. Includes user
   * profile linkage, platform identifier, player name, and optional season.
   * Used during create operations to register new game profiles.
   */
  export type ICreate = {
    /** The foreign key linking the game profile to the user profile. */
    user_profile_id: string & tags.Format<"uuid">;

    /**
     * Game platform identifier such as 'pubg', 'kakao_pubg', or
     * 'league_of_legends' where the player's stats are from.
     */
    platform: string;

    /** Player's username or in-game name associated with the game platform. */
    player_name: string;

    /**
     * Season identifier for the game profile; optional or null if not
     * applicable.
     */
    season?: string | null | undefined;
  };

  /**
   * Payload for updating an existing user game profile entity. All fields are
   * optional and nullable to allow partial updates. Includes linking user
   * profile, platform, player name, and season.
   */
  export type IUpdate = {
    /**
     * Foreign key linking the game profile to user profile; nullable in
     * update to allow no change.
     */
    user_profile_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Game platform identifier such as 'pubg', 'kakao_pubg', or
     * 'league_of_legends'. Allows null to indicate no update.
     */
    platform?: string | null | undefined;

    /** Player's username or in-game name; nullable to allow optional update. */
    player_name?: string | null | undefined;

    /** Season identifier; nullable for optional update. */
    season?: string | null | undefined;
  };

  /**
   * Summary information of user game profiles linked to external game
   * accounts.
   */
  export type ISummary = {
    /** Unique identifier of the user game profile */
    id: string & tags.Format<"uuid">;

    /** ID of the user profile to which this game profile belongs */
    user_profile_id: string & tags.Format<"uuid">;

    /** Game platform identifier (e.g., PUBG, League of Legends) */
    platform: string;

    /** Player's in-game name or ID */
    player_name: string;

    /** Season identifier if applicable; nullable */
    season?: string | null | undefined;

    /** Timestamp when the game profile record was created */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when the game profile was last updated */
    updated_at: string & tags.Format<"date-time">;

    /** Soft delete timestamp for the game profile; null if active */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
