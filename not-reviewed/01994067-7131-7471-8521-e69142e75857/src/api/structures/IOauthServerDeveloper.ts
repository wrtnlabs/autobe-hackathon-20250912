import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Developer user entity representing OAuth client developers with permissions
 * to manage clients and SDKs. Includes unique email, email verification flag,
 * password hash, with auditing and soft delete timestamps.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IOauthServerDeveloper = {
  /** Unique identifier for the developer user (UUID format). */
  id: string & tags.Format<"uuid">;

  /** Email address of the developer user. */
  email: string;

  /** Indicates whether the developer's email is verified. */
  email_verified: boolean;

  /** Hashed password for authentication. */
  password_hash: string;

  /** Timestamp when the record was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the record was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp when the record was soft deleted; null if active. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IOauthServerDeveloper {
  /**
   * Payload to create a new developer account. Contains email, email_verified
   * flag, and password hash but not id or timestamps.
   */
  export type ICreate = {
    /** Developer's unique email address for login and communication. */
    email: string;

    /** Flag indicating whether the developer's email has been verified. */
    email_verified: boolean;

    /** Hashed password used for authentication. */
    password_hash: string;
  };

  /** Developer user login credentials for authentication. */
  export type ILogin = {
    /** Developer's email address for authentication. */
    email: string & tags.Format<"email">;

    /** Plaintext password to authenticate; must be securely handled. */
    password: string;
  };

  /** Request schema for refreshing developer user JWT tokens. */
  export type IRefresh = {
    /** Refresh token string to obtain new access tokens. */
    refresh_token: string;
  };

  /**
   * Authorized response containing JWT access and refresh tokens for
   * developer user sessions.
   */
  export type IAuthorized = {
    /** Developer's unique UUID identifier. */
    id: string & tags.Format<"uuid">;

    /** Email address of the developer user. */
    email: string;

    /** Indicates whether the developer's email is verified. */
    email_verified: boolean;

    /** Hashed password for authentication. */
    password_hash: string;

    /** Timestamp when the record was created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when the record was last updated. */
    updated_at: string & tags.Format<"date-time">;

    /** Timestamp when the record was soft deleted; null if active. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /** Request parameters for listing developers with filtering and pagination. */
  export type IRequest = {
    /** Page number. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<0>) | null | undefined;

    /** Number of records per page. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<0>) | null | undefined;

    /** Search keyword for filtering developer list. */
    search?: string | null | undefined;

    /** Property name for sorting. */
    sortBy?: string | null | undefined;

    /** Sorting direction. */
    sortOrder?: "asc" | "desc" | null | undefined;
  };

  /**
   * Input type for updating a developer user. All fields are optional for
   * partial updates.
   */
  export type IUpdate = {
    /** Email address of the developer user. */
    email?: string | undefined;

    /** Indicates whether the developer's email is verified. */
    email_verified?: boolean | undefined;

    /** Hashed password for authentication. */
    password_hash?: string | undefined;
  };
}
