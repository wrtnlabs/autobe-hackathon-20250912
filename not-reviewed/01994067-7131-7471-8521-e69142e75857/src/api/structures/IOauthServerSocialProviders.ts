import { tags } from "typia";

/**
 * Social login OAuth external providers information, managing client IDs,
 * secrets, and authorization endpoints. Provides configuration for integrating
 * external OAuth systems such as Naver, Google, Apple, and others. Supports
 * multi-tenancy and security management for social login integrations.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IOauthServerSocialProviders = {
  /** Primary Key. */
  id: string & tags.Format<"uuid">;

  /** Unique provider identifier name, e.g., 'naver', 'google', 'apple'. */
  provider_name: string;

  /** Client ID used in OAuth flows for this provider. */
  client_id: string;

  /** Client secret associated with the client ID. */
  client_secret: string;

  /** OAuth authorization endpoint URL for the social provider. */
  auth_url: string;

  /** OAuth token endpoint URL for the social provider. */
  token_url: string;

  /** User info API endpoint URL to fetch user details from social provider. */
  user_info_url: string;

  /** OAuth scopes requested for this provider, space separated. */
  scopes?: string | null | undefined;

  /** Flag indicating if this social provider integration is active. */
  is_active: boolean;

  /** Record creation timestamp. */
  created_at: string & tags.Format<"date-time">;

  /** Record last update timestamp. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IOauthServerSocialProviders {
  /**
   * Search criteria and pagination parameters for social login providers.
   *
   * This request allows filtering by Redis cache configuration properties
   * such as name, prefix, TTL, description, and activity status.
   */
  export type IRequest = {
    /** Name of the Redis cache configuration. */
    cache_name?: string | null | undefined;

    /** Key prefix used for Redis keys in this cache. */
    prefix?: string | null | undefined;

    /** Time to live for cache entries, in seconds. */
    ttl_seconds?: (number & tags.Type<"int32">) | null | undefined;

    /** Description of the cache purpose and usage. */
    description: string | null;

    /** Flag indicating if this social provider integration is active. */
    is_active?: boolean | null | undefined;

    /** Record creation timestamp. */
    created_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** Record last update timestamp. */
    updated_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** Soft delete timestamp. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Input schema for creating a new social login provider.
   *
   * This includes unique provider name, OAuth client credentials, endpoints,
   * and activation flag.
   */
  export type ICreate = {
    /** Unique provider identifier name, e.g., 'naver', 'google', 'apple'. */
    provider_name: string;

    /** Client ID used in OAuth flows for this provider. */
    client_id: string;

    /** Client secret associated with the client ID. */
    client_secret: string;

    /** OAuth authorization endpoint URL for the social provider. */
    auth_url: string;

    /** OAuth token endpoint URL for the social provider. */
    token_url: string;

    /**
     * User info API endpoint URL to fetch user details from social
     * provider.
     */
    user_info_url: string;

    /** OAuth scopes requested for this provider, space separated. */
    scopes?: string | null | undefined;

    /** Flag indicating if this social provider integration is active. */
    is_active: boolean;
  };
}
