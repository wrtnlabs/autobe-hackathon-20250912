import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Administrator user entity with elevated privileges for system management.
 *
 * Stores unique email, verified flag, hashed password, with auditing and soft
 * delete timestamps.
 *
 * @author AutoBE - https://github.com/wrtnlabs/autobe
 * @namespace Actors
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IOauthServerAdmin = {
  /** Unique UUID identifier of the administrator */
  id: string & tags.Format<"uuid">;

  /**
   * Administrator account email.
   *
   * Must be a valid unique email.
   */
  email: string;

  /** Flag indicating if the administrator's email is verified. */
  email_verified: boolean;

  /** Hashed password string for authentication. */
  password_hash: string;

  /** Account creation timestamp. */
  created_at: string & tags.Format<"date-time">;

  /** Account last update timestamp. */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp for soft deletion; null when active. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IOauthServerAdmin {
  /**
   * Input data DTO for creating admin user accounts requiring email, email
   * verified flag, and plain password.
   */
  export type ICreate = {
    /** Email address for the admin. */
    email: string & tags.Format<"email">;

    /** Flag whether the email has been verified. */
    email_verified: boolean;

    /** Plain password string to be hashed on server. */
    password: string;
  };

  /**
   * Authorization response containing JWT token.
   *
   * This response is returned after successful authentication operations such
   * as login, join, or token refresh.
   */
  export type IAuthorized = {
    /** Unique UUID identifier of the admin user */
    id: string & tags.Format<"uuid">;

    /**
     * Administrator account email.
     *
     * Must be a valid unique email.
     */
    email: string;

    /** Flag indicating if the administrator's email is verified. */
    email_verified: boolean;

    /** Hashed password string for authentication. */
    password_hash: string;

    /** Account creation timestamp. */
    created_at: string & tags.Format<"date-time">;

    /** Account last update timestamp. */
    updated_at: string & tags.Format<"date-time">;

    /** Timestamp for soft deletion; null when active. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /** Login credentials for admin user including email and password. */
  export type ILogin = {
    /** Email address used for login */
    email: string;

    /** Plain password string (should be protected in transit) */
    password: string;
  };

  /** Refresh token request containing the refresh_token string. */
  export type IRefresh = {
    /** Refresh token string to request a new JWT */
    refresh_token: string;
  };
}
