import { tags } from "typia";

/**
 * Guest user entity representing unauthenticated or anonymous users with
 * minimal stored information.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IOauthServerGuest = {
  /** Unique identifier of the guest user. */
  id: string;

  /** Creation timestamp for the guest record. */
  created_at: string & tags.Format<"date-time">;

  /** Last updated timestamp for the guest record. */
  updated_at: string & tags.Format<"date-time">;

  /** Nullable soft delete timestamp for logical deletion. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IOauthServerGuest {
  /**
   * Data required to create a new guest user.
   *
   * Guest user entities only contain auditing timestamps and id, so creation
   * might be empty or minimal.
   */
  export type ICreate = {};

  /** Refresh token data for guest user token refreshing. */
  export type IRefresh = {
    /** Refresh token string used to obtain new access tokens */
    refresh_token: string;
  };

  /**
   * Request model for updating guest user data. Primarily for optional
   * timestamps.
   */
  export type IUpdate = {
    /**
     * Updated creation timestamp. Should be ISO 8601 formatted string or
     * null.
     */
    created_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** Updated timestamp for last modification. ISO 8601 string or null. */
    updated_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Soft delete timestamp when marking guest as deleted or null if not
     * deleted.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
