import { tags } from "typia";

/**
 * Redis cache configuration entity including full details, timestamps, and soft
 * deletion status.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IOauthServerredisServerRedisCaches = {
  /** Unique ID of the Redis cache configuration */
  id: string & tags.Format<"uuid">;

  /** Redis cache name; must be unique */
  cache_name: string;

  /** Key prefix for Redis keys; may be null */
  prefix?: string | null | undefined;

  /** TTL for cache entries in seconds */
  ttl_seconds: number & tags.Type<"int32">;

  /** Description of the cache usage; nullable */
  description?: string | null | undefined;

  /** Timestamp when record was created */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when record was last updated */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp; null if active */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IOauthServerredisServerRedisCaches {
  /**
   * Request body schema for updating an existing Redis cache configuration.
   * All fields optional to allow partial updates.
   */
  export type IUpdate = {
    /** Redis cache name to update (optional) */
    cache_name?: string | null | undefined;

    /** TTL in seconds for cache expiration when updating */
    ttl_seconds?: (number & tags.Type<"int32">) | undefined;

    /** Key prefix used for Redis keys (optional when updating) */
    prefix?: string | null | undefined;

    /** Description of the cache configuration (optional when updating) */
    description?: string | null | undefined;
  };
}
