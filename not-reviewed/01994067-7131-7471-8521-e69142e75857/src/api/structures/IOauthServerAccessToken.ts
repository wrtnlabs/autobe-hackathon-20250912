import { tags } from "typia";

/**
 * OAuth access token entity representing opaque access credentials issued to
 * clients, including association to OAuth clients and optional authorization
 * codes. All tokens have scopes and expiration timestamps. Soft deletion is
 * supported via 'deleted_at'.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IOauthServerAccessToken = {
  /** Unique identifier for the access token record */
  id: string & tags.Format<"uuid">;

  /** OAuth client ID owning the access token */
  oauth_client_id: string & tags.Format<"uuid">;

  /** Optional authorization code ID linking to this token */
  authorization_code_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** Opaque access token string */
  token: string;

  /** Space separated scopes granted for this access token */
  scope: string;

  /** Expiration datetime in ISO 8601 format */
  expires_at: string & tags.Format<"date-time">;

  /** Timestamp of record creation */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of last update */
  updated_at: string & tags.Format<"date-time">;

  /** Optional soft delete datetime */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IOauthServerAccessToken {
  /**
   * Request parameters to filter and paginate a list of access tokens.
   *
   * @author AutoBE - https://github.com/wrtnlabs/autobe
   * @namespace Oauth
   */
  export type IRequest = {
    /** OAuth client owning this access token. */
    oauth_client_id?: string | null | undefined;

    /** Space-separated scopes granted for this token. */
    scope?: string | null | undefined;

    /** Start filter for token expiration date. */
    expires_from?: (string & tags.Format<"date-time">) | null | undefined;

    /** End filter for token expiration date. */
    expires_to?: (string & tags.Format<"date-time">) | null | undefined;

    /** Page number for pagination. */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /** Limit of records per page. */
    limit?: (number & tags.Type<"int32">) | null | undefined;
  };

  /**
   * Request payload to create a new OAuth access token with required client
   * association, token string, scopes, and expiration.
   */
  export type ICreate = {
    /** OAuth client ID owning this access token (UUID) */
    oauth_client_id: string & tags.Format<"uuid">;

    /** Optional authorization code ID that granted this token (UUID or null) */
    authorization_code_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Opaque access token string to be issued */
    token: string;

    /** Space separated scopes granted by this token */
    scope: string;

    /** Expiration datetime in ISO 8601 format */
    expires_at: string & tags.Format<"date-time">;
  };

  /**
   * Payload to update an existing OAuth access token. All fields are optional
   * and can be updated as needed.
   */
  export type IUpdate = {
    /** OAuth client ID owning this access token (UUID) */
    oauth_client_id?: (string & tags.Format<"uuid">) | undefined;

    /** Optional authorization code ID related to this token */
    authorization_code_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Opaque access token string */
    token?: string | undefined;

    /** Space separated scope strings */
    scope?: string | undefined;

    /** Expiration datetime */
    expires_at?: (string & tags.Format<"date-time">) | undefined;

    /** Optional soft delete date */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /** Access token summary including token string, scopes, and expiration. */
  export type ISummary = {
    /** Unique identifier of the access token (UUID format). */
    id: string & tags.Format<"uuid">;

    /** Opaque access token string used for authorization. */
    token: string;

    /** Space separated list of OAuth scopes granted. */
    scope: string;

    /** Expiration datetime in ISO 8601 format. */
    expires_at: string & tags.Format<"date-time">;
  };
}
