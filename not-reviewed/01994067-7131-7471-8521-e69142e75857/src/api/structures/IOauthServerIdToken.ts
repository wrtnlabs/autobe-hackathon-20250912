import { tags } from "typia";

/**
 * OpenID Connect ID tokens issued to clients for identity claims, linked to
 * OAuth clients and optionally authorization codes. Contains token strings,
 * expirations, timestamps, and soft deletion timestamps for lifecycle
 * management.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IOauthServerIdToken = {
  /** Unique identifier of the ID token. */
  id: string & tags.Format<"uuid">;

  /** Reference to the OAuth client owning this ID token. */
  oauth_client_id: string & tags.Format<"uuid">;

  /** Authorization code related to this ID token, if any. */
  authorization_code_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** ID token string containing OIDC claims normally a JWT or opaque token. */
  token: string;

  /** Expiration timestamp of the ID token. */
  expires_at: string & tags.Format<"date-time">;

  /** Timestamp when ID token was issued. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when ID token was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IOauthServerIdToken {
  /**
   * Request object for querying OAuth ID tokens with pagination and filtering
   * options.
   */
  export type IRequest = {
    /** Page number for pagination, optional. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Maximum number of records per page, optional. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Filter tokens by OAuth client UUID, optional. */
    oauth_client_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Filter for tokens expiring before the given date-time, optional. */
    expires_before?: (string & tags.Format<"date-time">) | null | undefined;

    /** Filter for tokens expiring after the given date-time, optional. */
    expires_after?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Payload to create a new ID token record. Includes client ID, optional
   * authorization code ID, token string, and expiration time.
   */
  export type ICreate = {
    /** Reference to the OAuth client owning this ID token. */
    oauth_client_id: string & tags.Format<"uuid">;

    /** Optional authorization code related to this ID token. */
    authorization_code_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * ID token string containing OIDC claims normally a JWT or opaque
     * token.
     */
    token: string;

    /** Expiration timestamp of the ID token. */
    expires_at: string & tags.Format<"date-time">;
  };

  /**
   * Payload to update an existing ID token record. Allows changes to client
   * ID, optional authorization code ID, token string, expiration time, and
   * soft delete timestamp.
   */
  export type IUpdate = {
    /** Reference to the OAuth client owning this ID token. */
    oauth_client_id?: (string & tags.Format<"uuid">) | undefined;

    /** Optional authorization code related to this ID token. */
    authorization_code_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * ID token string containing OIDC claims normally a JWT or opaque
     * token.
     */
    token?: string | undefined;

    /** Expiration timestamp of the ID token. */
    expires_at?: (string & tags.Format<"date-time">) | undefined;

    /** Soft delete timestamp. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /** ID token summary including token string and expiration. */
  export type ISummary = {
    /** Unique ID token identifier (UUID). */
    id: string & tags.Format<"uuid">;

    /** Opaque ID token string (JWT or opaque format). */
    token: string;

    /** ISO 8601 formatted expiration datetime. */
    expires_at: string & tags.Format<"date-time">;
  };
}
