import { tags } from "typia";

/**
 * A record of client secret regeneration events for audit and compliance.
 *
 * Documents when a client secret was regenerated, by whom, and the reason.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IOauthServerClientSecretRegeneration = {
  /** Primary Key. */
  id: string & tags.Format<"uuid">;

  /** OAuth client ID whose secret was regenerated. */
  oauth_client_id: string & tags.Format<"uuid">;

  /** Admin user ID who performed regeneration. */
  admin_id: string & tags.Format<"uuid">;

  /** Timestamp when regeneration occurred. */
  regenerated_at: string & tags.Format<"date-time">;

  /** Optional reason for regeneration. */
  reason?: string | null | undefined;

  /** Record creation timestamp. */
  created_at: string & tags.Format<"date-time">;

  /** Record update timestamp. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft deletion timestamp; null if active. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IOauthServerClientSecretRegeneration {
  /**
   * Request criteria for searching client secret regeneration records.
   *
   * Includes filters, pagination, and sorting options.
   */
  export type IRequest = {
    /**
     * Number of records to return per page.
     *
     * Optional.
     */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Page number to retrieve.
     *
     * Optional.
     */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * ID filter targeting specific client secret regeneration.
     *
     * Optional.
     */
    id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * OAuth client ID filter.
     *
     * Optional.
     */
    oauth_client_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Admin user ID filter.
     *
     * Optional.
     */
    admin_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * DateTime range start for regeneration timestamps.
     *
     * Optional.
     */
    regenerated_at_start?:
      | (string & tags.Format<"date-time">)
      | null
      | undefined;

    /**
     * DateTime range end for regeneration timestamps.
     *
     * Optional.
     */
    regenerated_at_end?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Sorting instructions (e.g., "regenerated_at DESC").
     *
     * Optional.
     */
    order_by?: string | null | undefined;
  };

  /**
   * Create a new OAuth server client secret regeneration record. This
   * operation records the event of regenerating a client's secret, including
   * the admin who initiated the change and the reason. It helps maintain
   * audit trails and compliance logs for security purposes.
   */
  export type ICreate = {
    /**
     * References the OAuth client {@link oauth_server_oauth_clients.id}
     * whose secret was regenerated.
     */
    oauth_client_id: string & tags.Format<"uuid">;

    /**
     * References the administrator {@link oauth_server_admins.id} who
     * performed the secret regeneration.
     */
    admin_id: string & tags.Format<"uuid">;

    /** Timestamp when the client secret regeneration occurred. */
    regenerated_at: string & tags.Format<"date-time">;

    /** Optional reason or notes explaining the secret regeneration. */
    reason?: string | null | undefined;
  };

  /**
   * Update a client secret regeneration record. This operation updates an
   * existing client secret regeneration record in the OAuth server system's
   * admin domain. It corresponds to the
   * 'oauth_server_client_secret_regenerations' table in the Prisma DB schema.
   * This entity tracks historical client secret regeneration events, linked
   * to specific OAuth clients and administrators, including regeneration time
   * and reason. The update operation allows modifying the reason or other
   * mutable fields while preserving audit timestamps. Business rules ensure
   * the record exists and belongs to a valid client and admin. Role-based
   * access control restricts this operation to admin users with appropriate
   * privilege. Validation includes ensuring the record ID is valid UUID and
   * submitted data matches schema constraints. This supports audit
   * transparency and operational integrity by allowing authorized corrections
   * or additional notes post secret regeneration events.
   */
  export type IUpdate = {
    /** Reason or notes explaining the secret regeneration. */
    reason: string | null;
  };

  /** Summary of a client secret regeneration event. */
  export type ISummary = {
    /** Unique ID of the regeneration event. */
    id: string;

    /** ID of OAuth client. */
    oauth_client_id: string;

    /** ID of admin user. */
    admin_id: string;

    /** Timestamp of regeneration. */
    regenerated_at: string & tags.Format<"date-time">;

    /** Optional reason for regeneration. */
    reason?: string | null | undefined;
  };
}
