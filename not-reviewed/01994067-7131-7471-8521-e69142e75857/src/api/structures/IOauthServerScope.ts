import { tags } from "typia";

/**
 * OAuth 2.0 scopes defining permissions granted via authorization codes or
 * tokens.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IOauthServerScope = {
  /** Unique scope identifier. */
  id: string & tags.Format<"uuid">;

  /** Code defining the OAuth scope. */
  code: string;

  /** Explanation of the scope's permissions. */
  description: string;

  /** Timestamp scope was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp scope was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IOauthServerScope {
  /**
   * Request object for querying OAuth scopes with filters, pagination, and
   * sorting.
   */
  export type IRequest = {
    /**
     * Search string to match scope codes or descriptions including partial
     * matching.
     */
    search?: string | null | undefined;

    /** Page number for pagination, zero-based. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<0>) | null | undefined;

    /** Number of records per page. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Name of the property to sort by, e.g., 'code' or 'created_at'. */
    sortBy?: string | null | undefined;

    /** Direction of sorting: ascending or descending. */
    sortDirection?: "asc" | "desc" | null | undefined;
  };

  /**
   * Input payload to create a new OAuth scope.
   *
   * Includes unique scope code and its description.
   *
   * Used by admin users to define new authorization scopes.
   */
  export type ICreate = {
    /** Unique code representing the scope. */
    code: string;

    /** Description of the scope's permissions. */
    description: string;
  };

  /**
   * Payload to update an existing OAuth scope.
   *
   * Partial updates allowed.
   *
   * Admin users can modify scope code and description.
   */
  export type IUpdate = {
    /** Unique code representing the scope. */
    code?: string | undefined;

    /** Description of the scope's permissions. */
    description?: string | undefined;
  };

  /** OAuth scope summary with code and description. */
  export type ISummary = {
    /** Unique identifier of the scope (UUID). */
    id: string & tags.Format<"uuid">;

    /** Unique scope code string defining the scope. */
    code: string;

    /** Descriptive text explaining the scope's permission. */
    description: string;
  };
}
