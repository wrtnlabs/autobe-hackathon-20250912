import { tags } from "typia";

/**
 * User points entity representing the total point balance a user holds.
 *
 * This entity includes audit timestamps and soft delete status.
 *
 * The balance field represents the current points the user can spend or use
 * within the system.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IOauthServerUserPoint = {
  /** Primary Key identifier of the user point record in the system. */
  id: string & tags.Format<"uuid">;

  /** The unique identifier (UUID) of the user to whom the points belong. */
  user_id: string & tags.Format<"uuid">;

  /** Current total points available for the user. */
  balance: number & tags.Type<"int32">;

  /** Timestamp when this user point record was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when this user point record was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp; null if active. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IOauthServerUserPoint {
  /** Search criteria and pagination parameters for user points. */
  export type IRequest = {
    /** Current page number for pagination. */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /** Maximum number of records per page. */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /** Filter by specific user identifier. */
    user_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Filter records with balance greater than or equal to this value. */
    balance_min?: (number & tags.Type<"int32">) | null | undefined;

    /** Filter records with balance less than or equal to this value. */
    balance_max?: (number & tags.Type<"int32">) | null | undefined;
  };

  /** Data required to create a new user point record. */
  export type ICreate = {
    /** The identifier of the user to whom points are assigned. */
    user_id: string & tags.Format<"uuid">;

    /** Starting total point balance for the user. */
    balance: number & tags.Type<"int32">;
  };

  /** Fields allowed to be updated in a user point record. */
  export type IUpdate = {
    /** New value for the user's total points balance. */
    balance?: (number & tags.Type<"int32">) | undefined;

    /** Timestamp marking soft deletion; null means undeleted. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
