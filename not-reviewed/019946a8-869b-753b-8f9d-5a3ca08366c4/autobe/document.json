{"operations":[{"specification":"This API operation handles the join (registration) process for guest users in the travelRecord system. As guest users are unauthenticated users who can browse public content but cannot record or share locations, the join operation allows creation of a temporary lightweight guest profile. The operation creates a new guest record in the travel_record_guest table capturing only an ID and timestamps for creation and update. No login credentials or passwords are required. Upon successful creation, the system issues a temporary authorization token to the guest for limited access. This operation is publicly accessible with no existing authentication required as guests are unauthenticated by definition.\n\nSecurity considerations include ensuring the temporary guest accounts have limited scope and do not grant access to member-only features. The join operation does not verify credential information but generates a guest profile with minimal information stored in travel_record_guest schema. \n\nThis is foundational for guest user sessions and token issuance prior to accessing public resources.\n\nRelated operations include the refresh token operation which allows guests to renew their temporary access tokens using a valid refresh token.\n\nBehavior upon failure includes returning appropriate error information in case of database write errors or token generation problems.\n\nThis operation supports the guest role in the authentication workflow of travelRecord.\n","authorizationType":"join","description":"Create a new guest user account with minimal information as defined in travel_record_guest table and issue a temporary JWT token for limited guest access in travelRecord system. This does not require credentials but generates an entry in travel_record_guest for session tracking.","summary":"Guest user registration operation creating guest record and issuing temporary JWT token.","parameters":[],"requestBody":{"description":"Guest join request data","typeName":"ITravelRecordGuest.ICreate"},"responseBody":{"description":"Guest authentication authorization response","typeName":"ITravelRecordGuest.IAuthorized"},"authorizationRole":"guest","name":"join","path":"/auth/guest/join","method":"post"},{"specification":"This API operation handles refreshing of the authorization token for guest users of the travelRecord system. It uses the guest's valid refresh token to issue a new temporary JWT access token for continued limited guest session access. This operation is critical for maintaining session validity and avoiding frequent reauthentication.\n\nThe operation validates present refresh tokens against session data linked to the travel_record_guest table's guest records. Security checks ensure refresh tokens are not expired or revoked. The operation does not require guest credentials but does need a valid refresh token.\n\nThis operation is publicly accessible but requires the client to provide a valid refresh token for operation.\n\nRelated operations include the initial guest join (registration) operation that creates the initial guest user profile and issues initial tokens.\n\nFailure scenarios include token expiration, invalid refresh tokens, and database session issues which result in relevant error responses.\n\nThis operation supports continued guest user access within defined security constraints.\n\nNo login operation is defined as guests do not authenticate with credentials.\n","authorizationType":"refresh","description":"Refresh temporary JWT tokens for guest users using valid refresh tokens linked to travel_record_guest profile for continued limited access.","summary":"Guest user JWT token refresh operation using refresh token.","parameters":[],"requestBody":{"description":"Guest refresh request data including refresh token","typeName":"ITravelRecordGuest.IRefresh"},"responseBody":{"description":"Guest authorization token response with new JWT tokens","typeName":"ITravelRecordGuest.IAuthorized"},"authorizationRole":"guest","name":"refresh","path":"/auth/guest/refresh","method":"post"},{"specification":"This API operation allows a new member user to register (join) the TravelRecord system. It creates a new member account with required details such as email, display name, password and Google OAuth ID. The member's credentials will be securely stored in the travel_record_member table with fields email, display_name, google_oauth_id, and password_hash representing authentication and identification data. The operation issues authorization tokens upon successful registration to allow immediate authenticated access. Passwords are hashed and never stored in plaintext. This join endpoint is public and does not require prior authentication.","authorizationType":"join","description":"Register a new authenticated member user in the TravelRecord system. This involves creating a record in the travel_record_member table where the following fields are essential: email (unique, used as login ID), display_name (user-friendly social name), google_oauth_id (unique Google OAuth identifier), and password_hash (hashed password). Upon successful registration, JWT tokens are issued to authorize the user session. This operation is publicly accessible and does not require authentication.\n\nMember users must provide valid data for these fields. Email and Google OAuth ID are unique across members. Password is stored securely as a hash. Created and updated timestamps are set automatically.\n\nThis operation is essential to member authentication flow, enabling new users to join the system.\n\nRelated operations: login to authenticate existing accounts, refresh to renew tokens.","summary":"Register a new TravelRecord member user.","parameters":[],"requestBody":{"description":"Member registration information including email, display name, Google OAuth ID, and password hash.","typeName":"ITravelRecordMember.ICreate"},"responseBody":{"description":"Authorized session information for the newly registered member user.","typeName":"ITravelRecordMember.IAuthorized"},"authorizationRole":"member","name":"join","path":"/auth/member/join","method":"post"},{"specification":"This API operation authenticates an existing member user in the TravelRecord system by verifying credentials (email or Google OAuth ID and password). It checks the travel_record_member table for matching user records with hashed password validation. Upon successful authentication, the operation issues JWT tokens granting access to protected resources. This endpoint is publicly accessible to enable user login.\n\nThe member user must provide valid credentials. Security measures ensure password hashes are never exposed. Failed login attempts are rejected with appropriate error responses.\n\nThis operation is critical for member user sessions.\n\nRelated operations: join for new registrations, refresh for token renewal.","authorizationType":"login","description":"Authenticate an existing TravelRecord member user by verifying login credentials. Validates email or Google OAuth ID paired with hashed password from travel_record_member table. Issues JWT access and refresh tokens upon successful validation. Passwords are never sent or stored in plaintext directly. This login endpoint is public, allowing users to authenticate.\n\nSecurity considerations include prevention of brute force attacks and safe handling of password hashes.\n\nRelated operations: join for registration, refresh for token renewal.","summary":"Authenticate an existing TravelRecord member user and obtain JWT tokens.","parameters":[],"requestBody":{"description":"Member login credentials including email or Google OAuth ID and password.","typeName":"ITravelRecordMember.ILogin"},"responseBody":{"description":"Authorized session information including JWT tokens for member user.","typeName":"ITravelRecordMember.IAuthorized"},"authorizationRole":"member","name":"login","path":"/auth/member/login","method":"post"},{"specification":"This API operation refreshes the JWT access and refresh tokens for an authenticated member user in TravelRecord system. It validates the existing refresh token, ensuring it is valid and not expired, before issuing new tokens. No user credentials are required for this operation beyond presenting the valid refresh token.\n\nThis helps maintain secure long-lived sessions without requiring frequent re-authentication.\n\nRelated operations: join for user registration, login for authentication.","authorizationType":"refresh","description":"Refresh JWT access and refresh tokens for a logged-in TravelRecord member user. Requires a valid refresh token to issue new tokens, extending authenticated session without needing full login.\n\nEnsures refresh tokens are securely handled and validated. Tokens issued contain claims that represent user identity and role.\n\nRelated operations: join, login for initial token issuance.","summary":"Refresh JWT tokens for TravelRecord member user.","parameters":[],"requestBody":{"description":"Refresh token information to obtain new JWT tokens.","typeName":"ITravelRecordMember.IRefresh"},"responseBody":{"description":"Newly issued authorized session tokens for the member user.","typeName":"ITravelRecordMember.IAuthorized"},"authorizationRole":"member","name":"refresh","path":"/auth/member/refresh","method":"post"},{"specification":"This operation allows member users to reset their password. The reset operation is supported given the presence of the password_hash field in travel_record_member indicating password-based authentication. It accepts a token for verification (e.g., sent via email) and the new password hash to securely update the password.\n\nThe operation is critical for account recovery and security management for member users.\n\nRelated operations: changePassword to update password when logged in.","authorizationType":null,"description":"Reset the password of a TravelRecord member user upon verification token. Requires a verified reset token and new password hash. This operation updates the password_hash field in travel_record_member.\n\nEnsures secure password update flow preventing unauthorized resets. Typically part of the account recovery process.\n\nRelated operations: changePassword to update password while authenticated.","summary":"Reset password for TravelRecord member user.","parameters":[],"requestBody":{"description":"Password reset details including verification token and new password hash.","typeName":"ITravelRecordMember.IResetPassword"},"responseBody":{"description":"Confirmation of password reset success.","typeName":"ITravelRecordMember.IResult"},"authorizationRole":"member","name":"resetPassword","path":"/auth/member/password/reset","method":"post"},{"specification":"This operation updates the password of an authenticated TravelRecord member user. It requires the current password and the new password hash as inputs. The operation securely updates the password_hash in travel_record_member.\n\nIt enhances account security by allowing users to change passwords proactively.\n\nRelated operations: resetPassword for password recovery, login for authentication.","authorizationType":null,"description":"Change the password of an authenticated TravelRecord member user by providing the current password and new password hash. Updates password_hash field securely.\n\nEnsures that the current password matches before allowing update, preventing unauthorized changes.\n\nRelated operations: resetPassword for reset flow, login for authentication.","summary":"Change password for authenticated TravelRecord member user.","parameters":[],"requestBody":{"description":"Current and new password hash for password change operation.","typeName":"ITravelRecordMember.IChangePassword"},"responseBody":{"description":"Confirmation of password change success.","typeName":"ITravelRecordMember.IResult"},"authorizationRole":"member","name":"changePassword","path":"/auth/member/password/change","method":"post"},{"specification":"This operation sends an email verification message to the member's registered email address. The schema includes the email field representing the target email. This allows verifying that the email belongs to the member user.\n\nThis operation ensures email ownership validation as part of account security.\n\nRelated operations: verifyEmailConfirm to confirm verification using token.","authorizationType":null,"description":"Send an email verification message to the TravelRecord member user's email address. This operation uses the email field to target the member.\n\nSupports email ownership verification as part of account security.\n\nRelated operations: verifyEmailConfirm to confirm the verification token.","summary":"Send email verification message to member's registered email.","parameters":[],"requestBody":{"description":"Email information for sending verification email.","typeName":"ITravelRecordMember.ISendVerification"},"responseBody":{"description":"Confirmation of email verification message sent.","typeName":"ITravelRecordMember.IResult"},"authorizationRole":"member","name":"sendEmailVerification","path":"/auth/member/email/verify/send","method":"post"},{"specification":"This operation confirms the email verification using a token provided by the member. The token is validated against stored information and upon success confirms the email ownership.\n\nThis is essential to complete the email verification flow ensuring account security.\n\nRelated operations: sendEmailVerification for initiating verification.","authorizationType":null,"description":"Confirm email verification for TravelRecord member user by providing the verification token. Updates member's email verification status.\n\nEnsures valid token usage and prevents spoofing.\n\nRelated operations: sendEmailVerification for token dispatch.","summary":"Confirm email verification for member user.","parameters":[],"requestBody":{"description":"Email verification confirmation token.","typeName":"ITravelRecordMember.IVerifyConfirm"},"responseBody":{"description":"Confirmation of successful email verification.","typeName":"ITravelRecordMember.IResult"},"authorizationRole":"member","name":"verifyEmailConfirm","path":"/auth/member/email/verify/confirm","method":"post"},{"specification":"This operation enables two-factor authentication (2FA) for the TravelRecord member user. It requires validation of the 2FA token and sets the user's account to require 2FA for future logins.\n\nThis uses data stored in travel_record_member to manage 2FA status.\n\nRelated operations: disableTwoFactor to revoke 2FA, login for authentication with 2FA.","authorizationType":null,"description":"Enable two-factor authentication (2FA) for TravelRecord member user. Validates 2FA token and updates user's account status.\n\nEnhances account security by requiring 2FA for authentication.\n\nRelated operations: disableTwoFactor for revoking 2FA.","summary":"Enable two-factor authentication for member user.","parameters":[],"requestBody":{"description":"Information required to enable 2FA including verification token.","typeName":"ITravelRecordMember.IEnableTwoFactor"},"responseBody":{"description":"Confirmation of 2FA enablement success.","typeName":"ITravelRecordMember.IResult"},"authorizationRole":"member","name":"enableTwoFactor","path":"/auth/member/twoFactor/enable","method":"post"},{"specification":"This operation disables two-factor authentication (2FA) for the TravelRecord member user. It requires providing the 2FA authentication token to authenticate the requester.\n\nThis ensures users can revoke 2FA based on valid authentication.\n\nRelated operations: enableTwoFactor to activate 2FA, login for authentication requiring 2FA.","authorizationType":null,"description":"Disable two-factor authentication (2FA) for TravelRecord member user. Requires valid 2FA token to revoke 2FA status.\n\nEnsures account can be secured while allowing revocation.\n\nRelated operations: enableTwoFactor to activate 2FA.","summary":"Disable two-factor authentication for member user.","parameters":[],"requestBody":{"description":"Information required to disable 2FA including valid token.","typeName":"ITravelRecordMember.IDisableTwoFactor"},"responseBody":{"description":"Confirmation of successful 2FA disablement.","typeName":"ITravelRecordMember.IResult"},"authorizationRole":"member","name":"disableTwoFactor","path":"/auth/member/twoFactor/disable","method":"post"},{"specification":"This API operation creates a new administrator user account and issues initial JWT tokens upon successful registration. It is associated with the 'travel_record_admin' Prisma table, which stores administrators with fields such as 'id', 'email', 'display_name', 'password_hash', and timestamps including 'created_at', 'updated_at', and optionally 'deleted_at' for soft deletion.\n\nThe 'join' operation allows system administrators to be registered in the system via a public endpoint. The operation does not require authentication as it is the initial registration step. It expects a request body containing the necessary registration details corresponding to the 'travel_record_admin' entity, excluding system managed fields. The response returns an authorization token structure under the response type 'ITravelRecordAdmin.IAuthorized'.\n\nSecurity considerations include secure handling of passwords (hashed) and ensuring unique emails as enforced by the schema. This operation integrates with authentication flows for admins and complements login and refresh operations.\n\nRelated operations include login and token refresh for administrators allowing secure access and session management.","authorizationType":"join","description":"Registers a new administrator account in the travel record system, storing credentials securely and issuing JWT tokens for access.\n\nRequires unique email and hashed password fields as per the Prisma schema for travel_record_admin.\n\nEnables admins to gain authenticated access with system privileges.\n\nSecurity includes password hashing and soft deletion support using the 'deleted_at' field.\n\nComplementary APIs: login for administrators and token refresh for session management.","summary":"Create new travel_record_admin user account and issue JWT tokens upon registration.","parameters":[],"requestBody":{"description":"Administrator account creation details","typeName":"ITravelRecordAdmin.ICreate"},"responseBody":{"description":"Authorized administrator account with JWT tokens","typeName":"ITravelRecordAdmin.IAuthorized"},"authorizationRole":"admin","name":"joinAdmin","path":"/auth/admin/join","method":"post"},{"specification":"This API operation authenticates an administrator user by validating their credentials and issuing access tokens upon successful login. It is linked to the 'travel_record_admin' Prisma table which holds the admin users' email, hashed passwords, and related timestamps.\n\nThe 'login' operation is a public endpoint that accepts login credentials, verifies them against secured stored data, and returns JWT tokens structured under 'ITravelRecordAdmin.IAuthorized'.\n\nThe operation secures system administrator access and integrates with JWT token refresh workflows for maintaining sessions.\n\nIt complements join and refresh operations for admin role authentication lifecycle management.","authorizationType":"login","description":"Authenticate administrator user credentials and issue JWT access and refresh tokens.\n\nValidates email and password against stored hashed password.\n\nSupports system administrator privileged access.\n\nRelated operations: join for registration, refresh for token renewal.","summary":"Authenticate travel_record_admin user and provide JWT tokens.","parameters":[],"requestBody":{"description":"Administrator login credentials","typeName":"ITravelRecordAdmin.ILogin"},"responseBody":{"description":"Authorized administrator access tokens","typeName":"ITravelRecordAdmin.IAuthorized"},"authorizationRole":"admin","name":"loginAdmin","path":"/auth/admin/login","method":"post"},{"specification":"This API operation refreshes JWT tokens for an authenticated administrator user to maintain active sessions securely. It corresponds to the 'travel_record_admin' Prisma entity.\n\nAccessible only with a valid refresh token, this operation issues new access tokens refreshing the user's session.\n\nIt is part of the authentication flow ensuring long-lived secure access for administrators.\n\nIt is related to the join (registration) and login operations that establish initial tokens and authenticate credentials.","authorizationType":"refresh","description":"Refresh JWT access tokens for an authenticated administrator user using a valid refresh token.\n\nEnsures continued secure access without re-authentication.\n\nUsed to prolong session longevity.\n\nMust be called with valid refresh tokens only.\n\nRelated to join and login flows.","summary":"Refresh JWT tokens for travel_record_admin user.","parameters":[],"requestBody":{"description":"Refresh token data for administrator","typeName":"ITravelRecordAdmin.IRefresh"},"responseBody":{"description":"Newly issued authorized tokens","typeName":"ITravelRecordAdmin.IAuthorized"},"authorizationRole":"admin","name":"refreshAdmin","path":"/auth/admin/refresh","method":"post"},{"specification":"This API operation retrieves a filtered and paginated list of travel record guests from the database, based on the travel_record_guest table from the Prisma schema. It supports advanced filter criteria, search, sorting, and pagination to facilitate efficient browsing of guest users. The operation respects that guests are unauthenticated or minimal-access users who can only browse public content but cannot create travel records or interact socially.","description":"Retrieve a filtered and paginated list of travel record guests.\n\nThis operation allows querying the travel_record_guest table, which stores guest users of the TravelRecord system. Guests represent unauthenticated users who can only browse public content without creating or modifying travel data.\n\nThe operation supports advanced filtering, sorting, and pagination to efficiently browse guest records.\n\nSecurity considerations include limiting exposure of guest details and ensuring only appropriate users access this data, typically administrative users.\n\nRelated operations include fetching a single guest by ID (`GET /travelRecordGuests/{id}`) and modifying or deleting a guest record by ID. These operations aid in administrative management and auditing of guests.","summary":"Retrieve paginated list of travel record guests","parameters":[],"requestBody":{"description":"Filter and pagination parameters for travel record guests list retrieval","typeName":"ITravelRecordTravelRecordGuest.IRequest"},"responseBody":{"description":"Paginated list of travel record guest records matching filter criteria","typeName":"IPageITravelRecordTravelRecordGuest"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/travelRecord/admin/travelRecordGuests","method":"patch"},{"specification":"This API operation fetches a single travel record guest identified by their unique ID from the travel_record_guest table. It returns detailed information about the guest record, such as creation and update timestamps. Intended for administrative use to audit guest user data.","description":"Retrieve detailed travel record guest information identified by ID.\n\nThis operation fetches the full record of a guest user from the travel_record_guest table.\n\nAs guests are unauthenticated users, this operation is primarily used for administrative and audit purposes.\n\nOnly users with admin role are authorized to perform this operation to protect guest privacy.\n\nThe operation returns detailed guest record fields including primary key ID and timestamps.\n\nNo request body is required as the guest is identified via path parameter.","summary":"Retrieve specific travel record guest information by ID","parameters":[{"name":"id","description":"Unique identifier of the target guest user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Travel record guest entity information","typeName":"ITravelRecordTravelRecordGuest"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/travelRecord/admin/travelRecordGuests/{id}","method":"get"},{"specification":"This API operation updates an existing travel record guest identified by their unique ID in the travel_record_guest table. It accepts update information for the guest record and modifies the stored data accordingly. This operation supports administrative tasks such as correcting guest information or metadata.","description":"Update travel record guest information by ID.\n\nThis operation allows modification of an existing travel record guest.\n\nGuests are unauthenticated users with limited data fields, so updates are restricted to modifiable properties such as timestamps.\n\nOnly admin users have permissions to perform this update for maintenance and correction purposes.\n\nRequest body includes the fields allowed for update; response returns the updated guest record.","summary":"Update specific travel record guest information by ID","parameters":[{"name":"id","description":"Unique identifier of the target guest user","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for the travel record guest","typeName":"ITravelRecordTravelRecordGuest.IUpdate"},"responseBody":{"description":"Updated travel record guest entity","typeName":"ITravelRecordTravelRecordGuest"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/travelRecord/admin/travelRecordGuests/{id}","method":"put"},{"specification":"This API operation permanently deletes a travel record guest identified by their unique ID from the travel_record_guest table. As guests represent unauthenticated users with minimal stored data, this operation removes guest records from the database for administrative cleanup purposes.","description":"Delete travel record guest by ID.\n\nThis operation permanently removes a guest record from travel_record_guest table.\n\nIt is intended for administrative purging of guest data to manage system records.\n\nOnly admin users can execute this operation.\n\nNo request body is required as identification is via path parameter.\n\nAfter deletion, the guest data is no longer available or recoverable.","summary":"Delete travel record guest by ID","parameters":[{"name":"id","description":"Unique identifier of the target guest user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/travelRecord/admin/travelRecordGuests/{id}","method":"delete"},{"specification":"This operation retrieves a filtered and paginated list of travel record members. It operates on the travel_record_member table from the Prisma schema, which stores authenticated members with Google OAuth authentication details and user profile information. This endpoint supports advanced search criteria including filtering by email, display name, and other member properties. The response returns a paginated summary of member records with essential information suitable for list views.","description":"Retrieve a filtered and paginated list of travel record members.\n\nThis operation enables clients to query travel_record_member entities with multiple search parameters. The travel_record_member table includes member's email, display name, Google OAuth ID, password hash, creation and update timestamps, and optional deletion timestamp for soft deletes.\n\nOnly authenticated users with admin role are authorized to perform this operation to ensure privacy of user data. Filters can include email and display name with partial matching, creation date ranges, and soft deletion status.\n\nThe response provides a paginated set of member summaries suitable for user administration interfaces. Invalid parameters will be rejected with clear validation errors.","summary":"Search and retrieve a filtered, paginated list of travel record members","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for filtering travel record members","typeName":"ITravelRecordMember.IRequest"},"responseBody":{"description":"Paginated list of travel record member summaries matching search criteria","typeName":"IPageITravelRecordMember.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/travelRecord/admin/travelRecordMembers","method":"patch"},{"specification":"This operation retrieves detailed information of a single travel record member from the travel_record_member table by its unique id. The travel_record_member entity stores authenticated member's email, display name, Google OAuth ID, password hash, timestamps, and soft delete status.\n\nOnly authorized users with admin role can access detailed member information, ensuring privacy and security.\n\nThis operation returns comprehensive member data including all fields except password hash and soft deletion timestamp, which are omitted for security reasons.","description":"Retrieve detailed information for a specific travel record member identified by their unique id.\n\nOnly admin users are authorized to access this endpoint due to sensitive personal and authentication information.\n\nThis operation fetches all member details except for sensitive fields like password hash and soft deletion timestamp to maintain security.\n\nProper error messages will be returned if the member id is invalid or not found.","summary":"Retrieve detailed travel record member information by ID","parameters":[{"name":"id","description":"Unique identifier of the travel record member","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed travel record member data","typeName":"ITravelRecordMember"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/travelRecord/admin/travelRecordMembers/{id}","method":"get"},{"specification":"This operation updates an existing travel record member's information identified by id in the travel_record_member table. Members have email, display name, Google OAuth ID, password hash, creation and modification timestamps, and optional soft deletion timestamp.\n\nOnly admin users are authorized to update member information to maintain integrity and prevent unauthorized changes.\n\nThe update request body allows modification of mutable fields such as email and display name. Password hash remains managed separately for security.\n\nUpon success, the updated member entity is returned with the latest state.","description":"Update travel record member information by ID.\n\nThis endpoint is restricted to admin users to ensure controlled modification.\n\nIt allows updating key properties except for password hash and deletion timestamp.\n\nValidation ensures data integrity and uniqueness of emails and OAuth IDs.\n\nReturns the updated member on success.","summary":"Update travel record member by ID","parameters":[{"name":"id","description":"Unique identifier of the travel record member","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated travel record member data","typeName":"ITravelRecordMember.IUpdate"},"responseBody":{"description":"Updated travel record member entity","typeName":"ITravelRecordMember"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/travelRecord/admin/travelRecordMembers/{id}","method":"put"},{"specification":"This operation permanently deletes a travel record member identified by id from the travel_record_member table. Deletion removes the user record and cascades to related entities such as places, photos, reviews, friends, and privacy settings. Only admin users are authorized to perform deletions to ensure proper control.\n\nThe operation performs a hard delete with no possibility to recover the record after deletion.\n\nNo request body or response body is used for this operation. Successful deletion results in HTTP 204 No Content response.","description":"Delete (hard) travel record member by ID.\n\nOnly admin users may perform this operation.\n\nDeletion cascades to eliminate related travel records, photos, reviews, friends, and privacy settings of the member.\n\nThis operation permanently removes the record with no recovery.\n\nProper error responses are sent if ID is invalid or deletion fails.","summary":"Delete travel record member by ID","parameters":[{"name":"id","description":"Unique identifier of the travel record member","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/travelRecord/admin/travelRecordMembers/{id}","method":"delete"},{"specification":"This operation retrieves a paginated list of administrator accounts from the TravelRecord system. It interacts with the travel_record_admin table in the Prisma schema, which stores administrator user details including unique ID, email, display name, hashed password, creation and update timestamps, and optional soft deletion timestamp. The endpoint supports filtering and pagination to allow clients to query subsets of admins efficiently.","description":"Retrieve a paginated and optionally filtered list of TravelRecord administrators. This operation provides comprehensive search capabilities to list admins based on criteria such as email, display name, and creation date.\n\nSecurity aspects include ensuring only authorized users, such as other admins, can access this information due to its sensitive nature.\n\nIt corresponds directly to the travel_record_admin table in the Prisma schema, exposing pertinent fields while omitting sensitive password hashes in responses.\n\nValidation rules ensure incoming search filters conform to expected formats and constraints. Related operations include retrieving individual admin details, updating admin information, and admin account deletion.\n\nThe response includes paginated admin summaries suitable for administrative user management interfaces.","summary":"Search and retrieve a filtered, paginated list of TravelRecord administrators","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for TravelRecord administrators","typeName":"ITravelRecordTravelRecordAdmin.IRequest"},"responseBody":{"description":"Paginated list of TravelRecord administrator summaries matching search criteria","typeName":"IPageITravelRecordTravelRecordAdmin.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"search","path":"/travelRecord/admin/travelRecordAdmins","method":"patch"},{"specification":"This operation retrieves detailed information about a specific TravelRecord administrator identified by their unique ID. It queries the travel_record_admin table as defined in the Prisma schema, which holds administrator details including email, display name, hashed password, creation and update timestamps, and an optional soft deletion timestamp.\n\nThe API ensures that only authorized users with administrative privileges can access this sensitive information.\n\nValidation guarantees the provided ID is a valid UUID.\n\nThis operation complements listing, updating, and deleting admins, supporting full administrative user management.","description":"Retrieve detailed information of a TravelRecord administrator by their unique identifier.\n\nThis operation accesses the travel_record_admin table in the Prisma schema, which stores admin emails, display names, hashed passwords, and audit timestamps.\n\nSecurity is paramount; only administrators with appropriate roles may query this endpoint.\n\nThe operation validates the UUID format of the ID parameter and returns the full administrator record excluding password hashes for security reasons.\n\nThis endpoint is commonly used alongside search, update, and deletion operations for comprehensive admin management.","summary":"Get detailed information of a TravelRecord administrator by ID","parameters":[{"name":"id","description":"Unique identifier of the target TravelRecord administrator","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the specified TravelRecord administrator","typeName":"ITravelRecordTravelRecordAdmin"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/travelRecord/admin/travelRecordAdmins/{id}","method":"get"},{"specification":"This operation updates information of an existing TravelRecord administrator specified by their unique ID. The administrator details are stored in the travel_record_admin table, which contains fields such as email, display name, hashed password, creation and update timestamps, and optional soft deletion timestamp.\n\nSecurity protocols ensure that only authorized administrative users can perform update actions.\n\nValidation includes verifying the ID parameter format as a UUID and verifying that update payload fields meet constraints such as email format and display name length.\n\nThis update operation is part of the full lifecycle management of administrator accounts together with listing, retrieval, and deletion operations.","description":"Update an existing TravelRecord administrator's information by their unique ID.\n\nThis endpoint operates on the travel_record_admin table in the Prisma schema, allowing modification of fields like email, display name, and password hash.\n\nSecurity measures require the caller to have admin roles and prevent unauthorized changes.\n\nThe operation validates UUID format of the path parameter and ensures the request body conforms to update rules.\n\nIt complements other admin management operations and returns the updated admin record for confirmation.","summary":"Update TravelRecord administrator information by ID","parameters":[{"name":"id","description":"Unique identifier of the TravelRecord administrator to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information for the TravelRecord administrator","typeName":"ITravelRecordTravelRecordAdmin.IUpdate"},"responseBody":{"description":"Updated TravelRecord administrator information","typeName":"ITravelRecordTravelRecordAdmin"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/travelRecord/admin/travelRecordAdmins/{id}","method":"put"},{"specification":"This operation permanently deletes a TravelRecord administrator account identified by its unique ID. The account is stored in the travel_record_admin table.\n\nOnly users with administrative privileges may perform this deletion. The operation validates the UUID format for the provided ID.\n\nThe deletion process represents a hard delete since soft deletion is signaled by optional deleted_at in the schema, but for this action, the account will be removed from the database.\n\nThis operation completes the full CRUD lifecycle for admin accounts.","description":"Permanently erase a TravelRecord administrator account by its unique ID.\n\nThis operation deletes the record from the travel_record_admin table irreversibly.\n\nSecurity is strict, limiting this endpoint to users with admin roles.\n\nThe UUID of the admin to delete must be valid, and the operation will not produce a response body.\n\nCare must be taken to prevent accidental deletion of critical administrator accounts.","summary":"Delete a TravelRecord administrator account by ID","parameters":[{"name":"id","description":"Unique identifier of the TravelRecord administrator to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/travelRecord/admin/travelRecordAdmins/{id}","method":"delete"},{"specification":"This operation retrieves a filtered and paginated list of travel record places belonging to members. It enables complex search criteria based on location coordinates, visit date, place name, and other relevant fields. The operation interacts with the travel_record_places table in the Prisma schema, which stores member-specific place records with precise latitude and longitude, visit dates, Google place IDs, and descriptive place names. Pagination and sorting support allow efficient browsing of large travel record datasets. The operation returns summarized representations of matching places for list views.","path":"/travelRecord/member/places","method":"patch","summary":"Search and retrieve a filtered, paginated list of travel record places","description":"Retrieve a filtered and paginated list of travel record places from the system's database. This operation supports advanced query parameters such as location bounding boxes, date ranges, and text matching via search filters operating on travel_record_places records.\n\nSecurity considerations enforce that only authenticated members with \"member\" role can retrieve lists of places. Public access is not granted to this operation due to privacy and data sensitivity.\n\nThe operation maps directly to the travel_record_places table as defined in the Prisma schema, which includes fields like latitude, longitude, visit_date, place_name, and google_place_id. All response data reflects only existing places with respect to soft deletion (deleted_at not null means excluded).\n\nValidation ensures input parameters meet expected formats and types. Pagination and sorting parameters control response size and order. Errors in input formats or unauthorized access result in appropriate error responses.\n\nRelated operations that might be used with this include viewing details of a single place (GET /places/{id}), creating new place records (POST /places), and updating existing ones (PUT /places/{id}).\n\nThis operation does not support deleting place records as per system design constraints.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for filtering travel record places","typeName":"ITravelRecordPlaces.IRequest"},"responseBody":{"description":"Paginated list of travel record place summaries matching search criteria","typeName":"IPageITravelRecordPlaces.ISummary"},"authorizationType":null,"authorizationRole":"member","name":"index"},{"specification":"This operation retrieves detailed information for a single travel record place identified by its unique identifier. It exposes comprehensive data including precise coordinates, visit dates, associated Google place ID, and descriptive name. The underlying database table is travel_record_places, which stores travel place records linked to authenticated members.\n\nSecurity enforces that only authorized authenticated users with the \"member\" role may access details of travel record places. The operation performs validation of the place ID path parameter to ensure it is a valid UUID.\n\nThe response includes all non-deleted fields representing the travel place record, reflecting the current state of the database.\n\nThis operation is typically used to view or display detailed place information in client applications. Related API calls include list retrieval and record updates.\n\nDeletion of places is not supported by this endpoint.\n","path":"/travelRecord/member/places/{id}","method":"get","summary":"Get detailed information for a travel record place by ID","description":"Retrieve detailed information of a specific travel record place by its unique ID. This operation queries the travel_record_places table and returns complete place data including latitude, longitude, visit date, place name, and Google place ID.\n\nAccess is limited to authenticated users only, ensuring data privacy. Input validation ensures the ID parameter conforms to UUID format and corresponds to an existing record.\n\nErrors such as record not found or unauthorized access return appropriate HTTP status codes.\n\nNo creation or modification is performed by this operation.\n","parameters":[{"name":"id","description":"Unique identifier of the travel record place","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed travel record place information","typeName":"ITravelRecordPlaces"},"authorizationType":null,"authorizationRole":"member","name":"at"},{"specification":"This operation creates a new travel record place for an authenticated member. It stores required information including member ID association, precise latitude and longitude coordinates, visit date in ISO 8601 format, place name description, and a Google Maps unique place ID. The underlying Prisma schema table is travel_record_places.\n\nThe API expects validated creation data that includes all required fields. Validation rules disallow missing or invalid coordinates, missing visit dates, or empty place names. The system ensures unique place records per member per date and location.\n\nAccess is restricted to users with the \"member\" role to protect member data integrity. The operation responds with the created place record including all stored fields.\n\nNo deletion operations are available within this endpoint.\n","path":"/travelRecord/member/places","method":"post","summary":"Create a new travel record place","description":"Create a new travel record place associated with the authenticated member. This operation validates input data for required geographic coordinates, visit date, place name, and Google place ID.\n\nOnly authenticated users may create new places. Duplicate place records with same member ID, coordinates, and visit date are prevented by unique constraints.\n\nOn success, the new place record is returned with full details. Errors include validation failures or unauthorized access.\n\nThis operation supports user workflows to log travel history into the system.\n","parameters":[],"requestBody":{"description":"Travel record place creation data","typeName":"ITravelRecordPlaces.ICreate"},"responseBody":{"description":"Newly created travel record place information","typeName":"ITravelRecordPlaces"},"authorizationType":null,"authorizationRole":"member","name":"create"},{"specification":"This operation updates an existing travel record place identified by its unique ID. It accepts update data such as latitude, longitude, visit date, place name, and Google place ID. The Prisma schema table affected is travel_record_places.\n\nThe operation validates that the provided ID corresponds to an existing place record. Only authenticated members with \"member\" role may perform updates. Business rules prevent creating duplicate records on update.\n\nInput validation enforces coordinate and date correctness. Updates to place information are reflected in the returned updated record.\n\nThis operation enables members to correct or amend their travel logs. Deletion must be handled by other endpoints as this endpoint does not delete records.\n","path":"/travelRecord/member/places/{id}","method":"put","summary":"Update an existing travel record place by ID","description":"Update an existing travel record place by its ID. This operation allows modifying fields such as latitude, longitude, visit date, place name, and Google place ID.\n\nAuthorized users can update their place records to correct errors or add details. Input data is validated for correctness and completeness.\n\nThe response returns the modified place record with current values. Access control restricts update operations to the owner member.\n\nErrors include record not found, validation failure, and unauthorized access.\n","parameters":[{"name":"id","description":"Unique identifier of the travel record place","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Travel record place update data","typeName":"ITravelRecordPlaces.IUpdate"},"responseBody":{"description":"Updated travel record place information","typeName":"ITravelRecordPlaces"},"authorizationType":null,"authorizationRole":"member","name":"update"},{"specification":"This operation permanently deletes a travel_record_places entity by its unique UUID identifier. It corresponds to the travel_record_places table in the Prisma schema which stores place records of visited locations by members, including latitude, longitude, visit date, place name, and Google place ID.\n\nThe endpoint accepts the place's ID as a path parameter and performs a hard delete operation, fully removing the record from the database along with all related photos and reviews due to cascading foreign key constraints.\n\nOnly authenticated members with proper authorization ('member' role) may perform this operation. There is no request body or response body.","description":"Delete a specific travel record place identified by its UUID.\n\nThis operation fully removes the place record and its associated photos and reviews from the system permanently.\n\nOnly authenticated members can execute this deletion. If the place ID does not exist or the user lacks proper authorization, an error is returned.\n\nThis is a hard delete operation with no soft delete functionality.\n\nNo request body or response content is included.","summary":"Delete a travel record place by ID","parameters":[{"name":"id","description":"UUID of the travel record place to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member"],"name":"erase","path":"/travelRecord/member/places/{id}","method":"delete","authorizationRole":"member","authorizationType":null},{"specification":"Retrieve a paginated list of travel_record_photos linked to a specified travel_record_place by UUID, enabling users to browse photos associated with a particular travel record place. The response contains summarized photo information including file URI, size, upload date, and audit timestamps.\n\nThe request body supports filters and pagination parameters. Access control ensures only authorized members can view photos linked to places they have permission to access.","description":"Retrieve a filtered, paginated list of photos belonging to a specific travel record place.\n\nPhotos are listed with essential metadata such as file URI, file size, upload timestamp, and audit timestamps.\n\nOnly authenticated users with 'member' role authorized to view the place can access this list.\n\nRequest body includes filtering, pagination, and search criteria.\n\nResponse body returns a page of photo summaries matching search criteria.","summary":"List travel record place photos with pagination and filters","parameters":[{"name":"travelRecordPlaceId","description":"UUID of the travel record place to list photos for","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering and pagination for travel record place photos","typeName":"ITravelRecordPlacePhoto.IRequest"},"responseBody":{"description":"Paginated list of photo summaries","typeName":"IPageITravelRecordPlacePhoto.ISummary"},"authorizationRoles":["member"],"name":"index","path":"/travelRecord/member/places/{travelRecordPlaceId}/photos","method":"patch","authorizationRole":"member","authorizationType":null},{"specification":"Retrieve detailed information for a specific photo of a travel record place by its UUID and associated place ID. Returns all metadata including file URI, size, upload timestamp, and audit timestamps.\n\nAuthorization is required to ensure only members can access photos of places they are authorized to view.\n\nNo request body required; 404 returned if photo or place ID invalid or not found.","description":"Get detailed photo information for a specific photo identified by UUID within a given travel record place.\n\nIncludes file URI, file size, upload time, and audit timestamps.\n\nAuthorized to members who have access rights to the place.\n\nNo request body; returns photo details as response.","summary":"Retrieve photo details by photo and place IDs","parameters":[{"name":"travelRecordPlaceId","description":"UUID of the travel record place that owns the photo","schema":{"type":"string","format":"uuid"}},{"name":"id","description":"UUID of the photo record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Travel record place photo entity with detailed metadata","typeName":"ITravelRecordPlacePhoto"},"authorizationRoles":["member"],"name":"at","path":"/travelRecord/member/places/{travelRecordPlaceId}/photos/{id}","method":"get","authorizationRole":"member","authorizationType":null},{"specification":"Upload photo(s) for a specific travel record place identified by UUID. The operation saves photo metadata including file URI, size, and upload timestamp in the travel_record_photos table linked to the place record. Validation includes accepted file formats (JPEG, PNG) and size restrictions.\n\nOnly authenticated members authorized to the place can upload photos.\n\nReturns details of uploaded photo records after successful upload.","description":"Upload one or multiple photos for a given travel record place.\n\nPhotos must comply with accepted formats (JPEG, PNG) and size constraints.\n\nThe uploaded photo metadata including file URI, file size, and timestamps are saved.\n\nThe operation returns the details of the newly created photo records.\n\nAuthorization required for members authorized to modify the place record.","summary":"Upload photos to a travel record place","parameters":[{"name":"travelRecordPlaceId","description":"UUID of the travel record place to upload photos to","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Photo upload payload with metadata","typeName":"ITravelRecordPlacePhoto.ICreate"},"responseBody":{"description":"Created travel record photo entity details","typeName":"ITravelRecordPlacePhoto"},"authorizationRoles":["member"],"name":"create","path":"/travelRecord/member/places/{travelRecordPlaceId}/photos","method":"post","authorizationRole":"member","authorizationType":null},{"specification":"This operation updates metadata of a specific photo associated with a travel record place, identified by travelRecordPlaceId and photo id. It operates on the travel_record_photos table, allowing modification of photo file URI, size, and timestamps. Updates comply with soft deletion policies, ensuring only active photos are modified. The operation requires authorization for authenticated members who own the photo entry. It supports validation of input fields to prevent invalid file data.","description":"This operation allows an authenticated travel record member to update the properties of a specific photo linked to a particular travel record place.\n\nIt requires the unique identifier of the travel record place and the photo's unique identifier. The update is restricted to editable properties defined in the travel_record_photos table, such as the file URI and file size.\n\nAccess is secured and only allowed for the owner of the record to prevent unauthorized modifications.\n\nThe operation updates the photo metadata while preserving soft deletion states and timestamps.\n\nUpon success, updated photo information is returned.","summary":"Update photo metadata for specified travel record place photo","parameters":[{"name":"travelRecordPlaceId","description":"Unique identifier of the travel record place","schema":{"type":"string","format":"uuid"}},{"name":"id","description":"Unique identifier of the photo to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Photo update information including file URI and file size","typeName":"ITravelRecordPhotos.IUpdate"},"responseBody":{"description":"Updated photo information","typeName":"ITravelRecordPhotos"},"authorizationType":null,"authorizationRole":"member","name":"updatePhotoMetadata","path":"/travelRecord/member/places/{travelRecordPlaceId}/photos/{id}","method":"put"},{"specification":"This operation permanently deletes a specific photo attached to a travel record place, identified by travelRecordPlaceId and photo id. It removes the photo record from the database entirely. Only authenticated members owning the photo can perform this action. The operation ensures clean deletion without residual soft deleted records.","description":"This operation deletes a specified photo belonging to a given travel record place.\n\nThe photo to be deleted is identified by the place ID and photo ID parameters.\n\nOnly the authenticated owner of the photo can perform this deletion.\n\nThe deletion is permanent, removing the photo record entirely from the system.\n\nResponse confirms successful deletion with no content returned.\n\nAttempts to delete non-existing or unauthorized resources result in appropriate error responses.","summary":"Delete a photo from a travel record place","parameters":[{"name":"travelRecordPlaceId","description":"Unique identifier of the travel record place","schema":{"type":"string","format":"uuid"}},{"name":"id","description":"Unique identifier of the photo to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"erasePhoto","path":"/travelRecord/member/places/{travelRecordPlaceId}/photos/{id}","method":"delete"},{"specification":"This operation retrieves a paginated and filtered list of reviews for travel record places, based on complex search criteria. It operates on the travel_record_reviews table, supports filtering by place, member, privacy status, star rating, and textual review content. The operation requires member authentication and respects privacy controls. Results return a paginated summary of matching reviews.","description":"Retrieve a paginated list of travel record place reviews, supporting advanced filtering by place ID, member ID, privacy settings, star rating ranges, and review text matching.\n\nThe operation supports pagination parameters and sorting order.\n\nAccess is authorized to authenticated members and respects privacy settings on each review.\n\nThis operation helps clients search reviews comprehensively with precise control over filters.\n\nResults include summarized review information optimized for list display.","summary":"Search and retrieve filtered, paginated list of travel record reviews","parameters":[],"requestBody":{"description":"Filtering and pagination criteria for review search","typeName":"ITravelRecordReviews.IRequest"},"responseBody":{"description":"Paginated list of review summary information matching search criteria","typeName":"IPageITravelRecordReviews.ISummary"},"authorizationType":null,"authorizationRole":"member","name":"searchReviews","path":"/travelRecord/member/reviews","method":"patch"},{"specification":"This operation retrieves detailed information about a specific travel record review identified by its unique ID. It accesses the travel_record_reviews table for accurate review details including textual content, star rating, and privacy status. Authorization ensures only members with access rights can view the review respecting privacy constraints.","description":"Retrieve detailed information of a single travel record review by its unique identifier.\n\nThe review includes textual content, star rating, reviewer information, and privacy settings.\n\nAccess is granted to authenticated members respecting record privacy.\n\nThe operation returns full review details for display or further processing.","summary":"Get detailed information of a specific travel record review","parameters":[{"name":"id","description":"Unique identifier of the travel record review","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed travel record review information","typeName":"ITravelRecordReviews"},"authorizationType":null,"authorizationRole":"member","name":"atReview","path":"/travelRecord/member/reviews/{id}","method":"get"},{"specification":"This operation creates a new review entry for a travel record place authored by a member. It is associated with the travel_record_reviews table in the Prisma schema. The review includes textual content, a star rating from 1 to 5 inclusive, and a privacy setting which can be either 'public' or 'private'. The operation validates the required fields, ensuring the review text is provided and star rating is within allowed range, rejecting requests otherwise. It relates to existing travel_record_places and travel_record_member tables via foreign keys, enforcing relational integrity. Users must be authenticated members to perform this action. The endpoint accepts a POST request to /reviews with the designated request body schema and returns the created review entity.","path":"/travelRecord/member/reviews","method":"post","summary":"Create review record for a travel place","description":"Create a new review for a specific travel record place by an authenticated member. The review must include textual content and a star rating between 1 and 5.\n\nThe privacy setting defines visibility ('public' or 'private') and defaults to 'public' if not specified.\n\nSecurity measures restrict creation of reviews only to authenticated members. Validation ensures that the review text is non-empty and the star rating is within the allowed range.\n\nThis operation relates directly to the travel_record_reviews table which holds all review information linked to travel_record_places and travel_record_member.\n\nIn case of input validation failure or authorization issues, appropriate error responses are returned.","parameters":[],"requestBody":{"description":"Creation info of the review","typeName":"ITravelRecordReview.ICreate"},"responseBody":{"description":"Created review information","typeName":"ITravelRecordReview"},"authorizationType":null,"authorizationRole":"member","name":"create"},{"specification":"This operation updates an existing review identified by its unique ID in the travel_record_reviews table. It modifies the textual review content, star rating between 1 and 5, and privacy setting ('public' or 'private').\n\nThe operation validates that the provided review ID exists and that the input fields conform to expected formats and constraints. It enforces that only authenticated members can update their own reviews.\n\nThe HTTP PUT method on /reviews/{id} allows modification of the review resource. Path parameter id represents the unique identifier of the review to modify, which must be a valid UUID.","path":"/travelRecord/member/reviews/{id}","method":"put","summary":"Update review record by ID","description":"Update an existing review identified by its ID. The review must contain valid text and a star rating from 1 to 5.\n\nOnly authenticated members who own the review are authorized to update it.\n\nThe operation ensures data integrity by validating input and enforcing ownership restrictions.\n\nThe request path includes the review ID as a parameter and the request body contains updated review data.\n\nIf the review ID is invalid or does not exist, an error response is provided.","parameters":[{"name":"id","description":"Unique identifier of the review to be updated","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update info of the review","typeName":"ITravelRecordReview.IUpdate"},"responseBody":{"description":"Updated review information","typeName":"ITravelRecordReview"},"authorizationType":null,"authorizationRole":"member","name":"update"},{"specification":"This operation deletes an existing review identified by its unique ID from the travel_record_reviews database table. It performs a hard delete if no soft deletion timestamp is specified in the Prisma schema.\n\nOnly authenticated members who own the review can perform this deletion.\n\nThe HTTP DELETE method on /reviews/{id} removes the review record permanently.\n\nPath parameter id is the unique identifier of the target review and must follow UUID format.","path":"/travelRecord/member/reviews/{id}","method":"delete","summary":"Delete review record by ID","description":"Permanently delete a review identified by ID from the system. This action is irreversible.\n\nOnly authenticated members with ownership privileges can delete the review.\n\nThe path parameter specifies the review's unique identifier in UUID format.\n\nSuccessful deletion results in no content returned.\n\nIf the review ID does not exist or the user is unauthorized, an appropriate error is returned.","parameters":[{"name":"id","description":"Unique identifier of the review to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"erase"},{"specification":"This operation retrieves a list of friendship relationships for the authenticated member. It operates on the travel_record_friends table in the Prisma schema, supporting filtering, searching, sorting, and pagination via a PATCH method for complex queries.\n\nThe operation ensures only authenticated members can access their friend lists, respecting user privacy and relationship statuses.\n\nRequest body allows specifying search criteria such as status, friend member ID, and pagination parameters.\n\nResponse body returns a paginated list of friend relationship summaries matching the search criteria.","path":"/travelRecord/member/friends","method":"patch","summary":"Search and retrieve member's friend list","description":"Retrieve a paginated and filtered list of friendships of the authenticated member. This operation supports complex search, filtering, sorting, and pagination.\n\nOnly authenticated members can access their friend relationships.\n\nThe response includes summarized friendship information with statuses like pending, accepted, or rejected.\n\nSupports filtering by status and friend member ID in the request body.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for friendship filtering","typeName":"ITravelRecordFriend.IRequest"},"responseBody":{"description":"Paginated list of friendship summary information matching search criteria","typeName":"IPageITravelRecordFriend.ISummary"},"authorizationType":null,"authorizationRole":"member","name":"index"},{"specification":"This operation retrieves details for a specific friend relationship record identified by its unique ID from the travel_record_friends table, which models bidirectional friendships between authenticated members. It returns a single friend entity containing metadata such as member IDs involved, friendship status, and timestamps reflecting the lifecycle of the friendship. The system validates the provided UUID path parameter and fetches the friend record if it exists and is not soft deleted. This operation ensures users can view the current status of their friend connections.","path":"/travelRecord/member/friends/{id}","method":"get","summary":"Retrieve details of a specific friend relationship by ID","description":"This GET operation fetches comprehensive information about a friendship established between two members in the travel record system. Each friend record encapsulates details such as the requesting member ID, the friend member ID, the current status of the friendship (pending, accepted, or rejected), and timestamps indicating creation and last update times.\n\nUsers must provide the unique identifier of the friend record in UUID format as a path parameter to retrieve this detailed friendship information. The operation enforces access governance to prevent unauthorized viewing of friendships that should remain restricted.\n\nThe returned data reflects the current state of a friendship, allowing clients to display friend request statuses or manage the social graph. The operation corresponds directly to the travel_record_friends database table, integrating all columns defined therein.\n\nErrors are returned if the ID is invalid, missing, or if the friend record does not exist or has been soft deleted.","parameters":[{"name":"id","description":"Unique identifier of the friend relationship","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Friend relationship details","typeName":"ITravelRecordFriend"},"authorizationType":null,"authorizationRole":"member","name":"at"},{"specification":"This operation creates a new friend relationship request in the travel_record_friends table, representing a social connection request between two authenticated members. The system accepts friendship request details via the request body, validates uniqueness to prevent duplicates, and sets the initial friendship status to 'pending'. The database records the initiating member, the target friend member, and timestamps, enabling subsequent acceptance or rejection.\n\nBusiness rules enforce that duplicate requests or existing friendships cannot be recreated. This operation requires authenticated user roles to create friend requests, facilitating social networking in the travel record application.","path":"/travelRecord/member/friends","method":"post","summary":"Create a new friend request","description":"This POST operation allows a member user to send a friend request to another member, establishing a pending social connection in the backend. The request body includes necessary details such as the IDs of the requesting member and the potential friend.\n\nThe system validates the request to avoid duplicates or conflicts with existing relationships. Upon successful creation, a friend record with status 'pending' is created, enabling the recipient to accept or reject the connection later.\n\nThis operation corresponds to the travel_record_friends Prisma database entity that manages relationships, ensuring data integrity and enforcing business rules. Errors occur if input data is invalid or conflicts exist.","parameters":[],"requestBody":{"description":"Information required to create a friend request","typeName":"ITravelRecordFriend.ICreate"},"responseBody":{"description":"Created friend relationship information","typeName":"ITravelRecordFriend"},"authorizationType":null,"authorizationRole":"member","name":"create"},{"specification":"This operation updates an existing friend relationship's information in the travel_record_friends table, including possible state changes such as accepting or rejecting a friend request. The operation requires the unique friend relationship ID as a path parameter and updated fields in the request body. Typical updates include modifying the status field among the allowed values (pending, accepted, rejected) and timestamps.\n\nIt enforces ownership and logical rules, preventing unauthorized alteration of friendships. This PUT operation ensures members can manage their social connections effectively by confirming or denying requests and updating relationship metadata accordingly.","path":"/travelRecord/member/friends/{id}","method":"put","summary":"Update a friend relationship by ID","description":"This PUT operation permits updating the details of a specific friendship record, identified by its unique ID, in the travel record backend system. Typical updates involve changing the friendship status (e.g., from 'pending' to 'accepted' or 'rejected'), allowing members to confirm or deny friend requests.\n\nThe request must include the UUID identifier of the friend record in the path and the updated information in the body. Only authorized users can perform this update to maintain integrity of social connections.\n\nThis operation closely maps to the travel_record_friends table in the Prisma schema, applying changes to existing records with validation to prevent invalid states or unauthorized modifications.\n\nErrors occur if the friend record is missing, the ID is malformed, or the update data is invalid.","parameters":[{"name":"id","description":"Unique identifier of the friend relationship to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Friend relationship update data","typeName":"ITravelRecordFriend.IUpdate"},"responseBody":{"description":"Updated friend relationship information","typeName":"ITravelRecordFriend"},"authorizationType":null,"authorizationRole":"member","name":"update"},{"specification":"This operation deletes a specific friend relationship entity identified by its unique ID in the travel_record_friends table. It performs a soft delete by setting the deleted_at timestamp to mark the record as logically deleted while preserving the data for possible recovery or audit. This maintains referential integrity without physical removal.\n\nThe deletion request is validated for the UUID format of the ID parameter. This operation ensures members can remove friends from their social graph, effectively dissolving the bidirectional relationship.\n\nErrors are returned if the ID is invalid or the record does not exist or is already deleted.","path":"/travelRecord/member/friends/{id}","method":"delete","summary":"Delete (soft delete) a friend relationship by ID","description":"This DELETE operation removes a friend relationship record from the system identified by its unique ID. The operation performs a soft deletion by marking the record as deleted with a timestamp, preserving the data for potential recovery.\n\nThe member initiating the deletion must be authorized to manage the friend relationship. The ID path parameter must be a valid UUID specifying the friend record.\n\nPost-deletion, the friendship relationship is considered terminated and no longer visible in friend lists.\n\nThis corresponds directly to the travel_record_friends Prisma entity.\n\nErrors occur if the ID path parameter is invalid or the record is not found.","parameters":[{"name":"id","description":"Unique identifier of the friend relationship to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"erase"},{"specification":"This operation searches and retrieves a paginated list of privacy settings for travel record members. It allows filtering and sorting based on various fields such as privacy level, creation date, and update date. The operation works on the travel_record_privacy_settings table in the Prisma schema, which stores per-member privacy control data that governs the visibility of travel records to friends and the public. It supports complex queries to find records matching business criteria and returns summaries optimized for listing.","description":"Retrieve a filtered, sorted, and paginated list of privacy settings for travel record members. This endpoint supports complex search criteria allowing clients to request subsets of privacy settings based on privacy level or timestamps.\n\nOnly authenticated users with the appropriate role can perform this operation to view privacy configurations. The data returned include summary information on the privacy settings, without exposing sensitive member details.\n\nThis operation corresponds to the travel_record_privacy_settings table, which stores the privacy levels set by members. It integrates with other member-related APIs to enforce access control and privacy management.\n\nUnique filtering enables clients to manage privacy rules effectively, supporting administrative oversight or user self-service.\n\nValidation includes ensuring search parameters are valid and supported by pagination and sorting options. Errors such as invalid filter arguments will return descriptive messages.","summary":"Search and retrieve paginated list of travel record privacy settings","parameters":[],"requestBody":{"description":"Search and filter criteria for travel record privacy settings","typeName":"ITravelRecordPrivacySettings.IRequest"},"responseBody":{"description":"Paginated search results for travel record privacy settings","typeName":"IPageITravelRecordPrivacySettings.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/travelRecord/admin/privacySettings","method":"patch"},{"specification":"This operation retrieves a specific privacy setting record by its unique identifier. The corresponding data is stored in the travel_record_privacy_settings table of the Prisma schema, containing members' privacy configurations such as public or private visibility levels. This read operation returns detailed privacy setting information for the specified ID.\n\nIt requires authentication with the 'admin' role to ensure sensitive privacy settings are protected. The response contains full details of the privacy settings, including privacy level, ownership reference, and timestamps.\n\nPath parameter 'id' must be a valid UUID that identifies the target privacy setting record.","description":"Retrieve the detailed privacy setting record for the specified ID. \n\nThis operation requires administrative role to access member privacy configurations to ensure proper control and compliance.\n\nData returned includes member association, privacy level, and audit timestamps.\n\nIf the specified ID does not exist, a not-found error response is expected.","summary":"Get detailed privacy setting by ID","parameters":[{"name":"id","description":"Target privacy setting record's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed privacy setting record","typeName":"ITravelRecordPrivacySettings"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/travelRecord/admin/privacySettings/{id}","method":"get"},{"specification":"This operation creates a new privacy setting record for a travel record member. It inserts data into the travel_record_privacy_settings table as defined in the Prisma schema, representing privacy control settings such as 'public' or 'private' that govern content visibility.\n\nThe creation requires providing valid member ID, desired privacy level, and optional timestamps. The system validates data integrity and uniqueness constraints (one setting per member). Upon success, the newly created privacy setting is returned.\n\nThis operation requires administrative authorization to create privacy settings on behalf of members.\n\nRequest body must comply with the ITravelRecordPrivacySettings.ICreate schema representing the required and optional fields for creation.","description":"Create a new travel record privacy setting for a member.\n\nOnly administrators can perform this operation to configure privacy on behalf of users.\n\nThe system enforces unique privacy settings per member and validates input data.\n\nSuccessful creation returns the full detailed privacy setting record.","summary":"Create a new travel record privacy setting","parameters":[],"requestBody":{"description":"Create request payload for a new privacy setting","typeName":"ITravelRecordPrivacySettings.ICreate"},"responseBody":{"description":"Created privacy setting record","typeName":"ITravelRecordPrivacySettings"},"authorizationType":null,"authorizationRole":"admin","name":"create","path":"/travelRecord/admin/privacySettings","method":"post"},{"specification":"This operation updates an existing travel record privacy setting identified by its unique ID. The operation modifies fields in the travel_record_privacy_settings table, which holds privacy level configurations for members.\n\nAdministrators can change the privacy level and update timestamps. The system enforces member ID uniqueness and validates data integrity. If the specified record ID does not exist, an error is returned.\n\nPath parameter 'id' identifies the privacy setting to update. The request body must match the ITravelRecordPrivacySettings.IUpdate schema defining updatable fields.\n\nOn success, the updated privacy setting record is returned.","description":"Update an existing travel record privacy setting by ID.\n\nOnly administrators have permission to modify privacy settings.\n\nThe input must be validated for unique member constraints and correct privacy levels.\n\nIf the record does not exist or input is invalid, an error response is generated.\n\nReturns the updated privacy setting Detail on success.","summary":"Update a travel record privacy setting by ID","parameters":[{"name":"id","description":"Target privacy setting record's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update payload for privacy setting record","typeName":"ITravelRecordPrivacySettings.IUpdate"},"responseBody":{"description":"Updated privacy setting record","typeName":"ITravelRecordPrivacySettings"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/travelRecord/admin/privacySettings/{id}","method":"put"},{"specification":"This operation permanently deletes a privacy setting record by its unique 'id' in the travel_record_privacy_settings table, which manages privacy levels ('public' or 'private') for travel records. Only authorized members ('member' role) or admins can perform this deletion. The deletion is a hard delete, completely removing the record from the database without soft delete markers.","description":"This API endpoint allows authorized authenticated members or admins to permanently delete a specific privacy setting by its unique identifier from the travel_record_privacy_settings table.\n\nThe table stores privacy configurations controlling visibility of travel records, enabling users to restrict access to their data as 'public' or 'private'.\n\nThe operation requires the 'id' path parameter in UUID format specifying the privacy setting to be deleted.\n\nSecurity checks ensure that only the owner member or an administrator can perform this deletion.\n\nIf the provided 'id' does not exist or the caller lacks permissions, the API will respond with appropriate error messages and status codes.\n\nThis operation does not require any request body nor returns a response body.\n\nRelated operations include creation, retrieval, and updating of privacy settings.","summary":"Delete a privacy setting record by ID","parameters":[{"name":"id","description":"Unique identifier of the privacy setting record to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"erase","path":"/travelRecord/member/privacySettings/{id}","method":"delete"},{"specification":"This operation permanently deletes a privacy setting record by its unique 'id' in the travel_record_privacy_settings table, which manages privacy levels ('public' or 'private') for travel records. Only authorized members ('member' role) or admins can perform this deletion. The deletion is a hard delete, completely removing the record from the database without soft delete markers.","description":"This API endpoint allows authorized authenticated members or admins to permanently delete a specific privacy setting by its unique identifier from the travel_record_privacy_settings table.\n\nThe table stores privacy configurations controlling visibility of travel records, enabling users to restrict access to their data as 'public' or 'private'.\n\nThe operation requires the 'id' path parameter in UUID format specifying the privacy setting to be deleted.\n\nSecurity checks ensure that only the owner member or an administrator can perform this deletion.\n\nIf the provided 'id' does not exist or the caller lacks permissions, the API will respond with appropriate error messages and status codes.\n\nThis operation does not require any request body nor returns a response body.\n\nRelated operations include creation, retrieval, and updating of privacy settings.","summary":"Delete a privacy setting record by ID","parameters":[{"name":"id","description":"Unique identifier of the privacy setting record to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/travelRecord/admin/privacySettings/{id}","method":"delete"}],"components":{"authorization":[{"name":"guest","description":"Unauthenticated users who can browse public information and see shared content but cannot record or share locations.","kind":"guest"},{"name":"member","description":"Authenticated users who can record visited places, upload photos, write reviews with star ratings, manage privacy settings, add friends, and share records.","kind":"member"},{"name":"admin","description":"System administrators who manage users, oversee content and system settings.","kind":"admin"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageITravelRecordTravelRecordGuest":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITravelRecordTravelRecordGuest"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITravelRecordMember.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITravelRecordMember.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITravelRecordTravelRecordAdmin.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITravelRecordTravelRecordAdmin.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITravelRecordPlaces.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITravelRecordPlaces.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITravelRecordPlacePhoto.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITravelRecordPlacePhoto.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITravelRecordReviews.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITravelRecordReviews.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITravelRecordFriend.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITravelRecordFriend.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITravelRecordPrivacySettings.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITravelRecordPrivacySettings.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"ITravelRecordGuest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) as primary key"},"created_at":{"type":"string","format":"date-time","description":"Created timestamp in ISO 8601 format"},"updated_at":{"type":"string","format":"date-time","description":"Last updated timestamp in ISO 8601 format"}},"required":["id","created_at","updated_at"],"description":"Guest user entity representing unauthenticated or minimal-access users of the TravelRecord system. Contains ID and timestamps for session tracking."},"ITravelRecordGuest.ICreate":{"type":"object","properties":{},"required":[],"description":"Request body for creating a new travel record guest; no properties required."},"ITravelRecordGuest.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Guest user unique ID"},"created_at":{"type":"string","format":"date-time","description":"Created timestamp in ISO 8601 format"},"updated_at":{"type":"string","format":"date-time","description":"Last updated timestamp in ISO 8601 format"},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","created_at","updated_at","token"],"description":"Response body including guest ID and authorization token after successful join or refresh."},"ITravelRecordGuest.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token string"}},"required":["refresh_token"],"description":"Request body containing refresh token to obtain new JWT tokens for guest."},"ITravelRecordMember":{"type":"object","properties":{"id":{"type":"string","description":"Unique identifier (UUID) for the member."},"email":{"type":"string","description":"Verified member email address (unique)."},"display_name":{"type":"string","description":"Display name used in social contexts."},"google_oauth_id":{"type":"string","description":"Google OAuth unique identifier for the member."},"created_at":{"type":"string","description":"Account creation timestamp (ISO 8601 format)."},"updated_at":{"type":"string","description":"Last update timestamp (ISO 8601 format)."}},"required":["id","email","display_name","google_oauth_id","created_at","updated_at"],"description":"Represents a member user of the TravelRecord system with identity and contact details."},"ITravelRecordMember.ICreate":{"type":"object","properties":{"email":{"type":"string","description":"Member's verified email address used as login ID."},"display_name":{"type":"string","description":"Display name for social interactions."},"google_oauth_id":{"type":"string","description":"Unique Google OAuth identifier for authentication."},"password_hash":{"type":"string","description":"Hashed password for authentication, never stored plaintext."}},"required":["email","display_name","google_oauth_id","password_hash"],"description":"Request body to register a new member user in TravelRecord system. Requires email, display name, unique Google OAuth ID, and password hash. Does NOT include automatically generated fields or soft deletion. Passwords are never stored in plaintext."},"ITravelRecordMember.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the member user."},"email":{"type":"string","description":"Verified member email address (unique)."},"display_name":{"type":"string","description":"Display name used in social contexts."},"google_oauth_id":{"type":"string","description":"Google OAuth unique identifier for the member."},"created_at":{"type":"string","description":"Account creation timestamp (ISO 8601 format)."},"updated_at":{"type":"string","description":"Last update timestamp (ISO 8601 format)."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","display_name","google_oauth_id","created_at","updated_at","token"],"description":"Authorization response including member ID and JWT tokens issued upon successful login or registration."},"ITravelRecordMember.ILogin":{"type":"object","properties":{"email":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Member login email address, optional if Google OAuth ID is used."},"google_oauth_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Member Google OAuth identifier, optional if email is used."},"password":{"type":"string","description":"Member password in plaintext for login verification."}},"required":["password"],"description":"Login request payload accepting either user's email or Google OAuth ID along with password for member authentication. At least one of email or google_oauth_id should be provided, but schema allows nullable for both for flexibility."},"ITravelRecordMember.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"JWT refresh token string issued during member authentication."}},"required":["refresh_token"],"description":"Request body to refresh JWT tokens for an authenticated member user using a refresh token."},"ITravelRecordMember.IResetPassword":{"type":"object","properties":{"token":{"type":"string","description":"Verification token for password reset."},"new_password_hash":{"type":"string","description":"New hashed password to update member authentication."}},"required":["token","new_password_hash"],"description":"Request payload to reset password for TravelRecord member user. Requires a verification token and new password hash."},"ITravelRecordMember.IAuthorizationToken":{"type":"object","properties":{"access_token":{"type":"string","description":"JWT access token string."},"refresh_token":{"type":"string","description":"JWT refresh token string."},"expires_at":{"type":"string","format":"date-time","description":"Expiration timestamp of the access token."}},"required":["access_token","refresh_token","expires_at"],"description":"Structure containing JWT access and refresh tokens along with expiration time."},"ITravelRecordMember.IResult":{"type":"object","properties":{"success":{"type":"boolean","description":"Indicates operation success status.\n\nExpected to be true if the operation completed successfully, false otherwise."},"message":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"An optional message providing additional information about the operation result.\nThis could be used for error descriptions or confirmations."}},"required":["success"],"description":"Represents the outcome of an operation performed by a TravelRecord member user.\n\nThis interface indicates whether the operation succeeded and optionally provides a message describing the result."},"ITravelRecordMember.IChangePassword":{"type":"object","properties":{"current_password_hash":{"type":"string","description":"Current password hash of the authenticated member. This confirms the user's identity before allowing password change.\n\nShould be a non-empty string representing current password hash."},"new_password_hash":{"type":"string","description":"New password hash to replace the current password.\n\nShould be a non-empty string representing new password hash."}},"required":["current_password_hash","new_password_hash"],"description":"Request structure for changing the password of a TravelRecord member user.\n\nIncludes current password hash for verification and the new password hash to update."},"ITravelRecordMember.ISendVerification":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"The email address of the member to which the verification email will be sent.\n\nMust be a valid email format string."}},"required":["email"],"description":"Request structure for sending an email verification message to a TravelRecord member user's email address.\n\nContains the email to which the verification is sent."},"ITravelRecordMember.IVerifyConfirm":{"type":"object","properties":{"token":{"type":"string","description":"The verification token sent to the member's email for confirming verification.\n\nThis token should be a non-empty string, typically alphanumeric."}},"required":["token"],"description":"Request structure for confirming email verification by providing the verification token.\n\nEnsures the provided token matches the one sent for validation."},"ITravelRecordMember.IEnableTwoFactor":{"type":"object","properties":{"verification_token":{"type":"string","description":"Information required to enable two-factor authentication (2FA). Must include the verification token obtained from the 2FA device."}},"required":["verification_token"],"description":"Information required to enable two-factor authentication (2FA) for TravelRecord member user."},"ITravelRecordMember.IDisableTwoFactor":{"type":"object","properties":{"token":{"type":"string","description":"Information required to disable two-factor authentication (2FA). Must include a valid 2FA token demonstrating authorization to disable."}},"required":["token"],"description":"Information required to disable two-factor authentication (2FA) for TravelRecord member user."},"ITravelRecordAdmin.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Administrator's official email address for login. Must be a valid unique email."},"display_name":{"type":"string","description":"Administrator's display name used in system logs and interfaces."},"password_hash":{"type":"string","description":"Hashed password for secure authentication. Passwords must be properly hashed before sending."}},"required":["email","display_name","password_hash"],"description":"Administrator account creation details with email, display name, and hashed password."},"ITravelRecordAdmin.IAuthorized":{"type":"object","description":"Authorization response containing JWT token and authentication information for administrator users.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated admin user"},"email":{"type":"string","format":"email","description":"Administrator's email address"},"display_name":{"type":"string","description":"Administrator's display name"},"password_hash":{"type":"string","description":"Hashed password for secure authentication"},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp"},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp for account deactivation and recovery, or null if not deleted"},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","display_name","password_hash","created_at","updated_at","token"]},"ITravelRecordAdmin":{"type":"object","description":"Administrator user entity representing system administrators with credentials and audit timestamps.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the admin user"},"email":{"type":"string","format":"email","description":"Official email address of the administrator"},"display_name":{"type":"string","description":"Display name used in system logs and interfaces"},"password_hash":{"type":"string","description":"Hashed password for secure authentication"},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp"},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp for account deactivation and recovery, or null if not deleted"}},"required":["id","email","display_name","password_hash","created_at","updated_at"]},"ITravelRecordAdmin.ILogin":{"type":"object","description":"Request body schema for logging in an administrator user, including email and password hash.","properties":{"email":{"type":"string","description":"Administrator login email address"},"password_hash":{"type":"string","description":"Password hash of the administrator for login verification"}},"required":["email","password_hash"]},"ITravelRecordAdmin.IRefresh":{"type":"object","description":"Request body schema for refreshing administrator JWT tokens using refresh token.","properties":{"refresh_token":{"type":"string","description":"Refresh token string used to obtain new access tokens for the administrator"}},"required":["refresh_token"]},"ITravelRecordTravelRecordGuest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp."}},"required":["id","created_at","updated_at"],"description":"Travel record guest entity represents unauthenticated guests with minimal stored data.\n\nGuests can browse public content but cannot record or share locations.\n\nIncludes primary key id and timestamps for creation and update.\n\nThis entity supports guest session tracking and is foundational for authentication workflows."},"ITravelRecordTravelRecordGuest.IRequest":{"type":"object","description":"Request query parameters for listing guest users with pagination support.","properties":{"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number for pagination"},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Record limit per page for pagination"}},"required":[]},"ITravelRecordTravelRecordGuest.ICreate":{"type":"object","description":"Request body schema for creating a travel record guest user. No additional fields are required as guests have minimal information.","properties":{},"required":[]},"ITravelRecordTravelRecordGuest.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key identifier of the guest."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","created_at","updated_at","token"],"description":"Authorization response containing JWT token.\n\nIncludes guest's unique ID and token information."},"ITravelRecordTravelRecordGuest.IUpdate":{"type":"object","properties":{"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Record creation timestamp (nullable)."},"updated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Record last update timestamp (nullable)."}},"required":[],"description":"Update data for the travel record guest.\n\nOnly modifiable timestamps can be updated."},"ITravelRecordMember.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Limit of records per page."},"email":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by member email address with optional partial matching."},"display_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by member display name with optional partial matching."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter by soft deletion timestamp; null means not deleted."}},"required":[],"description":"Request type for filtering and pagination of member list.\n\nSupports filters on email, display name, and deletion timestamp."},"ITravelRecordMember.IUpdate":{"type":"object","properties":{"email":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Member's verified email address used as login ID."},"display_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Member's display name for social interactions."},"google_oauth_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Unique Google OAuth identifier for authentication."},"password_hash":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Hashed password for authentication, never stored in plaintext."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp for account recovery (nullable)."}},"required":[],"description":"Update data for an existing member.\n\nAllows updating email, display name, Google OAuth ID, password hash, and deletion timestamp."},"ITravelRecordTravelRecordAdmin":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for admin user account."},"email":{"type":"string","description":"Email address used for administrator login."},"display_name":{"type":"string","description":"Display name shown in system logs and admin tools."},"created_at":{"type":"string","description":"Account creation timestamp (ISO 8601 format)."},"updated_at":{"type":"string","description":"Timestamp of last account update (ISO 8601 format)."}},"required":["id","email","display_name","created_at","updated_at"],"description":"Administrative user account information for TravelRecord's backend system."},"ITravelRecordTravelRecordAdmin.IRequest":{"type":"object","properties":{"email":{"type":"string","description":"Search filter for email address.\n\nSupports partial matching."},"display_name":{"type":"string","description":"Search filter for display name.\n\nSupports partial matching."},"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Pagination: current page number."},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Pagination: number of records per page."},"orderBy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sorting field.\n\nAllowed values: \"email\", \"display_name\", \"created_at\", \"updated_at\""},"orderDirection":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sorting direction.\n\nAllowed values: \"asc\", \"desc\""}},"required":[],"description":"Request parameters for searching and filtering TravelRecord admins."},"ITravelRecordTravelRecordAdmin.IUpdate":{"type":"object","properties":{"email":{"type":"string","description":"Administrator's official email address for login.\n\nMust be unique across admins."},"display_name":{"type":"string","description":"Administrator's display name used in system logs and interfaces."},"password_hash":{"type":"string","description":"Hashed password for secure authentication."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp for account deactivation and recovery.\n\nNullable.\n\n@format date-time"}},"required":[],"description":"Update parameters for modifying TravelRecord admin accounts."},"ITravelRecordPlaces":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for a place record."},"latitude":{"type":"number","description":"Latitude coordinate in decimal degrees."},"longitude":{"type":"number","description":"Longitude coordinate in decimal degrees."},"visit_date":{"type":"string","description":"Date of visit in ISO 8601 format."},"place_name":{"type":"string","description":"Name or description of the visited place."},"google_place_id":{"type":"string","description":"Unique Google Place ID associated with this place."}},"required":["id","latitude","longitude","visit_date","place_name","google_place_id"],"description":"Details of a travel record place including coordinates, visit date, and identification."},"ITravelRecordPlaces.IRequest":{"type":"object","properties":{"min_latitude":{"type":"number","description":"Latitude filter - minimum value.\n\nOptional filter for bounding box or location range queries."},"max_latitude":{"type":"number","description":"Latitude filter - maximum value.\n\nOptional filter for bounding box or location range queries."},"min_longitude":{"type":"number","description":"Longitude filter - minimum value.\n\nOptional filter for bounding box or location range queries."},"max_longitude":{"type":"number","description":"Longitude filter - maximum value.\n\nOptional filter for bounding box or location range queries."},"visit_date_start":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Visit date filter - start date.\n\nISO 8601 date-time string filtering visit date range.\n\nNullable.\n\n@format date-time"},"visit_date_end":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Visit date filter - end date.\n\nISO 8601 date-time string filtering visit date range.\n\nNullable.\n\n@format date-time"},"place_name_query":{"type":"string","description":"Text search filter on place name.\n\nEnables partial matching for place names."},"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Pagination: current page number."},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Pagination: number of records per page."},"orderBy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sorting field.\n\nAllowed fields: \"visit_date\", \"place_name\", \"created_at\", \"updated_at\""},"orderDirection":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sorting direction.\n\nAllowed values: \"asc\", \"desc\""}},"required":[],"description":"Request parameters for filtering and searching travel record places."},"ITravelRecordPlaces.ICreate":{"type":"object","description":"Request body for creating a new travel record place.\n\nExcludes auto-generated and ownership fields which are set by the system.\n\nAll fields are required to ensure valid travel place records.","properties":{"latitude":{"type":"number","format":"double","description":"Latitude of the place in decimal degrees."},"longitude":{"type":"number","format":"double","description":"Longitude of the place in decimal degrees."},"visit_date":{"type":"string","format":"date-time","description":"Visit date in ISO 8601 date-time format."},"place_name":{"type":"string","description":"Name or description of the visited place."},"google_place_id":{"type":"string","description":"Google Maps unique place ID identifying the place."}},"required":["latitude","longitude","visit_date","place_name","google_place_id"]},"ITravelRecordPlaces.IUpdate":{"type":"object","description":"Request body for updating an existing travel record place.\n\nAll fields are optional to support partial updates.\n\nOwnership and system-generated fields cannot be updated here.","properties":{"latitude":{"type":"number","format":"double","description":"Latitude of the place in decimal degrees."},"longitude":{"type":"number","format":"double","description":"Longitude of the place in decimal degrees."},"visit_date":{"type":"string","format":"date-time","description":"Visit date in ISO 8601 date-time format."},"place_name":{"type":"string","description":"Name or description of the visited place."},"google_place_id":{"type":"string","description":"Google Maps unique place ID identifying the place."}},"required":[]},"ITravelRecordPlacePhoto.IRequest":{"type":"object","description":"Request parameters for filtered, paginated list of photos.\n\nSupports optional filtering, pagination, and sorting parameters.","properties":{"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional search string to filter by file_uri or other textual properties."},"page":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Optional page number.\n\n@default 1"},"limit":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Optional page size (number of items per page).\n\n@default 20"},"orderBy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional sort field name."},"orderDirection":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Optional sort direction: 'asc' or 'desc'."}},"required":[]},"ITravelRecordPlacePhoto":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier of the photo."},"travel_record_place_id":{"type":"string","format":"uuid","description":"Belonged travel record place's ID.\n\nIndicates which place this photo belongs to."},"file_uri":{"type":"string","description":"URI of the uploaded photo file.\n\nRepresents the location of the photo file."},"file_size":{"type":"integer","description":"Size of the photo file in bytes.\n\nIndicates the size of the photo for storage and validation purposes."},"uploaded_at":{"type":"string","format":"date-time","description":"Timestamp of when the photo was uploaded.\n\nRecords the upload date-time for audit and tracking."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp.\n\nWhen the photo record was created."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp.\n\nIndicates the last time this photo record was updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp for recovery.\n\nNullable timestamp indicating if the photo was soft deleted."}},"required":["id","travel_record_place_id","file_uri","file_size","uploaded_at","created_at","updated_at"],"description":"Photos associated with travel record places. Each photo belongs to a single travel record place and stores basic file metadata like URI, upload timestamp, and file size. Managed as a subsidiary entity dependent on travel_record_places."},"ITravelRecordPlacePhoto.ICreate":{"type":"object","description":"Request body schema for creating a new travel record place photo. Includes linkage to place ID, file URI, size, and upload timestamp.","properties":{"travel_record_place_id":{"type":"string","format":"uuid","description":"UUID of the travel record place to associate with this photo."},"file_uri":{"type":"string","description":"URI where the photo image file is stored."},"file_size":{"type":"integer","description":"Photo file size in bytes."},"uploaded_at":{"type":"string","format":"date-time","description":"Timestamp when the photo was uploaded."}},"required":["travel_record_place_id","file_uri","file_size","uploaded_at"]},"ITravelRecordPhotos.IUpdate":{"type":"object","description":"Request schema for updating photo metadata. All fields are optional allowing partial updates without changing other data.","properties":{"file_uri":{"type":"string","description":"Updated URI of the photo file."},"file_size":{"type":"integer","description":"Updated photo file size in bytes."},"uploaded_at":{"type":"string","format":"date-time","description":"Updated upload timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp, null means not deleted."}},"required":[]},"ITravelRecordPhotos":{"type":"object","description":"Travel record photo entity representing a photo associated with a travel record place, including metadata, audit timestamps, and soft deletion status.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the photo record."},"travel_record_place_id":{"type":"string","format":"uuid","description":"ID of the travel record place that owns this photo."},"file_uri":{"type":"string","description":"URI of the photo file."},"file_size":{"type":"integer","description":"File size in bytes."},"uploaded_at":{"type":"string","format":"date-time","description":"Timestamp when photo was uploaded."},"created_at":{"type":"string","format":"date-time","description":"Creation datetime of the record."},"updated_at":{"type":"string","format":"date-time","description":"Last update datetime of the record."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of soft deletion or null if not deleted."}},"required":["id","travel_record_place_id","file_uri","file_size","uploaded_at","created_at","updated_at"]},"ITravelRecordReviews.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","format":"uint32"},{"type":"null"}],"description":"Page number."},"limit":{"oneOf":[{"type":"integer","format":"uint32"},{"type":"null"}],"description":"Limitation of records per a page.\n\n@default 100"},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search text filter matching review content."},"privacy":{"oneOf":[{"const":"public"},{"const":"private"},{"type":"null"}],"description":"Privacy filter restricting to 'public' or 'private' reviews."},"min_star_rating":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Minimum star rating filter (inclusive)."},"max_star_rating":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Maximum star rating filter (inclusive)."},"travel_record_place_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by associated travel record place ID."},"travel_record_member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by member who wrote reviews."}},"required":[],"description":"Filtering and pagination criteria for review search"},"ITravelRecordReviews":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier of the review."},"travel_record_place_id":{"type":"string","format":"uuid","description":"Reference to the place being reviewed.\n\nIndicates which travel record place this review is for."},"travel_record_member_id":{"type":"string","format":"uuid","description":"Reference to the member who wrote the review."},"review":{"type":"string","description":"Textual review content up to 1000 characters."},"star_rating":{"type":"integer","description":"Star rating from 1 to 5 inclusive."},"privacy":{"type":"string","description":"Privacy setting for review: 'public' or 'private'."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the review was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the review was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp; null if not deleted."}},"required":["id","travel_record_place_id","travel_record_member_id","review","star_rating","privacy","created_at","updated_at"],"description":"Stores member reviews with textual content and star ratings (1-5) for places recorded by members. Supports privacy settings 'public' or 'private' per review. Linked to travel_record_places and travel_record_member for relational integrity and querying. Includes timestamps for auditing and optional soft deletion support."},"ITravelRecordReview.ICreate":{"type":"object","properties":{"travel_record_place_id":{"type":"string","format":"uuid","description":"Identifier of the travel record place being reviewed."},"review":{"type":"string","description":"Text content of the review. Must be non-empty and up to 1000 characters."},"star_rating":{"type":"integer","description":"Star rating between 1 and 5 inclusive."},"privacy":{"oneOf":[{"const":"public"},{"const":"private"},{"type":"null"}],"description":"Privacy level of the review. Defaults to 'public' if not specified."}},"required":["travel_record_place_id","review","star_rating"],"description":"Request body payload for creating a new travel record review. Validates star rating and review text constraints."},"ITravelRecordReview":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"travel_record_place_id":{"type":"string","format":"uuid","description":"Reference to the place being reviewed (travel_record_places.id)."},"travel_record_member_id":{"type":"string","format":"uuid","description":"Reference to the member who wrote the review (travel_record_member.id)."},"review":{"type":"string","description":"Textual review content up to 1000 characters."},"star_rating":{"type":"integer","format":"int32","description":"Star rating from 1 to 5 inclusive."},"privacy":{"type":"string","description":"Privacy setting for review: 'public' or 'private'. Default is 'public'."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the review was created for auditing."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the review was last updated for auditing."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp; null if not deleted."}},"required":["id","travel_record_place_id","travel_record_member_id","review","star_rating","privacy","created_at","updated_at"],"description":"Stores member reviews with textual content and star ratings (1-5) for\nplaces recorded by members. Supports privacy settings 'public' or\n'private' per review. Linked to travel_record_places and\ntravel_record_member for relational integrity and querying. Includes\ntimestamps for auditing and optional soft deletion support."},"ITravelRecordReview.IUpdate":{"type":"object","properties":{"review":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Update review textual content, nullable to clear review."},"star_rating":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Update star rating between 1 and 5 inclusive, nullable to clear rating."},"privacy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Update privacy setting; either 'public' or 'private', nullable to clear."}},"required":[],"description":"Update fields for a travel record review. All fields optional."},"ITravelRecordFriend":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier of the friendship."},"member_id":{"type":"string","format":"uuid","description":"Requesting member's ID."},"friend_member_id":{"type":"string","format":"uuid","description":"Target friend member's ID."},"status":{"type":"string","description":"Friendship status: pending, accepted, or rejected."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the friendship record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the friendship record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the friendship record was soft deleted."}},"required":["id","member_id","friend_member_id","status","created_at","updated_at"],"description":"Represents bidirectional friendship relationships between members of the TravelRecord system. Tracks friendship request lifecycle states such as pending, accepted, and rejected. Supports soft deletion to allow logical removal without data loss. Linked to member entities via foreign keys. Enables efficient queries for friend requests, friend lists, and status management."},"ITravelRecordFriend.IRequest":{"type":"object","properties":{"status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by friendship status: pending, accepted, or rejected."},"friend_member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by target friend member's id."},"page":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Page size limit for pagination."},"sort":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sort order specification."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search expression."}},"required":[],"description":"Friend list request query parameters. Supports filtering, pagination, and sorting."},"ITravelRecordFriend.ICreate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"Requesting member's id."},"friend_member_id":{"type":"string","format":"uuid","description":"Target friend member's id."},"status":{"type":"string","description":"Friendship status: pending, accepted, or rejected."}},"required":["member_id","friend_member_id","status"],"description":"Friend relationship creation properties."},"ITravelRecordFriend.IUpdate":{"type":"object","properties":{"status":{"oneOf":[{"const":"pending","description":"Friendship status: pending, accepted, or rejected."},{"const":"accepted","description":"Friendship status: pending, accepted, or rejected."},{"const":"rejected","description":"Friendship status: pending, accepted, or rejected."}],"description":"Friendship status: pending, accepted, or rejected."}},"required":[],"description":"Update schema for a friend relationship allowing modification of friendship status. Only the `status` field is mutable."},"ITravelRecordPrivacySettings.IRequest":{"type":"object","properties":{"privacy_level":{"type":"string","description":"Privacy level indicating visibility: 'public' or 'private'."},"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the privacy setting was created."},"updated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the privacy setting was last updated."}},"required":[],"description":"Request schema for filtered and paginated search of privacy settings. Includes filter properties such as privacy level and timestamps."},"ITravelRecordPrivacySettings.ICreate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"Owning member's unique identifier."},"privacy_level":{"type":"string","description":"Privacy level indicating visibility: 'public' or 'private'."}},"required":["member_id","privacy_level"],"description":"Create schema for travel record privacy settings. Requires member ID and privacy level as mandatory fields."},"ITravelRecordPrivacySettings":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier of the privacy setting."},"member_id":{"type":"string","format":"uuid","description":"Owning member's ID."},"privacy_level":{"type":"string","description":"Privacy level indicating visibility: 'public' or 'private'."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the privacy setting was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the privacy setting was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the privacy setting was soft deleted."}},"required":["id","member_id","privacy_level","created_at","updated_at"],"description":"Stores privacy settings for travel records, allowing members to control visibility of their content to friends and the public. Supports privacy levels such as 'public' and 'private'. Linked to member entities, enabling personalized privacy controls. Includes timestamps and soft deletion support for record lifecycle management."},"ITravelRecordPrivacySettings.IUpdate":{"type":"object","properties":{"privacy_level":{"oneOf":[{"const":"public","description":"Privacy level to update to; must be 'public' or 'private'."},{"const":"private","description":"Privacy level to update to; must be 'public' or 'private'."}],"description":"Privacy level to update to; must be 'public' or 'private'."},"updated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional updated_at timestamp, ISO 8601 format."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional deletion timestamp; null if not deleted."}},"required":["privacy_level"],"description":"Update information for a privacy setting, allowing modification of fields like privacy level and deletion status."},"ITravelRecordMember.ISummary":{"type":"object","properties":{"id":{"type":"string","description":"Unique identifier (UUID) for the member."},"email":{"type":"string","description":"Verified member email address (unique)."},"display_name":{"type":"string","description":"Display name used in social contexts."},"google_oauth_id":{"type":"string","description":"Google OAuth unique identifier for the member."},"created_at":{"type":"string","description":"Account creation timestamp (ISO 8601 format)."},"updated_at":{"type":"string","description":"Last update timestamp (ISO 8601 format)."}},"required":["id","email","display_name","google_oauth_id","created_at","updated_at"],"description":"Summary information of a TravelRecord member user for list and display purposes."},"ITravelRecordTravelRecordAdmin.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for admin user account."},"email":{"type":"string","description":"Email address used for administrator login."},"display_name":{"type":"string","description":"Display name shown in system logs and admin tools."},"created_at":{"type":"string","description":"Account creation timestamp (ISO 8601 format)."},"updated_at":{"type":"string","description":"Timestamp of last account update (ISO 8601 format)."}},"required":["id","email","display_name","created_at","updated_at"],"description":"Summary representation of TravelRecord administrator user accounts."},"ITravelRecordPlaces.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for a place record."},"latitude":{"type":"number","description":"Latitude coordinate in decimal degrees."},"longitude":{"type":"number","description":"Longitude coordinate in decimal degrees."},"visit_date":{"type":"string","description":"Date of visit in ISO 8601 format."},"place_name":{"type":"string","description":"Name or description of the visited place."},"google_place_id":{"type":"string","description":"Unique Google Place ID associated with this place."}},"required":["id","latitude","longitude","visit_date","place_name","google_place_id"],"description":"Summary representation of travel record places for list views."},"ITravelRecordPlacePhoto.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Photo unique ID."},"file_uri":{"type":"string","description":"URI to the photo file.\n\nShort summary information used in lists."},"file_size":{"type":"integer","description":"File size in bytes."},"uploaded_at":{"type":"string","format":"date-time","description":"Upload timestamp."}},"required":["id","file_uri","file_size","uploaded_at"],"description":"Summary information about travel record place photos used in list views."},"ITravelRecordReviews.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique review ID."},"review":{"type":"string","description":"Review text summary."},"star_rating":{"type":"integer","description":"Star rating number."},"privacy":{"type":"string","description":"Privacy setting ('public' or 'private')."},"created_at":{"type":"string","format":"date-time","description":"Created timestamp."}},"required":["id","review","star_rating","privacy","created_at"],"description":"Summary information for travel record reviews used in list views."},"ITravelRecordFriend.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Friendship record ID."},"friend_member_id":{"type":"string","format":"uuid","description":"Friend member ID."},"status":{"type":"string","description":"Status of the friendship."},"created_at":{"type":"string","format":"date-time","description":"Created timestamp."}},"required":["id","friend_member_id","status","created_at"],"description":"Summary information for friendship records in lists."},"ITravelRecordPrivacySettings.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Privacy setting ID."},"privacy_level":{"type":"string","description":"Privacy level ('public' or 'private')."},"created_at":{"type":"string","format":"date-time","description":"Created timestamp."}},"required":["id","privacy_level","created_at"],"description":"Summary information about travel record privacy settings."}}}}