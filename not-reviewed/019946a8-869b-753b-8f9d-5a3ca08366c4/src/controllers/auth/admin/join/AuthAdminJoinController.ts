import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";

import { ITravelRecordAdmin } from "../../../../api/structures/ITravelRecordAdmin";

@Controller("/auth/admin/join")
export class AuthAdminJoinController {
  /**
   * Create new travel_record_admin user account and issue JWT tokens upon
   * registration.
   *
   * Registers a new administrator account in the travel record system,
   * storing credentials securely and issuing JWT tokens for access.
   *
   * Requires unique email and hashed password fields as per the Prisma schema
   * for travel_record_admin.
   *
   * Enables admins to gain authenticated access with system privileges.
   *
   * Security includes password hashing and soft deletion support using the
   * 'deleted_at' field.
   *
   * Complementary APIs: login for administrators and token refresh for
   * session management.
   *
   * @param connection
   * @param body Administrator account creation details
   * @setHeader token.access Authorization
   *
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post()
  public async joinAdmin(
    @TypedBody()
    body: ITravelRecordAdmin.ICreate,
  ): Promise<ITravelRecordAdmin.IAuthorized> {
    body;
    return typia.random<ITravelRecordAdmin.IAuthorized>();
  }
}
