import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";

import { ITravelRecordGuest } from "../../../api/structures/ITravelRecordGuest";

@Controller("/auth/guest")
export class AuthGuestController {
  /**
   * Guest user registration operation creating guest record and issuing
   * temporary JWT token.
   *
   * Create a new guest user account with minimal information as defined in
   * travel_record_guest table and issue a temporary JWT token for limited
   * guest access in travelRecord system. This does not require credentials
   * but generates an entry in travel_record_guest for session tracking.
   *
   * @param connection
   * @param body Guest join request data
   * @setHeader token.access Authorization
   *
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: ITravelRecordGuest.ICreate,
  ): Promise<ITravelRecordGuest.IAuthorized> {
    body;
    return typia.random<ITravelRecordGuest.IAuthorized>();
  }

  /**
   * Guest user JWT token refresh operation using refresh token.
   *
   * Refresh temporary JWT tokens for guest users using valid refresh tokens
   * linked to travel_record_guest profile for continued limited access.
   *
   * @param connection
   * @param body Guest refresh request data including refresh token
   * @setHeader token.access Authorization
   *
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: ITravelRecordGuest.IRefresh,
  ): Promise<ITravelRecordGuest.IAuthorized> {
    body;
    return typia.random<ITravelRecordGuest.IAuthorized>();
  }
}
