import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";

import { ITravelRecordMember } from "../../../api/structures/ITravelRecordMember";

@Controller("/auth/member")
export class AuthMemberController {
  /**
   * Register a new TravelRecord member user.
   *
   * Register a new authenticated member user in the TravelRecord system. This
   * involves creating a record in the travel_record_member table where the
   * following fields are essential: email (unique, used as login ID),
   * display_name (user-friendly social name), google_oauth_id (unique Google
   * OAuth identifier), and password_hash (hashed password). Upon successful
   * registration, JWT tokens are issued to authorize the user session. This
   * operation is publicly accessible and does not require authentication.
   *
   * Member users must provide valid data for these fields. Email and Google
   * OAuth ID are unique across members. Password is stored securely as a
   * hash. Created and updated timestamps are set automatically.
   *
   * This operation is essential to member authentication flow, enabling new
   * users to join the system.
   *
   * Related operations: login to authenticate existing accounts, refresh to
   * renew tokens.
   *
   * @param connection
   * @param body Member registration information including email, display
   *   name, Google OAuth ID, and password hash.
   * @setHeader token.access Authorization
   *
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: ITravelRecordMember.ICreate,
  ): Promise<ITravelRecordMember.IAuthorized> {
    body;
    return typia.random<ITravelRecordMember.IAuthorized>();
  }

  /**
   * Authenticate an existing TravelRecord member user and obtain JWT tokens.
   *
   * Authenticate an existing TravelRecord member user by verifying login
   * credentials. Validates email or Google OAuth ID paired with hashed
   * password from travel_record_member table. Issues JWT access and refresh
   * tokens upon successful validation. Passwords are never sent or stored in
   * plaintext directly. This login endpoint is public, allowing users to
   * authenticate.
   *
   * Security considerations include prevention of brute force attacks and
   * safe handling of password hashes.
   *
   * Related operations: join for registration, refresh for token renewal.
   *
   * @param connection
   * @param body Member login credentials including email or Google OAuth ID
   *   and password.
   * @setHeader token.access Authorization
   *
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: ITravelRecordMember.ILogin,
  ): Promise<ITravelRecordMember.IAuthorized> {
    body;
    return typia.random<ITravelRecordMember.IAuthorized>();
  }

  /**
   * Refresh JWT tokens for TravelRecord member user.
   *
   * Refresh JWT access and refresh tokens for a logged-in TravelRecord member
   * user. Requires a valid refresh token to issue new tokens, extending
   * authenticated session without needing full login.
   *
   * Ensures refresh tokens are securely handled and validated. Tokens issued
   * contain claims that represent user identity and role.
   *
   * Related operations: join, login for initial token issuance.
   *
   * @param connection
   * @param body Refresh token information to obtain new JWT tokens.
   * @setHeader token.access Authorization
   *
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: ITravelRecordMember.IRefresh,
  ): Promise<ITravelRecordMember.IAuthorized> {
    body;
    return typia.random<ITravelRecordMember.IAuthorized>();
  }
}
