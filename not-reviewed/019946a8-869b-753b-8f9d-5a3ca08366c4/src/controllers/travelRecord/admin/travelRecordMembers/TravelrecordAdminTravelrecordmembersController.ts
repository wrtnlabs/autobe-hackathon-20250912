import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";

import { IPageITravelRecordMember } from "../../../../api/structures/IPageITravelRecordMember";
import { ITravelRecordMember } from "../../../../api/structures/ITravelRecordMember";

@Controller("/travelRecord/admin/travelRecordMembers")
export class TravelrecordAdminTravelrecordmembersController {
  /**
   * Search and retrieve a filtered, paginated list of travel record members.
   *
   * Retrieve a filtered and paginated list of travel record members.
   *
   * This operation enables clients to query travel_record_member entities
   * with multiple search parameters. The travel_record_member table includes
   * member's email, display name, Google OAuth ID, password hash, creation
   * and update timestamps, and optional deletion timestamp for soft deletes.
   *
   * Only authenticated users with admin role are authorized to perform this
   * operation to ensure privacy of user data. Filters can include email and
   * display name with partial matching, creation date ranges, and soft
   * deletion status.
   *
   * The response provides a paginated set of member summaries suitable for
   * user administration interfaces. Invalid parameters will be rejected with
   * clear validation errors.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for filtering
   *   travel record members
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: ITravelRecordMember.IRequest,
  ): Promise<IPageITravelRecordMember.ISummary> {
    body;
    return typia.random<IPageITravelRecordMember.ISummary>();
  }

  /**
   * Retrieve detailed travel record member information by ID.
   *
   * Retrieve detailed information for a specific travel record member
   * identified by their unique id.
   *
   * Only admin users are authorized to access this endpoint due to sensitive
   * personal and authentication information.
   *
   * This operation fetches all member details except for sensitive fields
   * like password hash and soft deletion timestamp to maintain security.
   *
   * Proper error messages will be returned if the member id is invalid or not
   * found.
   *
   * @param connection
   * @param id Unique identifier of the travel record member
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Get(":id")
  public async at(
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<ITravelRecordMember> {
    id;
    return typia.random<ITravelRecordMember>();
  }

  /**
   * Update travel record member by ID.
   *
   * Update travel record member information by ID.
   *
   * This endpoint is restricted to admin users to ensure controlled
   * modification.
   *
   * It allows updating key properties except for password hash and deletion
   * timestamp.
   *
   * Validation ensures data integrity and uniqueness of emails and OAuth IDs.
   *
   * Returns the updated member on success.
   *
   * @param connection
   * @param id Unique identifier of the travel record member
   * @param body Updated travel record member data
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Put(":id")
  public async update(
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITravelRecordMember.IUpdate,
  ): Promise<ITravelRecordMember> {
    id;
    body;
    return typia.random<ITravelRecordMember>();
  }

  /**
   * Delete travel record member by ID.
   *
   * Delete (hard) travel record member by ID.
   *
   * Only admin users may perform this operation.
   *
   * Deletion cascades to eliminate related travel records, photos, reviews,
   * friends, and privacy settings of the member.
   *
   * This operation permanently removes the record with no recovery.
   *
   * Proper error responses are sent if ID is invalid or deletion fails.
   *
   * @param connection
   * @param id Unique identifier of the travel record member
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    id;
    return typia.random<void>();
  }
}
