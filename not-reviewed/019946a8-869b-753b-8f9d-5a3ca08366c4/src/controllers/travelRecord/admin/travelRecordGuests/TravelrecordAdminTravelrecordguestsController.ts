import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";

import { IPageITravelRecordTravelRecordGuest } from "../../../../api/structures/IPageITravelRecordTravelRecordGuest";
import { ITravelRecordTravelRecordGuest } from "../../../../api/structures/ITravelRecordTravelRecordGuest";

@Controller("/travelRecord/admin/travelRecordGuests")
export class TravelrecordAdminTravelrecordguestsController {
  /**
   * Retrieve paginated list of travel record guests.
   *
   * Retrieve a filtered and paginated list of travel record guests.
   *
   * This operation allows querying the travel_record_guest table, which
   * stores guest users of the TravelRecord system. Guests represent
   * unauthenticated users who can only browse public content without creating
   * or modifying travel data.
   *
   * The operation supports advanced filtering, sorting, and pagination to
   * efficiently browse guest records.
   *
   * Security considerations include limiting exposure of guest details and
   * ensuring only appropriate users access this data, typically
   * administrative users.
   *
   * Related operations include fetching a single guest by ID (`GET
   * /travelRecordGuests/{id}`) and modifying or deleting a guest record by
   * ID. These operations aid in administrative management and auditing of
   * guests.
   *
   * @param connection
   * @param body Filter and pagination parameters for travel record guests
   *   list retrieval
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: ITravelRecordTravelRecordGuest.IRequest,
  ): Promise<IPageITravelRecordTravelRecordGuest> {
    body;
    return typia.random<IPageITravelRecordTravelRecordGuest>();
  }

  /**
   * Retrieve specific travel record guest information by ID.
   *
   * Retrieve detailed travel record guest information identified by ID.
   *
   * This operation fetches the full record of a guest user from the
   * travel_record_guest table.
   *
   * As guests are unauthenticated users, this operation is primarily used for
   * administrative and audit purposes.
   *
   * Only users with admin role are authorized to perform this operation to
   * protect guest privacy.
   *
   * The operation returns detailed guest record fields including primary key
   * ID and timestamps.
   *
   * No request body is required as the guest is identified via path
   * parameter.
   *
   * @param connection
   * @param id Unique identifier of the target guest user
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Get(":id")
  public async at(
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<ITravelRecordTravelRecordGuest> {
    id;
    return typia.random<ITravelRecordTravelRecordGuest>();
  }

  /**
   * Update specific travel record guest information by ID.
   *
   * Update travel record guest information by ID.
   *
   * This operation allows modification of an existing travel record guest.
   *
   * Guests are unauthenticated users with limited data fields, so updates are
   * restricted to modifiable properties such as timestamps.
   *
   * Only admin users have permissions to perform this update for maintenance
   * and correction purposes.
   *
   * Request body includes the fields allowed for update; response returns the
   * updated guest record.
   *
   * @param connection
   * @param id Unique identifier of the target guest user
   * @param body Update data for the travel record guest
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Put(":id")
  public async update(
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITravelRecordTravelRecordGuest.IUpdate,
  ): Promise<ITravelRecordTravelRecordGuest> {
    id;
    body;
    return typia.random<ITravelRecordTravelRecordGuest>();
  }

  /**
   * Delete travel record guest by ID.
   *
   * This operation permanently removes a guest record from
   * travel_record_guest table.
   *
   * It is intended for administrative purging of guest data to manage system
   * records.
   *
   * Only admin users can execute this operation.
   *
   * No request body is required as identification is via path parameter.
   *
   * After deletion, the guest data is no longer available or recoverable.
   *
   * @param connection
   * @param id Unique identifier of the target guest user
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    id;
    return typia.random<void>();
  }
}
