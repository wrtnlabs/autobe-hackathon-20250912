import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";

import { IPageITravelRecordTravelRecordAdmin } from "../../../../api/structures/IPageITravelRecordTravelRecordAdmin";
import { ITravelRecordTravelRecordAdmin } from "../../../../api/structures/ITravelRecordTravelRecordAdmin";

@Controller("/travelRecord/admin/travelRecordAdmins")
export class TravelrecordAdminTravelrecordadminsController {
  /**
   * Search and retrieve a filtered, paginated list of TravelRecord
   * administrators.
   *
   * Retrieve a paginated and optionally filtered list of TravelRecord
   * administrators. This operation provides comprehensive search capabilities
   * to list admins based on criteria such as email, display name, and
   * creation date.
   *
   * Security aspects include ensuring only authorized users, such as other
   * admins, can access this information due to its sensitive nature.
   *
   * It corresponds directly to the travel_record_admin table in the Prisma
   * schema, exposing pertinent fields while omitting sensitive password
   * hashes in responses.
   *
   * Validation rules ensure incoming search filters conform to expected
   * formats and constraints. Related operations include retrieving individual
   * admin details, updating admin information, and admin account deletion.
   *
   * The response includes paginated admin summaries suitable for
   * administrative user management interfaces.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for TravelRecord
   *   administrators
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Patch()
  public async search(
    @TypedBody()
    body: ITravelRecordTravelRecordAdmin.IRequest,
  ): Promise<IPageITravelRecordTravelRecordAdmin.ISummary> {
    body;
    return typia.random<IPageITravelRecordTravelRecordAdmin.ISummary>();
  }

  /**
   * Get detailed information of a TravelRecord administrator by ID.
   *
   * Retrieve detailed information of a TravelRecord administrator by their
   * unique identifier.
   *
   * This operation accesses the travel_record_admin table in the Prisma
   * schema, which stores admin emails, display names, hashed passwords, and
   * audit timestamps.
   *
   * Security is paramount; only administrators with appropriate roles may
   * query this endpoint.
   *
   * The operation validates the UUID format of the ID parameter and returns
   * the full administrator record excluding password hashes for security
   * reasons.
   *
   * This endpoint is commonly used alongside search, update, and deletion
   * operations for comprehensive admin management.
   *
   * @param connection
   * @param id Unique identifier of the target TravelRecord administrator
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Get(":id")
  public async at(
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<ITravelRecordTravelRecordAdmin> {
    id;
    return typia.random<ITravelRecordTravelRecordAdmin>();
  }

  /**
   * Update TravelRecord administrator information by ID.
   *
   * Update an existing TravelRecord administrator's information by their
   * unique ID.
   *
   * This endpoint operates on the travel_record_admin table in the Prisma
   * schema, allowing modification of fields like email, display name, and
   * password hash.
   *
   * Security measures require the caller to have admin roles and prevent
   * unauthorized changes.
   *
   * The operation validates UUID format of the path parameter and ensures the
   * request body conforms to update rules.
   *
   * It complements other admin management operations and returns the updated
   * admin record for confirmation.
   *
   * @param connection
   * @param id Unique identifier of the TravelRecord administrator to update
   * @param body Update information for the TravelRecord administrator
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Put(":id")
  public async update(
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITravelRecordTravelRecordAdmin.IUpdate,
  ): Promise<ITravelRecordTravelRecordAdmin> {
    id;
    body;
    return typia.random<ITravelRecordTravelRecordAdmin>();
  }

  /**
   * Delete a TravelRecord administrator account by ID.
   *
   * Permanently erase a TravelRecord administrator account by its unique ID.
   *
   * This operation deletes the record from the travel_record_admin table
   * irreversibly.
   *
   * Security is strict, limiting this endpoint to users with admin roles.
   *
   * The UUID of the admin to delete must be valid, and the operation will not
   * produce a response body.
   *
   * Care must be taken to prevent accidental deletion of critical
   * administrator accounts.
   *
   * @param connection
   * @param id Unique identifier of the TravelRecord administrator to delete
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    id;
    return typia.random<void>();
  }
}
