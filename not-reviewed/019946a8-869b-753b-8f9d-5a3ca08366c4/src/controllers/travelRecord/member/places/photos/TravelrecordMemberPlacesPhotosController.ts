import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";

import { ITravelRecordPlacePhoto } from "../../../../../api/structures/ITravelRecordPlacePhoto";
import { IPageITravelRecordPlacePhoto } from "../../../../../api/structures/IPageITravelRecordPlacePhoto";
import { ITravelRecordPhotos } from "../../../../../api/structures/ITravelRecordPhotos";

@Controller("/travelRecord/member/places/:travelRecordPlaceId/photos")
export class TravelrecordMemberPlacesPhotosController {
  /**
   * Upload photos to a travel record place.
   *
   * Upload one or multiple photos for a given travel record place.
   *
   * Photos must comply with accepted formats (JPEG, PNG) and size
   * constraints.
   *
   * The uploaded photo metadata including file URI, file size, and timestamps
   * are saved.
   *
   * The operation returns the details of the newly created photo records.
   *
   * Authorization required for members authorized to modify the place record.
   *
   * @param connection
   * @param travelRecordPlaceId UUID of the travel record place to upload
   *   photos to
   * @param body Photo upload payload with metadata
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post()
  public async create(
    @TypedParam("travelRecordPlaceId")
    travelRecordPlaceId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITravelRecordPlacePhoto.ICreate,
  ): Promise<ITravelRecordPlacePhoto> {
    travelRecordPlaceId;
    body;
    return typia.random<ITravelRecordPlacePhoto>();
  }

  /**
   * List travel record place photos with pagination and filters.
   *
   * Retrieve a filtered, paginated list of photos belonging to a specific
   * travel record place.
   *
   * Photos are listed with essential metadata such as file URI, file size,
   * upload timestamp, and audit timestamps.
   *
   * Only authenticated users with 'member' role authorized to view the place
   * can access this list.
   *
   * Request body includes filtering, pagination, and search criteria.
   *
   * Response body returns a page of photo summaries matching search criteria.
   *
   * @param connection
   * @param travelRecordPlaceId UUID of the travel record place to list photos
   *   for
   * @param body Filtering and pagination for travel record place photos
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Patch()
  public async index(
    @TypedParam("travelRecordPlaceId")
    travelRecordPlaceId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITravelRecordPlacePhoto.IRequest,
  ): Promise<IPageITravelRecordPlacePhoto.ISummary> {
    travelRecordPlaceId;
    body;
    return typia.random<IPageITravelRecordPlacePhoto.ISummary>();
  }

  /**
   * Retrieve photo details by photo and place IDs.
   *
   * Get detailed photo information for a specific photo identified by UUID
   * within a given travel record place.
   *
   * Includes file URI, file size, upload time, and audit timestamps.
   *
   * Authorized to members who have access rights to the place.
   *
   * No request body; returns photo details as response.
   *
   * @param connection
   * @param travelRecordPlaceId UUID of the travel record place that owns the
   *   photo
   * @param id UUID of the photo record
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Get(":id")
  public async at(
    @TypedParam("travelRecordPlaceId")
    travelRecordPlaceId: string & tags.Format<"uuid">,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<ITravelRecordPlacePhoto> {
    travelRecordPlaceId;
    id;
    return typia.random<ITravelRecordPlacePhoto>();
  }

  /**
   * Update photo metadata for specified travel record place photo.
   *
   * This operation allows an authenticated travel record member to update the
   * properties of a specific photo linked to a particular travel record
   * place.
   *
   * It requires the unique identifier of the travel record place and the
   * photo's unique identifier. The update is restricted to editable
   * properties defined in the travel_record_photos table, such as the file
   * URI and file size.
   *
   * Access is secured and only allowed for the owner of the record to prevent
   * unauthorized modifications.
   *
   * The operation updates the photo metadata while preserving soft deletion
   * states and timestamps.
   *
   * Upon success, updated photo information is returned.
   *
   * @param connection
   * @param travelRecordPlaceId Unique identifier of the travel record place
   * @param id Unique identifier of the photo to update
   * @param body Photo update information including file URI and file size
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Put(":id")
  public async updatePhotoMetadata(
    @TypedParam("travelRecordPlaceId")
    travelRecordPlaceId: string & tags.Format<"uuid">,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITravelRecordPhotos.IUpdate,
  ): Promise<ITravelRecordPhotos> {
    travelRecordPlaceId;
    id;
    body;
    return typia.random<ITravelRecordPhotos>();
  }

  /**
   * Delete a photo from a travel record place.
   *
   * This operation deletes a specified photo belonging to a given travel
   * record place.
   *
   * The photo to be deleted is identified by the place ID and photo ID
   * parameters.
   *
   * Only the authenticated owner of the photo can perform this deletion.
   *
   * The deletion is permanent, removing the photo record entirely from the
   * system.
   *
   * Response confirms successful deletion with no content returned.
   *
   * Attempts to delete non-existing or unauthorized resources result in
   * appropriate error responses.
   *
   * @param connection
   * @param travelRecordPlaceId Unique identifier of the travel record place
   * @param id Unique identifier of the photo to delete
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Delete(":id")
  public async erasePhoto(
    @TypedParam("travelRecordPlaceId")
    travelRecordPlaceId: string & tags.Format<"uuid">,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    travelRecordPlaceId;
    id;
    return typia.random<void>();
  }
}
