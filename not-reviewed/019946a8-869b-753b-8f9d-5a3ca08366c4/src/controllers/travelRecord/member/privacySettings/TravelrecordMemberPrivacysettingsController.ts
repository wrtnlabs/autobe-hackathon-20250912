import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";

@Controller("/travelRecord/member/privacySettings/:id")
export class TravelrecordMemberPrivacysettingsController {
  /**
   * Delete a privacy setting record by ID.
   *
   * This API endpoint allows authorized authenticated members or admins to
   * permanently delete a specific privacy setting by its unique identifier
   * from the travel_record_privacy_settings table.
   *
   * The table stores privacy configurations controlling visibility of travel
   * records, enabling users to restrict access to their data as 'public' or
   * 'private'.
   *
   * The operation requires the 'id' path parameter in UUID format specifying
   * the privacy setting to be deleted.
   *
   * Security checks ensure that only the owner member or an administrator can
   * perform this deletion.
   *
   * If the provided 'id' does not exist or the caller lacks permissions, the
   * API will respond with appropriate error messages and status codes.
   *
   * This operation does not require any request body nor returns a response
   * body.
   *
   * Related operations include creation, retrieval, and updating of privacy
   * settings.
   *
   * @param connection
   * @param id Unique identifier of the privacy setting record to delete
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Delete()
  public async erase(
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    id;
    return typia.random<void>();
  }
}
