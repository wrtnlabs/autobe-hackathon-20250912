import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITravelRecordReview } from "../../../../structures/ITravelRecordReview";
import { ITravelRecordReviews } from "../../../../structures/ITravelRecordReviews";
import { IPageITravelRecordReviews } from "../../../../structures/IPageITravelRecordReviews";

/**
 * Create review record for a travel place.
 *
 * Create a new review for a specific travel record place by an authenticated
 * member. The review must include textual content and a star rating between 1
 * and 5.
 *
 * The privacy setting defines visibility ('public' or 'private') and defaults
 * to 'public' if not specified.
 *
 * Security measures restrict creation of reviews only to authenticated members.
 * Validation ensures that the review text is non-empty and the star rating is
 * within the allowed range.
 *
 * This operation relates directly to the travel_record_reviews table which
 * holds all review information linked to travel_record_places and
 * travel_record_member.
 *
 * In case of input validation failure or authorization issues, appropriate
 * error responses are returned.
 *
 * @param props.connection
 * @param props.body Creation info of the review
 * @path /travelRecord/member/reviews
 * @accessor api.functional.travelRecord.member.reviews.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation info of the review */
    body: ITravelRecordReview.ICreate;
  };
  export type Body = ITravelRecordReview.ICreate;
  export type Response = ITravelRecordReview;

  export const METADATA = {
    method: "POST",
    path: "/travelRecord/member/reviews",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/travelRecord/member/reviews";
  export const random = (): ITravelRecordReview =>
    typia.random<ITravelRecordReview>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve filtered, paginated list of travel record reviews.
 *
 * Retrieve a paginated list of travel record place reviews, supporting advanced
 * filtering by place ID, member ID, privacy settings, star rating ranges, and
 * review text matching.
 *
 * The operation supports pagination parameters and sorting order.
 *
 * Access is authorized to authenticated members and respects privacy settings
 * on each review.
 *
 * This operation helps clients search reviews comprehensively with precise
 * control over filters.
 *
 * Results include summarized review information optimized for list display.
 *
 * @param props.connection
 * @param props.body Filtering and pagination criteria for review search
 * @path /travelRecord/member/reviews
 * @accessor api.functional.travelRecord.member.reviews.searchReviews
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function searchReviews(
  connection: IConnection,
  props: searchReviews.Props,
): Promise<searchReviews.Response> {
  return true === connection.simulate
    ? searchReviews.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...searchReviews.METADATA,
          path: searchReviews.path(),
          status: null,
        },
        props.body,
      );
}
export namespace searchReviews {
  export type Props = {
    /** Filtering and pagination criteria for review search */
    body: ITravelRecordReviews.IRequest;
  };
  export type Body = ITravelRecordReviews.IRequest;
  export type Response = IPageITravelRecordReviews.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/travelRecord/member/reviews",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/travelRecord/member/reviews";
  export const random = (): IPageITravelRecordReviews.ISummary =>
    typia.random<IPageITravelRecordReviews.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: searchReviews.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: searchReviews.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information of a specific travel record review.
 *
 * Retrieve detailed information of a single travel record review by its unique
 * identifier.
 *
 * The review includes textual content, star rating, reviewer information, and
 * privacy settings.
 *
 * Access is granted to authenticated members respecting record privacy.
 *
 * The operation returns full review details for display or further processing.
 *
 * @param props.connection
 * @param props.id Unique identifier of the travel record review
 * @path /travelRecord/member/reviews/:id
 * @accessor api.functional.travelRecord.member.reviews.atReview
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atReview(
  connection: IConnection,
  props: atReview.Props,
): Promise<atReview.Response> {
  return true === connection.simulate
    ? atReview.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atReview.METADATA,
          path: atReview.path(props),
          status: null,
        },
      );
}
export namespace atReview {
  export type Props = {
    /** Unique identifier of the travel record review */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ITravelRecordReviews;

  export const METADATA = {
    method: "GET",
    path: "/travelRecord/member/reviews/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/travelRecord/member/reviews/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITravelRecordReviews =>
    typia.random<ITravelRecordReviews>();
  export const simulate = (
    connection: IConnection,
    props: atReview.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atReview.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update review record by ID.
 *
 * Update an existing review identified by its ID. The review must contain valid
 * text and a star rating from 1 to 5.
 *
 * Only authenticated members who own the review are authorized to update it.
 *
 * The operation ensures data integrity by validating input and enforcing
 * ownership restrictions.
 *
 * The request path includes the review ID as a parameter and the request body
 * contains updated review data.
 *
 * If the review ID is invalid or does not exist, an error response is provided.
 *
 * @param props.connection
 * @param props.id Unique identifier of the review to be updated
 * @param props.body Update info of the review
 * @path /travelRecord/member/reviews/:id
 * @accessor api.functional.travelRecord.member.reviews.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the review to be updated */
    id: string & tags.Format<"uuid">;

    /** Update info of the review */
    body: ITravelRecordReview.IUpdate;
  };
  export type Body = ITravelRecordReview.IUpdate;
  export type Response = ITravelRecordReview;

  export const METADATA = {
    method: "PUT",
    path: "/travelRecord/member/reviews/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/travelRecord/member/reviews/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITravelRecordReview =>
    typia.random<ITravelRecordReview>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete review record by ID.
 *
 * Permanently delete a review identified by ID from the system. This action is
 * irreversible.
 *
 * Only authenticated members with ownership privileges can delete the review.
 *
 * The path parameter specifies the review's unique identifier in UUID format.
 *
 * Successful deletion results in no content returned.
 *
 * If the review ID does not exist or the user is unauthorized, an appropriate
 * error is returned.
 *
 * @param props.connection
 * @param props.id Unique identifier of the review to delete
 * @path /travelRecord/member/reviews/:id
 * @accessor api.functional.travelRecord.member.reviews.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the review to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/travelRecord/member/reviews/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/travelRecord/member/reviews/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
