import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITravelRecordPlaces } from "../../../../structures/ITravelRecordPlaces";
import { IPageITravelRecordPlaces } from "../../../../structures/IPageITravelRecordPlaces";
export * as photos from "./photos/index";

/**
 * Create a new travel record place associated with the authenticated member.
 * This operation validates input data for required geographic coordinates,
 * visit date, place name, and Google place ID.
 *
 * Only authenticated users may create new places. Duplicate place records with
 * same member ID, coordinates, and visit date are prevented by unique
 * constraints.
 *
 * On success, the new place record is returned with full details. Errors
 * include validation failures or unauthorized access.
 *
 * This operation supports user workflows to log travel history into the system.
 *
 * @param props.connection
 * @param props.body Travel record place creation data
 * @path /travelRecord/member/places
 * @accessor api.functional.travelRecord.member.places.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Travel record place creation data */
    body: ITravelRecordPlaces.ICreate;
  };
  export type Body = ITravelRecordPlaces.ICreate;
  export type Response = ITravelRecordPlaces;

  export const METADATA = {
    method: "POST",
    path: "/travelRecord/member/places",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/travelRecord/member/places";
  export const random = (): ITravelRecordPlaces =>
    typia.random<ITravelRecordPlaces>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of travel record places.
 *
 * Retrieve a filtered and paginated list of travel record places from the
 * system's database. This operation supports advanced query parameters such as
 * location bounding boxes, date ranges, and text matching via search filters
 * operating on travel_record_places records.
 *
 * Security considerations enforce that only authenticated members with "member"
 * role can retrieve lists of places. Public access is not granted to this
 * operation due to privacy and data sensitivity.
 *
 * The operation maps directly to the travel_record_places table as defined in
 * the Prisma schema, which includes fields like latitude, longitude,
 * visit_date, place_name, and google_place_id. All response data reflects only
 * existing places with respect to soft deletion (deleted_at not null means
 * excluded).
 *
 * Validation ensures input parameters meet expected formats and types.
 * Pagination and sorting parameters control response size and order. Errors in
 * input formats or unauthorized access result in appropriate error responses.
 *
 * Related operations that might be used with this include viewing details of a
 * single place (GET /places/{id}), creating new place records (POST /places),
 * and updating existing ones (PUT /places/{id}).
 *
 * This operation does not support deleting place records as per system design
 * constraints.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for filtering
 *   travel record places
 * @path /travelRecord/member/places
 * @accessor api.functional.travelRecord.member.places.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for filtering travel record
     * places
     */
    body: ITravelRecordPlaces.IRequest;
  };
  export type Body = ITravelRecordPlaces.IRequest;
  export type Response = IPageITravelRecordPlaces.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/travelRecord/member/places",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/travelRecord/member/places";
  export const random = (): IPageITravelRecordPlaces.ISummary =>
    typia.random<IPageITravelRecordPlaces.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information for a travel record place by ID.
 *
 * Retrieve detailed information of a specific travel record place by its unique
 * ID. This operation queries the travel_record_places table and returns
 * complete place data including latitude, longitude, visit date, place name,
 * and Google place ID.
 *
 * Access is limited to authenticated users only, ensuring data privacy. Input
 * validation ensures the ID parameter conforms to UUID format and corresponds
 * to an existing record.
 *
 * Errors such as record not found or unauthorized access return appropriate
 * HTTP status codes.
 *
 * No creation or modification is performed by this operation.
 *
 * @param props.connection
 * @param props.id Unique identifier of the travel record place
 * @path /travelRecord/member/places/:id
 * @accessor api.functional.travelRecord.member.places.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the travel record place */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ITravelRecordPlaces;

  export const METADATA = {
    method: "GET",
    path: "/travelRecord/member/places/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/travelRecord/member/places/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITravelRecordPlaces =>
    typia.random<ITravelRecordPlaces>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing travel record place by ID.
 *
 * Update an existing travel record place by its ID. This operation allows
 * modifying fields such as latitude, longitude, visit date, place name, and
 * Google place ID.
 *
 * Authorized users can update their place records to correct errors or add
 * details. Input data is validated for correctness and completeness.
 *
 * The response returns the modified place record with current values. Access
 * control restricts update operations to the owner member.
 *
 * Errors include record not found, validation failure, and unauthorized access.
 *
 * @param props.connection
 * @param props.id Unique identifier of the travel record place
 * @param props.body Travel record place update data
 * @path /travelRecord/member/places/:id
 * @accessor api.functional.travelRecord.member.places.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the travel record place */
    id: string & tags.Format<"uuid">;

    /** Travel record place update data */
    body: ITravelRecordPlaces.IUpdate;
  };
  export type Body = ITravelRecordPlaces.IUpdate;
  export type Response = ITravelRecordPlaces;

  export const METADATA = {
    method: "PUT",
    path: "/travelRecord/member/places/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/travelRecord/member/places/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITravelRecordPlaces =>
    typia.random<ITravelRecordPlaces>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a travel record place by ID.
 *
 * Delete a specific travel record place identified by its UUID.
 *
 * This operation fully removes the place record and its associated photos and
 * reviews from the system permanently.
 *
 * Only authenticated members can execute this deletion. If the place ID does
 * not exist or the user lacks proper authorization, an error is returned.
 *
 * This is a hard delete operation with no soft delete functionality.
 *
 * No request body or response content is included.
 *
 * @param props.connection
 * @param props.id UUID of the travel record place to delete
 * @path /travelRecord/member/places/:id
 * @accessor api.functional.travelRecord.member.places.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of the travel record place to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/travelRecord/member/places/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/travelRecord/member/places/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
