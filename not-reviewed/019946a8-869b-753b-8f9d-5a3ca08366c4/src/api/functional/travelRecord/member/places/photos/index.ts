import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITravelRecordPlacePhoto } from "../../../../../structures/ITravelRecordPlacePhoto";
import { IPageITravelRecordPlacePhoto } from "../../../../../structures/IPageITravelRecordPlacePhoto";
import { ITravelRecordPhotos } from "../../../../../structures/ITravelRecordPhotos";

/**
 * Upload photos to a travel record place.
 *
 * Upload one or multiple photos for a given travel record place.
 *
 * Photos must comply with accepted formats (JPEG, PNG) and size constraints.
 *
 * The uploaded photo metadata including file URI, file size, and timestamps are
 * saved.
 *
 * The operation returns the details of the newly created photo records.
 *
 * Authorization required for members authorized to modify the place record.
 *
 * @param props.connection
 * @param props.travelRecordPlaceId UUID of the travel record place to upload
 *   photos to
 * @param props.body Photo upload payload with metadata
 * @path /travelRecord/member/places/:travelRecordPlaceId/photos
 * @accessor api.functional.travelRecord.member.places.photos.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** UUID of the travel record place to upload photos to */
    travelRecordPlaceId: string & tags.Format<"uuid">;

    /** Photo upload payload with metadata */
    body: ITravelRecordPlacePhoto.ICreate;
  };
  export type Body = ITravelRecordPlacePhoto.ICreate;
  export type Response = ITravelRecordPlacePhoto;

  export const METADATA = {
    method: "POST",
    path: "/travelRecord/member/places/:travelRecordPlaceId/photos",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/travelRecord/member/places/${encodeURIComponent(props.travelRecordPlaceId ?? "null")}/photos`;
  export const random = (): ITravelRecordPlacePhoto =>
    typia.random<ITravelRecordPlacePhoto>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("travelRecordPlaceId")(() =>
        typia.assert(props.travelRecordPlaceId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List travel record place photos with pagination and filters.
 *
 * Retrieve a filtered, paginated list of photos belonging to a specific travel
 * record place.
 *
 * Photos are listed with essential metadata such as file URI, file size, upload
 * timestamp, and audit timestamps.
 *
 * Only authenticated users with 'member' role authorized to view the place can
 * access this list.
 *
 * Request body includes filtering, pagination, and search criteria.
 *
 * Response body returns a page of photo summaries matching search criteria.
 *
 * @param props.connection
 * @param props.travelRecordPlaceId UUID of the travel record place to list
 *   photos for
 * @param props.body Filtering and pagination for travel record place photos
 * @path /travelRecord/member/places/:travelRecordPlaceId/photos
 * @accessor api.functional.travelRecord.member.places.photos.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** UUID of the travel record place to list photos for */
    travelRecordPlaceId: string & tags.Format<"uuid">;

    /** Filtering and pagination for travel record place photos */
    body: ITravelRecordPlacePhoto.IRequest;
  };
  export type Body = ITravelRecordPlacePhoto.IRequest;
  export type Response = IPageITravelRecordPlacePhoto.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/travelRecord/member/places/:travelRecordPlaceId/photos",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/travelRecord/member/places/${encodeURIComponent(props.travelRecordPlaceId ?? "null")}/photos`;
  export const random = (): IPageITravelRecordPlacePhoto.ISummary =>
    typia.random<IPageITravelRecordPlacePhoto.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("travelRecordPlaceId")(() =>
        typia.assert(props.travelRecordPlaceId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve photo details by photo and place IDs.
 *
 * Get detailed photo information for a specific photo identified by UUID within
 * a given travel record place.
 *
 * Includes file URI, file size, upload time, and audit timestamps.
 *
 * Authorized to members who have access rights to the place.
 *
 * No request body; returns photo details as response.
 *
 * @param props.connection
 * @param props.travelRecordPlaceId UUID of the travel record place that owns
 *   the photo
 * @param props.id UUID of the photo record
 * @path /travelRecord/member/places/:travelRecordPlaceId/photos/:id
 * @accessor api.functional.travelRecord.member.places.photos.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** UUID of the travel record place that owns the photo */
    travelRecordPlaceId: string & tags.Format<"uuid">;

    /** UUID of the photo record */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ITravelRecordPlacePhoto;

  export const METADATA = {
    method: "GET",
    path: "/travelRecord/member/places/:travelRecordPlaceId/photos/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/travelRecord/member/places/${encodeURIComponent(props.travelRecordPlaceId ?? "null")}/photos/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITravelRecordPlacePhoto =>
    typia.random<ITravelRecordPlacePhoto>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("travelRecordPlaceId")(() =>
        typia.assert(props.travelRecordPlaceId),
      );
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update photo metadata for specified travel record place photo.
 *
 * This operation allows an authenticated travel record member to update the
 * properties of a specific photo linked to a particular travel record place.
 *
 * It requires the unique identifier of the travel record place and the photo's
 * unique identifier. The update is restricted to editable properties defined in
 * the travel_record_photos table, such as the file URI and file size.
 *
 * Access is secured and only allowed for the owner of the record to prevent
 * unauthorized modifications.
 *
 * The operation updates the photo metadata while preserving soft deletion
 * states and timestamps.
 *
 * Upon success, updated photo information is returned.
 *
 * @param props.connection
 * @param props.travelRecordPlaceId Unique identifier of the travel record place
 * @param props.id Unique identifier of the photo to update
 * @param props.body Photo update information including file URI and file size
 * @path /travelRecord/member/places/:travelRecordPlaceId/photos/:id
 * @accessor api.functional.travelRecord.member.places.photos.updatePhotoMetadata
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updatePhotoMetadata(
  connection: IConnection,
  props: updatePhotoMetadata.Props,
): Promise<updatePhotoMetadata.Response> {
  return true === connection.simulate
    ? updatePhotoMetadata.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updatePhotoMetadata.METADATA,
          path: updatePhotoMetadata.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updatePhotoMetadata {
  export type Props = {
    /** Unique identifier of the travel record place */
    travelRecordPlaceId: string & tags.Format<"uuid">;

    /** Unique identifier of the photo to update */
    id: string & tags.Format<"uuid">;

    /** Photo update information including file URI and file size */
    body: ITravelRecordPhotos.IUpdate;
  };
  export type Body = ITravelRecordPhotos.IUpdate;
  export type Response = ITravelRecordPhotos;

  export const METADATA = {
    method: "PUT",
    path: "/travelRecord/member/places/:travelRecordPlaceId/photos/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/travelRecord/member/places/${encodeURIComponent(props.travelRecordPlaceId ?? "null")}/photos/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITravelRecordPhotos =>
    typia.random<ITravelRecordPhotos>();
  export const simulate = (
    connection: IConnection,
    props: updatePhotoMetadata.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updatePhotoMetadata.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("travelRecordPlaceId")(() =>
        typia.assert(props.travelRecordPlaceId),
      );
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a photo from a travel record place.
 *
 * This operation deletes a specified photo belonging to a given travel record
 * place.
 *
 * The photo to be deleted is identified by the place ID and photo ID
 * parameters.
 *
 * Only the authenticated owner of the photo can perform this deletion.
 *
 * The deletion is permanent, removing the photo record entirely from the
 * system.
 *
 * Response confirms successful deletion with no content returned.
 *
 * Attempts to delete non-existing or unauthorized resources result in
 * appropriate error responses.
 *
 * @param props.connection
 * @param props.travelRecordPlaceId Unique identifier of the travel record place
 * @param props.id Unique identifier of the photo to delete
 * @path /travelRecord/member/places/:travelRecordPlaceId/photos/:id
 * @accessor api.functional.travelRecord.member.places.photos.erasePhoto
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erasePhoto(
  connection: IConnection,
  props: erasePhoto.Props,
): Promise<void> {
  return true === connection.simulate
    ? erasePhoto.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erasePhoto.METADATA,
          path: erasePhoto.path(props),
          status: null,
        },
      );
}
export namespace erasePhoto {
  export type Props = {
    /** Unique identifier of the travel record place */
    travelRecordPlaceId: string & tags.Format<"uuid">;

    /** Unique identifier of the photo to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/travelRecord/member/places/:travelRecordPlaceId/photos/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/travelRecord/member/places/${encodeURIComponent(props.travelRecordPlaceId ?? "null")}/photos/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erasePhoto.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erasePhoto.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("travelRecordPlaceId")(() =>
        typia.assert(props.travelRecordPlaceId),
      );
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
