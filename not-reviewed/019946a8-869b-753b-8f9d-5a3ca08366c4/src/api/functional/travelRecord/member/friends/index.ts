import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITravelRecordFriend } from "../../../../structures/ITravelRecordFriend";
import { IPageITravelRecordFriend } from "../../../../structures/IPageITravelRecordFriend";

/**
 * Create a new friend request.
 *
 * This POST operation allows a member user to send a friend request to another
 * member, establishing a pending social connection in the backend. The request
 * body includes necessary details such as the IDs of the requesting member and
 * the potential friend.
 *
 * The system validates the request to avoid duplicates or conflicts with
 * existing relationships. Upon successful creation, a friend record with status
 * 'pending' is created, enabling the recipient to accept or reject the
 * connection later.
 *
 * This operation corresponds to the travel_record_friends Prisma database
 * entity that manages relationships, ensuring data integrity and enforcing
 * business rules. Errors occur if input data is invalid or conflicts exist.
 *
 * @param props.connection
 * @param props.body Information required to create a friend request
 * @path /travelRecord/member/friends
 * @accessor api.functional.travelRecord.member.friends.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information required to create a friend request */
    body: ITravelRecordFriend.ICreate;
  };
  export type Body = ITravelRecordFriend.ICreate;
  export type Response = ITravelRecordFriend;

  export const METADATA = {
    method: "POST",
    path: "/travelRecord/member/friends",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/travelRecord/member/friends";
  export const random = (): ITravelRecordFriend =>
    typia.random<ITravelRecordFriend>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve member's friend list.
 *
 * Retrieve a paginated and filtered list of friendships of the authenticated
 * member. This operation supports complex search, filtering, sorting, and
 * pagination.
 *
 * Only authenticated members can access their friend relationships.
 *
 * The response includes summarized friendship information with statuses like
 * pending, accepted, or rejected.
 *
 * Supports filtering by status and friend member ID in the request body.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for friendship
 *   filtering
 * @path /travelRecord/member/friends
 * @accessor api.functional.travelRecord.member.friends.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for friendship filtering */
    body: ITravelRecordFriend.IRequest;
  };
  export type Body = ITravelRecordFriend.IRequest;
  export type Response = IPageITravelRecordFriend.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/travelRecord/member/friends",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/travelRecord/member/friends";
  export const random = (): IPageITravelRecordFriend.ISummary =>
    typia.random<IPageITravelRecordFriend.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details of a specific friend relationship by ID.
 *
 * This GET operation fetches comprehensive information about a friendship
 * established between two members in the travel record system. Each friend
 * record encapsulates details such as the requesting member ID, the friend
 * member ID, the current status of the friendship (pending, accepted, or
 * rejected), and timestamps indicating creation and last update times.
 *
 * Users must provide the unique identifier of the friend record in UUID format
 * as a path parameter to retrieve this detailed friendship information. The
 * operation enforces access governance to prevent unauthorized viewing of
 * friendships that should remain restricted.
 *
 * The returned data reflects the current state of a friendship, allowing
 * clients to display friend request statuses or manage the social graph. The
 * operation corresponds directly to the travel_record_friends database table,
 * integrating all columns defined therein.
 *
 * Errors are returned if the ID is invalid, missing, or if the friend record
 * does not exist or has been soft deleted.
 *
 * @param props.connection
 * @param props.id Unique identifier of the friend relationship
 * @path /travelRecord/member/friends/:id
 * @accessor api.functional.travelRecord.member.friends.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the friend relationship */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ITravelRecordFriend;

  export const METADATA = {
    method: "GET",
    path: "/travelRecord/member/friends/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/travelRecord/member/friends/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITravelRecordFriend =>
    typia.random<ITravelRecordFriend>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a friend relationship by ID.
 *
 * This PUT operation permits updating the details of a specific friendship
 * record, identified by its unique ID, in the travel record backend system.
 * Typical updates involve changing the friendship status (e.g., from 'pending'
 * to 'accepted' or 'rejected'), allowing members to confirm or deny friend
 * requests.
 *
 * The request must include the UUID identifier of the friend record in the path
 * and the updated information in the body. Only authorized users can perform
 * this update to maintain integrity of social connections.
 *
 * This operation closely maps to the travel_record_friends table in the Prisma
 * schema, applying changes to existing records with validation to prevent
 * invalid states or unauthorized modifications.
 *
 * Errors occur if the friend record is missing, the ID is malformed, or the
 * update data is invalid.
 *
 * @param props.connection
 * @param props.id Unique identifier of the friend relationship to update
 * @param props.body Friend relationship update data
 * @path /travelRecord/member/friends/:id
 * @accessor api.functional.travelRecord.member.friends.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the friend relationship to update */
    id: string & tags.Format<"uuid">;

    /** Friend relationship update data */
    body: ITravelRecordFriend.IUpdate;
  };
  export type Body = ITravelRecordFriend.IUpdate;
  export type Response = ITravelRecordFriend;

  export const METADATA = {
    method: "PUT",
    path: "/travelRecord/member/friends/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/travelRecord/member/friends/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITravelRecordFriend =>
    typia.random<ITravelRecordFriend>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete (soft delete) a friend relationship by ID.
 *
 * This DELETE operation removes a friend relationship record from the system
 * identified by its unique ID. The operation performs a soft deletion by
 * marking the record as deleted with a timestamp, preserving the data for
 * potential recovery.
 *
 * The member initiating the deletion must be authorized to manage the friend
 * relationship. The ID path parameter must be a valid UUID specifying the
 * friend record.
 *
 * Post-deletion, the friendship relationship is considered terminated and no
 * longer visible in friend lists.
 *
 * This corresponds directly to the travel_record_friends Prisma entity.
 *
 * Errors occur if the ID path parameter is invalid or the record is not found.
 *
 * @param props.connection
 * @param props.id Unique identifier of the friend relationship to delete
 * @path /travelRecord/member/friends/:id
 * @accessor api.functional.travelRecord.member.friends.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the friend relationship to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/travelRecord/member/friends/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/travelRecord/member/friends/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
