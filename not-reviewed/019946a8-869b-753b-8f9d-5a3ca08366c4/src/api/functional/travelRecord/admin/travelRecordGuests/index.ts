import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITravelRecordTravelRecordGuest } from "../../../../structures/ITravelRecordTravelRecordGuest";
import { IPageITravelRecordTravelRecordGuest } from "../../../../structures/IPageITravelRecordTravelRecordGuest";

/**
 * Retrieve paginated list of travel record guests.
 *
 * Retrieve a filtered and paginated list of travel record guests.
 *
 * This operation allows querying the travel_record_guest table, which stores
 * guest users of the TravelRecord system. Guests represent unauthenticated
 * users who can only browse public content without creating or modifying travel
 * data.
 *
 * The operation supports advanced filtering, sorting, and pagination to
 * efficiently browse guest records.
 *
 * Security considerations include limiting exposure of guest details and
 * ensuring only appropriate users access this data, typically administrative
 * users.
 *
 * Related operations include fetching a single guest by ID (`GET
 * /travelRecordGuests/{id}`) and modifying or deleting a guest record by ID.
 * These operations aid in administrative management and auditing of guests.
 *
 * @param props.connection
 * @param props.body Filter and pagination parameters for travel record guests
 *   list retrieval
 * @path /travelRecord/admin/travelRecordGuests
 * @accessor api.functional.travelRecord.admin.travelRecordGuests.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Filter and pagination parameters for travel record guests list
     * retrieval
     */
    body: ITravelRecordTravelRecordGuest.IRequest;
  };
  export type Body = ITravelRecordTravelRecordGuest.IRequest;
  export type Response = IPageITravelRecordTravelRecordGuest;

  export const METADATA = {
    method: "PATCH",
    path: "/travelRecord/admin/travelRecordGuests",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/travelRecord/admin/travelRecordGuests";
  export const random = (): IPageITravelRecordTravelRecordGuest =>
    typia.random<IPageITravelRecordTravelRecordGuest>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve specific travel record guest information by ID.
 *
 * Retrieve detailed travel record guest information identified by ID.
 *
 * This operation fetches the full record of a guest user from the
 * travel_record_guest table.
 *
 * As guests are unauthenticated users, this operation is primarily used for
 * administrative and audit purposes.
 *
 * Only users with admin role are authorized to perform this operation to
 * protect guest privacy.
 *
 * The operation returns detailed guest record fields including primary key ID
 * and timestamps.
 *
 * No request body is required as the guest is identified via path parameter.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target guest user
 * @path /travelRecord/admin/travelRecordGuests/:id
 * @accessor api.functional.travelRecord.admin.travelRecordGuests.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target guest user */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ITravelRecordTravelRecordGuest;

  export const METADATA = {
    method: "GET",
    path: "/travelRecord/admin/travelRecordGuests/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/travelRecord/admin/travelRecordGuests/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITravelRecordTravelRecordGuest =>
    typia.random<ITravelRecordTravelRecordGuest>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update specific travel record guest information by ID.
 *
 * Update travel record guest information by ID.
 *
 * This operation allows modification of an existing travel record guest.
 *
 * Guests are unauthenticated users with limited data fields, so updates are
 * restricted to modifiable properties such as timestamps.
 *
 * Only admin users have permissions to perform this update for maintenance and
 * correction purposes.
 *
 * Request body includes the fields allowed for update; response returns the
 * updated guest record.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target guest user
 * @param props.body Update data for the travel record guest
 * @path /travelRecord/admin/travelRecordGuests/:id
 * @accessor api.functional.travelRecord.admin.travelRecordGuests.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target guest user */
    id: string & tags.Format<"uuid">;

    /** Update data for the travel record guest */
    body: ITravelRecordTravelRecordGuest.IUpdate;
  };
  export type Body = ITravelRecordTravelRecordGuest.IUpdate;
  export type Response = ITravelRecordTravelRecordGuest;

  export const METADATA = {
    method: "PUT",
    path: "/travelRecord/admin/travelRecordGuests/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/travelRecord/admin/travelRecordGuests/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITravelRecordTravelRecordGuest =>
    typia.random<ITravelRecordTravelRecordGuest>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete travel record guest by ID.
 *
 * This operation permanently removes a guest record from travel_record_guest
 * table.
 *
 * It is intended for administrative purging of guest data to manage system
 * records.
 *
 * Only admin users can execute this operation.
 *
 * No request body is required as identification is via path parameter.
 *
 * After deletion, the guest data is no longer available or recoverable.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target guest user
 * @path /travelRecord/admin/travelRecordGuests/:id
 * @accessor api.functional.travelRecord.admin.travelRecordGuests.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target guest user */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/travelRecord/admin/travelRecordGuests/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/travelRecord/admin/travelRecordGuests/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
