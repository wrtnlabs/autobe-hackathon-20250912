import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITravelRecordTravelRecordAdmin } from "../../../../structures/ITravelRecordTravelRecordAdmin";
import { IPageITravelRecordTravelRecordAdmin } from "../../../../structures/IPageITravelRecordTravelRecordAdmin";

/**
 * Search and retrieve a filtered, paginated list of TravelRecord
 * administrators.
 *
 * Retrieve a paginated and optionally filtered list of TravelRecord
 * administrators. This operation provides comprehensive search capabilities to
 * list admins based on criteria such as email, display name, and creation
 * date.
 *
 * Security aspects include ensuring only authorized users, such as other
 * admins, can access this information due to its sensitive nature.
 *
 * It corresponds directly to the travel_record_admin table in the Prisma
 * schema, exposing pertinent fields while omitting sensitive password hashes in
 * responses.
 *
 * Validation rules ensure incoming search filters conform to expected formats
 * and constraints. Related operations include retrieving individual admin
 * details, updating admin information, and admin account deletion.
 *
 * The response includes paginated admin summaries suitable for administrative
 * user management interfaces.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for TravelRecord
 *   administrators
 * @path /travelRecord/admin/travelRecordAdmins
 * @accessor api.functional.travelRecord.admin.travelRecordAdmins.search
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /**
     * Search criteria and pagination parameters for TravelRecord
     * administrators
     */
    body: ITravelRecordTravelRecordAdmin.IRequest;
  };
  export type Body = ITravelRecordTravelRecordAdmin.IRequest;
  export type Response = IPageITravelRecordTravelRecordAdmin.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/travelRecord/admin/travelRecordAdmins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/travelRecord/admin/travelRecordAdmins";
  export const random = (): IPageITravelRecordTravelRecordAdmin.ISummary =>
    typia.random<IPageITravelRecordTravelRecordAdmin.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information of a TravelRecord administrator by ID.
 *
 * Retrieve detailed information of a TravelRecord administrator by their unique
 * identifier.
 *
 * This operation accesses the travel_record_admin table in the Prisma schema,
 * which stores admin emails, display names, hashed passwords, and audit
 * timestamps.
 *
 * Security is paramount; only administrators with appropriate roles may query
 * this endpoint.
 *
 * The operation validates the UUID format of the ID parameter and returns the
 * full administrator record excluding password hashes for security reasons.
 *
 * This endpoint is commonly used alongside search, update, and deletion
 * operations for comprehensive admin management.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target TravelRecord administrator
 * @path /travelRecord/admin/travelRecordAdmins/:id
 * @accessor api.functional.travelRecord.admin.travelRecordAdmins.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target TravelRecord administrator */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ITravelRecordTravelRecordAdmin;

  export const METADATA = {
    method: "GET",
    path: "/travelRecord/admin/travelRecordAdmins/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/travelRecord/admin/travelRecordAdmins/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITravelRecordTravelRecordAdmin =>
    typia.random<ITravelRecordTravelRecordAdmin>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update TravelRecord administrator information by ID.
 *
 * Update an existing TravelRecord administrator's information by their unique
 * ID.
 *
 * This endpoint operates on the travel_record_admin table in the Prisma schema,
 * allowing modification of fields like email, display name, and password hash.
 *
 * Security measures require the caller to have admin roles and prevent
 * unauthorized changes.
 *
 * The operation validates UUID format of the path parameter and ensures the
 * request body conforms to update rules.
 *
 * It complements other admin management operations and returns the updated
 * admin record for confirmation.
 *
 * @param props.connection
 * @param props.id Unique identifier of the TravelRecord administrator to update
 * @param props.body Update information for the TravelRecord administrator
 * @path /travelRecord/admin/travelRecordAdmins/:id
 * @accessor api.functional.travelRecord.admin.travelRecordAdmins.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the TravelRecord administrator to update */
    id: string & tags.Format<"uuid">;

    /** Update information for the TravelRecord administrator */
    body: ITravelRecordTravelRecordAdmin.IUpdate;
  };
  export type Body = ITravelRecordTravelRecordAdmin.IUpdate;
  export type Response = ITravelRecordTravelRecordAdmin;

  export const METADATA = {
    method: "PUT",
    path: "/travelRecord/admin/travelRecordAdmins/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/travelRecord/admin/travelRecordAdmins/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITravelRecordTravelRecordAdmin =>
    typia.random<ITravelRecordTravelRecordAdmin>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a TravelRecord administrator account by ID.
 *
 * Permanently erase a TravelRecord administrator account by its unique ID.
 *
 * This operation deletes the record from the travel_record_admin table
 * irreversibly.
 *
 * Security is strict, limiting this endpoint to users with admin roles.
 *
 * The UUID of the admin to delete must be valid, and the operation will not
 * produce a response body.
 *
 * Care must be taken to prevent accidental deletion of critical administrator
 * accounts.
 *
 * @param props.connection
 * @param props.id Unique identifier of the TravelRecord administrator to delete
 * @path /travelRecord/admin/travelRecordAdmins/:id
 * @accessor api.functional.travelRecord.admin.travelRecordAdmins.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the TravelRecord administrator to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/travelRecord/admin/travelRecordAdmins/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/travelRecord/admin/travelRecordAdmins/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
