import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITravelRecordMember } from "../../../../structures/ITravelRecordMember";
import { IPageITravelRecordMember } from "../../../../structures/IPageITravelRecordMember";

/**
 * Search and retrieve a filtered, paginated list of travel record members.
 *
 * Retrieve a filtered and paginated list of travel record members.
 *
 * This operation enables clients to query travel_record_member entities with
 * multiple search parameters. The travel_record_member table includes member's
 * email, display name, Google OAuth ID, password hash, creation and update
 * timestamps, and optional deletion timestamp for soft deletes.
 *
 * Only authenticated users with admin role are authorized to perform this
 * operation to ensure privacy of user data. Filters can include email and
 * display name with partial matching, creation date ranges, and soft deletion
 * status.
 *
 * The response provides a paginated set of member summaries suitable for user
 * administration interfaces. Invalid parameters will be rejected with clear
 * validation errors.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for filtering
 *   travel record members
 * @path /travelRecord/admin/travelRecordMembers
 * @accessor api.functional.travelRecord.admin.travelRecordMembers.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for filtering travel record
     * members
     */
    body: ITravelRecordMember.IRequest;
  };
  export type Body = ITravelRecordMember.IRequest;
  export type Response = IPageITravelRecordMember.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/travelRecord/admin/travelRecordMembers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/travelRecord/admin/travelRecordMembers";
  export const random = (): IPageITravelRecordMember.ISummary =>
    typia.random<IPageITravelRecordMember.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed travel record member information by ID.
 *
 * Retrieve detailed information for a specific travel record member identified
 * by their unique id.
 *
 * Only admin users are authorized to access this endpoint due to sensitive
 * personal and authentication information.
 *
 * This operation fetches all member details except for sensitive fields like
 * password hash and soft deletion timestamp to maintain security.
 *
 * Proper error messages will be returned if the member id is invalid or not
 * found.
 *
 * @param props.connection
 * @param props.id Unique identifier of the travel record member
 * @path /travelRecord/admin/travelRecordMembers/:id
 * @accessor api.functional.travelRecord.admin.travelRecordMembers.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the travel record member */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ITravelRecordMember;

  export const METADATA = {
    method: "GET",
    path: "/travelRecord/admin/travelRecordMembers/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/travelRecord/admin/travelRecordMembers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITravelRecordMember =>
    typia.random<ITravelRecordMember>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update travel record member by ID.
 *
 * Update travel record member information by ID.
 *
 * This endpoint is restricted to admin users to ensure controlled modification.
 *
 * It allows updating key properties except for password hash and deletion
 * timestamp.
 *
 * Validation ensures data integrity and uniqueness of emails and OAuth IDs.
 *
 * Returns the updated member on success.
 *
 * @param props.connection
 * @param props.id Unique identifier of the travel record member
 * @param props.body Updated travel record member data
 * @path /travelRecord/admin/travelRecordMembers/:id
 * @accessor api.functional.travelRecord.admin.travelRecordMembers.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the travel record member */
    id: string & tags.Format<"uuid">;

    /** Updated travel record member data */
    body: ITravelRecordMember.IUpdate;
  };
  export type Body = ITravelRecordMember.IUpdate;
  export type Response = ITravelRecordMember;

  export const METADATA = {
    method: "PUT",
    path: "/travelRecord/admin/travelRecordMembers/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/travelRecord/admin/travelRecordMembers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITravelRecordMember =>
    typia.random<ITravelRecordMember>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete travel record member by ID.
 *
 * Delete (hard) travel record member by ID.
 *
 * Only admin users may perform this operation.
 *
 * Deletion cascades to eliminate related travel records, photos, reviews,
 * friends, and privacy settings of the member.
 *
 * This operation permanently removes the record with no recovery.
 *
 * Proper error responses are sent if ID is invalid or deletion fails.
 *
 * @param props.connection
 * @param props.id Unique identifier of the travel record member
 * @path /travelRecord/admin/travelRecordMembers/:id
 * @accessor api.functional.travelRecord.admin.travelRecordMembers.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the travel record member */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/travelRecord/admin/travelRecordMembers/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/travelRecord/admin/travelRecordMembers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
