import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITravelRecordPrivacySettings } from "../../../../structures/ITravelRecordPrivacySettings";
import { IPageITravelRecordPrivacySettings } from "../../../../structures/IPageITravelRecordPrivacySettings";

/**
 * Create a new travel record privacy setting for a member.
 *
 * Only administrators can perform this operation to configure privacy on behalf
 * of users.
 *
 * The system enforces unique privacy settings per member and validates input
 * data.
 *
 * Successful creation returns the full detailed privacy setting record.
 *
 * @param props.connection
 * @param props.body Create request payload for a new privacy setting
 * @path /travelRecord/admin/privacySettings
 * @accessor api.functional.travelRecord.admin.privacySettings.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Create request payload for a new privacy setting */
    body: ITravelRecordPrivacySettings.ICreate;
  };
  export type Body = ITravelRecordPrivacySettings.ICreate;
  export type Response = ITravelRecordPrivacySettings;

  export const METADATA = {
    method: "POST",
    path: "/travelRecord/admin/privacySettings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/travelRecord/admin/privacySettings";
  export const random = (): ITravelRecordPrivacySettings =>
    typia.random<ITravelRecordPrivacySettings>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve paginated list of travel record privacy settings.
 *
 * Retrieve a filtered, sorted, and paginated list of privacy settings for
 * travel record members. This endpoint supports complex search criteria
 * allowing clients to request subsets of privacy settings based on privacy
 * level or timestamps.
 *
 * Only authenticated users with the appropriate role can perform this operation
 * to view privacy configurations. The data returned include summary information
 * on the privacy settings, without exposing sensitive member details.
 *
 * This operation corresponds to the travel_record_privacy_settings table, which
 * stores the privacy levels set by members. It integrates with other
 * member-related APIs to enforce access control and privacy management.
 *
 * Unique filtering enables clients to manage privacy rules effectively,
 * supporting administrative oversight or user self-service.
 *
 * Validation includes ensuring search parameters are valid and supported by
 * pagination and sorting options. Errors such as invalid filter arguments will
 * return descriptive messages.
 *
 * @param props.connection
 * @param props.body Search and filter criteria for travel record privacy
 *   settings
 * @path /travelRecord/admin/privacySettings
 * @accessor api.functional.travelRecord.admin.privacySettings.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search and filter criteria for travel record privacy settings */
    body: ITravelRecordPrivacySettings.IRequest;
  };
  export type Body = ITravelRecordPrivacySettings.IRequest;
  export type Response = IPageITravelRecordPrivacySettings.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/travelRecord/admin/privacySettings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/travelRecord/admin/privacySettings";
  export const random = (): IPageITravelRecordPrivacySettings.ISummary =>
    typia.random<IPageITravelRecordPrivacySettings.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed privacy setting by ID.
 *
 * Retrieve the detailed privacy setting record for the specified ID.
 *
 * This operation requires administrative role to access member privacy
 * configurations to ensure proper control and compliance.
 *
 * Data returned includes member association, privacy level, and audit
 * timestamps.
 *
 * If the specified ID does not exist, a not-found error response is expected.
 *
 * @param props.connection
 * @param props.id Target privacy setting record's ID
 * @path /travelRecord/admin/privacySettings/:id
 * @accessor api.functional.travelRecord.admin.privacySettings.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Target privacy setting record's ID */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ITravelRecordPrivacySettings;

  export const METADATA = {
    method: "GET",
    path: "/travelRecord/admin/privacySettings/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/travelRecord/admin/privacySettings/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITravelRecordPrivacySettings =>
    typia.random<ITravelRecordPrivacySettings>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a travel record privacy setting by ID.
 *
 * Update an existing travel record privacy setting by ID.
 *
 * Only administrators have permission to modify privacy settings.
 *
 * The input must be validated for unique member constraints and correct privacy
 * levels.
 *
 * If the record does not exist or input is invalid, an error response is
 * generated.
 *
 * Returns the updated privacy setting Detail on success.
 *
 * @param props.connection
 * @param props.id Target privacy setting record's ID
 * @param props.body Update payload for privacy setting record
 * @path /travelRecord/admin/privacySettings/:id
 * @accessor api.functional.travelRecord.admin.privacySettings.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Target privacy setting record's ID */
    id: string & tags.Format<"uuid">;

    /** Update payload for privacy setting record */
    body: ITravelRecordPrivacySettings.IUpdate;
  };
  export type Body = ITravelRecordPrivacySettings.IUpdate;
  export type Response = ITravelRecordPrivacySettings;

  export const METADATA = {
    method: "PUT",
    path: "/travelRecord/admin/privacySettings/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/travelRecord/admin/privacySettings/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITravelRecordPrivacySettings =>
    typia.random<ITravelRecordPrivacySettings>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a privacy setting record by ID.
 *
 * This API endpoint allows authorized authenticated members or admins to
 * permanently delete a specific privacy setting by its unique identifier from
 * the travel_record_privacy_settings table.
 *
 * The table stores privacy configurations controlling visibility of travel
 * records, enabling users to restrict access to their data as 'public' or
 * 'private'.
 *
 * The operation requires the 'id' path parameter in UUID format specifying the
 * privacy setting to be deleted.
 *
 * Security checks ensure that only the owner member or an administrator can
 * perform this deletion.
 *
 * If the provided 'id' does not exist or the caller lacks permissions, the API
 * will respond with appropriate error messages and status codes.
 *
 * This operation does not require any request body nor returns a response body.
 *
 * Related operations include creation, retrieval, and updating of privacy
 * settings.
 *
 * @param props.connection
 * @param props.id Unique identifier of the privacy setting record to delete
 * @path /travelRecord/admin/privacySettings/:id
 * @accessor api.functional.travelRecord.admin.privacySettings.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the privacy setting record to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/travelRecord/admin/privacySettings/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/travelRecord/admin/privacySettings/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
