import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITravelRecordMember } from "../../../../../structures/ITravelRecordMember";

/**
 * Enable two-factor authentication for member user.
 *
 * Enable two-factor authentication (2FA) for TravelRecord member user.
 * Validates 2FA token and updates user's account status.
 *
 * Enhances account security by requiring 2FA for authentication.
 *
 * Related operations: disableTwoFactor for revoking 2FA.
 *
 * @param props.connection
 * @param props.body Information required to enable 2FA including verification
 *   token.
 * @path /auth/member/twoFactor/enable
 * @accessor api.functional.auth.member.twoFactor.enable.enableTwoFactor
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function enableTwoFactor(
  connection: IConnection,
  props: enableTwoFactor.Props,
): Promise<enableTwoFactor.Response> {
  return true === connection.simulate
    ? enableTwoFactor.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...enableTwoFactor.METADATA,
          path: enableTwoFactor.path(),
          status: null,
        },
        props.body,
      );
}
export namespace enableTwoFactor {
  export type Props = {
    /** Information required to enable 2FA including verification token. */
    body: ITravelRecordMember.IEnableTwoFactor;
  };
  export type Body = ITravelRecordMember.IEnableTwoFactor;
  export type Response = ITravelRecordMember.IResult;

  export const METADATA = {
    method: "POST",
    path: "/auth/member/twoFactor/enable",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/member/twoFactor/enable";
  export const random = (): ITravelRecordMember.IResult =>
    typia.random<ITravelRecordMember.IResult>();
  export const simulate = (
    connection: IConnection,
    props: enableTwoFactor.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: enableTwoFactor.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
