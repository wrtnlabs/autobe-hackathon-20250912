import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITravelRecordMember } from "../../../structures/ITravelRecordMember";
export * as password from "./password/index";
export * as email from "./email/index";
export * as twoFactor from "./twoFactor/index";

/**
 * Register a new TravelRecord member user.
 *
 * Register a new authenticated member user in the TravelRecord system. This
 * involves creating a record in the travel_record_member table where the
 * following fields are essential: email (unique, used as login ID),
 * display_name (user-friendly social name), google_oauth_id (unique Google
 * OAuth identifier), and password_hash (hashed password). Upon successful
 * registration, JWT tokens are issued to authorize the user session. This
 * operation is publicly accessible and does not require authentication.
 *
 * Member users must provide valid data for these fields. Email and Google OAuth
 * ID are unique across members. Password is stored securely as a hash. Created
 * and updated timestamps are set automatically.
 *
 * This operation is essential to member authentication flow, enabling new users
 * to join the system.
 *
 * Related operations: login to authenticate existing accounts, refresh to renew
 * tokens.
 *
 * @param props.connection
 * @param props.body Member registration information including email, display
 *   name, Google OAuth ID, and password hash.
 * @setHeader token.access Authorization
 *
 * @path /auth/member/join
 * @accessor api.functional.auth.member.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /**
     * Member registration information including email, display name, Google
     * OAuth ID, and password hash.
     */
    body: ITravelRecordMember.ICreate;
  };
  export type Body = ITravelRecordMember.ICreate;
  export type Response = ITravelRecordMember.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/member/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/member/join";
  export const random = (): ITravelRecordMember.IAuthorized =>
    typia.random<ITravelRecordMember.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate an existing TravelRecord member user and obtain JWT tokens.
 *
 * Authenticate an existing TravelRecord member user by verifying login
 * credentials. Validates email or Google OAuth ID paired with hashed password
 * from travel_record_member table. Issues JWT access and refresh tokens upon
 * successful validation. Passwords are never sent or stored in plaintext
 * directly. This login endpoint is public, allowing users to authenticate.
 *
 * Security considerations include prevention of brute force attacks and safe
 * handling of password hashes.
 *
 * Related operations: join for registration, refresh for token renewal.
 *
 * @param props.connection
 * @param props.body Member login credentials including email or Google OAuth ID
 *   and password.
 * @setHeader token.access Authorization
 *
 * @path /auth/member/login
 * @accessor api.functional.auth.member.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /**
     * Member login credentials including email or Google OAuth ID and
     * password.
     */
    body: ITravelRecordMember.ILogin;
  };
  export type Body = ITravelRecordMember.ILogin;
  export type Response = ITravelRecordMember.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/member/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/member/login";
  export const random = (): ITravelRecordMember.IAuthorized =>
    typia.random<ITravelRecordMember.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh JWT tokens for TravelRecord member user.
 *
 * Refresh JWT access and refresh tokens for a logged-in TravelRecord member
 * user. Requires a valid refresh token to issue new tokens, extending
 * authenticated session without needing full login.
 *
 * Ensures refresh tokens are securely handled and validated. Tokens issued
 * contain claims that represent user identity and role.
 *
 * Related operations: join, login for initial token issuance.
 *
 * @param props.connection
 * @param props.body Refresh token information to obtain new JWT tokens.
 * @setHeader token.access Authorization
 *
 * @path /auth/member/refresh
 * @accessor api.functional.auth.member.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Refresh token information to obtain new JWT tokens. */
    body: ITravelRecordMember.IRefresh;
  };
  export type Body = ITravelRecordMember.IRefresh;
  export type Response = ITravelRecordMember.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/member/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/member/refresh";
  export const random = (): ITravelRecordMember.IAuthorized =>
    typia.random<ITravelRecordMember.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
