import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITravelRecordMember } from "../../../../../structures/ITravelRecordMember";

/**
 * Change password for authenticated TravelRecord member user.
 *
 * Change the password of an authenticated TravelRecord member user by providing
 * the current password and new password hash. Updates password_hash field
 * securely.
 *
 * Ensures that the current password matches before allowing update, preventing
 * unauthorized changes.
 *
 * Related operations: resetPassword for reset flow, login for authentication.
 *
 * @param props.connection
 * @param props.body Current and new password hash for password change
 *   operation.
 * @path /auth/member/password/change
 * @accessor api.functional.auth.member.password.change.changePassword
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function changePassword(
  connection: IConnection,
  props: changePassword.Props,
): Promise<changePassword.Response> {
  return true === connection.simulate
    ? changePassword.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...changePassword.METADATA,
          path: changePassword.path(),
          status: null,
        },
        props.body,
      );
}
export namespace changePassword {
  export type Props = {
    /** Current and new password hash for password change operation. */
    body: ITravelRecordMember.IChangePassword;
  };
  export type Body = ITravelRecordMember.IChangePassword;
  export type Response = ITravelRecordMember.IResult;

  export const METADATA = {
    method: "POST",
    path: "/auth/member/password/change",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/member/password/change";
  export const random = (): ITravelRecordMember.IResult =>
    typia.random<ITravelRecordMember.IResult>();
  export const simulate = (
    connection: IConnection,
    props: changePassword.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: changePassword.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
