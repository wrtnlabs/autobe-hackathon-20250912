import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITravelRecordMember } from "../../../../../structures/ITravelRecordMember";

/**
 * Reset password for TravelRecord member user.
 *
 * Reset the password of a TravelRecord member user upon verification token.
 * Requires a verified reset token and new password hash. This operation updates
 * the password_hash field in travel_record_member.
 *
 * Ensures secure password update flow preventing unauthorized resets. Typically
 * part of the account recovery process.
 *
 * Related operations: changePassword to update password while authenticated.
 *
 * @param props.connection
 * @param props.body Password reset details including verification token and new
 *   password hash.
 * @path /auth/member/password/reset
 * @accessor api.functional.auth.member.password.reset.resetPassword
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function resetPassword(
  connection: IConnection,
  props: resetPassword.Props,
): Promise<resetPassword.Response> {
  return true === connection.simulate
    ? resetPassword.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...resetPassword.METADATA,
          path: resetPassword.path(),
          status: null,
        },
        props.body,
      );
}
export namespace resetPassword {
  export type Props = {
    /**
     * Password reset details including verification token and new password
     * hash.
     */
    body: ITravelRecordMember.IResetPassword;
  };
  export type Body = ITravelRecordMember.IResetPassword;
  export type Response = ITravelRecordMember.IResult;

  export const METADATA = {
    method: "POST",
    path: "/auth/member/password/reset",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/member/password/reset";
  export const random = (): ITravelRecordMember.IResult =>
    typia.random<ITravelRecordMember.IResult>();
  export const simulate = (
    connection: IConnection,
    props: resetPassword.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: resetPassword.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
