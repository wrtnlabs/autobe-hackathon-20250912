import { tags } from "typia";

/**
 * Details of a travel record place including coordinates, visit date, and
 * identification.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITravelRecordPlaces = {
  /** Unique identifier for a place record. */
  id: string & tags.Format<"uuid">;

  /** Latitude coordinate in decimal degrees. */
  latitude: number;

  /** Longitude coordinate in decimal degrees. */
  longitude: number;

  /** Date of visit in ISO 8601 format. */
  visit_date: string;

  /** Name or description of the visited place. */
  place_name: string;

  /** Unique Google Place ID associated with this place. */
  google_place_id: string;
};
export namespace ITravelRecordPlaces {
  /** Request parameters for filtering and searching travel record places. */
  export type IRequest = {
    /**
     * Latitude filter - minimum value.
     *
     * Optional filter for bounding box or location range queries.
     */
    min_latitude?: number | undefined;

    /**
     * Latitude filter - maximum value.
     *
     * Optional filter for bounding box or location range queries.
     */
    max_latitude?: number | undefined;

    /**
     * Longitude filter - minimum value.
     *
     * Optional filter for bounding box or location range queries.
     */
    min_longitude?: number | undefined;

    /**
     * Longitude filter - maximum value.
     *
     * Optional filter for bounding box or location range queries.
     */
    max_longitude?: number | undefined;

    /**
     * Visit date filter - start date.
     *
     * ISO 8601 date-time string filtering visit date range.
     *
     * Nullable.
     */
    visit_date_start?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Visit date filter - end date.
     *
     * ISO 8601 date-time string filtering visit date range.
     *
     * Nullable.
     */
    visit_date_end?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Text search filter on place name.
     *
     * Enables partial matching for place names.
     */
    place_name_query?: string | undefined;

    /** Pagination: current page number. */
    page?: number | null | undefined;

    /** Pagination: number of records per page. */
    limit?: number | null | undefined;

    /**
     * Sorting field.
     *
     * Allowed fields: "visit_date", "place_name", "created_at",
     * "updated_at"
     */
    orderBy?: string | null | undefined;

    /**
     * Sorting direction.
     *
     * Allowed values: "asc", "desc"
     */
    orderDirection?: string | null | undefined;
  };

  /**
   * Request body for creating a new travel record place.
   *
   * Excludes auto-generated and ownership fields which are set by the system.
   *
   * All fields are required to ensure valid travel place records.
   */
  export type ICreate = {
    /** Latitude of the place in decimal degrees. */
    latitude: number;

    /** Longitude of the place in decimal degrees. */
    longitude: number;

    /** Visit date in ISO 8601 date-time format. */
    visit_date: string & tags.Format<"date-time">;

    /** Name or description of the visited place. */
    place_name: string;

    /** Google Maps unique place ID identifying the place. */
    google_place_id: string;
  };

  /**
   * Request body for updating an existing travel record place.
   *
   * All fields are optional to support partial updates.
   *
   * Ownership and system-generated fields cannot be updated here.
   */
  export type IUpdate = {
    /** Latitude of the place in decimal degrees. */
    latitude?: number | undefined;

    /** Longitude of the place in decimal degrees. */
    longitude?: number | undefined;

    /** Visit date in ISO 8601 date-time format. */
    visit_date?: (string & tags.Format<"date-time">) | undefined;

    /** Name or description of the visited place. */
    place_name?: string | undefined;

    /** Google Maps unique place ID identifying the place. */
    google_place_id?: string | undefined;
  };

  /** Summary representation of travel record places for list views. */
  export type ISummary = {
    /** Unique identifier for a place record. */
    id: string & tags.Format<"uuid">;

    /** Latitude coordinate in decimal degrees. */
    latitude: number;

    /** Longitude coordinate in decimal degrees. */
    longitude: number;

    /** Date of visit in ISO 8601 format. */
    visit_date: string;

    /** Name or description of the visited place. */
    place_name: string;

    /** Unique Google Place ID associated with this place. */
    google_place_id: string;
  };
}
