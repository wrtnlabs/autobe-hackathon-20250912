import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Represents a member user of the TravelRecord system with identity and contact
 * details.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITravelRecordMember = {
  /** Unique identifier (UUID) for the member. */
  id: string;

  /** Verified member email address (unique). */
  email: string;

  /** Display name used in social contexts. */
  display_name: string;

  /** Google OAuth unique identifier for the member. */
  google_oauth_id: string;

  /** Account creation timestamp (ISO 8601 format). */
  created_at: string;

  /** Last update timestamp (ISO 8601 format). */
  updated_at: string;
};
export namespace ITravelRecordMember {
  /**
   * Request body to register a new member user in TravelRecord system.
   * Requires email, display name, unique Google OAuth ID, and password hash.
   * Does NOT include automatically generated fields or soft deletion.
   * Passwords are never stored in plaintext.
   */
  export type ICreate = {
    /** Member's verified email address used as login ID. */
    email: string;

    /** Display name for social interactions. */
    display_name: string;

    /** Unique Google OAuth identifier for authentication. */
    google_oauth_id: string;

    /** Hashed password for authentication, never stored plaintext. */
    password_hash: string;
  };

  /**
   * Authorization response including member ID and JWT tokens issued upon
   * successful login or registration.
   */
  export type IAuthorized = {
    /** Unique identifier of the member user. */
    id: string & tags.Format<"uuid">;

    /** Verified member email address (unique). */
    email: string;

    /** Display name used in social contexts. */
    display_name: string;

    /** Google OAuth unique identifier for the member. */
    google_oauth_id: string;

    /** Account creation timestamp (ISO 8601 format). */
    created_at: string;

    /** Last update timestamp (ISO 8601 format). */
    updated_at: string;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Login request payload accepting either user's email or Google OAuth ID
   * along with password for member authentication. At least one of email or
   * google_oauth_id should be provided, but schema allows nullable for both
   * for flexibility.
   */
  export type ILogin = {
    /** Member login email address, optional if Google OAuth ID is used. */
    email?: string | null | undefined;

    /** Member Google OAuth identifier, optional if email is used. */
    google_oauth_id?: string | null | undefined;

    /** Member password in plaintext for login verification. */
    password: string;
  };

  /**
   * Request body to refresh JWT tokens for an authenticated member user using
   * a refresh token.
   */
  export type IRefresh = {
    /** JWT refresh token string issued during member authentication. */
    refresh_token: string;
  };

  /**
   * Request payload to reset password for TravelRecord member user. Requires
   * a verification token and new password hash.
   */
  export type IResetPassword = {
    /** Verification token for password reset. */
    token: string;

    /** New hashed password to update member authentication. */
    new_password_hash: string;
  };

  /**
   * Structure containing JWT access and refresh tokens along with expiration
   * time.
   */
  export type IAuthorizationToken = {
    /** JWT access token string. */
    access_token: string;

    /** JWT refresh token string. */
    refresh_token: string;

    /** Expiration timestamp of the access token. */
    expires_at: string & tags.Format<"date-time">;
  };

  /**
   * Represents the outcome of an operation performed by a TravelRecord member
   * user.
   *
   * This interface indicates whether the operation succeeded and optionally
   * provides a message describing the result.
   */
  export type IResult = {
    /**
     * Indicates operation success status.
     *
     * Expected to be true if the operation completed successfully, false
     * otherwise.
     */
    success: boolean;

    /**
     * An optional message providing additional information about the
     * operation result. This could be used for error descriptions or
     * confirmations.
     */
    message?: string | null | undefined;
  };

  /**
   * Request structure for changing the password of a TravelRecord member
   * user.
   *
   * Includes current password hash for verification and the new password hash
   * to update.
   */
  export type IChangePassword = {
    /**
     * Current password hash of the authenticated member. This confirms the
     * user's identity before allowing password change.
     *
     * Should be a non-empty string representing current password hash.
     */
    current_password_hash: string;

    /**
     * New password hash to replace the current password.
     *
     * Should be a non-empty string representing new password hash.
     */
    new_password_hash: string;
  };

  /**
   * Request structure for sending an email verification message to a
   * TravelRecord member user's email address.
   *
   * Contains the email to which the verification is sent.
   */
  export type ISendVerification = {
    /**
     * The email address of the member to which the verification email will
     * be sent.
     *
     * Must be a valid email format string.
     */
    email: string & tags.Format<"email">;
  };

  /**
   * Request structure for confirming email verification by providing the
   * verification token.
   *
   * Ensures the provided token matches the one sent for validation.
   */
  export type IVerifyConfirm = {
    /**
     * The verification token sent to the member's email for confirming
     * verification.
     *
     * This token should be a non-empty string, typically alphanumeric.
     */
    token: string;
  };

  /**
   * Information required to enable two-factor authentication (2FA) for
   * TravelRecord member user.
   */
  export type IEnableTwoFactor = {
    /**
     * Information required to enable two-factor authentication (2FA). Must
     * include the verification token obtained from the 2FA device.
     */
    verification_token: string;
  };

  /**
   * Information required to disable two-factor authentication (2FA) for
   * TravelRecord member user.
   */
  export type IDisableTwoFactor = {
    /**
     * Information required to disable two-factor authentication (2FA). Must
     * include a valid 2FA token demonstrating authorization to disable.
     */
    token: string;
  };

  /**
   * Request type for filtering and pagination of member list.
   *
   * Supports filters on email, display name, and deletion timestamp.
   */
  export type IRequest = {
    /** Page number for pagination. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<0>) | null | undefined;

    /** Limit of records per page. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<0>) | null | undefined;

    /** Filter by member email address with optional partial matching. */
    email?: string | null | undefined;

    /** Filter by member display name with optional partial matching. */
    display_name?: string | null | undefined;

    /** Filter by soft deletion timestamp; null means not deleted. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Update data for an existing member.
   *
   * Allows updating email, display name, Google OAuth ID, password hash, and
   * deletion timestamp.
   */
  export type IUpdate = {
    /** Member's verified email address used as login ID. */
    email?: string | null | undefined;

    /** Member's display name for social interactions. */
    display_name?: string | null | undefined;

    /** Unique Google OAuth identifier for authentication. */
    google_oauth_id?: string | null | undefined;

    /** Hashed password for authentication, never stored in plaintext. */
    password_hash?: string | null | undefined;

    /** Soft deletion timestamp for account recovery (nullable). */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Summary information of a TravelRecord member user for list and display
   * purposes.
   */
  export type ISummary = {
    /** Unique identifier (UUID) for the member. */
    id: string;

    /** Verified member email address (unique). */
    email: string;

    /** Display name used in social contexts. */
    display_name: string;

    /** Google OAuth unique identifier for the member. */
    google_oauth_id: string;

    /** Account creation timestamp (ISO 8601 format). */
    created_at: string;

    /** Last update timestamp (ISO 8601 format). */
    updated_at: string;
  };
}
