import { tags } from "typia";

/**
 * Stores member reviews with textual content and star ratings (1-5) for places
 * recorded by members. Supports privacy settings 'public' or 'private' per
 * review. Linked to travel_record_places and travel_record_member for
 * relational integrity and querying. Includes timestamps for auditing and
 * optional soft deletion support.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITravelRecordReviews = {
  /**
   * Primary Key.
   *
   * Unique identifier of the review.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Reference to the place being reviewed.
   *
   * Indicates which travel record place this review is for.
   */
  travel_record_place_id: string & tags.Format<"uuid">;

  /** Reference to the member who wrote the review. */
  travel_record_member_id: string & tags.Format<"uuid">;

  /** Textual review content up to 1000 characters. */
  review: string;

  /** Star rating from 1 to 5 inclusive. */
  star_rating: number & tags.Type<"int32">;

  /** Privacy setting for review: 'public' or 'private'. */
  privacy: string;

  /** Timestamp when the review was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the review was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp; null if not deleted. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ITravelRecordReviews {
  /** Filtering and pagination criteria for review search */
  export type IRequest = {
    /** Page number. */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Limitation of records per a page.
     *
     * @default 100
     */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /** Search text filter matching review content. */
    search?: string | null | undefined;

    /** Privacy filter restricting to 'public' or 'private' reviews. */
    privacy?: "public" | "private" | null | undefined;

    /** Minimum star rating filter (inclusive). */
    min_star_rating?: (number & tags.Type<"int32">) | null | undefined;

    /** Maximum star rating filter (inclusive). */
    max_star_rating?: (number & tags.Type<"int32">) | null | undefined;

    /** Filter by associated travel record place ID. */
    travel_record_place_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Filter by member who wrote reviews. */
    travel_record_member_id?: (string & tags.Format<"uuid">) | null | undefined;
  };

  /** Summary information for travel record reviews used in list views. */
  export type ISummary = {
    /** Unique review ID. */
    id: string & tags.Format<"uuid">;

    /** Review text summary. */
    review: string;

    /** Star rating number. */
    star_rating: number & tags.Type<"int32">;

    /** Privacy setting ('public' or 'private'). */
    privacy: string;

    /** Created timestamp. */
    created_at: string & tags.Format<"date-time">;
  };
}
