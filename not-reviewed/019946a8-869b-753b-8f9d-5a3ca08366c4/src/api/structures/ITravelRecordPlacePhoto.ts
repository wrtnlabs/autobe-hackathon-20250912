import { tags } from "typia";

/**
 * Photos associated with travel record places. Each photo belongs to a single
 * travel record place and stores basic file metadata like URI, upload
 * timestamp, and file size. Managed as a subsidiary entity dependent on
 * travel_record_places.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITravelRecordPlacePhoto = {
  /**
   * Primary Key.
   *
   * Unique identifier of the photo.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Belonged travel record place's ID.
   *
   * Indicates which place this photo belongs to.
   */
  travel_record_place_id: string & tags.Format<"uuid">;

  /**
   * URI of the uploaded photo file.
   *
   * Represents the location of the photo file.
   */
  file_uri: string;

  /**
   * Size of the photo file in bytes.
   *
   * Indicates the size of the photo for storage and validation purposes.
   */
  file_size: number & tags.Type<"int32">;

  /**
   * Timestamp of when the photo was uploaded.
   *
   * Records the upload date-time for audit and tracking.
   */
  uploaded_at: string & tags.Format<"date-time">;

  /**
   * Record creation timestamp.
   *
   * When the photo record was created.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Last update timestamp.
   *
   * Indicates the last time this photo record was updated.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft delete timestamp for recovery.
   *
   * Nullable timestamp indicating if the photo was soft deleted.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ITravelRecordPlacePhoto {
  /**
   * Request parameters for filtered, paginated list of photos.
   *
   * Supports optional filtering, pagination, and sorting parameters.
   */
  export type IRequest = {
    /**
     * Optional search string to filter by file_uri or other textual
     * properties.
     */
    search?: string | null | undefined;

    /**
     * Optional page number.
     *
     * @default 1
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<0>) | null | undefined;

    /**
     * Optional page size (number of items per page).
     *
     * @default 20
     */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<0>) | null | undefined;

    /** Optional sort field name. */
    orderBy?: string | null | undefined;

    /** Optional sort direction: 'asc' or 'desc'. */
    orderDirection?: "asc" | "desc" | null | undefined;
  };

  /**
   * Request body schema for creating a new travel record place photo.
   * Includes linkage to place ID, file URI, size, and upload timestamp.
   */
  export type ICreate = {
    /** UUID of the travel record place to associate with this photo. */
    travel_record_place_id: string & tags.Format<"uuid">;

    /** URI where the photo image file is stored. */
    file_uri: string;

    /** Photo file size in bytes. */
    file_size: number & tags.Type<"int32">;

    /** Timestamp when the photo was uploaded. */
    uploaded_at: string & tags.Format<"date-time">;
  };

  /** Summary information about travel record place photos used in list views. */
  export type ISummary = {
    /** Photo unique ID. */
    id: string & tags.Format<"uuid">;

    /**
     * URI to the photo file.
     *
     * Short summary information used in lists.
     */
    file_uri: string;

    /** File size in bytes. */
    file_size: number & tags.Type<"int32">;

    /** Upload timestamp. */
    uploaded_at: string & tags.Format<"date-time">;
  };
}
