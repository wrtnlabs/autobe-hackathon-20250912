{"operations":[{"specification":"This API operation supports the user registration (join) process for the 'member' role in the chatbot system, corresponding to the 'chatbot_members' table. It creates a new user account and issues initial JWT tokens, enabling authenticated participation in chat rooms. The endpoint is public and involves no prior authentication. The request body schema 'IChatbotMember.ICreate' includes user registration details required for creating a member entity. The response is 'IChatbotMember.IAuthorized', representing the authorized user data and issued tokens.\n\nThe operation does not allow or handle soft deletion, as there is no deletion in user registration. It explicitly validates that the account is created fresh, mapping to database insert operation on 'chatbot_members'. Related operations include login and token refresh for full authentication lifecycle.\n\nSecurity considerations include ensuring newly registered users' credentials match internal references and that data privacy is maintained.\n\nThis API returns newly created authorized user info including JWT tokens.","authorizationType":"join","description":"Registers a new member user account, enabling access to the chatbot system features for normal user role 'member'. This includes creating a fresh member record in the database. Input includes nickname and sender IDs internally mapped, consistent with the 'chatbot_members' entity fields. Output includes authorized user information and issued tokens for session management.\n\nRole is 'member' - regular authenticated user able to send messages, gain points, and play minigames as described in the requirements documents.\n\nUsage mandates public access (no prior token required) for registration flow.\n\nThe operation is essential for enabling member users to participate in the system and punning a JWT-based authentication model.\n\nRelated operations include login and refresh token to maintain sessions.","summary":"Create new member user account and issue authorization tokens based on 'chatbot_members' table.","parameters":[],"requestBody":{"description":"Member registration request containing data to create a new member account.","typeName":"IChatbotMember.ICreate"},"responseBody":{"description":"Response containing authorized member information and JWT tokens.","typeName":"IChatbotMember.IAuthorized"},"authorizationRole":"member","name":"joinMember","path":"/auth/member/join","method":"post"},{"specification":"This API operation supports the user login process for the 'member' role in the chatbot system, mapping to the 'chatbot_members' table for credential verification and token issuance. It authenticates existing users and issues JWT access tokens for session management.\n\nThe operation is publicly accessible, requiring login credentials. It validates user identity against stored data and issues new tokens upon successful authentication.\n\nSecurity ensures safe handling of credentials and issues tokens with restricted scopes. It fits within the authentication lifecycle alongside join and refresh operations.\n\nNo soft deletion is involved; user records are checked for active status.\n\nThe response uses the 'IChatbotMember.IAuthorized' type to include user claims and tokens.\n\nThis login endpoint forms a core part of the member authentication flow.","authorizationType":"login","description":"Authenticate existing member user credentials and issue JWT access tokens for session management within the chatbot system. Validates credentials against stored user data in the 'chatbot_members' table.\n\nRole is 'member'.\n\nPublicly accessible for login use case.\n\nReturns authenticated user information with issued tokens.\n\nComplements join and refresh token flows.","summary":"Authenticate member user and issue access tokens based on 'chatbot_members' table.","parameters":[],"requestBody":{"description":"Member login request with user credentials to authenticate and obtain tokens.","typeName":"IChatbotMember.ILogin"},"responseBody":{"description":"Response with authorized member info and JWT tokens.","typeName":"IChatbotMember.IAuthorized"},"authorizationRole":"member","name":"loginMember","path":"/auth/member/login","method":"post"},{"specification":"This API operation handles refresh token issuance for the 'member' role, associated with 'chatbot_members' for session continuation. It accepts a refresh token and issues new JWT access and refresh tokens to maintain user sessions.\n\nRequires a valid refresh token and performs validation before issuing new tokens.\n\nNo modification of user data occurs, only token lifecycle management.\n\nResponse is of type 'IChatbotMember.IAuthorized' containing refreshed authorization data.\n\nThis completes the token renewal workflow alongside join and login operations, ensuring secure and continuous access for members.","authorizationType":"refresh","description":"Refresh JWT tokens for an authenticated member to maintain session continuity in the chatbot system.\n\nRequires providing a valid refresh token confirming session validity.\n\nReturns new authorization tokens and user details.\n\nRole is 'member'.\n\nSupports continued access without re-login.\n\nEssential for maintaining stateless JWT sessions.","summary":"Refresh tokens for member users maintaining session validity.","parameters":[],"requestBody":{"description":"Refresh token request containing valid token to renew session.","typeName":"IChatbotMember.IRefresh"},"responseBody":{"description":"Response with refreshed authorized member info and JWT tokens.","typeName":"IChatbotMember.IAuthorized"},"authorizationRole":"member","name":"refreshMember","path":"/auth/member/refresh","method":"post"},{"specification":"This API operation creates a new admin user account in the chatbot system. It accepts registration details and returns an access token for authorization. This operation corresponds to the chatbot_admins table, focusing on creating a new admin record with internal_sender_id and nickname. The access token is issued upon successful join, enabling secured admin API usage. The endpoint is public (authorizationType join). This operation is required given admin.kind is \"admin\" and includes join for registration.","authorizationType":"join","description":"This API operation handles the registration process for a new admin user in the chatbot system. It interfaces directly with the chatbot_admins database table, which stores the identities of administrators operating via admin rooms. The operation creates a new admin record including the internal sender ID and nickname, with timestamps for creation and updates handled automatically by the database. Upon successful creation, an authorized JWT token is issued to enable secure interactions with the backend APIs. This operation is open to unauthenticated users to enable initial account creation. Security considerations include input validation to prevent unauthorized account creation and ensuring the returned token provides scoped access for admins only. Related operations include login and refresh to manage admin tokens post registration.","summary":"Create a new admin account and issue authorization tokens for the chatbot_admins table.","parameters":[],"requestBody":{"description":"The admin registration input data.","typeName":"IChatbotAdmin.ICreate"},"responseBody":{"description":"Authorized admin user response with JWT tokens.","typeName":"IChatbotAdmin.IAuthorized"},"authorizationRole":"admin","name":"join","path":"/auth/admin/join","method":"post"},{"specification":"This API operation authenticates an admin user in the chatbot system based on provided credentials. It interacts with chatbot_admins table to validate internal sender ID and nickname or other credentials. On success, it issues JWT tokens for subsequent admin operations. This operation is a public login endpoint and complements join and refresh operations for full token lifecycle management.","authorizationType":"login","description":"This API operation verifies admin user credentials against records in the chatbot_admins table, which manages admin identities. It performs authentication to validate the user and issues JWT tokens that allow access to authorized backend APIs. This is necessary for secure admin sessions and access control. The endpoint accepts login parameters and returns JWT tokens upon success. Security considerations include preventing brute-force attacks and safeguarding credential storage. Related operations include join for account creation and refresh for token renewal.","summary":"Authenticate admin user and issue JWT tokens for chatbot_admins table.","parameters":[],"requestBody":{"description":"The admin login credentials.","typeName":"IChatbotAdmin.ILogin"},"responseBody":{"description":"JWT token response for authorized admin user.","typeName":"IChatbotAdmin.IAuthorized"},"authorizationRole":"admin","name":"login","path":"/auth/admin/login","method":"post"},{"specification":"This API operation renews JWT tokens for an admin user in the chatbot system. It uses a valid refresh token to issue new access and refresh tokens, supporting continuous admin sessions. The operation deals with token validation and renewal but does not modify chatbot_admins table data. It is a protected operation requiring a valid refresh token of an admin user.","authorizationType":"refresh","description":"This API endpoint refreshes the authentication tokens for an admin user who possesses a valid refresh token. It is critical for maintaining continuous and secure sessions without requiring full login credentials repeatedly. Token renewal ensures security compliance and improves usability. The operation requires providing the current refresh token and, upon validation, issues new authorization tokens. This is part of the JWT token lifecycle management in the chatbot system. It complements join and login operations.","summary":"Refresh JWT tokens for authenticated admin users in chatbot_admins table.","parameters":[],"requestBody":{"description":"Valid refresh token for admin user.","typeName":"IChatbotAdmin.IRefresh"},"responseBody":{"description":"Newly issued JWT tokens for admin user authorization.","typeName":"IChatbotAdmin.IAuthorized"},"authorizationRole":"admin","name":"refresh","path":"/auth/admin/refresh","method":"post"},{"specification":"This operation retrieves a paginated and filtered list of chatbot room tuples from the database. The room tuples maintain mappings between normal chat rooms and their associated admin rooms, including display name, unique business identifier, enablement status, and audit timestamps. This GET operation supports partial searching, sorting, and pagination of room tuples by various criteria such as display name, normal room ID, or admin room ID.","description":"Retrieve a filtered and paginated list of chatbot room tuples for administrative or operational use. This endpoint allows clients to query chatbot_room_tuples with advanced search parameters including filters by normal room ID or admin room ID, and to sort results by creation or update date.\n\nUsers with appropriate permissions can use this list to manage room relationships, monitor active tuples, and coordinate chatbot session routing.\n\nThis operation returns a paginated list conforming to the IChatbotRoomTuples.ISummary schema, which includes essential tuple information such as IDs, display names, and enablement flags without detailed nested relations.\n\nSecurity considerations include controlled access to sensitive identifiers and audit fields. Only authorized roles can query this list to prevent exposure of internal mappings. Pagination helps mitigate data overload and reduces query cost.\n\nThis operates on the chatbot_room_tuples table as defined in the Prisma schema, referencing all relevant fields and indexes involved with querying active and enabled tuples.","summary":"Search and retrieve paginated list of chatbot room tuples","parameters":[],"requestBody":{"description":"Search and pagination filter criteria for querying chatbot room tuples","typeName":"IChatbotRoomTuples.IRequest"},"responseBody":{"description":"Paginated list of chatbot room tuple summaries matching search criteria","typeName":"IPageIChatbotRoomTuples.ISummary"},"authorizationType":null,"authorizationRole":"admin","path":"/chatbot/admin/chatbotRoomTuples","method":"patch","name":"index"},{"specification":"This operation retrieves detailed information about a specific chatbot room tuple identified by its unique ID. The tuple links a normal chat room to an admin room, providing mapping info such as display name, unique business identifier, enablement status, and audit timestamps.\n\nThis GET operation is intended for administrative use to view the full details of a particular room tuple for configuration, verification, or auditing purposes.\n\nThe response includes all relevant fields following the chatbot_room_tuples Prisma schema, providing complete perspective on the tuple's state and metadata without exposing sensitive linked internal data.\n\nAccess is restricted to authorized users with 'admin' role to ensure security of room mappings and prevent unauthorized exposure of system routing details.","description":"Retrieve detailed information for a chatbot room tuple by its ID. Provides full field visibility except for sensitive internal mappings that are protected.\n\nThis includes fields like normal_room_id, admin_room_id, display_name, unique_id, enabled flag, and audit timestamps for create, update, and delete events.\n\nOnly authorized admins may access this resource to view and verify room tuple configuration.","summary":"Retrieve chatbot room tuple details by ID","parameters":[{"name":"id","description":"Unique identifier of the chatbot room tuple","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed chatbot room tuple information","typeName":"IChatbotRoomTuples"},"authorizationType":null,"authorizationRole":"admin","path":"/chatbot/admin/chatbotRoomTuples/{id}","method":"get","name":"at"},{"specification":"This operation creates a new chatbot room tuple record in the database. The tuple defines the mapping between a normal chat room and its corresponding admin room, including display name, unique business ID, enablement status, and timestamps.\n\nThe client submits the tuple creation data, which is validated for uniqueness of the unique_id, correctness of room IDs, and display name format.\n\nOn success, the response returns the full record per the chatbot_room_tuples schema, enabling clients to confirm the new tuple's full details.\n\nSecurity measures require the creation operation to be limited to users with 'admin' role, preventing unauthorized or accidental room tuple mappings that would disrupt chat session routing and administrative control flows.","description":"Create a new chatbot room tuple mapping normal room to admin room with associated metadata.\n\nEnsures uniqueness of unique_id and appropriate data integrity for room IDs and display name.\n\nAdmins use this to configure new room tuples for chatbot session management.","summary":"Create a new chatbot room tuple","parameters":[],"requestBody":{"description":"Information for creating a new chatbot room tuple","typeName":"IChatbotRoomTuples.ICreate"},"responseBody":{"description":"Created chatbot room tuple details","typeName":"IChatbotRoomTuples"},"authorizationType":null,"authorizationRole":"admin","path":"/chatbot/admin/chatbotRoomTuples","method":"post","name":"create"},{"specification":"This operation updates an existing chatbot room tuple identified by its ID. Modification includes fields such as normal_room_id, admin_room_id, display_name, unique_id, and enabled flag. The update ensures data consistency and preserves auditability by updating timestamps.\n\nIntended for administrative control to maintain accurate room mappings as chat environments evolve. Only authorized 'admin' role users can perform updates to secure system routing integrity.\n\nOn success, returns the updated chatbot room tuple with full field details following the schema definition.","description":"Update an existing chatbot room tuple by ID with new mapping and metadata.\n\nSupports modifying room identifiers, display name, unique business key, and active status.\n\nThis operation preserves historical audit timestamps and updates the modification timestamp.\n\nRestricted to admin users to safeguard configuration integrity.","summary":"Update chatbot room tuple by ID","parameters":[{"name":"id","description":"Unique identifier of the chatbot room tuple to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updates for chatbot room tuple","typeName":"IChatbotRoomTuples.IUpdate"},"responseBody":{"description":"Updated chatbot room tuple information","typeName":"IChatbotRoomTuples"},"authorizationType":null,"authorizationRole":"admin","path":"/chatbot/admin/chatbotRoomTuples/{id}","method":"put","name":"update"},{"specification":"The chatbot_room_tuples table manages mappings between normal chat rooms and their linked admin rooms, serving as session isolation contexts and enabling admin authorization. This DELETE operation permanently removes a room tuple record identified by its UUID primary key. The operation ensures no lingering references remain and cleans up associated audit logs. There are no soft delete semantics for API-level deletion; the record is hard-deleted from the database. Authorization is open for general use under no roles here (can be adjusted for admin roles if needed).","description":"This DELETE operation removes a chatbot room tuple permanently from the database, identified by its unique UUID 'id'.\n\nThis operation allows system administrators to delete obsolete or invalid room mappings, which are used for isolating chat sessions and linking normal chat rooms to their corresponding admin rooms.\n\nThe system ensures referential integrity by cascading deletes to related audit logs and other dependent data.\n\nAccess to this operation should be restricted to authorized personnel due to its impact on chat room management.\n\nUsers of this endpoint must provide a valid UUID path parameter identifying the target room tuple.\n\nNo request body is required for this operation.\n\nA successful call results in permanent removal with no response body.\n\nErrors include 404 not found if the ID does not exist.\n\nNo soft delete logic is applied here; this is a hard delete.","summary":"Delete a chatbot room tuple by UUID, permanently removing it from the system.","parameters":[{"name":"id","description":"UUID of the chatbot room tuple to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/chatbot/admin/chatbotRoomTuples/{id}","method":"delete","authorizationRole":"admin","authorizationType":null},{"specification":"The chatbot_admins table stores administrator users who operate via admin rooms. This PATCH operation retrieves a paginated and filtered list of chatbot admin users, supporting search, sorting, filtering, and pagination capabilities. The endpoint supports query parameters to narrow down results by nickname and other possible filters.\n\nThe response provides admin user details with all relevant fields except sensitive information. It supports efficient querying using trigram indexes on nickname for fast search.\n\nAuthorization required to access admin user data is granted to 'admin' role users only.","description":"Retrieve a paginated filtered list of chatbot admins.\n\nThis operation supports advanced filtering, sorting, and pagination over the set of admin users. It is designed for administrative user management interfaces.\n\nUsers must be authorized with 'admin' role to access this endpoint.\n\nThe response returns a paginated list of admin summaries including id, nickname, timestamps, and other public fields.\n\nThis endpoint does not mutate data and is readonly.","summary":"Retrieve paginated/searchable list of chatbot admins","parameters":[],"requestBody":{"description":"Filtering, sorting, and pagination parameters for chatbot admin list retrieval","typeName":"IChatbotAdmin.IRequest"},"responseBody":{"description":"Paginated list of chatbot admins matching criteria","typeName":"IPageIChatbotAdmin.ISummary"},"authorizationRoles":["admin"],"name":"index","path":"/chatbot/admin/chatbotAdmins","method":"patch","authorizationRole":"admin","authorizationType":null},{"specification":"The chatbot_admins table holds records of administrator users within the chatbot system. This GET operation fetches detailed information about a single chatbot admin user identified by UUID. Details include internal sender ID, nickname, and audit timestamps.\n\nAccess to this detailed user information is restricted to 'admin' role users only for security reasons.\n\nIf the specified ID does not correspond to an existing record, a 404 Not Found error is expected.\n\nNo request body is required for this operation.\n\nThe response contains the full admin user data as per Prisma schema.","description":"Get detailed information about a chatbot admin by UUID.\n\nThis endpoint returns full details of a chatbot admin user identified by the path parameter 'id'.\n\nOnly users with admin role can access this operation.\n\nIf no admin exists with the given id, the system returns a 404 error.\n\nThe response includes all fields defined in the chatbot_admins schema except sensitive credentials.\n\nNo request body needed.","summary":"Retrieve chatbot admin details by UUID","parameters":[{"name":"id","description":"UUID of the chatbot admin to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed chatbot admin information","typeName":"IChatbotAdmin"},"authorizationRoles":["admin"],"name":"at","path":"/chatbot/admin/chatbotAdmins/{id}","method":"get","authorizationRole":"admin","authorizationType":null},{"specification":"The chatbot_admins table stores all administrator user records with their internal sender IDs, nicknames, and audit timestamps. This POST operation creates a new chatbot admin user with provided nickname and internal sender ID. It does NOT allow the setting of soft deleted timestamps or IDs directly. The operation enforces uniqueness on the internal_sender_id field. On successful creation, the full admin user record is returned.\n\nUser creation is restricted to 'admin' role users who can manage administrative records.\n\nRequest payload requires nickname and internal_sender_id. Created_at and updated_at are managed by the system.\n\nNo soft delete fields or IDs should be provided in the request.\n\nThe response returns the full created chatbot admin user information.","description":"Create a new chatbot admin user.\n\nThe request body must include a nickname and internal sender ID which uniquely identify the admin.\n\nCreation timestamps are handled automatically and need not be provided.\n\nThis operation is intended for authorized admin users only.\n\nThe response includes the full created user record.\n\nSoft delete and id fields are not settable via this endpoint.","summary":"Create a new chatbot admin user","parameters":[],"requestBody":{"description":"Data required to create a chatbot admin user","typeName":"IChatbotAdmin.ICreate"},"responseBody":{"description":"Detailed chatbot admin information","typeName":"IChatbotAdmin"},"authorizationRoles":["admin"],"name":"create","path":"/chatbot/admin/chatbotAdmins","method":"post","authorizationRole":"admin","authorizationType":null},{"specification":"This operation updates an existing admin user record within the chatbot system based on the provided unique admin ID. The admin entity represents a user with elevated privileges who operates in dedicated admin rooms, identified by internal sender ID and nickname, and maintains timestamps for creation, update, and optional deletion. The update process allows modifying mutable fields including nickname and internal sender ID while preserving system integrity through primary key identification. The operation accepts the admin's UUID as a path parameter and requires a request body conforming to IChatbotAdmin.IUpdate. Upon success, the updated admin entity is returned.","description":"This API operation allows modification of an existing chatbot admin user's details, including their internal sender ID and display nickname.\n\nThe chatbot_admins table stores admins with unique UUIDs, internal sender IDs, nicknames, and timestamps for auditing purposes.\n\nAdministrators have the unique ability to perform privileged commands within admin rooms. Updating admin details must be secured and reflect accurately in the system.\n\nThe operation requires the admin's UUID in the path to identify the target record. The request body must contain the updated fields as per the defined structure for updating admins.\n\nOn success, the updated admin record is returned as confirmation.\n\nNo deletion or creation occurs in this operation; it strictly updates existing admin records.\n\nAuthorization roles restrict this operation to users with 'admin' role, maintaining system security.","summary":"Update an existing chatbot admin user by ID","parameters":[{"name":"id","in":"path","description":"Unique identifier of the chatbot admin to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data for updating the chatbot admin user","typeName":"IChatbotAdmin.IUpdate"},"responseBody":{"description":"The updated chatbot admin user information","typeName":"IChatbotAdmin"},"authorizationType":null,"authorizationRole":"admin","method":"put","path":"/chatbot/admin/chatbotAdmins/{id}","name":"update"},{"specification":"This operation permanently deletes a chatbot admin user record by its unique UUID identifier from the chatbot_admins table in the Prisma schema. This hard deletion operation ensures that the admin is completely removed from the system, with no soft delete flags present in the schema, thus the entry cannot be recovered after deletion. The deletion is allowed only for users with the 'admin' authorization role to maintain system integrity and security. No request body is required for this operation, and the response is empty indicating success.","description":"This API operation deletes an existing chatbot admin user identified by the UUID path parameter.\n\nThe chatbot_admins table defines admin users with elevated permissions for system management within admin rooms.\n\nSince the admin records do not have soft delete fields, this operation performs a hard delete, removing the record permanently.\n\nOnly authorized 'admin' role users may execute this deletion to protect sensitive data.\n\nThe operation has no request body and returns no content. On success, the admin user is completely removed from the database, and cannot be recovered.\n\nClients should handle any cascading effects this deletion might cause in related systems or sessions.\n","summary":"Delete an existing chatbot admin user by ID","parameters":[{"name":"id","in":"path","description":"Unique identifier of the chatbot admin to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","method":"delete","path":"/chatbot/admin/chatbotAdmins/{id}","name":"erase"},{"specification":"This operation searches and retrieves a paginated list of chatbot member users with advanced filtering, searching, and sorting capabilities. The members table represents the users participating in normal chat rooms, holding unique internal sender IDs, nicknames, timestamps, and relations to points, titles, and game data. It supports rich queries on multiple criteria for efficient user management and visibility. The request body defines search criteria, pagination, and sorting parameters, and the response provides a paginated summary of matching members.","description":"Retrieve a filtered and paginated list of chatbot member accounts from the system.\n\nThis operation allows searching members based on various attributes such as nickname or internal sender ID.\n\nThe chatbot_members table contains records for users participating in normal chat rooms, linked to points, titles, and minigame data.\n\nPagination and sorting optimize data retrieval to support user list views in dashboards or admin panels.\n\nSecurity and performance considerations apply, ensuring only authorized access (e.g., admins) to sensitive user data.\n\nThe response returns a paginated list of summarized member data.\n","summary":"Search and retrieve a paginated list of chatbot members","parameters":[],"requestBody":{"description":"Search and pagination parameters for members","typeName":"IChatbotMember.IRequest"},"responseBody":{"description":"Paginated list of chatbot member summaries","typeName":"IPageIChatbotMember.ISummary"},"authorizationType":null,"authorizationRole":"admin","method":"patch","path":"/chatbot/admin/chatbotMembers","name":"index"},{"specification":"This operation retrieves detailed information of a single chatbot member identified by their UUID. Members are core users participating in normal chat rooms, uniquely identified by internal sender IDs and nicknames. The operation returns full member information for use in profile views or detailed management interfaces. Authorization restrictions ensure only users with appropriate roles can access member details.","description":"Get detailed information for a specific chatbot member by their unique ID.\n\nChatbot members represent users in chat rooms who accumulate points and participate in minigames.\n\nThis operation supports retrieval of member data including nickname and internal identifiers.\n\nThe member's UUID must be provided in the path parameter.\n\nOnly authorized users (e.g., admins) should access this endpoint to protect sensitive user data.\n\nReturns full member details for client use.\n","summary":"Retrieve detailed information of a chatbot member by ID","parameters":[{"name":"id","in":"path","description":"Unique identifier of the chatbot member","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed chatbot member information","typeName":"IChatbotMember"},"authorizationType":null,"authorizationRole":"admin","method":"get","path":"/chatbot/admin/chatbotMembers/{id}","name":"at"},{"specification":"This operation creates a new chatbot member record in the chatbot_members table, storing the member's internal sender ID, nickname, and timestamps. It is used to add new chat participants who can earn points and participate in minigames. The internal_sender_id uniquely identifies the member internally and is mandatory, while nickname can be updated later. This operation ensures proper creation and uniqueness enforcement.","path":"/chatbot/member/chatbotMembers","method":"post","summary":"Create new chatbot member","description":"Create a new chatbot member in the system. The member is identified internally by a unique sender ID mapped from external sources for privacy. Nickname is stored as the display name. This creation is essential for enabling users to participate in chat activities, earn points, and play minigames.\n\nThis operation requires `internal_sender_id` and `nickname`. It returns the full member record, including UUID and timestamps.\n\nAccess is restricted to authenticated users with role `member`. The internal_sender_id must be unique system-wide.\n\nNo password or role data is managed here; role inference occurs via room context elsewhere.","parameters":[],"requestBody":{"description":"Information required to create a chatbot member","typeName":"IChatbotMember.ICreate"},"responseBody":{"description":"The newly created chatbot member record","typeName":"IChatbotMember"},"authorizationType":null,"authorizationRole":"member","name":"create"},{"specification":"Update an existing chatbot member identified by UUID in the chatbot_members table. Primarily supports updating the user's nickname. Internal sender ID is immutable and cannot be changed via this operation. Returns the updated member record. Requires the member UUID as a path parameter.","path":"/chatbot/member/chatbotMembers/{id}","method":"put","summary":"Update existing chatbot member by ID","description":"Modify chatbot member data for an existing user. Only fields such as nickname are mutable; internal_sender_id remains unchanged for security and consistency.\n\nThis operation requires a valid UUID path parameter identifying the member to update.\n\nAuthorization restricts updates to authenticated users with role `member`.\n\nReturns updated member data on success.","parameters":[{"name":"id","description":"UUID identifying the member to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated member information","typeName":"IChatbotMember.IUpdate"},"responseBody":{"description":"Updated chatbot member record","typeName":"IChatbotMember"},"authorizationType":null,"authorizationRole":"member","name":"update"},{"specification":"Permanently delete a chatbot member and all associated data from the chatbot_members table, identified by UUID path parameter. This operation executes a hard delete, removing member points, titles, logs, and related records due to cascade deletion defined in the schema. No request body is required. Authorization limited to admins only. The operation returns no content on success.","path":"/chatbot/admin/chatbotMembers/{id}","method":"delete","summary":"Delete chatbot member permanently by ID","description":"Permanently remove a chatbot member from the system by ID. This is a hard delete operation, completely deleting the member and all associated data such as points, titles, audit logs, and command logs.\n\nThe member is identified by UUID path parameter. Successful execution returns no content.\n\nOperation restricted to admin role for security.","parameters":[{"name":"id","description":"UUID of the chatbot member to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase"},{"specification":"Retrieve a paginated list of chatbot points data, supporting filtering, sorting, and pagination. Points data represent accumulated points per member correlated with chatbot_points table. The operation accepts search filters via request body, allowing range filtering by points and member identification. Returned data includes paginated points records with member references. Authorization is restricted to admin role.","path":"/chatbot/admin/chatbotPoints","method":"patch","summary":"Search and retrieve chatbot points with filters","description":"Search and retrieve paginated chatbot points for members with flexible filtering and pagination. Useful for leaderboards and administrative monitoring.\n\nRequest body includes filtering criteria such as member IDs and points range.\n\nResponse provides paginated list of points with member contextual data.\n\nAccess restricted to admins to protect privacy.\n\nSupports sorting and paging for scalable data retrieval.","parameters":[],"requestBody":{"description":"Filtering and pagination options for chatbot points list","typeName":"IChatbotPoints.IRequest"},"responseBody":{"description":"Paginated chatbot points matching search criteria","typeName":"IPageIChatbotPoints"},"authorizationType":null,"authorizationRole":"admin","name":"index"},{"specification":"This operation retrieves detailed chatbot points information associated with the 'chatbot_points' table in the Prisma database schema. It allows fetching a single point record by its unique identifier. The 'chatbot_points' table stores the current point balances for each member, essential for managing user points that are accumulated based on message activity in chat rooms. This read operation requires specifying the point record's UUID as a path parameter, ensuring retrieval of precise and accurate point data for a particular member. The response returns the complete point entity details, reflecting consistent state with the database. No request body is required for this GET operation.","description":"Retrieve detailed chatbot points information by unique ID.\n\nThis operation fetches a single chatbot_points record identified by its UUID from the database. It is intended for administrators or system components needing to view the current points held by a member. The retrieved data includes the member ID and the current points balance.\n\nSecurity consideration includes that this endpoint should be accessible only to authorized roles with rights to view user points.\n\nThe underlying table 'chatbot_points' links to the 'chatbot_members' table for member reference. The integrity of member points is critical to features like minigames and rankings.\n\nRequest parameters include a single path parameter 'id', which is the UUID of the point record to fetch.\n\nThe response will contain the full point entity, representing the current state in the database.\n\nErrors may occur if the specified ID does not exist, which should be handled gracefully by the calling system.","summary":"Retrieve chatbot points by ID","parameters":[{"name":"id","in":"path","description":"Unique identifier of the chatbot points record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Chatbot points entity retrieved by ID","typeName":"IChatbotPoints"},"authorizationType":null,"authorizationRole":"member","name":"at","path":"/chatbot/member/chatbotPoints/{id}","method":"get"},{"specification":"This operation creates a new chatbot points record in the underlying 'chatbot_points' table. This table tracks the total accumulated points per user in the chatbot system, which are used for minigames and rank tracking. The creation endpoint requires a request body containing the valid fields for a new points record, including the member reference and initial point value. Upon successful creation, the operation returns the full point entity as stored in the database. Authorization roles should ensure only authenticated users (or system services) can create point records, preserving data integrity and security aspects.","description":"Create a new chatbot points record in the database.\n\nThis operation is designed for system components or administrators to initialize point records for users as needed. The request body must include the member's unique identifier linked to points and the initial points quantity.\n\nSecurity is important as point creation must be controlled and validated to prevent unauthorized points manipulation.\n\nOn success, the created point record is returned with all fields populated as in the database.\n\nIf creation fails due to constraint violations (e.g., duplicate member points), errors will be returned and should be handled appropriately.","summary":"Create new chatbot points record","parameters":[],"requestBody":{"description":"Creation info for chatbot points","typeName":"IChatbotPoints.ICreate"},"responseBody":{"description":"Created chatbot points record","typeName":"IChatbotPoints"},"authorizationType":null,"authorizationRole":"member","name":"create","path":"/chatbot/member/chatbotPoints","method":"post"},{"specification":"This operation updates an existing chatbot points record identified by its unique ID. It operates on the 'chatbot_points' table, which manages user points for the chatbot system's gamification and ranking features. The update requires the point record's UUID as a path parameter and a request body detailing the fields to modify, such as the point total. This operation enables admins or authorized users to adjust point balances to reflect manual changes or corrections. The response returns the updated point entity preserving database consistency.","description":"Update chatbot points information by ID.\n\nThis operation allows update of fields such as points total for a given chatbot_points record, specified by the path parameter 'id'.\n\nSecurity constraints require that only authorized users can perform updates to prevent unauthorized point manipulation.\n\nThe request body must specify the fields to update with valid values. On success, the updated record is returned.\n\nErrors may arise if the specified ID does not exist or if validation fails.","summary":"Update chatbot points by ID","parameters":[{"name":"id","in":"path","description":"Unique identifier of the chatbot points record to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update info for chatbot points","typeName":"IChatbotPoints.IUpdate"},"responseBody":{"description":"Updated chatbot points record","typeName":"IChatbotPoints"},"authorizationType":null,"authorizationRole":"member","name":"update","path":"/chatbot/member/chatbotPoints/{id}","method":"put"},{"specification":"This operation deletes an existing chatbot points record permanently from the database. It operates on the 'chatbot_points' table which tracks user point balances in the chatbot system. The deletion requires specifying the point record's UUID as a path parameter. This action removes the record entirely without soft delete flags, as the table uses soft delete timestamps for soft deletion, but this operation performs hard deletion. This action is restricted for authorized users only to maintain data integrity and prevent abuse. The endpoint does not return a response body, only a successful status code.","description":"Delete chatbot points record by ID permanently.\n\nThis operation performs a hard delete of the chatbot_points record identified by the UUID path parameter. It removes all data associated and is irreversible.\n\nAccess is restricted to authorized user roles.\n\nNo content is returned upon successful deletion. Errors occur if the ID does not exist.\n\nUse with caution to avoid loss of critical user point data.","summary":"Delete chatbot points by ID","parameters":[{"name":"id","in":"path","description":"Unique identifier of the chatbot points record to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"erase","path":"/chatbot/member/chatbotPoints/{id}","method":"delete"},{"specification":"This operation retrieves a paginated list of chatbot point cooldown entries representing the last point award time per member to enforce point awarding cooldowns. This API allows searching and filtering cooldown records. It strictly interacts with the chatbot_point_cooldowns table defined in the Prisma schema, which tracks member cooldowns for fair point distribution by storing the last point time along with creation and update timestamps.","description":"Retrieve a filtered and paginated list of chatbot point cooldowns that enforce the point awarding cooldown per user in the chatbot system. This enables system clients to query cooldown records for management or monitoring purposes.\n\nSecurity considerations include restricting this operation potentially to admin or system roles if sensitive. The response includes fields showing last point award timestamp and reference to the member user.\n\nThe underlying data comes from the chatbot_point_cooldowns Prisma table, which links cooldowns to chatbot_members by unique member ID with timestamp tracking. This operation does not modify cooldown data and is read-only, suitable for administrative dashboards.\n\nValidation ensures that only existing cooldown records are returned, with pagination and optional filters handled via the request body. This operation complements POST/PUT operations for managing cooldowns but does not alter data itself.","summary":"Search and retrieve chatbot point cooldowns list","parameters":[],"requestBody":{"description":"Filtering and pagination request for chatbot point cooldown search","typeName":"IChatbotChatbotPointCooldown.IRequest"},"responseBody":{"description":"Paginated chatbot point cooldown records matching search criteria","typeName":"IPageIChatbotChatbotPointCooldown"},"authorizationType":null,"authorizationRole":"member","name":"index","path":"/chatbot/member/chatbotPointCooldowns","method":"patch"},{"specification":"This operation retrieves detailed information about a specific chatbot point cooldown entry identified by its unique UUID. It fetches cooldown metadata including the last point award timestamp and related user association from the chatbot_point_cooldowns table in the Prisma schema.\n\nThis GET operation allows clients to obtain insight into one particular member's point cooldown status, useful for management or troubleshooting purposes.\n\nSecurity measures recommend restricting access to authorized users or admins due to sensitive timing data.\n\nErrors such as requesting non-existent cooldown IDs result in appropriate not-found responses.\n\nNo modifications are made to data by this operation; it strictly returns detailed cooldown record information.","description":"Get detailed information about a single chatbot point cooldown identified by its UUID. The operation returns cooldown metadata linked to a user member, including last point award time, created and updated timestamps.\n\nSecurity considerations recommend access control due to the sensitive timing detail included.\n\nThis operation directly queries the chatbot_point_cooldowns Prisma table.\n\nRequesting with a non-existent ID will return a not-found error.\n\nThe response returns data matching the IChatbotChatbotPointCooldown type schema.","summary":"Retrieve detailed chatbot point cooldown by id","parameters":[{"name":"id","description":"Unique identifier of the chatbot point cooldown entry","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed chatbot point cooldown information","typeName":"IChatbotChatbotPointCooldown"},"authorizationType":null,"authorizationRole":"member","name":"at","path":"/chatbot/member/chatbotPointCooldowns/{id}","method":"get"},{"specification":"This operation permanently deletes a chatbot point cooldown record specified by its UUID identifier from the database. It performs a hard delete operation as the chatbot_point_cooldowns table does not contain soft deletion columns.\n\nThis API is designed to support administrative cleanup or maintenance of cooldown tracking data, removing entries that are obsolete or invalid.\n\nSecurity and access controls should be enforced; typically only admin users can invoke this endpoint.\n\nUpon successful deletion, no content is returned indicating the cooldown record has been removed from the system.","description":"Permanently erase a chatbot point cooldown record identified by UUID from the system. This hard delete operation removes the cooldown tracking record completely from the storage.\n\nThis is an administrative operation with potential impact on cooldown enforcement, so proper authorization is required.\n\nErrors such as providing non-existent UUIDs return not-found responses.\n\nThe operation corresponds to the chatbot_point_cooldowns table in the Prisma schema without any soft deletion.\n\nNo request body or response body is used.","summary":"Delete chatbot point cooldown by id","parameters":[{"name":"id","description":"Unique identifier of the chatbot point cooldown entry to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/chatbot/admin/chatbotPointCooldowns/{id}","method":"delete"},{"specification":"This operation retrieves a paginated list of user titles from the chatbot_titles table, enabling filtering and searching by title name and fee discount rates. User titles define special fee discount rates applicable in minigames and stock transactions.\n\nThe API supports administrative operations to browse titles and their attributes without modification capabilities in this endpoint.\n\nSecurity considerations recommend restricting this to admin users only due to sensitive fee discount rate information.\n\nThe response returns a paginated collection matching the IPageIChatbotChatbotTitle type.","description":"Retrieve a filtered and paginated list of user titles available in the chatbot system. Titles grant fee discounts on minigame transactions and are managed by administrators.\n\nThis operation references the chatbot_titles Prisma model, including name, fee discount rate, creation and update timestamps, and optional deletion timestamps.\n\nFiltering and sorting can be applied via the request body criteria.\n\nThe paginated response supports administrative UI display and reporting of available titles.\n\nThis operation is read-only with no modifications performed.","summary":"Search and retrieve user titles list","parameters":[],"requestBody":{"description":"Filter and pagination criteria for titles","typeName":"IChatbotChatbotTitle.IRequest"},"responseBody":{"description":"Paginated list of user titles matching criteria","typeName":"IPageIChatbotChatbotTitle"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/chatbot/admin/titles","method":"patch"},{"specification":"This operation retrieves detailed information of a specific user title from the chatbot_titles table in the Prisma schema. It allows clients to fetch the entire data record for the title identified by its UUID. The title entity stores descriptive name and fee discount rate among other metadata fields, enabling display and usage of title benefits in the system. This GET operation supports user interfaces and administration views requiring title detail access.","path":"/chatbot/titles/{id}","method":"get","summary":"Retrieve a specific user title by ID","description":"Retrieve detailed information of a specific title in the chatbot system. The title contains properties such as name, fee_discount_rate representing the discount percentage on fees granted by the title, and timestamps for creation, update, and optional deletion. This endpoint is publicly accessible without authorization requirements, facilitating client applications to query title information.\n\nSecurity considerations are minimal since this is a read operation without sensitive data exposure. This operation references the chatbot_titles table in the Prisma schema, ensuring the data emitted matches exactly the title entity structure.\n\nTypical use cases include displaying title options to users, or administrative validation before assignment. Errors include 404 if the title is not found. No request body is required for this GET operation.\n\nParameters include the UUID path parameter id identifying the target title to retrieve. The response returns the IChatbotTitles type representing the full title record.","parameters":[{"name":"id","description":"Unique identifier of the target title","schema":{"type":"string","format":"uuid"},"in":"path"}],"requestBody":null,"responseBody":{"description":"The detailed user title information","typeName":"IChatbotTitles"},"authorizationType":null,"authorizationRole":null,"name":"at"},{"specification":"This operation creates a new user title entity in the chatbot_titles table as described in the Prisma schema. It allows administrators to define a new title with properties such as name and fee_discount_rate. The creation record includes timestamps for tracking.\n\nThe API expects a JSON request body conforming to the IChatbotTitles.ICreate schema, encapsulating the title's required fields. The response returns the created IChatbotTitles entity with its assigned UUID.\n\nSecurity is enforced by requiring the \"admin\" role in authorizationRoles, allowing only authorized administrators to create titles. The operation supports JSON input validation and concurrency-safe creation.\n\nUse this endpoint to add new titles for use in fee discounting and user status management.","path":"/chatbot/admin/titles","method":"post","summary":"Create a new user title","description":"Create a new user title with specified name and fee discount rate. This operation requires admin authorization to ensure only privileged users can add new titles. The API accepts a JSON body with required properties name and fee_discount_rate. Once successfully created, the new title entity is returned including its unique identifier and timestamps.\n\nThis operation directly interacts with the chatbot_titles database table as defined in Prisma schema, conforming to all schema constraints on data types and uniqueness. Handles validation errors and concurrency issues gracefully.\n\nThe request body must specify all required fields for a complete title record creation.","parameters":[],"requestBody":{"description":"Information needed to create a new user title","typeName":"IChatbotTitles.ICreate"},"responseBody":{"description":"The created user title entity","typeName":"IChatbotTitles"},"authorizationType":null,"authorizationRole":"admin","name":"create"},{"specification":"This operation updates an existing user title entity identified by its UUID in the chatbot_titles table of the Prisma schema. It allows administrators to modify title properties such as name and fee_discount_rate with proper validation.\n\nThe API accepts a JSON request body conforming to IChatbotTitles.IUpdate schema specifying updatable fields. The response returns the updated full IChatbotTitles entity record.\n\nSecurity restrictions mandate \"admin\" role authorization to prevent unauthorized updates. The operation supports concurrency controls, validation of unique constraints, and proper error handling.\n\nUse this endpoint to maintain and correct user title data during operation lifetime.","path":"/chatbot/admin/titles/{id}","method":"put","summary":"Update a user title by ID","description":"Update an existing user title identified by UUID with new data such as name and fee discount rate. Admin authorization is required. The API validates incoming update data and returns updated title record upon success.\n\nThe operation corresponds to chatbot_titles table and enforces schema constraints and unique key rules. Updates may be partial but must satisfy schema property types.\n\nPath parameter id must be provided to locate the target title record for update.","parameters":[{"name":"id","description":"Unique identifier of the target title","schema":{"type":"string","format":"uuid"},"in":"path"}],"requestBody":{"description":"Fields and values for updating the user title","typeName":"IChatbotTitles.IUpdate"},"responseBody":{"description":"The updated user title entity","typeName":"IChatbotTitles"},"authorizationType":null,"authorizationRole":"admin","name":"update"},{"specification":"This operation permanently deletes a user title entity identified by its UUID in the chatbot_titles table of the Prisma schema. Unlike soft delete, this removal is permanent and cannot be undone.\n\nThe API requires \"admin\" role authorization to restrict deletion ability. No request body or response body is needed.\n\nUse this endpoint to remove obsolete or incorrect titles from the system. The operation must ensure referential integrity and proper cascading or constraint handling as enforced by the database.\n\nPath parameter id is required to identify the title record to be deleted.","path":"/chatbot/admin/titles/{id}","method":"delete","summary":"Delete a user title by ID","description":"Remove a user title by its unique identifier permanently from the system. Admin authorization is mandatory to avoid unauthorized deletions.\n\nThe deletion removes the entity record completely from the chatbot_titles table, with no recovery possible. It is a hard delete operation.\n\nThis operation requires the target title's UUID supplied in the path parameter id.","parameters":[{"name":"id","description":"Unique identifier of the target title","schema":{"type":"string","format":"uuid"},"in":"path"}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase"},{"specification":"This API operation retrieves a paginated list of user titles assigned to a chatbot member filtered by the member's ID. It supports advanced searching, sorting, and pagination by consuming the IChatbotUserTitle.IRequest request body schema. The response returns a paginated list of user title summaries as defined by IPageIChatbotUserTitle.ISummary, making it suitable for efficient and scalable user interface consultations around member titles. The operation relates to the chatbot_user_titles and chatbot_members tables in the Prisma schema.","description":"Retrieve a filtered and paginated list of chatbot user titles associated with a specific chatbot member. This operation supports advanced search and filtering criteria submitted in the request body, allowing clients to narrow down the list of user titles by various properties such as assignment dates or fee discount rates.\n\nSecurity is enforced by requiring authenticated user access via the \"member\" role. This ensures only authorized users can query user title data.\n\nThe operation maps directly to the chatbot_user_titles table filtered by the member's unique ID (memberId). It returns paginated summary data optimized for display in user interfaces.\n\nCorrect path parameters for memberId ensure precise user scoping.\n\nErrors may be returned if the member does not exist or if the request body parameters are ill-formed.\n\nThis operation is a key building block for user management APIs focusing on title assignments and their associated benefits.","summary":"List and search chatbot user titles by member ID with pagination and filtering","parameters":[{"name":"memberId","description":"Unique identifier of the target chatbot member","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering, search, and pagination parameters for chatbot user title listing","typeName":"IChatbotUserTitle.IRequest"},"responseBody":{"description":"Paginated summary list of chatbot user titles","typeName":"IPageIChatbotUserTitle.ISummary"},"authorizationType":null,"authorizationRole":"member","name":"index","path":"/chatbot/member/chatbotMembers/{memberId}/userTitles","method":"patch"},{"specification":"This API operation retrieves a specific assigned user title record for a chatbot member given by memberId and userTitleId. It returns detailed information including title name, fee discount rates, assignment dates, and audit timestamps. The operation strictly reads data from the chatbot_user_titles entity joined to chatbot_members for user context. Access is restricted to authenticated members via the \"member\" role to protect data confidentiality. Proper path parameter validation for both memberId and userTitleId ensures secure and precise data access. Failure to find the record results in appropriate error handling.\n\nThis operation is critical for user-centric applications needing detailed user title information.","description":"Retrieve detailed information about a specific user title assigned to a chatbot member. This operation fetches the user title referenced by the member's unique memberId and the user title's unique userTitleId.\n\nOnly users authenticated as \"member\" roles are authorized to access this endpoint.\n\nThe API returns the full detailed user title entity, including assignment details and timestamps.\n\nSecurity checks ensure the user title belongs to the specified memberId. If not found or unauthorized, an error is returned.\n\nThis operation corresponds to a simple retrieval by primary key and foreign key references in the database schema.","summary":"Retrieve a chatbot user title record by member and user title IDs","parameters":[{"name":"memberId","description":"Unique identifier of the target chatbot member","schema":{"type":"string","format":"uuid"}},{"name":"userTitleId","description":"Unique identifier of the chatbot user title record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed chatbot user title information","typeName":"IChatbotUserTitle"},"authorizationType":null,"authorizationRole":"member","name":"at","path":"/chatbot/member/chatbotMembers/{memberId}/userTitles/{userTitleId}","method":"get"},{"specification":"This API operation creates a new user title assignment record linked to a specific chatbot member identified by memberId. It accepts detailed creation data in the request body according to the IChatbotUserTitle.ICreate schema. The operation validates all input fields strictly based on the chatbot_user_titles schema, including member association and assignment timestamps, and returns the full created user title entity on success. Authorization is restricted to authenticated members under the \"member\" role.\n\nThis operation supports user title management workflows by enabling the assignment of new titles to members through a structured API supporting input validation and consistent data integrity.\n\nThe memberId path parameter is critical to associate the new title record correctly and validate the membership context.\n\nAppropriate error responses occur upon validation failures or business rule violations such as duplicate title assignments.\n\nThis create operation corresponds to the POST HTTP verb with detailed request and response schemas.","description":"Assign a new user title to a chatbot member by creating a new record in chatbot_user_titles. The request body must include required information such as title reference and assignment date.\n\nThe operation validates the input thoroughly and enforces uniqueness constraints such as only one active title per member.\n\nOnly authenticated users with role \"member\" are authorized.\n\nOn success, the new detailed user title entity is returned.\n\nErrors occur for validation failures or business rule violations.\n\nThis operation is fundamental for user title management in the chatbot system.","summary":"Create a new chatbot user title for a member","parameters":[{"name":"memberId","description":"Unique identifier of the target chatbot member","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"User title assignment creation details","typeName":"IChatbotUserTitle.ICreate"},"responseBody":{"description":"Created chatbot user title entity","typeName":"IChatbotUserTitle"},"authorizationType":null,"authorizationRole":"member","name":"create","path":"/chatbot/member/chatbotMembers/{memberId}/userTitles","method":"post"},{"specification":"This API operation updates an existing user title assignment record for a chatbot member specified by memberId and userTitleId. The input update data follows the IChatbotUserTitle.IUpdate schema governing editable fields for chatbot_user_titles. The operation enforces strict authorization for the \"member\" role to ensure secure updates. Successful updates return the modified user title entity, including updated auditing timestamps.\n\nPath parameters memberId and userTitleId ensure precise identification of the record to update. Validation rules prevent invalid updates or missing dependencies.\n\nErrors are raised if records are missing or validations fail. This operation implements conventional PUT semantics for entity updates.","description":"Update an existing user title assignment for chatbot member. The request provides updated fields such as title reference and assignment date.\n\nAccess is restricted to authenticated users with role \"member\".\n\nValidates existence of member and user title records.\n\nReturns the updated user title entity on success.\n\nError handling covers invalid input or missing records.\n\nThis operation directly maps to the PUT method for chatbot_user_titles resource under member scope.","summary":"Update a chatbot user title assignment by member and user title IDs","parameters":[{"name":"memberId","description":"Unique identifier of the target chatbot member","schema":{"type":"string","format":"uuid"}},{"name":"userTitleId","description":"Unique identifier of the chatbot user title record","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"User title update details","typeName":"IChatbotUserTitle.IUpdate"},"responseBody":{"description":"Updated chatbot user title entity","typeName":"IChatbotUserTitle"},"authorizationType":null,"authorizationRole":"member","name":"update","path":"/chatbot/member/chatbotMembers/{memberId}/userTitles/{userTitleId}","method":"put"},{"specification":"This operation permanently deletes a chatbot user title association record identified by userTitleId belonging to a specific member identified by memberId. The user title association is stored in the chatbot_user_titles table of the Prisma schema. Deleting this association removes the link between a user and their assigned title, effectively revoking the title from the user. This is a hard delete operation and the record is permanently removed without soft deletion support. Only users with the 'member' role can perform this deletion, typically reflecting the authenticated user removing their own title or an admin operation routed through user context.","path":"/chatbot/member/chatbotMembers/{memberId}/userTitles/{userTitleId}","method":"delete","summary":"Delete a chatbot user title association by memberId and userTitleId","description":"Deletes a user title association identified by userTitleId for the member identified by memberId. This removes the assigned title from the user and the record is permanently deleted from the chatbot_user_titles table.\n\nSecurity considerations include ensuring that only authorized users can delete the title associations. This operation relates directly to the chatbot_user_titles table as defined in the Prisma schema.\n\nNo request body is needed. The operation requires the memberId and userTitleId path parameters which must be valid UUIDs corresponding to existing records.\n\nThis operation permanently removes the user-title allocation record and cannot be undone. Error handling must include checks for existence and permissions.\n","parameters":[{"name":"memberId","description":"Unique identifier of the target chatbot member","schema":{"type":"string","format":"uuid"}},{"name":"userTitleId","description":"Unique identifier of the user title association to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"eraseUserTitle"},{"specification":"This operation lists virtual stock items available for trading from the chatbot_stock_items table in the Prisma schema. It supports filtering, sorting, and pagination of stock items. Users can retrieve a paginated list of stock items with properties such as code, name, and initial price. This is a read-only operation returning data relevant for displaying available stock items in the chatbot system's stock trading minigame.","path":"/chatbot/stockItems","method":"patch","summary":"List virtual stock items with filtering and pagination","description":"Retrieve a filtered and paginated list of virtual stock items available for trading. The response includes stock summaries with unique code, name, and initial price to assist users in making trading decisions.\n\nThis operation interfaces with the chatbot_stock_items table as defined in the Prisma schema which defines unique codes and names for each stock item with corresponding initial prices.\n\nNo parameters are needed in the path, but filtering and pagination parameters should be passed in the request body.\n\nThis read-only endpoint is accessible publicly.\n","parameters":[],"requestBody":{"description":"Filter and pagination criteria for listing stock items","typeName":"IChatbotStockItem.IRequest"},"responseBody":{"description":"Paginated list of chatbot stock item summaries matching criteria","typeName":"IPageIChatbotStockItem.ISummary"},"authorizationType":null,"authorizationRole":null,"name":"indexStockItems"},{"specification":"This operation retrieves detailed information about a specific virtual stock item identified by stockItemId from the chatbot_stock_items table in the Prisma schema. This includes unique stock code, name, initial price, and timestamps. The operation allows clients to fetch complete details of a stock item for display or management purposes.","path":"/chatbot/stockItems/{stockItemId}","method":"get","summary":"Retrieve detailed information of a chatbot stock item by ID","description":"Get detailed information about a specific stock item identified by stockItemId. Returns the full stock item record from the chatbot_stock_items table including code, name, initial price, and relevant timestamps.\n\nThe stockItemId path parameter must be a valid UUID representing an existing stock item.\n\nThis operation is publicly accessible without authentication requirements.\n","parameters":[{"name":"stockItemId","description":"Unique identifier of the stock item to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed chatbot stock item entity information","typeName":"IChatbotStockItem"},"authorizationType":null,"authorizationRole":null,"name":"atStockItem"},{"specification":"This operation creates a new virtual stock item record in the chatbot_stock_items table according to the Prisma schema. The request body must include a unique business code, a unique name, and an initial price within valid ranges. The created stock item record includes metadata such as creation and update timestamps. This operation is typically restricted to admin roles responsible for managing stock items in the chatbot system.","path":"/chatbot/admin/stockItems","method":"post","summary":"Create a new chatbot virtual stock item","description":"Create a new chatbot stock item with the provided code, name, and initial price. The new record is stored in the chatbot_stock_items table, ensuring the uniqueness of the code and name fields.\n\nAdmins use this endpoint to add new stock items available for trading in the virtual stock minigame.\n\nThe request body must conform to the IChatbotStockItem.ICreate schema, including validation for code, name, and initial price.\n\nSuccessful creation returns the full chatbot stock item record including timestamps.\n\nSecurity restricts this operation to users with the admin role.","parameters":[],"requestBody":{"description":"Information required to create a new chatbot stock item","typeName":"IChatbotStockItem.ICreate"},"responseBody":{"description":"The created chatbot stock item entity","typeName":"IChatbotStockItem"},"authorizationType":null,"authorizationRole":"admin","name":"createStockItem"},{"specification":"This operation updates the information of a specific virtual stock item in the chatbot system. It operates on the chatbot_stock_items table in the Prisma schema, which stores virtual stock definitions including code, name, and initial price. This allows administrators to modify stock attributes such as the name and initial price while maintaining data integrity and uniqueness constraints. The operation supports full validation of the stock item ID and new data, ensuring that the unique business code and name do not conflict with existing records. This API is intended for use by administrators managing the virtual stock market in the chatbot environment.","description":"Update the details of a virtual stock item identified by its stockItemId. This operation allows administrators to change the stock item's code, name, and initial price within valid ranges. The stock item must exist. The update affects future transactions and price computations but does not alter historical snapshots.\n\nSecurity considerations: This endpoint should be restricted to users with administrative roles only. Proper authorization checks must be enforced.\n\nThe operation relates directly to the chatbot_stock_items table in the Prisma schema. The validated request body must contain details confirming to the IChatbotStockItems.IUpdate DTO including the stock code, name, and initial price.\n\nValidation rules enforce that the stockItemId is a valid UUID. The stock code and name are unique. The initial price must be within 100 to 1,000,000 points.\n\nRelated operations include listing stocks, adding new stocks, and deleting stocks. Updating a stock is part of the administrative controls for managing the virtual stock market.\n\nError handling includes appropriate 404 if the stock item does not exist, and validation errors for invalid input values.","summary":"Update a virtual stock item's details by ID","parameters":[{"name":"stockItemId","description":"The unique identifier (UUID) of the target stock item","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload containing stock item update information","typeName":"IChatbotStockItems.IUpdate"},"responseBody":{"description":"Updated stock item information","typeName":"IChatbotStockItems"},"authorizationRoles":["admin"],"name":"updateStockItem","path":"/chatbot/admin/stockItems/{stockItemId}","method":"put","authorizationRole":"admin","authorizationType":null},{"specification":"This operation removes a virtual stock item permanently from the system by its unique identifier. It affects the chatbot_stock_items table in the Prisma schema and triggers removal of associated stock holdings with proper refunds to users. This API allows administrators to manage the virtual stock inventory effectively.\n\nThe operation enforces verification of the stockItemId as a UUID. Deletion is handled as a hard delete since soft deletion is managed by Prisma but business rule requires permanent removal of the stock item and cleanup.\n\nSecurity: The endpoint is restricted to admin roles for authorization controls.\n\nThis is a critical administrative operation and should be guarded with logging and auditing to track stock removals.\n\nRelated APIs include stock listing, updating, and adding new stocks.","description":"Permanently delete a virtual stock item identified by its stockItemId. This operation will remove the stock from listings and refund all user holdings associated with this stock. The operation performs a hard delete of the record from the chatbot_stock_items table.\n\nOnly administrators can call this API to maintain system integrity.\n\nError handling includes 404 if the stock does not exist and business logic handling for refunding user holdings and adjusting balances.","summary":"Delete a virtual stock item by ID (hard delete)","parameters":[{"name":"stockItemId","description":"The unique identifier (UUID) of the stock item to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"eraseStockItem","path":"/chatbot/admin/stockItems/{stockItemId}","method":"delete","authorizationRole":"admin","authorizationType":null},{"specification":"This operation retrieves a list of stock holdings owned by a specific chatbot member, identified by memberId. It returns a paginated and optionally filtered list from the chatbot_stock_holdings table which links users to their stock items with quantities held.\n\nThe operation accepts the memberId as a UUID path parameter and supports paging, filtering, and sorting through the request body defined by IChatbotChatbotMembersStockHoldings.IRequest DTO. The response returns paginated stock holdings with detailed stock item information.\n\nSecurity: The endpoint requires authorization by authenticated user roles (e.g., \"member\") to ensure members can access their own holdings securely.\n\nThe operation is read-only and intended for chatbot members to review their virtual stock portfolio details.","description":"Retrieve a paginated list of stock holdings for a specified chatbot member. The response includes stock item details and quantity held. Supports filtering and sorting parameters for advanced queries.\n\nSecurity considerations ensure that members can only access their own holdings appropriately.\n\nThis operation acts upon the chatbot_stock_holdings table with related chatbot_stock_items to provide full context of owned stocks.\n\nValidation ensures memberId is a valid UUID and request parameters conform to IChatbotChatbotMembersStockHoldings.IRequest schema.\n\nRelated operations include purchasing and selling stocks which modify holdings.","summary":"Get list of stock holdings owned by a member","parameters":[{"name":"memberId","description":"Unique identifier (UUID) of the chatbot member whose stock holdings are requested","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Parameters for pagination, filtering, and sorting of stock holdings","typeName":"IChatbotChatbotMembersStockHoldings.IRequest"},"responseBody":{"description":"Paginated list of stock holdings owned by the member","typeName":"IPageIChatbotStockHoldings.ISummary"},"authorizationRoles":["member"],"name":"indexStockHoldingsByMember","path":"/chatbot/member/chatbotMembers/{memberId}/stockHoldings","method":"patch","authorizationRole":"member","authorizationType":null},{"specification":"This operation fetches detailed information for a specific stock holding by its unique identifier stockHoldingId, owned by a particular chatbot member identified by memberId. It reads from the chatbot_stock_holdings table linked to both chatbot_members and chatbot_stock_items.\n\nThe path parameters memberId and stockHoldingId must be valid UUIDs. The operation returns a detailed DTO IChatbotStockHoldings with comprehensive info about the holding and associated stock item.\n\nSecurity: Accessible to authorized users with the role \"member\" only.\n\nUse case: Allows members or authorized systems to view details of specific stock holdings.\n\nValidation includes ensuring the combination of memberId and stockHoldingId exists and is accessible by the user requesting.","description":"Retrieve detailed information about a specific stock holding belonging to a chatbot member. Includes stock item metadata and holding quantity.\n\nSecurity controls ensure only authorized users with access to the member's holdings can fetch this data.\n\nDirectly queries chatbot_stock_holdings and associated stock items for full context.\n\nValidation enforces UUID format for path parameters and existence of the record.\n\nRelated to stock holding listing and transactions for management.","summary":"Get detailed stock holding info by IDs","parameters":[{"name":"memberId","description":"Target chatbot member's unique identifier (UUID)","schema":{"type":"string","format":"uuid"}},{"name":"stockHoldingId","description":"Specific stock holding record unique identifier (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the stock holding","typeName":"IChatbotStockHoldings"},"authorizationRoles":["member"],"name":"atStockHoldingByMember","path":"/chatbot/member/chatbotMembers/{memberId}/stockHoldings/{stockHoldingId}","method":"get","authorizationRole":"member","authorizationType":null},{"specification":"This operation creates a new stock holding record associated with a specific chatbot member. It allows adding new shares of a stock item to the user's portfolio for managing the virtual stock trading game. The operation corresponds to the chatbot_stock_holdings table in the Prisma schema, linking the member ID with stock item holdings. Validation involves ensuring the memberId in the path exists, and the request body specifies valid stock item and quantity information according to the IChatbotStockHolding.ICreate schema. This provides the ability to increase or initialize stock holdings for the member.","description":"Create a new stock holding entry for a specific chatbot member.\n\nThis operation allows the system to add stock holdings for a user in the virtual stock trading game, linking the holding to the member's internal ID.\n\nAuthorization is required to ensure only permitted users or admins add holdings.\n\nThe path parameter `memberId` identifies the target member whose stock portfolio is being modified.\n\nThe request body includes necessary details such as stock item and quantity.\n\nUpon success, the operation returns the created stock holding record with its unique ID and timestamps, as stored in the chatbot_stock_holdings table.\n\nErrors may result from invalid member IDs or improper request body formats.\n\nThis operation is part of the chatbot stock holdings management in the chatbot system.","summary":"Create a stock holding record for a chatbot member","parameters":[{"name":"memberId","description":"Unique identifier of the target chatbot member","schema":{"type":"string","format":"uuid"},"in":"path"}],"requestBody":{"description":"Details for creating a stock holding record","typeName":"IChatbotStockHolding.ICreate"},"responseBody":{"description":"Created stock holding record","typeName":"IChatbotStockHolding"},"authorizationType":null,"authorizationRole":"member","name":"create","path":"/chatbot/member/chatbotMembers/{memberId}/stockHoldings","method":"post"},{"specification":"This operation updates an existing stock holding record linked to a chatbot member identified by memberId and stockHoldingId path parameters. It enables modification of holding quantity or related fields, reflecting changes in the member's virtual stock portfolio. The operation is based on the chatbot_stock_holdings table in the Prisma schema. Validation ensures the existence of the member and stock holding, and the request body conforms to the IChatbotStockHolding.IUpdate schema. It enables members or authorized users to adjust their stock holdings as part of gameplay or administrative corrections.","description":"Update details of an existing stock holding record for a chatbot member.\n\nThis operation modifies the quantity or related properties of a stock holding linked to a specified member. It supports gameplay features such as buying and selling stocks.\n\nPath parameters `memberId` and `stockHoldingId` target the holding to update.\n\nRequest body must conform to the IChatbotStockHolding.IUpdate schema.\n\nSuccessful updates return the updated stock holding.\n\nAuthorization requires the user role to ensure only permitted operations.\n\nErrors occur for invalid IDs or invalid payloads.\n\nPart of chatbot member stock management features.","summary":"Update a chatbot member's stock holding","parameters":[{"name":"memberId","description":"Unique identifier of the target chatbot member","schema":{"type":"string","format":"uuid"},"in":"path"},{"name":"stockHoldingId","description":"Unique identifier of the target stock holding record","schema":{"type":"string","format":"uuid"},"in":"path"}],"requestBody":{"description":"Stock holding update information","typeName":"IChatbotStockHolding.IUpdate"},"responseBody":{"description":"Updated stock holding record","typeName":"IChatbotStockHolding"},"authorizationType":null,"authorizationRole":"member","name":"update","path":"/chatbot/member/chatbotMembers/{memberId}/stockHoldings/{stockHoldingId}","method":"put"},{"specification":"This operation removes a stock holding record for a specific chatbot member identified by memberId and stockHoldingId. It deletes the user's holding entry from their portfolio in the virtual stock trading game, based on the chatbot_stock_holdings table. This hard delete operation permanently removes the record from the database. Validation includes verifying path parameters exist and are valid UUIDs. The operation requires appropriate user authorization to ensure only owners or admins can erase holdings.","description":"Delete a stock holding record associated with a chatbot member.\n\nThis operation permanently removes the specified stock holding entry from the user's portfolio.\n\nPath parameters include `memberId` and `stockHoldingId` which uniquely identify the target holding.\n\nNo request body is needed.\n\nAuthorization roles ensure only owners or admins can perform this deletion.\n\nSuccessful deletion returns no content.\n\nThis is a hard delete operation with permanent removal of the record.\n\nErrors can result from invalid identifiers or lack of permissions.","summary":"Delete a chatbot member's stock holding record","parameters":[{"name":"memberId","description":"Unique identifier of the target chatbot member","schema":{"type":"string","format":"uuid"},"in":"path"},{"name":"stockHoldingId","description":"Unique identifier of the target stock holding record","schema":{"type":"string","format":"uuid"},"in":"path"}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"erase","path":"/chatbot/member/chatbotMembers/{memberId}/stockHoldings/{stockHoldingId}","method":"delete"},{"specification":"This operation retrieves a paginated list of stock transactions belonging to a specific chatbot member, identified by the memberId path parameter. It fetches the stock transaction history for the member, serving as an audit and activity log for all buy/sell transactions performed by the user. Based on the chatbot_stock_transactions table in the Prisma schema, this operation supports filtering and pagination through the request body conforming to the IChatbotStockTransaction.IRequest schema. The response body returns a paginated collection of chatbot stock transactions matching the search criteria. Authorization requires the \"member\" role, ensuring the member can only query their own transaction records.","description":"Retrieve a paginated list of stock transactions for a specified chatbot member.\n\nThis operation supports querying transaction history for auditing and review purposes.\n\nPath parameter `memberId` specifies the user whose transactions are being listed.\n\nSupports filters and pagination via the request body described in IChatbotStockTransaction.IRequest.\n\nResponse includes a page of transaction records matching the request criteria.\n\nAuthorization limits access to authenticated users to protect privacy.\n\nErrors may occur for invalid member IDs or improper request filters.\n\nPart of the chatbot stock transaction management suite.","summary":"List stock transactions for a chatbot member","parameters":[{"name":"memberId","description":"Unique identifier of the target chatbot member","schema":{"type":"string","format":"uuid"},"in":"path"}],"requestBody":{"description":"Search and pagination parameters for listing stock transactions","typeName":"IChatbotStockTransaction.IRequest"},"responseBody":{"description":"Paginated list of matching stock transactions","typeName":"IPageIChatbotStockTransaction"},"authorizationType":null,"authorizationRole":"member","name":"index","path":"/chatbot/member/chatbotMembers/{memberId}/stockTransactions","method":"patch"},{"specification":"This operation fetches detailed information about a specific stock transaction made by a chatbot member. It operates on the chatbot_stock_transactions table as defined in the Prisma schema. The transaction is uniquely identified by stockTransactionId and belongs to the member identified by memberId. This API returns full details such as the transaction type (buy or sell), quantity, unit price, fee, total price, and the transaction timestamp. It supports auditing and detailed review of each stock transaction.","description":"Retrieve detailed information of a particular stock transaction performed by a chatbot member. This operation requires identifying the member by their unique UUID (memberId) and the target stock transaction by its unique UUID (stockTransactionId).\n\nSecurity considerations ensure that only authorized clients can access transaction details relevant to a member. The response includes all attributes as stored in the chatbot_stock_transactions Prisma model, with references to the owning user and associated stock item.\n\nThis API is read-only and does not alter any database records. It supports frontend views and administrative audits of trading history.\n\nErrors may occur if the member or transaction does not exist or if the transaction does not belong to the specified member.\n\nRelated operations: POST /chatbotMembers/{memberId}/stockTransactions to create a new stock transaction, PUT /chatbotMembers/{memberId}/stockTransactions/{stockTransactionId} to modify, and DELETE /chatbotMembers/{memberId}/stockTransactions/{stockTransactionId} to remove transactions permanently.","summary":"Get a specific stock transaction of a chatbot member","parameters":[{"name":"memberId","in":"path","description":"Unique identifier of the chatbot member","schema":{"type":"string","format":"uuid"}},{"name":"stockTransactionId","in":"path","description":"Unique identifier of the stock transaction","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed stock transaction information for the specified transaction ID","typeName":"IChatbotStockTransactions"},"authorizationType":null,"authorizationRole":"member","name":"at","path":"/chatbot/member/chatbotMembers/{memberId}/stockTransactions/{stockTransactionId}","method":"get"},{"specification":"This operation creates a new stock transaction record for a chatbot member in the virtual stock trading system. It creates a buy or sell transaction with details including the stock item, quantity, unit price, and fees. It updates the member's holdings and points accordingly. The operation must validate sufficient points and holdings, apply transaction fees, and record the transaction atomically.\n\nBased on the Prisma schema, the transaction references the chatbot_members and chatbot_stock_items tables, linking member and stock data. The transaction_type must be 'buy' or 'sell'. This operation supports real trading actions triggered by member commands.\n\nSecurity ensures only authenticated users can create transactions related to their memberId. Failures include insufficient points, invalid stock items, or concurrency conflicts.\n\nRelated operations include GET to retrieve transactions, PUT to update, and DELETE to erase records.","description":"Create a new stock transaction for a chatbot member in the system. The request body must include transaction type (buy/sell), stock item ID, quantity, unit price, fees, and total price. The service will validate sufficient points or holdings based on transaction type and update the member's records.\n\nThis operation supports real-time trading within the chatbot's virtual stock minigame, ensuring atomicity and consistency.\n\nFailure responses will indicate reasons such as insufficient points or holdings, or invalid stock codes.","summary":"Create a new stock transaction for a chatbot member","parameters":[{"name":"memberId","in":"path","description":"Unique identifier of the chatbot member","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The necessary information to create a new stock transaction record","typeName":"IChatbotStockTransactions.ICreate"},"responseBody":{"description":"The created stock transaction record","typeName":"IChatbotStockTransactions"},"authorizationType":null,"authorizationRole":"member","name":"create","path":"/chatbot/member/chatbotMembers/{memberId}/stockTransactions","method":"post"},{"specification":"This operation updates an existing stock transaction record for a chatbot member. The operation requires the unique identifiers for both the member and the stock transaction and includes a full request body with updatable fields.\n\nThe fields allowed for update correspond to those defined in the chatbot_stock_transactions Prisma schema and may include transaction_type, quantity, price_per_unit, transaction_fee, and total_price. The update should preserve data integrity and consistency.\n\nOnly authorized users mapped to the specified memberId should be able to perform updates, ensuring ownership and permission correctness.\n\nRelated endpoints include GET to retrieve the transaction, POST to create new transactions, and DELETE to remove them permanently.","description":"Update an existing stock transaction for a chatbot member. The API accepts full update data in the request body, including transaction type, quantity, unit price, fees, and total price. It validates and saves the data, ensuring transactional integrity.\n\nThis operation is necessary for correcting or adjusting recorded transactions. Authorization ensures the member owns the transaction.\n\nErrors may result from invalid data, unauthorized access, or non-existent records.","summary":"Update a stock transaction of a chatbot member","parameters":[{"name":"memberId","in":"path","description":"Unique identifier of the chatbot member","schema":{"type":"string","format":"uuid"}},{"name":"stockTransactionId","in":"path","description":"Unique identifier of the stock transaction","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated data for the stock transaction","typeName":"IChatbotStockTransactions.IUpdate"},"responseBody":{"description":"The updated stock transaction record","typeName":"IChatbotStockTransactions"},"authorizationType":null,"authorizationRole":"member","name":"update","path":"/chatbot/member/chatbotMembers/{memberId}/stockTransactions/{stockTransactionId}","method":"put"},{"specification":"This operation permanently removes a stock transaction record from the chatbot system database. The deletion is final and removes the record identified by stockTransactionId belonging to the member identified by memberId.\n\nThe operation enforces authorization to ensure only the owning member or authorized admins can erase transactions.\n\nThis action cannot be undone. It is distinct from soft delete behavior since the Prisma schema shows no deleted_at field on chatbot_stock_transactions model.\n\nUse this operation to clean up erroneous or obsolete stock transactions.\n\nThis endpoint complements the CRUD cycle including create, read, update, and delete of stock transactions.","description":"Permanently delete a specific stock transaction of a chatbot member from the database. This operation performs a hard delete without soft delete handling.\n\nOnly authorized users may delete their own transactions.\n\nAfter deletion, the transaction will no longer appear in any queries or reports.\n\nErrors occur if the transaction or member does not exist or if access is unauthorized.","summary":"Delete a stock transaction of a chatbot member","parameters":[{"name":"memberId","in":"path","description":"Unique identifier of the chatbot member","schema":{"type":"string","format":"uuid"}},{"name":"stockTransactionId","in":"path","description":"Unique identifier of the stock transaction","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"erase","path":"/chatbot/member/chatbotMembers/{memberId}/stockTransactions/{stockTransactionId}","method":"delete"},{"specification":"This operation retrieves a paginated list of virtual stock price snapshot entries from the chatbot_stock_price_snapshots table, the authoritative source for historical stock price points recorded at specific timestamps. It supports filtering, searching, sorting, and pagination to provide clients with access to stock price history for analysis and audit purposes. The entity includes polymorphic relations with stock items and timestamps, facilitating historical trend queries.","description":"Retrieve a filtered and paginated list of virtual stock price snapshots. Each snapshot represents the price of a particular stock item at a given timestamp, stored in UTC.\n\nThis operation allows clients to search for snapshots by stock item ID and timestamp ranges, enabling historical data analysis and auditing. Pagination and sorting facilitate effective browsing of large datasets.\n\nSecurity considerations include ensuring that only authorized users can access stock price data. Given that stock prices are public within the system, this endpoint is typically unrestricted.\n\nThis operation directly reads from the chatbot_stock_price_snapshots table, reflecting immutable historical price data. It is essential for the virtual stock trading minigame's market price tracking.\n\nClients can use this operation in conjunction with detail endpoints that retrieve specific snapshot entries.\n\nNo data modification occurs with this GET operation; it is purely informational.","summary":"Search and retrieve paginated virtual stock price snapshots","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for stock price snapshots filtering","typeName":"IChatbotStockPriceSnapshot.IRequest"},"responseBody":{"description":"Paginated list of stock price snapshots matching search criteria","typeName":"IPageIChatbotStockPriceSnapshot"},"authorizationType":null,"authorizationRole":null,"path":"/chatbot/stockPriceSnapshots","method":"patch","name":"index"},{"specification":"This operation retrieves detailed information about a specific virtual stock price snapshot by its unique ID from the chatbot_stock_price_snapshots table. It provides comprehensive data about the stock price at a precise snapshot time, including the associated stock item reference.\n\nThe snapshot data is immutable and serves audit, analytics, and historical record purposes. Clients use this endpoint to access exact historical pricing for analysis or display.\n\nSecurity considerations mirror those of the list endpoint; price data is publicly accessible within the system context.\n\nThis detailed retrieval operation is integral to the virtual stock module's market data feature, linking to related snapshots and entities.","description":"Retrieve a specific virtual stock price snapshot by its unique identifier. This snapshot includes the stock item ID, snapshot timestamp, and price in points.\n\nThe data is immutable and serves as a historical record for stock price changes. This operation enables clients to obtain precise details for audit, analytics, or display purposes.\n\nSecurity considerations allow open access as price snapshots are public data internally.\n\nThis operation directly queries the chatbot_stock_price_snapshots table using its primary key.\n\nClients can combine this operation with list endpoints for comprehensive historical stock data management.","summary":"Retrieve details of a specific stock price snapshot","parameters":[{"name":"stockPriceSnapshotId","description":"Unique identifier of the virtual stock price snapshot","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the specified stock price snapshot","typeName":"IChatbotStockPriceSnapshot"},"authorizationType":null,"authorizationRole":null,"path":"/chatbot/stockPriceSnapshots/{stockPriceSnapshotId}","method":"get","name":"at"},{"specification":"This operation searches and returns a paginated list of virtual stock price update records from the chatbot_stock_price_updates table, which logs daily updates to stock prices or manual adjustments by admins.\n\nThese entries include information about the admin who triggered the update (if any), the update date, and any notes associated with the change. The endpoint supports filtering, sorting, and pagination.\n\nThis endpoint is critical for administrative auditing and historical tracking of stock price changes and updates.\n\nSecurity considerations recommend restricting access to admin roles due to the sensitive nature of price update logs. However, role enforcement can be adapted to business requirements.","description":"Retrieve paginated stock price update events with details about the admin actor (optional), update date, and notes.\n\nThese update events provide historical log information for auditing and system monitoring related to stock price changes.\n\nAccess control is recommended to restrict this data to authorized administrative users.\n\nThis operation interfaces with the chatbot_stock_price_updates table, preserving immutable audit log entries.\n\nRelated operations include retrieving detailed single updates and associated stock price snapshots.","summary":"Search and retrieve paginated stock price update events","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for stock price updates filtering","typeName":"IChatbotStockPriceUpdate.IRequest"},"responseBody":{"description":"Paginated list of stock price update events matching criteria","typeName":"IPageIChatbotStockPriceUpdate"},"authorizationType":null,"authorizationRole":"admin","path":"/chatbot/admin/stockPriceUpdates","method":"patch","name":"index"},{"specification":"This operation retrieves detailed information for a specific stock price update event by its unique ID from the chatbot_stock_price_updates table.\n\nThe event includes the admin who triggered the update (nullable), the date of the update, associated notes, and creation timestamp.\n\nThis read operation supports auditing and monitoring of admin-initiated stock price changes.\n\nAccess control should restrict this data to authorized admins only due to the sensitivity of historical administrative actions.\n\nClients can use this detail endpoint in conjunction with list queries to analyze stock price update history comprehensively.","description":"Retrieve detailed information about a specific stock price update event.\n\nThe details include the admin user who triggered the update (if any), the update date and notes, plus creation time.\n\nThis data supports auditing and tracking of price change events in the virtual stock system.\n\nSecurity requires this data be accessible only to admin users.\n\nQuery by primary key from the chatbot_stock_price_updates table.\n\nThis operation complements the stock price update list retrieval.","summary":"Retrieve details of a specific stock price update event","parameters":[{"name":"stockPriceUpdateId","description":"Unique identifier of the stock price update event","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed stock price update event information","typeName":"IChatbotStockPriceUpdate"},"authorizationType":null,"authorizationRole":"admin","path":"/chatbot/admin/stockPriceUpdates/{stockPriceUpdateId}","method":"get","name":"at"},{"specification":"This operation retrieves a paginated list of slot machine plays from the chatbot system. It supports searching, filtering, sorting, and pagination. The underlying entity is the chatbot_slotmachine_plays table, which records each slot machine play with detailed information including user reference, bet points, slot results, payout points, and timestamps. The operation returns summarized information suitable for listing multiple play records. Role authorization is set for authenticated users with role 'member'.","description":"Retrieve a filtered and paginated list of slot machine play records from the chatbot system. This operation allows searching by user or date ranges, sorting by timestamp, and applies pagination controls.\n\nThis operation is intended for authenticated users to review slot machine play history either for personal review or for administrative oversight.\n\nThe returned data includes information about the player, bet amount, slot results, payout, and the time played.\n\nSecurity ensures only authorized users indexed as 'member' can invoke this endpoint.\n\nThe chatbot_slotmachine_plays table holds the records with references to chatbot_members for player identification and audit.\n\nProper validation and error handling apply if input parameters for filtering or pagination are invalid.\n\nRelated operations include creating slot machine plays and viewing details of a specific play.\n","summary":"List and search slot machine play records","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for slot machine plays","typeName":"IChatbotSlotmachinePlay.IRequest"},"responseBody":{"description":"Paginated list of slot machine play summaries matching search criteria","typeName":"IPageIChatbotSlotmachinePlay.ISummary"},"authorizationType":null,"authorizationRole":"member","name":"index","path":"/chatbot/member/slotmachine/plays","method":"patch"},{"specification":"This operation retrieves detailed information about a specific slot machine play identified by its unique ID. It returns the full details including user information, bet points, slot results, payout points, and timestamp. The operation uses the chatbot_slotmachine_plays table as the data source.\n\nAccess control restricts this operation to authenticated users.\n\nValidation ensures the play ID is a valid UUID.\n\nIf the requested ID does not exist, a 404 error will be returned.\n","description":"Retrieve detailed information for a single slot machine play by its unique identifier.\n\nThis operation returns all data about the play including the player, bet amount, individual slot outcomes, payout, and timestamp.\n\nOnly authenticated users with role 'member' are allowed to access this endpoint.\n\nThe play ID path parameter must be a valid UUID corresponding to an existing record.\n\nIf the record is not found, the system returns an appropriate error response.\n\nThis operation complements the list/search operation that retrieves multiple records.","summary":"Get slot machine play details by ID","parameters":[{"name":"id","description":"Unique identifier of the slot machine play","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed slot machine play information","typeName":"IChatbotSlotmachinePlay"},"authorizationType":null,"authorizationRole":"member","name":"at","path":"/chatbot/member/slotmachine/plays/{id}","method":"get"},{"specification":"This operation creates a new slot machine play record in the chatbot system. It records the user who played, bet points, slot results, payout points, and the creation timestamp. The underlying data model is the chatbot_slotmachine_plays table, capturing detailed play information for audit and gameplay tracking.\n\nAuthorization ensures only authenticated users can create plays.\n\nInput validation requires all required fields matching the ICreate DTO schema for a slot machine play.\n\nResponse returns the created slot machine play with full details including generated ID and timestamps.\n\nThis operation does not modify any other system entities and solely records the play event.","description":"Create a new slot machine play record capturing bet, slot results, and payout.\n\nOnly authenticated users can invoke this operation.\n\nInput data must conform to the required creation schema.\n\nSuccessful creation returns the full play record including auto-generated id.\n\nThis operation supports recording user gameplay in the slot machine minigame.","summary":"Record a new slot machine play","parameters":[],"requestBody":{"description":"Creation data for new slot machine play","typeName":"IChatbotSlotmachinePlay.ICreate"},"responseBody":{"description":"Newly created slot machine play information","typeName":"IChatbotSlotmachinePlay"},"authorizationType":null,"authorizationRole":"member","name":"create","path":"/chatbot/member/slotmachine/plays","method":"post"},{"specification":"This operation updates an existing slot machine play record identified by its unique ID. It allows modification of the bet points, slot results, payout points, and related fields as defined in the update schema for chatbot_slotmachine_plays.\n\nOnly authenticated users with role 'member' have permission to update slot machine play records.\n\nInput validation requires the ID path parameter to be a valid UUID and the request body to conform to the update DTO schema.\n\nThe response returns the updated slot machine play details reflecting the changes.\n\nThis operation supports administration and corrections in recorded slot machine plays.","description":"Update the details of a slot machine play identified by its unique ID.\n\nThis includes changing bet points, slot results, payout, or other modifiable fields.\n\nThe play ID is required as a path parameter and must be a valid UUID.\n\nThe request body must conform to the defined update schema.\n\nOnly authorized users may perform this update.\n\nResponse includes updated slot machine play information.","summary":"Update slot machine play by ID","parameters":[{"name":"id","description":"Unique identifier of the slot machine play to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for slot machine play","typeName":"IChatbotSlotmachinePlay.IUpdate"},"responseBody":{"description":"Updated slot machine play information","typeName":"IChatbotSlotmachinePlay"},"authorizationType":null,"authorizationRole":"member","name":"update","path":"/chatbot/member/slotmachine/plays/{id}","method":"put"},{"specification":"This operation deletes a single slot machine play record from the chatbot system by its unique identifier (UUID). It interacts with the `chatbot_slotmachine_plays` table in the Prisma schema, which stores individual slot machine game play records including bet amount, slot results, payout, and timestamps linked to members by their IDs. This delete operation performs a hard delete, permanently removing the record from the database. No request body or response body is needed. Authorization is restricted to the `member` role as defined in the Prisma schema representing authenticated chatbot members who play the slot machine game.","description":"This DELETE operation permanently removes a slot machine play record identified by its UUID from the chatbot_slotmachine_plays table in the database.\n\nThe operation requires the ID of the slot machine play record as a path parameter. It is intended for use by authenticated members who have permission to manage their own slot machine play records.\n\nSince the Prisma schema does not include soft deletion fields for this table, this delete is a hard delete and completely removes the record from the database. There is no request or response body associated with this operation.\n\nIf the record with the given ID does not exist, an appropriate error should be returned. This operation must be secured so that only authorized members can access it.","summary":"Delete a slot machine play record by unique ID","parameters":[{"name":"id","in":"path","description":"Unique identifier of the slot machine play record to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"erase","path":"/chatbot/member/slotmachine/plays/{id}","method":"delete"},{"specification":"This operation retrieves a paginated list of command log records executed by chatbot members. It operates on the `chatbot_command_logs` table containing audit logs of commands issued within the chatbot system. This enables admins to search, filter, and examine command logs based on complex criteria specified in the request body. The returned result includes summaries suitable for paginated viewing. Authorization is restricted to the admin role as defined in the Prisma schema representing chatbot administrators.","description":"Retrieve a filtered, paginated list of chatbot command logs which record execution details of commands across the chatbot system.\n\nRequest parameters allow searching and pagination based on fields such as command text, user ID, and execution date. The response contains paginated command log summaries matching the criteria.\n\nThis operation is intended for use only by users with administrative privileges.","summary":"Search and list chatbot command logs with filters and pagination","parameters":[],"requestBody":{"description":"Search and pagination parameters for chatbot command log filtering","typeName":"IChatbotCommandLog.IRequest"},"responseBody":{"description":"Paginated summary list of chatbot command logs","typeName":"IPageIChatbotCommandLog.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/chatbot/admin/chatbotCommandLogs","method":"patch"},{"specification":"This operation retrieves detailed information about a specific chatbot command log entry identified by its unique identifier (UUID). It operates on the `chatbot_command_logs` table, which stores records of all commands executed by chatbot members including timestamps and parameters. This enables audit-level inspection of individual commands. Authorization is restricted to the admin role as defined in the Prisma schema representing chatbot administrators.","description":"Retrieve detailed information of a chatbot command log record by its unique ID.\n\nThe chatbot_command_logs table contains comprehensive log records of commands executed including executor details, command string, parameters, and execution timestamps.\n\nThis operation is reserved for admin users who are authorized to audit system command usage.\n\nIf the command log record does not exist for the provided ID, an error should be returned.","summary":"Get detailed chatbot command log record by ID","parameters":[{"name":"chatbotCommandLogId","in":"path","description":"Unique identifier of the chatbot command log to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed chatbot command log record information","typeName":"IChatbotCommandLog"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/chatbot/admin/chatbotCommandLogs/{chatbotCommandLogId}","method":"get"},{"specification":"This operation creates a new chatbot command log entry capturing details about an executed command in the chatbot system. It models the creation of a record in the `chatbot_command_logs` table storing information such as the member who executed the command, the command string, parameters, and timestamp. The request body must follow the `IChatbotCommandLog.ICreate` schema. The response returns the newly created command log record. This operation is authorized for authenticated members as defined in the Prisma schema.","description":"Create a new chatbot command log recording an executed command.\n\nThe created record includes member ID of the executor, exact command string, optional parameters, and creation timestamp.\n\nThis operation requires a request body adhering to the `IChatbotCommandLog.ICreate` schema.\n\nOnly authenticated members can create command logs.\n\nReturns the created command log with full details and assigned unique ID.","summary":"Create a new chatbot command log record","parameters":[],"requestBody":{"description":"Creation data for the chatbot command log","typeName":"IChatbotCommandLog.ICreate"},"responseBody":{"description":"New chatbot command log record information","typeName":"IChatbotCommandLog"},"authorizationRoles":["member"],"name":"create","path":"/chatbot/member/chatbotCommandLogs","method":"post","authorizationRole":"member","authorizationType":null},{"specification":"This operation updates an existing chatbot command log identified by its unique ID. It allows modification of the command and its parameters associated with a chatbot member. The operation works on the 'chatbot_command_logs' table, which stores all executed user commands for auditing and tracking purposes. The update operation ensures that the specified command log entry is modified with new data while maintaining the integrity of the relation to its user member through 'chatbot_member_id'. Only authenticated users with the 'member' role are allowed to perform this operation to maintain security and accountability.","path":"/chatbot/member/chatbotCommandLogs/{chatbotCommandLogId}","method":"put","summary":"Update a chatbot command log entry by ID","description":"Update a chatbot command log entry by its ID, modifying the command text and parameters. This API operation requires the unique identifier of the command log entry as a path parameter. The request body must contain the updated command details structured as per the IChatbotChatbotCommandLogs.IUpdate schema, ensuring consistency with the database model.\n\nOnly users with the role 'member' can execute this operation.\n\nThis operation will overwrite the existing command and parameters, maintaining the historical link to the member who executed the command. Proper validation is expected to ensure the command log exists and the new data adheres to the expected format.\n\nNo response body is returned upon success, but the HTTP success status indicates the update was successful.","parameters":[{"name":"chatbotCommandLogId","description":"Unique identifier of the chatbot command log entry to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request body for updating a chatbot command log entry","typeName":"IChatbotChatbotCommandLogs.IUpdate"},"responseBody":{"description":"Updated chatbot command log entry","typeName":"IChatbotChatbotCommandLogs"},"authorizationType":null,"authorizationRole":"member","name":"update"},{"specification":"This operation deletes an existing chatbot command log from the system identified by its unique ID. It permanently removes the command log entry from the 'chatbot_command_logs' table, which holds historical execution records of chatbot commands by members for auditing. Deleting a command log implies removing all traces of the record from the database.\n\nPerforming this operation requires the 'member' role authorization to restrict deletion permissions to authenticated users only for security reasons.","path":"/chatbot/member/chatbotCommandLogs/{chatbotCommandLogId}","method":"delete","summary":"Delete a chatbot command log entry by ID","description":"Delete a chatbot command log entry by its ID. This operation permanently removes the record from the database and cannot be undone.\n\nOnly users with the role 'member' can execute this operation.\n\nNo response body is returned. Successful execution is indicated by HTTP status codes.\n\nUse this operation carefully as it deletes historical audit records.","parameters":[{"name":"chatbotCommandLogId","description":"Unique identifier of the chatbot command log entry to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"erase"},{"specification":"This operation retrieves a filtered and paginated list of audit logs from the chatbot system. The audit logs capture critical operational events such as command executions, minigame plays, stock transactions, and stock price changes. This API accesses the 'chatbot_audit_logs' table and supports advanced search criteria, filtering by event types, user IDs, room tuples, and date ranges.\n\nThe operation supports pagination to efficiently handle large datasets and returns summarized audit log data suitable for quick browsing and monitoring.\n\nAuthorization is granted only to users with the 'admin' role to ensure sensitive audit records are protected.","path":"/chatbot/admin/auditLogs","method":"patch","summary":"Search and retrieve filtered, paginated list of audit logs","description":"Retrieve a paged list of audit logs filtered by search criteria including event type, user, room, and date ranges. Supports advanced query parameters for pagination, sorting, and filtering.\n\nOnly admins with role 'admin' can access this endpoint.\n\nThe response includes audit log summaries suitable for administrative overview and troubleshooting. Pagination info is included to manage large data sets.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for audit log filtering","typeName":"IChatbotChatbotAuditLogs.IRequest"},"responseBody":{"description":"Paginated list of audit log summary results","typeName":"IPageIChatbotChatbotAuditLogs.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"search"},{"specification":"This operation fetches a single audit log entry by its unique ID from the 'chatbot_audit_logs' table. The audit logs record detailed events related to command executions, minigame plays, and stock transactions within the chatbot system. Access to this data is restricted to authorized admin users.\n\nThe retrieved audit log provides comprehensive details suitable for auditing, troubleshooting, and compliance purposes.\n\nOnly users with the 'admin' role can perform this operation, ensuring sensitive event data is securely accessed.","path":"/chatbot/admin/auditLogs/{auditLogId}","method":"get","summary":"Retrieve detailed audit log entry by ID","description":"Retrieve detailed information of an audit log entry by ID.\n\nOnly users with the 'admin' role can execute this operation.\n\nThe response includes all relevant audit event information to support administrative review and troubleshooting.","parameters":[{"name":"auditLogId","description":"Unique identifier of the audit log entry to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed audit log entry information","typeName":"IChatbotChatbotAuditLogs"},"authorizationType":null,"authorizationRole":"admin","name":"at"}],"components":{"authorization":[{"name":"member","description":"Authenticated user who can participate in chat rooms, gain points, play minigames, and view rankings.","kind":"member"},{"name":"admin","description":"Administrator with elevated permissions to manage rooms, users, points, titles, and game configurations.","kind":"admin"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageIChatbotRoomTuples.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IChatbotRoomTuples.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIChatbotAdmin.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IChatbotAdmin.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIChatbotMember.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IChatbotMember.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIChatbotPoints":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IChatbotPoints"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIChatbotChatbotPointCooldown":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IChatbotChatbotPointCooldown"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIChatbotChatbotTitle":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IChatbotChatbotTitle"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIChatbotUserTitle.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IChatbotUserTitle.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIChatbotStockItem.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IChatbotStockItem.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIChatbotStockHoldings.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IChatbotStockHoldings.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIChatbotStockTransaction":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IChatbotStockTransaction"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIChatbotStockPriceSnapshot":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IChatbotStockPriceSnapshot"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIChatbotStockPriceUpdate":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IChatbotStockPriceUpdate"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIChatbotSlotmachinePlay.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IChatbotSlotmachinePlay.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIChatbotCommandLog.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IChatbotCommandLog.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIChatbotChatbotAuditLogs.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IChatbotChatbotAuditLogs.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IChatbotMember":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key UUID of the chatbot member"},"internal_sender_id":{"type":"string","description":"Internal sender ID of the member"},"nickname":{"type":"string","description":"Display nickname of the member"},"created_at":{"type":"string","format":"date-time","description":"Member record creation timestamp"},"updated_at":{"type":"string","format":"date-time","description":"Member record last update timestamp"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp, if any"}},"required":["id","internal_sender_id","nickname","created_at","updated_at"],"description":"Core entity representing chatbot member users in normal rooms"},"IChatbotMember.ICreate":{"type":"object","properties":{"internal_sender_id":{"type":"string","description":"Internal unique identifier used by the system mapped from sender ID."},"nickname":{"type":"string","description":"Display nickname of the member."}},"required":["internal_sender_id","nickname"],"description":"Payload to create a new chatbot member with unique internal sender ID and nickname."},"IChatbotMember.ILogin":{"type":"object","properties":{"internal_sender_id":{"type":"string","description":"Internal unique identifier for the member.\n\nConfidential internal sender ID used for system mapping and privacy."},"nickname":{"type":"string","description":"Nickname displayed for the member in chat rooms.\n\nUser-visible display name, mutable."}},"required":["internal_sender_id","nickname"],"description":"Request body for member login.\n\nContains credentials or identifiers needed for authentication.\nInternal sender ID and nickname can be used for login process.\n\nNote: Actual credentials validation is handled securely."},"IChatbotMember.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"JWT refresh token string"}},"required":["refresh_token"],"description":"Request body to refresh JWT tokens.\n\nContains refresh token passed by client to renew access."},"IChatbotMember.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key UUID of authenticated member"},"internal_sender_id":{"type":"string","description":"Internal sender ID of the member"},"nickname":{"type":"string","description":"Nickname of the authorized member"},"created_at":{"type":"string","format":"date-time","description":"Member record creation timestamp"},"updated_at":{"type":"string","format":"date-time","description":"Member record last update timestamp"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp, if any"},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","internal_sender_id","nickname","created_at","updated_at","token"],"description":"Response body representing an authorized member user including JWT tokens."},"IChatbotAdmin":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Admin user primary key UUID"},"internal_sender_id":{"type":"string","description":"Internal unique sender ID for the admin"},"nickname":{"type":"string","description":"Admin user's display nickname"},"created_at":{"type":"string","format":"date-time","description":"Account creation timestamp"},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp if applicable"}},"required":["id","internal_sender_id","nickname","created_at","updated_at"],"description":"Chatbot administrator user entity for managing the system via admin rooms"},"IChatbotAdmin.ICreate":{"type":"object","properties":{"internal_sender_id":{"type":"string","description":"Internal unique identifier for the admin, mapped from external sender ID. Used internally for system identification."},"nickname":{"type":"string","description":"Nickname displayed for the admin in admin rooms, mutable by system."}},"required":["internal_sender_id","nickname"],"description":"Request body schema for creating a new admin user account in the chatbot system. Contains the internal sender ID used for system identification and the display nickname for the admin user."},"IChatbotAdmin.ILogin":{"type":"object","properties":{"internal_sender_id":{"type":"string","description":"Internal sender ID for admin login identification."},"nickname":{"type":"string","description":"Nickname or username for admin login purposes."}},"required":["internal_sender_id","nickname"],"description":"Request body schema for authenticating an admin user, requiring internal sender ID and nickname as credentials for login."},"IChatbotAdmin.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token string provided for renewing JWT authorization tokens."}},"required":["refresh_token"],"description":"Request body schema for refreshing JWT tokens for an admin user, requiring the refresh token as input."},"IChatbotAdmin.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique ID identifying the authorized admin user."},"internal_sender_id":{"type":"string","description":"Internal unique sender ID for the admin"},"nickname":{"type":"string","description":"Nickname of the admin user in the authorized response context."},"created_at":{"type":"string","format":"date-time","description":"Account creation timestamp"},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp if applicable"},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","internal_sender_id","nickname","created_at","updated_at","token"],"description":"Response body schema for an authorized admin user including their unique ID, nickname, and JWT token information."},"IChatbotRoomTuples.IRequest":{"type":"object","properties":{"normal_room_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by normal room ID"},"admin_room_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by admin room ID"},"unique_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by unique business ID"},"display_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by display name"},"enabled":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Filter by enablement status"},"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Pagination page number"},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Pagination limit count"}},"required":[],"description":"Request schema for filtering and paginating chatbot room tuples"},"IChatbotRoomTuples":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key UUID of the room tuple"},"normal_room_id":{"type":"string","description":"Identifier for the normal chat room used for member participation"},"admin_room_id":{"type":"string","description":"Identifier for the corresponding admin room controlling administrative commands"},"display_name":{"type":"string","description":"User-friendly display name"},"unique_id":{"type":"string","description":"Unique business identifier"},"enabled":{"type":"boolean","description":"Availability flag"},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp"},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp"}},"required":["id","normal_room_id","admin_room_id","display_name","unique_id","enabled","created_at","updated_at"],"description":"Chatbot room tuple mapping normal and admin rooms for session isolation and authorization"},"IChatbotRoomTuples.ICreate":{"type":"object","properties":{"normal_room_id":{"type":"string","description":"Identifier for the normal chat room used for member participation.\n\nMust be provided and uniquely identify the normal room."},"admin_room_id":{"type":"string","description":"Identifier for the corresponding admin room controlling administrative commands.\n\nMust be provided."},"display_name":{"type":"string","description":"User-friendly display name.\n\nRequired display name to identify this tuple."},"unique_id":{"type":"string","description":"Unique business identifier for this tuple.\n\nMust be unique and is required."},"enabled":{"oneOf":[{"type":"boolean","description":"Whether the tuple is enabled/active.\n\nDefaults to true if not provided."},{"type":"null"}],"description":"Whether the tuple is enabled/active.\n\nDefaults to true if not provided."}},"required":["normal_room_id","admin_room_id","display_name","unique_id"],"description":"Request schema for creating a new chatbot room tuple mapping."},"IChatbotRoomTuples.IUpdate":{"type":"object","properties":{"normal_room_id":{"oneOf":[{"type":"string","description":"Identifier for the normal chat room.\n\nOptional when updating. May remain unchanged."},{"type":"null"}],"description":"Identifier for the normal chat room.\n\nOptional when updating. May remain unchanged."},"admin_room_id":{"oneOf":[{"type":"string","description":"Identifier for the admin room.\n\nOptional when updating."},{"type":"null"}],"description":"Identifier for the admin room.\n\nOptional when updating."},"display_name":{"oneOf":[{"type":"string","description":"Display name.\n\nOptional update - may revise display text."},{"type":"null"}],"description":"Display name.\n\nOptional update - may revise display text."},"unique_id":{"oneOf":[{"type":"string","description":"Unique business identifier.\n\nOptional update - depends on business rules."},{"type":"null"}],"description":"Unique business identifier.\n\nOptional update - depends on business rules."},"enabled":{"oneOf":[{"type":"boolean","description":"Enabled flag.\n\nOptional update."},{"type":"null"}],"description":"Enabled flag.\n\nOptional update."}},"required":[],"description":"Request schema for updating an existing chatbot room tuple."},"IChatbotAdmin.IRequest":{"type":"object","properties":{"nickname":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter admins by nickname"},"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for pagination"},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Limit count for pagination"}},"required":[],"description":"Request schema for querying chatbot admins with filters and pagination"},"IChatbotAdmin.IUpdate":{"type":"object","properties":{"internal_sender_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Internal unique identifier for the admin, mapped from external sender ID, used for internal system logic and privacy."},"nickname":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Nickname displayed for the admin in admin rooms, mutable by system."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the admin record was soft-deleted (nullable)."}},"required":[],"description":"Allows partial update of admin user fields"},"IChatbotMember.IRequest":{"type":"object","properties":{"nickname":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter members by nickname"},"internal_sender_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter members by internal sender ID"},"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page index for pagination"},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Maximum number of records per page"}},"required":[],"description":"Request schema for searching chatbot members with filters and pagination"},"IChatbotMember.IUpdate":{"type":"object","properties":{"nickname":{"type":"string","description":"New nickname to update the chatbot member display name."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Nullable timestamp to mark or clear soft deletion status."}},"required":[],"description":"Payload to update chatbot member allowing optional nickname and deleted_at values."},"IChatbotPoints":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key - unique identifier of the chatbot points record."},"chatbot_member_id":{"type":"string","format":"uuid","description":"Referenced member's unique identifier owning these points."},"points":{"type":"integer","format":"int32","description":"Current total points accumulated by the user."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp."}},"required":["id","chatbot_member_id","points","created_at","updated_at"],"description":"Chatbot points entity representing current accumulated points for a member in the system. Points are critical for minigames and ranking.\n\nIncludes ownership reference, balance, and audit timestamps.\n"},"IChatbotPoints.IRequest":{"type":"object","properties":{"chatbot_member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional filter to select points for a specific member by ID."},"min_points":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Minimum number of points to filter by."},"max_points":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Maximum number of points to filter by."},"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for pagination support."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Maximum number of results per page."},"sort_by":{"oneOf":[{"const":"points"},{"const":"created_at"},{"const":"updated_at"},{"type":"null"}],"description":"Field to sort results by."},"sort_direction":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Direction of sorting."}},"required":[],"description":"Request schema defining filters, sorting, and pagination for points queries."},"IChatbotPoints.ICreate":{"type":"object","properties":{"chatbot_member_id":{"type":"string","format":"uuid","description":"Referenced member's unique identifier owning these points. Required to associate points entity."},"points":{"type":"integer","format":"int32","description":"Initial total points to set for the member upon creation."}},"required":["chatbot_member_id","points"],"description":"Request body for creating a new chatbot points record. Must include the member ID and initial points value.\n\nSystem-generated fields such as id, timestamps are not included as input.\n"},"IChatbotPoints.IUpdate":{"type":"object","properties":{"points":{"type":"integer","format":"int32","description":"Updated points value. Optional field for partial update."}},"required":[],"description":"Request body for updating chatbot points record. Only fields to modify need to be provided.\n\nPoints are the main mutable property.\n"},"IChatbotChatbotPointCooldown":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key - unique identifier of cooldown record."},"chatbot_member_id":{"type":"string","format":"uuid","description":"Referenced member's unique identifier to track cooldown for."},"last_point_time":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of the last point awarded to the member. Nullable to indicate no awards yet."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp."}},"required":["id","chatbot_member_id","created_at","updated_at"],"description":"Chatbot point cooldown record tracking last point award time per member to enforce 1-second cooldown policy. Used for fair point distribution and abuse prevention.\n\nIncludes references to member, last award timestamp, and audit timestamps.\n"},"IChatbotChatbotPointCooldown.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Optional page number for pagination."},"limit":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Optional limit of records per page."},"chatbot_member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional filter by member ID to narrow cooldown records."},"last_point_time_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional filter for cooldowns with last_point_time from this timestamp onward."},"last_point_time_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional filter for cooldowns with last_point_time up to this timestamp."}},"required":[],"description":"Request parameters for searching and paginating chatbot point cooldown records. Includes filters by member ID and time range, plus pagination parameters.\n\nSupports nullable properties for optional filters.\n"},"IChatbotChatbotTitle.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Page number for pagination.\n\nAllows clients to specify which page of results they want to retrieve."},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Maximum number of records per page.\n\nSupports requests for smaller or larger result sets with a cap for performance."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"General search term to filter titles by name.\n\nEnables keyword search capability on title names for easy access."},"fee_discount_rate_min":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Minimum fee discount rate filter.\n\nClients can set a floor to find titles granting at least this discount."},"fee_discount_rate_max":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Maximum fee discount rate filter.\n\nClients can set a ceiling to find titles granting no more than this discount."}},"required":[],"description":"Parameters for filtering and paginating the list of user titles.\n\nAllows clients to specify search criteria like page, limit, and discount rate range."},"IChatbotTitles":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the title."},"name":{"type":"string","description":"The name of the title visible to users and used for display purposes.\n\nThis is a business key for the title entity."},"fee_discount_rate":{"type":"integer","description":"The fee discount rate percentage this title grants on minigame transactions.\n\nIndicates the discount rate (0 to 100%)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the title record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the title record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the title record was soft-deleted, if applicable.\n\nNullable."}},"required":["id","name","fee_discount_rate","created_at","updated_at"],"description":"User title entity representing discount titles assignable to chatbot members.\n\nEach title includes a name, fee discount rate, and audit timestamps. Soft deletion is allowed.\n\nThis entity is a core part of the chatbot user title system supporting fee discounts on minigame transactions."},"IChatbotTitles.ICreate":{"type":"object","properties":{"name":{"type":"string","description":"The name of the title visible to users and used for display."},"fee_discount_rate":{"type":"integer","description":"Fee discount rate percentage granted by this title.\n\nInteger between 0 and 100 inclusive."}},"required":["name","fee_discount_rate"],"description":"Request body schema for creating a new user title.\n\nIncludes required name and fee discount rate fields for title creation."},"IChatbotTitles.IUpdate":{"type":"object","properties":{"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"The name of the title visible to users and used for display.\n\nOptional."},"fee_discount_rate":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Fee discount rate percentage granted by this title.\n\nOptional. Integer between 0 and 100 inclusive."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the title record was soft-deleted, if applicable.\n\nOptional."}},"required":[],"description":"Request body schema for updating an existing user title.\n\nAll properties are optional to support partial updates."},"IChatbotUserTitle":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique user title assignment identifier."},"chatbot_member_id":{"type":"string","format":"uuid","description":"Belonged user's {@link chatbot_members.id}. Ensures one-to-one relation representing the user's assigned title."},"chatbot_title_id":{"type":"string","format":"uuid","description":"Referenced title's {@link chatbot_titles.id}. The title assigned to the user."},"assigned_at":{"type":"string","format":"date-time","description":"Timestamp when the title was assigned to the user.\n\nISO 8601 date-time format."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the user-title association record was created.\n\nISO 8601 date-time format."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the user-title association record was last updated.\n\nISO 8601 date-time format."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the user-title association record was soft-deleted, if applicable.\n\nISO 8601 date-time format or null if not deleted."}},"required":["id","chatbot_member_id","chatbot_title_id","assigned_at","created_at","updated_at"],"description":"User title assignment entity representing the association of a user to an assigned title with assignment and audit timestamps.\n\nThis entity enforces the rule that each user has at most one active title at any time and tracks historical title assignments with soft delete support."},"IChatbotUserTitle.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Page number.\n\nOptional for pagination."},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Limit of records per page.\n\nOptional for pagination."},"chatbot_member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Search filter by chatbot_member_id.\n\nOptional filter parameter, UUID format."},"chatbot_title_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Search filter by chatbot_title_id.\n\nOptional filter parameter, UUID format."},"assigned_at_gte":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Search filter by assigned_at date range (start).\n\nOptional filter parameter, ISO 8601 date-time format."},"assigned_at_lte":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Search filter by assigned_at date range (end).\n\nOptional filter parameter, ISO 8601 date-time format."}},"required":[],"description":"Request parameters for searching and filtering chatbot user titles with pagination support.\n\nSupports filters for member association, title id, and assignment date range."},"IChatbotUserTitle.ICreate":{"type":"object","properties":{"chatbot_member_id":{"type":"string","format":"uuid","description":"Belonged user's {@link chatbot_members.id}. Must match existing user UUID."},"chatbot_title_id":{"type":"string","format":"uuid","description":"Referenced title's {@link chatbot_titles.id}. Must match existing title UUID."},"assigned_at":{"type":"string","format":"date-time","description":"Timestamp when the title was assigned to the user.\n\nISO 8601 date-time format."}},"required":["chatbot_member_id","chatbot_title_id","assigned_at"],"description":"Create request to assign a new user title to a member.\n\nIncludes member and title identifiers with assignment timestamp."},"IChatbotUserTitle.IUpdate":{"type":"object","properties":{"chatbot_member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Belonged user's {@link chatbot_members.id}.\n\nOptional update field, UUID format."},"chatbot_title_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Referenced title's {@link chatbot_titles.id}.\n\nOptional update field, UUID format."},"assigned_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the title was assigned to the user.\n\nOptional update field, ISO 8601 date-time format."}},"required":[],"description":"Update request for modifying a user title assignment.\n\nFields are optional to allow partial updates."},"IChatbotStockItem.IRequest":{"type":"object","properties":{"code":{"oneOf":[{"type":"string","description":"Optional filter by stock code."},{"type":"null"}],"description":"Optional filter by stock code."},"name":{"oneOf":[{"type":"string","description":"Optional filter by name."},{"type":"null"}],"description":"Optional filter by name."},"page":{"oneOf":[{"type":"integer","description":"Optional pagination page number."},{"type":"null"}],"description":"Optional pagination page number."},"limit":{"oneOf":[{"type":"integer","description":"Optional pagination limit."},{"type":"null"}],"description":"Optional pagination limit."},"order":{"oneOf":[{"type":"string","description":"Optional sorting order, e.g., 'asc' or 'desc'."},{"type":"null"}],"description":"Optional sorting order, e.g., 'asc' or 'desc'."}},"description":"Request parameters for filtered and paginated retrieval of chatbot stock items.\n\nSupports filtering by code and name, pagination, and ordering.","required":[]},"IChatbotStockItem":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key: unique identifier of the stock item."},"code":{"type":"string","description":"Unique business code for the stock item, used as identifier."},"name":{"type":"string","description":"Display name of the stock item for identification."},"initial_price":{"type":"integer","description":"Initial price of the stock item in points."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the stock item was created (ISO 8601)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last update to the stock item record (ISO 8601)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp indicating if the record is deleted (nullable)."}},"required":["id","code","name","initial_price","created_at","updated_at"],"description":"Chatbot stock item entity representing a virtual stock available for trading.\n\nIncludes identification code, name, pricing, and audit timestamps."},"IChatbotStockItem.ICreate":{"type":"object","properties":{"code":{"type":"string","description":"Unique business code for creating the stock item."},"name":{"type":"string","description":"Display name for the new stock item."},"initial_price":{"type":"integer","description":"Initial price for the new stock item in points."}},"required":["code","name","initial_price"],"description":"Request body schema for creating a new chatbot stock item.\n\nRequires unique code, name, and initial price."},"IChatbotStockItems.IUpdate":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"UUID of the stock item to update."},"code":{"type":"string","description":"Unique business code for the stock item."},"name":{"type":"string","description":"Display name of the stock item."},"initial_price":{"type":"integer","description":"Initial price of the stock item."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional soft deletion timestamp (nullable)."}},"required":["id","code","name","initial_price"],"description":"Request body schema for updating a chatbot stock item.\n\nIncludes all necessary fields to update and optionally soft delete the stock item."},"IChatbotStockItems":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier of the stock item."},"code":{"type":"string","description":"Unique business code for the stock item.\n\nMust be unique across all stock items."},"name":{"type":"string","description":"Display name of the stock item.\n\nMust be unique. Used for display in UI and identification."},"initial_price":{"type":"integer","description":"Initial price of the stock item in points.\n\nAcceptable range: 100 to 1,000,000.","minimum":100,"maximum":1000000},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the stock item was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last update to the stock item record."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp; null if active."}},"required":["id","code","name","initial_price","created_at","updated_at"],"description":"Virtual stock items available for trading. Includes unique stock codes, names, initial prices, and soft delete handling. This primary table serves as the master list of stock definitions for the virtual stock trading domain."},"IChatbotChatbotMembersStockHoldings.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1,"format":"int32"},{"type":"null"}],"description":"Page number.\n\nOptional."},"limit":{"oneOf":[{"type":"integer","minimum":1,"format":"int32"},{"type":"null"}],"description":"Limit records per page.\n\nOptional."},"stock_item_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional filter to stock_item_id."},"min_quantity":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Optional filter to minimum quantity held."},"max_quantity":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Optional filter to maximum quantity held."}},"required":[],"description":"Request parameters for listing stock holdings of a chatbot member with filtering and pagination."},"IChatbotStockHoldings":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier for the stock holding record."},"user_id":{"type":"string","format":"uuid","description":"Owner user of the stock holdings.\nReference to chatbot_members.id"},"stock_item_id":{"type":"string","format":"uuid","description":"Stock item referenced.\nReference to chatbot_stock_items.id"},"quantity":{"type":"integer","description":"Number of stock units held by user."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of when this holding record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to the holding record."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp, null if holding is active."}},"required":["id","user_id","stock_item_id","quantity","created_at","updated_at"],"description":"Tracks each user's holdings of stock items. Links users to stock items with the quantity held. Ensures uniqueness for the user-item pair and supports soft deletes. Essential for portfolio management in the stock trading system."},"IChatbotStockHolding.ICreate":{"type":"object","properties":{"user_id":{"type":"string","format":"uuid","description":"Owner user ID.\nReference to chatbot_members.id"},"stock_item_id":{"type":"string","format":"uuid","description":"Stock item ID.\nReference to chatbot_stock_items.id"},"quantity":{"type":"integer","description":"Number of stock units to hold."}},"required":["user_id","stock_item_id","quantity"],"description":"Request body for creating a new chatbot stock holding."},"IChatbotStockHolding":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"user_id":{"type":"string","format":"uuid","description":"Owner user of the stock holdings. {@link chatbot_members.id}"},"stock_item_id":{"type":"string","format":"uuid","description":"Stock item referenced. {@link chatbot_stock_items.id}"},"quantity":{"type":"integer","format":"int32","description":"Number of stock units held by user."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of when this holding record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to the holding record."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp, null if holding is active."}},"required":["id","user_id","stock_item_id","quantity","created_at","updated_at"],"description":"Tracks each user's holdings of stock items. Links users to stock items with the quantity held. Ensures uniqueness for the user-item pair and supports soft deletes. Essential for portfolio management in the stock trading system."},"IChatbotStockHolding.IUpdate":{"type":"object","properties":{"quantity":{"type":"integer","format":"int32","description":"Number of stock units held by user."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp, null if holding is active."}},"required":["quantity","deleted_at"],"description":"Update variant for IChatbotStockHolding entity"},"IChatbotStockTransaction.IRequest":{"type":"object","properties":{"user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by user ID (UUID). Optional UUID or null; filter transactions for a specific user."},"transaction_type":{"oneOf":[{"const":"buy"},{"const":"sell"},{"type":"null"}],"description":"Filter by transaction type ('buy' or 'sell'). Optional; specifies the type of transaction to filter."},"min_quantity":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Minimum quantity for filtering. Optional integer or null; transactions with quantity >= this value."},"max_quantity":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Maximum quantity for filtering. Optional integer or null; transactions with quantity <= this value."},"min_price_per_unit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Minimum price per unit filter. Optional integer or null; transactions with price per unit >= this value."},"max_price_per_unit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Maximum price per unit filter. Optional integer or null; transactions with price per unit <= this value."},"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number for pagination. Optional integer or null; defaults to first page."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Limit of records per page. Optional integer or null; defaults to server-side setting."},"keywords":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Keyword search. Optional string or null; search text in transaction metadata."},"sort":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sort order string. Optional string or null; sorting criteria like 'created_at desc'."}},"required":[],"description":"Search and filter parameters for chatbot stock transactions."},"IChatbotStockTransactions":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"user_id":{"type":"string","format":"uuid","description":"User conducting the transaction. {@link chatbot_members.id}"},"stock_item_id":{"type":"string","format":"uuid","description":"Stock item involved in the transaction. {@link chatbot_stock_items.id}"},"transaction_type":{"oneOf":[{"const":"buy","description":"Transaction type: 'buy' or 'sell'."},{"const":"sell","description":"Transaction type: 'buy' or 'sell'."}],"description":"Transaction type: 'buy' or 'sell'."},"quantity":{"type":"integer","description":"Quantity of stock units in the transaction."},"price_per_unit":{"type":"integer","description":"Price per unit at transaction time in points."},"transaction_fee":{"type":"integer","description":"Fee charged for this transaction in points."},"total_price":{"type":"integer","description":"Total price after fees in points."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of the transaction."}},"required":["id","user_id","stock_item_id","transaction_type","quantity","price_per_unit","transaction_fee","total_price","created_at"],"description":"Chatbot stock transactions record all stock trading activities including buy/sell actions, prices, fees, and quantities. Each transaction links to a user and a stock item for referential integrity.\n\nThis entity supports comprehensive auditing and history tracking of user stock trades in the chatbot virtual stock system."},"IChatbotStockTransactions.ICreate":{"type":"object","properties":{"user_id":{"type":"string","format":"uuid","description":"User conducting the transaction. {@link chatbot_members.id}"},"stock_item_id":{"type":"string","format":"uuid","description":"Stock item involved in the transaction. {@link chatbot_stock_items.id}"},"transaction_type":{"oneOf":[{"const":"buy","description":"Transaction type: 'buy' or 'sell'."},{"const":"sell","description":"Transaction type: 'buy' or 'sell'."}],"description":"Transaction type: 'buy' or 'sell'."},"quantity":{"type":"integer","description":"Quantity of stock units in the transaction."},"price_per_unit":{"type":"integer","description":"Price per unit at transaction time in points."},"transaction_fee":{"type":"integer","description":"Fee charged for this transaction in points."},"total_price":{"type":"integer","description":"Total price after fees in points."}},"required":["user_id","stock_item_id","transaction_type","quantity","price_per_unit","transaction_fee","total_price"],"description":"Request body for creating a new chatbot stock transaction. Must specify all details including user ID, stock item ID, transaction type, quantity, pricing, and fees."},"IChatbotStockTransactions.IUpdate":{"type":"object","properties":{"user_id":{"type":"string","format":"uuid","description":"User conducting the transaction. {@link chatbot_members.id}"},"stock_item_id":{"type":"string","format":"uuid","description":"Stock item involved in the transaction. {@link chatbot_stock_items.id}"},"transaction_type":{"oneOf":[{"const":"buy","description":"Transaction type: 'buy' or 'sell'."},{"const":"sell","description":"Transaction type: 'buy' or 'sell'."}],"description":"Transaction type: 'buy' or 'sell'."},"quantity":{"type":"integer","description":"Quantity of stock units in the transaction."},"price_per_unit":{"type":"integer","description":"Price per unit at transaction time in points."},"transaction_fee":{"type":"integer","description":"Fee charged for this transaction in points."},"total_price":{"type":"integer","description":"Total price after fees in points."}},"required":[],"description":"Request body for updating an existing chatbot stock transaction. Properties are optional and only included if updated."},"IChatbotStockPriceSnapshot.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Limitation of records per a page."},"sortBy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Field to sort by."},"filterStockItemId":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by stock item ID."},"filterSnapshotTimeFrom":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter snapshot times from this date."},"filterSnapshotTimeTo":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter snapshot times up to this date."}},"required":[],"description":"Request body for searching stock price snapshots with pagination and filters."},"IChatbotStockPriceSnapshot":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"stock_item_id":{"type":"string","format":"uuid","description":"Stock item linked to this price snapshot. {@link chatbot_stock_items.id}"},"price":{"type":"integer","description":"Stock price at snapshot time in points."},"snapshot_time":{"type":"string","format":"date-time","description":"Timestamp when this snapshot was recorded."}},"required":["id","stock_item_id","price","snapshot_time"],"description":"Stock price snapshots record immutable historical market prices for each stock item in the chatbot virtual stock system.\n\nThis entity stores timestamped price points facilitating historical analysis, trends, and auditing for stock trading activities."},"IChatbotStockPriceUpdate":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the stock price update."},"updated_by_admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"UUID of admin who triggered the update, nullable if system triggered."},"update_date":{"type":"string","format":"date-time","description":"Date and time when the price update occurred."},"notes":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional notes about the update."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this record was created."}},"required":["id","update_date","created_at"],"description":"Stock price update event with admin info, timestamp, and notes."},"IChatbotStockPriceUpdate.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Page size limit for pagination."},"code":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by stock code."},"updated_by_admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by admin ID who triggered the update."},"update_date_gte":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter for updates at or after this date."},"update_date_lte":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter for updates at or before this date."},"orderBy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Order by field name."},"direction":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort direction: ascending or descending."}},"required":[],"description":"Filter and pagination options for stock price updates list."},"IChatbotSlotmachinePlay":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the slot machine play record."},"chatbot_member_id":{"type":"string","format":"uuid","description":"UUID reference to the member who played the slot machine. Links to the chatbot_members table for user context."},"bet_points":{"type":"integer","description":"Number of points the user bet on this spin. Must be a non-negative integer."},"slot1":{"type":"integer","minimum":0,"maximum":9,"description":"Result of the first slot digit (0-9)."},"slot2":{"type":"integer","minimum":0,"maximum":9,"description":"Result of the second slot digit (0-9)."},"slot3":{"type":"integer","minimum":0,"maximum":9,"description":"Result of the third slot digit (0-9)."},"payout_points":{"type":"integer","description":"Points won from this spin. Zero if no payout."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the play was recorded. ISO 8601 date-time."}},"required":["id","chatbot_member_id","bet_points","slot1","slot2","slot3","payout_points","created_at"],"description":"Slot machine game play record capturing individual spin details including user ref, bet, slot outcomes, payout, and timestamps."},"IChatbotSlotmachinePlay.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Page size limit for pagination."},"chatbot_member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by chatbot member UUID."},"created_at_gte":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter for plays at or after this date."},"created_at_lte":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter for plays at or before this date."},"orderBy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Field to order by."},"direction":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort direction."}},"required":[],"description":"Filter and pagination options for slot machine plays list."},"IChatbotSlotmachinePlay.ICreate":{"type":"object","properties":{"chatbot_member_id":{"type":"string","format":"uuid","description":"Referenced member who played the slot machine. {@link chatbot_members.id}."},"bet_points":{"type":"integer","description":"Number of points the user bet on this spin."},"slot1":{"type":"integer","description":"Result of first slot digit (0-9)."},"slot2":{"type":"integer","description":"Result of second slot digit (0-9)."},"slot3":{"type":"integer","description":"Result of third slot digit (0-9)."},"payout_points":{"type":"integer","description":"Points won from this spin, zero if none."}},"required":["chatbot_member_id","bet_points","slot1","slot2","slot3","payout_points"],"description":"Request body schema for creating a new chatbot slot machine play record.\n\nIncludes the member ID, bet details, individual slot results, and payout."},"IChatbotSlotmachinePlay.IUpdate":{"type":"object","properties":{"chatbot_member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Referenced member who played the slot machine. {@link chatbot_members.id}."},"bet_points":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Number of points the user bet on this spin."},"slot1":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Result of first slot digit (0-9)."},"slot2":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Result of second slot digit (0-9)."},"slot3":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Result of third slot digit (0-9)."},"payout_points":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Points won from this spin, zero if none."},"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the play was recorded."}},"required":[],"description":"Request body schema for updating an existing chatbot slot machine play record.\n\nAll fields are optional to allow partial update."},"IChatbotCommandLog.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Limitation of records per a page."},"sort":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sort order, e.g., 'created_at desc' or 'command asc'."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search keyword to filter command logs."}},"required":[],"description":"Request schema for searching and paginating chatbot command logs."},"IChatbotCommandLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the command log record."},"chatbot_member_id":{"type":"string","format":"uuid","description":"Identifier of the member who executed the command."},"command":{"type":"string","description":"The exact command string issued, including parameters if any."},"command_parameters":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional string with command parameters, may be JSON or plain text."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the command was executed. ISO 8601 date-time format."}},"required":["id","chatbot_member_id","command","created_at"],"description":"Chatbot command log entry representing executed commands by members including parameters and creation timestamps."},"IChatbotCommandLog.ICreate":{"type":"object","properties":{"chatbot_member_id":{"type":"string","format":"uuid","description":"The chatbot member's UUID who executed the command."},"command":{"type":"string","description":"The exact command string."},"command_parameters":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional command parameters as string or JSON."}},"required":["chatbot_member_id","command"],"description":"Data required to create a new chatbot command log entry.\n\nnote: id, created_at are auto-generated and not included in creation request."},"IChatbotChatbotCommandLogs.IUpdate":{"type":"object","properties":{"command":{"type":"string","description":"The updated command string. Optional to allow partial updates."},"command_parameters":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Updated command parameters, nullable and optional."}},"required":[],"description":"Allows updating a specific chatbot command log entry.\n\nMirrors IChatbotCommandLog properties allowed for update."},"IChatbotChatbotCommandLogs":{"type":"object","properties":{"data":{"type":"array","items":{"$ref":"#/components/schemas/IChatbotCommandLog"},"description":"Array of command log entries."},"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination info. Use standard pagination properties (page, limit, total)."}},"required":["data","pagination"],"description":"Represents a request to search and paginate chatbot command logs.\nProvides filtering and pagination parameters."},"IChatbotChatbotAuditLogs.IRequest":{"type":"object","properties":{"event_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by event type"},"chatbot_member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by chatbot member ID"},"chatbot_room_tuple_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by chatbot room tuple ID"},"created_at_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter for events created after this datetime"},"created_at_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter for events created before this datetime"},"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for pagination"},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Maximum number of records per page"}},"required":[],"description":"Request schema for searching audit logs with filters and pagination"},"IChatbotChatbotAuditLogs":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the audit log."},"chatbot_member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Reference to chatbot member associated with the event, nullable."},"chatbot_room_tuple_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Reference to chatbot room tuple related to this event, nullable."},"event_type":{"type":"string","description":"Type of audit event, e.g. 'command_execution', 'minigame_play', etc. Only predefined string values allowed."},"event_payload":{"type":"string","description":"JSON encoded string detailing event content."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the audit event was recorded."}},"required":["id","event_type","event_payload","created_at"],"description":"Audit log entry recording detailed operational events for auditing of chatbot system."},"IChatbotChatbotAuditLogs.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the audit log."},"chatbot_member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Reference to chatbot member associated with the event, nullable."},"event_type":{"type":"string","description":"Type of audit event"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the audit event was recorded."}},"required":["id","event_type","created_at"],"description":"Summary view of chatbot audit logs for administrative overview."},"IChatbotRoomTuples.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the chatbot room tuple"},"normal_room_id":{"type":"string","description":"Linked normal room ID"},"admin_room_id":{"type":"string","description":"Linked admin room ID"},"display_name":{"type":"string","description":"Display name for the tuple"},"unique_id":{"type":"string","description":"Business unique ID"},"enabled":{"type":"boolean","description":"Enablement status flag"}},"required":["id","normal_room_id","admin_room_id","display_name","unique_id","enabled"],"description":"Summary view for chatbot room tuple showing essential routing and status info"},"IChatbotAdmin.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique admin user identifier"},"internal_sender_id":{"type":"string","description":"Internal sender ID of the admin"},"nickname":{"type":"string","description":"Admin user's nickname for display"}},"required":["id","internal_sender_id","nickname"],"description":"Summary view representing chatbot admin user details"},"IChatbotMember.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the member"},"internal_sender_id":{"type":"string","description":"Internal sender identifier mapped from external sources"},"nickname":{"type":"string","description":"User's display nickname"}},"required":["id","internal_sender_id","nickname"],"description":"Summary representation of chatbot member user for list views"},"IChatbotChatbotTitle":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the title."},"name":{"type":"string","description":"The name of the title visible to users and used for display."},"fee_discount_rate":{"type":"integer","description":"The fee discount rate percentage this title grants on minigame transactions (0 to 100)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the title record was created in UTC."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the title record was last updated in UTC."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the title record was soft-deleted; null if active."}},"required":["id","name","fee_discount_rate","created_at","updated_at"],"description":"Represents a user title entity in the chatbot system. Titles provide fee discount rates and display names for users. The entity includes timestamps for creation, update, and optional soft deletion. This schema is critical for managing user benefits related to transaction fees in minigames."},"IChatbotUserTitle.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the user title record."},"chatbot_member_id":{"type":"string","format":"uuid","description":"Unique identifier of the chatbot member owning this title."},"chatbot_title_id":{"type":"string","format":"uuid","description":"Unique identifier of the title assigned to the user."},"assigned_at":{"type":"string","format":"date-time","description":"Timestamp when the title was assigned to the user."}},"required":["id","chatbot_member_id","chatbot_title_id","assigned_at"],"description":"Summary representation of a user title assigned to a chatbot member. Includes key identifiers and assignment timestamp. Suitable for listing user titles succinctly."},"IChatbotStockItem.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the stock item."},"code":{"type":"string","description":"Unique business code for the stock item."},"name":{"type":"string","description":"Display name of the stock item."},"initial_price":{"type":"integer","description":"Initial price of the stock item in points."}},"required":["id","code","name","initial_price"],"description":"Summary representation of stock items in the virtual stock trading minigame. Shows basic stock properties such as unique code, name, and initial price for list view display purposes."},"IChatbotStockHoldings.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the stock holding record."},"user_id":{"type":"string","format":"uuid","description":"Unique identifier of the member owning this holding."},"stock_item_id":{"type":"string","format":"uuid","description":"Unique identifier of the stock item held."},"quantity":{"type":"integer","description":"Number of stock units held by the user."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the holding record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the holding record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp indicating the holding record was soft-deleted; null if active."}},"required":["id","user_id","stock_item_id","quantity","created_at","updated_at"],"description":"Summary of a user's stock holdings including reference to stock items and quantity held. Useful for portfolio list views and trading interfaces."},"IChatbotStockTransaction":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"user_id":{"type":"string","format":"uuid","description":"User conducting the transaction. {@link chatbot_members.id}"},"stock_item_id":{"type":"string","format":"uuid","description":"Stock item involved in the transaction. {@link chatbot_stock_items.id}"},"transaction_type":{"oneOf":[{"const":"buy","description":"Transaction type: 'buy' or 'sell'."},{"const":"sell","description":"Transaction type: 'buy' or 'sell'."}],"description":"Transaction type: 'buy' or 'sell'."},"quantity":{"type":"integer","description":"Quantity of stock units in the transaction."},"price_per_unit":{"type":"integer","description":"Price per unit at transaction time in points."},"transaction_fee":{"type":"integer","description":"Fee charged for this transaction in points."},"total_price":{"type":"integer","description":"Total price after fees in points."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of the transaction."}},"required":["id","user_id","stock_item_id","transaction_type","quantity","price_per_unit","transaction_fee","total_price","created_at"],"description":"Records all stock transactions made by users. Captures transaction type, quantity, unit price, fees, total price, and timestamp. Links to user and stock item to ensure referential integrity. This primary table supports full audit trails of trading activity."},"IChatbotStockTransaction.ICreate":{"type":"object","properties":{"user_id":{"type":"string","format":"uuid","description":"User conducting the transaction. UUID referencing the user who makes the transaction."},"stock_item_id":{"type":"string","format":"uuid","description":"Stock item involved in the transaction. UUID referencing the traded stock item."},"transaction_type":{"oneOf":[{"const":"buy","description":"Transaction type: 'buy' or 'sell'. Must be exactly either 'buy' or 'sell'."},{"const":"sell","description":"Transaction type: 'buy' or 'sell'. Must be exactly either 'buy' or 'sell'."}],"description":"Transaction type: 'buy' or 'sell'. Must be exactly either 'buy' or 'sell'."},"quantity":{"type":"integer","description":"Quantity of stock units in the transaction."},"price_per_unit":{"type":"integer","description":"Price per unit at transaction time in points."},"transaction_fee":{"type":"integer","description":"Fee charged for this transaction in points."},"total_price":{"type":"integer","description":"Total price after fees in points."}},"required":["user_id","stock_item_id","transaction_type","quantity","price_per_unit","transaction_fee","total_price"],"description":"Input parameters required to create a new chatbot stock transaction."},"IChatbotStockTransaction.IUpdate":{"type":"object","properties":{"stock_item_id":{"type":"string","format":"uuid","description":"Stock item involved in the transaction. Optional UUID; identifies the stock item to update."},"transaction_type":{"oneOf":[{"const":"buy","description":"Transaction type: 'buy' or 'sell'. Optional; must be one of the two values."},{"const":"sell","description":"Transaction type: 'buy' or 'sell'. Optional; must be one of the two values."}],"description":"Transaction type: 'buy' or 'sell'. Optional; must be one of the two values."},"quantity":{"type":"integer","description":"Quantity of stock units. Optional integer."},"price_per_unit":{"type":"integer","description":"Price per unit in points. Optional integer."},"transaction_fee":{"type":"integer","description":"Fee charged in points. Optional integer."},"total_price":{"type":"integer","description":"Total price after fees. Optional integer."}},"required":[],"description":"Input parameters for updating an existing chatbot stock transaction."},"IChatbotStockTransaction.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. UUID of the transaction."},"user_id":{"type":"string","format":"uuid","description":"User conducting the transaction. UUID referencing the member."},"stock_item_id":{"type":"string","format":"uuid","description":"Stock item involved. UUID referencing the stock item."},"transaction_type":{"oneOf":[{"const":"buy","description":"Transaction type; 'buy' or 'sell'."},{"const":"sell","description":"Transaction type; 'buy' or 'sell'."}],"description":"Transaction type; 'buy' or 'sell'."},"quantity":{"type":"integer","description":"Number of stock units."},"price_per_unit":{"type":"integer","description":"Price per unit during transaction in points."},"transaction_fee":{"type":"integer","description":"Transaction fee charged in points."},"total_price":{"type":"integer","description":"Total points after fees."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of transaction occurrence. ISO 8601 string."}},"required":["id","user_id","stock_item_id","transaction_type","quantity","price_per_unit","transaction_fee","total_price","created_at"],"description":"Summary view of a chatbot stock transaction."},"IChatbotSlotmachinePlay.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the slot machine play record."},"chatbot_member_id":{"type":"string","format":"uuid","description":"UUID reference to the member who played."},"bet_points":{"type":"integer","description":"Number of points the user bet on this spin."},"payout_points":{"type":"integer","description":"Points won from this spin."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the play was recorded."}},"required":["id","chatbot_member_id","bet_points","payout_points","created_at"],"description":"Summary of slot machine play record for list views."},"IChatbotCommandLog.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the command log record."},"chatbot_member_id":{"type":"string","format":"uuid","description":"Identifier of the member who executed the command."},"command":{"type":"string","description":"The exact command string issued."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the command was executed."}},"required":["id","chatbot_member_id","command","created_at"],"description":"Summary of the chatbot command log entry for easy listing and viewing."}}}}