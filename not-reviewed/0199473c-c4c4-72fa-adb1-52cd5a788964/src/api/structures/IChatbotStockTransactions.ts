import { tags } from "typia";

/**
 * Chatbot stock transactions record all stock trading activities including
 * buy/sell actions, prices, fees, and quantities. Each transaction links to a
 * user and a stock item for referential integrity.
 *
 * This entity supports comprehensive auditing and history tracking of user
 * stock trades in the chatbot virtual stock system.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IChatbotStockTransactions = {
  /** Primary Key. */
  id: string & tags.Format<"uuid">;

  /** User conducting the transaction. {@link chatbot_members.id} */
  user_id: string & tags.Format<"uuid">;

  /** Stock item involved in the transaction. {@link chatbot_stock_items.id} */
  stock_item_id: string & tags.Format<"uuid">;

  /** Transaction type: 'buy' or 'sell'. */
  transaction_type: "buy" | "sell";

  /** Quantity of stock units in the transaction. */
  quantity: number & tags.Type<"int32">;

  /** Price per unit at transaction time in points. */
  price_per_unit: number & tags.Type<"int32">;

  /** Fee charged for this transaction in points. */
  transaction_fee: number & tags.Type<"int32">;

  /** Total price after fees in points. */
  total_price: number & tags.Type<"int32">;

  /** Timestamp of the transaction. */
  created_at: string & tags.Format<"date-time">;
};
export namespace IChatbotStockTransactions {
  /**
   * Request body for creating a new chatbot stock transaction. Must specify
   * all details including user ID, stock item ID, transaction type, quantity,
   * pricing, and fees.
   */
  export type ICreate = {
    /** User conducting the transaction. {@link chatbot_members.id} */
    user_id: string & tags.Format<"uuid">;

    /** Stock item involved in the transaction. {@link chatbot_stock_items.id} */
    stock_item_id: string & tags.Format<"uuid">;

    /** Transaction type: 'buy' or 'sell'. */
    transaction_type: "buy" | "sell";

    /** Quantity of stock units in the transaction. */
    quantity: number & tags.Type<"int32">;

    /** Price per unit at transaction time in points. */
    price_per_unit: number & tags.Type<"int32">;

    /** Fee charged for this transaction in points. */
    transaction_fee: number & tags.Type<"int32">;

    /** Total price after fees in points. */
    total_price: number & tags.Type<"int32">;
  };

  /**
   * Request body for updating an existing chatbot stock transaction.
   * Properties are optional and only included if updated.
   */
  export type IUpdate = {
    /** User conducting the transaction. {@link chatbot_members.id} */
    user_id?: (string & tags.Format<"uuid">) | undefined;

    /** Stock item involved in the transaction. {@link chatbot_stock_items.id} */
    stock_item_id?: (string & tags.Format<"uuid">) | undefined;

    /** Transaction type: 'buy' or 'sell'. */
    transaction_type?: "buy" | "sell" | undefined;

    /** Quantity of stock units in the transaction. */
    quantity?: (number & tags.Type<"int32">) | undefined;

    /** Price per unit at transaction time in points. */
    price_per_unit?: (number & tags.Type<"int32">) | undefined;

    /** Fee charged for this transaction in points. */
    transaction_fee?: (number & tags.Type<"int32">) | undefined;

    /** Total price after fees in points. */
    total_price?: (number & tags.Type<"int32">) | undefined;
  };
}
