import { tags } from "typia";

/**
 * Chatbot points entity representing current accumulated points for a member in
 * the system. Points are critical for minigames and ranking.
 *
 * Includes ownership reference, balance, and audit timestamps.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IChatbotPoints = {
  /** Primary Key - unique identifier of the chatbot points record. */
  id: string & tags.Format<"uuid">;

  /** Referenced member's unique identifier owning these points. */
  chatbot_member_id: string & tags.Format<"uuid">;

  /** Current total points accumulated by the user. */
  points: number & tags.Type<"int32">;

  /** Record creation timestamp. */
  created_at: string & tags.Format<"date-time">;

  /** Record last update timestamp. */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IChatbotPoints {
  /**
   * Request schema defining filters, sorting, and pagination for points
   * queries.
   */
  export type IRequest = {
    /** Optional filter to select points for a specific member by ID. */
    chatbot_member_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Minimum number of points to filter by. */
    min_points?: (number & tags.Type<"int32">) | null | undefined;

    /** Maximum number of points to filter by. */
    max_points?: (number & tags.Type<"int32">) | null | undefined;

    /** Page number for pagination support. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Maximum number of results per page. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Field to sort results by. */
    sort_by?: "points" | "created_at" | "updated_at" | null | undefined;

    /** Direction of sorting. */
    sort_direction?: "asc" | "desc" | null | undefined;
  };

  /**
   * Request body for creating a new chatbot points record. Must include the
   * member ID and initial points value.
   *
   * System-generated fields such as id, timestamps are not included as input.
   */
  export type ICreate = {
    /**
     * Referenced member's unique identifier owning these points. Required
     * to associate points entity.
     */
    chatbot_member_id: string & tags.Format<"uuid">;

    /** Initial total points to set for the member upon creation. */
    points: number & tags.Type<"int32">;
  };

  /**
   * Request body for updating chatbot points record. Only fields to modify
   * need to be provided.
   *
   * Points are the main mutable property.
   */
  export type IUpdate = {
    /** Updated points value. Optional field for partial update. */
    points?: (number & tags.Type<"int32">) | undefined;
  };
}
