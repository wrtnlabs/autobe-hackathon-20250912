import { tags } from "typia";

/**
 * Records all stock transactions made by users. Captures transaction type,
 * quantity, unit price, fees, total price, and timestamp. Links to user and
 * stock item to ensure referential integrity. This primary table supports full
 * audit trails of trading activity.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IChatbotStockTransaction = {
  /** Primary Key. */
  id: string & tags.Format<"uuid">;

  /** User conducting the transaction. {@link chatbot_members.id} */
  user_id: string & tags.Format<"uuid">;

  /** Stock item involved in the transaction. {@link chatbot_stock_items.id} */
  stock_item_id: string & tags.Format<"uuid">;

  /** Transaction type: 'buy' or 'sell'. */
  transaction_type: "buy" | "sell";

  /** Quantity of stock units in the transaction. */
  quantity: number & tags.Type<"int32">;

  /** Price per unit at transaction time in points. */
  price_per_unit: number & tags.Type<"int32">;

  /** Fee charged for this transaction in points. */
  transaction_fee: number & tags.Type<"int32">;

  /** Total price after fees in points. */
  total_price: number & tags.Type<"int32">;

  /** Timestamp of the transaction. */
  created_at: string & tags.Format<"date-time">;
};
export namespace IChatbotStockTransaction {
  /** Search and filter parameters for chatbot stock transactions. */
  export type IRequest = {
    /**
     * Filter by user ID (UUID). Optional UUID or null; filter transactions
     * for a specific user.
     */
    user_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Filter by transaction type ('buy' or 'sell'). Optional; specifies the
     * type of transaction to filter.
     */
    transaction_type?: "buy" | "sell" | null | undefined;

    /**
     * Minimum quantity for filtering. Optional integer or null;
     * transactions with quantity >= this value.
     */
    min_quantity?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Maximum quantity for filtering. Optional integer or null;
     * transactions with quantity <= this value.
     */
    max_quantity?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Minimum price per unit filter. Optional integer or null; transactions
     * with price per unit >= this value.
     */
    min_price_per_unit?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Maximum price per unit filter. Optional integer or null; transactions
     * with price per unit <= this value.
     */
    max_price_per_unit?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Page number for pagination. Optional integer or null; defaults to
     * first page.
     */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Limit of records per page. Optional integer or null; defaults to
     * server-side setting.
     */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Keyword search. Optional string or null; search text in transaction
     * metadata.
     */
    keywords?: string | null | undefined;

    /**
     * Sort order string. Optional string or null; sorting criteria like
     * 'created_at desc'.
     */
    sort?: string | null | undefined;
  };

  /** Input parameters required to create a new chatbot stock transaction. */
  export type ICreate = {
    /**
     * User conducting the transaction. UUID referencing the user who makes
     * the transaction.
     */
    user_id: string & tags.Format<"uuid">;

    /**
     * Stock item involved in the transaction. UUID referencing the traded
     * stock item.
     */
    stock_item_id: string & tags.Format<"uuid">;

    /**
     * Transaction type: 'buy' or 'sell'. Must be exactly either 'buy' or
     * 'sell'.
     */
    transaction_type: "buy" | "sell";

    /** Quantity of stock units in the transaction. */
    quantity: number & tags.Type<"int32">;

    /** Price per unit at transaction time in points. */
    price_per_unit: number & tags.Type<"int32">;

    /** Fee charged for this transaction in points. */
    transaction_fee: number & tags.Type<"int32">;

    /** Total price after fees in points. */
    total_price: number & tags.Type<"int32">;
  };

  /** Input parameters for updating an existing chatbot stock transaction. */
  export type IUpdate = {
    /**
     * Stock item involved in the transaction. Optional UUID; identifies the
     * stock item to update.
     */
    stock_item_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Transaction type: 'buy' or 'sell'. Optional; must be one of the two
     * values.
     */
    transaction_type?: "buy" | "sell" | undefined;

    /** Quantity of stock units. Optional integer. */
    quantity?: (number & tags.Type<"int32">) | undefined;

    /** Price per unit in points. Optional integer. */
    price_per_unit?: (number & tags.Type<"int32">) | undefined;

    /** Fee charged in points. Optional integer. */
    transaction_fee?: (number & tags.Type<"int32">) | undefined;

    /** Total price after fees. Optional integer. */
    total_price?: (number & tags.Type<"int32">) | undefined;
  };

  /** Summary view of a chatbot stock transaction. */
  export type ISummary = {
    /** Primary Key. UUID of the transaction. */
    id: string & tags.Format<"uuid">;

    /** User conducting the transaction. UUID referencing the member. */
    user_id: string & tags.Format<"uuid">;

    /** Stock item involved. UUID referencing the stock item. */
    stock_item_id: string & tags.Format<"uuid">;

    /** Transaction type; 'buy' or 'sell'. */
    transaction_type: "buy" | "sell";

    /** Number of stock units. */
    quantity: number & tags.Type<"int32">;

    /** Price per unit during transaction in points. */
    price_per_unit: number & tags.Type<"int32">;

    /** Transaction fee charged in points. */
    transaction_fee: number & tags.Type<"int32">;

    /** Total points after fees. */
    total_price: number & tags.Type<"int32">;

    /** Timestamp of transaction occurrence. ISO 8601 string. */
    created_at: string & tags.Format<"date-time">;
  };
}
