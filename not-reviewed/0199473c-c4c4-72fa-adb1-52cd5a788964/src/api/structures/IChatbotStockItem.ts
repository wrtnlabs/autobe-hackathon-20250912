import { tags } from "typia";

/**
 * Chatbot stock item entity representing a virtual stock available for trading.
 *
 * Includes identification code, name, pricing, and audit timestamps.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IChatbotStockItem = {
  /** Primary key: unique identifier of the stock item. */
  id: string & tags.Format<"uuid">;

  /** Unique business code for the stock item, used as identifier. */
  code: string;

  /** Display name of the stock item for identification. */
  name: string;

  /** Initial price of the stock item in points. */
  initial_price: number & tags.Type<"int32">;

  /** Timestamp when the stock item was created (ISO 8601). */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of the last update to the stock item record (ISO 8601). */
  updated_at: string & tags.Format<"date-time">;

  /** Soft deletion timestamp indicating if the record is deleted (nullable). */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IChatbotStockItem {
  /**
   * Request parameters for filtered and paginated retrieval of chatbot stock
   * items.
   *
   * Supports filtering by code and name, pagination, and ordering.
   */
  export type IRequest = {
    /** Optional filter by stock code. */
    code?: string | null | undefined;

    /** Optional filter by name. */
    name?: string | null | undefined;

    /** Optional pagination page number. */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /** Optional pagination limit. */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /** Optional sorting order, e.g., 'asc' or 'desc'. */
    order?: string | null | undefined;
  };

  /**
   * Request body schema for creating a new chatbot stock item.
   *
   * Requires unique code, name, and initial price.
   */
  export type ICreate = {
    /** Unique business code for creating the stock item. */
    code: string;

    /** Display name for the new stock item. */
    name: string;

    /** Initial price for the new stock item in points. */
    initial_price: number & tags.Type<"int32">;
  };

  /**
   * Summary representation of stock items in the virtual stock trading
   * minigame. Shows basic stock properties such as unique code, name, and
   * initial price for list view display purposes.
   */
  export type ISummary = {
    /** Unique identifier of the stock item. */
    id: string & tags.Format<"uuid">;

    /** Unique business code for the stock item. */
    code: string;

    /** Display name of the stock item. */
    name: string;

    /** Initial price of the stock item in points. */
    initial_price: number & tags.Type<"int32">;
  };
}
