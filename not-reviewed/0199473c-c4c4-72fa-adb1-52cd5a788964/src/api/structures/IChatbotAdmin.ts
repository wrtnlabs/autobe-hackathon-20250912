import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Chatbot administrator user entity for managing the system via admin rooms
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IChatbotAdmin = {
  /** Admin user primary key UUID */
  id: string & tags.Format<"uuid">;

  /** Internal unique sender ID for the admin */
  internal_sender_id: string;

  /** Admin user's display nickname */
  nickname: string;

  /** Account creation timestamp */
  created_at: string & tags.Format<"date-time">;

  /** Last update timestamp */
  updated_at: string & tags.Format<"date-time">;

  /** Soft deletion timestamp if applicable */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IChatbotAdmin {
  /**
   * Request body schema for creating a new admin user account in the chatbot
   * system. Contains the internal sender ID used for system identification
   * and the display nickname for the admin user.
   */
  export type ICreate = {
    /**
     * Internal unique identifier for the admin, mapped from external sender
     * ID. Used internally for system identification.
     */
    internal_sender_id: string;

    /** Nickname displayed for the admin in admin rooms, mutable by system. */
    nickname: string;
  };

  /**
   * Request body schema for authenticating an admin user, requiring internal
   * sender ID and nickname as credentials for login.
   */
  export type ILogin = {
    /** Internal sender ID for admin login identification. */
    internal_sender_id: string;

    /** Nickname or username for admin login purposes. */
    nickname: string;
  };

  /**
   * Request body schema for refreshing JWT tokens for an admin user,
   * requiring the refresh token as input.
   */
  export type IRefresh = {
    /** Refresh token string provided for renewing JWT authorization tokens. */
    refresh_token: string;
  };

  /**
   * Response body schema for an authorized admin user including their unique
   * ID, nickname, and JWT token information.
   */
  export type IAuthorized = {
    /** Unique ID identifying the authorized admin user. */
    id: string & tags.Format<"uuid">;

    /** Internal unique sender ID for the admin */
    internal_sender_id: string;

    /** Nickname of the admin user in the authorized response context. */
    nickname: string;

    /** Account creation timestamp */
    created_at: string & tags.Format<"date-time">;

    /** Last update timestamp */
    updated_at: string & tags.Format<"date-time">;

    /** Soft deletion timestamp if applicable */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /** Request schema for querying chatbot admins with filters and pagination */
  export type IRequest = {
    /** Filter admins by nickname */
    nickname?: string | null | undefined;

    /** Page number for pagination */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Limit count for pagination */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;
  };

  /** Allows partial update of admin user fields */
  export type IUpdate = {
    /**
     * Internal unique identifier for the admin, mapped from external sender
     * ID, used for internal system logic and privacy.
     */
    internal_sender_id?: string | null | undefined;

    /** Nickname displayed for the admin in admin rooms, mutable by system. */
    nickname?: string | null | undefined;

    /** Timestamp when the admin record was soft-deleted (nullable). */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /** Summary view representing chatbot admin user details */
  export type ISummary = {
    /** Unique admin user identifier */
    id: string & tags.Format<"uuid">;

    /** Internal sender ID of the admin */
    internal_sender_id: string;

    /** Admin user's nickname for display */
    nickname: string;
  };
}
