import { tags } from "typia";

/**
 * Tracks each user's holdings of stock items. Links users to stock items with
 * the quantity held. Ensures uniqueness for the user-item pair and supports
 * soft deletes. Essential for portfolio management in the stock trading
 * system.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IChatbotStockHolding = {
  /** Primary Key. */
  id: string & tags.Format<"uuid">;

  /** Owner user of the stock holdings. {@link chatbot_members.id} */
  user_id: string & tags.Format<"uuid">;

  /** Stock item referenced. {@link chatbot_stock_items.id} */
  stock_item_id: string & tags.Format<"uuid">;

  /** Number of stock units held by user. */
  quantity: number & tags.Type<"int32">;

  /** Timestamp of when this holding record was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of last update to the holding record. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp, null if holding is active. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IChatbotStockHolding {
  /** Request body for creating a new chatbot stock holding. */
  export type ICreate = {
    /** Owner user ID. Reference to chatbot_members.id */
    user_id: string & tags.Format<"uuid">;

    /** Stock item ID. Reference to chatbot_stock_items.id */
    stock_item_id: string & tags.Format<"uuid">;

    /** Number of stock units to hold. */
    quantity: number & tags.Type<"int32">;
  };

  /** Update variant for IChatbotStockHolding entity */
  export type IUpdate = {
    /** Number of stock units held by user. */
    quantity: number & tags.Type<"int32">;

    /** Soft delete timestamp, null if holding is active. */
    deleted_at: (string & tags.Format<"date-time">) | null;
  };
}
