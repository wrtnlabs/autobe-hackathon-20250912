import { tags } from "typia";

/**
 * Slot machine game play record capturing individual spin details including
 * user ref, bet, slot outcomes, payout, and timestamps.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IChatbotSlotmachinePlay = {
  /** Unique identifier of the slot machine play record. */
  id: string & tags.Format<"uuid">;

  /**
   * UUID reference to the member who played the slot machine. Links to the
   * chatbot_members table for user context.
   */
  chatbot_member_id: string & tags.Format<"uuid">;

  /**
   * Number of points the user bet on this spin. Must be a non-negative
   * integer.
   */
  bet_points: number & tags.Type<"int32">;

  /** Result of the first slot digit (0-9). */
  slot1: number & tags.Type<"int32"> & tags.Minimum<0> & tags.Maximum<9>;

  /** Result of the second slot digit (0-9). */
  slot2: number & tags.Type<"int32"> & tags.Minimum<0> & tags.Maximum<9>;

  /** Result of the third slot digit (0-9). */
  slot3: number & tags.Type<"int32"> & tags.Minimum<0> & tags.Maximum<9>;

  /** Points won from this spin. Zero if no payout. */
  payout_points: number & tags.Type<"int32">;

  /** Timestamp when the play was recorded. ISO 8601 date-time. */
  created_at: string & tags.Format<"date-time">;
};
export namespace IChatbotSlotmachinePlay {
  /** Filter and pagination options for slot machine plays list. */
  export type IRequest = {
    /** Page number for pagination. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<0>) | null | undefined;

    /** Page size limit for pagination. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<0>) | null | undefined;

    /** Filter by chatbot member UUID. */
    chatbot_member_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Filter for plays at or after this date. */
    created_at_gte?: (string & tags.Format<"date-time">) | null | undefined;

    /** Filter for plays at or before this date. */
    created_at_lte?: (string & tags.Format<"date-time">) | null | undefined;

    /** Field to order by. */
    orderBy?: string | null | undefined;

    /** Sort direction. */
    direction?: "asc" | "desc" | null | undefined;
  };

  /**
   * Request body schema for creating a new chatbot slot machine play record.
   *
   * Includes the member ID, bet details, individual slot results, and payout.
   */
  export type ICreate = {
    /**
     * Referenced member who played the slot machine.
     * {@link chatbot_members.id}.
     */
    chatbot_member_id: string & tags.Format<"uuid">;

    /** Number of points the user bet on this spin. */
    bet_points: number & tags.Type<"int32">;

    /** Result of first slot digit (0-9). */
    slot1: number & tags.Type<"int32">;

    /** Result of second slot digit (0-9). */
    slot2: number & tags.Type<"int32">;

    /** Result of third slot digit (0-9). */
    slot3: number & tags.Type<"int32">;

    /** Points won from this spin, zero if none. */
    payout_points: number & tags.Type<"int32">;
  };

  /**
   * Request body schema for updating an existing chatbot slot machine play
   * record.
   *
   * All fields are optional to allow partial update.
   */
  export type IUpdate = {
    /**
     * Referenced member who played the slot machine.
     * {@link chatbot_members.id}.
     */
    chatbot_member_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Number of points the user bet on this spin. */
    bet_points?: (number & tags.Type<"int32">) | null | undefined;

    /** Result of first slot digit (0-9). */
    slot1?: (number & tags.Type<"int32">) | null | undefined;

    /** Result of second slot digit (0-9). */
    slot2?: (number & tags.Type<"int32">) | null | undefined;

    /** Result of third slot digit (0-9). */
    slot3?: (number & tags.Type<"int32">) | null | undefined;

    /** Points won from this spin, zero if none. */
    payout_points?: (number & tags.Type<"int32">) | null | undefined;

    /** Timestamp when the play was recorded. */
    created_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /** Summary of slot machine play record for list views. */
  export type ISummary = {
    /** Unique identifier of the slot machine play record. */
    id: string & tags.Format<"uuid">;

    /** UUID reference to the member who played. */
    chatbot_member_id: string & tags.Format<"uuid">;

    /** Number of points the user bet on this spin. */
    bet_points: number & tags.Type<"int32">;

    /** Points won from this spin. */
    payout_points: number & tags.Type<"int32">;

    /** Timestamp when the play was recorded. */
    created_at: string & tags.Format<"date-time">;
  };
}
