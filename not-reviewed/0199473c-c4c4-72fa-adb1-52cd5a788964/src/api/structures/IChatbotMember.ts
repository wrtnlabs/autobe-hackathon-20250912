import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Core entity representing chatbot member users in normal rooms
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IChatbotMember = {
  /** Primary key UUID of the chatbot member */
  id: string & tags.Format<"uuid">;

  /** Internal sender ID of the member */
  internal_sender_id: string;

  /** Display nickname of the member */
  nickname: string;

  /** Member record creation timestamp */
  created_at: string & tags.Format<"date-time">;

  /** Member record last update timestamp */
  updated_at: string & tags.Format<"date-time">;

  /** Soft deletion timestamp, if any */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IChatbotMember {
  /**
   * Payload to create a new chatbot member with unique internal sender ID and
   * nickname.
   */
  export type ICreate = {
    /** Internal unique identifier used by the system mapped from sender ID. */
    internal_sender_id: string;

    /** Display nickname of the member. */
    nickname: string;
  };

  /**
   * Request body for member login.
   *
   * Contains credentials or identifiers needed for authentication. Internal
   * sender ID and nickname can be used for login process.
   *
   * Note: Actual credentials validation is handled securely.
   */
  export type ILogin = {
    /**
     * Internal unique identifier for the member.
     *
     * Confidential internal sender ID used for system mapping and privacy.
     */
    internal_sender_id: string;

    /**
     * Nickname displayed for the member in chat rooms.
     *
     * User-visible display name, mutable.
     */
    nickname: string;
  };

  /**
   * Request body to refresh JWT tokens.
   *
   * Contains refresh token passed by client to renew access.
   */
  export type IRefresh = {
    /** JWT refresh token string */
    refresh_token: string;
  };

  /**
   * Response body representing an authorized member user including JWT
   * tokens.
   */
  export type IAuthorized = {
    /** Primary key UUID of authenticated member */
    id: string & tags.Format<"uuid">;

    /** Internal sender ID of the member */
    internal_sender_id: string;

    /** Nickname of the authorized member */
    nickname: string;

    /** Member record creation timestamp */
    created_at: string & tags.Format<"date-time">;

    /** Member record last update timestamp */
    updated_at: string & tags.Format<"date-time">;

    /** Soft deletion timestamp, if any */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /** Request schema for searching chatbot members with filters and pagination */
  export type IRequest = {
    /** Filter members by nickname */
    nickname?: string | null | undefined;

    /** Filter members by internal sender ID */
    internal_sender_id?: string | null | undefined;

    /** Page index for pagination */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Maximum number of records per page */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;
  };

  /**
   * Payload to update chatbot member allowing optional nickname and
   * deleted_at values.
   */
  export type IUpdate = {
    /** New nickname to update the chatbot member display name. */
    nickname?: string | undefined;

    /** Nullable timestamp to mark or clear soft deletion status. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /** Summary representation of chatbot member user for list views */
  export type ISummary = {
    /** Unique identifier of the member */
    id: string & tags.Format<"uuid">;

    /** Internal sender identifier mapped from external sources */
    internal_sender_id: string;

    /** User's display nickname */
    nickname: string;
  };
}
