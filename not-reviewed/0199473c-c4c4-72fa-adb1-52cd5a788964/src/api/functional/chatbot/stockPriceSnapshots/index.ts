import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IChatbotStockPriceSnapshot } from "../../../structures/IChatbotStockPriceSnapshot";
import { IPageIChatbotStockPriceSnapshot } from "../../../structures/IPageIChatbotStockPriceSnapshot";

/**
 * Search and retrieve paginated virtual stock price snapshots.
 *
 * Retrieve a filtered and paginated list of virtual stock price snapshots. Each
 * snapshot represents the price of a particular stock item at a given
 * timestamp, stored in UTC.
 *
 * This operation allows clients to search for snapshots by stock item ID and
 * timestamp ranges, enabling historical data analysis and auditing. Pagination
 * and sorting facilitate effective browsing of large datasets.
 *
 * Security considerations include ensuring that only authorized users can
 * access stock price data. Given that stock prices are public within the
 * system, this endpoint is typically unrestricted.
 *
 * This operation directly reads from the chatbot_stock_price_snapshots table,
 * reflecting immutable historical price data. It is essential for the virtual
 * stock trading minigame's market price tracking.
 *
 * Clients can use this operation in conjunction with detail endpoints that
 * retrieve specific snapshot entries.
 *
 * No data modification occurs with this GET operation; it is purely
 * informational.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for stock price
 *   snapshots filtering
 * @path /chatbot/stockPriceSnapshots
 * @accessor api.functional.chatbot.stockPriceSnapshots.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for stock price snapshots
     * filtering
     */
    body: IChatbotStockPriceSnapshot.IRequest;
  };
  export type Body = IChatbotStockPriceSnapshot.IRequest;
  export type Response = IPageIChatbotStockPriceSnapshot;

  export const METADATA = {
    method: "PATCH",
    path: "/chatbot/stockPriceSnapshots",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/chatbot/stockPriceSnapshots";
  export const random = (): IPageIChatbotStockPriceSnapshot =>
    typia.random<IPageIChatbotStockPriceSnapshot>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details of a specific stock price snapshot.
 *
 * Retrieve a specific virtual stock price snapshot by its unique identifier.
 * This snapshot includes the stock item ID, snapshot timestamp, and price in
 * points.
 *
 * The data is immutable and serves as a historical record for stock price
 * changes. This operation enables clients to obtain precise details for audit,
 * analytics, or display purposes.
 *
 * Security considerations allow open access as price snapshots are public data
 * internally.
 *
 * This operation directly queries the chatbot_stock_price_snapshots table using
 * its primary key.
 *
 * Clients can combine this operation with list endpoints for comprehensive
 * historical stock data management.
 *
 * @param props.connection
 * @param props.stockPriceSnapshotId Unique identifier of the virtual stock
 *   price snapshot
 * @path /chatbot/stockPriceSnapshots/:stockPriceSnapshotId
 * @accessor api.functional.chatbot.stockPriceSnapshots.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the virtual stock price snapshot */
    stockPriceSnapshotId: string & tags.Format<"uuid">;
  };
  export type Response = IChatbotStockPriceSnapshot;

  export const METADATA = {
    method: "GET",
    path: "/chatbot/stockPriceSnapshots/:stockPriceSnapshotId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/chatbot/stockPriceSnapshots/${encodeURIComponent(props.stockPriceSnapshotId ?? "null")}`;
  export const random = (): IChatbotStockPriceSnapshot =>
    typia.random<IChatbotStockPriceSnapshot>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("stockPriceSnapshotId")(() =>
        typia.assert(props.stockPriceSnapshotId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
