import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IChatbotAdmin } from "../../../../structures/IChatbotAdmin";
import { IPageIChatbotAdmin } from "../../../../structures/IPageIChatbotAdmin";

/**
 * Create a new chatbot admin user.
 *
 * The request body must include a nickname and internal sender ID which
 * uniquely identify the admin.
 *
 * Creation timestamps are handled automatically and need not be provided.
 *
 * This operation is intended for authorized admin users only.
 *
 * The response includes the full created user record.
 *
 * Soft delete and id fields are not settable via this endpoint.
 *
 * @param props.connection
 * @param props.body Data required to create a chatbot admin user
 * @path /chatbot/admin/chatbotAdmins
 * @accessor api.functional.chatbot.admin.chatbotAdmins.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Data required to create a chatbot admin user */
    body: IChatbotAdmin.ICreate;
  };
  export type Body = IChatbotAdmin.ICreate;
  export type Response = IChatbotAdmin;

  export const METADATA = {
    method: "POST",
    path: "/chatbot/admin/chatbotAdmins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/chatbot/admin/chatbotAdmins";
  export const random = (): IChatbotAdmin => typia.random<IChatbotAdmin>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve paginated/searchable list of chatbot admins.
 *
 * Retrieve a paginated filtered list of chatbot admins.
 *
 * This operation supports advanced filtering, sorting, and pagination over the
 * set of admin users. It is designed for administrative user management
 * interfaces.
 *
 * Users must be authorized with 'admin' role to access this endpoint.
 *
 * The response returns a paginated list of admin summaries including id,
 * nickname, timestamps, and other public fields.
 *
 * This endpoint does not mutate data and is readonly.
 *
 * @param props.connection
 * @param props.body Filtering, sorting, and pagination parameters for chatbot
 *   admin list retrieval
 * @path /chatbot/admin/chatbotAdmins
 * @accessor api.functional.chatbot.admin.chatbotAdmins.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Filtering, sorting, and pagination parameters for chatbot admin list
     * retrieval
     */
    body: IChatbotAdmin.IRequest;
  };
  export type Body = IChatbotAdmin.IRequest;
  export type Response = IPageIChatbotAdmin.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/chatbot/admin/chatbotAdmins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/chatbot/admin/chatbotAdmins";
  export const random = (): IPageIChatbotAdmin.ISummary =>
    typia.random<IPageIChatbotAdmin.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve chatbot admin details by UUID.
 *
 * Get detailed information about a chatbot admin by UUID.
 *
 * This endpoint returns full details of a chatbot admin user identified by the
 * path parameter 'id'.
 *
 * Only users with admin role can access this operation.
 *
 * If no admin exists with the given id, the system returns a 404 error.
 *
 * The response includes all fields defined in the chatbot_admins schema except
 * sensitive credentials.
 *
 * No request body needed.
 *
 * @param props.connection
 * @param props.id UUID of the chatbot admin to retrieve
 * @path /chatbot/admin/chatbotAdmins/:id
 * @accessor api.functional.chatbot.admin.chatbotAdmins.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** UUID of the chatbot admin to retrieve */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IChatbotAdmin;

  export const METADATA = {
    method: "GET",
    path: "/chatbot/admin/chatbotAdmins/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/chatbot/admin/chatbotAdmins/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IChatbotAdmin => typia.random<IChatbotAdmin>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing chatbot admin user by ID.
 *
 * This API operation allows modification of an existing chatbot admin user's
 * details, including their internal sender ID and display nickname.
 *
 * The chatbot_admins table stores admins with unique UUIDs, internal sender
 * IDs, nicknames, and timestamps for auditing purposes.
 *
 * Administrators have the unique ability to perform privileged commands within
 * admin rooms. Updating admin details must be secured and reflect accurately in
 * the system.
 *
 * The operation requires the admin's UUID in the path to identify the target
 * record. The request body must contain the updated fields as per the defined
 * structure for updating admins.
 *
 * On success, the updated admin record is returned as confirmation.
 *
 * No deletion or creation occurs in this operation; it strictly updates
 * existing admin records.
 *
 * Authorization roles restrict this operation to users with 'admin' role,
 * maintaining system security.
 *
 * @param props.connection
 * @param props.id Unique identifier of the chatbot admin to update
 * @param props.body Data for updating the chatbot admin user
 * @path /chatbot/admin/chatbotAdmins/:id
 * @accessor api.functional.chatbot.admin.chatbotAdmins.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the chatbot admin to update */
    id: string & tags.Format<"uuid">;

    /** Data for updating the chatbot admin user */
    body: IChatbotAdmin.IUpdate;
  };
  export type Body = IChatbotAdmin.IUpdate;
  export type Response = IChatbotAdmin;

  export const METADATA = {
    method: "PUT",
    path: "/chatbot/admin/chatbotAdmins/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/chatbot/admin/chatbotAdmins/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IChatbotAdmin => typia.random<IChatbotAdmin>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an existing chatbot admin user by ID.
 *
 * This API operation deletes an existing chatbot admin user identified by the
 * UUID path parameter.
 *
 * The chatbot_admins table defines admin users with elevated permissions for
 * system management within admin rooms.
 *
 * Since the admin records do not have soft delete fields, this operation
 * performs a hard delete, removing the record permanently.
 *
 * Only authorized 'admin' role users may execute this deletion to protect
 * sensitive data.
 *
 * The operation has no request body and returns no content. On success, the
 * admin user is completely removed from the database, and cannot be recovered.
 *
 * Clients should handle any cascading effects this deletion might cause in
 * related systems or sessions.
 *
 * @param props.connection
 * @param props.id Unique identifier of the chatbot admin to delete
 * @path /chatbot/admin/chatbotAdmins/:id
 * @accessor api.functional.chatbot.admin.chatbotAdmins.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the chatbot admin to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/chatbot/admin/chatbotAdmins/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/chatbot/admin/chatbotAdmins/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
