import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IChatbotTitles } from "../../../../structures/IChatbotTitles";
import { IChatbotChatbotTitle } from "../../../../structures/IChatbotChatbotTitle";
import { IPageIChatbotChatbotTitle } from "../../../../structures/IPageIChatbotChatbotTitle";

/**
 * Create a new user title with specified name and fee discount rate. This
 * operation requires admin authorization to ensure only privileged users can
 * add new titles. The API accepts a JSON body with required properties name and
 * fee_discount_rate. Once successfully created, the new title entity is
 * returned including its unique identifier and timestamps.
 *
 * This operation directly interacts with the chatbot_titles database table as
 * defined in Prisma schema, conforming to all schema constraints on data types
 * and uniqueness. Handles validation errors and concurrency issues gracefully.
 *
 * The request body must specify all required fields for a complete title record
 * creation.
 *
 * @param props.connection
 * @param props.body Information needed to create a new user title
 * @path /chatbot/admin/titles
 * @accessor api.functional.chatbot.admin.titles.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information needed to create a new user title */
    body: IChatbotTitles.ICreate;
  };
  export type Body = IChatbotTitles.ICreate;
  export type Response = IChatbotTitles;

  export const METADATA = {
    method: "POST",
    path: "/chatbot/admin/titles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/chatbot/admin/titles";
  export const random = (): IChatbotTitles => typia.random<IChatbotTitles>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve user titles list.
 *
 * Retrieve a filtered and paginated list of user titles available in the
 * chatbot system. Titles grant fee discounts on minigame transactions and are
 * managed by administrators.
 *
 * This operation references the chatbot_titles Prisma model, including name,
 * fee discount rate, creation and update timestamps, and optional deletion
 * timestamps.
 *
 * Filtering and sorting can be applied via the request body criteria.
 *
 * The paginated response supports administrative UI display and reporting of
 * available titles.
 *
 * This operation is read-only with no modifications performed.
 *
 * @param props.connection
 * @param props.body Filter and pagination criteria for titles
 * @path /chatbot/admin/titles
 * @accessor api.functional.chatbot.admin.titles.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filter and pagination criteria for titles */
    body: IChatbotChatbotTitle.IRequest;
  };
  export type Body = IChatbotChatbotTitle.IRequest;
  export type Response = IPageIChatbotChatbotTitle;

  export const METADATA = {
    method: "PATCH",
    path: "/chatbot/admin/titles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/chatbot/admin/titles";
  export const random = (): IPageIChatbotChatbotTitle =>
    typia.random<IPageIChatbotChatbotTitle>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a user title by ID.
 *
 * Update an existing user title identified by UUID with new data such as name
 * and fee discount rate. Admin authorization is required. The API validates
 * incoming update data and returns updated title record upon success.
 *
 * The operation corresponds to chatbot_titles table and enforces schema
 * constraints and unique key rules. Updates may be partial but must satisfy
 * schema property types.
 *
 * Path parameter id must be provided to locate the target title record for
 * update.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target title
 * @param props.body Fields and values for updating the user title
 * @path /chatbot/admin/titles/:id
 * @accessor api.functional.chatbot.admin.titles.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target title */
    id: string & tags.Format<"uuid">;

    /** Fields and values for updating the user title */
    body: IChatbotTitles.IUpdate;
  };
  export type Body = IChatbotTitles.IUpdate;
  export type Response = IChatbotTitles;

  export const METADATA = {
    method: "PUT",
    path: "/chatbot/admin/titles/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/chatbot/admin/titles/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IChatbotTitles => typia.random<IChatbotTitles>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a user title by ID.
 *
 * Remove a user title by its unique identifier permanently from the system.
 * Admin authorization is mandatory to avoid unauthorized deletions.
 *
 * The deletion removes the entity record completely from the chatbot_titles
 * table, with no recovery possible. It is a hard delete operation.
 *
 * This operation requires the target title's UUID supplied in the path
 * parameter id.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target title
 * @path /chatbot/admin/titles/:id
 * @accessor api.functional.chatbot.admin.titles.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target title */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/chatbot/admin/titles/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/chatbot/admin/titles/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
