import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IChatbotMember } from "../../../../structures/IChatbotMember";
import { IPageIChatbotMember } from "../../../../structures/IPageIChatbotMember";

/**
 * Search and retrieve a paginated list of chatbot members.
 *
 * Retrieve a filtered and paginated list of chatbot member accounts from the
 * system.
 *
 * This operation allows searching members based on various attributes such as
 * nickname or internal sender ID.
 *
 * The chatbot_members table contains records for users participating in normal
 * chat rooms, linked to points, titles, and minigame data.
 *
 * Pagination and sorting optimize data retrieval to support user list views in
 * dashboards or admin panels.
 *
 * Security and performance considerations apply, ensuring only authorized
 * access (e.g., admins) to sensitive user data.
 *
 * The response returns a paginated list of summarized member data.
 *
 * @param props.connection
 * @param props.body Search and pagination parameters for members
 * @path /chatbot/admin/chatbotMembers
 * @accessor api.functional.chatbot.admin.chatbotMembers.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search and pagination parameters for members */
    body: IChatbotMember.IRequest;
  };
  export type Body = IChatbotMember.IRequest;
  export type Response = IPageIChatbotMember.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/chatbot/admin/chatbotMembers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/chatbot/admin/chatbotMembers";
  export const random = (): IPageIChatbotMember.ISummary =>
    typia.random<IPageIChatbotMember.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a chatbot member by ID.
 *
 * Get detailed information for a specific chatbot member by their unique ID.
 *
 * Chatbot members represent users in chat rooms who accumulate points and
 * participate in minigames.
 *
 * This operation supports retrieval of member data including nickname and
 * internal identifiers.
 *
 * The member's UUID must be provided in the path parameter.
 *
 * Only authorized users (e.g., admins) should access this endpoint to protect
 * sensitive user data.
 *
 * Returns full member details for client use.
 *
 * @param props.connection
 * @param props.id Unique identifier of the chatbot member
 * @path /chatbot/admin/chatbotMembers/:id
 * @accessor api.functional.chatbot.admin.chatbotMembers.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the chatbot member */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IChatbotMember;

  export const METADATA = {
    method: "GET",
    path: "/chatbot/admin/chatbotMembers/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/chatbot/admin/chatbotMembers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IChatbotMember => typia.random<IChatbotMember>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete chatbot member permanently by ID.
 *
 * Permanently remove a chatbot member from the system by ID. This is a hard
 * delete operation, completely deleting the member and all associated data such
 * as points, titles, audit logs, and command logs.
 *
 * The member is identified by UUID path parameter. Successful execution returns
 * no content.
 *
 * Operation restricted to admin role for security.
 *
 * @param props.connection
 * @param props.id UUID of the chatbot member to delete
 * @path /chatbot/admin/chatbotMembers/:id
 * @accessor api.functional.chatbot.admin.chatbotMembers.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of the chatbot member to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/chatbot/admin/chatbotMembers/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/chatbot/admin/chatbotMembers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
