import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IChatbotChatbotAuditLogs } from "../../../../structures/IChatbotChatbotAuditLogs";
import { IPageIChatbotChatbotAuditLogs } from "../../../../structures/IPageIChatbotChatbotAuditLogs";

/**
 * Search and retrieve filtered, paginated list of audit logs.
 *
 * Retrieve a paged list of audit logs filtered by search criteria including
 * event type, user, room, and date ranges. Supports advanced query parameters
 * for pagination, sorting, and filtering.
 *
 * Only admins with role 'admin' can access this endpoint.
 *
 * The response includes audit log summaries suitable for administrative
 * overview and troubleshooting. Pagination info is included to manage large
 * data sets.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for audit log
 *   filtering
 * @path /chatbot/admin/auditLogs
 * @accessor api.functional.chatbot.admin.auditLogs.search
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /** Search criteria and pagination parameters for audit log filtering */
    body: IChatbotChatbotAuditLogs.IRequest;
  };
  export type Body = IChatbotChatbotAuditLogs.IRequest;
  export type Response = IPageIChatbotChatbotAuditLogs.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/chatbot/admin/auditLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/chatbot/admin/auditLogs";
  export const random = (): IPageIChatbotChatbotAuditLogs.ISummary =>
    typia.random<IPageIChatbotChatbotAuditLogs.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed audit log entry by ID.
 *
 * Retrieve detailed information of an audit log entry by ID.
 *
 * Only users with the 'admin' role can execute this operation.
 *
 * The response includes all relevant audit event information to support
 * administrative review and troubleshooting.
 *
 * @param props.connection
 * @param props.auditLogId Unique identifier of the audit log entry to retrieve
 * @path /chatbot/admin/auditLogs/:auditLogId
 * @accessor api.functional.chatbot.admin.auditLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the audit log entry to retrieve */
    auditLogId: string & tags.Format<"uuid">;
  };
  export type Response = IChatbotChatbotAuditLogs;

  export const METADATA = {
    method: "GET",
    path: "/chatbot/admin/auditLogs/:auditLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/chatbot/admin/auditLogs/${encodeURIComponent(props.auditLogId ?? "null")}`;
  export const random = (): IChatbotChatbotAuditLogs =>
    typia.random<IChatbotChatbotAuditLogs>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("auditLogId")(() => typia.assert(props.auditLogId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
