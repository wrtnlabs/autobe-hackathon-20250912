import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IChatbotCommandLog } from "../../../../structures/IChatbotCommandLog";
import { IPageIChatbotCommandLog } from "../../../../structures/IPageIChatbotCommandLog";

/**
 * Search and list chatbot command logs with filters and pagination.
 *
 * Retrieve a filtered, paginated list of chatbot command logs which record
 * execution details of commands across the chatbot system.
 *
 * Request parameters allow searching and pagination based on fields such as
 * command text, user ID, and execution date. The response contains paginated
 * command log summaries matching the criteria.
 *
 * This operation is intended for use only by users with administrative
 * privileges.
 *
 * @param props.connection
 * @param props.body Search and pagination parameters for chatbot command log
 *   filtering
 * @path /chatbot/admin/chatbotCommandLogs
 * @accessor api.functional.chatbot.admin.chatbotCommandLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search and pagination parameters for chatbot command log filtering */
    body: IChatbotCommandLog.IRequest;
  };
  export type Body = IChatbotCommandLog.IRequest;
  export type Response = IPageIChatbotCommandLog.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/chatbot/admin/chatbotCommandLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/chatbot/admin/chatbotCommandLogs";
  export const random = (): IPageIChatbotCommandLog.ISummary =>
    typia.random<IPageIChatbotCommandLog.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed chatbot command log record by ID.
 *
 * Retrieve detailed information of a chatbot command log record by its unique
 * ID.
 *
 * The chatbot_command_logs table contains comprehensive log records of commands
 * executed including executor details, command string, parameters, and
 * execution timestamps.
 *
 * This operation is reserved for admin users who are authorized to audit system
 * command usage.
 *
 * If the command log record does not exist for the provided ID, an error should
 * be returned.
 *
 * @param props.connection
 * @param props.chatbotCommandLogId Unique identifier of the chatbot command log
 *   to retrieve
 * @path /chatbot/admin/chatbotCommandLogs/:chatbotCommandLogId
 * @accessor api.functional.chatbot.admin.chatbotCommandLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the chatbot command log to retrieve */
    chatbotCommandLogId: string & tags.Format<"uuid">;
  };
  export type Response = IChatbotCommandLog;

  export const METADATA = {
    method: "GET",
    path: "/chatbot/admin/chatbotCommandLogs/:chatbotCommandLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/chatbot/admin/chatbotCommandLogs/${encodeURIComponent(props.chatbotCommandLogId ?? "null")}`;
  export const random = (): IChatbotCommandLog =>
    typia.random<IChatbotCommandLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("chatbotCommandLogId")(() =>
        typia.assert(props.chatbotCommandLogId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
