import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IChatbotRoomTuples } from "../../../../structures/IChatbotRoomTuples";
import { IPageIChatbotRoomTuples } from "../../../../structures/IPageIChatbotRoomTuples";

/**
 * Create a new chatbot room tuple mapping normal room to admin room with
 * associated metadata.
 *
 * Ensures uniqueness of unique_id and appropriate data integrity for room IDs
 * and display name.
 *
 * Admins use this to configure new room tuples for chatbot session management.
 *
 * @param props.connection
 * @param props.body Information for creating a new chatbot room tuple
 * @path /chatbot/admin/chatbotRoomTuples
 * @accessor api.functional.chatbot.admin.chatbotRoomTuples.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information for creating a new chatbot room tuple */
    body: IChatbotRoomTuples.ICreate;
  };
  export type Body = IChatbotRoomTuples.ICreate;
  export type Response = IChatbotRoomTuples;

  export const METADATA = {
    method: "POST",
    path: "/chatbot/admin/chatbotRoomTuples",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/chatbot/admin/chatbotRoomTuples";
  export const random = (): IChatbotRoomTuples =>
    typia.random<IChatbotRoomTuples>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve paginated list of chatbot room tuples.
 *
 * Retrieve a filtered and paginated list of chatbot room tuples for
 * administrative or operational use. This endpoint allows clients to query
 * chatbot_room_tuples with advanced search parameters including filters by
 * normal room ID or admin room ID, and to sort results by creation or update
 * date.
 *
 * Users with appropriate permissions can use this list to manage room
 * relationships, monitor active tuples, and coordinate chatbot session
 * routing.
 *
 * This operation returns a paginated list conforming to the
 * IChatbotRoomTuples.ISummary schema, which includes essential tuple
 * information such as IDs, display names, and enablement flags without detailed
 * nested relations.
 *
 * Security considerations include controlled access to sensitive identifiers
 * and audit fields. Only authorized roles can query this list to prevent
 * exposure of internal mappings. Pagination helps mitigate data overload and
 * reduces query cost.
 *
 * This operates on the chatbot_room_tuples table as defined in the Prisma
 * schema, referencing all relevant fields and indexes involved with querying
 * active and enabled tuples.
 *
 * @param props.connection
 * @param props.body Search and pagination filter criteria for querying chatbot
 *   room tuples
 * @path /chatbot/admin/chatbotRoomTuples
 * @accessor api.functional.chatbot.admin.chatbotRoomTuples.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search and pagination filter criteria for querying chatbot room
     * tuples
     */
    body: IChatbotRoomTuples.IRequest;
  };
  export type Body = IChatbotRoomTuples.IRequest;
  export type Response = IPageIChatbotRoomTuples.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/chatbot/admin/chatbotRoomTuples",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/chatbot/admin/chatbotRoomTuples";
  export const random = (): IPageIChatbotRoomTuples.ISummary =>
    typia.random<IPageIChatbotRoomTuples.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve chatbot room tuple details by ID.
 *
 * Retrieve detailed information for a chatbot room tuple by its ID. Provides
 * full field visibility except for sensitive internal mappings that are
 * protected.
 *
 * This includes fields like normal_room_id, admin_room_id, display_name,
 * unique_id, enabled flag, and audit timestamps for create, update, and delete
 * events.
 *
 * Only authorized admins may access this resource to view and verify room tuple
 * configuration.
 *
 * @param props.connection
 * @param props.id Unique identifier of the chatbot room tuple
 * @path /chatbot/admin/chatbotRoomTuples/:id
 * @accessor api.functional.chatbot.admin.chatbotRoomTuples.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the chatbot room tuple */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IChatbotRoomTuples;

  export const METADATA = {
    method: "GET",
    path: "/chatbot/admin/chatbotRoomTuples/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/chatbot/admin/chatbotRoomTuples/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IChatbotRoomTuples =>
    typia.random<IChatbotRoomTuples>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update chatbot room tuple by ID.
 *
 * Update an existing chatbot room tuple by ID with new mapping and metadata.
 *
 * Supports modifying room identifiers, display name, unique business key, and
 * active status.
 *
 * This operation preserves historical audit timestamps and updates the
 * modification timestamp.
 *
 * Restricted to admin users to safeguard configuration integrity.
 *
 * @param props.connection
 * @param props.id Unique identifier of the chatbot room tuple to update
 * @param props.body Updates for chatbot room tuple
 * @path /chatbot/admin/chatbotRoomTuples/:id
 * @accessor api.functional.chatbot.admin.chatbotRoomTuples.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the chatbot room tuple to update */
    id: string & tags.Format<"uuid">;

    /** Updates for chatbot room tuple */
    body: IChatbotRoomTuples.IUpdate;
  };
  export type Body = IChatbotRoomTuples.IUpdate;
  export type Response = IChatbotRoomTuples;

  export const METADATA = {
    method: "PUT",
    path: "/chatbot/admin/chatbotRoomTuples/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/chatbot/admin/chatbotRoomTuples/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IChatbotRoomTuples =>
    typia.random<IChatbotRoomTuples>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a chatbot room tuple by UUID, permanently removing it from the system.
 *
 * This DELETE operation removes a chatbot room tuple permanently from the
 * database, identified by its unique UUID 'id'.
 *
 * This operation allows system administrators to delete obsolete or invalid
 * room mappings, which are used for isolating chat sessions and linking normal
 * chat rooms to their corresponding admin rooms.
 *
 * The system ensures referential integrity by cascading deletes to related
 * audit logs and other dependent data.
 *
 * Access to this operation should be restricted to authorized personnel due to
 * its impact on chat room management.
 *
 * Users of this endpoint must provide a valid UUID path parameter identifying
 * the target room tuple.
 *
 * No request body is required for this operation.
 *
 * A successful call results in permanent removal with no response body.
 *
 * Errors include 404 not found if the ID does not exist.
 *
 * No soft delete logic is applied here; this is a hard delete.
 *
 * @param props.connection
 * @param props.id UUID of the chatbot room tuple to delete
 * @path /chatbot/admin/chatbotRoomTuples/:id
 * @accessor api.functional.chatbot.admin.chatbotRoomTuples.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of the chatbot room tuple to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/chatbot/admin/chatbotRoomTuples/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/chatbot/admin/chatbotRoomTuples/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
