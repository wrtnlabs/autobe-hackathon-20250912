import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IChatbotStockPriceUpdate } from "../../../../structures/IChatbotStockPriceUpdate";
import { IPageIChatbotStockPriceUpdate } from "../../../../structures/IPageIChatbotStockPriceUpdate";

/**
 * Search and retrieve paginated stock price update events.
 *
 * Retrieve paginated stock price update events with details about the admin
 * actor (optional), update date, and notes.
 *
 * These update events provide historical log information for auditing and
 * system monitoring related to stock price changes.
 *
 * Access control is recommended to restrict this data to authorized
 * administrative users.
 *
 * This operation interfaces with the chatbot_stock_price_updates table,
 * preserving immutable audit log entries.
 *
 * Related operations include retrieving detailed single updates and associated
 * stock price snapshots.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for stock price
 *   updates filtering
 * @path /chatbot/admin/stockPriceUpdates
 * @accessor api.functional.chatbot.admin.stockPriceUpdates.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for stock price updates
     * filtering
     */
    body: IChatbotStockPriceUpdate.IRequest;
  };
  export type Body = IChatbotStockPriceUpdate.IRequest;
  export type Response = IPageIChatbotStockPriceUpdate;

  export const METADATA = {
    method: "PATCH",
    path: "/chatbot/admin/stockPriceUpdates",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/chatbot/admin/stockPriceUpdates";
  export const random = (): IPageIChatbotStockPriceUpdate =>
    typia.random<IPageIChatbotStockPriceUpdate>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details of a specific stock price update event.
 *
 * Retrieve detailed information about a specific stock price update event.
 *
 * The details include the admin user who triggered the update (if any), the
 * update date and notes, plus creation time.
 *
 * This data supports auditing and tracking of price change events in the
 * virtual stock system.
 *
 * Security requires this data be accessible only to admin users.
 *
 * Query by primary key from the chatbot_stock_price_updates table.
 *
 * This operation complements the stock price update list retrieval.
 *
 * @param props.connection
 * @param props.stockPriceUpdateId Unique identifier of the stock price update
 *   event
 * @path /chatbot/admin/stockPriceUpdates/:stockPriceUpdateId
 * @accessor api.functional.chatbot.admin.stockPriceUpdates.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the stock price update event */
    stockPriceUpdateId: string & tags.Format<"uuid">;
  };
  export type Response = IChatbotStockPriceUpdate;

  export const METADATA = {
    method: "GET",
    path: "/chatbot/admin/stockPriceUpdates/:stockPriceUpdateId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/chatbot/admin/stockPriceUpdates/${encodeURIComponent(props.stockPriceUpdateId ?? "null")}`;
  export const random = (): IChatbotStockPriceUpdate =>
    typia.random<IChatbotStockPriceUpdate>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("stockPriceUpdateId")(() =>
        typia.assert(props.stockPriceUpdateId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
