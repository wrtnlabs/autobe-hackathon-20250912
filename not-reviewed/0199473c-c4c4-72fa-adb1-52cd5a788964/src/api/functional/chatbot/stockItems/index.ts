import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IChatbotStockItem } from "../../../structures/IChatbotStockItem";
import { IPageIChatbotStockItem } from "../../../structures/IPageIChatbotStockItem";

/**
 * List virtual stock items with filtering and pagination.
 *
 * Retrieve a filtered and paginated list of virtual stock items available for
 * trading. The response includes stock summaries with unique code, name, and
 * initial price to assist users in making trading decisions.
 *
 * This operation interfaces with the chatbot_stock_items table as defined in
 * the Prisma schema which defines unique codes and names for each stock item
 * with corresponding initial prices.
 *
 * No parameters are needed in the path, but filtering and pagination parameters
 * should be passed in the request body.
 *
 * This read-only endpoint is accessible publicly.
 *
 * @param props.connection
 * @param props.body Filter and pagination criteria for listing stock items
 * @path /chatbot/stockItems
 * @accessor api.functional.chatbot.stockItems.indexStockItems
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexStockItems(
  connection: IConnection,
  props: indexStockItems.Props,
): Promise<indexStockItems.Response> {
  return true === connection.simulate
    ? indexStockItems.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexStockItems.METADATA,
          path: indexStockItems.path(),
          status: null,
        },
        props.body,
      );
}
export namespace indexStockItems {
  export type Props = {
    /** Filter and pagination criteria for listing stock items */
    body: IChatbotStockItem.IRequest;
  };
  export type Body = IChatbotStockItem.IRequest;
  export type Response = IPageIChatbotStockItem.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/chatbot/stockItems",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/chatbot/stockItems";
  export const random = (): IPageIChatbotStockItem.ISummary =>
    typia.random<IPageIChatbotStockItem.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: indexStockItems.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexStockItems.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a chatbot stock item by ID.
 *
 * Get detailed information about a specific stock item identified by
 * stockItemId. Returns the full stock item record from the chatbot_stock_items
 * table including code, name, initial price, and relevant timestamps.
 *
 * The stockItemId path parameter must be a valid UUID representing an existing
 * stock item.
 *
 * This operation is publicly accessible without authentication requirements.
 *
 * @param props.connection
 * @param props.stockItemId Unique identifier of the stock item to retrieve
 * @path /chatbot/stockItems/:stockItemId
 * @accessor api.functional.chatbot.stockItems.atStockItem
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atStockItem(
  connection: IConnection,
  props: atStockItem.Props,
): Promise<atStockItem.Response> {
  return true === connection.simulate
    ? atStockItem.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atStockItem.METADATA,
          path: atStockItem.path(props),
          status: null,
        },
      );
}
export namespace atStockItem {
  export type Props = {
    /** Unique identifier of the stock item to retrieve */
    stockItemId: string & tags.Format<"uuid">;
  };
  export type Response = IChatbotStockItem;

  export const METADATA = {
    method: "GET",
    path: "/chatbot/stockItems/:stockItemId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/chatbot/stockItems/${encodeURIComponent(props.stockItemId ?? "null")}`;
  export const random = (): IChatbotStockItem =>
    typia.random<IChatbotStockItem>();
  export const simulate = (
    connection: IConnection,
    props: atStockItem.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atStockItem.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("stockItemId")(() => typia.assert(props.stockItemId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
