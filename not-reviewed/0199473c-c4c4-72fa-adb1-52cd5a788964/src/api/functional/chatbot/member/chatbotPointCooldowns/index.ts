import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IChatbotChatbotPointCooldown } from "../../../../structures/IChatbotChatbotPointCooldown";
import { IPageIChatbotChatbotPointCooldown } from "../../../../structures/IPageIChatbotChatbotPointCooldown";

/**
 * Search and retrieve chatbot point cooldowns list.
 *
 * Retrieve a filtered and paginated list of chatbot point cooldowns that
 * enforce the point awarding cooldown per user in the chatbot system. This
 * enables system clients to query cooldown records for management or monitoring
 * purposes.
 *
 * Security considerations include restricting this operation potentially to
 * admin or system roles if sensitive. The response includes fields showing last
 * point award timestamp and reference to the member user.
 *
 * The underlying data comes from the chatbot_point_cooldowns Prisma table,
 * which links cooldowns to chatbot_members by unique member ID with timestamp
 * tracking. This operation does not modify cooldown data and is read-only,
 * suitable for administrative dashboards.
 *
 * Validation ensures that only existing cooldown records are returned, with
 * pagination and optional filters handled via the request body. This operation
 * complements POST/PUT operations for managing cooldowns but does not alter
 * data itself.
 *
 * @param props.connection
 * @param props.body Filtering and pagination request for chatbot point cooldown
 *   search
 * @path /chatbot/member/chatbotPointCooldowns
 * @accessor api.functional.chatbot.member.chatbotPointCooldowns.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filtering and pagination request for chatbot point cooldown search */
    body: IChatbotChatbotPointCooldown.IRequest;
  };
  export type Body = IChatbotChatbotPointCooldown.IRequest;
  export type Response = IPageIChatbotChatbotPointCooldown;

  export const METADATA = {
    method: "PATCH",
    path: "/chatbot/member/chatbotPointCooldowns",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/chatbot/member/chatbotPointCooldowns";
  export const random = (): IPageIChatbotChatbotPointCooldown =>
    typia.random<IPageIChatbotChatbotPointCooldown>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed chatbot point cooldown by id.
 *
 * Get detailed information about a single chatbot point cooldown identified by
 * its UUID. The operation returns cooldown metadata linked to a user member,
 * including last point award time, created and updated timestamps.
 *
 * Security considerations recommend access control due to the sensitive timing
 * detail included.
 *
 * This operation directly queries the chatbot_point_cooldowns Prisma table.
 *
 * Requesting with a non-existent ID will return a not-found error.
 *
 * The response returns data matching the IChatbotChatbotPointCooldown type
 * schema.
 *
 * @param props.connection
 * @param props.id Unique identifier of the chatbot point cooldown entry
 * @path /chatbot/member/chatbotPointCooldowns/:id
 * @accessor api.functional.chatbot.member.chatbotPointCooldowns.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the chatbot point cooldown entry */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IChatbotChatbotPointCooldown;

  export const METADATA = {
    method: "GET",
    path: "/chatbot/member/chatbotPointCooldowns/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/chatbot/member/chatbotPointCooldowns/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IChatbotChatbotPointCooldown =>
    typia.random<IChatbotChatbotPointCooldown>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
