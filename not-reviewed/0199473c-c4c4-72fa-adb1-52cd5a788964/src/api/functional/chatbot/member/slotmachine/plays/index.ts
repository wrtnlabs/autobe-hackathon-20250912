import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IChatbotSlotmachinePlay } from "../../../../../structures/IChatbotSlotmachinePlay";
import { IPageIChatbotSlotmachinePlay } from "../../../../../structures/IPageIChatbotSlotmachinePlay";

/**
 * Record a new slot machine play.
 *
 * Create a new slot machine play record capturing bet, slot results, and
 * payout.
 *
 * Only authenticated users can invoke this operation.
 *
 * Input data must conform to the required creation schema.
 *
 * Successful creation returns the full play record including auto-generated id.
 *
 * This operation supports recording user gameplay in the slot machine minigame.
 *
 * @param props.connection
 * @param props.body Creation data for new slot machine play
 * @path /chatbot/member/slotmachine/plays
 * @accessor api.functional.chatbot.member.slotmachine.plays.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation data for new slot machine play */
    body: IChatbotSlotmachinePlay.ICreate;
  };
  export type Body = IChatbotSlotmachinePlay.ICreate;
  export type Response = IChatbotSlotmachinePlay;

  export const METADATA = {
    method: "POST",
    path: "/chatbot/member/slotmachine/plays",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/chatbot/member/slotmachine/plays";
  export const random = (): IChatbotSlotmachinePlay =>
    typia.random<IChatbotSlotmachinePlay>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List and search slot machine play records.
 *
 * Retrieve a filtered and paginated list of slot machine play records from the
 * chatbot system. This operation allows searching by user or date ranges,
 * sorting by timestamp, and applies pagination controls.
 *
 * This operation is intended for authenticated users to review slot machine
 * play history either for personal review or for administrative oversight.
 *
 * The returned data includes information about the player, bet amount, slot
 * results, payout, and the time played.
 *
 * Security ensures only authorized users indexed as 'member' can invoke this
 * endpoint.
 *
 * The chatbot_slotmachine_plays table holds the records with references to
 * chatbot_members for player identification and audit.
 *
 * Proper validation and error handling apply if input parameters for filtering
 * or pagination are invalid.
 *
 * Related operations include creating slot machine plays and viewing details of
 * a specific play.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for slot machine
 *   plays
 * @path /chatbot/member/slotmachine/plays
 * @accessor api.functional.chatbot.member.slotmachine.plays.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for slot machine plays */
    body: IChatbotSlotmachinePlay.IRequest;
  };
  export type Body = IChatbotSlotmachinePlay.IRequest;
  export type Response = IPageIChatbotSlotmachinePlay.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/chatbot/member/slotmachine/plays",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/chatbot/member/slotmachine/plays";
  export const random = (): IPageIChatbotSlotmachinePlay.ISummary =>
    typia.random<IPageIChatbotSlotmachinePlay.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get slot machine play details by ID.
 *
 * Retrieve detailed information for a single slot machine play by its unique
 * identifier.
 *
 * This operation returns all data about the play including the player, bet
 * amount, individual slot outcomes, payout, and timestamp.
 *
 * Only authenticated users with role 'member' are allowed to access this
 * endpoint.
 *
 * The play ID path parameter must be a valid UUID corresponding to an existing
 * record.
 *
 * If the record is not found, the system returns an appropriate error response.
 *
 * This operation complements the list/search operation that retrieves multiple
 * records.
 *
 * @param props.connection
 * @param props.id Unique identifier of the slot machine play
 * @path /chatbot/member/slotmachine/plays/:id
 * @accessor api.functional.chatbot.member.slotmachine.plays.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the slot machine play */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IChatbotSlotmachinePlay;

  export const METADATA = {
    method: "GET",
    path: "/chatbot/member/slotmachine/plays/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/chatbot/member/slotmachine/plays/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IChatbotSlotmachinePlay =>
    typia.random<IChatbotSlotmachinePlay>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update slot machine play by ID.
 *
 * Update the details of a slot machine play identified by its unique ID.
 *
 * This includes changing bet points, slot results, payout, or other modifiable
 * fields.
 *
 * The play ID is required as a path parameter and must be a valid UUID.
 *
 * The request body must conform to the defined update schema.
 *
 * Only authorized users may perform this update.
 *
 * Response includes updated slot machine play information.
 *
 * @param props.connection
 * @param props.id Unique identifier of the slot machine play to update
 * @param props.body Update data for slot machine play
 * @path /chatbot/member/slotmachine/plays/:id
 * @accessor api.functional.chatbot.member.slotmachine.plays.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the slot machine play to update */
    id: string & tags.Format<"uuid">;

    /** Update data for slot machine play */
    body: IChatbotSlotmachinePlay.IUpdate;
  };
  export type Body = IChatbotSlotmachinePlay.IUpdate;
  export type Response = IChatbotSlotmachinePlay;

  export const METADATA = {
    method: "PUT",
    path: "/chatbot/member/slotmachine/plays/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/chatbot/member/slotmachine/plays/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IChatbotSlotmachinePlay =>
    typia.random<IChatbotSlotmachinePlay>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a slot machine play record by unique ID.
 *
 * This DELETE operation permanently removes a slot machine play record
 * identified by its UUID from the chatbot_slotmachine_plays table in the
 * database.
 *
 * The operation requires the ID of the slot machine play record as a path
 * parameter. It is intended for use by authenticated members who have
 * permission to manage their own slot machine play records.
 *
 * Since the Prisma schema does not include soft deletion fields for this table,
 * this delete is a hard delete and completely removes the record from the
 * database. There is no request or response body associated with this
 * operation.
 *
 * If the record with the given ID does not exist, an appropriate error should
 * be returned. This operation must be secured so that only authorized members
 * can access it.
 *
 * @param props.connection
 * @param props.id Unique identifier of the slot machine play record to delete
 * @path /chatbot/member/slotmachine/plays/:id
 * @accessor api.functional.chatbot.member.slotmachine.plays.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the slot machine play record to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/chatbot/member/slotmachine/plays/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/chatbot/member/slotmachine/plays/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
