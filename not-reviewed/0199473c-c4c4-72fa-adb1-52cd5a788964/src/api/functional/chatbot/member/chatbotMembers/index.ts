import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IChatbotMember } from "../../../../structures/IChatbotMember";
export * as userTitles from "./userTitles/index";
export * as stockHoldings from "./stockHoldings/index";
export * as stockTransactions from "./stockTransactions/index";

/**
 * Create new chatbot member.
 *
 * Create a new chatbot member in the system. The member is identified
 * internally by a unique sender ID mapped from external sources for privacy.
 * Nickname is stored as the display name. This creation is essential for
 * enabling users to participate in chat activities, earn points, and play
 * minigames.
 *
 * This operation requires `internal_sender_id` and `nickname`. It returns the
 * full member record, including UUID and timestamps.
 *
 * Access is restricted to authenticated users with role `member`. The
 * internal_sender_id must be unique system-wide.
 *
 * No password or role data is managed here; role inference occurs via room
 * context elsewhere.
 *
 * @param props.connection
 * @param props.body Information required to create a chatbot member
 * @path /chatbot/member/chatbotMembers
 * @accessor api.functional.chatbot.member.chatbotMembers.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information required to create a chatbot member */
    body: IChatbotMember.ICreate;
  };
  export type Body = IChatbotMember.ICreate;
  export type Response = IChatbotMember;

  export const METADATA = {
    method: "POST",
    path: "/chatbot/member/chatbotMembers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/chatbot/member/chatbotMembers";
  export const random = (): IChatbotMember => typia.random<IChatbotMember>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update existing chatbot member by ID.
 *
 * Modify chatbot member data for an existing user. Only fields such as nickname
 * are mutable; internal_sender_id remains unchanged for security and
 * consistency.
 *
 * This operation requires a valid UUID path parameter identifying the member to
 * update.
 *
 * Authorization restricts updates to authenticated users with role `member`.
 *
 * Returns updated member data on success.
 *
 * @param props.connection
 * @param props.id UUID identifying the member to update
 * @param props.body Updated member information
 * @path /chatbot/member/chatbotMembers/:id
 * @accessor api.functional.chatbot.member.chatbotMembers.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID identifying the member to update */
    id: string & tags.Format<"uuid">;

    /** Updated member information */
    body: IChatbotMember.IUpdate;
  };
  export type Body = IChatbotMember.IUpdate;
  export type Response = IChatbotMember;

  export const METADATA = {
    method: "PUT",
    path: "/chatbot/member/chatbotMembers/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/chatbot/member/chatbotMembers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IChatbotMember => typia.random<IChatbotMember>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
