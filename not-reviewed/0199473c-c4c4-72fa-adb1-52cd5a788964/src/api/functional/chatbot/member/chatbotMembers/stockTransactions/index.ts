import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IChatbotStockTransactions } from "../../../../../structures/IChatbotStockTransactions";
import { IChatbotStockTransaction } from "../../../../../structures/IChatbotStockTransaction";
import { IPageIChatbotStockTransaction } from "../../../../../structures/IPageIChatbotStockTransaction";

/**
 * Create a new stock transaction for a chatbot member in the system. The
 * request body must include transaction type (buy/sell), stock item ID,
 * quantity, unit price, fees, and total price. The service will validate
 * sufficient points or holdings based on transaction type and update the
 * member's records.
 *
 * This operation supports real-time trading within the chatbot's virtual stock
 * minigame, ensuring atomicity and consistency.
 *
 * Failure responses will indicate reasons such as insufficient points or
 * holdings, or invalid stock codes.
 *
 * @param props.connection
 * @param props.memberId Unique identifier of the chatbot member
 * @param props.body The necessary information to create a new stock transaction
 *   record
 * @path /chatbot/member/chatbotMembers/:memberId/stockTransactions
 * @accessor api.functional.chatbot.member.chatbotMembers.stockTransactions.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the chatbot member */
    memberId: string & tags.Format<"uuid">;

    /** The necessary information to create a new stock transaction record */
    body: IChatbotStockTransactions.ICreate;
  };
  export type Body = IChatbotStockTransactions.ICreate;
  export type Response = IChatbotStockTransactions;

  export const METADATA = {
    method: "POST",
    path: "/chatbot/member/chatbotMembers/:memberId/stockTransactions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/chatbot/member/chatbotMembers/${encodeURIComponent(props.memberId ?? "null")}/stockTransactions`;
  export const random = (): IChatbotStockTransactions =>
    typia.random<IChatbotStockTransactions>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List stock transactions for a chatbot member.
 *
 * Retrieve a paginated list of stock transactions for a specified chatbot
 * member.
 *
 * This operation supports querying transaction history for auditing and review
 * purposes.
 *
 * Path parameter `memberId` specifies the user whose transactions are being
 * listed.
 *
 * Supports filters and pagination via the request body described in
 * IChatbotStockTransaction.IRequest.
 *
 * Response includes a page of transaction records matching the request
 * criteria.
 *
 * Authorization limits access to authenticated users to protect privacy.
 *
 * Errors may occur for invalid member IDs or improper request filters.
 *
 * Part of the chatbot stock transaction management suite.
 *
 * @param props.connection
 * @param props.memberId Unique identifier of the target chatbot member
 * @param props.body Search and pagination parameters for listing stock
 *   transactions
 * @path /chatbot/member/chatbotMembers/:memberId/stockTransactions
 * @accessor api.functional.chatbot.member.chatbotMembers.stockTransactions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the target chatbot member */
    memberId: string & tags.Format<"uuid">;

    /** Search and pagination parameters for listing stock transactions */
    body: IChatbotStockTransaction.IRequest;
  };
  export type Body = IChatbotStockTransaction.IRequest;
  export type Response = IPageIChatbotStockTransaction;

  export const METADATA = {
    method: "PATCH",
    path: "/chatbot/member/chatbotMembers/:memberId/stockTransactions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/chatbot/member/chatbotMembers/${encodeURIComponent(props.memberId ?? "null")}/stockTransactions`;
  export const random = (): IPageIChatbotStockTransaction =>
    typia.random<IPageIChatbotStockTransaction>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a specific stock transaction of a chatbot member.
 *
 * Retrieve detailed information of a particular stock transaction performed by
 * a chatbot member. This operation requires identifying the member by their
 * unique UUID (memberId) and the target stock transaction by its unique UUID
 * (stockTransactionId).
 *
 * Security considerations ensure that only authorized clients can access
 * transaction details relevant to a member. The response includes all
 * attributes as stored in the chatbot_stock_transactions Prisma model, with
 * references to the owning user and associated stock item.
 *
 * This API is read-only and does not alter any database records. It supports
 * frontend views and administrative audits of trading history.
 *
 * Errors may occur if the member or transaction does not exist or if the
 * transaction does not belong to the specified member.
 *
 * Related operations: POST /chatbotMembers/{memberId}/stockTransactions to
 * create a new stock transaction, PUT
 * /chatbotMembers/{memberId}/stockTransactions/{stockTransactionId} to modify,
 * and DELETE /chatbotMembers/{memberId}/stockTransactions/{stockTransactionId}
 * to remove transactions permanently.
 *
 * @param props.connection
 * @param props.memberId Unique identifier of the chatbot member
 * @param props.stockTransactionId Unique identifier of the stock transaction
 * @path /chatbot/member/chatbotMembers/:memberId/stockTransactions/:stockTransactionId
 * @accessor api.functional.chatbot.member.chatbotMembers.stockTransactions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the chatbot member */
    memberId: string & tags.Format<"uuid">;

    /** Unique identifier of the stock transaction */
    stockTransactionId: string & tags.Format<"uuid">;
  };
  export type Response = IChatbotStockTransactions;

  export const METADATA = {
    method: "GET",
    path: "/chatbot/member/chatbotMembers/:memberId/stockTransactions/:stockTransactionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/chatbot/member/chatbotMembers/${encodeURIComponent(props.memberId ?? "null")}/stockTransactions/${encodeURIComponent(props.stockTransactionId ?? "null")}`;
  export const random = (): IChatbotStockTransactions =>
    typia.random<IChatbotStockTransactions>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
      assert.param("stockTransactionId")(() =>
        typia.assert(props.stockTransactionId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a stock transaction of a chatbot member.
 *
 * Update an existing stock transaction for a chatbot member. The API accepts
 * full update data in the request body, including transaction type, quantity,
 * unit price, fees, and total price. It validates and saves the data, ensuring
 * transactional integrity.
 *
 * This operation is necessary for correcting or adjusting recorded
 * transactions. Authorization ensures the member owns the transaction.
 *
 * Errors may result from invalid data, unauthorized access, or non-existent
 * records.
 *
 * @param props.connection
 * @param props.memberId Unique identifier of the chatbot member
 * @param props.stockTransactionId Unique identifier of the stock transaction
 * @param props.body Updated data for the stock transaction
 * @path /chatbot/member/chatbotMembers/:memberId/stockTransactions/:stockTransactionId
 * @accessor api.functional.chatbot.member.chatbotMembers.stockTransactions.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the chatbot member */
    memberId: string & tags.Format<"uuid">;

    /** Unique identifier of the stock transaction */
    stockTransactionId: string & tags.Format<"uuid">;

    /** Updated data for the stock transaction */
    body: IChatbotStockTransactions.IUpdate;
  };
  export type Body = IChatbotStockTransactions.IUpdate;
  export type Response = IChatbotStockTransactions;

  export const METADATA = {
    method: "PUT",
    path: "/chatbot/member/chatbotMembers/:memberId/stockTransactions/:stockTransactionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/chatbot/member/chatbotMembers/${encodeURIComponent(props.memberId ?? "null")}/stockTransactions/${encodeURIComponent(props.stockTransactionId ?? "null")}`;
  export const random = (): IChatbotStockTransactions =>
    typia.random<IChatbotStockTransactions>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
      assert.param("stockTransactionId")(() =>
        typia.assert(props.stockTransactionId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a stock transaction of a chatbot member.
 *
 * Permanently delete a specific stock transaction of a chatbot member from the
 * database. This operation performs a hard delete without soft delete
 * handling.
 *
 * Only authorized users may delete their own transactions.
 *
 * After deletion, the transaction will no longer appear in any queries or
 * reports.
 *
 * Errors occur if the transaction or member does not exist or if access is
 * unauthorized.
 *
 * @param props.connection
 * @param props.memberId Unique identifier of the chatbot member
 * @param props.stockTransactionId Unique identifier of the stock transaction
 * @path /chatbot/member/chatbotMembers/:memberId/stockTransactions/:stockTransactionId
 * @accessor api.functional.chatbot.member.chatbotMembers.stockTransactions.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the chatbot member */
    memberId: string & tags.Format<"uuid">;

    /** Unique identifier of the stock transaction */
    stockTransactionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/chatbot/member/chatbotMembers/:memberId/stockTransactions/:stockTransactionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/chatbot/member/chatbotMembers/${encodeURIComponent(props.memberId ?? "null")}/stockTransactions/${encodeURIComponent(props.stockTransactionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
      assert.param("stockTransactionId")(() =>
        typia.assert(props.stockTransactionId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
