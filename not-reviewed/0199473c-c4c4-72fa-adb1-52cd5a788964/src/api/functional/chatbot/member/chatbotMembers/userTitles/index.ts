import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IChatbotUserTitle } from "../../../../../structures/IChatbotUserTitle";
import { IPageIChatbotUserTitle } from "../../../../../structures/IPageIChatbotUserTitle";

/**
 * Create a new chatbot user title for a member.
 *
 * Assign a new user title to a chatbot member by creating a new record in
 * chatbot_user_titles. The request body must include required information such
 * as title reference and assignment date.
 *
 * The operation validates the input thoroughly and enforces uniqueness
 * constraints such as only one active title per member.
 *
 * Only authenticated users with role "member" are authorized.
 *
 * On success, the new detailed user title entity is returned.
 *
 * Errors occur for validation failures or business rule violations.
 *
 * This operation is fundamental for user title management in the chatbot
 * system.
 *
 * @param props.connection
 * @param props.memberId Unique identifier of the target chatbot member
 * @param props.body User title assignment creation details
 * @path /chatbot/member/chatbotMembers/:memberId/userTitles
 * @accessor api.functional.chatbot.member.chatbotMembers.userTitles.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the target chatbot member */
    memberId: string & tags.Format<"uuid">;

    /** User title assignment creation details */
    body: IChatbotUserTitle.ICreate;
  };
  export type Body = IChatbotUserTitle.ICreate;
  export type Response = IChatbotUserTitle;

  export const METADATA = {
    method: "POST",
    path: "/chatbot/member/chatbotMembers/:memberId/userTitles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/chatbot/member/chatbotMembers/${encodeURIComponent(props.memberId ?? "null")}/userTitles`;
  export const random = (): IChatbotUserTitle =>
    typia.random<IChatbotUserTitle>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List and search chatbot user titles by member ID with pagination and
 * filtering.
 *
 * Retrieve a filtered and paginated list of chatbot user titles associated with
 * a specific chatbot member. This operation supports advanced search and
 * filtering criteria submitted in the request body, allowing clients to narrow
 * down the list of user titles by various properties such as assignment dates
 * or fee discount rates.
 *
 * Security is enforced by requiring authenticated user access via the "member"
 * role. This ensures only authorized users can query user title data.
 *
 * The operation maps directly to the chatbot_user_titles table filtered by the
 * member's unique ID (memberId). It returns paginated summary data optimized
 * for display in user interfaces.
 *
 * Correct path parameters for memberId ensure precise user scoping.
 *
 * Errors may be returned if the member does not exist or if the request body
 * parameters are ill-formed.
 *
 * This operation is a key building block for user management APIs focusing on
 * title assignments and their associated benefits.
 *
 * @param props.connection
 * @param props.memberId Unique identifier of the target chatbot member
 * @param props.body Filtering, search, and pagination parameters for chatbot
 *   user title listing
 * @path /chatbot/member/chatbotMembers/:memberId/userTitles
 * @accessor api.functional.chatbot.member.chatbotMembers.userTitles.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the target chatbot member */
    memberId: string & tags.Format<"uuid">;

    /**
     * Filtering, search, and pagination parameters for chatbot user title
     * listing
     */
    body: IChatbotUserTitle.IRequest;
  };
  export type Body = IChatbotUserTitle.IRequest;
  export type Response = IPageIChatbotUserTitle.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/chatbot/member/chatbotMembers/:memberId/userTitles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/chatbot/member/chatbotMembers/${encodeURIComponent(props.memberId ?? "null")}/userTitles`;
  export const random = (): IPageIChatbotUserTitle.ISummary =>
    typia.random<IPageIChatbotUserTitle.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a chatbot user title record by member and user title IDs.
 *
 * Retrieve detailed information about a specific user title assigned to a
 * chatbot member. This operation fetches the user title referenced by the
 * member's unique memberId and the user title's unique userTitleId.
 *
 * Only users authenticated as "member" roles are authorized to access this
 * endpoint.
 *
 * The API returns the full detailed user title entity, including assignment
 * details and timestamps.
 *
 * Security checks ensure the user title belongs to the specified memberId. If
 * not found or unauthorized, an error is returned.
 *
 * This operation corresponds to a simple retrieval by primary key and foreign
 * key references in the database schema.
 *
 * @param props.connection
 * @param props.memberId Unique identifier of the target chatbot member
 * @param props.userTitleId Unique identifier of the chatbot user title record
 * @path /chatbot/member/chatbotMembers/:memberId/userTitles/:userTitleId
 * @accessor api.functional.chatbot.member.chatbotMembers.userTitles.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target chatbot member */
    memberId: string & tags.Format<"uuid">;

    /** Unique identifier of the chatbot user title record */
    userTitleId: string & tags.Format<"uuid">;
  };
  export type Response = IChatbotUserTitle;

  export const METADATA = {
    method: "GET",
    path: "/chatbot/member/chatbotMembers/:memberId/userTitles/:userTitleId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/chatbot/member/chatbotMembers/${encodeURIComponent(props.memberId ?? "null")}/userTitles/${encodeURIComponent(props.userTitleId ?? "null")}`;
  export const random = (): IChatbotUserTitle =>
    typia.random<IChatbotUserTitle>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
      assert.param("userTitleId")(() => typia.assert(props.userTitleId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a chatbot user title assignment by member and user title IDs.
 *
 * Update an existing user title assignment for chatbot member. The request
 * provides updated fields such as title reference and assignment date.
 *
 * Access is restricted to authenticated users with role "member".
 *
 * Validates existence of member and user title records.
 *
 * Returns the updated user title entity on success.
 *
 * Error handling covers invalid input or missing records.
 *
 * This operation directly maps to the PUT method for chatbot_user_titles
 * resource under member scope.
 *
 * @param props.connection
 * @param props.memberId Unique identifier of the target chatbot member
 * @param props.userTitleId Unique identifier of the chatbot user title record
 * @param props.body User title update details
 * @path /chatbot/member/chatbotMembers/:memberId/userTitles/:userTitleId
 * @accessor api.functional.chatbot.member.chatbotMembers.userTitles.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target chatbot member */
    memberId: string & tags.Format<"uuid">;

    /** Unique identifier of the chatbot user title record */
    userTitleId: string & tags.Format<"uuid">;

    /** User title update details */
    body: IChatbotUserTitle.IUpdate;
  };
  export type Body = IChatbotUserTitle.IUpdate;
  export type Response = IChatbotUserTitle;

  export const METADATA = {
    method: "PUT",
    path: "/chatbot/member/chatbotMembers/:memberId/userTitles/:userTitleId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/chatbot/member/chatbotMembers/${encodeURIComponent(props.memberId ?? "null")}/userTitles/${encodeURIComponent(props.userTitleId ?? "null")}`;
  export const random = (): IChatbotUserTitle =>
    typia.random<IChatbotUserTitle>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
      assert.param("userTitleId")(() => typia.assert(props.userTitleId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a chatbot user title association by memberId and userTitleId.
 *
 * Deletes a user title association identified by userTitleId for the member
 * identified by memberId. This removes the assigned title from the user and the
 * record is permanently deleted from the chatbot_user_titles table.
 *
 * Security considerations include ensuring that only authorized users can
 * delete the title associations. This operation relates directly to the
 * chatbot_user_titles table as defined in the Prisma schema.
 *
 * No request body is needed. The operation requires the memberId and
 * userTitleId path parameters which must be valid UUIDs corresponding to
 * existing records.
 *
 * This operation permanently removes the user-title allocation record and
 * cannot be undone. Error handling must include checks for existence and
 * permissions.
 *
 * @param props.connection
 * @param props.memberId Unique identifier of the target chatbot member
 * @param props.userTitleId Unique identifier of the user title association to
 *   delete
 * @path /chatbot/member/chatbotMembers/:memberId/userTitles/:userTitleId
 * @accessor api.functional.chatbot.member.chatbotMembers.userTitles.eraseUserTitle
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseUserTitle(
  connection: IConnection,
  props: eraseUserTitle.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseUserTitle.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseUserTitle.METADATA,
          path: eraseUserTitle.path(props),
          status: null,
        },
      );
}
export namespace eraseUserTitle {
  export type Props = {
    /** Unique identifier of the target chatbot member */
    memberId: string & tags.Format<"uuid">;

    /** Unique identifier of the user title association to delete */
    userTitleId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/chatbot/member/chatbotMembers/:memberId/userTitles/:userTitleId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/chatbot/member/chatbotMembers/${encodeURIComponent(props.memberId ?? "null")}/userTitles/${encodeURIComponent(props.userTitleId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseUserTitle.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseUserTitle.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
      assert.param("userTitleId")(() => typia.assert(props.userTitleId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
