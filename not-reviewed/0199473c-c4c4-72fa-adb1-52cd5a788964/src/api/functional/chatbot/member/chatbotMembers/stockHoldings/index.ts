import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IChatbotStockHolding } from "../../../../../structures/IChatbotStockHolding";
import { IChatbotChatbotMembersStockHoldings } from "../../../../../structures/IChatbotChatbotMembersStockHoldings";
import { IPageIChatbotStockHoldings } from "../../../../../structures/IPageIChatbotStockHoldings";
import { IChatbotStockHoldings } from "../../../../../structures/IChatbotStockHoldings";

/**
 * Create a stock holding record for a chatbot member.
 *
 * Create a new stock holding entry for a specific chatbot member.
 *
 * This operation allows the system to add stock holdings for a user in the
 * virtual stock trading game, linking the holding to the member's internal ID.
 *
 * Authorization is required to ensure only permitted users or admins add
 * holdings.
 *
 * The path parameter `memberId` identifies the target member whose stock
 * portfolio is being modified.
 *
 * The request body includes necessary details such as stock item and quantity.
 *
 * Upon success, the operation returns the created stock holding record with its
 * unique ID and timestamps, as stored in the chatbot_stock_holdings table.
 *
 * Errors may result from invalid member IDs or improper request body formats.
 *
 * This operation is part of the chatbot stock holdings management in the
 * chatbot system.
 *
 * @param props.connection
 * @param props.memberId Unique identifier of the target chatbot member
 * @param props.body Details for creating a stock holding record
 * @path /chatbot/member/chatbotMembers/:memberId/stockHoldings
 * @accessor api.functional.chatbot.member.chatbotMembers.stockHoldings.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the target chatbot member */
    memberId: string & tags.Format<"uuid">;

    /** Details for creating a stock holding record */
    body: IChatbotStockHolding.ICreate;
  };
  export type Body = IChatbotStockHolding.ICreate;
  export type Response = IChatbotStockHolding;

  export const METADATA = {
    method: "POST",
    path: "/chatbot/member/chatbotMembers/:memberId/stockHoldings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/chatbot/member/chatbotMembers/${encodeURIComponent(props.memberId ?? "null")}/stockHoldings`;
  export const random = (): IChatbotStockHolding =>
    typia.random<IChatbotStockHolding>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get list of stock holdings owned by a member.
 *
 * Retrieve a paginated list of stock holdings for a specified chatbot member.
 * The response includes stock item details and quantity held. Supports
 * filtering and sorting parameters for advanced queries.
 *
 * Security considerations ensure that members can only access their own
 * holdings appropriately.
 *
 * This operation acts upon the chatbot_stock_holdings table with related
 * chatbot_stock_items to provide full context of owned stocks.
 *
 * Validation ensures memberId is a valid UUID and request parameters conform to
 * IChatbotChatbotMembersStockHoldings.IRequest schema.
 *
 * Related operations include purchasing and selling stocks which modify
 * holdings.
 *
 * @param props.connection
 * @param props.memberId Unique identifier (UUID) of the chatbot member whose
 *   stock holdings are requested
 * @param props.body Parameters for pagination, filtering, and sorting of stock
 *   holdings
 * @path /chatbot/member/chatbotMembers/:memberId/stockHoldings
 * @accessor api.functional.chatbot.member.chatbotMembers.stockHoldings.indexStockHoldingsByMember
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexStockHoldingsByMember(
  connection: IConnection,
  props: indexStockHoldingsByMember.Props,
): Promise<indexStockHoldingsByMember.Response> {
  return true === connection.simulate
    ? indexStockHoldingsByMember.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexStockHoldingsByMember.METADATA,
          path: indexStockHoldingsByMember.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace indexStockHoldingsByMember {
  export type Props = {
    /**
     * Unique identifier (UUID) of the chatbot member whose stock holdings
     * are requested
     */
    memberId: string & tags.Format<"uuid">;

    /** Parameters for pagination, filtering, and sorting of stock holdings */
    body: IChatbotChatbotMembersStockHoldings.IRequest;
  };
  export type Body = IChatbotChatbotMembersStockHoldings.IRequest;
  export type Response = IPageIChatbotStockHoldings.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/chatbot/member/chatbotMembers/:memberId/stockHoldings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/chatbot/member/chatbotMembers/${encodeURIComponent(props.memberId ?? "null")}/stockHoldings`;
  export const random = (): IPageIChatbotStockHoldings.ISummary =>
    typia.random<IPageIChatbotStockHoldings.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: indexStockHoldingsByMember.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexStockHoldingsByMember.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed stock holding info by IDs.
 *
 * Retrieve detailed information about a specific stock holding belonging to a
 * chatbot member. Includes stock item metadata and holding quantity.
 *
 * Security controls ensure only authorized users with access to the member's
 * holdings can fetch this data.
 *
 * Directly queries chatbot_stock_holdings and associated stock items for full
 * context.
 *
 * Validation enforces UUID format for path parameters and existence of the
 * record.
 *
 * Related to stock holding listing and transactions for management.
 *
 * @param props.connection
 * @param props.memberId Target chatbot member's unique identifier (UUID)
 * @param props.stockHoldingId Specific stock holding record unique identifier
 *   (UUID)
 * @path /chatbot/member/chatbotMembers/:memberId/stockHoldings/:stockHoldingId
 * @accessor api.functional.chatbot.member.chatbotMembers.stockHoldings.atStockHoldingByMember
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atStockHoldingByMember(
  connection: IConnection,
  props: atStockHoldingByMember.Props,
): Promise<atStockHoldingByMember.Response> {
  return true === connection.simulate
    ? atStockHoldingByMember.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atStockHoldingByMember.METADATA,
          path: atStockHoldingByMember.path(props),
          status: null,
        },
      );
}
export namespace atStockHoldingByMember {
  export type Props = {
    /** Target chatbot member's unique identifier (UUID) */
    memberId: string & tags.Format<"uuid">;

    /** Specific stock holding record unique identifier (UUID) */
    stockHoldingId: string & tags.Format<"uuid">;
  };
  export type Response = IChatbotStockHoldings;

  export const METADATA = {
    method: "GET",
    path: "/chatbot/member/chatbotMembers/:memberId/stockHoldings/:stockHoldingId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/chatbot/member/chatbotMembers/${encodeURIComponent(props.memberId ?? "null")}/stockHoldings/${encodeURIComponent(props.stockHoldingId ?? "null")}`;
  export const random = (): IChatbotStockHoldings =>
    typia.random<IChatbotStockHoldings>();
  export const simulate = (
    connection: IConnection,
    props: atStockHoldingByMember.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atStockHoldingByMember.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
      assert.param("stockHoldingId")(() => typia.assert(props.stockHoldingId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a chatbot member's stock holding.
 *
 * Update details of an existing stock holding record for a chatbot member.
 *
 * This operation modifies the quantity or related properties of a stock holding
 * linked to a specified member. It supports gameplay features such as buying
 * and selling stocks.
 *
 * Path parameters `memberId` and `stockHoldingId` target the holding to update.
 *
 * Request body must conform to the IChatbotStockHolding.IUpdate schema.
 *
 * Successful updates return the updated stock holding.
 *
 * Authorization requires the user role to ensure only permitted operations.
 *
 * Errors occur for invalid IDs or invalid payloads.
 *
 * Part of chatbot member stock management features.
 *
 * @param props.connection
 * @param props.memberId Unique identifier of the target chatbot member
 * @param props.stockHoldingId Unique identifier of the target stock holding
 *   record
 * @param props.body Stock holding update information
 * @path /chatbot/member/chatbotMembers/:memberId/stockHoldings/:stockHoldingId
 * @accessor api.functional.chatbot.member.chatbotMembers.stockHoldings.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target chatbot member */
    memberId: string & tags.Format<"uuid">;

    /** Unique identifier of the target stock holding record */
    stockHoldingId: string & tags.Format<"uuid">;

    /** Stock holding update information */
    body: IChatbotStockHolding.IUpdate;
  };
  export type Body = IChatbotStockHolding.IUpdate;
  export type Response = IChatbotStockHolding;

  export const METADATA = {
    method: "PUT",
    path: "/chatbot/member/chatbotMembers/:memberId/stockHoldings/:stockHoldingId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/chatbot/member/chatbotMembers/${encodeURIComponent(props.memberId ?? "null")}/stockHoldings/${encodeURIComponent(props.stockHoldingId ?? "null")}`;
  export const random = (): IChatbotStockHolding =>
    typia.random<IChatbotStockHolding>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
      assert.param("stockHoldingId")(() => typia.assert(props.stockHoldingId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a chatbot member's stock holding record.
 *
 * Delete a stock holding record associated with a chatbot member.
 *
 * This operation permanently removes the specified stock holding entry from the
 * user's portfolio.
 *
 * Path parameters include `memberId` and `stockHoldingId` which uniquely
 * identify the target holding.
 *
 * No request body is needed.
 *
 * Authorization roles ensure only owners or admins can perform this deletion.
 *
 * Successful deletion returns no content.
 *
 * This is a hard delete operation with permanent removal of the record.
 *
 * Errors can result from invalid identifiers or lack of permissions.
 *
 * @param props.connection
 * @param props.memberId Unique identifier of the target chatbot member
 * @param props.stockHoldingId Unique identifier of the target stock holding
 *   record
 * @path /chatbot/member/chatbotMembers/:memberId/stockHoldings/:stockHoldingId
 * @accessor api.functional.chatbot.member.chatbotMembers.stockHoldings.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target chatbot member */
    memberId: string & tags.Format<"uuid">;

    /** Unique identifier of the target stock holding record */
    stockHoldingId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/chatbot/member/chatbotMembers/:memberId/stockHoldings/:stockHoldingId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/chatbot/member/chatbotMembers/${encodeURIComponent(props.memberId ?? "null")}/stockHoldings/${encodeURIComponent(props.stockHoldingId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
      assert.param("stockHoldingId")(() => typia.assert(props.stockHoldingId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
