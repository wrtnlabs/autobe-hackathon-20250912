import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IChatbotPoints } from "../../../../structures/IChatbotPoints";

/**
 * Retrieve chatbot points by ID.
 *
 * Retrieve detailed chatbot points information by unique ID.
 *
 * This operation fetches a single chatbot_points record identified by its UUID
 * from the database. It is intended for administrators or system components
 * needing to view the current points held by a member. The retrieved data
 * includes the member ID and the current points balance.
 *
 * Security consideration includes that this endpoint should be accessible only
 * to authorized roles with rights to view user points.
 *
 * The underlying table 'chatbot_points' links to the 'chatbot_members' table
 * for member reference. The integrity of member points is critical to features
 * like minigames and rankings.
 *
 * Request parameters include a single path parameter 'id', which is the UUID of
 * the point record to fetch.
 *
 * The response will contain the full point entity, representing the current
 * state in the database.
 *
 * Errors may occur if the specified ID does not exist, which should be handled
 * gracefully by the calling system.
 *
 * @param props.connection
 * @param props.id Unique identifier of the chatbot points record
 * @path /chatbot/member/chatbotPoints/:id
 * @accessor api.functional.chatbot.member.chatbotPoints.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the chatbot points record */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IChatbotPoints;

  export const METADATA = {
    method: "GET",
    path: "/chatbot/member/chatbotPoints/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/chatbot/member/chatbotPoints/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IChatbotPoints => typia.random<IChatbotPoints>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update chatbot points by ID.
 *
 * Update chatbot points information by ID.
 *
 * This operation allows update of fields such as points total for a given
 * chatbot_points record, specified by the path parameter 'id'.
 *
 * Security constraints require that only authorized users can perform updates
 * to prevent unauthorized point manipulation.
 *
 * The request body must specify the fields to update with valid values. On
 * success, the updated record is returned.
 *
 * Errors may arise if the specified ID does not exist or if validation fails.
 *
 * @param props.connection
 * @param props.id Unique identifier of the chatbot points record to update
 * @param props.body Update info for chatbot points
 * @path /chatbot/member/chatbotPoints/:id
 * @accessor api.functional.chatbot.member.chatbotPoints.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the chatbot points record to update */
    id: string & tags.Format<"uuid">;

    /** Update info for chatbot points */
    body: IChatbotPoints.IUpdate;
  };
  export type Body = IChatbotPoints.IUpdate;
  export type Response = IChatbotPoints;

  export const METADATA = {
    method: "PUT",
    path: "/chatbot/member/chatbotPoints/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/chatbot/member/chatbotPoints/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IChatbotPoints => typia.random<IChatbotPoints>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete chatbot points by ID.
 *
 * Delete chatbot points record by ID permanently.
 *
 * This operation performs a hard delete of the chatbot_points record identified
 * by the UUID path parameter. It removes all data associated and is
 * irreversible.
 *
 * Access is restricted to authorized user roles.
 *
 * No content is returned upon successful deletion. Errors occur if the ID does
 * not exist.
 *
 * Use with caution to avoid loss of critical user point data.
 *
 * @param props.connection
 * @param props.id Unique identifier of the chatbot points record to delete
 * @path /chatbot/member/chatbotPoints/:id
 * @accessor api.functional.chatbot.member.chatbotPoints.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the chatbot points record to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/chatbot/member/chatbotPoints/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/chatbot/member/chatbotPoints/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create new chatbot points record.
 *
 * Create a new chatbot points record in the database.
 *
 * This operation is designed for system components or administrators to
 * initialize point records for users as needed. The request body must include
 * the member's unique identifier linked to points and the initial points
 * quantity.
 *
 * Security is important as point creation must be controlled and validated to
 * prevent unauthorized points manipulation.
 *
 * On success, the created point record is returned with all fields populated as
 * in the database.
 *
 * If creation fails due to constraint violations (e.g., duplicate member
 * points), errors will be returned and should be handled appropriately.
 *
 * @param props.connection
 * @param props.body Creation info for chatbot points
 * @path /chatbot/member/chatbotPoints
 * @accessor api.functional.chatbot.member.chatbotPoints.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation info for chatbot points */
    body: IChatbotPoints.ICreate;
  };
  export type Body = IChatbotPoints.ICreate;
  export type Response = IChatbotPoints;

  export const METADATA = {
    method: "POST",
    path: "/chatbot/member/chatbotPoints",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/chatbot/member/chatbotPoints";
  export const random = (): IChatbotPoints => typia.random<IChatbotPoints>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
