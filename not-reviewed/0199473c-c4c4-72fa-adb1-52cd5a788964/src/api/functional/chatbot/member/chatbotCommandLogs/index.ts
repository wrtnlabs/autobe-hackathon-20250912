import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IChatbotCommandLog } from "../../../../structures/IChatbotCommandLog";
import { IChatbotChatbotCommandLogs } from "../../../../structures/IChatbotChatbotCommandLogs";

/**
 * Create a new chatbot command log recording an executed command.
 *
 * The created record includes member ID of the executor, exact command string,
 * optional parameters, and creation timestamp.
 *
 * This operation requires a request body adhering to the
 * `IChatbotCommandLog.ICreate` schema.
 *
 * Only authenticated members can create command logs.
 *
 * Returns the created command log with full details and assigned unique ID.
 *
 * @param props.connection
 * @param props.body Creation data for the chatbot command log
 * @path /chatbot/member/chatbotCommandLogs
 * @accessor api.functional.chatbot.member.chatbotCommandLogs.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation data for the chatbot command log */
    body: IChatbotCommandLog.ICreate;
  };
  export type Body = IChatbotCommandLog.ICreate;
  export type Response = IChatbotCommandLog;

  export const METADATA = {
    method: "POST",
    path: "/chatbot/member/chatbotCommandLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/chatbot/member/chatbotCommandLogs";
  export const random = (): IChatbotCommandLog =>
    typia.random<IChatbotCommandLog>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a chatbot command log entry by ID.
 *
 * Update a chatbot command log entry by its ID, modifying the command text and
 * parameters. This API operation requires the unique identifier of the command
 * log entry as a path parameter. The request body must contain the updated
 * command details structured as per the IChatbotChatbotCommandLogs.IUpdate
 * schema, ensuring consistency with the database model.
 *
 * Only users with the role 'member' can execute this operation.
 *
 * This operation will overwrite the existing command and parameters,
 * maintaining the historical link to the member who executed the command.
 * Proper validation is expected to ensure the command log exists and the new
 * data adheres to the expected format.
 *
 * No response body is returned upon success, but the HTTP success status
 * indicates the update was successful.
 *
 * @param props.connection
 * @param props.chatbotCommandLogId Unique identifier of the chatbot command log
 *   entry to update
 * @param props.body Request body for updating a chatbot command log entry
 * @path /chatbot/member/chatbotCommandLogs/:chatbotCommandLogId
 * @accessor api.functional.chatbot.member.chatbotCommandLogs.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the chatbot command log entry to update */
    chatbotCommandLogId: string & tags.Format<"uuid">;

    /** Request body for updating a chatbot command log entry */
    body: IChatbotChatbotCommandLogs.IUpdate;
  };
  export type Body = IChatbotChatbotCommandLogs.IUpdate;
  export type Response = IChatbotChatbotCommandLogs;

  export const METADATA = {
    method: "PUT",
    path: "/chatbot/member/chatbotCommandLogs/:chatbotCommandLogId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/chatbot/member/chatbotCommandLogs/${encodeURIComponent(props.chatbotCommandLogId ?? "null")}`;
  export const random = (): IChatbotChatbotCommandLogs =>
    typia.random<IChatbotChatbotCommandLogs>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("chatbotCommandLogId")(() =>
        typia.assert(props.chatbotCommandLogId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a chatbot command log entry by ID.
 *
 * Delete a chatbot command log entry by its ID. This operation permanently
 * removes the record from the database and cannot be undone.
 *
 * Only users with the role 'member' can execute this operation.
 *
 * No response body is returned. Successful execution is indicated by HTTP
 * status codes.
 *
 * Use this operation carefully as it deletes historical audit records.
 *
 * @param props.connection
 * @param props.chatbotCommandLogId Unique identifier of the chatbot command log
 *   entry to delete
 * @path /chatbot/member/chatbotCommandLogs/:chatbotCommandLogId
 * @accessor api.functional.chatbot.member.chatbotCommandLogs.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the chatbot command log entry to delete */
    chatbotCommandLogId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/chatbot/member/chatbotCommandLogs/:chatbotCommandLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/chatbot/member/chatbotCommandLogs/${encodeURIComponent(props.chatbotCommandLogId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("chatbotCommandLogId")(() =>
        typia.assert(props.chatbotCommandLogId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
