import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IChatbotTitles } from "../../../structures/IChatbotTitles";

/**
 * Retrieve a specific user title by ID.
 *
 * Retrieve detailed information of a specific title in the chatbot system. The
 * title contains properties such as name, fee_discount_rate representing the
 * discount percentage on fees granted by the title, and timestamps for
 * creation, update, and optional deletion. This endpoint is publicly accessible
 * without authorization requirements, facilitating client applications to query
 * title information.
 *
 * Security considerations are minimal since this is a read operation without
 * sensitive data exposure. This operation references the chatbot_titles table
 * in the Prisma schema, ensuring the data emitted matches exactly the title
 * entity structure.
 *
 * Typical use cases include displaying title options to users, or
 * administrative validation before assignment. Errors include 404 if the title
 * is not found. No request body is required for this GET operation.
 *
 * Parameters include the UUID path parameter id identifying the target title to
 * retrieve. The response returns the IChatbotTitles type representing the full
 * title record.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target title
 * @path /chatbot/titles/:id
 * @accessor api.functional.chatbot.titles.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target title */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IChatbotTitles;

  export const METADATA = {
    method: "GET",
    path: "/chatbot/titles/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/chatbot/titles/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IChatbotTitles => typia.random<IChatbotTitles>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
