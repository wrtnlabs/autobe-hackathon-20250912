import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IChatbotAdmin } from "../../../structures/IChatbotAdmin";

/**
 * Create a new admin account and issue authorization tokens for the
 * chatbot_admins table.
 *
 * This API operation handles the registration process for a new admin user in
 * the chatbot system. It interfaces directly with the chatbot_admins database
 * table, which stores the identities of administrators operating via admin
 * rooms. The operation creates a new admin record including the internal sender
 * ID and nickname, with timestamps for creation and updates handled
 * automatically by the database. Upon successful creation, an authorized JWT
 * token is issued to enable secure interactions with the backend APIs. This
 * operation is open to unauthenticated users to enable initial account
 * creation. Security considerations include input validation to prevent
 * unauthorized account creation and ensuring the returned token provides scoped
 * access for admins only. Related operations include login and refresh to
 * manage admin tokens post registration.
 *
 * @param props.connection
 * @param props.body The admin registration input data.
 * @setHeader token.access Authorization
 *
 * @path /auth/admin/join
 * @accessor api.functional.auth.admin.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** The admin registration input data. */
    body: IChatbotAdmin.ICreate;
  };
  export type Body = IChatbotAdmin.ICreate;
  export type Response = IChatbotAdmin.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/join";
  export const random = (): IChatbotAdmin.IAuthorized =>
    typia.random<IChatbotAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate admin user and issue JWT tokens for chatbot_admins table.
 *
 * This API operation verifies admin user credentials against records in the
 * chatbot_admins table, which manages admin identities. It performs
 * authentication to validate the user and issues JWT tokens that allow access
 * to authorized backend APIs. This is necessary for secure admin sessions and
 * access control. The endpoint accepts login parameters and returns JWT tokens
 * upon success. Security considerations include preventing brute-force attacks
 * and safeguarding credential storage. Related operations include join for
 * account creation and refresh for token renewal.
 *
 * @param props.connection
 * @param props.body The admin login credentials.
 * @setHeader token.access Authorization
 *
 * @path /auth/admin/login
 * @accessor api.functional.auth.admin.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** The admin login credentials. */
    body: IChatbotAdmin.ILogin;
  };
  export type Body = IChatbotAdmin.ILogin;
  export type Response = IChatbotAdmin.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/login";
  export const random = (): IChatbotAdmin.IAuthorized =>
    typia.random<IChatbotAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh JWT tokens for authenticated admin users in chatbot_admins table.
 *
 * This API endpoint refreshes the authentication tokens for an admin user who
 * possesses a valid refresh token. It is critical for maintaining continuous
 * and secure sessions without requiring full login credentials repeatedly.
 * Token renewal ensures security compliance and improves usability. The
 * operation requires providing the current refresh token and, upon validation,
 * issues new authorization tokens. This is part of the JWT token lifecycle
 * management in the chatbot system. It complements join and login operations.
 *
 * @param props.connection
 * @param props.body Valid refresh token for admin user.
 * @setHeader token.access Authorization
 *
 * @path /auth/admin/refresh
 * @accessor api.functional.auth.admin.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Valid refresh token for admin user. */
    body: IChatbotAdmin.IRefresh;
  };
  export type Body = IChatbotAdmin.IRefresh;
  export type Response = IChatbotAdmin.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/refresh";
  export const random = (): IChatbotAdmin.IAuthorized =>
    typia.random<IChatbotAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
