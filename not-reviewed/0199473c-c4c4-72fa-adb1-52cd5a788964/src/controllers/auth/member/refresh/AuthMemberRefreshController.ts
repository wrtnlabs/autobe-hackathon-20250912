import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthMemberRefresh } from "../../../../providers/postauthMemberRefresh";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";

import { IChatbotMember } from "../../../../api/structures/IChatbotMember";

@Controller("/auth/member/refresh")
export class AuthMemberRefreshController {
  /**
   * Refresh tokens for member users maintaining session validity.
   *
   * Refresh JWT tokens for an authenticated member to maintain session
   * continuity in the chatbot system.
   *
   * Requires providing a valid refresh token confirming session validity.
   *
   * Returns new authorization tokens and user details.
   *
   * Role is 'member'.
   *
   * Supports continued access without re-login.
   *
   * Essential for maintaining stateless JWT sessions.
   *
   * @param connection
   * @param body Refresh token request containing valid token to renew session.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async refreshMember(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IChatbotMember.IRefresh,
  ): Promise<IChatbotMember.IAuthorized> {
    try {
      return await postauthMemberRefresh({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
