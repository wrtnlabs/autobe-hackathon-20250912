import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthMemberJoin } from "../../../../providers/postauthMemberJoin";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";

import { IChatbotMember } from "../../../../api/structures/IChatbotMember";

@Controller("/auth/member/join")
export class AuthMemberJoinController {
  /**
   * Create new member user account and issue authorization tokens based on
   * 'chatbot_members' table.
   *
   * Registers a new member user account, enabling access to the chatbot system
   * features for normal user role 'member'. This includes creating a fresh
   * member record in the database. Input includes nickname and sender IDs
   * internally mapped, consistent with the 'chatbot_members' entity fields.
   * Output includes authorized user information and issued tokens for session
   * management.
   *
   * Role is 'member' - regular authenticated user able to send messages, gain
   * points, and play minigames as described in the requirements documents.
   *
   * Usage mandates public access (no prior token required) for registration
   * flow.
   *
   * The operation is essential for enabling member users to participate in the
   * system and punning a JWT-based authentication model.
   *
   * Related operations include login and refresh token to maintain sessions.
   *
   * @param connection
   * @param body Member registration request containing data to create a new
   *   member account.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async joinMember(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IChatbotMember.ICreate,
  ): Promise<IChatbotMember.IAuthorized> {
    try {
      return await postauthMemberJoin({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
