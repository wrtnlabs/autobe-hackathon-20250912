import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthMemberLogin } from "../../../../providers/postauthMemberLogin";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";

import { IChatbotMember } from "../../../../api/structures/IChatbotMember";

@Controller("/auth/member/login")
export class AuthMemberLoginController {
  /**
   * Authenticate member user and issue access tokens based on 'chatbot_members'
   * table.
   *
   * Authenticate existing member user credentials and issue JWT access tokens
   * for session management within the chatbot system. Validates credentials
   * against stored user data in the 'chatbot_members' table.
   *
   * Role is 'member'.
   *
   * Publicly accessible for login use case.
   *
   * Returns authenticated user information with issued tokens.
   *
   * Complements join and refresh token flows.
   *
   * @param connection
   * @param body Member login request with user credentials to authenticate and
   *   obtain tokens.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async loginMember(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IChatbotMember.ILogin,
  ): Promise<IChatbotMember.IAuthorized> {
    try {
      return await postauthMemberLogin({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
