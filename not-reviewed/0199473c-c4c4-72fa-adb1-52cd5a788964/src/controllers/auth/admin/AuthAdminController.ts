import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthAdminJoin } from "../../../providers/postauthAdminJoin";
import { AdminAuth } from "../../../decorators/AdminAuth";
import { AdminPayload } from "../../../decorators/payload/AdminPayload";
import { postauthAdminLogin } from "../../../providers/postauthAdminLogin";
import { postauthAdminRefresh } from "../../../providers/postauthAdminRefresh";

import { IChatbotAdmin } from "../../../api/structures/IChatbotAdmin";

@Controller("/auth/admin")
export class AuthAdminController {
  /**
   * Create a new admin account and issue authorization tokens for the
   * chatbot_admins table.
   *
   * This API operation handles the registration process for a new admin user in
   * the chatbot system. It interfaces directly with the chatbot_admins database
   * table, which stores the identities of administrators operating via admin
   * rooms. The operation creates a new admin record including the internal
   * sender ID and nickname, with timestamps for creation and updates handled
   * automatically by the database. Upon successful creation, an authorized JWT
   * token is issued to enable secure interactions with the backend APIs. This
   * operation is open to unauthenticated users to enable initial account
   * creation. Security considerations include input validation to prevent
   * unauthorized account creation and ensuring the returned token provides
   * scoped access for admins only. Related operations include login and refresh
   * to manage admin tokens post registration.
   *
   * @param connection
   * @param body The admin registration input data.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IChatbotAdmin.ICreate,
  ): Promise<IChatbotAdmin.IAuthorized> {
    try {
      return await postauthAdminJoin({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Authenticate admin user and issue JWT tokens for chatbot_admins table.
   *
   * This API operation verifies admin user credentials against records in the
   * chatbot_admins table, which manages admin identities. It performs
   * authentication to validate the user and issues JWT tokens that allow access
   * to authorized backend APIs. This is necessary for secure admin sessions and
   * access control. The endpoint accepts login parameters and returns JWT
   * tokens upon success. Security considerations include preventing brute-force
   * attacks and safeguarding credential storage. Related operations include
   * join for account creation and refresh for token renewal.
   *
   * @param connection
   * @param body The admin login credentials.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IChatbotAdmin.ILogin,
  ): Promise<IChatbotAdmin.IAuthorized> {
    try {
      return await postauthAdminLogin({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh JWT tokens for authenticated admin users in chatbot_admins table.
   *
   * This API endpoint refreshes the authentication tokens for an admin user who
   * possesses a valid refresh token. It is critical for maintaining continuous
   * and secure sessions without requiring full login credentials repeatedly.
   * Token renewal ensures security compliance and improves usability. The
   * operation requires providing the current refresh token and, upon
   * validation, issues new authorization tokens. This is part of the JWT token
   * lifecycle management in the chatbot system. It complements join and login
   * operations.
   *
   * @param connection
   * @param body Valid refresh token for admin user.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IChatbotAdmin.IRefresh,
  ): Promise<IChatbotAdmin.IAuthorized> {
    try {
      return await postauthAdminRefresh({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
