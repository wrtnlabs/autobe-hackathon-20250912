import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchchatbotAdminChatbotMembers } from "../../../../providers/patchchatbotAdminChatbotMembers";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getchatbotAdminChatbotMembersId } from "../../../../providers/getchatbotAdminChatbotMembersId";
import { deletechatbotAdminChatbotMembersId } from "../../../../providers/deletechatbotAdminChatbotMembersId";

import { IPageIChatbotMember } from "../../../../api/structures/IPageIChatbotMember";
import { IChatbotMember } from "../../../../api/structures/IChatbotMember";

@Controller("/chatbot/admin/chatbotMembers")
export class ChatbotAdminChatbotmembersController {
  /**
   * Search and retrieve a paginated list of chatbot members.
   *
   * Retrieve a filtered and paginated list of chatbot member accounts from the
   * system.
   *
   * This operation allows searching members based on various attributes such as
   * nickname or internal sender ID.
   *
   * The chatbot_members table contains records for users participating in
   * normal chat rooms, linked to points, titles, and minigame data.
   *
   * Pagination and sorting optimize data retrieval to support user list views
   * in dashboards or admin panels.
   *
   * Security and performance considerations apply, ensuring only authorized
   * access (e.g., admins) to sensitive user data.
   *
   * The response returns a paginated list of summarized member data.
   *
   * @param connection
   * @param body Search and pagination parameters for members
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IChatbotMember.IRequest,
  ): Promise<IPageIChatbotMember.ISummary> {
    try {
      return await patchchatbotAdminChatbotMembers({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information of a chatbot member by ID.
   *
   * Get detailed information for a specific chatbot member by their unique ID.
   *
   * Chatbot members represent users in chat rooms who accumulate points and
   * participate in minigames.
   *
   * This operation supports retrieval of member data including nickname and
   * internal identifiers.
   *
   * The member's UUID must be provided in the path parameter.
   *
   * Only authorized users (e.g., admins) should access this endpoint to protect
   * sensitive user data.
   *
   * Returns full member details for client use.
   *
   * @param connection
   * @param id Unique identifier of the chatbot member
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IChatbotMember> {
    try {
      return await getchatbotAdminChatbotMembersId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete chatbot member permanently by ID.
   *
   * Permanently remove a chatbot member from the system by ID. This is a hard
   * delete operation, completely deleting the member and all associated data
   * such as points, titles, audit logs, and command logs.
   *
   * The member is identified by UUID path parameter. Successful execution
   * returns no content.
   *
   * Operation restricted to admin role for security.
   *
   * @param connection
   * @param id UUID of the chatbot member to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletechatbotAdminChatbotMembersId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
