import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchchatbotAdminAuditLogs } from "../../../../providers/patchchatbotAdminAuditLogs";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getchatbotAdminAuditLogsAuditLogId } from "../../../../providers/getchatbotAdminAuditLogsAuditLogId";

import { IPageIChatbotChatbotAuditLogs } from "../../../../api/structures/IPageIChatbotChatbotAuditLogs";
import { IChatbotChatbotAuditLogs } from "../../../../api/structures/IChatbotChatbotAuditLogs";

@Controller("/chatbot/admin/auditLogs")
export class ChatbotAdminAuditlogsController {
  /**
   * Search and retrieve filtered, paginated list of audit logs.
   *
   * Retrieve a paged list of audit logs filtered by search criteria including
   * event type, user, room, and date ranges. Supports advanced query parameters
   * for pagination, sorting, and filtering.
   *
   * Only admins with role 'admin' can access this endpoint.
   *
   * The response includes audit log summaries suitable for administrative
   * overview and troubleshooting. Pagination info is included to manage large
   * data sets.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for audit log
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async search(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IChatbotChatbotAuditLogs.IRequest,
  ): Promise<IPageIChatbotChatbotAuditLogs.ISummary> {
    try {
      return await patchchatbotAdminAuditLogs({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed audit log entry by ID.
   *
   * Retrieve detailed information of an audit log entry by ID.
   *
   * Only users with the 'admin' role can execute this operation.
   *
   * The response includes all relevant audit event information to support
   * administrative review and troubleshooting.
   *
   * @param connection
   * @param auditLogId Unique identifier of the audit log entry to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":auditLogId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("auditLogId")
    auditLogId: string & tags.Format<"uuid">,
  ): Promise<IChatbotChatbotAuditLogs> {
    try {
      return await getchatbotAdminAuditLogsAuditLogId({
        admin,
        auditLogId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
