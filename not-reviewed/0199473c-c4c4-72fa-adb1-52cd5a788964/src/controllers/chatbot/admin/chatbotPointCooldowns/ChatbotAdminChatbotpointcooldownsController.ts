import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { deletechatbotAdminChatbotPointCooldownsId } from "../../../../providers/deletechatbotAdminChatbotPointCooldownsId";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";

@Controller("/chatbot/admin/chatbotPointCooldowns/:id")
export class ChatbotAdminChatbotpointcooldownsController {
  /**
   * Delete chatbot point cooldown by id.
   *
   * Permanently erase a chatbot point cooldown record identified by UUID from
   * the system. This hard delete operation removes the cooldown tracking record
   * completely from the storage.
   *
   * This is an administrative operation with potential impact on cooldown
   * enforcement, so proper authorization is required.
   *
   * Errors such as providing non-existent UUIDs return not-found responses.
   *
   * The operation corresponds to the chatbot_point_cooldowns table in the
   * Prisma schema without any soft deletion.
   *
   * No request body or response body is used.
   *
   * @param connection
   * @param id Unique identifier of the chatbot point cooldown entry to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletechatbotAdminChatbotPointCooldownsId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
