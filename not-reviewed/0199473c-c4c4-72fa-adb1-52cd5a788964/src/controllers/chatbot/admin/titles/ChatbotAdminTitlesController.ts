import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postchatbotAdminTitles } from "../../../../providers/postchatbotAdminTitles";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchchatbotAdminTitles } from "../../../../providers/patchchatbotAdminTitles";
import { putchatbotAdminTitlesId } from "../../../../providers/putchatbotAdminTitlesId";
import { deletechatbotAdminTitlesId } from "../../../../providers/deletechatbotAdminTitlesId";

import { IChatbotTitles } from "../../../../api/structures/IChatbotTitles";
import { IPageIChatbotChatbotTitle } from "../../../../api/structures/IPageIChatbotChatbotTitle";
import { IChatbotChatbotTitle } from "../../../../api/structures/IChatbotChatbotTitle";

@Controller("/chatbot/admin/titles")
export class ChatbotAdminTitlesController {
  /**
   * Create a new user title with specified name and fee discount rate. This
   * operation requires admin authorization to ensure only privileged users can
   * add new titles. The API accepts a JSON body with required properties name
   * and fee_discount_rate. Once successfully created, the new title entity is
   * returned including its unique identifier and timestamps.
   *
   * This operation directly interacts with the chatbot_titles database table as
   * defined in Prisma schema, conforming to all schema constraints on data
   * types and uniqueness. Handles validation errors and concurrency issues
   * gracefully.
   *
   * The request body must specify all required fields for a complete title
   * record creation.
   *
   * @param connection
   * @param body Information needed to create a new user title
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IChatbotTitles.ICreate,
  ): Promise<IChatbotTitles> {
    try {
      return await postchatbotAdminTitles({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve user titles list.
   *
   * Retrieve a filtered and paginated list of user titles available in the
   * chatbot system. Titles grant fee discounts on minigame transactions and are
   * managed by administrators.
   *
   * This operation references the chatbot_titles Prisma model, including name,
   * fee discount rate, creation and update timestamps, and optional deletion
   * timestamps.
   *
   * Filtering and sorting can be applied via the request body criteria.
   *
   * The paginated response supports administrative UI display and reporting of
   * available titles.
   *
   * This operation is read-only with no modifications performed.
   *
   * @param connection
   * @param body Filter and pagination criteria for titles
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IChatbotChatbotTitle.IRequest,
  ): Promise<IPageIChatbotChatbotTitle> {
    try {
      return await patchchatbotAdminTitles({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a user title by ID.
   *
   * Update an existing user title identified by UUID with new data such as name
   * and fee discount rate. Admin authorization is required. The API validates
   * incoming update data and returns updated title record upon success.
   *
   * The operation corresponds to chatbot_titles table and enforces schema
   * constraints and unique key rules. Updates may be partial but must satisfy
   * schema property types.
   *
   * Path parameter id must be provided to locate the target title record for
   * update.
   *
   * @param connection
   * @param id Unique identifier of the target title
   * @param body Fields and values for updating the user title
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IChatbotTitles.IUpdate,
  ): Promise<IChatbotTitles> {
    try {
      return await putchatbotAdminTitlesId({
        admin,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a user title by ID.
   *
   * Remove a user title by its unique identifier permanently from the system.
   * Admin authorization is mandatory to avoid unauthorized deletions.
   *
   * The deletion removes the entity record completely from the chatbot_titles
   * table, with no recovery possible. It is a hard delete operation.
   *
   * This operation requires the target title's UUID supplied in the path
   * parameter id.
   *
   * @param connection
   * @param id Unique identifier of the target title
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletechatbotAdminTitlesId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
