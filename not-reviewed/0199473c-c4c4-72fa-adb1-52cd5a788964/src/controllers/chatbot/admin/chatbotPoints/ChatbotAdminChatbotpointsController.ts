import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { patchchatbotAdminChatbotPoints } from "../../../../providers/patchchatbotAdminChatbotPoints";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";

import { IPageIChatbotPoints } from "../../../../api/structures/IPageIChatbotPoints";
import { IChatbotPoints } from "../../../../api/structures/IChatbotPoints";

@Controller("/chatbot/admin/chatbotPoints")
export class ChatbotAdminChatbotpointsController {
  /**
   * Search and retrieve chatbot points with filters.
   *
   * Search and retrieve paginated chatbot points for members with flexible
   * filtering and pagination. Useful for leaderboards and administrative
   * monitoring.
   *
   * Request body includes filtering criteria such as member IDs and points
   * range.
   *
   * Response provides paginated list of points with member contextual data.
   *
   * Access restricted to admins to protect privacy.
   *
   * Supports sorting and paging for scalable data retrieval.
   *
   * @param connection
   * @param body Filtering and pagination options for chatbot points list
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IChatbotPoints.IRequest,
  ): Promise<IPageIChatbotPoints> {
    try {
      return await patchchatbotAdminChatbotPoints({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
