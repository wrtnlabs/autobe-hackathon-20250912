import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postchatbotAdminChatbotRoomTuples } from "../../../../providers/postchatbotAdminChatbotRoomTuples";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchchatbotAdminChatbotRoomTuples } from "../../../../providers/patchchatbotAdminChatbotRoomTuples";
import { getchatbotAdminChatbotRoomTuplesId } from "../../../../providers/getchatbotAdminChatbotRoomTuplesId";
import { putchatbotAdminChatbotRoomTuplesId } from "../../../../providers/putchatbotAdminChatbotRoomTuplesId";
import { deletechatbotAdminChatbotRoomTuplesId } from "../../../../providers/deletechatbotAdminChatbotRoomTuplesId";

import { IChatbotRoomTuples } from "../../../../api/structures/IChatbotRoomTuples";
import { IPageIChatbotRoomTuples } from "../../../../api/structures/IPageIChatbotRoomTuples";

@Controller("/chatbot/admin/chatbotRoomTuples")
export class ChatbotAdminChatbotroomtuplesController {
  /**
   * Create a new chatbot room tuple mapping normal room to admin room with
   * associated metadata.
   *
   * Ensures uniqueness of unique_id and appropriate data integrity for room IDs
   * and display name.
   *
   * Admins use this to configure new room tuples for chatbot session
   * management.
   *
   * @param connection
   * @param body Information for creating a new chatbot room tuple
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IChatbotRoomTuples.ICreate,
  ): Promise<IChatbotRoomTuples> {
    try {
      return await postchatbotAdminChatbotRoomTuples({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve paginated list of chatbot room tuples.
   *
   * Retrieve a filtered and paginated list of chatbot room tuples for
   * administrative or operational use. This endpoint allows clients to query
   * chatbot_room_tuples with advanced search parameters including filters by
   * normal room ID or admin room ID, and to sort results by creation or update
   * date.
   *
   * Users with appropriate permissions can use this list to manage room
   * relationships, monitor active tuples, and coordinate chatbot session
   * routing.
   *
   * This operation returns a paginated list conforming to the
   * IChatbotRoomTuples.ISummary schema, which includes essential tuple
   * information such as IDs, display names, and enablement flags without
   * detailed nested relations.
   *
   * Security considerations include controlled access to sensitive identifiers
   * and audit fields. Only authorized roles can query this list to prevent
   * exposure of internal mappings. Pagination helps mitigate data overload and
   * reduces query cost.
   *
   * This operates on the chatbot_room_tuples table as defined in the Prisma
   * schema, referencing all relevant fields and indexes involved with querying
   * active and enabled tuples.
   *
   * @param connection
   * @param body Search and pagination filter criteria for querying chatbot room
   *   tuples
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IChatbotRoomTuples.IRequest,
  ): Promise<IPageIChatbotRoomTuples.ISummary> {
    try {
      return await patchchatbotAdminChatbotRoomTuples({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve chatbot room tuple details by ID.
   *
   * Retrieve detailed information for a chatbot room tuple by its ID. Provides
   * full field visibility except for sensitive internal mappings that are
   * protected.
   *
   * This includes fields like normal_room_id, admin_room_id, display_name,
   * unique_id, enabled flag, and audit timestamps for create, update, and
   * delete events.
   *
   * Only authorized admins may access this resource to view and verify room
   * tuple configuration.
   *
   * @param connection
   * @param id Unique identifier of the chatbot room tuple
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IChatbotRoomTuples> {
    try {
      return await getchatbotAdminChatbotRoomTuplesId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update chatbot room tuple by ID.
   *
   * Update an existing chatbot room tuple by ID with new mapping and metadata.
   *
   * Supports modifying room identifiers, display name, unique business key, and
   * active status.
   *
   * This operation preserves historical audit timestamps and updates the
   * modification timestamp.
   *
   * Restricted to admin users to safeguard configuration integrity.
   *
   * @param connection
   * @param id Unique identifier of the chatbot room tuple to update
   * @param body Updates for chatbot room tuple
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IChatbotRoomTuples.IUpdate,
  ): Promise<IChatbotRoomTuples> {
    try {
      return await putchatbotAdminChatbotRoomTuplesId({
        admin,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a chatbot room tuple by UUID, permanently removing it from the
   * system.
   *
   * This DELETE operation removes a chatbot room tuple permanently from the
   * database, identified by its unique UUID 'id'.
   *
   * This operation allows system administrators to delete obsolete or invalid
   * room mappings, which are used for isolating chat sessions and linking
   * normal chat rooms to their corresponding admin rooms.
   *
   * The system ensures referential integrity by cascading deletes to related
   * audit logs and other dependent data.
   *
   * Access to this operation should be restricted to authorized personnel due
   * to its impact on chat room management.
   *
   * Users of this endpoint must provide a valid UUID path parameter identifying
   * the target room tuple.
   *
   * No request body is required for this operation.
   *
   * A successful call results in permanent removal with no response body.
   *
   * Errors include 404 not found if the ID does not exist.
   *
   * No soft delete logic is applied here; this is a hard delete.
   *
   * @param connection
   * @param id UUID of the chatbot room tuple to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletechatbotAdminChatbotRoomTuplesId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
