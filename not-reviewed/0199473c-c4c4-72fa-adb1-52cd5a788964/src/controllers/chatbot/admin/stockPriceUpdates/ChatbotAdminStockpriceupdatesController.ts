import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchchatbotAdminStockPriceUpdates } from "../../../../providers/patchchatbotAdminStockPriceUpdates";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getchatbotAdminStockPriceUpdatesStockPriceUpdateId } from "../../../../providers/getchatbotAdminStockPriceUpdatesStockPriceUpdateId";

import { IPageIChatbotStockPriceUpdate } from "../../../../api/structures/IPageIChatbotStockPriceUpdate";
import { IChatbotStockPriceUpdate } from "../../../../api/structures/IChatbotStockPriceUpdate";

@Controller("/chatbot/admin/stockPriceUpdates")
export class ChatbotAdminStockpriceupdatesController {
  /**
   * Search and retrieve paginated stock price update events.
   *
   * Retrieve paginated stock price update events with details about the admin
   * actor (optional), update date, and notes.
   *
   * These update events provide historical log information for auditing and
   * system monitoring related to stock price changes.
   *
   * Access control is recommended to restrict this data to authorized
   * administrative users.
   *
   * This operation interfaces with the chatbot_stock_price_updates table,
   * preserving immutable audit log entries.
   *
   * Related operations include retrieving detailed single updates and
   * associated stock price snapshots.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for stock price
   *   updates filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IChatbotStockPriceUpdate.IRequest,
  ): Promise<IPageIChatbotStockPriceUpdate> {
    try {
      return await patchchatbotAdminStockPriceUpdates({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details of a specific stock price update event.
   *
   * Retrieve detailed information about a specific stock price update event.
   *
   * The details include the admin user who triggered the update (if any), the
   * update date and notes, plus creation time.
   *
   * This data supports auditing and tracking of price change events in the
   * virtual stock system.
   *
   * Security requires this data be accessible only to admin users.
   *
   * Query by primary key from the chatbot_stock_price_updates table.
   *
   * This operation complements the stock price update list retrieval.
   *
   * @param connection
   * @param stockPriceUpdateId Unique identifier of the stock price update event
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":stockPriceUpdateId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("stockPriceUpdateId")
    stockPriceUpdateId: string & tags.Format<"uuid">,
  ): Promise<IChatbotStockPriceUpdate> {
    try {
      return await getchatbotAdminStockPriceUpdatesStockPriceUpdateId({
        admin,
        stockPriceUpdateId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
