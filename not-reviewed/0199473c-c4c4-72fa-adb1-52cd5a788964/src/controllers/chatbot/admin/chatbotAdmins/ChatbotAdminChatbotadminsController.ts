import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postchatbotAdminChatbotAdmins } from "../../../../providers/postchatbotAdminChatbotAdmins";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchchatbotAdminChatbotAdmins } from "../../../../providers/patchchatbotAdminChatbotAdmins";
import { getchatbotAdminChatbotAdminsId } from "../../../../providers/getchatbotAdminChatbotAdminsId";
import { putchatbotAdminChatbotAdminsId } from "../../../../providers/putchatbotAdminChatbotAdminsId";
import { deletechatbotAdminChatbotAdminsId } from "../../../../providers/deletechatbotAdminChatbotAdminsId";

import { IChatbotAdmin } from "../../../../api/structures/IChatbotAdmin";
import { IPageIChatbotAdmin } from "../../../../api/structures/IPageIChatbotAdmin";

@Controller("/chatbot/admin/chatbotAdmins")
export class ChatbotAdminChatbotadminsController {
  /**
   * Create a new chatbot admin user.
   *
   * The request body must include a nickname and internal sender ID which
   * uniquely identify the admin.
   *
   * Creation timestamps are handled automatically and need not be provided.
   *
   * This operation is intended for authorized admin users only.
   *
   * The response includes the full created user record.
   *
   * Soft delete and id fields are not settable via this endpoint.
   *
   * @param connection
   * @param body Data required to create a chatbot admin user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IChatbotAdmin.ICreate,
  ): Promise<IChatbotAdmin> {
    try {
      return await postchatbotAdminChatbotAdmins({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve paginated/searchable list of chatbot admins.
   *
   * Retrieve a paginated filtered list of chatbot admins.
   *
   * This operation supports advanced filtering, sorting, and pagination over
   * the set of admin users. It is designed for administrative user management
   * interfaces.
   *
   * Users must be authorized with 'admin' role to access this endpoint.
   *
   * The response returns a paginated list of admin summaries including id,
   * nickname, timestamps, and other public fields.
   *
   * This endpoint does not mutate data and is readonly.
   *
   * @param connection
   * @param body Filtering, sorting, and pagination parameters for chatbot admin
   *   list retrieval
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IChatbotAdmin.IRequest,
  ): Promise<IPageIChatbotAdmin.ISummary> {
    try {
      return await patchchatbotAdminChatbotAdmins({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve chatbot admin details by UUID.
   *
   * Get detailed information about a chatbot admin by UUID.
   *
   * This endpoint returns full details of a chatbot admin user identified by
   * the path parameter 'id'.
   *
   * Only users with admin role can access this operation.
   *
   * If no admin exists with the given id, the system returns a 404 error.
   *
   * The response includes all fields defined in the chatbot_admins schema
   * except sensitive credentials.
   *
   * No request body needed.
   *
   * @param connection
   * @param id UUID of the chatbot admin to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IChatbotAdmin> {
    try {
      return await getchatbotAdminChatbotAdminsId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing chatbot admin user by ID.
   *
   * This API operation allows modification of an existing chatbot admin user's
   * details, including their internal sender ID and display nickname.
   *
   * The chatbot_admins table stores admins with unique UUIDs, internal sender
   * IDs, nicknames, and timestamps for auditing purposes.
   *
   * Administrators have the unique ability to perform privileged commands
   * within admin rooms. Updating admin details must be secured and reflect
   * accurately in the system.
   *
   * The operation requires the admin's UUID in the path to identify the target
   * record. The request body must contain the updated fields as per the defined
   * structure for updating admins.
   *
   * On success, the updated admin record is returned as confirmation.
   *
   * No deletion or creation occurs in this operation; it strictly updates
   * existing admin records.
   *
   * Authorization roles restrict this operation to users with 'admin' role,
   * maintaining system security.
   *
   * @param connection
   * @param id Unique identifier of the chatbot admin to update
   * @param body Data for updating the chatbot admin user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IChatbotAdmin.IUpdate,
  ): Promise<IChatbotAdmin> {
    try {
      return await putchatbotAdminChatbotAdminsId({
        admin,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete an existing chatbot admin user by ID.
   *
   * This API operation deletes an existing chatbot admin user identified by the
   * UUID path parameter.
   *
   * The chatbot_admins table defines admin users with elevated permissions for
   * system management within admin rooms.
   *
   * Since the admin records do not have soft delete fields, this operation
   * performs a hard delete, removing the record permanently.
   *
   * Only authorized 'admin' role users may execute this deletion to protect
   * sensitive data.
   *
   * The operation has no request body and returns no content. On success, the
   * admin user is completely removed from the database, and cannot be
   * recovered.
   *
   * Clients should handle any cascading effects this deletion might cause in
   * related systems or sessions.
   *
   * @param connection
   * @param id Unique identifier of the chatbot admin to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletechatbotAdminChatbotAdminsId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
