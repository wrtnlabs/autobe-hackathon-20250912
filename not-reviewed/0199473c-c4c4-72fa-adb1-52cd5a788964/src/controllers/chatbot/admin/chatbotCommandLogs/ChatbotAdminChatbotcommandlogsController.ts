import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchchatbotAdminChatbotCommandLogs } from "../../../../providers/patchchatbotAdminChatbotCommandLogs";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getchatbotAdminChatbotCommandLogsChatbotCommandLogId } from "../../../../providers/getchatbotAdminChatbotCommandLogsChatbotCommandLogId";

import { IPageIChatbotCommandLog } from "../../../../api/structures/IPageIChatbotCommandLog";
import { IChatbotCommandLog } from "../../../../api/structures/IChatbotCommandLog";

@Controller("/chatbot/admin/chatbotCommandLogs")
export class ChatbotAdminChatbotcommandlogsController {
  /**
   * Search and list chatbot command logs with filters and pagination.
   *
   * Retrieve a filtered, paginated list of chatbot command logs which record
   * execution details of commands across the chatbot system.
   *
   * Request parameters allow searching and pagination based on fields such as
   * command text, user ID, and execution date. The response contains paginated
   * command log summaries matching the criteria.
   *
   * This operation is intended for use only by users with administrative
   * privileges.
   *
   * @param connection
   * @param body Search and pagination parameters for chatbot command log
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IChatbotCommandLog.IRequest,
  ): Promise<IPageIChatbotCommandLog.ISummary> {
    try {
      return await patchchatbotAdminChatbotCommandLogs({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed chatbot command log record by ID.
   *
   * Retrieve detailed information of a chatbot command log record by its unique
   * ID.
   *
   * The chatbot_command_logs table contains comprehensive log records of
   * commands executed including executor details, command string, parameters,
   * and execution timestamps.
   *
   * This operation is reserved for admin users who are authorized to audit
   * system command usage.
   *
   * If the command log record does not exist for the provided ID, an error
   * should be returned.
   *
   * @param connection
   * @param chatbotCommandLogId Unique identifier of the chatbot command log to
   *   retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":chatbotCommandLogId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("chatbotCommandLogId")
    chatbotCommandLogId: string & tags.Format<"uuid">,
  ): Promise<IChatbotCommandLog> {
    try {
      return await getchatbotAdminChatbotCommandLogsChatbotCommandLogId({
        admin,
        chatbotCommandLogId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
