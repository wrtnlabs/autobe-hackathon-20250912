import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postchatbotAdminStockItems } from "../../../../providers/postchatbotAdminStockItems";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { putchatbotAdminStockItemsStockItemId } from "../../../../providers/putchatbotAdminStockItemsStockItemId";
import { deletechatbotAdminStockItemsStockItemId } from "../../../../providers/deletechatbotAdminStockItemsStockItemId";

import { IChatbotStockItem } from "../../../../api/structures/IChatbotStockItem";
import { IChatbotStockItems } from "../../../../api/structures/IChatbotStockItems";

@Controller("/chatbot/admin/stockItems")
export class ChatbotAdminStockitemsController {
  /**
   * Create a new chatbot virtual stock item.
   *
   * Create a new chatbot stock item with the provided code, name, and initial
   * price. The new record is stored in the chatbot_stock_items table, ensuring
   * the uniqueness of the code and name fields.
   *
   * Admins use this endpoint to add new stock items available for trading in
   * the virtual stock minigame.
   *
   * The request body must conform to the IChatbotStockItem.ICreate schema,
   * including validation for code, name, and initial price.
   *
   * Successful creation returns the full chatbot stock item record including
   * timestamps.
   *
   * Security restricts this operation to users with the admin role.
   *
   * @param connection
   * @param body Information required to create a new chatbot stock item
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createStockItem(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IChatbotStockItem.ICreate,
  ): Promise<IChatbotStockItem> {
    try {
      return await postchatbotAdminStockItems({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a virtual stock item's details by ID.
   *
   * Update the details of a virtual stock item identified by its stockItemId.
   * This operation allows administrators to change the stock item's code, name,
   * and initial price within valid ranges. The stock item must exist. The
   * update affects future transactions and price computations but does not
   * alter historical snapshots.
   *
   * Security considerations: This endpoint should be restricted to users with
   * administrative roles only. Proper authorization checks must be enforced.
   *
   * The operation relates directly to the chatbot_stock_items table in the
   * Prisma schema. The validated request body must contain details confirming
   * to the IChatbotStockItems.IUpdate DTO including the stock code, name, and
   * initial price.
   *
   * Validation rules enforce that the stockItemId is a valid UUID. The stock
   * code and name are unique. The initial price must be within 100 to 1,000,000
   * points.
   *
   * Related operations include listing stocks, adding new stocks, and deleting
   * stocks. Updating a stock is part of the administrative controls for
   * managing the virtual stock market.
   *
   * Error handling includes appropriate 404 if the stock item does not exist,
   * and validation errors for invalid input values.
   *
   * @param connection
   * @param stockItemId The unique identifier (UUID) of the target stock item
   * @param body Payload containing stock item update information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":stockItemId")
  public async updateStockItem(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("stockItemId")
    stockItemId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IChatbotStockItems.IUpdate,
  ): Promise<IChatbotStockItems> {
    try {
      return await putchatbotAdminStockItemsStockItemId({
        admin,
        stockItemId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a virtual stock item by ID (hard delete).
   *
   * Permanently delete a virtual stock item identified by its stockItemId. This
   * operation will remove the stock from listings and refund all user holdings
   * associated with this stock. The operation performs a hard delete of the
   * record from the chatbot_stock_items table.
   *
   * Only administrators can call this API to maintain system integrity.
   *
   * Error handling includes 404 if the stock does not exist and business logic
   * handling for refunding user holdings and adjusting balances.
   *
   * @param connection
   * @param stockItemId The unique identifier (UUID) of the stock item to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":stockItemId")
  public async eraseStockItem(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("stockItemId")
    stockItemId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletechatbotAdminStockItemsStockItemId({
        admin,
        stockItemId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
