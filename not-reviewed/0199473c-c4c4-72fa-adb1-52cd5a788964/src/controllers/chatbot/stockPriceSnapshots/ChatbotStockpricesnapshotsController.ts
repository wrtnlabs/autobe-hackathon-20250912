import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchchatbotStockPriceSnapshots } from "../../../providers/patchchatbotStockPriceSnapshots";
import { getchatbotStockPriceSnapshotsStockPriceSnapshotId } from "../../../providers/getchatbotStockPriceSnapshotsStockPriceSnapshotId";

import { IPageIChatbotStockPriceSnapshot } from "../../../api/structures/IPageIChatbotStockPriceSnapshot";
import { IChatbotStockPriceSnapshot } from "../../../api/structures/IChatbotStockPriceSnapshot";

@Controller("/chatbot/stockPriceSnapshots")
export class ChatbotStockpricesnapshotsController {
  /**
   * Search and retrieve paginated virtual stock price snapshots.
   *
   * Retrieve a filtered and paginated list of virtual stock price snapshots.
   * Each snapshot represents the price of a particular stock item at a given
   * timestamp, stored in UTC.
   *
   * This operation allows clients to search for snapshots by stock item ID and
   * timestamp ranges, enabling historical data analysis and auditing.
   * Pagination and sorting facilitate effective browsing of large datasets.
   *
   * Security considerations include ensuring that only authorized users can
   * access stock price data. Given that stock prices are public within the
   * system, this endpoint is typically unrestricted.
   *
   * This operation directly reads from the chatbot_stock_price_snapshots table,
   * reflecting immutable historical price data. It is essential for the virtual
   * stock trading minigame's market price tracking.
   *
   * Clients can use this operation in conjunction with detail endpoints that
   * retrieve specific snapshot entries.
   *
   * No data modification occurs with this GET operation; it is purely
   * informational.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for stock price
   *   snapshots filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: IChatbotStockPriceSnapshot.IRequest,
  ): Promise<IPageIChatbotStockPriceSnapshot> {
    try {
      return await patchchatbotStockPriceSnapshots({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details of a specific stock price snapshot.
   *
   * Retrieve a specific virtual stock price snapshot by its unique identifier.
   * This snapshot includes the stock item ID, snapshot timestamp, and price in
   * points.
   *
   * The data is immutable and serves as a historical record for stock price
   * changes. This operation enables clients to obtain precise details for
   * audit, analytics, or display purposes.
   *
   * Security considerations allow open access as price snapshots are public
   * data internally.
   *
   * This operation directly queries the chatbot_stock_price_snapshots table
   * using its primary key.
   *
   * Clients can combine this operation with list endpoints for comprehensive
   * historical stock data management.
   *
   * @param connection
   * @param stockPriceSnapshotId Unique identifier of the virtual stock price
   *   snapshot
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":stockPriceSnapshotId")
  public async at(
    @TypedParam("stockPriceSnapshotId")
    stockPriceSnapshotId: string & tags.Format<"uuid">,
  ): Promise<IChatbotStockPriceSnapshot> {
    try {
      return await getchatbotStockPriceSnapshotsStockPriceSnapshotId({
        stockPriceSnapshotId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
