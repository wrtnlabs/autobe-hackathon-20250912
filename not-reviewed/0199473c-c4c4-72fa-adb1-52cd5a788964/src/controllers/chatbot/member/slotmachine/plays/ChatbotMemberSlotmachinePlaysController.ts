import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postchatbotMemberSlotmachinePlays } from "../../../../../providers/postchatbotMemberSlotmachinePlays";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";
import { patchchatbotMemberSlotmachinePlays } from "../../../../../providers/patchchatbotMemberSlotmachinePlays";
import { getchatbotMemberSlotmachinePlaysId } from "../../../../../providers/getchatbotMemberSlotmachinePlaysId";
import { putchatbotMemberSlotmachinePlaysId } from "../../../../../providers/putchatbotMemberSlotmachinePlaysId";
import { deletechatbotMemberSlotmachinePlaysId } from "../../../../../providers/deletechatbotMemberSlotmachinePlaysId";

import { IChatbotSlotmachinePlay } from "../../../../../api/structures/IChatbotSlotmachinePlay";
import { IPageIChatbotSlotmachinePlay } from "../../../../../api/structures/IPageIChatbotSlotmachinePlay";

@Controller("/chatbot/member/slotmachine/plays")
export class ChatbotMemberSlotmachinePlaysController {
  /**
   * Record a new slot machine play.
   *
   * Create a new slot machine play record capturing bet, slot results, and
   * payout.
   *
   * Only authenticated users can invoke this operation.
   *
   * Input data must conform to the required creation schema.
   *
   * Successful creation returns the full play record including auto-generated
   * id.
   *
   * This operation supports recording user gameplay in the slot machine
   * minigame.
   *
   * @param connection
   * @param body Creation data for new slot machine play
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IChatbotSlotmachinePlay.ICreate,
  ): Promise<IChatbotSlotmachinePlay> {
    try {
      return await postchatbotMemberSlotmachinePlays({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List and search slot machine play records.
   *
   * Retrieve a filtered and paginated list of slot machine play records from
   * the chatbot system. This operation allows searching by user or date ranges,
   * sorting by timestamp, and applies pagination controls.
   *
   * This operation is intended for authenticated users to review slot machine
   * play history either for personal review or for administrative oversight.
   *
   * The returned data includes information about the player, bet amount, slot
   * results, payout, and the time played.
   *
   * Security ensures only authorized users indexed as 'member' can invoke this
   * endpoint.
   *
   * The chatbot_slotmachine_plays table holds the records with references to
   * chatbot_members for player identification and audit.
   *
   * Proper validation and error handling apply if input parameters for
   * filtering or pagination are invalid.
   *
   * Related operations include creating slot machine plays and viewing details
   * of a specific play.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for slot machine
   *   plays
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IChatbotSlotmachinePlay.IRequest,
  ): Promise<IPageIChatbotSlotmachinePlay.ISummary> {
    try {
      return await patchchatbotMemberSlotmachinePlays({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get slot machine play details by ID.
   *
   * Retrieve detailed information for a single slot machine play by its unique
   * identifier.
   *
   * This operation returns all data about the play including the player, bet
   * amount, individual slot outcomes, payout, and timestamp.
   *
   * Only authenticated users with role 'member' are allowed to access this
   * endpoint.
   *
   * The play ID path parameter must be a valid UUID corresponding to an
   * existing record.
   *
   * If the record is not found, the system returns an appropriate error
   * response.
   *
   * This operation complements the list/search operation that retrieves
   * multiple records.
   *
   * @param connection
   * @param id Unique identifier of the slot machine play
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IChatbotSlotmachinePlay> {
    try {
      return await getchatbotMemberSlotmachinePlaysId({
        member,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update slot machine play by ID.
   *
   * Update the details of a slot machine play identified by its unique ID.
   *
   * This includes changing bet points, slot results, payout, or other
   * modifiable fields.
   *
   * The play ID is required as a path parameter and must be a valid UUID.
   *
   * The request body must conform to the defined update schema.
   *
   * Only authorized users may perform this update.
   *
   * Response includes updated slot machine play information.
   *
   * @param connection
   * @param id Unique identifier of the slot machine play to update
   * @param body Update data for slot machine play
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IChatbotSlotmachinePlay.IUpdate,
  ): Promise<IChatbotSlotmachinePlay> {
    try {
      return await putchatbotMemberSlotmachinePlaysId({
        member,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a slot machine play record by unique ID.
   *
   * This DELETE operation permanently removes a slot machine play record
   * identified by its UUID from the chatbot_slotmachine_plays table in the
   * database.
   *
   * The operation requires the ID of the slot machine play record as a path
   * parameter. It is intended for use by authenticated members who have
   * permission to manage their own slot machine play records.
   *
   * Since the Prisma schema does not include soft deletion fields for this
   * table, this delete is a hard delete and completely removes the record from
   * the database. There is no request or response body associated with this
   * operation.
   *
   * If the record with the given ID does not exist, an appropriate error should
   * be returned. This operation must be secured so that only authorized members
   * can access it.
   *
   * @param connection
   * @param id Unique identifier of the slot machine play record to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletechatbotMemberSlotmachinePlaysId({
        member,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
