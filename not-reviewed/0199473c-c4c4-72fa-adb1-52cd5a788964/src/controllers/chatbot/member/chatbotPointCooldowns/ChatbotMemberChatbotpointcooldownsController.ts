import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchchatbotMemberChatbotPointCooldowns } from "../../../../providers/patchchatbotMemberChatbotPointCooldowns";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";
import { getchatbotMemberChatbotPointCooldownsId } from "../../../../providers/getchatbotMemberChatbotPointCooldownsId";

import { IPageIChatbotChatbotPointCooldown } from "../../../../api/structures/IPageIChatbotChatbotPointCooldown";
import { IChatbotChatbotPointCooldown } from "../../../../api/structures/IChatbotChatbotPointCooldown";

@Controller("/chatbot/member/chatbotPointCooldowns")
export class ChatbotMemberChatbotpointcooldownsController {
  /**
   * Search and retrieve chatbot point cooldowns list.
   *
   * Retrieve a filtered and paginated list of chatbot point cooldowns that
   * enforce the point awarding cooldown per user in the chatbot system. This
   * enables system clients to query cooldown records for management or
   * monitoring purposes.
   *
   * Security considerations include restricting this operation potentially to
   * admin or system roles if sensitive. The response includes fields showing
   * last point award timestamp and reference to the member user.
   *
   * The underlying data comes from the chatbot_point_cooldowns Prisma table,
   * which links cooldowns to chatbot_members by unique member ID with timestamp
   * tracking. This operation does not modify cooldown data and is read-only,
   * suitable for administrative dashboards.
   *
   * Validation ensures that only existing cooldown records are returned, with
   * pagination and optional filters handled via the request body. This
   * operation complements POST/PUT operations for managing cooldowns but does
   * not alter data itself.
   *
   * @param connection
   * @param body Filtering and pagination request for chatbot point cooldown
   *   search
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IChatbotChatbotPointCooldown.IRequest,
  ): Promise<IPageIChatbotChatbotPointCooldown> {
    try {
      return await patchchatbotMemberChatbotPointCooldowns({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed chatbot point cooldown by id.
   *
   * Get detailed information about a single chatbot point cooldown identified
   * by its UUID. The operation returns cooldown metadata linked to a user
   * member, including last point award time, created and updated timestamps.
   *
   * Security considerations recommend access control due to the sensitive
   * timing detail included.
   *
   * This operation directly queries the chatbot_point_cooldowns Prisma table.
   *
   * Requesting with a non-existent ID will return a not-found error.
   *
   * The response returns data matching the IChatbotChatbotPointCooldown type
   * schema.
   *
   * @param connection
   * @param id Unique identifier of the chatbot point cooldown entry
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IChatbotChatbotPointCooldown> {
    try {
      return await getchatbotMemberChatbotPointCooldownsId({
        member,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
