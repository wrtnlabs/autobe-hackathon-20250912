import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postchatbotMemberChatbotCommandLogs } from "../../../../providers/postchatbotMemberChatbotCommandLogs";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";
import { putchatbotMemberChatbotCommandLogsChatbotCommandLogId } from "../../../../providers/putchatbotMemberChatbotCommandLogsChatbotCommandLogId";
import { deletechatbotMemberChatbotCommandLogsChatbotCommandLogId } from "../../../../providers/deletechatbotMemberChatbotCommandLogsChatbotCommandLogId";

import { IChatbotCommandLog } from "../../../../api/structures/IChatbotCommandLog";
import { IChatbotChatbotCommandLogs } from "../../../../api/structures/IChatbotChatbotCommandLogs";

@Controller("/chatbot/member/chatbotCommandLogs")
export class ChatbotMemberChatbotcommandlogsController {
  /**
   * Create a new chatbot command log recording an executed command.
   *
   * The created record includes member ID of the executor, exact command
   * string, optional parameters, and creation timestamp.
   *
   * This operation requires a request body adhering to the
   * `IChatbotCommandLog.ICreate` schema.
   *
   * Only authenticated members can create command logs.
   *
   * Returns the created command log with full details and assigned unique ID.
   *
   * @param connection
   * @param body Creation data for the chatbot command log
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IChatbotCommandLog.ICreate,
  ): Promise<IChatbotCommandLog> {
    try {
      return await postchatbotMemberChatbotCommandLogs({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a chatbot command log entry by ID.
   *
   * Update a chatbot command log entry by its ID, modifying the command text
   * and parameters. This API operation requires the unique identifier of the
   * command log entry as a path parameter. The request body must contain the
   * updated command details structured as per the
   * IChatbotChatbotCommandLogs.IUpdate schema, ensuring consistency with the
   * database model.
   *
   * Only users with the role 'member' can execute this operation.
   *
   * This operation will overwrite the existing command and parameters,
   * maintaining the historical link to the member who executed the command.
   * Proper validation is expected to ensure the command log exists and the new
   * data adheres to the expected format.
   *
   * No response body is returned upon success, but the HTTP success status
   * indicates the update was successful.
   *
   * @param connection
   * @param chatbotCommandLogId Unique identifier of the chatbot command log
   *   entry to update
   * @param body Request body for updating a chatbot command log entry
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":chatbotCommandLogId")
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("chatbotCommandLogId")
    chatbotCommandLogId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IChatbotChatbotCommandLogs.IUpdate,
  ): Promise<IChatbotChatbotCommandLogs> {
    try {
      return await putchatbotMemberChatbotCommandLogsChatbotCommandLogId({
        member,
        chatbotCommandLogId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a chatbot command log entry by ID.
   *
   * Delete a chatbot command log entry by its ID. This operation permanently
   * removes the record from the database and cannot be undone.
   *
   * Only users with the role 'member' can execute this operation.
   *
   * No response body is returned. Successful execution is indicated by HTTP
   * status codes.
   *
   * Use this operation carefully as it deletes historical audit records.
   *
   * @param connection
   * @param chatbotCommandLogId Unique identifier of the chatbot command log
   *   entry to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":chatbotCommandLogId")
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("chatbotCommandLogId")
    chatbotCommandLogId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletechatbotMemberChatbotCommandLogsChatbotCommandLogId({
        member,
        chatbotCommandLogId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
