import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postchatbotMemberChatbotMembersMemberIdStockTransactions } from "../../../../../providers/postchatbotMemberChatbotMembersMemberIdStockTransactions";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";
import { patchchatbotMemberChatbotMembersMemberIdStockTransactions } from "../../../../../providers/patchchatbotMemberChatbotMembersMemberIdStockTransactions";
import { getchatbotMemberChatbotMembersMemberIdStockTransactionsStockTransactionId } from "../../../../../providers/getchatbotMemberChatbotMembersMemberIdStockTransactionsStockTransactionId";
import { putchatbotMemberChatbotMembersMemberIdStockTransactionsStockTransactionId } from "../../../../../providers/putchatbotMemberChatbotMembersMemberIdStockTransactionsStockTransactionId";
import { deletechatbotMemberChatbotMembersMemberIdStockTransactionsStockTransactionId } from "../../../../../providers/deletechatbotMemberChatbotMembersMemberIdStockTransactionsStockTransactionId";

import { IChatbotStockTransactions } from "../../../../../api/structures/IChatbotStockTransactions";
import { IPageIChatbotStockTransaction } from "../../../../../api/structures/IPageIChatbotStockTransaction";
import { IChatbotStockTransaction } from "../../../../../api/structures/IChatbotStockTransaction";

@Controller("/chatbot/member/chatbotMembers/:memberId/stockTransactions")
export class ChatbotMemberChatbotmembersStocktransactionsController {
  /**
   * Create a new stock transaction for a chatbot member in the system. The
   * request body must include transaction type (buy/sell), stock item ID,
   * quantity, unit price, fees, and total price. The service will validate
   * sufficient points or holdings based on transaction type and update the
   * member's records.
   *
   * This operation supports real-time trading within the chatbot's virtual
   * stock minigame, ensuring atomicity and consistency.
   *
   * Failure responses will indicate reasons such as insufficient points or
   * holdings, or invalid stock codes.
   *
   * @param connection
   * @param memberId Unique identifier of the chatbot member
   * @param body The necessary information to create a new stock transaction
   *   record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("memberId")
    memberId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IChatbotStockTransactions.ICreate,
  ): Promise<IChatbotStockTransactions> {
    try {
      return await postchatbotMemberChatbotMembersMemberIdStockTransactions({
        member,
        memberId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List stock transactions for a chatbot member.
   *
   * Retrieve a paginated list of stock transactions for a specified chatbot
   * member.
   *
   * This operation supports querying transaction history for auditing and
   * review purposes.
   *
   * Path parameter `memberId` specifies the user whose transactions are being
   * listed.
   *
   * Supports filters and pagination via the request body described in
   * IChatbotStockTransaction.IRequest.
   *
   * Response includes a page of transaction records matching the request
   * criteria.
   *
   * Authorization limits access to authenticated users to protect privacy.
   *
   * Errors may occur for invalid member IDs or improper request filters.
   *
   * Part of the chatbot stock transaction management suite.
   *
   * @param connection
   * @param memberId Unique identifier of the target chatbot member
   * @param body Search and pagination parameters for listing stock transactions
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("memberId")
    memberId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IChatbotStockTransaction.IRequest,
  ): Promise<IPageIChatbotStockTransaction> {
    try {
      return await patchchatbotMemberChatbotMembersMemberIdStockTransactions({
        member,
        memberId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a specific stock transaction of a chatbot member.
   *
   * Retrieve detailed information of a particular stock transaction performed
   * by a chatbot member. This operation requires identifying the member by
   * their unique UUID (memberId) and the target stock transaction by its unique
   * UUID (stockTransactionId).
   *
   * Security considerations ensure that only authorized clients can access
   * transaction details relevant to a member. The response includes all
   * attributes as stored in the chatbot_stock_transactions Prisma model, with
   * references to the owning user and associated stock item.
   *
   * This API is read-only and does not alter any database records. It supports
   * frontend views and administrative audits of trading history.
   *
   * Errors may occur if the member or transaction does not exist or if the
   * transaction does not belong to the specified member.
   *
   * Related operations: POST /chatbotMembers/{memberId}/stockTransactions to
   * create a new stock transaction, PUT
   * /chatbotMembers/{memberId}/stockTransactions/{stockTransactionId} to
   * modify, and DELETE
   * /chatbotMembers/{memberId}/stockTransactions/{stockTransactionId} to remove
   * transactions permanently.
   *
   * @param connection
   * @param memberId Unique identifier of the chatbot member
   * @param stockTransactionId Unique identifier of the stock transaction
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":stockTransactionId")
  public async at(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("memberId")
    memberId: string & tags.Format<"uuid">,
    @TypedParam("stockTransactionId")
    stockTransactionId: string & tags.Format<"uuid">,
  ): Promise<IChatbotStockTransactions> {
    try {
      return await getchatbotMemberChatbotMembersMemberIdStockTransactionsStockTransactionId(
        {
          member,
          memberId,
          stockTransactionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a stock transaction of a chatbot member.
   *
   * Update an existing stock transaction for a chatbot member. The API accepts
   * full update data in the request body, including transaction type, quantity,
   * unit price, fees, and total price. It validates and saves the data,
   * ensuring transactional integrity.
   *
   * This operation is necessary for correcting or adjusting recorded
   * transactions. Authorization ensures the member owns the transaction.
   *
   * Errors may result from invalid data, unauthorized access, or non-existent
   * records.
   *
   * @param connection
   * @param memberId Unique identifier of the chatbot member
   * @param stockTransactionId Unique identifier of the stock transaction
   * @param body Updated data for the stock transaction
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":stockTransactionId")
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("memberId")
    memberId: string & tags.Format<"uuid">,
    @TypedParam("stockTransactionId")
    stockTransactionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IChatbotStockTransactions.IUpdate,
  ): Promise<IChatbotStockTransactions> {
    try {
      return await putchatbotMemberChatbotMembersMemberIdStockTransactionsStockTransactionId(
        {
          member,
          memberId,
          stockTransactionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a stock transaction of a chatbot member.
   *
   * Permanently delete a specific stock transaction of a chatbot member from
   * the database. This operation performs a hard delete without soft delete
   * handling.
   *
   * Only authorized users may delete their own transactions.
   *
   * After deletion, the transaction will no longer appear in any queries or
   * reports.
   *
   * Errors occur if the transaction or member does not exist or if access is
   * unauthorized.
   *
   * @param connection
   * @param memberId Unique identifier of the chatbot member
   * @param stockTransactionId Unique identifier of the stock transaction
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":stockTransactionId")
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("memberId")
    memberId: string & tags.Format<"uuid">,
    @TypedParam("stockTransactionId")
    stockTransactionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletechatbotMemberChatbotMembersMemberIdStockTransactionsStockTransactionId(
        {
          member,
          memberId,
          stockTransactionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
