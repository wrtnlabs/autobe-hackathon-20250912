import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postchatbotMemberChatbotMembers } from "../../../../providers/postchatbotMemberChatbotMembers";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";
import { putchatbotMemberChatbotMembersId } from "../../../../providers/putchatbotMemberChatbotMembersId";

import { IChatbotMember } from "../../../../api/structures/IChatbotMember";

@Controller("/chatbot/member/chatbotMembers")
export class ChatbotMemberChatbotmembersController {
  /**
   * Create new chatbot member.
   *
   * Create a new chatbot member in the system. The member is identified
   * internally by a unique sender ID mapped from external sources for privacy.
   * Nickname is stored as the display name. This creation is essential for
   * enabling users to participate in chat activities, earn points, and play
   * minigames.
   *
   * This operation requires `internal_sender_id` and `nickname`. It returns the
   * full member record, including UUID and timestamps.
   *
   * Access is restricted to authenticated users with role `member`. The
   * internal_sender_id must be unique system-wide.
   *
   * No password or role data is managed here; role inference occurs via room
   * context elsewhere.
   *
   * @param connection
   * @param body Information required to create a chatbot member
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IChatbotMember.ICreate,
  ): Promise<IChatbotMember> {
    try {
      return await postchatbotMemberChatbotMembers({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update existing chatbot member by ID.
   *
   * Modify chatbot member data for an existing user. Only fields such as
   * nickname are mutable; internal_sender_id remains unchanged for security and
   * consistency.
   *
   * This operation requires a valid UUID path parameter identifying the member
   * to update.
   *
   * Authorization restricts updates to authenticated users with role `member`.
   *
   * Returns updated member data on success.
   *
   * @param connection
   * @param id UUID identifying the member to update
   * @param body Updated member information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IChatbotMember.IUpdate,
  ): Promise<IChatbotMember> {
    try {
      return await putchatbotMemberChatbotMembersId({
        member,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
