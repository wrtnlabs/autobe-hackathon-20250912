import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postchatbotMemberChatbotMembersMemberIdUserTitles } from "../../../../../providers/postchatbotMemberChatbotMembersMemberIdUserTitles";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";
import { patchchatbotMemberChatbotMembersMemberIdUserTitles } from "../../../../../providers/patchchatbotMemberChatbotMembersMemberIdUserTitles";
import { getchatbotMemberChatbotMembersMemberIdUserTitlesUserTitleId } from "../../../../../providers/getchatbotMemberChatbotMembersMemberIdUserTitlesUserTitleId";
import { putchatbotMemberChatbotMembersMemberIdUserTitlesUserTitleId } from "../../../../../providers/putchatbotMemberChatbotMembersMemberIdUserTitlesUserTitleId";
import { deletechatbotMemberChatbotMembersMemberIdUserTitlesUserTitleId } from "../../../../../providers/deletechatbotMemberChatbotMembersMemberIdUserTitlesUserTitleId";

import { IChatbotUserTitle } from "../../../../../api/structures/IChatbotUserTitle";
import { IPageIChatbotUserTitle } from "../../../../../api/structures/IPageIChatbotUserTitle";

@Controller("/chatbot/member/chatbotMembers/:memberId/userTitles")
export class ChatbotMemberChatbotmembersUsertitlesController {
  /**
   * Create a new chatbot user title for a member.
   *
   * Assign a new user title to a chatbot member by creating a new record in
   * chatbot_user_titles. The request body must include required information
   * such as title reference and assignment date.
   *
   * The operation validates the input thoroughly and enforces uniqueness
   * constraints such as only one active title per member.
   *
   * Only authenticated users with role "member" are authorized.
   *
   * On success, the new detailed user title entity is returned.
   *
   * Errors occur for validation failures or business rule violations.
   *
   * This operation is fundamental for user title management in the chatbot
   * system.
   *
   * @param connection
   * @param memberId Unique identifier of the target chatbot member
   * @param body User title assignment creation details
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("memberId")
    memberId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IChatbotUserTitle.ICreate,
  ): Promise<IChatbotUserTitle> {
    try {
      return await postchatbotMemberChatbotMembersMemberIdUserTitles({
        member,
        memberId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List and search chatbot user titles by member ID with pagination and
   * filtering.
   *
   * Retrieve a filtered and paginated list of chatbot user titles associated
   * with a specific chatbot member. This operation supports advanced search and
   * filtering criteria submitted in the request body, allowing clients to
   * narrow down the list of user titles by various properties such as
   * assignment dates or fee discount rates.
   *
   * Security is enforced by requiring authenticated user access via the
   * "member" role. This ensures only authorized users can query user title
   * data.
   *
   * The operation maps directly to the chatbot_user_titles table filtered by
   * the member's unique ID (memberId). It returns paginated summary data
   * optimized for display in user interfaces.
   *
   * Correct path parameters for memberId ensure precise user scoping.
   *
   * Errors may be returned if the member does not exist or if the request body
   * parameters are ill-formed.
   *
   * This operation is a key building block for user management APIs focusing on
   * title assignments and their associated benefits.
   *
   * @param connection
   * @param memberId Unique identifier of the target chatbot member
   * @param body Filtering, search, and pagination parameters for chatbot user
   *   title listing
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("memberId")
    memberId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IChatbotUserTitle.IRequest,
  ): Promise<IPageIChatbotUserTitle.ISummary> {
    try {
      return await patchchatbotMemberChatbotMembersMemberIdUserTitles({
        member,
        memberId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a chatbot user title record by member and user title IDs.
   *
   * Retrieve detailed information about a specific user title assigned to a
   * chatbot member. This operation fetches the user title referenced by the
   * member's unique memberId and the user title's unique userTitleId.
   *
   * Only users authenticated as "member" roles are authorized to access this
   * endpoint.
   *
   * The API returns the full detailed user title entity, including assignment
   * details and timestamps.
   *
   * Security checks ensure the user title belongs to the specified memberId. If
   * not found or unauthorized, an error is returned.
   *
   * This operation corresponds to a simple retrieval by primary key and foreign
   * key references in the database schema.
   *
   * @param connection
   * @param memberId Unique identifier of the target chatbot member
   * @param userTitleId Unique identifier of the chatbot user title record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":userTitleId")
  public async at(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("memberId")
    memberId: string & tags.Format<"uuid">,
    @TypedParam("userTitleId")
    userTitleId: string & tags.Format<"uuid">,
  ): Promise<IChatbotUserTitle> {
    try {
      return await getchatbotMemberChatbotMembersMemberIdUserTitlesUserTitleId({
        member,
        memberId,
        userTitleId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a chatbot user title assignment by member and user title IDs.
   *
   * Update an existing user title assignment for chatbot member. The request
   * provides updated fields such as title reference and assignment date.
   *
   * Access is restricted to authenticated users with role "member".
   *
   * Validates existence of member and user title records.
   *
   * Returns the updated user title entity on success.
   *
   * Error handling covers invalid input or missing records.
   *
   * This operation directly maps to the PUT method for chatbot_user_titles
   * resource under member scope.
   *
   * @param connection
   * @param memberId Unique identifier of the target chatbot member
   * @param userTitleId Unique identifier of the chatbot user title record
   * @param body User title update details
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":userTitleId")
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("memberId")
    memberId: string & tags.Format<"uuid">,
    @TypedParam("userTitleId")
    userTitleId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IChatbotUserTitle.IUpdate,
  ): Promise<IChatbotUserTitle> {
    try {
      return await putchatbotMemberChatbotMembersMemberIdUserTitlesUserTitleId({
        member,
        memberId,
        userTitleId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a chatbot user title association by memberId and userTitleId.
   *
   * Deletes a user title association identified by userTitleId for the member
   * identified by memberId. This removes the assigned title from the user and
   * the record is permanently deleted from the chatbot_user_titles table.
   *
   * Security considerations include ensuring that only authorized users can
   * delete the title associations. This operation relates directly to the
   * chatbot_user_titles table as defined in the Prisma schema.
   *
   * No request body is needed. The operation requires the memberId and
   * userTitleId path parameters which must be valid UUIDs corresponding to
   * existing records.
   *
   * This operation permanently removes the user-title allocation record and
   * cannot be undone. Error handling must include checks for existence and
   * permissions.
   *
   * @param connection
   * @param memberId Unique identifier of the target chatbot member
   * @param userTitleId Unique identifier of the user title association to
   *   delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":userTitleId")
  public async eraseUserTitle(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("memberId")
    memberId: string & tags.Format<"uuid">,
    @TypedParam("userTitleId")
    userTitleId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletechatbotMemberChatbotMembersMemberIdUserTitlesUserTitleId(
        {
          member,
          memberId,
          userTitleId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
