import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postchatbotMemberChatbotMembersMemberIdStockHoldings } from "../../../../../providers/postchatbotMemberChatbotMembersMemberIdStockHoldings";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";
import { patchchatbotMemberChatbotMembersMemberIdStockHoldings } from "../../../../../providers/patchchatbotMemberChatbotMembersMemberIdStockHoldings";
import { getchatbotMemberChatbotMembersMemberIdStockHoldingsStockHoldingId } from "../../../../../providers/getchatbotMemberChatbotMembersMemberIdStockHoldingsStockHoldingId";
import { putchatbotMemberChatbotMembersMemberIdStockHoldingsStockHoldingId } from "../../../../../providers/putchatbotMemberChatbotMembersMemberIdStockHoldingsStockHoldingId";
import { deletechatbotMemberChatbotMembersMemberIdStockHoldingsStockHoldingId } from "../../../../../providers/deletechatbotMemberChatbotMembersMemberIdStockHoldingsStockHoldingId";

import { IChatbotStockHolding } from "../../../../../api/structures/IChatbotStockHolding";
import { IPageIChatbotStockHoldings } from "../../../../../api/structures/IPageIChatbotStockHoldings";
import { IChatbotChatbotMembersStockHoldings } from "../../../../../api/structures/IChatbotChatbotMembersStockHoldings";
import { IChatbotStockHoldings } from "../../../../../api/structures/IChatbotStockHoldings";

@Controller("/chatbot/member/chatbotMembers/:memberId/stockHoldings")
export class ChatbotMemberChatbotmembersStockholdingsController {
  /**
   * Create a stock holding record for a chatbot member.
   *
   * Create a new stock holding entry for a specific chatbot member.
   *
   * This operation allows the system to add stock holdings for a user in the
   * virtual stock trading game, linking the holding to the member's internal
   * ID.
   *
   * Authorization is required to ensure only permitted users or admins add
   * holdings.
   *
   * The path parameter `memberId` identifies the target member whose stock
   * portfolio is being modified.
   *
   * The request body includes necessary details such as stock item and
   * quantity.
   *
   * Upon success, the operation returns the created stock holding record with
   * its unique ID and timestamps, as stored in the chatbot_stock_holdings
   * table.
   *
   * Errors may result from invalid member IDs or improper request body formats.
   *
   * This operation is part of the chatbot stock holdings management in the
   * chatbot system.
   *
   * @param connection
   * @param memberId Unique identifier of the target chatbot member
   * @param body Details for creating a stock holding record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("memberId")
    memberId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IChatbotStockHolding.ICreate,
  ): Promise<IChatbotStockHolding> {
    try {
      return await postchatbotMemberChatbotMembersMemberIdStockHoldings({
        member,
        memberId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get list of stock holdings owned by a member.
   *
   * Retrieve a paginated list of stock holdings for a specified chatbot member.
   * The response includes stock item details and quantity held. Supports
   * filtering and sorting parameters for advanced queries.
   *
   * Security considerations ensure that members can only access their own
   * holdings appropriately.
   *
   * This operation acts upon the chatbot_stock_holdings table with related
   * chatbot_stock_items to provide full context of owned stocks.
   *
   * Validation ensures memberId is a valid UUID and request parameters conform
   * to IChatbotChatbotMembersStockHoldings.IRequest schema.
   *
   * Related operations include purchasing and selling stocks which modify
   * holdings.
   *
   * @param connection
   * @param memberId Unique identifier (UUID) of the chatbot member whose stock
   *   holdings are requested
   * @param body Parameters for pagination, filtering, and sorting of stock
   *   holdings
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexStockHoldingsByMember(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("memberId")
    memberId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IChatbotChatbotMembersStockHoldings.IRequest,
  ): Promise<IPageIChatbotStockHoldings.ISummary> {
    try {
      return await patchchatbotMemberChatbotMembersMemberIdStockHoldings({
        member,
        memberId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed stock holding info by IDs.
   *
   * Retrieve detailed information about a specific stock holding belonging to a
   * chatbot member. Includes stock item metadata and holding quantity.
   *
   * Security controls ensure only authorized users with access to the member's
   * holdings can fetch this data.
   *
   * Directly queries chatbot_stock_holdings and associated stock items for full
   * context.
   *
   * Validation enforces UUID format for path parameters and existence of the
   * record.
   *
   * Related to stock holding listing and transactions for management.
   *
   * @param connection
   * @param memberId Target chatbot member's unique identifier (UUID)
   * @param stockHoldingId Specific stock holding record unique identifier
   *   (UUID)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":stockHoldingId")
  public async atStockHoldingByMember(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("memberId")
    memberId: string & tags.Format<"uuid">,
    @TypedParam("stockHoldingId")
    stockHoldingId: string & tags.Format<"uuid">,
  ): Promise<IChatbotStockHoldings> {
    try {
      return await getchatbotMemberChatbotMembersMemberIdStockHoldingsStockHoldingId(
        {
          member,
          memberId,
          stockHoldingId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a chatbot member's stock holding.
   *
   * Update details of an existing stock holding record for a chatbot member.
   *
   * This operation modifies the quantity or related properties of a stock
   * holding linked to a specified member. It supports gameplay features such as
   * buying and selling stocks.
   *
   * Path parameters `memberId` and `stockHoldingId` target the holding to
   * update.
   *
   * Request body must conform to the IChatbotStockHolding.IUpdate schema.
   *
   * Successful updates return the updated stock holding.
   *
   * Authorization requires the user role to ensure only permitted operations.
   *
   * Errors occur for invalid IDs or invalid payloads.
   *
   * Part of chatbot member stock management features.
   *
   * @param connection
   * @param memberId Unique identifier of the target chatbot member
   * @param stockHoldingId Unique identifier of the target stock holding record
   * @param body Stock holding update information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":stockHoldingId")
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("memberId")
    memberId: string & tags.Format<"uuid">,
    @TypedParam("stockHoldingId")
    stockHoldingId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IChatbotStockHolding.IUpdate,
  ): Promise<IChatbotStockHolding> {
    try {
      return await putchatbotMemberChatbotMembersMemberIdStockHoldingsStockHoldingId(
        {
          member,
          memberId,
          stockHoldingId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a chatbot member's stock holding record.
   *
   * Delete a stock holding record associated with a chatbot member.
   *
   * This operation permanently removes the specified stock holding entry from
   * the user's portfolio.
   *
   * Path parameters include `memberId` and `stockHoldingId` which uniquely
   * identify the target holding.
   *
   * No request body is needed.
   *
   * Authorization roles ensure only owners or admins can perform this deletion.
   *
   * Successful deletion returns no content.
   *
   * This is a hard delete operation with permanent removal of the record.
   *
   * Errors can result from invalid identifiers or lack of permissions.
   *
   * @param connection
   * @param memberId Unique identifier of the target chatbot member
   * @param stockHoldingId Unique identifier of the target stock holding record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":stockHoldingId")
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("memberId")
    memberId: string & tags.Format<"uuid">,
    @TypedParam("stockHoldingId")
    stockHoldingId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletechatbotMemberChatbotMembersMemberIdStockHoldingsStockHoldingId(
        {
          member,
          memberId,
          stockHoldingId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
