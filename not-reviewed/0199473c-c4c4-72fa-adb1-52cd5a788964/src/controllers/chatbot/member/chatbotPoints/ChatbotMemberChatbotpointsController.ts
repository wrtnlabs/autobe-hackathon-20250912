import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getchatbotMemberChatbotPointsId } from "../../../../providers/getchatbotMemberChatbotPointsId";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";
import { putchatbotMemberChatbotPointsId } from "../../../../providers/putchatbotMemberChatbotPointsId";
import { deletechatbotMemberChatbotPointsId } from "../../../../providers/deletechatbotMemberChatbotPointsId";
import { postchatbotMemberChatbotPoints } from "../../../../providers/postchatbotMemberChatbotPoints";

import { IChatbotPoints } from "../../../../api/structures/IChatbotPoints";

@Controller("/chatbot/member/chatbotPoints")
export class ChatbotMemberChatbotpointsController {
  /**
   * Retrieve chatbot points by ID.
   *
   * Retrieve detailed chatbot points information by unique ID.
   *
   * This operation fetches a single chatbot_points record identified by its
   * UUID from the database. It is intended for administrators or system
   * components needing to view the current points held by a member. The
   * retrieved data includes the member ID and the current points balance.
   *
   * Security consideration includes that this endpoint should be accessible
   * only to authorized roles with rights to view user points.
   *
   * The underlying table 'chatbot_points' links to the 'chatbot_members' table
   * for member reference. The integrity of member points is critical to
   * features like minigames and rankings.
   *
   * Request parameters include a single path parameter 'id', which is the UUID
   * of the point record to fetch.
   *
   * The response will contain the full point entity, representing the current
   * state in the database.
   *
   * Errors may occur if the specified ID does not exist, which should be
   * handled gracefully by the calling system.
   *
   * @param connection
   * @param id Unique identifier of the chatbot points record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IChatbotPoints> {
    try {
      return await getchatbotMemberChatbotPointsId({
        member,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update chatbot points by ID.
   *
   * Update chatbot points information by ID.
   *
   * This operation allows update of fields such as points total for a given
   * chatbot_points record, specified by the path parameter 'id'.
   *
   * Security constraints require that only authorized users can perform updates
   * to prevent unauthorized point manipulation.
   *
   * The request body must specify the fields to update with valid values. On
   * success, the updated record is returned.
   *
   * Errors may arise if the specified ID does not exist or if validation fails.
   *
   * @param connection
   * @param id Unique identifier of the chatbot points record to update
   * @param body Update info for chatbot points
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IChatbotPoints.IUpdate,
  ): Promise<IChatbotPoints> {
    try {
      return await putchatbotMemberChatbotPointsId({
        member,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete chatbot points by ID.
   *
   * Delete chatbot points record by ID permanently.
   *
   * This operation performs a hard delete of the chatbot_points record
   * identified by the UUID path parameter. It removes all data associated and
   * is irreversible.
   *
   * Access is restricted to authorized user roles.
   *
   * No content is returned upon successful deletion. Errors occur if the ID
   * does not exist.
   *
   * Use with caution to avoid loss of critical user point data.
   *
   * @param connection
   * @param id Unique identifier of the chatbot points record to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletechatbotMemberChatbotPointsId({
        member,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create new chatbot points record.
   *
   * Create a new chatbot points record in the database.
   *
   * This operation is designed for system components or administrators to
   * initialize point records for users as needed. The request body must include
   * the member's unique identifier linked to points and the initial points
   * quantity.
   *
   * Security is important as point creation must be controlled and validated to
   * prevent unauthorized points manipulation.
   *
   * On success, the created point record is returned with all fields populated
   * as in the database.
   *
   * If creation fails due to constraint violations (e.g., duplicate member
   * points), errors will be returned and should be handled appropriately.
   *
   * @param connection
   * @param body Creation info for chatbot points
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IChatbotPoints.ICreate,
  ): Promise<IChatbotPoints> {
    try {
      return await postchatbotMemberChatbotPoints({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
