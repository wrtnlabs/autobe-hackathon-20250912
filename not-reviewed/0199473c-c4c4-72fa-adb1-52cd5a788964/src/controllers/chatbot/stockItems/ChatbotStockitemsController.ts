import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchchatbotStockItems } from "../../../providers/patchchatbotStockItems";
import { getchatbotStockItemsStockItemId } from "../../../providers/getchatbotStockItemsStockItemId";

import { IPageIChatbotStockItem } from "../../../api/structures/IPageIChatbotStockItem";
import { IChatbotStockItem } from "../../../api/structures/IChatbotStockItem";

@Controller("/chatbot/stockItems")
export class ChatbotStockitemsController {
  /**
   * List virtual stock items with filtering and pagination.
   *
   * Retrieve a filtered and paginated list of virtual stock items available for
   * trading. The response includes stock summaries with unique code, name, and
   * initial price to assist users in making trading decisions.
   *
   * This operation interfaces with the chatbot_stock_items table as defined in
   * the Prisma schema which defines unique codes and names for each stock item
   * with corresponding initial prices.
   *
   * No parameters are needed in the path, but filtering and pagination
   * parameters should be passed in the request body.
   *
   * This read-only endpoint is accessible publicly.
   *
   * @param connection
   * @param body Filter and pagination criteria for listing stock items
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexStockItems(
    @TypedBody()
    body: IChatbotStockItem.IRequest,
  ): Promise<IPageIChatbotStockItem.ISummary> {
    try {
      return await patchchatbotStockItems({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information of a chatbot stock item by ID.
   *
   * Get detailed information about a specific stock item identified by
   * stockItemId. Returns the full stock item record from the
   * chatbot_stock_items table including code, name, initial price, and relevant
   * timestamps.
   *
   * The stockItemId path parameter must be a valid UUID representing an
   * existing stock item.
   *
   * This operation is publicly accessible without authentication requirements.
   *
   * @param connection
   * @param stockItemId Unique identifier of the stock item to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":stockItemId")
  public async atStockItem(
    @TypedParam("stockItemId")
    stockItemId: string & tags.Format<"uuid">,
  ): Promise<IChatbotStockItem> {
    try {
      return await getchatbotStockItemsStockItemId({
        stockItemId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
