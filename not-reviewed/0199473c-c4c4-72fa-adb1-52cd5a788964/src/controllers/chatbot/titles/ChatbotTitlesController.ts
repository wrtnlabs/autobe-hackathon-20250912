import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getchatbotTitlesId } from "../../../providers/getchatbotTitlesId";

import { IChatbotTitles } from "../../../api/structures/IChatbotTitles";

@Controller("/chatbot/titles/:id")
export class ChatbotTitlesController {
  /**
   * Retrieve a specific user title by ID.
   *
   * Retrieve detailed information of a specific title in the chatbot system.
   * The title contains properties such as name, fee_discount_rate representing
   * the discount percentage on fees granted by the title, and timestamps for
   * creation, update, and optional deletion. This endpoint is publicly
   * accessible without authorization requirements, facilitating client
   * applications to query title information.
   *
   * Security considerations are minimal since this is a read operation without
   * sensitive data exposure. This operation references the chatbot_titles table
   * in the Prisma schema, ensuring the data emitted matches exactly the title
   * entity structure.
   *
   * Typical use cases include displaying title options to users, or
   * administrative validation before assignment. Errors include 404 if the
   * title is not found. No request body is required for this GET operation.
   *
   * Parameters include the UUID path parameter id identifying the target title
   * to retrieve. The response returns the IChatbotTitles type representing the
   * full title record.
   *
   * @param connection
   * @param id Unique identifier of the target title
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IChatbotTitles> {
    try {
      return await getchatbotTitlesId({
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
