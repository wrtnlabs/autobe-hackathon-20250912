import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthAdminJoin } from "../../../providers/postauthAdminJoin";
import { AdminAuth } from "../../../decorators/AdminAuth";
import { AdminPayload } from "../../../decorators/payload/AdminPayload";
import { postauthAdminLogin } from "../../../providers/postauthAdminLogin";
import { postauthAdminRefresh } from "../../../providers/postauthAdminRefresh";

import { IFlexOfficeAdmin } from "../../../api/structures/IFlexOfficeAdmin";

@Controller("/auth/admin")
export class AuthAdminController {
  /**
   * Create a new admin account in the flex_office_admins table.
   *
   * Register a new FlexOffice admin by creating an account with unique email
   * and password. The system stores password hashes and issues JWT tokens upon
   * successful join for secure session management.
   *
   * References the `flex_office_admins` table, leveraging fields: `email`,
   * `password_hash`, `created_at`, and `updated_at`.
   *
   * This operation is open to public access for initial registration but will
   * require approval and role assignment for proper admin provisioning.
   *
   * Ensure secure handling of credentials and validation of unique emails to
   * prevent duplicates.
   *
   * Related operations include login to authenticate and refresh to renew
   * tokens.
   *
   * @param connection
   * @param body Details for creating a new admin account.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IFlexOfficeAdmin.ICreate,
  ): Promise<IFlexOfficeAdmin.IAuthorized> {
    try {
      return await postauthAdminJoin({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Authenticate an admin user and obtain JWT tokens.
   *
   * Log in as a FlexOffice admin user providing valid email and password. The
   * system verifies credentials stored in `flex_office_admins` table and issues
   * JWT tokens upon success.
   *
   * References: `email`, `password_hash`, `created_at`, `updated_at` fields for
   * authentication flow.
   *
   * Security best practices apply for credential transmission and token
   * issuance.
   *
   * Typically paired with join for user registration and refresh for session
   * token renewal.
   *
   * @param connection
   * @param body Admin login credentials.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IFlexOfficeAdmin.ILogin,
  ): Promise<IFlexOfficeAdmin.IAuthorized> {
    try {
      return await postauthAdminLogin({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Renew access and refresh tokens for an admin user.
   *
   * Refresh JWT tokens for an authenticated FlexOffice admin user to maintain
   * session integrity.
   *
   * Requires a valid refresh token linked to the admin in the
   * `flex_office_admins` table.
   *
   * Ensures continuous access while enforcing security policies for token
   * expiration and renewal.
   *
   * Typically used alongside login and join endpoints.
   *
   * @param connection
   * @param body Refresh token request body.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IFlexOfficeAdmin.IRefresh,
  ): Promise<IFlexOfficeAdmin.IAuthorized> {
    try {
      return await postauthAdminRefresh({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
