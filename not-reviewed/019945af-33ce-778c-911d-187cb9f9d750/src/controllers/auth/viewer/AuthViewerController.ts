import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthViewerJoin } from "../../../providers/postauthViewerJoin";
import { ViewerAuth } from "../../../decorators/ViewerAuth";
import { ViewerPayload } from "../../../decorators/payload/ViewerPayload";
import { postauthViewerLogin } from "../../../providers/postauthViewerLogin";
import { postauthViewerRefresh } from "../../../providers/postauthViewerRefresh";

import { IFlexOfficeViewer } from "../../../api/structures/IFlexOfficeViewer";

@Controller("/auth/viewer")
export class AuthViewerController {
  /**
   * Join operation for flexOffice viewer role creating new viewer accounts and
   * issuing JWT tokens.
   *
   * This join API operation is designed for the viewer role in FlexOffice
   * representing authenticated users with read-only access. The operation
   * references the 'flex_office_viewers' schema for account creation.
   *
   * It expects the client to submit user registration data necessary for
   * creating a viewer profile, including the user's name, email, and
   * authentication credentials (e.g., password).
   *
   * Upon successful registration, the API issues JWT tokens that embed the
   * viewer role information and allow session management. The soft delete
   * feature is maintained by 'deleted_at'.
   *
   * Security considerations include hashing and securely storing passwords
   * using 'password_hash'.
   *
   * Related operations include login (authentication) and refresh (token
   * renewal), which must be used in conjunction for complete session
   * management.
   *
   * @param connection
   * @param body Viewer creation info for registration, excluding sensitive
   *   tokens.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @ViewerAuth()
    viewer: ViewerPayload,
    @TypedBody()
    body: IFlexOfficeViewer.ICreate,
  ): Promise<IFlexOfficeViewer.IAuthorized> {
    try {
      return await postauthViewerJoin({
        viewer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Login operation for flexOffice viewer role authenticating users and issuing
   * JWT access tokens.
   *
   * Login operation for viewers authenticating credentials and issuing access
   * JWT tokens.
   *
   * Users provide credentials like email and password. On success, JWT tokens
   * are returned embedding viewer permissions for session control.
   *
   * Security considerations include password hash verification and mitigation
   * of authentication attacks.
   *
   * Refresh operations are complementary to renew access tokens securely.
   *
   * The viewer table 'flex_office_viewers' stores user credentials and role
   * data.
   *
   * @param connection
   * @param body Viewer login credentials required for authentication.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @ViewerAuth()
    viewer: ViewerPayload,
    @TypedBody()
    body: IFlexOfficeViewer.ILogin,
  ): Promise<IFlexOfficeViewer.IAuthorized> {
    try {
      return await postauthViewerLogin({
        viewer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh JWT tokens for flexOffice viewer role maintaining session
   * continuity.
   *
   * Refresh JWT tokens operation for flexOffice viewer role renewing access
   * without full login.
   *
   * Ensures continued authenticated sessions with valid viewer permissions.
   *
   * This operation requires a valid refresh token and securely issues new
   * tokens.
   *
   * Works closely with login and join operations in token lifecycle.
   *
   * @param connection
   * @param body Refresh token request data.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @ViewerAuth()
    viewer: ViewerPayload,
    @TypedBody()
    body: IFlexOfficeViewer.IRefresh,
  ): Promise<IFlexOfficeViewer.IAuthorized> {
    try {
      return await postauthViewerRefresh({
        viewer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
