import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthEditorJoin } from "../../../providers/postauthEditorJoin";
import { EditorAuth } from "../../../decorators/EditorAuth";
import { EditorPayload } from "../../../decorators/payload/EditorPayload";
import { postauthEditorLogin } from "../../../providers/postauthEditorLogin";
import { postauthEditorRefresh } from "../../../providers/postauthEditorRefresh";

import { IFlexOfficeEditor } from "../../../api/structures/IFlexOfficeEditor";

@Controller("/auth/editor")
export class AuthEditorController {
  /**
   * Register a new Editor user and issue authorization tokens, using
   * flex_office_editors table.
   *
   * The /auth/editor/join endpoint enables registration of a new Editor user
   * account in the FlexOffice system, referencing flex_office_editors table
   * schema. It accepts editor's email and password hash, which are stored
   * securely according to the schema fields 'email' and 'password_hash'. Upon
   * successful creation, the API issues JWT tokens that include the user's role
   * and permissions.
   *
   * This operation is public and allows new member-kind users to create their
   * account. It strictly enforces unique email constraint as defined in the
   * database schema and hashes passwords prior to storage.
   *
   * Security measures include validation of email format and password strength.
   *
   * Related operations include /auth/editor/login and /auth/editor/refresh for
   * session management.
   *
   * Errors include duplicate email (409) and validation errors (400).
   *
   * @param connection
   * @param body Editor registration input including email and password hash
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @EditorAuth()
    editor: EditorPayload,
    @TypedBody()
    body: IFlexOfficeEditor.ICreate,
  ): Promise<IFlexOfficeEditor.IAuthorized> {
    try {
      return await postauthEditorJoin({
        editor,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Authenticate existing Editor user and issue authorization tokens, using
   * flex_office_editors table.
   *
   * The /auth/editor/login endpoint authenticates Editor users by verifying
   * credentials against the flex_office_editors table schema, specifically
   * using the 'email' and 'password_hash' fields. Successful authentication
   * returns JWT tokens authorizing the user with appropriate role and
   * permissions.
   *
   * This operation is open to existing member-kind users and requires
   * submission of valid email and password hash.
   *
   * Security best practices include secure password comparison and prevention
   * of timing attacks.
   *
   * Complementary operations are /auth/editor/join and /auth/editor/refresh.
   *
   * Failed attempts result in 401 Unauthorized responses.
   *
   * @param connection
   * @param body Editor login input with email and password hash
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @EditorAuth()
    editor: EditorPayload,
    @TypedBody()
    body: IFlexOfficeEditor.ILogin,
  ): Promise<IFlexOfficeEditor.IAuthorized> {
    try {
      return await postauthEditorLogin({
        editor,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh JWT tokens for Editor user sessions with valid refresh token.
   *
   * The /auth/editor/refresh endpoint allows Editor users to refresh their JWT
   * access tokens using a valid refresh token. It validates the token against
   * the system, then issues new access and refresh tokens retaining the editor
   * role and permissions.
   *
   * This ensures seamless session continuation without re-authentication. It is
   * part of the member kind user's authentication lifecycle.
   *
   * Security considerations include refresh token revocation checking and token
   * expiry validation.
   *
   * Related operations are /auth/editor/join and /auth/editor/login.
   *
   * Unauthorized or invalid tokens result in 401 responses.
   *
   * @param connection
   * @param body Refresh token input for Editor user session renewal
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @EditorAuth()
    editor: EditorPayload,
    @TypedBody()
    body: IFlexOfficeEditor.IRefresh,
  ): Promise<IFlexOfficeEditor.IAuthorized> {
    try {
      return await postauthEditorRefresh({
        editor,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
