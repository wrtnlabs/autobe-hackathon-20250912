import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchflexOfficeEditorPagesPageIdEditConflicts } from "../../../../../providers/patchflexOfficeEditorPagesPageIdEditConflicts";
import { EditorAuth } from "../../../../../decorators/EditorAuth";
import { EditorPayload } from "../../../../../decorators/payload/EditorPayload";
import { getflexOfficeEditorPagesPageIdEditConflictsEditConflictId } from "../../../../../providers/getflexOfficeEditorPagesPageIdEditConflictsEditConflictId";

import { IPageIFlexOfficeEditConflict } from "../../../../../api/structures/IPageIFlexOfficeEditConflict";
import { IFlexOfficeEditConflict } from "../../../../../api/structures/IFlexOfficeEditConflict";

@Controller("/flexOffice/editor/pages/:pageId/editConflicts")
export class FlexofficeEditorPagesEditconflictsController {
  /**
   * Search and retrieve a paginated list of edit conflicts for a UI page.
   *
   * Retrieve a filtered and paginated list of edit conflicts for a specified UI
   * page in the FlexOffice system. The operation enables administrators and
   * editors to monitor conflicts arising during concurrent editing sessions. It
   * supports filtering by conflict attributes and pagination for scalability.
   *
   * Access is restricted to authenticated users with appropriate permissions,
   * typically Editor or Admin roles. The returned data includes conflict
   * details such as editor ID, page ID, conflicting change data, and timestamps
   * to inform collaboration workflows. Pagination ensures efficient network
   * usage and client rendering.
   *
   * This operation accesses the flex_office_edit_conflicts table which records
   * each conflict as a JSON-encoded data snapshot linked to a page and an
   * editor. The data field "conflict_data" captures the nature of the
   * conflicting edits. Retrieval allows review and analysis to guide conflict
   * resolution strategies.
   *
   * The API supports concurrency scenarios and helps maintain data consistency
   * by providing auditability and conflict tracking in collaboration
   * environments. Error handling includes validation of the pageId path
   * parameter and appropriate access control enforcement.
   *
   * @param connection
   * @param pageId Unique identifier of the target UI page
   * @param body Search criteria and pagination parameters for filtering edit
   *   conflicts
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @EditorAuth()
    editor: EditorPayload,
    @TypedParam("pageId")
    pageId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficeEditConflict.IRequest,
  ): Promise<IPageIFlexOfficeEditConflict> {
    try {
      return await patchflexOfficeEditorPagesPageIdEditConflicts({
        editor,
        pageId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific edit conflict by ID for a UI page.
   *
   * Retrieve detailed information of a specific edit conflict record by its ID
   * and associated UI page ID. This API operation allows admins and editors to
   * inspect conflict data to resolve collaboration issues effectively.
   *
   * Access control ensures only users with suitable roles (Admin or Editor) can
   * view conflict details. The response includes all conflict record fields
   * stored in the database, aiding in audit trails and user support scenarios.
   *
   * Appropriate parameter validation and error handling ensure robust operation
   * in distributed multi-user editing environments.
   *
   * @param connection
   * @param pageId Unique identifier of the target UI page
   * @param editConflictId Unique identifier of the target edit conflict record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":editConflictId")
  public async at(
    @EditorAuth()
    editor: EditorPayload,
    @TypedParam("pageId")
    pageId: string & tags.Format<"uuid">,
    @TypedParam("editConflictId")
    editConflictId: string & tags.Format<"uuid">,
  ): Promise<IFlexOfficeEditConflict> {
    try {
      return await getflexOfficeEditorPagesPageIdEditConflictsEditConflictId({
        editor,
        pageId,
        editConflictId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
