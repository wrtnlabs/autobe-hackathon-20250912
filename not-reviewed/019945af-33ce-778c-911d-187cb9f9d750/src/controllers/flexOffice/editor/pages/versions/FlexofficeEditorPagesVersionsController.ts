import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchflexOfficeEditorPagesPageIdVersions } from "../../../../../providers/patchflexOfficeEditorPagesPageIdVersions";
import { EditorAuth } from "../../../../../decorators/EditorAuth";
import { EditorPayload } from "../../../../../decorators/payload/EditorPayload";
import { getflexOfficeEditorPagesPageIdVersionsVersionId } from "../../../../../providers/getflexOfficeEditorPagesPageIdVersionsVersionId";

import { IPageIFlexOfficePageVersion } from "../../../../../api/structures/IPageIFlexOfficePageVersion";
import { IFlexOfficePageVersion } from "../../../../../api/structures/IFlexOfficePageVersion";

@Controller("/flexOffice/editor/pages/:pageId/versions")
export class FlexofficeEditorPagesVersionsController {
  /**
   * Search and retrieve UI page versions for a given page.
   *
   * Retrieve a paginated, filtered, and sorted list of historical version
   * snapshots for a specified UI page in the FlexOffice system.
   *
   * This operation is essential for page version control, allowing users to
   * view snapshots of the page's state captured over time. Version data
   * includes version numbers, JSON serialized page data, and timestamps.
   *
   * Access is restricted to authenticated users with editor or admin roles to
   * ensure secure collaboration and auditing.
   *
   * The pageId path parameter specifies which UI page's version history to
   * query. The request body supports search and filtering criteria conforming
   * to IFlexOfficePageVersion.IRequest to narrow down versions by version
   * number ranges, date ranges, or other metadata.
   *
   * The response includes paginated version summaries, enabling clients to
   * efficiently browse large version histories.
   *
   * This API complements GET endpoints for individual versions and operations
   * to create or restore versions.
   *
   * @param connection
   * @param pageId Unique identifier of the target UI page
   * @param body Search criteria and pagination parameters for page versions
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async searchPageVersions(
    @EditorAuth()
    editor: EditorPayload,
    @TypedParam("pageId")
    pageId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficePageVersion.IRequest,
  ): Promise<IPageIFlexOfficePageVersion.ISummary> {
    try {
      return await patchflexOfficeEditorPagesPageIdVersions({
        editor,
        pageId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information for a UI page version.
   *
   * Fetch full details of a single UI page version from the FlexOffice backend
   * system.
   *
   * This operation is crucial for retrieving historical snapshots of UI pages
   * to enable rollback or auditing of changes. The pageId and versionId path
   * parameters identify the exact version record.
   *
   * Only users with editor or admin roles can access this detailed data to
   * ensure proper governance.
   *
   * Upon success, the JSON serialized page data representing the page layout
   * and widget configuration at that version is returned.
   *
   * This API complements version list retrieval and page update endpoints.
   *
   * @param connection
   * @param pageId Unique identifier of the parent UI page
   * @param versionId Unique identifier of the UI page version
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":versionId")
  public async atPageVersion(
    @EditorAuth()
    editor: EditorPayload,
    @TypedParam("pageId")
    pageId: string & tags.Format<"uuid">,
    @TypedParam("versionId")
    versionId: string & tags.Format<"uuid">,
  ): Promise<IFlexOfficePageVersion> {
    try {
      return await getflexOfficeEditorPagesPageIdVersionsVersionId({
        editor,
        pageId,
        versionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
