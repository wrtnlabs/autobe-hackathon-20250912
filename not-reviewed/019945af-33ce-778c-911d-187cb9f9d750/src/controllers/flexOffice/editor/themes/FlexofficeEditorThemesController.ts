import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postflexOfficeEditorThemes } from "../../../../providers/postflexOfficeEditorThemes";
import { EditorAuth } from "../../../../decorators/EditorAuth";
import { EditorPayload } from "../../../../decorators/payload/EditorPayload";
import { patchflexOfficeEditorThemes } from "../../../../providers/patchflexOfficeEditorThemes";
import { getflexOfficeEditorThemesId } from "../../../../providers/getflexOfficeEditorThemesId";
import { putflexOfficeEditorThemesId } from "../../../../providers/putflexOfficeEditorThemesId";
import { deleteflexOfficeEditorThemesId } from "../../../../providers/deleteflexOfficeEditorThemesId";

import { IFlexOfficeTheme } from "../../../../api/structures/IFlexOfficeTheme";
import { IPageIFlexOfficeTheme } from "../../../../api/structures/IPageIFlexOfficeTheme";

@Controller("/flexOffice/editor/themes")
export class FlexofficeEditorThemesController {
  /**
   * Create a new UI theme.
   *
   * Create a new UI/Page Builder theme by providing name and optional CSS
   * content. The operation inserts a new record into the flex_office_themes
   * table.
   *
   * Input validation ensures the name is unique and CSS content is valid text.
   *
   * Upon successful creation, the response returns the full newly created theme
   * including ID and timestamps.
   *
   * Authorized users include Admins and Editors who manage UI customization.
   *
   * Request requires a JSON request body specifying theme creation fields
   * defined in the IFlexOfficeTheme.ICreate DTO.
   *
   * @param connection
   * @param body Theme creation data including name and CSS
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createTheme(
    @EditorAuth()
    editor: EditorPayload,
    @TypedBody()
    body: IFlexOfficeTheme.ICreate,
  ): Promise<IFlexOfficeTheme> {
    try {
      return await postflexOfficeEditorThemes({
        editor,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and paginate UI themes.
   *
   * Retrieve a filtered, sorted, and paginated list of UI/Page Builder themes
   * stored in the FlexOffice system. The operation accesses the
   * flex_office_themes table which contains theming information represented by
   * theme names and CSS content.
   *
   * This PATCH endpoint accepts search criteria such as name filters and
   * supports pagination fields like page number and size. The response contains
   * a paginated collection of theme summary information optimizing data
   * transfer and UI rendering.
   *
   * Authorized users typically include Admins and Editors who can view, create,
   * and manage themes in the system. Users can utilize this operation to find
   * existing themes quickly and support UI customization workflows.
   *
   * The response contains only summary data rather than full theme details to
   * ensure efficiency.
   *
   * @param connection
   * @param body Filter and pagination parameters for searching themes
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async searchThemes(
    @EditorAuth()
    editor: EditorPayload,
    @TypedBody()
    body: IFlexOfficeTheme.IRequest,
  ): Promise<IPageIFlexOfficeTheme.ISummary> {
    try {
      return await patchflexOfficeEditorThemes({
        editor,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a UI theme by ID.
   *
   * Retrieve detailed information about a specific UI/Page Builder theme
   * identified by its unique ID. Themes store CSS content and metadata for
   * consistent UI appearance.
   *
   * This GET operation fetches all fields of the theme entity from the
   * flex_office_themes table in the database.
   *
   * Authorized users with Admin or Editor roles can access this endpoint to
   * view or manage theme details.
   *
   * If the ID is invalid or the theme does not exist, an appropriate HTTP error
   * response is returned.
   *
   * The request requires a single path parameter specifying the UUID of the
   * theme.
   *
   * @param connection
   * @param id Unique identifier of the UI theme
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async atTheme(
    @EditorAuth()
    editor: EditorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IFlexOfficeTheme> {
    try {
      return await getflexOfficeEditorThemesId({
        editor,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update details of a theme by ID in flex_office_themes.
   *
   * Update the details of a theme, including its name and CSS styles. This
   * operation modifies the theme record identified by the given id path
   * parameter. The request body allows changing the name, description, and CSS
   * properties of the theme.
   *
   * Security considerations: Only authorized roles can perform this update to
   * prevent unauthorized visual changes.
   *
   * Relationships: The theme is referenced by UI pages, so updates may affect
   * page appearances.
   *
   * Validation: The theme name must remain unique and the CSS content should be
   * valid CSS text.
   *
   * Related APIs:
   *
   * - GET /themes/{id} to retrieve theme details
   * - DELETE /themes/{id} to remove a theme
   *
   * Expected behavior: The updated theme record is returned with accurate
   * timestamps. Errors are raised if the theme id does not exist or on
   * validation failures.
   *
   * @param connection
   * @param id Unique identifier of the target theme
   * @param body Update data for the theme
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async updateTheme(
    @EditorAuth()
    editor: EditorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficeTheme.IUpdate,
  ): Promise<IFlexOfficeTheme> {
    try {
      return await putflexOfficeEditorThemesId({
        editor,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a theme by ID in flex_office_themes.
   *
   * Permanently delete a theme by its unique identifier. This operation removes
   * the theme record from the database completely.
   *
   * Security considerations: Only admins and editors can perform this delete to
   * avoid accidental loss.
   *
   * Relationship: The theme may be referenced by pages, so deletion should be
   * done carefully, ensuring no pages are broken.
   *
   * Validation: The theme id must exist; otherwise, an error is returned.
   *
   * Expected behavior: The theme is removed from the database and cannot be
   * recovered. No content is returned upon success.
   *
   * @param connection
   * @param id Unique identifier of the target theme
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async eraseTheme(
    @EditorAuth()
    editor: EditorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteflexOfficeEditorThemesId({
        editor,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
