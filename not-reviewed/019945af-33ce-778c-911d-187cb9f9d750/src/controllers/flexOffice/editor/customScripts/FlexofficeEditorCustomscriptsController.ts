import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postflexOfficeEditorCustomScripts } from "../../../../providers/postflexOfficeEditorCustomScripts";
import { EditorAuth } from "../../../../decorators/EditorAuth";
import { EditorPayload } from "../../../../decorators/payload/EditorPayload";
import { patchflexOfficeEditorCustomScripts } from "../../../../providers/patchflexOfficeEditorCustomScripts";
import { getflexOfficeEditorCustomScriptsId } from "../../../../providers/getflexOfficeEditorCustomScriptsId";
import { putflexOfficeEditorCustomScriptsId } from "../../../../providers/putflexOfficeEditorCustomScriptsId";
import { deleteflexOfficeEditorCustomScriptsId } from "../../../../providers/deleteflexOfficeEditorCustomScriptsId";

import { IFlexOfficeCustomScript } from "../../../../api/structures/IFlexOfficeCustomScript";
import { IPageIFlexOfficeCustomScript } from "../../../../api/structures/IPageIFlexOfficeCustomScript";
import { IFlexOfficeCustomScripts } from "../../../../api/structures/IFlexOfficeCustomScripts";

@Controller("/flexOffice/editor/customScripts")
export class FlexofficeEditorCustomscriptsController {
  /**
   * Create a new FlexOffice custom script record with required details: unique
   * code, name, language, optional description, and script content. Ensures
   * uniqueness and permissions check for admin/editor roles.
   *
   * On success, returns the full created entity including generated identifiers
   * and timestamps.
   *
   * Errors due to duplicate codes, validation failures, or unauthorized access
   * will be returned.
   *
   * @param connection
   * @param body Creation data for new custom script
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @EditorAuth()
    editor: EditorPayload,
    @TypedBody()
    body: IFlexOfficeCustomScript.ICreate,
  ): Promise<IFlexOfficeCustomScript> {
    try {
      return await postflexOfficeEditorCustomScripts({
        editor,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and list FlexOffice custom scripts with filtering, sorting, and
   * pagination.
   *
   * Retrieve a filtered, paginated list of FlexOffice custom scripts stored in
   * the flex_office_custom_scripts table. These scripts represent independent
   * programmable units written in JavaScript or Python, managed for extending
   * system functionality.
   *
   * This operation supports advanced search and filtering capabilities across
   * script codes, names, languages, and timestamps with full-text search
   * indexes enabling responsive queries.
   *
   * Security is enforced to allow only authenticated users with appropriate
   * roles (editor or admin). The API returns summaries of scripts optimized for
   * list views with pagination metadata.
   *
   * Related operations include single entity retrieval, creation, and updates
   * to manage scripts.
   *
   * Errors will be communicated with appropriate status codes for unauthorized
   * access or invalid filters.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for custom scripts
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @EditorAuth()
    editor: EditorPayload,
    @TypedBody()
    body: IFlexOfficeCustomScripts.IRequest,
  ): Promise<IPageIFlexOfficeCustomScript.ISummary> {
    try {
      return await patchflexOfficeEditorCustomScripts({
        editor,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get single FlexOffice custom script details by ID.
   *
   * Fetch a single FlexOffice custom script by its unique identifier from the
   * flex_office_custom_scripts table. The entity includes comprehensive
   * information such as business code, descriptive name, scripting language,
   * detailed description, and source content.
   *
   * Authorized users with roles 'admin' or 'editor' may access this information
   * securely. The retrieved script supports extension and customization use
   * cases.
   *
   * Errors including not found or unauthorized access are returned with proper
   * HTTP status codes.
   *
   * @param connection
   * @param id Unique identifier of the custom script
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @EditorAuth()
    editor: EditorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IFlexOfficeCustomScript> {
    try {
      return await getflexOfficeEditorCustomScriptsId({
        editor,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update FlexOffice custom script information by ID.
   *
   * Update an existing FlexOffice custom script by ID, modifying its name,
   * description, language, or source code. Only authorized users with admin or
   * editor roles can perform this operation.
   *
   * The request body must contain valid update data.
   *
   * Returns the updated full entity on success, with errors for not found,
   * validation failures, or unauthorized access.
   *
   * @param connection
   * @param id Unique identifier of the custom script to update
   * @param body Update data for the custom script
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @EditorAuth()
    editor: EditorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficeCustomScript.IUpdate,
  ): Promise<IFlexOfficeCustomScript> {
    try {
      return await putflexOfficeEditorCustomScriptsId({
        editor,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a custom script by ID.
   *
   * Deletes a custom script entity from the FlexOffice system. This endpoint
   * permanently removes the script data stored in the
   * flex_office_custom_scripts table, identified by the given custom script ID
   * (UUID).
   *
   * Only users with admin or editor roles can perform this operation. Upon
   * deletion, any version history or references to this script must be handled
   * by cascading deletions or service-level safeguards.
   *
   * This operation does not permit restoring the deleted script; it is a
   * permanent removal.
   *
   * Security considerations include verifying user permissions to avoid
   * unauthorized deletions.
   *
   * If the provided ID does not correspond to an existing script, the operation
   * will return a not found error.
   *
   * No request body is required. The response contains no body.
   *
   * It is related to other script management APIs such as script creation and
   * retrieval. Users should use script creation APIs to add new scripts after
   * deletion if needed.
   *
   * @param connection
   * @param id Unique identifier of the custom script to delete (UUID)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @EditorAuth()
    editor: EditorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteflexOfficeEditorCustomScriptsId({
        editor,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
