import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postflexOfficeEditorMarketplaceWidgetsWidgetIdInstallations } from "../../../../../providers/postflexOfficeEditorMarketplaceWidgetsWidgetIdInstallations";
import { EditorAuth } from "../../../../../decorators/EditorAuth";
import { EditorPayload } from "../../../../../decorators/payload/EditorPayload";
import { patchflexOfficeEditorMarketplaceWidgetsWidgetIdInstallations } from "../../../../../providers/patchflexOfficeEditorMarketplaceWidgetsWidgetIdInstallations";
import { getflexOfficeEditorMarketplaceWidgetsWidgetIdInstallationsInstallationId } from "../../../../../providers/getflexOfficeEditorMarketplaceWidgetsWidgetIdInstallationsInstallationId";
import { putflexOfficeEditorMarketplaceWidgetsWidgetIdInstallationsInstallationId } from "../../../../../providers/putflexOfficeEditorMarketplaceWidgetsWidgetIdInstallationsInstallationId";
import { deleteflexOfficeEditorMarketplaceWidgetsWidgetIdInstallationsInstallationId } from "../../../../../providers/deleteflexOfficeEditorMarketplaceWidgetsWidgetIdInstallationsInstallationId";

import { IFlexOfficeWidgetInstallation } from "../../../../../api/structures/IFlexOfficeWidgetInstallation";
import { IPageIFlexOfficeWidgetInstallation } from "../../../../../api/structures/IPageIFlexOfficeWidgetInstallation";

@Controller("/flexOffice/editor/marketplaceWidgets/:widgetId/installations")
export class FlexofficeEditorMarketplacewidgetsInstallationsController {
  /**
   * Create a new widget installation for a marketplace widget.
   *
   * Create a new installation of a marketplace widget on a FlexOffice UI page.
   * This operation requires providing the marketplace widget's unique
   * identifier (widgetId) via the URL path and the installation details in the
   * request body. The installation record includes references to the
   * marketplace widget ID, target UI page ID, installation date, and optional
   * configuration data.
   *
   * Security considerations: Only authenticated users with rights to modify
   * pages should invoke this operation. Input validation ensures the pageId
   * references an existing page.
   *
   * This operation acts on the flex_office_widget_installations table as
   * defined in the Prisma schema, including all relevant fields necessary to
   * manage widget installations. The server will perform cascading deletes if
   * the referenced marketplace widget or page is removed.
   *
   * Request failures due to invalid IDs or missing required fields will result
   * in appropriate error responses.
   *
   * @param connection
   * @param widgetId Target marketplace widget's unique identifier
   * @param body Installation details for the marketplace widget
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createInstallation(
    @EditorAuth()
    editor: EditorPayload,
    @TypedParam("widgetId")
    widgetId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficeWidgetInstallation.ICreate,
  ): Promise<IFlexOfficeWidgetInstallation> {
    try {
      return await postflexOfficeEditorMarketplaceWidgetsWidgetIdInstallations({
        editor,
        widgetId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List widget installations for a marketplace widget.
   *
   * Fetches a paginated list of UI page installations for a specific
   * marketplace widget by its UUID. Supports filtering and sorting via request
   * body parameters. Access allowed for admins and editors only. Returns
   * summarized install data paginated for client consumption.
   *
   * @param connection
   * @param widgetId Unique identifier of the marketplace widget whose
   *   installations to list
   * @param body Search and pagination parameters for widget installations
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexWidgetInstallations(
    @EditorAuth()
    editor: EditorPayload,
    @TypedParam("widgetId")
    widgetId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficeWidgetInstallation.IRequest,
  ): Promise<IPageIFlexOfficeWidgetInstallation.ISummary> {
    try {
      return await patchflexOfficeEditorMarketplaceWidgetsWidgetIdInstallations(
        {
          editor,
          widgetId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details of a widget installation.
   *
   * Retrieves detailed information of a specific widget installation identified
   * by the marketplace widget UUID and the installation UUID. For admin and
   * editor roles only. Returns all registration data including configuration,
   * installation timestamp, and soft deletion status if applicable.
   *
   * @param connection
   * @param widgetId Unique identifier of the marketplace widget
   * @param installationId Unique identifier of the widget installation
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":installationId")
  public async atWidgetInstallation(
    @EditorAuth()
    editor: EditorPayload,
    @TypedParam("widgetId")
    widgetId: string & tags.Format<"uuid">,
    @TypedParam("installationId")
    installationId: string & tags.Format<"uuid">,
  ): Promise<IFlexOfficeWidgetInstallation> {
    try {
      return await getflexOfficeEditorMarketplaceWidgetsWidgetIdInstallationsInstallationId(
        {
          editor,
          widgetId,
          installationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing widget installation.
   *
   * Update details of an existing widget installation for a marketplace widget.
   * The path parameters identify the widgetInstallation to update, while the
   * request body provides the updated fields such as configuration data or
   * installation date.
   *
   * Security considerations: Only authorized users with edit rights on the
   * associated pages can perform this operation.
   *
   * This operation affects the flex_office_widget_installations table, ensuring
   * strong consistency and validation against the referenced marketplace widget
   * and page IDs. Proper error handling delivers meaningful messages for
   * invalid or missing IDs.
   *
   * @param connection
   * @param widgetId Target marketplace widget's unique identifier
   * @param installationId Target widget installation's unique identifier
   * @param body Updated information for the widget installation
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":installationId")
  public async updateInstallation(
    @EditorAuth()
    editor: EditorPayload,
    @TypedParam("widgetId")
    widgetId: string & tags.Format<"uuid">,
    @TypedParam("installationId")
    installationId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficeWidgetInstallation.IUpdate,
  ): Promise<IFlexOfficeWidgetInstallation> {
    try {
      return await putflexOfficeEditorMarketplaceWidgetsWidgetIdInstallationsInstallationId(
        {
          editor,
          widgetId,
          installationId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a widget installation and disassociate a marketplace widget from a
   * UI page. The deletion is permanent and removes the record from the
   * database.
   *
   * Security considerations: Ensure only authorized users can delete
   * installations. The operation returns no content on success.
   *
   * Associated cascading effects happen if related widgets or pages are deleted
   * separately.
   *
   * @param connection
   * @param widgetId Target marketplace widget's unique identifier
   * @param installationId Target widget installation's unique identifier
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":installationId")
  public async eraseInstallation(
    @EditorAuth()
    editor: EditorPayload,
    @TypedParam("widgetId")
    widgetId: string & tags.Format<"uuid">,
    @TypedParam("installationId")
    installationId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteflexOfficeEditorMarketplaceWidgetsWidgetIdInstallationsInstallationId(
        {
          editor,
          widgetId,
          installationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
