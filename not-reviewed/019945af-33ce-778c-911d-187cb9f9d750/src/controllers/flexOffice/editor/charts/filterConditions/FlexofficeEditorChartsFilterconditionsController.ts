import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postflexOfficeEditorChartsChartIdFilterConditions } from "../../../../../providers/postflexOfficeEditorChartsChartIdFilterConditions";
import { EditorAuth } from "../../../../../decorators/EditorAuth";
import { EditorPayload } from "../../../../../decorators/payload/EditorPayload";
import { patchflexOfficeEditorChartsChartIdFilterConditions } from "../../../../../providers/patchflexOfficeEditorChartsChartIdFilterConditions";
import { getflexOfficeEditorChartsChartIdFilterConditionsFilterConditionId } from "../../../../../providers/getflexOfficeEditorChartsChartIdFilterConditionsFilterConditionId";
import { putflexOfficeEditorChartsChartIdFilterConditionsFilterConditionId } from "../../../../../providers/putflexOfficeEditorChartsChartIdFilterConditionsFilterConditionId";
import { deleteflexOfficeEditorChartsChartIdFilterConditionsFilterConditionId } from "../../../../../providers/deleteflexOfficeEditorChartsChartIdFilterConditionsFilterConditionId";

import { IFlexOfficeFilterCondition } from "../../../../../api/structures/IFlexOfficeFilterCondition";
import { IPageIFlexOfficeFilterCondition } from "../../../../../api/structures/IPageIFlexOfficeFilterCondition";

@Controller("/flexOffice/editor/charts/:chartId/filterConditions")
export class FlexofficeEditorChartsFilterconditionsController {
  /**
   * Create a new filter condition for a specific chart.
   *
   * Create a new filter condition linked to a specified chart. The client
   * provides the filter expression and other related data.
   *
   * Authorization ensures only users with admin or editor roles can create
   * filter conditions.
   *
   * Upon successful creation, the new filter condition entity is returned.
   *
   * Errors include validation failures or unauthorized access.
   *
   * This operation is critical when extending chart filtering capabilities
   * dynamically.
   *
   * @param connection
   * @param chartId Unique identifier of the target chart
   * @param body New filter condition data for creation
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @EditorAuth()
    editor: EditorPayload,
    @TypedParam("chartId")
    chartId: string,
    @TypedBody()
    body: IFlexOfficeFilterCondition.ICreate,
  ): Promise<IFlexOfficeFilterCondition> {
    try {
      return await postflexOfficeEditorChartsChartIdFilterConditions({
        editor,
        chartId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve filter conditions for a specific chart.
   *
   * Retrieve a list of filter conditions linked to a specific chart in the
   * system. This operation fetches all filter conditions, including their
   * expressions and enablement status, associated with the given chart
   * identifier.
   *
   * Security is enforced by requiring user authentication and role-based access
   * permissions to ensure only authorized users (e.g., admins, editors) can
   * query filter conditions.
   *
   * The response includes an array of filter condition summaries suitable for
   * use in UI lists or detailed configuration screens.
   *
   * This operation directly interfaces with the flex_office_filter_conditions
   * table, which defines filtering expressions for charts and optionally links
   * these conditions to widgets.
   *
   * Clients should use this endpoint before creating or updating conditions to
   * understand existing configurations and avoid duplicates or conflicts.
   *
   * Errors occur if the chart ID is invalid or access is unauthorized.
   * Pagination and sorting behavior can be enhanced via query parameters
   * supported by the IRequest request body.
   *
   * @param connection
   * @param chartId Unique identifier of the target chart
   * @param body Search criteria with pagination and filtering options for chart
   *   filter conditions
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @EditorAuth()
    editor: EditorPayload,
    @TypedParam("chartId")
    chartId: string,
    @TypedBody()
    body: IFlexOfficeFilterCondition.IRequest,
  ): Promise<IPageIFlexOfficeFilterCondition.ISummary> {
    try {
      return await patchflexOfficeEditorChartsChartIdFilterConditions({
        editor,
        chartId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve specific filter condition details by chart and condition ID.
   *
   * Fetch detailed information about a particular filter condition by its
   * unique identifier within the context of a specific chart.
   *
   * This endpoint enforces authorization to ensure that only allowed users such
   * as those with admin or editor roles can access the condition details.
   *
   * The response includes all defined properties of the filter condition,
   * including the filter expression and enablement flag.
   *
   * Clients use this operation to display or modify existing filter conditions.
   *
   * Errors may include invalid IDs or unauthorized access.
   *
   * @param connection
   * @param chartId Unique identifier of the target chart
   * @param filterConditionId Unique identifier of the target filter condition
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":filterConditionId")
  public async at(
    @EditorAuth()
    editor: EditorPayload,
    @TypedParam("chartId")
    chartId: string,
    @TypedParam("filterConditionId")
    filterConditionId: string,
  ): Promise<IFlexOfficeFilterCondition> {
    try {
      return await getflexOfficeEditorChartsChartIdFilterConditionsFilterConditionId(
        {
          editor,
          chartId,
          filterConditionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing filter condition for a specific chart.
   *
   * Update properties of an existing filter condition for a given chart. The
   * client supplies updated filter expression or enablement flag.
   *
   * The system validates that the user holds the appropriate role (admin or
   * editor) before permitting the update.
   *
   * Upon success, the updated filter condition data is returned.
   *
   * Errors occur on invalid ID references or failing permission checks.
   *
   * This API supports the workflow of maintaining and tuning existing chart
   * filters.
   *
   * @param connection
   * @param chartId Unique identifier of the target chart
   * @param filterConditionId Unique identifier of the target filter condition
   * @param body Filter condition update data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":filterConditionId")
  public async update(
    @EditorAuth()
    editor: EditorPayload,
    @TypedParam("chartId")
    chartId: string,
    @TypedParam("filterConditionId")
    filterConditionId: string,
    @TypedBody()
    body: IFlexOfficeFilterCondition.IUpdate,
  ): Promise<IFlexOfficeFilterCondition> {
    try {
      return await putflexOfficeEditorChartsChartIdFilterConditionsFilterConditionId(
        {
          editor,
          chartId,
          filterConditionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a specific filter condition of a chart in FlexOffice analytics.
   *
   * This DELETE endpoint permanently removes a filter condition from the system
   * associated with a specific chart. Filter conditions are defined expressions
   * that enable dynamic querying and data filtering on charts. Removing a
   * filter condition disables the corresponding filter effect on analytics
   * dashboards.
   *
   * Security considerations require that only authorized users can delete
   * filter conditions, ensuring data integrity.
   *
   * This operation acts on the 'flex_office_filter_conditions' table as per
   * Prisma schema, ensuring that all related references and constraints are
   * respected during deletion.
   *
   * Validation includes confirming the existence of the target filter condition
   * and proper cleanup of the database.
   *
   * No request body is needed for this DELETE operation, and no response body
   * is returned, indicating successful deletion by HTTP status code.
   *
   * This operation should be used when filter conditions are no longer relevant
   * or need to be permanently removed from analytics configurations.
   *
   * @param connection
   * @param chartId Target chart's unique identifier (UUID)
   * @param filterConditionId Target filter condition's unique identifier (UUID)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":filterConditionId")
  public async erase(
    @EditorAuth()
    editor: EditorPayload,
    @TypedParam("chartId")
    chartId: string & tags.Format<"uuid">,
    @TypedParam("filterConditionId")
    filterConditionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteflexOfficeEditorChartsChartIdFilterConditionsFilterConditionId(
        {
          editor,
          chartId,
          filterConditionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
