import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postflexOfficeEditorPageComments } from "../../../../providers/postflexOfficeEditorPageComments";
import { EditorAuth } from "../../../../decorators/EditorAuth";
import { EditorPayload } from "../../../../decorators/payload/EditorPayload";
import { putflexOfficeEditorPageCommentsPageCommentId } from "../../../../providers/putflexOfficeEditorPageCommentsPageCommentId";
import { deleteflexOfficeEditorPageCommentsPageCommentId } from "../../../../providers/deleteflexOfficeEditorPageCommentsPageCommentId";

import { IFlexOfficePageComment } from "../../../../api/structures/IFlexOfficePageComment";

@Controller("/flexOffice/editor/pageComments")
export class FlexofficeEditorPagecommentsController {
  /**
   * Create a new FlexOffice page comment.
   *
   * Create a new comment on a FlexOffice UI page. This operation allows
   * authorized users to add textual annotations associated with pages for
   * collaboration and editorial workflows.
   *
   * The payload must include the page ID, editor ID, and comment content. The
   * system records the creation timestamp automatically.
   *
   * Authorization checks ensure the user can comment on the specified page.
   *
   * This operation complements list and detail retrieval endpoints for
   * comments.
   *
   * @param connection
   * @param body Payload containing new comment details
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @EditorAuth()
    editor: EditorPayload,
    @TypedBody()
    body: IFlexOfficePageComment.ICreate,
  ): Promise<IFlexOfficePageComment> {
    try {
      return await postflexOfficeEditorPageComments({
        editor,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing FlexOffice page comment by ID.
   *
   * Update the content and properties of an existing FlexOffice page comment.
   * The comment is uniquely identified by its ID in the path parameter.
   *
   * The operation verifies user authorization to modify the comment.
   *
   * The request body includes fields for partial or full updates of comment
   * content.
   *
   * This supports collaborative editing and correction in UI interfaces.
   *
   * @param connection
   * @param pageCommentId Unique identifier of the target page comment
   * @param body Payload containing updated comment information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":pageCommentId")
  public async update(
    @EditorAuth()
    editor: EditorPayload,
    @TypedParam("pageCommentId")
    pageCommentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficePageComment.IUpdate,
  ): Promise<IFlexOfficePageComment> {
    try {
      return await putflexOfficeEditorPageCommentsPageCommentId({
        editor,
        pageCommentId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a FlexOffice page comment by its ID.
   *
   * This operation permanently deletes a page comment identified by its unique
   * ID from the flex_office_page_comments table in the Prisma schema. It
   * supports collaboration workflows by enabling authorized users to remove
   * inappropriate or obsolete comments associated with FlexOffice UI pages.
   *
   * Access is restricted to authorized roles such as admin, editor, or viewer
   * depending on permissions. The path parameter pageCommentId specifies the
   * target comment for deletion.
   *
   * No request body is required or accepted. This performs a hard delete and
   * the record will be unrecoverable.
   *
   * Related endpoints allow listing comments for a page, retrieving individual
   * comments, and creating new comments.
   *
   * Proper error handling includes validation of comment existence and
   * authorization verification before deletion.
   *
   * @param connection
   * @param pageCommentId Unique identifier of the page comment to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":pageCommentId")
  public async erase(
    @EditorAuth()
    editor: EditorPayload,
    @TypedParam("pageCommentId")
    pageCommentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteflexOfficeEditorPageCommentsPageCommentId({
        editor,
        pageCommentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
