import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { putflexOfficeEditorDataSourcesDataSourceIdCredentialsCredentialId } from "../../../../../providers/putflexOfficeEditorDataSourcesDataSourceIdCredentialsCredentialId";
import { EditorAuth } from "../../../../../decorators/EditorAuth";
import { EditorPayload } from "../../../../../decorators/payload/EditorPayload";
import { deleteflexOfficeEditorDataSourcesDataSourceIdCredentialsCredentialId } from "../../../../../providers/deleteflexOfficeEditorDataSourcesDataSourceIdCredentialsCredentialId";

import { IFlexOfficeDataSourceCredential } from "../../../../../api/structures/IFlexOfficeDataSourceCredential";

@Controller(
  "/flexOffice/editor/dataSources/:dataSourceId/credentials/:credentialId",
)
export class FlexofficeEditorDatasourcesCredentialsController {
  /**
   * Update credential details for a specific data source.
   *
   * Update a credential associated with a data source in the FlexOffice backend
   * system. This operation targets the flex_office_data_source_credentials
   * table, which stores authentication credentials like OAuth2 tokens or API
   * keys for external data sources.
   *
   * The update requires precise identification via the dataSourceId and
   * credentialId path parameters.
   *
   * Users with appropriate authorization can modify credential_type,
   * credential_value, and expires_at for improved security or credential
   * refresh. The system maintains audit timestamps created_at and updated_at
   * automatically.
   *
   * Security is critical as credentials grant access to external databases;
   * thus, strict validation and role-based access control apply. Errors for
   * invalid IDs or unauthorized attempts will be returned accordingly.
   *
   * Related operations include creating new credentials, deleting credentials,
   * and managing data sources themselves.
   *
   * @param connection
   * @param dataSourceId Unique identifier of the data source to which the
   *   credential belongs
   * @param credentialId Unique identifier of the credential to update
   * @param body Credential update payload containing type, value, and
   *   expiration
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async updateCredential(
    @EditorAuth()
    editor: EditorPayload,
    @TypedParam("dataSourceId")
    dataSourceId: string & tags.Format<"uuid">,
    @TypedParam("credentialId")
    credentialId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficeDataSourceCredential.IUpdate,
  ): Promise<IFlexOfficeDataSourceCredential> {
    try {
      return await putflexOfficeEditorDataSourcesDataSourceIdCredentialsCredentialId(
        {
          editor,
          dataSourceId,
          credentialId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Erase a credential from a data source permanently.
   *
   * Erase a credential for a given data source identified by dataSourceId and
   * credentialId. This operation deletes the credential record permanently from
   * the flex_office_data_source_credentials table.
   *
   * Due to the sensitive nature of credentials controlling access to external
   * data sources, this operation is restricted to authorized roles (admin,
   * editor).
   *
   * The operation ensures no residual data remains after deletion, supporting
   * security compliance.
   *
   * Related operations include creating and updating credentials and managing
   * data sources.
   *
   * @param connection
   * @param dataSourceId Unique identifier of the data source owning the
   *   credential
   * @param credentialId Unique identifier of the credential to erase
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async eraseCredential(
    @EditorAuth()
    editor: EditorPayload,
    @TypedParam("dataSourceId")
    dataSourceId: string & tags.Format<"uuid">,
    @TypedParam("credentialId")
    credentialId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteflexOfficeEditorDataSourcesDataSourceIdCredentialsCredentialId(
        {
          editor,
          dataSourceId,
          credentialId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
