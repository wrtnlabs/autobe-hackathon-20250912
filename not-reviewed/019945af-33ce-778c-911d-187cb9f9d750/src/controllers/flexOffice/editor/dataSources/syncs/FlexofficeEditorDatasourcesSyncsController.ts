import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postflexOfficeEditorDataSourcesDataSourceIdSyncs } from "../../../../../providers/postflexOfficeEditorDataSourcesDataSourceIdSyncs";
import { EditorAuth } from "../../../../../decorators/EditorAuth";
import { EditorPayload } from "../../../../../decorators/payload/EditorPayload";
import { patchflexOfficeEditorDataSourcesDataSourceIdSyncs } from "../../../../../providers/patchflexOfficeEditorDataSourcesDataSourceIdSyncs";
import { getflexOfficeEditorDataSourcesDataSourceIdSyncsSyncId } from "../../../../../providers/getflexOfficeEditorDataSourcesDataSourceIdSyncsSyncId";

import { IFlexOfficeDataSourceSync } from "../../../../../api/structures/IFlexOfficeDataSourceSync";
import { IPageIFlexOfficeDataSourceSync } from "../../../../../api/structures/IPageIFlexOfficeDataSourceSync";

@Controller("/flexOffice/editor/dataSources/:dataSourceId/syncs")
export class FlexofficeEditorDatasourcesSyncsController {
  /**
   * Create a new synchronization task for a specified data source.
   *
   * This API operation creates a new synchronization attempt record linked to
   * an existing data source in the system. It enables authorized users to
   * trigger or schedule a new sync job for updating data from external sources
   * like MySQL, PostgreSQL databases or uploaded spreadsheets.
   *
   * The 'dataSourceId' path parameter identifies the exact external data source
   * to be synchronized. The operation verifies that the provided dataSourceId
   * references an active and valid data source record.
   *
   * Upon invocation, a new flex_office_data_source_syncs record is created with
   * initial scheduling and status fields setup to mark a scheduled sync. The
   * system will later update this record with actual run timestamps, completion
   * status, and errors if any.
   *
   * Security considerations restrict this operation to authorized roles able to
   * manage synchronization tasks. Permissions ensure users only trigger syncs
   * for data sources they are permitted to access.
   *
   * Related operations include querying sync job histories, updating sync
   * records, and deleting obsolete sync tasks, which help manage data refresh
   * workflows comprehensively.
   *
   * Client applications should handle potential errors such as invalid
   * dataSourceId, permission denials, or system failures gracefully.
   *
   * This operation does not require a request body beyond the path parameter
   * and returns the newly created sync record on success.
   *
   * @param connection
   * @param dataSourceId Unique identifier of the external data source
   * @param body Information to create a new sync task
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createSync(
    @EditorAuth()
    editor: EditorPayload,
    @TypedParam("dataSourceId")
    dataSourceId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficeDataSourceSync.ICreate,
  ): Promise<IFlexOfficeDataSourceSync> {
    try {
      return await postflexOfficeEditorDataSourcesDataSourceIdSyncs({
        editor,
        dataSourceId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve paginated sync operation records for a data source.
   *
   * Search synchronization operations of a particular data source identified by
   * dataSourceId. Supports advanced filters, pagination, and sorting to
   * navigate sync history and status.
   *
   * This operation facilitates monitoring and management of data refresh jobs,
   * enabling display of sync scheduling, completion status, errors, and
   * timing.
   *
   * Role-based access ensures only authorized users can review synchronization
   * logs for secure operations.
   *
   * Related operations include retrieving specific sync details and managing
   * data source configurations.
   *
   * @param connection
   * @param dataSourceId Unique identifier of the target data source
   * @param body Search filters and pagination info for data source syncs
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async searchSyncs(
    @EditorAuth()
    editor: EditorPayload,
    @TypedParam("dataSourceId")
    dataSourceId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficeDataSourceSync.IRequest,
  ): Promise<IPageIFlexOfficeDataSourceSync> {
    try {
      return await patchflexOfficeEditorDataSourcesDataSourceIdSyncs({
        editor,
        dataSourceId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed synchronization status by ID for a data source.
   *
   * Get detailed synchronization information by syncId for data source
   * identified by dataSourceId. Provides status, timing, error message details
   * of sync operation.
   *
   * Ensures authorized access control and accurate identification with
   * composite primary keys.
   *
   * Related operations include searching sync logs and managing data sources.
   *
   * @param connection
   * @param dataSourceId Unique identifier of the data source containing the
   *   sync record
   * @param syncId Unique identifier of the synchronization record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":syncId")
  public async atSync(
    @EditorAuth()
    editor: EditorPayload,
    @TypedParam("dataSourceId")
    dataSourceId: string & tags.Format<"uuid">,
    @TypedParam("syncId")
    syncId: string & tags.Format<"uuid">,
  ): Promise<IFlexOfficeDataSourceSync> {
    try {
      return await getflexOfficeEditorDataSourcesDataSourceIdSyncsSyncId({
        editor,
        dataSourceId,
        syncId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
