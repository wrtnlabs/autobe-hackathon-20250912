import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postflexOfficeEditorDataSources } from "../../../../providers/postflexOfficeEditorDataSources";
import { EditorAuth } from "../../../../decorators/EditorAuth";
import { EditorPayload } from "../../../../decorators/payload/EditorPayload";
import { patchflexOfficeEditorDataSources } from "../../../../providers/patchflexOfficeEditorDataSources";
import { getflexOfficeEditorDataSourcesDataSourceId } from "../../../../providers/getflexOfficeEditorDataSourcesDataSourceId";
import { putflexOfficeEditorDataSourcesDataSourceId } from "../../../../providers/putflexOfficeEditorDataSourcesDataSourceId";

import { IFlexOfficeDataSource } from "../../../../api/structures/IFlexOfficeDataSource";
import { IPageIFlexOfficeDataSource } from "../../../../api/structures/IPageIFlexOfficeDataSource";

@Controller("/flexOffice/editor/dataSources")
export class FlexofficeEditorDatasourcesController {
  /**
   * Create a new data source configuration.
   *
   * Create a new external data source configuration, supporting types like
   * MySQL, PostgreSQL, Google Sheets, and Excel.
   *
   * The input includes connection information and activation flag. Proper
   * validation of input data is expected.
   *
   * The operation returns the newly created data source record with all
   * properties as stored in the database.
   *
   * Only authorized roles can perform creation to ensure system integrity.
   *
   * Corresponds to the flex_office_data_sources Prisma schema table.
   *
   * @param connection
   * @param body Data source creation input data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @EditorAuth()
    editor: EditorPayload,
    @TypedBody()
    body: IFlexOfficeDataSource.ICreate,
  ): Promise<IFlexOfficeDataSource> {
    try {
      return await postflexOfficeEditorDataSources({
        editor,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a list of data sources with filtering and pagination
   * support.
   *
   * Retrieve a filtered, paginated list of external data sources registered in
   * the system. This includes databases, Google Sheets, Excel uploads, and
   * other supported types.
   *
   * Clients can specify search terms, filter by data source type (e.g., mysql,
   * postgresql, google_sheet, excel), and limit results by active status.
   * Pagination parameters allow controlling page size and the specific page.
   *
   * Security policies restrict this operation to authorized users with the
   * appropriate role.
   *
   * The operation returns summary information optimized for listing including
   * id, name, type, and active status.
   *
   * This operation corresponds directly to the flex_office_data_sources table
   * as defined in the Prisma schema.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for data source
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @EditorAuth()
    editor: EditorPayload,
    @TypedBody()
    body: IFlexOfficeDataSource.IRequest,
  ): Promise<IPageIFlexOfficeDataSource.ISummary> {
    try {
      return await patchflexOfficeEditorDataSources({
        editor,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed data source information by ID.
   *
   * Get detailed information of an external data source by its unique
   * identifier. The data source can be of type MySQL, PostgreSQL, Google
   * Sheets, Excel, etc.
   *
   * The operation retrieves full configuration details, connection credentials
   * reference, activation status, and audit data.
   *
   * This API ensures that only authorized users can access sensitive data
   * source configurations.
   *
   * Relationship exists with data source syncs, credentials, and external
   * sheets enumerated separately.
   *
   * Returns the full data source record from the flex_office_data_sources
   * table, matching the Prisma schema structure.
   *
   * @param connection
   * @param dataSourceId Unique identifier of the target data source
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":dataSourceId")
  public async at(
    @EditorAuth()
    editor: EditorPayload,
    @TypedParam("dataSourceId")
    dataSourceId: string & tags.Format<"uuid">,
  ): Promise<IFlexOfficeDataSource> {
    try {
      return await getflexOfficeEditorDataSourcesDataSourceId({
        editor,
        dataSourceId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing data source configuration.
   *
   * Update an existing data source's configuration given its unique identifier.
   *
   * The input body includes editable fields. The record is updated accordingly.
   *
   * The operation returns the updated data source object.
   *
   * Authorization restricted to admin and editor roles for security reasons.
   *
   * Matches the Prisma schema structure for flex_office_data_sources updates.
   *
   * @param connection
   * @param dataSourceId Unique identifier of the data source to update
   * @param body Data source update input data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":dataSourceId")
  public async update(
    @EditorAuth()
    editor: EditorPayload,
    @TypedParam("dataSourceId")
    dataSourceId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficeDataSource.IUpdate,
  ): Promise<IFlexOfficeDataSource> {
    try {
      return await putflexOfficeEditorDataSourcesDataSourceId({
        editor,
        dataSourceId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
