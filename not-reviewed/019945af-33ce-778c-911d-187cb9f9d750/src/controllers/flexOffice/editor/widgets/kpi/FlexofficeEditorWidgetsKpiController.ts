import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postflexOfficeEditorWidgetsKpi } from "../../../../../providers/postflexOfficeEditorWidgetsKpi";
import { EditorAuth } from "../../../../../decorators/EditorAuth";
import { EditorPayload } from "../../../../../decorators/payload/EditorPayload";
import { patchflexOfficeEditorWidgetsKpi } from "../../../../../providers/patchflexOfficeEditorWidgetsKpi";
import { getflexOfficeEditorWidgetsKpiKpiWidgetId } from "../../../../../providers/getflexOfficeEditorWidgetsKpiKpiWidgetId";
import { putflexOfficeEditorWidgetsKpiKpiWidgetId } from "../../../../../providers/putflexOfficeEditorWidgetsKpiKpiWidgetId";
import { deleteflexOfficeEditorWidgetsKpiKpiWidgetId } from "../../../../../providers/deleteflexOfficeEditorWidgetsKpiKpiWidgetId";

import { IFlexOfficeKpiWidget } from "../../../../../api/structures/IFlexOfficeKpiWidget";
import { IPageIFlexOfficeWidgetKpi } from "../../../../../api/structures/IPageIFlexOfficeWidgetKpi";
import { IFlexOfficeWidgetKpi } from "../../../../../api/structures/IFlexOfficeWidgetKpi";

@Controller("/flexOffice/editor/widgets/kpi")
export class FlexofficeEditorWidgetsKpiController {
  /**
   * Create a KPI widget.
   *
   * Create a new KPI widget by providing configuration JSON and metadata.
   *
   * Security: Restricted to users with 'admin' or 'editor' roles.
   *
   * Business logic: Configuration JSON must be well-formed and comply with
   * business rules for KPI widgets.
   *
   * The operation returns the created KPI widget details.
   *
   * Part of CRUD for KPI management along with get, update, and delete
   * endpoints.
   *
   * Appropriate error code returned for malformed requests or insufficient
   * permissions.
   *
   * @param connection
   * @param body Creation data for KPI widget
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @EditorAuth()
    editor: EditorPayload,
    @TypedBody()
    body: IFlexOfficeKpiWidget.ICreate,
  ): Promise<IFlexOfficeKpiWidget> {
    try {
      return await postflexOfficeEditorWidgetsKpi({
        editor,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List and search KPI widgets with pagination.
   *
   * This API endpoint allows authorized users in roles admin, editor, or viewer
   * to retrieve KPI widget data in a paginated, filtered, and sorted fashion.
   * KPI widgets provide key performance indicator metrics linked to UI widgets.
   * The request body allows specification of search criteria, filters on widget
   * IDs, configuration parameters, and pagination controls.
   *
   * Security restrictions ensure that only authorized roles can access these
   * details. The response provides structured paginated results including KPI
   * widget summaries enabling clients to display metric overviews efficiently.
   *
   * This operation complements CRUD operations on KPI widgets and supports
   * frontend performance and usability needs.
   *
   * @param connection
   * @param body Search, filter, and pagination criteria for KPI widgets
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @EditorAuth()
    editor: EditorPayload,
    @TypedBody()
    body: IFlexOfficeWidgetKpi.IRequest,
  ): Promise<IPageIFlexOfficeWidgetKpi.ISummary> {
    try {
      return await patchflexOfficeEditorWidgetsKpi({
        editor,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information on a specific KPI widget.
   *
   * Retrieve detailed information of a KPI widget identified by kpiWidgetId.
   * This includes configuration JSON, creation and update timestamps, and soft
   * delete status.
   *
   * Security considerations: Access restricted to users with 'admin' or
   * 'editor' roles. Unauthorized access attempts are denied.
   *
   * This operation maps to the flex_office_kpi_widgets table in the Prisma
   * schema.
   *
   * Validation: kpiWidgetId must be a valid UUID.
   *
   * Related CRUD operations: POST to create, PUT to update, and DELETE to soft
   * delete KPI widgets.
   *
   * Proper error handling must respond to invalid IDs or access violations.
   *
   * @param connection
   * @param kpiWidgetId Unique identifier of the target KPI widget
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":kpiWidgetId")
  public async at(
    @EditorAuth()
    editor: EditorPayload,
    @TypedParam("kpiWidgetId")
    kpiWidgetId: string & tags.Format<"uuid">,
  ): Promise<IFlexOfficeKpiWidget> {
    try {
      return await getflexOfficeEditorWidgetsKpiKpiWidgetId({
        editor,
        kpiWidgetId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing KPI widget.
   *
   * Update a KPI widget with new configuration and metadata.
   *
   * Security: Access restricted to users with 'admin' or 'editor' roles.
   *
   * Validation: kpiWidgetId must be a valid UUID and exist in the database.
   *
   * Payload must conform to the IFlexOfficeKpiWidget.IUpdate schema.
   *
   * This operation complements the create, retrieve, and delete operations for
   * KPI widgets.
   *
   * Errors returned for invalid IDs, malformed input, or insufficient
   * permissions.
   *
   * @param connection
   * @param kpiWidgetId Unique identifier of the KPI widget to update
   * @param body New data for KPI widget update
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":kpiWidgetId")
  public async update(
    @EditorAuth()
    editor: EditorPayload,
    @TypedParam("kpiWidgetId")
    kpiWidgetId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficeKpiWidget.IUpdate,
  ): Promise<IFlexOfficeKpiWidget> {
    try {
      return await putflexOfficeEditorWidgetsKpiKpiWidgetId({
        editor,
        kpiWidgetId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete of a KPI widget.
   *
   * Soft delete a KPI widget identified by kpiWidgetId.
   *
   * Security: Only users with 'admin' or 'editor' roles may execute this
   * operation.
   *
   * This action sets the deleted_at timestamp to mark the KPI widget as
   * deleted.
   *
   * No response body is returned; success indicated via HTTP status.
   *
   * Error handling includes invalid UUIDs and authorization failures.
   *
   * Relates to create, read, and update API endpoints for KPI widgets.
   *
   * @param connection
   * @param kpiWidgetId Unique identifier of the KPI widget to be deleted
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":kpiWidgetId")
  public async erase(
    @EditorAuth()
    editor: EditorPayload,
    @TypedParam("kpiWidgetId")
    kpiWidgetId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteflexOfficeEditorWidgetsKpiKpiWidgetId({
        editor,
        kpiWidgetId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
