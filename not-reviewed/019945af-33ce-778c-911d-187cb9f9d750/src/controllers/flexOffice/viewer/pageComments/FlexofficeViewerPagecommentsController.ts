import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchflexOfficeViewerPageComments } from "../../../../providers/patchflexOfficeViewerPageComments";
import { ViewerAuth } from "../../../../decorators/ViewerAuth";
import { ViewerPayload } from "../../../../decorators/payload/ViewerPayload";
import { getflexOfficeViewerPageCommentsPageCommentId } from "../../../../providers/getflexOfficeViewerPageCommentsPageCommentId";
import { deleteflexOfficeViewerPageCommentsPageCommentId } from "../../../../providers/deleteflexOfficeViewerPageCommentsPageCommentId";

import { IPageIFlexOfficePageComment } from "../../../../api/structures/IPageIFlexOfficePageComment";
import { IFlexOfficePageComment } from "../../../../api/structures/IFlexOfficePageComment";

@Controller("/flexOffice/viewer/pageComments")
export class FlexofficeViewerPagecommentsController {
  /**
   * Search and retrieve a paginated list of FlexOffice page comments.
   *
   * Retrieve a filtered, paginated list of page comments from the FlexOffice
   * system. This operation accesses the flex_office_page_comments table and
   * supports filtering by page, editor, content keyword, and creation date.
   *
   * Security and authorization ensure that only authorized users with
   * permission to view comments can retrieve this list.
   *
   * The response provides a summary of page comments optimized for list views,
   * including comment content previews and metadata.
   *
   * This operation integrates with other endpoints for detailed comment
   * retrieval and comment management.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for filtering page
   *   comments
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ViewerAuth()
    viewer: ViewerPayload,
    @TypedBody()
    body: IFlexOfficePageComment.IRequest,
  ): Promise<IPageIFlexOfficePageComment.ISummary> {
    try {
      return await patchflexOfficeViewerPageComments({
        viewer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed FlexOffice page comment information by ID.
   *
   * Retrieve detailed information about a FlexOffice page comment specified by
   * its unique ID. This operation fetches the full comment content, creation
   * and update timestamps, and relationships to the editor and page.
   *
   * Security ensures that only users authorized to view the comment can access
   * this detail.
   *
   * The operation facilitates comment management and display in user
   * interfaces.
   *
   * It complements the list retrieval and comment modification endpoints.
   *
   * @param connection
   * @param pageCommentId Unique identifier of the target page comment
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":pageCommentId")
  public async at(
    @ViewerAuth()
    viewer: ViewerPayload,
    @TypedParam("pageCommentId")
    pageCommentId: string & tags.Format<"uuid">,
  ): Promise<IFlexOfficePageComment> {
    try {
      return await getflexOfficeViewerPageCommentsPageCommentId({
        viewer,
        pageCommentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a FlexOffice page comment by its ID.
   *
   * This operation permanently deletes a page comment identified by its unique
   * ID from the flex_office_page_comments table in the Prisma schema. It
   * supports collaboration workflows by enabling authorized users to remove
   * inappropriate or obsolete comments associated with FlexOffice UI pages.
   *
   * Access is restricted to authorized roles such as admin, editor, or viewer
   * depending on permissions. The path parameter pageCommentId specifies the
   * target comment for deletion.
   *
   * No request body is required or accepted. This performs a hard delete and
   * the record will be unrecoverable.
   *
   * Related endpoints allow listing comments for a page, retrieving individual
   * comments, and creating new comments.
   *
   * Proper error handling includes validation of comment existence and
   * authorization verification before deletion.
   *
   * @param connection
   * @param pageCommentId Unique identifier of the page comment to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":pageCommentId")
  public async erase(
    @ViewerAuth()
    viewer: ViewerPayload,
    @TypedParam("pageCommentId")
    pageCommentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteflexOfficeViewerPageCommentsPageCommentId({
        viewer,
        pageCommentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
