import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getflexOfficeViewerDataSourcesDataSourceIdExternalSheetsSheetId } from "../../../../../providers/getflexOfficeViewerDataSourcesDataSourceIdExternalSheetsSheetId";
import { ViewerAuth } from "../../../../../decorators/ViewerAuth";
import { ViewerPayload } from "../../../../../decorators/payload/ViewerPayload";

import { IFlexOfficeExternalSheet } from "../../../../../api/structures/IFlexOfficeExternalSheet";

@Controller(
  "/flexOffice/viewer/dataSources/:dataSourceId/externalSheets/:sheetId",
)
export class FlexofficeViewerDatasourcesExternalsheetsController {
  /**
   * Retrieve metadata of a specific external sheet linked to a data source.
   *
   * Retrieve detailed metadata for an external sheet associated with the
   * specified data source. This operation is intended for authorized users who
   * need to view file information including the sheet count and last
   * synchronization times.
   *
   * Access control restricts this operation to users with the appropriate
   * permissions (admin, editor, or viewer) as defined by the system's
   * role-based access controls. The operation references the
   * 'flex_office_external_sheets' Prisma schema table ensuring data
   * consistency.
   *
   * Invalid or missing IDs will cause appropriate error responses. The API is
   * designed to work congruently with create, update, and delete operations for
   * full lifecycle management of external sheets.
   *
   * @param connection
   * @param dataSourceId Unique identifier of the target data source
   * @param sheetId Unique identifier of the target external sheet
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @ViewerAuth()
    viewer: ViewerPayload,
    @TypedParam("dataSourceId")
    dataSourceId: string & tags.Format<"uuid">,
    @TypedParam("sheetId")
    sheetId: string & tags.Format<"uuid">,
  ): Promise<IFlexOfficeExternalSheet> {
    try {
      return await getflexOfficeViewerDataSourcesDataSourceIdExternalSheetsSheetId(
        {
          viewer,
          dataSourceId,
          sheetId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
