import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { patchflexOfficeViewerWidgetsKpi } from "../../../../../providers/patchflexOfficeViewerWidgetsKpi";
import { ViewerAuth } from "../../../../../decorators/ViewerAuth";
import { ViewerPayload } from "../../../../../decorators/payload/ViewerPayload";

import { IPageIFlexOfficeWidgetKpi } from "../../../../../api/structures/IPageIFlexOfficeWidgetKpi";
import { IFlexOfficeWidgetKpi } from "../../../../../api/structures/IFlexOfficeWidgetKpi";

@Controller("/flexOffice/viewer/widgets/kpi")
export class FlexofficeViewerWidgetsKpiController {
  /**
   * List and search KPI widgets with pagination.
   *
   * This API endpoint allows authorized users in roles admin, editor, or viewer
   * to retrieve KPI widget data in a paginated, filtered, and sorted fashion.
   * KPI widgets provide key performance indicator metrics linked to UI widgets.
   * The request body allows specification of search criteria, filters on widget
   * IDs, configuration parameters, and pagination controls.
   *
   * Security restrictions ensure that only authorized roles can access these
   * details. The response provides structured paginated results including KPI
   * widget summaries enabling clients to display metric overviews efficiently.
   *
   * This operation complements CRUD operations on KPI widgets and supports
   * frontend performance and usability needs.
   *
   * @param connection
   * @param body Search, filter, and pagination criteria for KPI widgets
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ViewerAuth()
    viewer: ViewerPayload,
    @TypedBody()
    body: IFlexOfficeWidgetKpi.IRequest,
  ): Promise<IPageIFlexOfficeWidgetKpi.ISummary> {
    try {
      return await patchflexOfficeViewerWidgetsKpi({
        viewer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
