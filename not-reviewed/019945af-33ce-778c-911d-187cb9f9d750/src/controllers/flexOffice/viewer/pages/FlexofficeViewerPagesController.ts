import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchflexOfficeViewerPages } from "../../../../providers/patchflexOfficeViewerPages";
import { ViewerAuth } from "../../../../decorators/ViewerAuth";
import { ViewerPayload } from "../../../../decorators/payload/ViewerPayload";
import { getflexOfficeViewerPagesPageId } from "../../../../providers/getflexOfficeViewerPagesPageId";

import { IPageIFlexOfficePage } from "../../../../api/structures/IPageIFlexOfficePage";
import { IFlexOfficePage } from "../../../../api/structures/IFlexOfficePage";

@Controller("/flexOffice/viewer/pages")
export class FlexofficeViewerPagesController {
  /**
   * Search and list UI pages with filtering and pagination.
   *
   * Retrieve a paginated list of UI pages with advanced filtering and searching
   * capabilities. Users can filter pages by name, status, theme, and other
   * attributes.
   *
   * This operation queries the flex_office_pages table, returning summaries
   * suitable for displaying in lists.
   *
   * Security measures ensure users only retrieve pages they have permission to
   * view, respecting soft deletion status.
   *
   * Pagination and sorting options allow customized result sets.
   *
   * This powerful search endpoint supports complex query criteria in the
   * request body.
   *
   * Typical use case includes displaying the pages directory with filters
   * applied.
   *
   * @param connection
   * @param body Search criteria and pagination params for pages
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async searchPages(
    @ViewerAuth()
    viewer: ViewerPayload,
    @TypedBody()
    body: IFlexOfficePage.IRequest,
  ): Promise<IPageIFlexOfficePage.ISummary> {
    try {
      return await patchflexOfficeViewerPages({
        viewer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed UI page information by ID.
   *
   * Retrieve detailed information of a UI page by its ID. The response includes
   * all page properties such as name, description, status, theme association,
   * and timestamps.
   *
   * The flex_office_pages table supports soft deletion, and deleted pages are
   * not retrievable.
   *
   * Users must be authorized to access page details, failing which a 403 error
   * is returned.
   *
   * This endpoint supports page editing and viewing in the UI/Page Builder.
   *
   * Accurate page data is essential for client rendering and manipulation.
   *
   * The pageId parameter is required in the path and must be a valid UUID.
   *
   * Errors returned may include 404 if the page is not found or is deleted.
   *
   * @param connection
   * @param pageId Target UI page unique ID
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":pageId")
  public async getPage(
    @ViewerAuth()
    viewer: ViewerPayload,
    @TypedParam("pageId")
    pageId: string & tags.Format<"uuid">,
  ): Promise<IFlexOfficePage> {
    try {
      return await getflexOfficeViewerPagesPageId({
        viewer,
        pageId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
