import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getflexOfficeViewerPagesPageIdWidgetsWidgetId } from "../../../../../providers/getflexOfficeViewerPagesPageIdWidgetsWidgetId";
import { ViewerAuth } from "../../../../../decorators/ViewerAuth";
import { ViewerPayload } from "../../../../../decorators/payload/ViewerPayload";

import { IFlexOfficeWidget } from "../../../../../api/structures/IFlexOfficeWidget";

@Controller("/flexOffice/viewer/pages/:pageId/widgets/:widgetId")
export class FlexofficeViewerPagesWidgetsController {
  /**
   * Get details of a specific widget by pageId and widgetId.
   *
   * Retrieve detailed information about a specific widget associated with a
   * given UI page. This operation fetches data from the 'flex_office_widgets'
   * table, which stores widget characteristics including type, name, and
   * configuration details.
   *
   * Users accessing this endpoint must be authenticated and authorized as
   * admins, editors, or viewers to ensure appropriate access control.
   *
   * The response includes all persistent fields of the widget, such as
   * timestamps and soft-deletion status, providing comprehensive insight into
   * the widget's current configuration and state.
   *
   * Typical error responses include not found if the widget or page does not
   * exist, or unauthorized access if the user lacks sufficient permissions.
   *
   * This operation integrates with the UI/Page Builder frontend to support
   * widget editing and display workflows.
   *
   * @param connection
   * @param pageId Unique identifier of the target page
   * @param widgetId Unique identifier of the target widget
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @ViewerAuth()
    viewer: ViewerPayload,
    @TypedParam("pageId")
    pageId: string & tags.Format<"uuid">,
    @TypedParam("widgetId")
    widgetId: string & tags.Format<"uuid">,
  ): Promise<IFlexOfficeWidget> {
    try {
      return await getflexOfficeViewerPagesPageIdWidgetsWidgetId({
        viewer,
        pageId,
        widgetId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
