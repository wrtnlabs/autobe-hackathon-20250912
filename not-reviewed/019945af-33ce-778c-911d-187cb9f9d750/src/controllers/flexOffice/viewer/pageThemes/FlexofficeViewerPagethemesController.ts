import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchflexOfficeViewerPageThemes } from "../../../../providers/patchflexOfficeViewerPageThemes";
import { ViewerAuth } from "../../../../decorators/ViewerAuth";
import { ViewerPayload } from "../../../../decorators/payload/ViewerPayload";
import { getflexOfficeViewerPageThemesPageThemeId } from "../../../../providers/getflexOfficeViewerPageThemesPageThemeId";

import { IPageIFlexOfficePageTheme } from "../../../../api/structures/IPageIFlexOfficePageTheme";
import { IFlexOfficePageTheme } from "../../../../api/structures/IFlexOfficePageTheme";

@Controller("/flexOffice/viewer/pageThemes")
export class FlexofficeViewerPagethemesController {
  /**
   * Search and retrieve a filtered, paginated list of UI page themes.
   *
   * Retrieve a filtered and paginated list of FlexOffice UI page themes from
   * the system database. This operation facilitates clients in querying
   * available themes with flexible filters on name, creation date, and update
   * timestamps.
   *
   * Security considerations include that this endpoint is typically accessible
   * by authenticated users with read permissions. No sensitive information is
   * exposed. The response returns essential theme details optimized for display
   * in selection lists.
   *
   * The operation integrates directly with the flex_office_page_themes Prisma
   * table, referencing fields such as id, name, description, created_at, and
   * updated_at. Pagination parameters like page number and size control the
   * response size.
   *
   * It is expected that this operation supports sorting and search filtering to
   * enable user-friendly theme discovery. Errors include invalid query
   * parameters or server failures which will be properly handled with standard
   * HTTP error codes.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for theme filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ViewerAuth()
    viewer: ViewerPayload,
    @TypedBody()
    body: IFlexOfficePageTheme.IRequest,
  ): Promise<IPageIFlexOfficePageTheme.ISummary> {
    try {
      return await patchflexOfficeViewerPageThemes({
        viewer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information of a UI page theme by ID.
   *
   * Retrieve detailed information about a specific FlexOffice UI page theme
   * identified by the pageThemeId path parameter. This includes theme name,
   * description, CSS content, and audit timestamps.
   *
   * Security considerations limit access to authorized users. This operation
   * supports read access for admins, editors, and viewers with appropriate
   * permissions.
   *
   * The operation queries the flex_office_page_themes table for the theme
   * matching the given UUID. It returns a complete representation of the theme
   * entity.
   *
   * Errors include invalid UUID format or theme not found. Proper HTTP error
   * codes are used to communicate such failures.
   *
   * @param connection
   * @param pageThemeId Unique identifier for the target page theme
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":pageThemeId")
  public async at(
    @ViewerAuth()
    viewer: ViewerPayload,
    @TypedParam("pageThemeId")
    pageThemeId: string & tags.Format<"uuid">,
  ): Promise<IFlexOfficePageTheme> {
    try {
      return await getflexOfficeViewerPageThemesPageThemeId({
        viewer,
        pageThemeId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
