import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { putflexOfficeViewerViewersViewerId } from "../../../../providers/putflexOfficeViewerViewersViewerId";
import { ViewerAuth } from "../../../../decorators/ViewerAuth";
import { ViewerPayload } from "../../../../decorators/payload/ViewerPayload";
import { deleteflexOfficeViewerViewersViewerId } from "../../../../providers/deleteflexOfficeViewerViewersViewerId";

import { IFlexOfficeViewer } from "../../../../api/structures/IFlexOfficeViewer";

@Controller("/flexOffice/viewer/viewers/:viewerId")
export class FlexofficeViewerViewersController {
  /**
   * Update a specific FlexOffice viewer user.
   *
   * Update a viewer user identified by their unique ID in the FlexOffice
   * system. This operation modifies the viewer's personal details such as name,
   * email address, and password hash. Only users authorized with appropriate
   * permissions can perform this update.
   *
   * The flex_office_viewers table is used as the data source and includes soft
   * deletion support through the deleted_at timestamp, but updating this field
   * is managed internally and excluded from user modification.
   *
   * Security considerations include verifying the authenticated user's rights
   * to update viewer information. On successful update, the new viewer details
   * are returned.
   *
   * Expected errors include 404 if the viewer does not exist and 403 if the
   * user lacks update permissions.
   *
   * Note: This operation performs a full update based on the provided data in
   * IFlexOfficeViewer.IUpdate message format.
   *
   * @param connection
   * @param viewerId Target viewer's unique ID
   * @param body Updated viewer information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async updateViewer(
    @ViewerAuth()
    viewer: ViewerPayload,
    @TypedParam("viewerId")
    viewerId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficeViewer.IUpdate,
  ): Promise<IFlexOfficeViewer> {
    try {
      return await putflexOfficeViewerViewersViewerId({
        viewer,
        viewerId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a FlexOffice viewer user by ID.
   *
   * Perform a soft delete on a FlexOffice viewer user by ID. This marks the
   * user as deleted by setting the deleted_at timestamp while preserving record
   * integrity for auditing purposes.
   *
   * The flex_office_viewers table supports soft deletion, and this operation
   * leverages that behavior.
   *
   * Only authorized users with role 'viewer' may execute this operation.
   * Attempting to delete a non-existent viewer returns a 404 error.
   *
   * No data is returned upon success.
   *
   * This soft delete does not physically remove the record from the database.
   *
   * @param connection
   * @param viewerId Target viewer's unique ID
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async eraseViewer(
    @ViewerAuth()
    viewer: ViewerPayload,
    @TypedParam("viewerId")
    viewerId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteflexOfficeViewerViewersViewerId({
        viewer,
        viewerId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
