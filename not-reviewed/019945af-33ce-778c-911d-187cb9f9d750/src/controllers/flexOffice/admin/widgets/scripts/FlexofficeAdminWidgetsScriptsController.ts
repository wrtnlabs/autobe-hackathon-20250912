import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { deleteflexOfficeAdminWidgetsWidgetIdScriptsScriptId } from "../../../../../providers/deleteflexOfficeAdminWidgetsWidgetIdScriptsScriptId";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";

@Controller("/flexOffice/admin/widgets/:widgetId/scripts/:scriptId")
export class FlexofficeAdminWidgetsScriptsController {
  /**
   * Delete a UI widget script by ID.
   *
   * Deletes a UI widget script from the system given the widgetId and scriptId.
   * This operation permanently removes the script record from the
   * flex_office_widget_scripts table and cannot be undone.
   *
   * Security considerations dictate that only Admin and Editor roles with
   * proper authorizations can perform this action.
   *
   * The operation requires both widgetId and scriptId path parameters, both
   * UUIDs, to identify the target script associated with the widget.
   *
   * Errors may include resource not found or unauthorized access, which are
   * appropriately handled.
   *
   * There is no request body or response content for this operation.
   *
   * @param connection
   * @param widgetId Unique identifier of the UI widget
   * @param scriptId Unique identifier of the widget script to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("widgetId")
    widgetId: string & tags.Format<"uuid">,
    @TypedParam("scriptId")
    scriptId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteflexOfficeAdminWidgetsWidgetIdScriptsScriptId({
        admin,
        widgetId,
        scriptId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
