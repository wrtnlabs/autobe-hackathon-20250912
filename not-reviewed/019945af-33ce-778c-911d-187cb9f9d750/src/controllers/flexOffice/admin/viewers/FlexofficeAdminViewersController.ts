import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchflexOfficeAdminViewers } from "../../../../providers/patchflexOfficeAdminViewers";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getflexOfficeAdminViewersViewerId } from "../../../../providers/getflexOfficeAdminViewersViewerId";

import { IPageIFlexOfficeViewer } from "../../../../api/structures/IPageIFlexOfficeViewer";
import { IFlexOfficeViewer } from "../../../../api/structures/IFlexOfficeViewer";

@Controller("/flexOffice/admin/viewers")
export class FlexofficeAdminViewersController {
  /**
   * Search and retrieve a filtered, paginated list of FlexOffice viewers.
   *
   * This API operation allows fetching a filtered and paginated list of
   * FlexOffice viewer users. The viewer users correspond to records in the
   * flex_office_viewers table in the PostgreSQL database.
   *
   * The request body includes search criteria allowing advanced filtering
   * capabilities such as by name, email, and creation date. Pagination
   * parameters (page number, size) and sorting preferences enable flexible
   * querying suited to UI presentation.
   *
   * Responses provide viewer summaries, including basic user identification
   * details, flattened into a compact structure optimized for listing.
   *
   * Authorization is typically granted to admin users or system managers who
   * oversee viewer accounts. The operation uses HTTP PATCH to accommodate
   * complex search criteria in the request body.
   *
   * Proper validation ensures only authorized access and correct query
   * parameter usage, with error handling for invalid or unauthorized requests.
   *
   * This endpoint is crucial for managing viewer accounts within the system.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for viewer filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async searchViewers(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IFlexOfficeViewer.IRequest,
  ): Promise<IPageIFlexOfficeViewer.ISummary> {
    try {
      return await patchflexOfficeAdminViewers({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details of a FlexOffice viewer user by ID.
   *
   * This API operation fetches complete details of one viewer user by their
   * unique identifier viewerId from the PostgreSQL flex_office_viewers table.
   *
   * It returns the full data structure including name, email, password hash,
   * and timestamps for creation, update, and soft deletion status if
   * applicable.
   *
   * The GET method designates a retrieval operation returning a singular
   * resource.
   *
   * Authorization is enforced to limit access to admin users or authorized
   * viewers themselves to ensure data confidentiality.
   *
   * Validation of the viewerId parameter is mandatory to prevent injection or
   * unauthorized access.
   *
   * The response encapsulates all relevant user information excluding sensitive
   * fields like plain-text passwords.
   *
   * If the viewer does not exist, a 404 error is expected.
   *
   * This endpoint is critical for managing individual viewer user profiles.
   *
   * @param connection
   * @param viewerId Unique identifier of the target viewer user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":viewerId")
  public async atViewer(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("viewerId")
    viewerId: string & tags.Format<"uuid">,
  ): Promise<IFlexOfficeViewer> {
    try {
      return await getflexOfficeAdminViewersViewerId({
        admin,
        viewerId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
