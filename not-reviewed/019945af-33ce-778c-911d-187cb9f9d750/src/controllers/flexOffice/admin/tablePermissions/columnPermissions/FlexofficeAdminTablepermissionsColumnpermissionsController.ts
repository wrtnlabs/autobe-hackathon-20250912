import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postflexOfficeAdminTablePermissionsTablePermissionIdColumnPermissions } from "../../../../../providers/postflexOfficeAdminTablePermissionsTablePermissionIdColumnPermissions";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patchflexOfficeAdminTablePermissionsTablePermissionIdColumnPermissions } from "../../../../../providers/patchflexOfficeAdminTablePermissionsTablePermissionIdColumnPermissions";
import { getflexOfficeAdminTablePermissionsTablePermissionIdColumnPermissionsColumnPermissionId } from "../../../../../providers/getflexOfficeAdminTablePermissionsTablePermissionIdColumnPermissionsColumnPermissionId";
import { putflexOfficeAdminTablePermissionsTablePermissionIdColumnPermissionsColumnPermissionId } from "../../../../../providers/putflexOfficeAdminTablePermissionsTablePermissionIdColumnPermissionsColumnPermissionId";
import { deleteflexOfficeAdminTablePermissionsTablePermissionIdColumnPermissionsColumnPermissionId } from "../../../../../providers/deleteflexOfficeAdminTablePermissionsTablePermissionIdColumnPermissionsColumnPermissionId";

import { IFlexOfficeColumnPermission } from "../../../../../api/structures/IFlexOfficeColumnPermission";
import { IPageIFlexOfficeColumnPermission } from "../../../../../api/structures/IPageIFlexOfficeColumnPermission";

@Controller(
  "/flexOffice/admin/tablePermissions/:tablePermissionId/columnPermissions",
)
export class FlexofficeAdminTablepermissionsColumnpermissionsController {
  /**
   * Create a new column permission for a specified table permission.
   *
   * Create a new column permission under the specified table permission in the
   * FlexOffice access control system. This allows administrators to define
   * fine-grained access restrictions by specifying permissions on individual
   * columns within a database table.
   *
   * The operation requires the `tablePermissionId` path parameter to identify
   * the parent table permission entity, ensuring the column permission is
   * linked correctly. The request body must include the column name to restrict
   * and the system sets audit timestamps accordingly.
   *
   * Proper authorization for this operation ensures that only appropriate
   * administrative users can assign new column permissions. The API returns the
   * details of the created column permission record, including its unique
   * identifier and timestamps.
   *
   * @param connection
   * @param tablePermissionId The unique identifier of the target table
   *   permission
   * @param body Information required to create a new column permission
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createColumnPermission(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("tablePermissionId")
    tablePermissionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficeColumnPermission.ICreate,
  ): Promise<IFlexOfficeColumnPermission> {
    try {
      return await postflexOfficeAdminTablePermissionsTablePermissionIdColumnPermissions(
        {
          admin,
          tablePermissionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List column permissions under a table permission.
   *
   * Retrieve a paginated list of column permissions for a specific table
   * permission.
   *
   * This endpoint allows clients to query and browse column-level permissions
   * linked to a table permission record. Filtering and pagination are supported
   * for efficient navigation.
   *
   * Each column permission controls access at the column granularity, linked to
   * the broader table permission entity.
   *
   * The operation enforces authorization to limit access to users with admin
   * privileges managing access control configurations.
   *
   * Related operations include detailed reads and modifications of column
   * permissions.
   *
   * Response contains paginated summary details of column permissions matching
   * the request criteria.
   *
   * @param connection
   * @param tablePermissionId ID of the parent table permission
   * @param body Search and pagination parameters for column permissions
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("tablePermissionId")
    tablePermissionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficeColumnPermission.IRequest,
  ): Promise<IPageIFlexOfficeColumnPermission.ISummary> {
    try {
      return await patchflexOfficeAdminTablePermissionsTablePermissionIdColumnPermissions(
        {
          admin,
          tablePermissionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information of a column permission by ID.
   *
   * Retrieve detailed information about a specific column permission.
   *
   * This endpoint fetches a single column permission record by its unique
   * identifier, scoped within a parent table permission. It enables inspection
   * of column-level permission configurations including controlled columns and
   * associated access rights.
   *
   * Authorization ensures that only users with administrative privileges can
   * access this sensitive configuration.
   *
   * Complementary operations include list, update, and delete APIs for column
   * permissions.
   *
   * Returns full column permission entity information upon success.
   *
   * @param connection
   * @param tablePermissionId ID of the parent table permission
   * @param columnPermissionId ID of the target column permission
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":columnPermissionId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("tablePermissionId")
    tablePermissionId: string & tags.Format<"uuid">,
    @TypedParam("columnPermissionId")
    columnPermissionId: string & tags.Format<"uuid">,
  ): Promise<IFlexOfficeColumnPermission> {
    try {
      return await getflexOfficeAdminTablePermissionsTablePermissionIdColumnPermissionsColumnPermissionId(
        {
          admin,
          tablePermissionId,
          columnPermissionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing column permission by its ID under a specified table
   * permission.
   *
   * Update details of a column permission for a given table permission in the
   * FlexOffice access control system. This enables administrative users to
   * modify access restrictions at the column level within database tables.
   *
   * The operation requires path parameters `tablePermissionId` and
   * `columnPermissionId` to uniquely identify the record being updated. The
   * request body allows changes to the column name and other editable fields.
   * Audit timestamps are maintained to track modifications.
   *
   * Authorization ensures only privileged users can perform updates. The API
   * response includes the fully updated column permission details to confirm
   * changes.
   *
   * @param connection
   * @param tablePermissionId The unique identifier of the target table
   *   permission
   * @param columnPermissionId The unique identifier of the column permission to
   *   be updated
   * @param body Updated information for the column permission
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":columnPermissionId")
  public async updateColumnPermission(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("tablePermissionId")
    tablePermissionId: string & tags.Format<"uuid">,
    @TypedParam("columnPermissionId")
    columnPermissionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficeColumnPermission.IUpdate,
  ): Promise<IFlexOfficeColumnPermission> {
    try {
      return await putflexOfficeAdminTablePermissionsTablePermissionIdColumnPermissionsColumnPermissionId(
        {
          admin,
          tablePermissionId,
          columnPermissionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a column permission permanently by IDs.
   *
   * Delete a column permission identified by its ID and associated table
   * permission ID in FlexOffice. This operation removes column-level access
   * control constraints for the specified column.
   *
   * The API expects path parameters `tablePermissionId` and
   * `columnPermissionId` to locate the exact record. This is a hard delete
   * operation which irreversibly removes the record from the database, ensuring
   * the access control is no longer active for the column.
   *
   * Authorization is required to perform this sensitive operation, typically
   * limited to administrators. The operation does not return any content upon
   * success.
   *
   * @param connection
   * @param tablePermissionId The unique identifier of the target table
   *   permission
   * @param columnPermissionId The unique identifier of the column permission to
   *   delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":columnPermissionId")
  public async eraseColumnPermission(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("tablePermissionId")
    tablePermissionId: string & tags.Format<"uuid">,
    @TypedParam("columnPermissionId")
    columnPermissionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteflexOfficeAdminTablePermissionsTablePermissionIdColumnPermissionsColumnPermissionId(
        {
          admin,
          tablePermissionId,
          columnPermissionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
