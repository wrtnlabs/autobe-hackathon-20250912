import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postflexOfficeAdminTablePermissions } from "../../../../providers/postflexOfficeAdminTablePermissions";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchflexOfficeAdminTablePermissions } from "../../../../providers/patchflexOfficeAdminTablePermissions";
import { getflexOfficeAdminTablePermissionsId } from "../../../../providers/getflexOfficeAdminTablePermissionsId";
import { putflexOfficeAdminTablePermissionsId } from "../../../../providers/putflexOfficeAdminTablePermissionsId";
import { deleteflexOfficeAdminTablePermissionsId } from "../../../../providers/deleteflexOfficeAdminTablePermissionsId";

import { IFlexOfficeTablePermission } from "../../../../api/structures/IFlexOfficeTablePermission";
import { IPageIFlexOfficeTablePermission } from "../../../../api/structures/IPageIFlexOfficeTablePermission";

@Controller("/flexOffice/admin/tablePermissions")
export class FlexofficeAdminTablepermissionsController {
  /**
   * Create a new table permission record linking permission and table.
   *
   * This POST operation allows administrators to create a new entry in the
   * flex_office_table_permissions table, establishing a link between a
   * permission and a database table. The request body must provide the required
   * fields such as permission ID and target table name.
   *
   * Upon success, the operation returns the created table permission record,
   * including timestamps and identifiers.
   *
   * Security measures restrict this creation to admins to maintain control over
   * access rights.
   *
   * No path parameters required. Request body must specify creation data.
   *
   * @param connection
   * @param body Details for creating a new table permission record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createTablePermission(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IFlexOfficeTablePermission.ICreate,
  ): Promise<IFlexOfficeTablePermission> {
    try {
      return await postflexOfficeAdminTablePermissions({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve paginated list of table permissions.
   *
   * This PATCH operation enables clients to query the
   * flex_office_table_permissions table with flexible filtering options like
   * table name, permission, status, etc., combined with pagination settings.
   *
   * It returns a paginated list of table permission summaries suitable for
   * administrative interfaces managing RBAC assignments. Security requires
   * admin authentication due to privileged nature of permission management
   * data.
   *
   * No path parameters are required, but a request body defines the search
   * filters and pagination parameters. The response includes paginated table
   * permission summaries.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for table permissions
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexTablePermission(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IFlexOfficeTablePermission.IRequest,
  ): Promise<IPageIFlexOfficeTablePermission.ISummary> {
    try {
      return await patchflexOfficeAdminTablePermissions({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information of a table permission by ID.
   *
   * This GET operation fetches a detailed view of a single table permission by
   * its ID. It includes permission key, table name, related column permissions,
   * and row permissions if present. The operation requires the table
   * permission's unique identifier as a path parameter.
   *
   * Access to this information is restricted to authorized users such as
   * administrators managing access control policies.
   *
   * The operation does not require a request body and returns the full table
   * permission resource.
   *
   * @param connection
   * @param id Unique identifier of the target table permission
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async atTablePermission(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IFlexOfficeTablePermission> {
    try {
      return await getflexOfficeAdminTablePermissionsId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing table permission by ID.
   *
   * Update a specific table permission in the FlexOffice system.
   *
   * This operation updates the details of a table permission record, identified
   * uniquely by its ID. Table permissions define which database tables a
   * specific permission applies to, allowing for granular control over access
   * to database resources.
   *
   * The 'flex_office_table_permissions' Prisma model includes fields for
   * linking to permissions and specifying target tables. Updates must preserve
   * data integrity and audit fields. Soft deletion timestamps exist but this
   * operation modifies non-deleted records.
   *
   * Authorization is required to ensure only authorized users can update
   * permissions, maintaining system security. Proper error handling is expected
   * if the resource does not exist.
   *
   * Related endpoints include GET for reading and DELETE for removing table
   * permissions.
   *
   * No request body is returned; the response includes the updated table
   * permission object.
   *
   * @param connection
   * @param id Unique identifier of the table permission
   * @param body Update information for the table permission
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficeTablePermission.IUpdate,
  ): Promise<IFlexOfficeTablePermission> {
    try {
      return await putflexOfficeAdminTablePermissionsId({
        admin,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a table permission by ID.
   *
   * Delete a specified table permission by ID.
   *
   * This endpoint performs a soft delete on the table permission entity.
   * Instead of permanently removing the data, the soft delete marks the record
   * as deleted, preserving it for audit and recovery purposes.
   *
   * Authorization is strictly enforced to ensure only users with admin roles
   * can delete table permissions. Attempts to delete non-existing or already
   * deleted records should be handled gracefully.
   *
   * This operation is critical for managing access control policies while
   * maintaining historical records for compliance.
   *
   * Related operations include update and read endpoints for table permissions.
   *
   * No content is returned on success.
   *
   * @param connection
   * @param id Unique identifier of the table permission
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteflexOfficeAdminTablePermissionsId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
