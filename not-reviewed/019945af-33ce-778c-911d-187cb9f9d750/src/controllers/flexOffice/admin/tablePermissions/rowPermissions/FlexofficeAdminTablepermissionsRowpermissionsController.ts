import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postflexOfficeAdminTablePermissionsTablePermissionIdRowPermissions } from "../../../../../providers/postflexOfficeAdminTablePermissionsTablePermissionIdRowPermissions";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patchflexOfficeAdminTablePermissionsTablePermissionIdRowPermissions } from "../../../../../providers/patchflexOfficeAdminTablePermissionsTablePermissionIdRowPermissions";
import { getflexOfficeAdminTablePermissionsTablePermissionIdRowPermissionsRowPermissionId } from "../../../../../providers/getflexOfficeAdminTablePermissionsTablePermissionIdRowPermissionsRowPermissionId";
import { putflexOfficeAdminTablePermissionsTablePermissionIdRowPermissionsRowPermissionId } from "../../../../../providers/putflexOfficeAdminTablePermissionsTablePermissionIdRowPermissionsRowPermissionId";
import { deleteflexOfficeAdminTablePermissionsTablePermissionIdRowPermissionsRowPermissionId } from "../../../../../providers/deleteflexOfficeAdminTablePermissionsTablePermissionIdRowPermissionsRowPermissionId";

import { IFlexOfficeRowPermission } from "../../../../../api/structures/IFlexOfficeRowPermission";
import { IPageIFlexOfficeRowPermission } from "../../../../../api/structures/IPageIFlexOfficeRowPermission";

@Controller(
  "/flexOffice/admin/tablePermissions/:tablePermissionId/rowPermissions",
)
export class FlexofficeAdminTablepermissionsRowpermissionsController {
  /**
   * Create a new row-level permission under a table permission.
   *
   * Create a new row-level permission filter condition under the specified
   * table permission. This allows defining row-level access limits for data
   * security.
   *
   * Only users with admin roles may execute this operation. The request must
   * include the filter_condition specifying the SQL WHERE clause or expression
   * used to filter rows, applying granular control.
   *
   * Upon successful creation, the newly created row permission entity details
   * are returned.
   *
   * This operation interfaces with the flex_office_row_permissions table as
   * defined in the Prisma schema, ensuring proper linkage and compliance.
   *
   * @param connection
   * @param tablePermissionId Target table permission's ID
   * @param body RowPermission creation payload
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("tablePermissionId")
    tablePermissionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficeRowPermission.ICreate,
  ): Promise<IFlexOfficeRowPermission> {
    try {
      return await postflexOfficeAdminTablePermissionsTablePermissionIdRowPermissions(
        {
          admin,
          tablePermissionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List and search row permissions for a specified table permission.
   *
   * Search and retrieve row-level permissions associated with a specific table
   * permission in the FlexOffice system. These permissions define row filtering
   * rules that restrict data visibility at row granularity.
   *
   * The path parameter `tablePermissionId` identifies the parent table
   * permission context. The request body supports advanced search and
   * pagination parameters to filter, sort, and page through the row
   * permissions.
   *
   * This operation is essential for administrators managing fine-grained,
   * row-level security policies. It returns a paginated collection of matching
   * row permissions, including summary metadata for efficient display.
   *
   * Proper authorization ensures only privileged users can access this
   * sensitive information.
   *
   * @param connection
   * @param tablePermissionId The unique identifier of the target table
   *   permission
   * @param body Search and pagination parameters for row permission filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexRowPermissions(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("tablePermissionId")
    tablePermissionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficeRowPermission.IRequest,
  ): Promise<IPageIFlexOfficeRowPermission.ISummary> {
    try {
      return await patchflexOfficeAdminTablePermissionsTablePermissionIdRowPermissions(
        {
          admin,
          tablePermissionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve row-level permission by ID under a table permission.
   *
   * This operation retrieves a specific row-level permission filter condition
   * associated with a given table permission in the FlexOffice access control
   * system. It supports fine-grained access control at the database row level
   * by returning details of the filter condition that limits data visibility.
   * The API requires the UUID of the parent table permission and the UUID of
   * the row permission to uniquely identify the resource.
   *
   * Only authenticated users with appropriate access roles can retrieve this
   * data. The response includes the complete row permission entity, enabling
   * clients to understand the precise filter condition applied for row-level
   * security.
   *
   * This operation interfaces directly with the flex_office_row_permissions
   * table in the Prisma schema, which contains fields such as id,
   * table_permission_id, filter_condition, created_at, updated_at, and
   * deleted_at.
   *
   * Clients commonly use this operation alongside listing and managing other
   * row permissions under the same table permission to maintain consistent
   * access control configurations.
   *
   * @param connection
   * @param tablePermissionId Target table permission's ID
   * @param rowPermissionId Target row permission's ID
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":rowPermissionId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("tablePermissionId")
    tablePermissionId: string & tags.Format<"uuid">,
    @TypedParam("rowPermissionId")
    rowPermissionId: string & tags.Format<"uuid">,
  ): Promise<IFlexOfficeRowPermission> {
    try {
      return await getflexOfficeAdminTablePermissionsTablePermissionIdRowPermissionsRowPermissionId(
        {
          admin,
          tablePermissionId,
          rowPermissionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update row-level permission by ID under table permission.
   *
   * Update an existing row-level permission's filter condition under the
   * specified table permission. This operation modifies the SQL filter or any
   * other modifiable fields to adjust row-level data access control.
   *
   * Authorization is limited to admin users. The request body must conform to
   * the IFlexOfficeRowPermission.IUpdate schema excluding identifiers which are
   * path parameters.
   *
   * A successful update returns the updated row permission entity.
   *
   * Related operations include creation, retrieval, and deletion of row
   * permissions within the same table permission context.
   *
   * @param connection
   * @param tablePermissionId Target table permission's ID
   * @param rowPermissionId Target row permission's ID
   * @param body RowPermission update payload
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":rowPermissionId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("tablePermissionId")
    tablePermissionId: string & tags.Format<"uuid">,
    @TypedParam("rowPermissionId")
    rowPermissionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficeRowPermission.IUpdate,
  ): Promise<IFlexOfficeRowPermission> {
    try {
      return await putflexOfficeAdminTablePermissionsTablePermissionIdRowPermissionsRowPermissionId(
        {
          admin,
          tablePermissionId,
          rowPermissionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete row-level permission by ID under table permission.
   *
   * Remove a row-level permission filter condition by ID under the specified
   * table permission. This operation permanently deletes the filter condition.
   *
   * Only admin users can perform this deletion. The target is identified by
   * table and row permission UUIDs.
   *
   * This is a hard delete operation; the filter condition will no longer affect
   * access control after removal.
   *
   * This operation interacts directly with the flex_office_row_permissions
   * table in the Prisma schema.
   *
   * @param connection
   * @param tablePermissionId Target table permission's ID
   * @param rowPermissionId Target row permission's ID
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":rowPermissionId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("tablePermissionId")
    tablePermissionId: string & tags.Format<"uuid">,
    @TypedParam("rowPermissionId")
    rowPermissionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteflexOfficeAdminTablePermissionsTablePermissionIdRowPermissionsRowPermissionId(
        {
          admin,
          tablePermissionId,
          rowPermissionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
