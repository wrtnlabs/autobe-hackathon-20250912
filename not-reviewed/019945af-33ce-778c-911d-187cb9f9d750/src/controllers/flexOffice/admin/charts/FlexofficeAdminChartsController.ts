import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postflexOfficeAdminCharts } from "../../../../providers/postflexOfficeAdminCharts";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { putflexOfficeAdminChartsChartId } from "../../../../providers/putflexOfficeAdminChartsChartId";
import { deleteflexOfficeAdminChartsChartId } from "../../../../providers/deleteflexOfficeAdminChartsChartId";

import { IFlexOfficeChart } from "../../../../api/structures/IFlexOfficeChart";

@Controller("/flexOffice/admin/charts")
export class FlexofficeAdminChartsController {
  /**
   * Create a new analytics chart in the FlexOffice system.
   *
   * This API endpoint allows the creation of a new analytics chart within the
   * FlexOffice platform. The chart entity acts as the foundational metadata
   * container for visualization widgets associated with UI page widgets. Users
   * can specify the chart type such as bar, line, or pie, set a meaningful
   * title, and optionally provide a description to inform viewers of the
   * chart's context and purpose.
   *
   * Security-wise, this operation requires authenticated user access restricted
   * to roles 'admin', 'editor', or 'viewer' to ensure authorized users can
   * manage chart metadata.
   *
   * The created chart will be linked to an existing UI widget by ID and stored
   * atomically in the database, ensuring data integrity. Backend services are
   * responsible for generating unique IDs, timestamps, and managing soft
   * deletion flags where applicable.
   *
   * This operation complements related operations such as updating charts,
   * deleting charts, and retrieving chart details or summaries. Error handling
   * includes validation of widget existence and chart type correctness.
   *
   * The response returns the fully created chart entity with all relevant
   * fields.
   *
   * @param connection
   * @param body Detailed information for creating a FlexOffice chart
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IFlexOfficeChart.ICreate,
  ): Promise<IFlexOfficeChart> {
    try {
      return await postflexOfficeAdminCharts({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing analytics chart by chartId.
   *
   * This API endpoint updates the attributes of an existing analytics chart in
   * the FlexOffice platform. By specifying the chart ID, authorized users such
   * as admin, editor, or viewer roles can modify properties such as chart type,
   * descriptive title, and optional descriptive fields to keep visualizations
   * accurate and relevant.
   *
   * Strict access control is enforced ensuring that only authorized users with
   * roles 'admin', 'editor', or 'viewer' can perform modifications to prevent
   * unauthorized data tampering.
   *
   * The system will validate the existence of the target chart prior to
   * applying updates and return the updated entity in the response. This
   * operation serves as a complement to chart creation, deletion, and retrieval
   * endpoints.
   *
   * Errors include handling cases of not found chart ID or invalid update data.
   *
   * @param connection
   * @param chartId Unique identifier of the target chart to update
   * @param body Update data for an existing FlexOffice chart
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":chartId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("chartId")
    chartId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficeChart.IUpdate,
  ): Promise<IFlexOfficeChart> {
    try {
      return await putflexOfficeAdminChartsChartId({
        admin,
        chartId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete an analytics chart permanently by chartId.
   *
   * This API endpoint permanently removes a FlexOffice chart from the system by
   * its unique identifier. The operation is a hard delete that will erase all
   * associated data with the chart, making it unrecoverable. Only authorized
   * users such as admin, editor, or viewer may perform this action to protect
   * data integrity and comply with permission policies.
   *
   * The operation expects the target chart to exist; otherwise, an error will
   * be returned. It complements other chart management endpoints such as
   * create, update, and retrieve. No request body is required.
   *
   * Care must be taken to handle cascading effects on dependent entities, such
   * as filter conditions or linked widgets, which should also be cleaned up by
   * backend transactional logic.
   *
   * @param connection
   * @param chartId Unique identifier of the target chart to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":chartId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("chartId")
    chartId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteflexOfficeAdminChartsChartId({
        admin,
        chartId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
