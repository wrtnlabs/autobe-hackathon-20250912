import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postflexOfficeAdminPageThemes } from "../../../../providers/postflexOfficeAdminPageThemes";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchflexOfficeAdminPageThemes } from "../../../../providers/patchflexOfficeAdminPageThemes";
import { getflexOfficeAdminPageThemesPageThemeId } from "../../../../providers/getflexOfficeAdminPageThemesPageThemeId";
import { putflexOfficeAdminPageThemesPageThemeId } from "../../../../providers/putflexOfficeAdminPageThemesPageThemeId";
import { deleteflexOfficeAdminPageThemesPageThemeId } from "../../../../providers/deleteflexOfficeAdminPageThemesPageThemeId";

import { IFlexOfficePageTheme } from "../../../../api/structures/IFlexOfficePageTheme";
import { IPageIFlexOfficePageTheme } from "../../../../api/structures/IPageIFlexOfficePageTheme";

@Controller("/flexOffice/admin/pageThemes")
export class FlexofficeAdminPagethemesController {
  /**
   * Create a new UI page theme with specified name, optional description, and
   * optional CSS content. The theme name must be unique to prevent conflicts.
   *
   * Security considerations require this operation to be restricted to Admin
   * and Editor roles authorized to manage UI themes.
   *
   * Validation includes checking for uniqueness of theme name and correct
   * formatting of CSS.
   *
   * Upon success, returns the created theme entity with all attributes
   * including generated ID and timestamps.
   *
   * Errors include duplicate theme name or validation failure with appropriate
   * HTTP error responses.
   *
   * @param connection
   * @param body Information required for new UI page theme creation
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IFlexOfficePageTheme.ICreate,
  ): Promise<IFlexOfficePageTheme> {
    try {
      return await postflexOfficeAdminPageThemes({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of UI page themes.
   *
   * Retrieve a filtered and paginated list of FlexOffice UI page themes from
   * the system database. This operation facilitates clients in querying
   * available themes with flexible filters on name, creation date, and update
   * timestamps.
   *
   * Security considerations include that this endpoint is typically accessible
   * by authenticated users with read permissions. No sensitive information is
   * exposed. The response returns essential theme details optimized for display
   * in selection lists.
   *
   * The operation integrates directly with the flex_office_page_themes Prisma
   * table, referencing fields such as id, name, description, created_at, and
   * updated_at. Pagination parameters like page number and size control the
   * response size.
   *
   * It is expected that this operation supports sorting and search filtering to
   * enable user-friendly theme discovery. Errors include invalid query
   * parameters or server failures which will be properly handled with standard
   * HTTP error codes.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for theme filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IFlexOfficePageTheme.IRequest,
  ): Promise<IPageIFlexOfficePageTheme.ISummary> {
    try {
      return await patchflexOfficeAdminPageThemes({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information of a UI page theme by ID.
   *
   * Retrieve detailed information about a specific FlexOffice UI page theme
   * identified by the pageThemeId path parameter. This includes theme name,
   * description, CSS content, and audit timestamps.
   *
   * Security considerations limit access to authorized users. This operation
   * supports read access for admins, editors, and viewers with appropriate
   * permissions.
   *
   * The operation queries the flex_office_page_themes table for the theme
   * matching the given UUID. It returns a complete representation of the theme
   * entity.
   *
   * Errors include invalid UUID format or theme not found. Proper HTTP error
   * codes are used to communicate such failures.
   *
   * @param connection
   * @param pageThemeId Unique identifier for the target page theme
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":pageThemeId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("pageThemeId")
    pageThemeId: string & tags.Format<"uuid">,
  ): Promise<IFlexOfficePageTheme> {
    try {
      return await getflexOfficeAdminPageThemesPageThemeId({
        admin,
        pageThemeId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing FlexOffice UI page theme by ID.
   *
   * This API endpoint allows authorized administrators to modify an existing UI
   * page theme used in the FlexOffice platform. The updated fields include
   * theme name and CSS styles which define the visual appearance of UI pages.
   *
   * The operation enforces uniqueness of the theme name to avoid conflicts and
   * maintains the consistency of the system's visual styling. It is associated
   * with the flex_office_page_themes database entity, which stores theme
   * metadata including creation and update timestamps for audit purposes.
   *
   * Security considerations restrict this operation to users with admin
   * privileges to prevent unauthorized changes to system-wide visual
   * configurations.
   *
   * Clients must supply the pageThemeId path parameter to identify which theme
   * record to update and provide the update data in the request body adhering
   * to IFlexOfficePageTheme.IUpdate schema. Upon success, the updated theme
   * details are returned.
   *
   * Any attempt to update a non-existent theme ID or duplicate a theme name
   * results in an error response.
   *
   * This operation complements GET endpoints that retrieve themes and DELETE
   * endpoints that remove themes.
   *
   * @param connection
   * @param pageThemeId Unique identifier of the target page theme
   * @param body Page theme update data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":pageThemeId")
  public async updatePageTheme(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("pageThemeId")
    pageThemeId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficePageTheme.IUpdate,
  ): Promise<IFlexOfficePageTheme> {
    try {
      return await putflexOfficeAdminPageThemesPageThemeId({
        admin,
        pageThemeId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a FlexOffice UI page theme by ID.
   *
   * This API endpoint enables administrators to permanently delete a UI page
   * theme from the FlexOffice backend system.
   *
   * The deletion applies directly to the flex_office_page_themes database
   * table, removing all metadata associated with the theme including name, CSS
   * content, and audit timestamps.
   *
   * Security restrictions limit deletion access to admin users only to maintain
   * system stability and prevent accidental removal.
   *
   * Clients must specify the unique pageThemeId path parameter to identify the
   * exact theme record to be deleted.
   *
   * Successful execution returns no response body, signifying the resource is
   * no longer present in the system.
   *
   * This operation complements page theme creation, update, and retrieval
   * endpoints, enabling full lifecycle management of UI themes.
   *
   * @param connection
   * @param pageThemeId Unique identifier of the target page theme
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":pageThemeId")
  public async erasePageTheme(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("pageThemeId")
    pageThemeId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteflexOfficeAdminPageThemesPageThemeId({
        admin,
        pageThemeId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
