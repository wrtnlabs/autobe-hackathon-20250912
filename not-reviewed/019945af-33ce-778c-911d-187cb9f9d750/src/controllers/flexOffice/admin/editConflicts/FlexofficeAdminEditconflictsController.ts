import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchflexOfficeAdminEditConflicts } from "../../../../providers/patchflexOfficeAdminEditConflicts";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getflexOfficeAdminEditConflictsEditConflictId } from "../../../../providers/getflexOfficeAdminEditConflictsEditConflictId";

import { IPageIFlexOfficeEditConflicts } from "../../../../api/structures/IPageIFlexOfficeEditConflicts";
import { IFlexOfficeEditConflicts } from "../../../../api/structures/IFlexOfficeEditConflicts";

@Controller("/flexOffice/admin/editConflicts")
export class FlexofficeAdminEditconflictsController {
  /**
   * Search and retrieve paginated list of edit conflicts.
   *
   * Retrieve a paginated list of edit conflicts occurring on UI pages in the
   * FlexOffice system. The list supports filtering and sorting to find relevant
   * conflict records.
   *
   * Accessible for users with Editor or Admin roles. This operation helps in
   * identifying and managing content conflicts during collaborative editing to
   * maintain data integrity.
   *
   * The response includes details on conflicts such as editor ids, conflict
   * data in JSON, and timestamps.
   *
   * @param connection
   * @param body Search and filter parameters for edit conflicts
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async searchEditConflicts(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IFlexOfficeEditConflicts.IRequest,
  ): Promise<IPageIFlexOfficeEditConflicts.ISummary> {
    try {
      return await patchflexOfficeAdminEditConflicts({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details of a specific edit conflict.
   *
   * Retrieve detailed information about a single edit conflict in the
   * FlexOffice UI/Page collaboration environment.
   *
   * Only users with Editor or Admin roles can access this data. The conflict
   * details include editor information and JSON-encoded conflicting data.
   *
   * This information aids in conflict resolution and audit tracking for
   * collaborative editing.
   *
   * @param connection
   * @param editConflictId Unique identifier of the edit conflict
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":editConflictId")
  public async getEditConflict(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("editConflictId")
    editConflictId: string & tags.Format<"uuid">,
  ): Promise<IFlexOfficeEditConflicts> {
    try {
      return await getflexOfficeAdminEditConflictsEditConflictId({
        admin,
        editConflictId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
