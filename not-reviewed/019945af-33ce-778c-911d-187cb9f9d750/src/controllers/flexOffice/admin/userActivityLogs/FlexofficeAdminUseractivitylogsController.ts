import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchflexOfficeAdminUserActivityLogs } from "../../../../providers/patchflexOfficeAdminUserActivityLogs";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getflexOfficeAdminUserActivityLogsId } from "../../../../providers/getflexOfficeAdminUserActivityLogsId";

import { IPageIFlexOfficeUserActivityLog } from "../../../../api/structures/IPageIFlexOfficeUserActivityLog";
import { IFlexOfficeUserActivityLog } from "../../../../api/structures/IFlexOfficeUserActivityLog";

@Controller("/flexOffice/admin/userActivityLogs")
export class FlexofficeAdminUseractivitylogsController {
  /**
   * Search and retrieve paginated user activity logs.
   *
   * Retrieve a filtered, sorted, and paginated list of user activity logs.
   * These logs track various user actions including login events, page edits,
   * dashboard views, and other critical interactions.
   *
   * The operation accepts complex search parameters such as user ID filter,
   * action types, date ranges, and IP address filtering to refine results.
   * Pagination and sorting options allow manageable result sets.
   *
   * Only authorized roles can access user activity logs due to audit policy and
   * privacy concerns.
   *
   * This operation uses the flex_office_user_activity_logs table from the
   * Prisma schema, ensuring all returned data includes action details and
   * timestamps.
   *
   * The response is paginated providing summaries appropriate for dashboard
   * display or audit review.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for user activity
   *   logs
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IFlexOfficeUserActivityLog.IRequest,
  ): Promise<IPageIFlexOfficeUserActivityLog.ISummary> {
    try {
      return await patchflexOfficeAdminUserActivityLogs({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a single user activity log entry by ID.
   *
   * Retrieve detailed user activity log entry by its unique ID. User activity
   * logs provide comprehensive information about user actions performed in the
   * system including action types, optional detailed context, IP address of
   * origin, and precise timestamps.
   *
   * This operation supports auditing and monitoring by enabling authorized
   * users to view individual user activity records securely.
   *
   * Access is restricted to authorized roles. Data is retrieved from the
   * flex_office_user_activity_logs Prisma table with all related fields.
   *
   * The response returns a detailed single user activity log entry
   * corresponding to the requested ID.
   *
   * @param connection
   * @param id Unique identifier of the user activity log entry to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IFlexOfficeUserActivityLog> {
    try {
      return await getflexOfficeAdminUserActivityLogsId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
