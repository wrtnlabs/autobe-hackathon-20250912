import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postflexOfficeAdminPermissions } from "../../../../providers/postflexOfficeAdminPermissions";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchflexOfficeAdminPermissions } from "../../../../providers/patchflexOfficeAdminPermissions";
import { getflexOfficeAdminPermissionsId } from "../../../../providers/getflexOfficeAdminPermissionsId";
import { putflexOfficeAdminPermissionsId } from "../../../../providers/putflexOfficeAdminPermissionsId";
import { deleteflexOfficeAdminPermissionsId } from "../../../../providers/deleteflexOfficeAdminPermissionsId";

import { IFlexOfficePermission } from "../../../../api/structures/IFlexOfficePermission";
import { IPageIFlexOfficePermission } from "../../../../api/structures/IPageIFlexOfficePermission";

@Controller("/flexOffice/admin/permissions")
export class FlexofficeAdminPermissionsController {
  /**
   * Create a new FlexOffice permission entity.
   *
   * This operation inserts a new record into the flex_office_permissions table
   * with specified permission key, description, and status.
   *
   * Only admin users are allowed to perform this action.
   *
   * The server generates creation and update timestamps automatically.
   *
   * Validation ensures permission keys are unique and status values are valid.
   *
   * Returns the created permission entity details upon success.
   *
   * @param connection
   * @param body Permission creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IFlexOfficePermission.ICreate,
  ): Promise<IFlexOfficePermission> {
    try {
      return await postflexOfficeAdminPermissions({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of FlexOffice permissions.
   *
   * Retrieve a filtered and paginated list of FlexOffice permission entities
   * for access control.
   *
   * This operation interacts directly with the flex_office_permissions table as
   * defined in the Prisma schema. It accepts complex request criteria such as
   * permission_key filters, status filters, and free text searches on
   * descriptions.
   *
   * Security and access control apply at the application layer; typically, only
   * users with admin or equivalent roles should query permissions data.
   *
   * The response provides structured paginated lists, including metadata for
   * pagination navigation.
   *
   * This operation is foundational for managing system permissions and role
   * capabilities.
   *
   * Errors on invalid requests or unauthenticated access must be handled
   * gracefully.
   *
   * @param connection
   * @param body Search parameters and filters for permissions
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async search(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IFlexOfficePermission.IRequest,
  ): Promise<IPageIFlexOfficePermission> {
    try {
      return await patchflexOfficeAdminPermissions({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed FlexOffice permission.
   *
   * Get detailed information for a single FlexOffice permission by ID.
   *
   * This GET operation accesses the flex_office_permissions table using the
   * specified UUID. It returns all defined fields including permission key,
   * description, status, and audit data.
   *
   * Secure access requires admin-level privileges.
   *
   * Invalid or non-existent IDs should result in standard 404 and error
   * handling.
   *
   * Uses path parameter to specify target permission.
   *
   * @param connection
   * @param id Unique identifier of the target permission
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IFlexOfficePermission> {
    try {
      return await getflexOfficeAdminPermissionsId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing FlexOffice permission by ID.
   *
   * Update an existing FlexOffice permission identified by ID.
   *
   * Receives targeted permission ID as path parameter and update data in the
   * request body.
   *
   * Updates fields such as permission_key, description, and status within the
   * flex_office_permissions table.
   *
   * Admin authorization is mandatory to maintain secure control over
   * permissions.
   *
   * Returns the updated permission entity details to confirm changes.
   *
   * 404 error if permission does not exist.
   *
   * Validation ensures key uniqueness and status correctness.
   *
   * @param connection
   * @param id Unique identifier of the target permission
   * @param body Permission update data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficePermission.IUpdate,
  ): Promise<IFlexOfficePermission> {
    try {
      return await putflexOfficeAdminPermissionsId({
        admin,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a permission by ID from flex_office_permissions table.
   *
   * This DELETE operation removes a permission entry from the
   * flex_office_permissions table in the FlexOffice system. Permissions define
   * specific access rights that can be assigned for role-based access control.
   * The operation requires the unique ID of the permission. Once deleted, the
   * permission and all its related assignments cease to exist and cannot be
   * recovered.
   *
   * Security considerations include restricting this operation to high-level
   * administrative roles to prevent accidental or unauthorized permission
   * removal. The operation only requires the permission ID path parameter for
   * targeting the exact record.
   *
   * This operation is critical for system administration to maintain and update
   * access controls but must be guarded carefully due to its impact on system
   * security and user access.
   *
   * No request body is needed, and no content is returned upon success.
   *
   * @param connection
   * @param id Unique identifier of the permission to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erasePermission(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteflexOfficeAdminPermissionsId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
