import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchflexOfficeAdminEditors } from "../../../../providers/patchflexOfficeAdminEditors";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getflexOfficeAdminEditorsEditorId } from "../../../../providers/getflexOfficeAdminEditorsEditorId";
import { putflexOfficeAdminEditorsEditorId } from "../../../../providers/putflexOfficeAdminEditorsEditorId";
import { deleteflexOfficeAdminEditorsEditorId } from "../../../../providers/deleteflexOfficeAdminEditorsEditorId";

import { IPageIFlexOfficeEditor } from "../../../../api/structures/IPageIFlexOfficeEditor";
import { IFlexOfficeEditor } from "../../../../api/structures/IFlexOfficeEditor";

@Controller("/flexOffice/admin/editors")
export class FlexofficeAdminEditorsController {
  /**
   * Search and retrieve a filtered, paginated list of editor users.
   *
   * Provides a paginated list of Editor users with advanced filtering and
   * sorting capabilities. This operation enables admin users to search editors
   * by various criteria including email and creation date.
   *
   * Results return summaries of editor information for efficient management
   * overview without revealing sensitive data.
   *
   * This endpoint works with the flex_office_editors table, which tracks users
   * authorized to edit pages.
   *
   * Filtering parameters include optional fields for page size, sorting rules,
   * search keywords, and date ranges.
   *
   * Security mandates admin role to access the detailed user list.
   *
   * Errors arise from invalid search parameters or access violations.
   *
   * Pagination ensures manageable response sizes for UI integration.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for editor filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async searchEditors(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IFlexOfficeEditor.IRequest,
  ): Promise<IPageIFlexOfficeEditor.ISummary> {
    try {
      return await patchflexOfficeAdminEditors({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific editor user by ID.
   *
   * Retrieves detailed information about a single Editor user identified by
   * editorId. This includes display name, email, and account status.
   *
   * This operation reads from the flex_office_editors table.
   *
   * Admin role authorization restricts access to details.
   *
   * Errors include 404 if the editor is not found.
   *
   * The response returns full editor profile except sensitive info like
   * password hash.
   *
   * Useful for admin user management UI.
   *
   * @param connection
   * @param editorId Unique identifier of the editor user to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":editorId")
  public async atEditor(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("editorId")
    editorId: string & tags.Format<"uuid">,
  ): Promise<IFlexOfficeEditor> {
    try {
      return await getflexOfficeAdminEditorsEditorId({
        admin,
        editorId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing FlexOffice editor user.
   *
   * This API operation enables the update of an editor user entity in the
   * FlexOffice system. The editor user in question is identified via the
   * editorId path parameter, which corresponds to the unique ID in the
   * flex_office_editors PostgreSQL table.
   *
   * Users with admin role generally have the permissions to update editor
   * details such as name, email, and password hash. The operation validates the
   * input data structure and applies updates to the database while maintaining
   * the integrity of audit fields (created_at, updated_at). Soft deletion
   * handling is not performed here; this operation strictly updates active
   * records.
   *
   * This route uses PUT HTTP method aligned to RESTful standards for updating
   * existing resources. It does not include a response body, as the updated
   * entity state can be fetched via a separate GET operation if needed.
   *
   * Parameters include:
   *
   * - EditorId: UUID string representing the target editor user.
   * - RequestBody: An object matching IFlexOfficeEditor.IUpdate type containing
   *   editable user properties.
   *
   * The operation targets the flex_office_editors table in the Prisma schema
   * and requires validation against defined fields. Proper authorization checks
   * for the admin role role are enforced to secure modification privileges.
   *
   * In case of errors such as not found or validation failures, appropriate
   * HTTP error codes should be returned.
   *
   * @param connection
   * @param editorId Unique identifier of the target editor user
   * @param body Editable information for updating an editor user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":editorId")
  public async updateEditor(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("editorId")
    editorId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficeEditor.IUpdate,
  ): Promise<IFlexOfficeEditor> {
    try {
      return await putflexOfficeAdminEditorsEditorId({
        admin,
        editorId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a FlexOffice editor user.
   *
   * This API operation performs a soft deletion of a FlexOffice editor user
   * entity. The target editor user is uniquely identified by the editorId path
   * parameter which corresponds to the primary key in the flex_office_editors
   * table.
   *
   * Soft deletion is implemented by setting the deleted_at timestamp,
   * preventing the editor from accessing the system while retaining the data
   * for audit and recovery purposes.
   *
   * Only users with administrative privileges can execute this operation to
   * ensure controlled deactivation of editor accounts. The operation does not
   * require a request body and returns no content upon successful deletion.
   *
   * Strict authorization checks and validation of the editorId parameter are
   * mandatory to protect against unauthorized or accidental deletions.
   *
   * The endpoint is aligned with RESTful DELETE method semantics for soft
   * deletions within the system.
   *
   * No response body is returned on success.
   *
   * @param connection
   * @param editorId Unique identifier of the target editor user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":editorId")
  public async eraseEditor(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("editorId")
    editorId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteflexOfficeAdminEditorsEditorId({
        admin,
        editorId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
