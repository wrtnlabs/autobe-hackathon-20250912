import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postflexOfficeAdminSystemAlerts } from "../../../../providers/postflexOfficeAdminSystemAlerts";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchflexOfficeAdminSystemAlerts } from "../../../../providers/patchflexOfficeAdminSystemAlerts";
import { getflexOfficeAdminSystemAlertsId } from "../../../../providers/getflexOfficeAdminSystemAlertsId";
import { putflexOfficeAdminSystemAlertsId } from "../../../../providers/putflexOfficeAdminSystemAlertsId";
import { deleteflexOfficeAdminSystemAlertsId } from "../../../../providers/deleteflexOfficeAdminSystemAlertsId";

import { IFlexOfficeSystemAlerts } from "../../../../api/structures/IFlexOfficeSystemAlerts";
import { IPageIFlexOfficeSystemAlert } from "../../../../api/structures/IPageIFlexOfficeSystemAlert";
import { IFlexOfficeSystemAlert } from "../../../../api/structures/IFlexOfficeSystemAlert";

@Controller("/flexOffice/admin/systemAlerts")
export class FlexofficeAdminSystemalertsController {
  /**
   * Create a new system alert notification.
   *
   * Create a new system alert record capturing severity level (e.g., info,
   * warning, critical), descriptive message, initial resolution status
   * (typically unresolved), and timestamps.
   *
   * Security mandates this operation is restricted to admin roles with
   * privileges to generate alerts either manually or from automated backend
   * processes.
   *
   * The operation validates input data integrity, including severity field
   * constraints.
   *
   * System alerts created are recorded with server-generated timestamps for
   * consistency.
   *
   * This endpoint serves system monitoring components or privileged users who
   * manually log new alerts.
   *
   * No response body is necessary other than confirmation of creation success
   * with new alert details.
   *
   * @param connection
   * @param body Information required to create a new system alert
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IFlexOfficeSystemAlerts.ICreate,
  ): Promise<IFlexOfficeSystemAlerts> {
    try {
      return await postflexOfficeAdminSystemAlerts({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve paginated system alerts.
   *
   * Retrieve filtered and paginated list of system alerts to monitor system
   * health and security status. System alerts include severity level,
   * descriptive messages, resolution status, and timestamps for creation and
   * resolution.
   *
   * The operation supports filtering by severity, resolution state, and other
   * parameters, with pagination to limit result size.
   *
   * This API is intended for system administrators to keep track of critical
   * events and ensure timely remediation.
   *
   * Data is sourced from the flex_office_system_alerts Prisma table, which
   * supports active record management.
   *
   * The response consists of alert summary data optimized for dashboard
   * display.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for system alerts
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IFlexOfficeSystemAlert.IRequest,
  ): Promise<IPageIFlexOfficeSystemAlert.ISummary> {
    try {
      return await patchflexOfficeAdminSystemAlerts({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information of a system alert by its ID.
   *
   * Retrieve detailed information about a specific system alert from the
   * database. The targeted system alert includes data such as severity (info,
   * warning, critical), message describing the alert, resolution status, and
   * timestamps for creation, update, and resolution.
   *
   * Security considerations include restricting access to authenticated users
   * with appropriate permissions or roles that allow viewing system alerts.
   * This prevents unauthorized users from accessing potentially sensitive
   * operational information.
   *
   * This operation directly queries the flex_office_system_alerts table, which
   * is central to the system's alerting and monitoring functionality. It is
   * essential for administrators or monitoring services to obtain accurate
   * current alert status.
   *
   * Validation ensures the provided alert ID is a valid UUID matching existing
   * records. If the alert does not exist, an appropriate error response should
   * be given.
   *
   * Related operations include listing alerts, creating new alerts (usually
   * system generated), updating alerts' resolution status, and removing alerts
   * from the active list.
   *
   * This GET operation returns a full system alert data entity without
   * modification.
   *
   * @param connection
   * @param id Unique identifier (UUID) of the system alert to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IFlexOfficeSystemAlerts> {
    try {
      return await getflexOfficeAdminSystemAlertsId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing system alert by its ID.
   *
   * Update details of an existing system alert including severity, message, and
   * resolution status. The operation requires the alert's unique identifier and
   * a request body containing modifiable alert attributes.
   *
   * Security protocols require only admin users to perform updates. The system
   * ensures request data integrity and validates status transitions.
   *
   * Successful updates modify the alert record's update timestamp.
   *
   * This PUT operation returns the updated system alert information for
   * confirmation.
   *
   * Related operations include retrieving alert info, creating new alerts, and
   * deleting alerts when resolved or obsolete.
   *
   * @param connection
   * @param id Unique identifier (UUID) of the system alert to update
   * @param body New data for the system alert to update
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficeSystemAlerts.IUpdate,
  ): Promise<IFlexOfficeSystemAlerts> {
    try {
      return await putflexOfficeAdminSystemAlertsId({
        admin,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a system alert by its ID.
   *
   * Delete a system alert permanently from the database. This operation removes
   * all data associated with the alert and cannot be undone.
   *
   * Only users with admin privileges can execute this operation.
   *
   * Validation applies to the alert ID parameter ensuring valid UUID format.
   *
   * This operation does not return a response body but should confirm success
   * or failure through HTTP status codes.
   *
   * Related API calls include listing alerts, retrieving, creating, and
   * updating alerts.
   *
   * This endpoint supports hard deletion of system alert data.
   *
   * @param connection
   * @param id Unique identifier (UUID) of the system alert to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteflexOfficeAdminSystemAlertsId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
