import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchflexOfficeAdminExportLogs } from "../../../../providers/patchflexOfficeAdminExportLogs";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getflexOfficeAdminExportLogsExportLogId } from "../../../../providers/getflexOfficeAdminExportLogsExportLogId";

import { IPageIFlexOfficeExportLog } from "../../../../api/structures/IPageIFlexOfficeExportLog";
import { IFlexOfficeExportLog } from "../../../../api/structures/IFlexOfficeExportLog";

@Controller("/flexOffice/admin/exportLogs")
export class FlexofficeAdminExportlogsController {
  /**
   * Search and retrieve paginated list of export logs.
   *
   * Retrieve a filtered and paginated list of export logs documenting user
   * export operations within FlexOffice. These logs include export format, data
   * targets, success or failure status, and user audit details.
   *
   * Security considerations restrict access to admin users for audit and
   * compliance purposes.
   *
   * Search and filter parameters allow querying logs based on relevant
   * criteria, with pagination to handle large data volumes.
   *
   * The response includes summary export log items optimized for list display.
   *
   * No path parameters are required. Request body contains search, filter, and
   * pagination details.
   *
   * Use this operation to audit data export activities and track usage patterns
   * across the system.
   *
   * @param connection
   * @param body Export log search criteria and pagination parameters
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IFlexOfficeExportLog.IRequest,
  ): Promise<IPageIFlexOfficeExportLog.ISummary> {
    try {
      return await patchflexOfficeAdminExportLogs({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed export log by ID.
   *
   * Fetch detailed information of a single export log by its unique identifier.
   *
   * This operation is important for audit review, forensic analysis, and
   * compliance monitoring of export activities.
   *
   * The export log entity contains comprehensive information about the export
   * type, data involved, status result, user who executed the operation, and
   * timing details.
   *
   * Only authorized admin users may access this sensitive data.
   *
   * No request body is needed; the response includes the full export log
   * entity.
   *
   * Errors are handled with appropriate status codes if the log entry is not
   * found or access is denied.
   *
   * @param connection
   * @param exportLogId Unique identifier of the target export log (UUID)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":exportLogId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("exportLogId")
    exportLogId: string & tags.Format<"uuid">,
  ): Promise<IFlexOfficeExportLog> {
    try {
      return await getflexOfficeAdminExportLogsExportLogId({
        admin,
        exportLogId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
