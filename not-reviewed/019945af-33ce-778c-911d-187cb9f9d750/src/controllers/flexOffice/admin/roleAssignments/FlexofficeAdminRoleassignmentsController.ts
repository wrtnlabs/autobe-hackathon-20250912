import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postflexOfficeAdminRoleAssignments } from "../../../../providers/postflexOfficeAdminRoleAssignments";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchflexOfficeAdminRoleAssignments } from "../../../../providers/patchflexOfficeAdminRoleAssignments";
import { getflexOfficeAdminRoleAssignmentsId } from "../../../../providers/getflexOfficeAdminRoleAssignmentsId";
import { putflexOfficeAdminRoleAssignmentsId } from "../../../../providers/putflexOfficeAdminRoleAssignmentsId";
import { deleteflexOfficeAdminRoleAssignmentsId } from "../../../../providers/deleteflexOfficeAdminRoleAssignmentsId";

import { IFlexOfficeRoleAssignment } from "../../../../api/structures/IFlexOfficeRoleAssignment";
import { IPageIFlexOfficeRoleAssignment } from "../../../../api/structures/IPageIFlexOfficeRoleAssignment";

@Controller("/flexOffice/admin/roleAssignments")
export class FlexofficeAdminRoleassignmentsController {
  /**
   * Create a new role assignment linking a user to a role.
   *
   * Create a new role assignment by specifying the target user and their role.
   * The request body includes the user_id and role_name fields that define the
   * assignment.
   *
   * Administrators use this operation to grant roles to system users, enabling
   * RBAC enforcement. Proper validation prevents duplication and conflicts. On
   * success, the created role assignment data is returned for confirmation.
   *
   * @param connection
   * @param body Information required to create a role assignment
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IFlexOfficeRoleAssignment.ICreate,
  ): Promise<IFlexOfficeRoleAssignment> {
    try {
      return await postflexOfficeAdminRoleAssignments({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of role assignments.
   *
   * Retrieve a paginated list of role assignments with support for filtering
   * and pagination. Enables administrators to search user-role mappings
   * efficiently.
   *
   * Security considerations: This operation requires admin level authorization
   * due to sensitive access control data.
   *
   * Related API operations include creating, updating, or deleting individual
   * role assignments.
   *
   * @param connection
   * @param body Search and pagination criteria for role assignments
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async searchRoleAssignments(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IFlexOfficeRoleAssignment.IRequest,
  ): Promise<IPageIFlexOfficeRoleAssignment.ISummary> {
    try {
      return await patchflexOfficeAdminRoleAssignments({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific role assignment by its unique identifier.
   *
   * This API operation retrieves the details of a specific role assignment by
   * its unique identifier (id). It reads from the
   * 'flex_office_role_assignments' table which stores mappings of users to role
   * names in the system.
   *
   * Security considerations ensure that only authorized administrators can view
   * role assignments. The retrieved data includes the assigned user's
   * identifier, the role name, and timestamps for creation and last update. The
   * operation supports efficient lookup and management of role assignments for
   * administrative auditing and role enforcement.
   *
   * @param connection
   * @param id Unique identifier of the role assignment to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IFlexOfficeRoleAssignment> {
    try {
      return await getflexOfficeAdminRoleAssignmentsId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing role assignment's details.
   *
   * Update the details of an existing role assignment by its ID. The request
   * body allows modification of the role_name and user_id fields.
   *
   * This operation helps administrators manage and correct role assignments as
   * needed. It ensures that the updated assignment complies with current
   * authorization policies and maintains data integrity.
   *
   * @param connection
   * @param id Unique identifier of the role assignment to update
   * @param body Updated role assignment information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficeRoleAssignment.IUpdate,
  ): Promise<IFlexOfficeRoleAssignment> {
    try {
      return await putflexOfficeAdminRoleAssignmentsId({
        admin,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a role assignment by ID.
   *
   * Soft delete a role assignment by its unique ID. This operation marks the
   * record as deleted by setting the 'deleted_at' timestamp, thus removing the
   * role assignment without permanent data loss.
   *
   * Admins use this operation to revoke user roles in a secure and auditable
   * manner. The soft delete ensures history preservation and compliance with
   * audit requirements.
   *
   * This API returns no content upon success.
   *
   * @param connection
   * @param id Unique identifier of the role assignment to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteflexOfficeAdminRoleAssignmentsId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
