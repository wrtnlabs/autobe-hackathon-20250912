import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postflexOfficeAdminDataSourcesDataSourceIdSyncs } from "../../../../../providers/postflexOfficeAdminDataSourcesDataSourceIdSyncs";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patchflexOfficeAdminDataSourcesDataSourceIdSyncs } from "../../../../../providers/patchflexOfficeAdminDataSourcesDataSourceIdSyncs";
import { getflexOfficeAdminDataSourcesDataSourceIdSyncsSyncId } from "../../../../../providers/getflexOfficeAdminDataSourcesDataSourceIdSyncsSyncId";
import { putflexOfficeAdminDataSourcesDataSourceIdSyncsSyncId } from "../../../../../providers/putflexOfficeAdminDataSourcesDataSourceIdSyncsSyncId";
import { deleteflexOfficeAdminDataSourcesDataSourceIdSyncsSyncId } from "../../../../../providers/deleteflexOfficeAdminDataSourcesDataSourceIdSyncsSyncId";

import { IFlexOfficeDataSourceSync } from "../../../../../api/structures/IFlexOfficeDataSourceSync";
import { IPageIFlexOfficeDataSourceSync } from "../../../../../api/structures/IPageIFlexOfficeDataSourceSync";

@Controller("/flexOffice/admin/dataSources/:dataSourceId/syncs")
export class FlexofficeAdminDatasourcesSyncsController {
  /**
   * Create a synchronization task for a specific data source.
   *
   * Create a new synchronization task for an external data source within
   * FlexOffice. This operation accepts parameters defining the synchronization
   * schedule and any initial execution metadata.
   *
   * It is linked to the flex_office_data_source_syncs table that records sync
   * schedules, statuses, execution timestamps, and error messages if any. Users
   * must provide the dataSourceId identifying the data source to sync.
   *
   * Security is critical: only authorized users like system administrators
   * should invoke this operation due to potential impact on system workload and
   * data consistency.
   *
   * Input validation ensures correct scheduling timestamps and proper initial
   * state setup. The newly created sync record is persisted with creation and
   * update timestamps.
   *
   * This API is commonly used in data integration workflows and supports retry
   * mechanisms through subsequent update operations.
   *
   * If the dataSourceId does not exist, the operation will fail with an
   * appropriate error.
   *
   * @param connection
   * @param dataSourceId Identifier of the data source to synchronize
   * @param body Synchronization task creation parameters
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createSync(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("dataSourceId")
    dataSourceId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficeDataSourceSync.ICreate,
  ): Promise<IFlexOfficeDataSourceSync> {
    try {
      return await postflexOfficeAdminDataSourcesDataSourceIdSyncs({
        admin,
        dataSourceId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve paginated sync operation records for a data source.
   *
   * Search synchronization operations of a particular data source identified by
   * dataSourceId. Supports advanced filters, pagination, and sorting to
   * navigate sync history and status.
   *
   * This operation facilitates monitoring and management of data refresh jobs,
   * enabling display of sync scheduling, completion status, errors, and
   * timing.
   *
   * Role-based access ensures only authorized users can review synchronization
   * logs for secure operations.
   *
   * Related operations include retrieving specific sync details and managing
   * data source configurations.
   *
   * @param connection
   * @param dataSourceId Unique identifier of the target data source
   * @param body Search filters and pagination info for data source syncs
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async searchSyncs(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("dataSourceId")
    dataSourceId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficeDataSourceSync.IRequest,
  ): Promise<IPageIFlexOfficeDataSourceSync> {
    try {
      return await patchflexOfficeAdminDataSourcesDataSourceIdSyncs({
        admin,
        dataSourceId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed synchronization status by ID for a data source.
   *
   * Get detailed synchronization information by syncId for data source
   * identified by dataSourceId. Provides status, timing, error message details
   * of sync operation.
   *
   * Ensures authorized access control and accurate identification with
   * composite primary keys.
   *
   * Related operations include searching sync logs and managing data sources.
   *
   * @param connection
   * @param dataSourceId Unique identifier of the data source containing the
   *   sync record
   * @param syncId Unique identifier of the synchronization record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":syncId")
  public async atSync(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("dataSourceId")
    dataSourceId: string & tags.Format<"uuid">,
    @TypedParam("syncId")
    syncId: string & tags.Format<"uuid">,
  ): Promise<IFlexOfficeDataSourceSync> {
    try {
      return await getflexOfficeAdminDataSourcesDataSourceIdSyncsSyncId({
        admin,
        dataSourceId,
        syncId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update synchronization task details for a specific data source.
   *
   * Update synchronization task details for a data source in FlexOffice. This
   * includes modifying schedule, status, or error information.
   *
   * The operation targets a specific sync record identified by dataSourceId and
   * syncId. Only administrators are authorized to make such changes.
   *
   * Data integrity checks confirm that updates follow valid state progressions
   * and accurate timestamp formats. Upon success, the updated synchronization
   * record is returned.
   *
   * This supports operational management of automated or manual data refresh
   * workflows.
   *
   * @param connection
   * @param dataSourceId Identifier of the data source owning the sync task
   * @param syncId Identifier of the synchronization task to update
   * @param body Synchronization task update details
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":syncId")
  public async updateSync(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("dataSourceId")
    dataSourceId: string & tags.Format<"uuid">,
    @TypedParam("syncId")
    syncId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficeDataSourceSync.IUpdate,
  ): Promise<IFlexOfficeDataSourceSync> {
    try {
      return await putflexOfficeAdminDataSourcesDataSourceIdSyncsSyncId({
        admin,
        dataSourceId,
        syncId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a synchronization task for a specific data source.
   *
   * Soft delete (mark as deleted) a synchronization task for an external data
   * source. This preserves the record for audit purposes while preventing
   * further execution.
   *
   * The operation is applicable only to administrators for security and
   * compliance reasons.
   *
   * Setting the deleted_at timestamp flags the record as inactive without
   * physically removing it from the database.
   *
   * No request body is needed and there is no content returned on success.
   *
   * This API enhances operational control over sync tasks and maintains data
   * lineage for forensic review.
   *
   * @param connection
   * @param dataSourceId Data source identifier to which the sync task belongs
   * @param syncId Identifier of the sync task to be soft deleted
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":syncId")
  public async eraseSync(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("dataSourceId")
    dataSourceId: string & tags.Format<"uuid">,
    @TypedParam("syncId")
    syncId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteflexOfficeAdminDataSourcesDataSourceIdSyncsSyncId({
        admin,
        dataSourceId,
        syncId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
