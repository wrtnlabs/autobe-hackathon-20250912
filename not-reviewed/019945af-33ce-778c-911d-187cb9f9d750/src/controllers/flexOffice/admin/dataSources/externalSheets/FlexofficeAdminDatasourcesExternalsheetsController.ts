import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postflexOfficeAdminDataSourcesDataSourceIdExternalSheets } from "../../../../../providers/postflexOfficeAdminDataSourcesDataSourceIdExternalSheets";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patchflexOfficeAdminDataSourcesDataSourceIdExternalSheets } from "../../../../../providers/patchflexOfficeAdminDataSourcesDataSourceIdExternalSheets";
import { getflexOfficeAdminDataSourcesDataSourceIdExternalSheetsSheetId } from "../../../../../providers/getflexOfficeAdminDataSourcesDataSourceIdExternalSheetsSheetId";
import { putflexOfficeAdminDataSourcesDataSourceIdExternalSheetsSheetId } from "../../../../../providers/putflexOfficeAdminDataSourcesDataSourceIdExternalSheetsSheetId";
import { deleteflexOfficeAdminDataSourcesDataSourceIdExternalSheetsSheetId } from "../../../../../providers/deleteflexOfficeAdminDataSourcesDataSourceIdExternalSheetsSheetId";

import { IFlexOfficeExternalSheet } from "../../../../../api/structures/IFlexOfficeExternalSheet";
import { IPageIFlexOfficeExternalSheet } from "../../../../../api/structures/IPageIFlexOfficeExternalSheet";

@Controller("/flexOffice/admin/dataSources/:dataSourceId/externalSheets")
export class FlexofficeAdminDatasourcesExternalsheetsController {
  /**
   * Create an external sheet record for a data source.
   *
   * Create a new external sheet metadata entry linked to a data source. The
   * client must supply the file name, file URL, and sheet count. This
   * facilitates the integration of external spreadsheet data into FlexOffice
   * systems.
   *
   * Access is limited to authorized admin or editor users. The operation
   * enforces constraints from the Prisma schema on data uniqueness and
   * integrity.
   *
   * Supports full lifecycle management with related update and delete
   * operations.
   *
   * @param connection
   * @param dataSourceId Unique identifier of the target data source
   * @param body External sheet creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("dataSourceId")
    dataSourceId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficeExternalSheet.ICreate,
  ): Promise<IFlexOfficeExternalSheet> {
    try {
      return await postflexOfficeAdminDataSourcesDataSourceIdExternalSheets({
        admin,
        dataSourceId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search external sheets linked to a data source.
   *
   * Search and retrieve external spreadsheet records associated with a data
   * source. Supports filtering and pagination.
   *
   * This operation reads data from the flex_office_external_sheets table and
   * returns relevant metadata such as file names, URLs, sheet counts, and last
   * synced timestamps.
   *
   * Security is restricted to administrator roles due to sensitive external
   * data access.
   *
   * The request allows specifying search parameters to filter and paginate
   * results efficiently.
   *
   * The response contains the matched external sheet records in paginated form
   * for user display and management.
   *
   * @param connection
   * @param dataSourceId Identifier of the data source to filter external sheets
   * @param body External sheet search criteria and pagination parameters
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async searchExternalSheets(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("dataSourceId")
    dataSourceId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficeExternalSheet.IRequest,
  ): Promise<IPageIFlexOfficeExternalSheet.ISummary> {
    try {
      return await patchflexOfficeAdminDataSourcesDataSourceIdExternalSheets({
        admin,
        dataSourceId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve metadata of a specific external sheet linked to a data source.
   *
   * Retrieve detailed metadata for an external sheet associated with the
   * specified data source. This operation is intended for authorized users who
   * need to view file information including the sheet count and last
   * synchronization times.
   *
   * Access control restricts this operation to users with the appropriate
   * permissions (admin, editor, or viewer) as defined by the system's
   * role-based access controls. The operation references the
   * 'flex_office_external_sheets' Prisma schema table ensuring data
   * consistency.
   *
   * Invalid or missing IDs will cause appropriate error responses. The API is
   * designed to work congruently with create, update, and delete operations for
   * full lifecycle management of external sheets.
   *
   * @param connection
   * @param dataSourceId Unique identifier of the target data source
   * @param sheetId Unique identifier of the target external sheet
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":sheetId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("dataSourceId")
    dataSourceId: string & tags.Format<"uuid">,
    @TypedParam("sheetId")
    sheetId: string & tags.Format<"uuid">,
  ): Promise<IFlexOfficeExternalSheet> {
    try {
      return await getflexOfficeAdminDataSourcesDataSourceIdExternalSheetsSheetId(
        {
          admin,
          dataSourceId,
          sheetId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an external sheet metadata record for a given data source and sheet.
   *
   * Update metadata details of an existing external sheet associated with a
   * data source. Updates include file name, URL, sheet count, and last synced
   * timestamp.
   *
   * This operation mandates authorization of admin or editor roles, enforcing
   * access control policies. It aligns with the 'flex_office_external_sheets'
   * Prisma table schema for accurate data manipulation.
   *
   * The API supports concurrency checks and rejects invalid updates with
   * appropriate error responses.
   *
   * @param connection
   * @param dataSourceId Unique identifier of the target data source
   * @param sheetId Unique identifier of the target external sheet
   * @param body External sheet update data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":sheetId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("dataSourceId")
    dataSourceId: string & tags.Format<"uuid">,
    @TypedParam("sheetId")
    sheetId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficeExternalSheet.IUpdate,
  ): Promise<IFlexOfficeExternalSheet> {
    try {
      return await putflexOfficeAdminDataSourcesDataSourceIdExternalSheetsSheetId(
        {
          admin,
          dataSourceId,
          sheetId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete an external sheet record from a data source.
   *
   * Soft delete an external sheet linked to a data source by marking it as
   * deleted via the 'deleted_at' timestamp. This operation supports
   * auditability by avoiding physical deletion.
   *
   * Only authorized admin or editor users can perform this operation to ensure
   * data integrity and compliance.
   *
   * It complements create and update operations providing a full lifecycle
   * management API for external sheets.
   *
   * @param connection
   * @param dataSourceId Unique identifier of the target data source
   * @param sheetId Unique identifier of the target external sheet
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":sheetId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("dataSourceId")
    dataSourceId: string & tags.Format<"uuid">,
    @TypedParam("sheetId")
    sheetId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteflexOfficeAdminDataSourcesDataSourceIdExternalSheetsSheetId(
        {
          admin,
          dataSourceId,
          sheetId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
