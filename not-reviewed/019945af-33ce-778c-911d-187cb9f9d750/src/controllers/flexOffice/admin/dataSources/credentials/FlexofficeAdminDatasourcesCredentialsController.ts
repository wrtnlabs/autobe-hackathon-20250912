import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postflexOfficeAdminDataSourcesDataSourceIdCredentials } from "../../../../../providers/postflexOfficeAdminDataSourcesDataSourceIdCredentials";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patchflexOfficeAdminDataSourcesDataSourceIdCredentials } from "../../../../../providers/patchflexOfficeAdminDataSourcesDataSourceIdCredentials";
import { getflexOfficeAdminDataSourcesDataSourceIdCredentialsCredentialId } from "../../../../../providers/getflexOfficeAdminDataSourcesDataSourceIdCredentialsCredentialId";
import { putflexOfficeAdminDataSourcesDataSourceIdCredentialsCredentialId } from "../../../../../providers/putflexOfficeAdminDataSourcesDataSourceIdCredentialsCredentialId";
import { deleteflexOfficeAdminDataSourcesDataSourceIdCredentialsCredentialId } from "../../../../../providers/deleteflexOfficeAdminDataSourcesDataSourceIdCredentialsCredentialId";

import { IFlexOfficeDataSourceCredential } from "../../../../../api/structures/IFlexOfficeDataSourceCredential";
import { IPageIFlexOfficeDataSourceCredential } from "../../../../../api/structures/IPageIFlexOfficeDataSourceCredential";

@Controller("/flexOffice/admin/dataSources/:dataSourceId/credentials")
export class FlexofficeAdminDatasourcesCredentialsController {
  /**
   * Create a new credential for a data source.
   *
   * This API endpoint enables administrators to add a new authentication
   * credential for an existing data source.
   *
   * Credentials include OAuth2 tokens, API keys, or other secret tokens
   * granting access to external databases or services.
   *
   * The creation request must include all necessary credential details
   * according to the IFlexOfficeDataSourceCredential.ICreate schema.
   *
   * Upon success, the endpoint returns the full credential object including
   * identifiers and timestamps.
   *
   * Being a sensitive operation, only admin users can perform credential
   * creation to ensure security and compliance.
   *
   * Related endpoints allow searching credentials, retrieving details for
   * individual credentials, or deleting them.
   *
   * Errors may arise from invalid input data or unauthorized access attempts.
   *
   * The operation uses the POST method with a detailed request body and returns
   * the created resource in the response.
   *
   * @param connection
   * @param dataSourceId Unique identifier of the data source to add a
   *   credential for
   * @param body Creation info of the new data source credential
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("dataSourceId")
    dataSourceId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficeDataSourceCredential.ICreate,
  ): Promise<IFlexOfficeDataSourceCredential> {
    try {
      return await postflexOfficeAdminDataSourcesDataSourceIdCredentials({
        admin,
        dataSourceId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search credentials for a specific data source.
   *
   * This API endpoint allows an administrator to search and retrieve all
   * credentials linked to a specific data source.
   *
   * Credentials encompass various authentication tokens or keys required for
   * connecting to external data sources such as databases or cloud services.
   *
   * Users can supply complex search criteria including filtering by credential
   * type, expiration dates, or activity status.
   *
   * Response data is paginated to efficiently handle potentially large sets of
   * credentials.
   *
   * Security considerations require that only users with admin roles can access
   * credential details because they hold sensitive authentication information.
   *
   * This API supports usage scenarios where administrators need to audit,
   * update, or manage authentication credentials securely.
   *
   * It is related to endpoints creating new credentials or fetching individual
   * credential details.
   *
   * The request body defines the search and pagination parameters, while the
   * response includes paginated credential summaries.
   *
   * @param connection
   * @param dataSourceId Unique identifier of the data source to retrieve
   *   credentials for
   * @param body Search criteria and pagination parameters for data source
   *   credentials
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("dataSourceId")
    dataSourceId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficeDataSourceCredential.IRequest,
  ): Promise<IPageIFlexOfficeDataSourceCredential.ISummary> {
    try {
      return await patchflexOfficeAdminDataSourcesDataSourceIdCredentials({
        admin,
        dataSourceId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information of a data source credential.
   *
   * This API endpoint returns detailed information about a specific credential
   * used to access a linked data source.
   *
   * Credentials contain sensitive authentication tokens necessary for
   * connecting to external data sources such as databases or online
   * spreadsheets.
   *
   * The operation requires both the unique identifier of the data source and
   * the credential itself to ensure scoped and secure access.
   *
   * Users invoking this endpoint must hold admin privileges due to the
   * sensitive nature of the data.
   *
   * This operation complements endpoints that list credentials and allow
   * creation or modification of credentials.
   *
   * Potential errors include invalid identifier parameters or permission
   * denials.
   *
   * No request body is required; the response returns a full credential object.
   *
   * @param connection
   * @param dataSourceId Unique identifier of the data source to which the
   *   credential belongs
   * @param credentialId Unique identifier of the credential to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":credentialId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("dataSourceId")
    dataSourceId: string & tags.Format<"uuid">,
    @TypedParam("credentialId")
    credentialId: string & tags.Format<"uuid">,
  ): Promise<IFlexOfficeDataSourceCredential> {
    try {
      return await getflexOfficeAdminDataSourcesDataSourceIdCredentialsCredentialId(
        {
          admin,
          dataSourceId,
          credentialId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update credential details for a specific data source.
   *
   * Update a credential associated with a data source in the FlexOffice backend
   * system. This operation targets the flex_office_data_source_credentials
   * table, which stores authentication credentials like OAuth2 tokens or API
   * keys for external data sources.
   *
   * The update requires precise identification via the dataSourceId and
   * credentialId path parameters.
   *
   * Users with appropriate authorization can modify credential_type,
   * credential_value, and expires_at for improved security or credential
   * refresh. The system maintains audit timestamps created_at and updated_at
   * automatically.
   *
   * Security is critical as credentials grant access to external databases;
   * thus, strict validation and role-based access control apply. Errors for
   * invalid IDs or unauthorized attempts will be returned accordingly.
   *
   * Related operations include creating new credentials, deleting credentials,
   * and managing data sources themselves.
   *
   * @param connection
   * @param dataSourceId Unique identifier of the data source to which the
   *   credential belongs
   * @param credentialId Unique identifier of the credential to update
   * @param body Credential update payload containing type, value, and
   *   expiration
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":credentialId")
  public async updateCredential(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("dataSourceId")
    dataSourceId: string & tags.Format<"uuid">,
    @TypedParam("credentialId")
    credentialId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficeDataSourceCredential.IUpdate,
  ): Promise<IFlexOfficeDataSourceCredential> {
    try {
      return await putflexOfficeAdminDataSourcesDataSourceIdCredentialsCredentialId(
        {
          admin,
          dataSourceId,
          credentialId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Erase a credential from a data source permanently.
   *
   * Erase a credential for a given data source identified by dataSourceId and
   * credentialId. This operation deletes the credential record permanently from
   * the flex_office_data_source_credentials table.
   *
   * Due to the sensitive nature of credentials controlling access to external
   * data sources, this operation is restricted to authorized roles (admin,
   * editor).
   *
   * The operation ensures no residual data remains after deletion, supporting
   * security compliance.
   *
   * Related operations include creating and updating credentials and managing
   * data sources.
   *
   * @param connection
   * @param dataSourceId Unique identifier of the data source owning the
   *   credential
   * @param credentialId Unique identifier of the credential to erase
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":credentialId")
  public async eraseCredential(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("dataSourceId")
    dataSourceId: string & tags.Format<"uuid">,
    @TypedParam("credentialId")
    credentialId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteflexOfficeAdminDataSourcesDataSourceIdCredentialsCredentialId(
        {
          admin,
          dataSourceId,
          credentialId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
