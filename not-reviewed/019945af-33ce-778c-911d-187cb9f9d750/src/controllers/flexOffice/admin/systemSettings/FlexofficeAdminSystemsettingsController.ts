import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postflexOfficeAdminSystemSettings } from "../../../../providers/postflexOfficeAdminSystemSettings";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchflexOfficeAdminSystemSettings } from "../../../../providers/patchflexOfficeAdminSystemSettings";
import { getflexOfficeAdminSystemSettingsId } from "../../../../providers/getflexOfficeAdminSystemSettingsId";
import { putflexOfficeAdminSystemSettingsId } from "../../../../providers/putflexOfficeAdminSystemSettingsId";
import { deleteflexOfficeAdminSystemSettingsId } from "../../../../providers/deleteflexOfficeAdminSystemSettingsId";

import { IFlexOfficeSystemSettings } from "../../../../api/structures/IFlexOfficeSystemSettings";
import { IPageIFlexOfficeSystemSettings } from "../../../../api/structures/IPageIFlexOfficeSystemSettings";

@Controller("/flexOffice/admin/systemSettings")
export class FlexofficeAdminSystemsettingsController {
  /**
   * Create a new FlexOffice system setting configuration.
   *
   * Create a new FlexOffice system setting record.
   *
   * The system setting represents a global configuration parameter.
   *
   * Admin role required.
   *
   * The submitted data must include a unique key and can optionally contain a
   * value and description.
   *
   * The system will return the newly created setting including its generated ID
   * and timestamps.
   *
   * @param connection
   * @param body System setting creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IFlexOfficeSystemSettings.ICreate,
  ): Promise<IFlexOfficeSystemSettings> {
    try {
      return await postflexOfficeAdminSystemSettings({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a filtered, paginated list of FlexOffice system settings.
   *
   * Retrieve a filtered and paginated list of FlexOffice system settings from
   * the database. This operation supports advanced query parameters to filter
   * by configuration key or other properties.
   *
   * The flex_office_system_settings table contains global system parameters and
   * feature toggles crucial for system behavior, managed by administrators.
   *
   * Security considerations: access is typically restricted to system
   * administrators only to prevent unauthorized changes to critical system
   * settings.
   *
   * This operation returns system settings summaries optimized for list
   * displays to aid in quick configuration reviews.
   *
   * Pagination and sorting parameters enable efficient browsing through
   * potentially numerous configuration entries.
   *
   * @param connection
   * @param body Filter and pagination criteria for system settings search
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IFlexOfficeSystemSettings.IRequest,
  ): Promise<IPageIFlexOfficeSystemSettings.ISummary> {
    try {
      return await patchflexOfficeAdminSystemSettings({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information of a FlexOffice system setting by ID.
   *
   * Get detailed information for a specific FlexOffice system setting
   * identified by its unique ID.
   *
   * This entity represents global configuration items crucial for system
   * operation and management.
   *
   * Access restricted to admin users for security.
   *
   * Returns a detailed object including key, value, description, and timestamps
   * for creation and update.
   *
   * @param connection
   * @param id Unique identifier of the system setting
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IFlexOfficeSystemSettings> {
    try {
      return await getflexOfficeAdminSystemSettingsId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing FlexOffice system setting by ID.
   *
   * Update an existing FlexOffice system setting identified by ID.
   *
   * Allows modifying configuration key, value, and description.
   *
   * Admin permissions required.
   *
   * Returns updated system setting with the latest data and timestamps.
   *
   * @param connection
   * @param id Unique identifier of the system setting to update
   * @param body Fields to update in the system setting
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficeSystemSettings.IUpdate,
  ): Promise<IFlexOfficeSystemSettings> {
    try {
      return await putflexOfficeAdminSystemSettingsId({
        admin,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a system configuration setting by ID.
   *
   * This DELETE operation removes a specific system configuration setting
   * identified by its unique ID from the FlexOffice backend database. The
   * operation impacts the flex_office_system_settings table which maintains
   * key-value pairs representing global system parameters.
   *
   * Only users with administrative privileges should be authorized to perform
   * this deletion to prevent accidental or malicious removal of crucial system
   * settings. The deletion is permanent and cleans the record entirely from the
   * database.
   *
   * No request body is needed since deletion is by resource ID path parameter.
   *
   * Successful execution returns a success status without a response body. Any
   * errors (such as if the ID is not found) should be handled gracefully by the
   * backend with appropriate HTTP error codes.
   *
   * This operation requires a path parameter specifying the target system
   * configuration setting ID as a UUID string.
   *
   * @param connection
   * @param id Unique identifier of the system setting to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async eraseSystemSetting(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteflexOfficeAdminSystemSettingsId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
