import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { deleteflexOfficeAdminPageCommentsPageCommentId } from "../../../../providers/deleteflexOfficeAdminPageCommentsPageCommentId";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";

@Controller("/flexOffice/admin/pageComments/:pageCommentId")
export class FlexofficeAdminPagecommentsController {
  /**
   * Delete a FlexOffice page comment by its ID.
   *
   * This operation permanently deletes a page comment identified by its unique
   * ID from the flex_office_page_comments table in the Prisma schema. It
   * supports collaboration workflows by enabling authorized users to remove
   * inappropriate or obsolete comments associated with FlexOffice UI pages.
   *
   * Access is restricted to authorized roles such as admin, editor, or viewer
   * depending on permissions. The path parameter pageCommentId specifies the
   * target comment for deletion.
   *
   * No request body is required or accepted. This performs a hard delete and
   * the record will be unrecoverable.
   *
   * Related endpoints allow listing comments for a page, retrieving individual
   * comments, and creating new comments.
   *
   * Proper error handling includes validation of comment existence and
   * authorization verification before deletion.
   *
   * @param connection
   * @param pageCommentId Unique identifier of the page comment to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("pageCommentId")
    pageCommentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteflexOfficeAdminPageCommentsPageCommentId({
        admin,
        pageCommentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
