import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchflexOfficeAdminAudits } from "../../../../providers/patchflexOfficeAdminAudits";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getflexOfficeAdminAuditsId } from "../../../../providers/getflexOfficeAdminAuditsId";

import { IPageIFlexOfficeAuditLog } from "../../../../api/structures/IPageIFlexOfficeAuditLog";
import { IFlexOfficeAuditLog } from "../../../../api/structures/IFlexOfficeAuditLog";

@Controller("/flexOffice/admin/audits")
export class FlexofficeAdminAuditsController {
  /**
   * Search and retrieve paginated list of audit logs.
   *
   * Retrieve audit log entries with comprehensive filtering, searching, and
   * pagination support.
   *
   * Audit logs include types, actors, targets, actions performed, descriptions,
   * and timestamps, ensuring a full trace of system and user events.
   *
   * Access is restricted to admin users for security and compliance.
   *
   * The request body contains search filters and pagination info allowing
   * detailed querying.
   *
   * The response returns a paged list of audit log summaries optimized for UI
   * display.
   *
   * This API supports compliance monitoring, forensic analysis, and regulatory
   * audits.
   *
   * @param connection
   * @param body Audit log search and filter parameters
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IFlexOfficeAuditLog.IRequest,
  ): Promise<IPageIFlexOfficeAuditLog.ISummary> {
    try {
      return await patchflexOfficeAdminAudits({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a single audit log entry by ID.
   *
   * Retrieve a detailed audit log entry by its unique ID from the system's
   * audit logs. Audit logs capture immutable security and system event
   * information including event type, actor role and ID, target entity details,
   * action performed, and optional descriptive text.
   *
   * This operation is critical for administrators and auditors to examine
   * compliance and security-related activities. Access control ensures only
   * authorized users can view sensitive audit information.
   *
   * It accesses the flex_office_audit_logs Prisma table, which stores
   * comprehensive audit events with timestamps and soft deletion support
   * (though soft deleted records are typically excluded).
   *
   * The endpoint takes an UUID path parameter identifying the audit log record.
   * It returns the full audit log entry if found or appropriate error if not.
   *
   * Security and authorization are paramount given the sensitive nature of
   * audit logs.
   *
   * @param connection
   * @param id Unique identifier of the audit log entry to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IFlexOfficeAuditLog> {
    try {
      return await getflexOfficeAdminAuditsId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
