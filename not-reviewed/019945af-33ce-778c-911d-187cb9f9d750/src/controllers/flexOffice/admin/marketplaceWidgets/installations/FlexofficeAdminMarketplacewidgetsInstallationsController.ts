import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchflexOfficeAdminMarketplaceWidgetsWidgetIdInstallations } from "../../../../../providers/patchflexOfficeAdminMarketplaceWidgetsWidgetIdInstallations";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { getflexOfficeAdminMarketplaceWidgetsWidgetIdInstallationsInstallationId } from "../../../../../providers/getflexOfficeAdminMarketplaceWidgetsWidgetIdInstallationsInstallationId";

import { IPageIFlexOfficeWidgetInstallation } from "../../../../../api/structures/IPageIFlexOfficeWidgetInstallation";
import { IFlexOfficeWidgetInstallation } from "../../../../../api/structures/IFlexOfficeWidgetInstallation";

@Controller("/flexOffice/admin/marketplaceWidgets/:widgetId/installations")
export class FlexofficeAdminMarketplacewidgetsInstallationsController {
  /**
   * List widget installations for a marketplace widget.
   *
   * Fetches a paginated list of UI page installations for a specific
   * marketplace widget by its UUID. Supports filtering and sorting via request
   * body parameters. Access allowed for admins and editors only. Returns
   * summarized install data paginated for client consumption.
   *
   * @param connection
   * @param widgetId Unique identifier of the marketplace widget whose
   *   installations to list
   * @param body Search and pagination parameters for widget installations
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexWidgetInstallations(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("widgetId")
    widgetId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficeWidgetInstallation.IRequest,
  ): Promise<IPageIFlexOfficeWidgetInstallation.ISummary> {
    try {
      return await patchflexOfficeAdminMarketplaceWidgetsWidgetIdInstallations({
        admin,
        widgetId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details of a widget installation.
   *
   * Retrieves detailed information of a specific widget installation identified
   * by the marketplace widget UUID and the installation UUID. For admin and
   * editor roles only. Returns all registration data including configuration,
   * installation timestamp, and soft deletion status if applicable.
   *
   * @param connection
   * @param widgetId Unique identifier of the marketplace widget
   * @param installationId Unique identifier of the widget installation
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":installationId")
  public async atWidgetInstallation(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("widgetId")
    widgetId: string & tags.Format<"uuid">,
    @TypedParam("installationId")
    installationId: string & tags.Format<"uuid">,
  ): Promise<IFlexOfficeWidgetInstallation> {
    try {
      return await getflexOfficeAdminMarketplaceWidgetsWidgetIdInstallationsInstallationId(
        {
          admin,
          widgetId,
          installationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
