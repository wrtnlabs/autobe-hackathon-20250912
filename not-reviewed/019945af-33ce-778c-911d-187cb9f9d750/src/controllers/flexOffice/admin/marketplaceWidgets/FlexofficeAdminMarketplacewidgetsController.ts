import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postflexOfficeAdminMarketplaceWidgets } from "../../../../providers/postflexOfficeAdminMarketplaceWidgets";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchflexOfficeAdminMarketplaceWidgets } from "../../../../providers/patchflexOfficeAdminMarketplaceWidgets";
import { getflexOfficeAdminMarketplaceWidgetsId } from "../../../../providers/getflexOfficeAdminMarketplaceWidgetsId";
import { putflexOfficeAdminMarketplaceWidgetsId } from "../../../../providers/putflexOfficeAdminMarketplaceWidgetsId";
import { deleteflexOfficeAdminMarketplaceWidgetsId } from "../../../../providers/deleteflexOfficeAdminMarketplaceWidgetsId";

import { IFlexOfficeMarketplaceWidget } from "../../../../api/structures/IFlexOfficeMarketplaceWidget";
import { IPageIFlexOfficeMarketplaceWidget } from "../../../../api/structures/IPageIFlexOfficeMarketplaceWidget";

@Controller("/flexOffice/admin/marketplaceWidgets")
export class FlexofficeAdminMarketplacewidgetsController {
  /**
   * Create a new marketplace widget.
   *
   * Creates a new marketplace widget in the system. The client must provide
   * detailed widget information including unique widget code, name, version,
   * and optional description.
   *
   * Only users with admin or editor roles may perform this operation. The
   * system validates the uniqueness of the widget code.
   *
   * On successful creation, the newly created widget entity is returned with
   * all details.
   *
   * This operation is part of the extensibility module's marketplace widget
   * management functionalities.
   *
   * No soft delete or versioning is involved beyond audit timestamps.
   *
   * Clients should handle error responses such as duplicate code or validation
   * failures appropriately.
   *
   * @param connection
   * @param body Creation info for a new marketplace widget
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IFlexOfficeMarketplaceWidget.ICreate,
  ): Promise<IFlexOfficeMarketplaceWidget> {
    try {
      return await postflexOfficeAdminMarketplaceWidgets({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve list of marketplace widgets with filtering, pagination, and
   * sorting.
   *
   * Retrieves a filtered, sorted, and paginated list of marketplace widgets
   * from the system. This endpoint provides advanced search capabilities to
   * find marketplace widgets by name, version, or description.
   *
   * Supports pagination parameters such as page number and size, searching by
   * keywords, and sorting by creation date or widget name.
   *
   * Only users with admin or editor roles may access this list due to the
   * sensitivity of marketplace widget management.
   *
   * Response includes summaries of marketplace widgets suitable for listings
   * and browsing.
   *
   * The operation integrates with the flex_office_marketplace_widgets table to
   * fetch current active widgets (not deleted) and includes indexes on name and
   * version for efficient querying.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for marketplace
   *   widgets filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IFlexOfficeMarketplaceWidget.IRequest,
  ): Promise<IPageIFlexOfficeMarketplaceWidget.ISummary> {
    try {
      return await patchflexOfficeAdminMarketplaceWidgets({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get marketplace widget details by ID.
   *
   * Retrieve details of a specific marketplace widget identified by the
   * provided UUID. This API fetches the full record, including widget code,
   * name, version, description, and timestamps.
   *
   * Accessible only to users with admin or editor roles. The endpoint validates
   * the ID and returns 404 if the widget does not exist.
   *
   * The operation is useful for displaying detailed widget metadata in
   * management interfaces.
   *
   * Related operations include updating or deleting marketplace widgets, and
   * listing widgets for selection.
   *
   * No request body is required for this GET operation.
   *
   * @param connection
   * @param id Unique identifier of the marketplace widget (UUID)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IFlexOfficeMarketplaceWidget> {
    try {
      return await getflexOfficeAdminMarketplaceWidgetsId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing marketplace widget.
   *
   * Updates a marketplace widget's details including its unique code, name,
   * version, and description. Only admins may perform this operation. The
   * widget is identified by UUID path parameter. Soft delete timestamps allow
   * marking the widget as archived without physical deletion. Returns the
   * updated widget details upon success.
   *
   * @param connection
   * @param id Unique identifier of the marketplace widget to update
   * @param body MarketPlace widget update data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async updateMarketplaceWidget(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficeMarketplaceWidget.IUpdate,
  ): Promise<IFlexOfficeMarketplaceWidget> {
    try {
      return await putflexOfficeAdminMarketplaceWidgetsId({
        admin,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a marketplace widget.
   *
   * Permits an admin to permanently delete a marketplace widget by specifying
   * its UUID. The deletion cannot be undone due to absence of soft delete in
   * the schema. Valid UUIDs are checked and existing references to the widget
   * are cleared as part of cleanup. Admin authorization is required.
   *
   * @param connection
   * @param id Unique identifier of the marketplace widget to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async eraseMarketplaceWidget(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteflexOfficeAdminMarketplaceWidgetsId({
        admin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
