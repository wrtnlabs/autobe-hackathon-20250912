import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postflexOfficeAdminPagesPageIdPageComments } from "../../../../../providers/postflexOfficeAdminPagesPageIdPageComments";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patchflexOfficeAdminPagesPageIdPageComments } from "../../../../../providers/patchflexOfficeAdminPagesPageIdPageComments";
import { getflexOfficeAdminPagesPageIdPageCommentsPageCommentId } from "../../../../../providers/getflexOfficeAdminPagesPageIdPageCommentsPageCommentId";
import { putflexOfficeAdminPagesPageIdPageCommentsPageCommentId } from "../../../../../providers/putflexOfficeAdminPagesPageIdPageCommentsPageCommentId";
import { deleteflexOfficeAdminPagesPageIdPageCommentsPageCommentId } from "../../../../../providers/deleteflexOfficeAdminPagesPageIdPageCommentsPageCommentId";

import { IFlexOfficePageComment } from "../../../../../api/structures/IFlexOfficePageComment";
import { IPageIFlexOfficePageComment } from "../../../../../api/structures/IPageIFlexOfficePageComment";
import { IFlexOfficePageComments } from "../../../../../api/structures/IFlexOfficePageComments";

@Controller("/flexOffice/admin/pages/:pageId/pageComments")
export class FlexofficeAdminPagesPagecommentsController {
  /**
   * Create a new comment on a specific page.
   *
   * Create a new editor comment associated with a specific FlexOffice UI page.
   * Accepts the page ID in the path parameter and comment content in the
   * request body.
   *
   * Stores comment details in the flex_office_page_comments table including
   * content, editor identity, and timestamps.
   *
   * Supports collaboration workflows by enabling users with proper roles to
   * provide feedback on UI pages.
   *
   * Returns the newly created comment including all metadata.
   *
   * Requires permissions aligned with editor roles or higher.
   *
   * Related endpoints include comment retrieval, listing, and deletion.
   *
   * @param connection
   * @param pageId Unique identifier of the FlexOffice UI page to associate the
   *   comment with
   * @param body Data for creating a new page comment
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("pageId")
    pageId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficePageComment.ICreate,
  ): Promise<IFlexOfficePageComment> {
    try {
      return await postflexOfficeAdminPagesPageIdPageComments({
        admin,
        pageId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a filtered and paginated list of comments for a specific page.
   *
   * Retrieve a filtered and paginated list of editor comments for a specified
   * FlexOffice UI page. Operates on the flex_office_page_comments table,
   * filtering comments by the page ID provided as a path parameter.
   *
   * Supports pagination, filtering by editor, date, and content search through
   * the defined request body parameters in IFlexOfficePageComment.IRequest.
   * Returns paginated comment summaries.
   *
   * Access control requires authenticated roles to view comments associated
   * with the page. Related operations include creating and deleting comments.
   *
   * Errors include invalid page ID or permission denied.
   *
   * This API endpoint plays a critical role in enabling collaboration and
   * contextual communication within the FlexOffice UI/Page Builder workflows.
   *
   * @param connection
   * @param pageId Unique identifier of the FlexOffice UI page to retrieve
   *   comments for
   * @param body Filtering, pagination, and search parameters for page comments
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("pageId")
    pageId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficePageComment.IRequest,
  ): Promise<IPageIFlexOfficePageComment.ISummary> {
    try {
      return await patchflexOfficeAdminPagesPageIdPageComments({
        admin,
        pageId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a single comment by its unique ID for a specific page.
   *
   * Retrieve detailed information of a single page comment identified by
   * pageCommentId within a specified FlexOffice UI page identified by pageId.
   * Operates on the flex_office_page_comments table.
   *
   * Returns full comment details including content, editor ID, timestamps, and
   * deletion status.
   *
   * Requires proper permissions for reading comments.
   *
   * Related endpoints include creation, listing, and deletion of page comments.
   *
   * Error handling includes validation of existence and permission checks.
   *
   * The path parameters pageId and pageCommentId uniquely identify the record.
   *
   * @param connection
   * @param pageId Unique identifier of the FlexOffice UI page
   * @param pageCommentId Unique identifier of the page comment to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":pageCommentId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("pageId")
    pageId: string & tags.Format<"uuid">,
    @TypedParam("pageCommentId")
    pageCommentId: string & tags.Format<"uuid">,
  ): Promise<IFlexOfficePageComment> {
    try {
      return await getflexOfficeAdminPagesPageIdPageCommentsPageCommentId({
        admin,
        pageId,
        pageCommentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific page comment on a UI page.
   *
   * Update an existing comment on a UI page within the FlexOffice system. This
   * operation modifies the content of the specified comment identified by
   * {pageCommentId} associated with the page {pageId}.
   *
   * Only authorized users with Editor or Admin roles can perform this update.
   * The system enforces content validation ensuring the comment text is
   * appropriate and correctly formatted.
   *
   * The underlying database table flex_office_page_comments stores comments
   * with fields for content, timestamps, and soft deletion status. This
   * operation updates the record while maintaining audit integrity via
   * updated_at timestamp.
   *
   * Clients must supply the updated comment content in the request body. The
   * API responds with the updated comment entity including metadata for client
   * synchronization and UI updates.
   *
   * @param connection
   * @param pageId Unique identifier of the target UI page
   * @param pageCommentId Unique identifier of the target comment
   * @param body Updated content for the page comment
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":pageCommentId")
  public async updatePageComment(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("pageId")
    pageId: string & tags.Format<"uuid">,
    @TypedParam("pageCommentId")
    pageCommentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficePageComments.IUpdate,
  ): Promise<IFlexOfficePageComments> {
    try {
      return await putflexOfficeAdminPagesPageIdPageCommentsPageCommentId({
        admin,
        pageId,
        pageCommentId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a specific page comment from a UI page.
   *
   * Permanently remove a page comment from a UI page in the FlexOffice
   * platform. The comment identified by {pageCommentId} under page {pageId} is
   * deleted.
   *
   * Only authorized users with admin or editor role can delete comments. This
   * operation performs a hard delete, permanently erasing the comment from the
   * database.
   *
   * There is no response body; clients should interpret a successful HTTP
   * status code as confirmation.
   *
   * @param connection
   * @param pageId Unique identifier of the target UI page
   * @param pageCommentId Unique identifier of the target comment
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":pageCommentId")
  public async erasePageComment(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("pageId")
    pageId: string & tags.Format<"uuid">,
    @TypedParam("pageCommentId")
    pageCommentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteflexOfficeAdminPagesPageIdPageCommentsPageCommentId({
        admin,
        pageId,
        pageCommentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
