import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postflexOfficeAdminPages } from "../../../../providers/postflexOfficeAdminPages";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { putflexOfficeAdminPagesPageId } from "../../../../providers/putflexOfficeAdminPagesPageId";
import { deleteflexOfficeAdminPagesPageId } from "../../../../providers/deleteflexOfficeAdminPagesPageId";

import { IFlexOfficePage } from "../../../../api/structures/IFlexOfficePage";

@Controller("/flexOffice/admin/pages")
export class FlexofficeAdminPagesController {
  /**
   * Create a new UI page in FlexOffice with specified properties such as name,
   * description, status, and optional theme reference. The created page is
   * stored in the flex_office_pages table which supports versioning, soft
   * deletion, and status lifecycle management.
   *
   * Access control checks ensure that only users with 'admin' or 'editor' roles
   * can perform this operation. The operation validates the uniqueness of the
   * page name to prevent duplicates.
   *
   * The operation maintains data integrity with timestamps and supports soft
   * deletion by not setting deleted_at on creation.
   *
   * Related operations include updating the page (PUT /pages/{pageId}),
   * deleting a page, and managing widgets on the page, as well as retrieving
   * page versions.
   *
   * Errors related to conflicts, missing parameters, or authorization will be
   * properly handled.
   *
   * @param connection
   * @param body Information required to create a UI page, including name,
   *   description, status and theme association.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IFlexOfficePage.ICreate,
  ): Promise<IFlexOfficePage> {
    try {
      return await postflexOfficeAdminPages({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing UI page.
   *
   * Update an existing FlexOffice UI page with specified properties such as
   * name, description, status, and theme. Supports validation of existence and
   * uniqueness constraints.
   *
   * Only users with 'admin' or 'editor' roles may perform this update.
   * Operation updates updated_at timestamp.
   *
   * Related operations include creating, deleting the page, and managing
   * related widgets and versions.
   *
   * Proper validations and error handling are implemented for conflicts and
   * missing resources.
   *
   * @param connection
   * @param pageId Unique identifier of the page to update
   * @param body Updated UI page data including name, description, status, and
   *   theme association.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":pageId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("pageId")
    pageId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IFlexOfficePage.IUpdate,
  ): Promise<IFlexOfficePage> {
    try {
      return await putflexOfficeAdminPagesPageId({
        admin,
        pageId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Hard delete a UI page permanently.
   *
   * Hard delete the specified UI page and all related data from the FlexOffice
   * system. This operation permanently removes the record and cannot be
   * undone.
   *
   * Only users with the admin role are authorized. Related entities such as
   * widgets, versions, and comments linked to the page will cascade delete.
   *
   * Proper error handling includes not found errors if the page does not exist.
   *
   * This operation permanently deletes data rather than soft deleting.
   *
   * @param connection
   * @param pageId Unique identifier of the page to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":pageId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("pageId")
    pageId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteflexOfficeAdminPagesPageId({
        admin,
        pageId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
