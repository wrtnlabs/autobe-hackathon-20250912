import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchflexOfficeAdminDataSourceLogs } from "../../../../providers/patchflexOfficeAdminDataSourceLogs";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getflexOfficeAdminDataSourceLogsLogId } from "../../../../providers/getflexOfficeAdminDataSourceLogsLogId";

import { IPageIFlexOfficeDataSourceLog } from "../../../../api/structures/IPageIFlexOfficeDataSourceLog";
import { IFlexOfficeDataSourceLog } from "../../../../api/structures/IFlexOfficeDataSourceLog";

@Controller("/flexOffice/admin/dataSourceLogs")
export class FlexofficeAdminDatasourcelogsController {
  /**
   * Search and retrieve a filtered, paginated list of data source logs.
   *
   * Retrieve a paginated list of data source logs from the system. Each log
   * entry records the severity, message, timestamp, and optionally the user
   * involved in the event.
   *
   * This operation supports filtering and pagination, allowing administrators
   * to monitor data source health and troubleshoot issues efficiently.
   *
   * Security considerations include limiting access to authorized users due to
   * sensitive operational details.
   *
   * The underlying data is stored in the flex_office_data_source_logs table,
   * which records event details with creation and update timestamps.
   *
   * This operation returns summarized log entries matching the search criteria.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for data source logs
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async search(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IFlexOfficeDataSourceLog.IRequest,
  ): Promise<IPageIFlexOfficeDataSourceLog.ISummary> {
    try {
      return await patchflexOfficeAdminDataSourceLogs({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed data source log entry by ID.
   *
   * Fetch detailed information of a single data source log entry specified by
   * logId. The log entry recorded event details, severity, timestamp, and
   * relevant user identification if available.
   *
   * Access to this operation should be restricted to authorized administrators.
   *
   * The underlying data is stored in the flex_office_data_source_logs table.
   *
   * Returns full log entry details for inspection.
   *
   * @param connection
   * @param logId Unique identifier of the target data source log entry
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":logId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("logId")
    logId: string & tags.Format<"uuid">,
  ): Promise<IFlexOfficeDataSourceLog> {
    try {
      return await getflexOfficeAdminDataSourceLogsLogId({
        admin,
        logId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
