import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchflexOfficeAdminPageEditors } from "../../../../providers/patchflexOfficeAdminPageEditors";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getflexOfficeAdminPageEditorsPageEditorId } from "../../../../providers/getflexOfficeAdminPageEditorsPageEditorId";

import { IPageIFlexOfficePageEditor } from "../../../../api/structures/IPageIFlexOfficePageEditor";
import { IFlexOfficePageEditor } from "../../../../api/structures/IFlexOfficePageEditor";

@Controller("/flexOffice/admin/pageEditors")
export class FlexofficeAdminPageeditorsController {
  /**
   * Search and retrieve a paginated list of active page editors.
   *
   * Get a list of page editors currently active on pages with support for
   * pagination and filtering. Each record shows editor and page associations
   * and timestamps.
   *
   * This operation allows administrators and editors to see concurrent editing
   * activity.
   *
   * Underlying data is sourced from the flex_office_page_editors table with
   * fields for page and editor references, and session timestamps.
   *
   * Returns paginated, filtered list of active page editors.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for page editors
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async search(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IFlexOfficePageEditor.IRequest,
  ): Promise<IPageIFlexOfficePageEditor.ISummary> {
    try {
      return await patchflexOfficeAdminPageEditors({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed page editor session information by ID.
   *
   * Fetch detailed info of an active or historic page editor session specified
   * by pageEditorId. Data includes page and editor references and session
   * timestamps.
   *
   * This supports collaboration management and audit functionalities.
   *
   * Data source is the flex_office_page_editors table.
   *
   * Returns full detail of the page editor session record.
   *
   * @param connection
   * @param pageEditorId Unique identifier of the target page editor session
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":pageEditorId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("pageEditorId")
    pageEditorId: string & tags.Format<"uuid">,
  ): Promise<IFlexOfficePageEditor> {
    try {
      return await getflexOfficeAdminPageEditorsPageEditorId({
        admin,
        pageEditorId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
