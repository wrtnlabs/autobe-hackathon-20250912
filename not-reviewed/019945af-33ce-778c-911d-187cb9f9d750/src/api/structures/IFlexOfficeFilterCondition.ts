import { tags } from "typia";

/**
 * Represents a filter condition applied to a chart for dynamic data querying.
 *
 * This entity is linked to a specific chart and optionally to a widget.
 *
 * It defines the filter logic expression, its enabled state, and includes audit
 * timestamps.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IFlexOfficeFilterCondition = {
  /** Unique identifier for the filter condition. */
  id: string & tags.Format<"uuid">;

  /** Identifier of the chart to which this filter condition belongs. */
  flex_office_chart_id: string & tags.Format<"uuid">;

  /**
   * Optional identifier of the widget this condition may be attached to.
   * Nullable.
   */
  flex_office_widget_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** Filter logic expression defining the filter. */
  filter_expression: string;

  /** Flag indicating if the filter condition is active. */
  enabled: boolean;

  /** Timestamp when this filter condition was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when this filter condition was last updated. */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IFlexOfficeFilterCondition {
  /**
   * Request criteria for searching and filtering filter conditions with
   * pagination support.
   */
  export type IRequest = {
    /** Optional filter expression to narrow search results. */
    filter_expression?: string | null | undefined;

    /** Optional flag to filter by enabled status. */
    enabled?: boolean | null | undefined;

    /** Optional chart ID to filter conditions. */
    flex_office_chart_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Optional widget ID to filter conditions. */
    flex_office_widget_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Optional page number for pagination. */
    page?: (number & tags.Minimum<0> & tags.MultipleOf<1>) | null | undefined;

    /** Optional limit of records per page. */
    limit?: (number & tags.Minimum<1> & tags.MultipleOf<1>) | null | undefined;
  };

  /**
   * Request body for creating a new filter condition.
   *
   * Requires chart ID, filter expression, and enabled flag.
   *
   * Optionally, a widget ID may be specified.
   */
  export type ICreate = {
    /** Identifier of the chart this filter condition applies to. */
    flex_office_chart_id: string & tags.Format<"uuid">;

    /** Optional widget ID this filter condition is associated with. */
    flex_office_widget_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Required filter expression defining the filtering logic. */
    filter_expression: string;

    /** Enabled flag indicating if this filter condition is active. */
    enabled: boolean;
  };

  /**
   * Request body to update an existing filter condition. Allows partial
   * updates.
   *
   * All fields optional.
   */
  export type IUpdate = {
    /** Optional chart ID. Normally not updated. */
    flex_office_chart_id?: (string & tags.Format<"uuid">) | undefined;

    /** Optional widget ID this filter condition is associated with. */
    flex_office_widget_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Optional filter expression update. */
    filter_expression?: string | undefined;

    /** Optional enabled flag update. */
    enabled?: boolean | undefined;
  };

  /**
   * Summary information of a filter condition used in FlexOffice analytics
   * charts. Includes IDs, enabled flag, and creation timestamp.
   */
  export type ISummary = {
    /** Unique identifier of the filter condition. */
    id: string & tags.Format<"uuid">;

    /** Chart ID this filter condition belongs to. */
    flex_office_chart_id: string & tags.Format<"uuid">;

    /** Flag indicating if the filter condition is active. */
    enabled: boolean;

    /** Timestamp of filter condition creation. */
    created_at: string & tags.Format<"date-time">;
  };
}
