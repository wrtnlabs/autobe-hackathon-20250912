import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * FlexOffice administrator user entity storing unique email and audit
 * timestamps. Used for system-level admin access and management.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IFlexOfficeAdmin = {
  /** Unique identifier of the admin user. */
  id: string & tags.Format<"uuid">;

  /** Email address of the admin user for login and contact. */
  email: string;

  /** Timestamp of when the admin user was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of when the admin user was last updated. */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IFlexOfficeAdmin {
  /**
   * Payload for creating a new admin user, including email and plaintext
   * password.
   */
  export type ICreate = {
    /** Unique email address for the new admin. */
    email: string;

    /** Plaintext password to generate a secure password hash. */
    password: string;
  };

  /** Admin login credentials with email and password. */
  export type ILogin = {
    /** Admin user's email for login. */
    email: string;

    /** Admin user's password for authentication. */
    password: string;
  };

  /** Request payload to refresh JWT tokens for admin sessions. */
  export type IRefresh = {
    /** Valid refresh token for renewing JWT tokens. */
    refresh_token: string;
  };

  /** Response schema for admin authorization containing JWT tokens. */
  export type IAuthorized = {
    /** Unique identifier of the authenticated admin user. */
    id: string & tags.Format<"uuid">;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Request schema for updating FlexOffice admin user details. Properties are
   * optional to allow partial updates.
   */
  export type IUpdate = {
    /** Administrator's login email address, unique across the system. */
    email?: string | undefined;

    /**
     * Hashed password for authentication purposes, never storing plain text
     * passwords.
     */
    password_hash?: string | undefined;
  };

  /** Request parameters for searching and paginating admin users. */
  export type IRequest = {
    /** Page number to retrieve. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Number of records per page. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Search string to filter admin users. */
    search?: string | undefined;
  };

  /**
   * Summary view of FlexOffice administrator user with core identifying
   * fields.
   */
  export type ISummary = {
    /** Unique identifier of the admin user. */
    id: string & tags.Format<"uuid">;

    /** Email address of the admin user. */
    email: string;
  };
}
