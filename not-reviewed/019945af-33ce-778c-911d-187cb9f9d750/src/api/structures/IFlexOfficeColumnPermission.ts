import { tags } from "typia";

/**
 * Defines fine-grained access control permissions scoped to specific columns
 * within database tables.
 *
 * This entity specifies which columns are controlled under a particular table
 * permission context.
 *
 * Included are auditing timestamps and soft deletion capability allowing
 * recoverability and historic tracking.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IFlexOfficeColumnPermission = {
  /**
   * Primary Key.
   *
   * Unique identifier of the column permission.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Referenced table permission's flex_office_table_permissions.id.
   *
   * Foreign key referencing the parent table permission.
   */
  table_permission_id: string & tags.Format<"uuid">;

  /**
   * Name of the column this permission controls.
   *
   * Specifies the database column for which this permission applies.
   */
  column_name: string;

  /** Record creation timestamp. */
  created_at: string & tags.Format<"date-time">;

  /** Record last update timestamp. */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft deletion timestamp.
   *
   * Marks the record as deleted when not null.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IFlexOfficeColumnPermission {
  /** Request parameters for searching and paginating column permissions. */
  export type IRequest = {
    /** Optional filter by column_name. */
    column_name?: string | undefined;

    /** Page number for pagination. */
    page?: (number & tags.Minimum<0>) | null | undefined;

    /** Page limit (number of items) for pagination. */
    limit?: (number & tags.Minimum<0>) | null | undefined;
  };

  /** Request body for creating a new column permission. */
  export type ICreate = {
    /** Referenced table permission's flex_office_table_permissions.id. */
    table_permission_id: string & tags.Format<"uuid">;

    /** Name of the column this permission controls. */
    column_name: string;
  };

  /** Request body to update the name of an existing column permission. */
  export type IUpdate = {
    /**
     * Name of the column this permission controls.
     *
     * Specifies the column name to modify or leave unchanged.
     */
    column_name: string;
  };

  /**
   * Summary of a column permission entity linking a permission to a specific
   * column in a database table.
   *
   * Provides essential identifiers and auditing timestamps for managing
   * granular access control at the column level.
   *
   * Supports administrative overview and editing of column-specific
   * permissions.
   */
  export type ISummary = {
    /**
     * Primary key UUID for the column permission record.
     *
     * Uniquely identifies this column-level permission within the system.
     *
     * Used for referencing and management operations.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Foreign key linking this column permission to a parent table
     * permission record.
     *
     * Establishes the hierarchical association indicating the table context
     * of this column permission.
     *
     * Ensures enforcement of column-level access controls within the scope
     * of table permissions.
     */
    table_permission_id: string & tags.Format<"uuid">;

    /**
     * Name of the database column to which this permission applies.
     *
     * This string specifies the exact column within the table for granular
     * access control.
     *
     * Key to defining fine-grained security restrictions.
     */
    column_name: string;

    /**
     * Timestamp recording when the column permission entry was created.
     *
     * Important for audit trails and historical review of access control
     * changes.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp indicating the last modification time of this column
     * permission.
     *
     * Reflects recent updates or validation activities related to access
     * rights.
     */
    updated_at: string & tags.Format<"date-time">;
  };
}
