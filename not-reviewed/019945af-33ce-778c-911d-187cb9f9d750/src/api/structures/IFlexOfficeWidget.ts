import { tags } from "typia";

/**
 * A UI widget placed on a UI page within the FlexOffice system, storing widget
 * metadata and configuration.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IFlexOfficeWidget = {
  /** Unique identifier of the UI widget */
  id: string & tags.Format<"uuid">;

  /** Identifier of the UI page this widget belongs to */
  flex_office_page_id: string & tags.Format<"uuid">;

  /** Type of the widget, e.g., table, chart, filter, button, form */
  widget_type: string;

  /** Name or label of the widget */
  name: string;

  /** JSON string storing widget-specific configuration */
  configuration?: string | null | undefined;

  /** Timestamp when the widget was created */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the widget was last updated */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp for soft deletion */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IFlexOfficeWidget {
  /** Request parameters for searching and paginating UI widgets. */
  export type IRequest = {
    /** Optional ID of the page to filter widgets */
    page_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Type filter for widgets */
    widget_type?: string | null | undefined;

    /** Name filter for widgets */
    name?: string | null | undefined;

    /**
     * Filter by soft-deleted status; true to filter deleted, false for
     * active, null for all
     */
    deleted_at?: boolean | null | undefined;

    /** Page number for pagination */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /** Record limit per page */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /** Object defining sort order by fields with "asc" or "desc" values */
    orderBy?:
      | {
          [key: string]: "asc" | "desc";
        }
      | undefined;
  };

  /** Request body schema for creating a UI widget. */
  export type ICreate = {
    /** Required ID of the page the widget belongs to */
    flex_office_page_id: string & tags.Format<"uuid">;

    /** Required type of the widget (table, chart, filter, button, form) */
    widget_type: string;

    /** Required name of the widget */
    name: string;

    /** Optional JSON string for widget configuration */
    configuration?: string | null | undefined;
  };

  /**
   * Partial update of a UI widget entity with optional fields for page id,
   * type, name, and configuration.
   */
  export type IUpdate = {
    /** The page this widget belongs to, referencing flex_office_pages.id. */
    flex_office_page_id?: (string & tags.Format<"uuid">) | undefined;

    /** Type of the widget, e.g., table, chart, filter, button, form. */
    widget_type?: string | undefined;

    /** Name or label of the widget. */
    name?: string | undefined;

    /** JSON string storing widget-specific configuration details. */
    configuration?: string | null | undefined;
  };

  /**
   * Summary representation of FlexOffice UI widget including ID, type, name,
   * and timestamps.
   */
  export type ISummary = {
    /**
     * Unique identifier of the widget as UUID.
     *
     * Represents a UI widget placed on a page.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Type of widget, e.g., table, chart, filter, etc.
     *
     * Defines what the widget displays or controls.
     */
    widget_type: string;

    /** Widget name or label for display. */
    name: string;

    /** Timestamp of widget creation in ISO 8601 format. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp of last widget update in ISO 8601 format. */
    updated_at: string & tags.Format<"date-time">;
  };
}
