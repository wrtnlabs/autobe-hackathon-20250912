import { tags } from "typia";

/**
 * Represents a credential associated with a FlexOffice data source. Holds
 * authentication tokens such as OAuth2 tokens or API keys and their relevant
 * metadata.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IFlexOfficeDataSourceCredential = {
  /** Unique identifier of the data source credential. */
  id: string & tags.Format<"uuid">;

  /** Foreign key to the data source. */
  flex_office_data_source_id: string & tags.Format<"uuid">;

  /** Credential type, e.g. 'oauth2', 'api_key'. */
  credential_type: string;

  /** Credential token or key value. */
  credential_value: string;

  /** Expiration date-time in ISO 8601 format or null if not set. */
  expires_at: (string & tags.Format<"date-time">) | null;

  /** Creation timestamp. */
  created_at: string & tags.Format<"date-time">;

  /** Last update timestamp. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp if any, null when active. */
  deleted_at: (string & tags.Format<"date-time">) | null;
};
export namespace IFlexOfficeDataSourceCredential {
  /**
   * Search and pagination request body schema for filtering data source
   * credentials.
   */
  export type IRequest = {
    /** Filter string or expression for querying credentials. */
    filter?: string | null | undefined;

    /** Page number for paginated results. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<0>) | null | undefined;

    /** Maximum number of records per page. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Sort by field name. */
    sort_by?: string | null | undefined;

    /** Sort order: ascending 'asc' or descending 'desc'. */
    order?: "asc" | "desc" | null | undefined;
  };

  /**
   * Data required to create a new data source credential. Includes
   * authentication type, secret value, and optional expiration date.
   */
  export type ICreate = {
    /** Foreign key to the data source. */
    flex_office_data_source_id: string & tags.Format<"uuid">;

    /** Credential type, e.g. 'oauth2', 'api_key'. */
    credential_type: string;

    /** Credential token or key value. */
    credential_value: string;

    /** Optional expiration date-time in ISO 8601 format or null if not set. */
    expires_at: (string & tags.Format<"date-time">) | null;
  };

  /**
   * Fields that can be updated for a data source credential. All properties
   * are optional to allow partial updates.
   */
  export type IUpdate = {
    /** Credential type, e.g. 'oauth2', 'api_key'. */
    credential_type?: string | undefined;

    /** Credential token or key value. */
    credential_value?: string | undefined;

    /** Optional expiration date-time in ISO 8601 format or null if not set. */
    expires_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Represents summarized information of data source credential.
   *
   * Contains limited fields for overview and listing purposes.
   */
  export type ISummary = {
    /** Unique identifier of the credential. */
    id: string;

    /** Type of the credential. */
    credential_type: string;

    /** Expiration date/time of the credential (nullable). */
    expires_at: (string & tags.Format<"date-time">) | null;

    /** Record creation timestamp. */
    created_at: string & tags.Format<"date-time">;

    /** Record last update timestamp. */
    updated_at: string & tags.Format<"date-time">;

    /** Soft deletion timestamp for the credential, nullable. */
    deleted_at: (string & tags.Format<"date-time">) | null;
  };
}
