import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Viewer users with read-only access and audit timestamps.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IFlexOfficeViewer = {
  /** Unique identifier of the viewer. */
  id: string & tags.Format<"uuid">;

  /** Full name of the viewer user. */
  name: string;

  /** Email address of the viewer user. */
  email: string;

  /** Account creation timestamp. */
  created_at: string & tags.Format<"date-time">;

  /** Last update timestamp. */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IFlexOfficeViewer {
  /** Viewer account creation payload. */
  export type ICreate = {
    /** Full name for viewer registration. */
    name: string;

    /** Viewer email address. */
    email: string;

    /** Plaintext password for account. */
    password: string;
  };

  /** Authorized response for viewer including JWT tokens. */
  export type IAuthorized = {
    /** Unique identifier of the authenticated viewer. */
    id: string & tags.Format<"uuid">;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /** Viewer user login credentials. */
  export type ILogin = {
    /** Viewer login email. */
    email: string;

    /** Password for login. */
    password: string;
  };

  /** Refresh token request for viewer sessions. */
  export type IRefresh = {
    /** Refresh token to regain access. */
    refresh_token: string;
  };

  /** Request parameters for viewer user search and pagination. */
  export type IRequest = {
    /** Page number for pagination. */
    page?: (number & tags.Type<"int32">) | undefined;

    /** Record limit per page. */
    limit?: (number & tags.Type<"int32">) | undefined;

    /** Search term for filtering viewers. */
    search?: string | undefined;
  };

  /** Update Viewer user data. All fields are optional and nullable. */
  export type IUpdate = {
    /** Full name of the viewer for display and identification. */
    name?: string | null | undefined;

    /** Viewer's login email, unique within the system. */
    email?: string | null | undefined;

    /** Hashed credential for authentication. Do not store plain passwords. */
    password_hash?: string | null | undefined;
  };

  /** Summary view of viewer user accounts. */
  export type ISummary = {
    /** Identifier of viewer user. */
    id: string & tags.Format<"uuid">;

    /** Viewer full name. */
    name: string;

    /** Viewer email. */
    email: string;
  };
}
