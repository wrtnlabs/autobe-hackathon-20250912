import { tags } from "typia";

/**
 * Defines row-level access control permissions by associating filtering
 * conditions with table permissions.
 *
 * These permissions allow fine-grained control over data visibility at the row
 * level within database tables.
 *
 * Includes auditing information and support for soft deletion.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IFlexOfficeRowPermission = {
  /**
   * Primary Key.
   *
   * Unique identifier of the row permission.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Referenced table permission's flex_office_table_permissions.id.
   *
   * Foreign key to the parent table permission schema.
   */
  table_permission_id: string & tags.Format<"uuid">;

  /**
   * Filter condition as a SQL WHERE clause or expression for row-level access
   * control.
   *
   * Defines the filter expression applied at row level.
   */
  filter_condition: string;

  /** Record creation timestamp. */
  created_at: string & tags.Format<"date-time">;

  /** Record last update timestamp. */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft deletion timestamp for record recovery.
   *
   * Nullable timestamp indicating soft deleted records.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IFlexOfficeRowPermission {
  /**
   * Request payload for searching and paginating row permissions.
   *
   * Supports optional filter_condition matching and pagination parameters
   * like page number and page size.
   *
   * Used for flexible querying in administration interfaces.
   */
  export type IRequest = {
    /**
     * Optional filter by partial filter_condition string.
     *
     * Used to query row permissions matching conditions.
     */
    filter_condition?: string | null | undefined;

    /** Optional pagination parameters indicating page number. */
    page?: number | null | undefined;

    /**
     * Optional pagination parameter limiting number of records returned per
     * page.
     */
    limit?: number | null | undefined;
  };

  /**
   * Request payload for creating a new row permission.
   *
   * Includes mandatory linkage to a table permission and specification of the
   * filter condition to enforce.
   */
  export type ICreate = {
    /**
     * Referenced table permission's flex_office_table_permissions.id.
     *
     * Must be provided to link this row permission to a table permission.
     */
    table_permission_id: string & tags.Format<"uuid">;

    /**
     * Filter condition as a SQL WHERE clause or expression.
     *
     * Defines the row-level access filter.
     */
    filter_condition: string;
  };

  /**
   * Update input for FlexOffice Row Permission.
   *
   * Allows partial update of row-level filtering conditions.
   *
   * Only filter_condition and updated_at can be updated.
   *
   * All other properties are immutable through this update schema.
   */
  export type IUpdate = {
    /**
     * Filter condition as a SQL WHERE clause or expression for row-level
     * access control.
     */
    filter_condition: string;

    /** Timestamp of last update. */
    updated_at: string & tags.Format<"date-time">;
  };

  /**
   * Summary information for a row-level permission entity representing access
   * control filter conditions applied to a specific database table.
   *
   * This summary aids in administration and enforcement of granular row-based
   * security policies within FlexOffice.
   */
  export type ISummary = {
    /**
     * Primary UUID identifier for the row-level permission record.
     *
     * Serves as the main key for managing row permissions within the
     * system.
     *
     * Referenced in access control enforcement and administrative APIs.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Associative foreign key linking this row permission to its parent
     * table permission.
     *
     * Defines the context in which the row-level filter condition applies.
     *
     * Crucial for implementing row-based data filtering and security.
     */
    table_permission_id: string & tags.Format<"uuid">;

    /**
     * SQL expression or filter that determines access control at the row
     * level.
     *
     * Defines the logical condition filtering rows visible or accessible to
     * the user.
     *
     * Essential for fine-grained data access and compliance enforcement.
     */
    filter_condition: string;

    /**
     * Timestamp when the row permission was originally created.
     *
     * Records when the access control policy was first applied to this
     * filter.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp of the most recent update to the row permission.
     *
     * Indicates when filtering rules or conditions were last modified to
     * adapt to business needs.
     */
    updated_at: string & tags.Format<"date-time">;
  };
}
