import { tags } from "typia";

/**
 * Stores configuration and metadata for external data sources in FlexOffice,
 * including connection details, type classification, and activation status.
 * Serves as the central registry enabling unified access and management of
 * diverse external databases and spreadsheets.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IFlexOfficeDataSource = {
  /** Primary Key identifier for the data source. */
  id: string & tags.Format<"uuid">;

  /** Human-readable unique name for the data source. */
  name: string;

  /** Type category such as 'mysql', 'postgresql', 'google_sheet', or 'excel'. */
  type: string;

  /** Structured connection details or credentials reference. */
  connection_info: string;

  /**
   * Flag indicating if the data source is active and available for
   * synchronization.
   */
  is_active: boolean;

  /** Timestamp when this data source record was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when this data source record was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Timestamp indicating when this data source was soft deleted, if
   * applicable.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IFlexOfficeDataSource {
  /**
   * Search and filtering parameters for FlexOffice data sources
   *
   * Allows filtering by name, type, and active status Supports pagination
   * through page and limit
   */
  export type IRequest = {
    /** Optional name filter for data sources */
    name?: string | null | undefined;

    /**
     * Optional data source type filter, e.g., mysql, postgresql,
     * google_sheet, excel
     */
    type?: string | null | undefined;

    /** Filter for active data sources */
    is_active?: boolean | null | undefined;

    /** Page number for pagination */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /** Limit number of records per page */
    limit?: (number & tags.Type<"int32">) | null | undefined;
  };

  /**
   * Request body schema for creating a new external data source configuration
   * in the FlexOffice system.
   */
  export type ICreate = {
    /** Human-readable unique name for the data source. */
    name: string;

    /**
     * Type category such as 'mysql', 'postgresql', 'google_sheet', or
     * 'excel'.
     */
    type: string;

    /** Structured connection details or credentials reference. */
    connection_info: string;

    /**
     * Flag indicating if the data source is active and available for
     * synchronization.
     */
    is_active: boolean;

    /**
     * Timestamp indicating when this data source was soft deleted, if
     * applicable.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Request body schema for updating an existing external data source
   * configuration. All fields are optional and nullable except is_active
   * which is boolean non-nullable.
   */
  export type IUpdate = {
    /** Human-readable unique name for the data source. */
    name?: string | null | undefined;

    /**
     * Type category such as 'mysql', 'postgresql', 'google_sheet', or
     * 'excel'.
     */
    type?: string | null | undefined;

    /** Structured connection details or credentials reference. */
    connection_info?: string | null | undefined;

    /**
     * Flag indicating if the data source is active and available for
     * synchronization.
     */
    is_active?: boolean | undefined;
  };

  /**
   * Summary of external data source configuration for FlexOffice, capturing
   * key properties for list views including name, type, and active status.
   */
  export type ISummary = {
    /** Primary Key. */
    id: string & tags.Format<"uuid">;

    /** Human-readable unique name for the data source. */
    name: string;

    /**
     * Type category of the data source, such as 'mysql', 'postgresql',
     * 'google_sheet', or 'excel'.
     */
    type: string;

    /**
     * Flag indicating whether the data source is active and available for
     * synchronization.
     */
    is_active: boolean;
  };
}
