import { tags } from "typia";

/**
 * Historical snapshot of a UI page representing a version of the page's layout
 * and configuration at a point in time.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IFlexOfficePageVersion = {
  /** Unique identifier of a page version */
  id: string & tags.Format<"uuid">;

  /** Associated UI page ID */
  flex_office_page_id: string & tags.Format<"uuid">;

  /** Sequential version number */
  version_number: number & tags.Type<"int32">;

  /** Serialized JSON data of the page */
  page_data: string;

  /** Version creation timestamp */
  created_at: string & tags.Format<"date-time">;
};
export namespace IFlexOfficePageVersion {
  /**
   * Request parameters for searching UI page versions
   *
   * Supports paging, filtering, and sorting.
   */
  export type IRequest = {
    /** ID of the page to search versions for */
    pageId: string;

    /** Optional list of page IDs to filter */
    pageIds?: string[] | null | undefined;

    /** Specific version number filter */
    version_number?: (number & tags.Type<"int32">) | null | undefined;

    /** Multiple version numbers filter */
    version_numbers?: (number & tags.Type<"int32">)[] | null | undefined;

    /** Filter by matching page data */
    page_data?: string | null | undefined;

    /** Created after or equal to this date */
    created_at_gte?: (string & tags.Format<"date-time">) | null | undefined;

    /** Created before or equal to this date */
    created_at_lte?: (string & tags.Format<"date-time">) | null | undefined;

    /** Substring filter for page data */
    page_data_contains?: string | null | undefined;

    /** Sorting criteria */
    sortBy?: string | null | undefined;

    /** Page number for pagination */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /** Maximum results per page */
    limit?: (number & tags.Type<"int32">) | null | undefined;
  };

  /**
   * Summary representation of UI page version entity capturing essential
   * snapshot metadata for version control.
   */
  export type ISummary = {
    /** Primary Key. */
    id: string & tags.Format<"uuid">;

    /** Sequential version number for the snapshot. */
    version_number: number & tags.Type<"int32">;

    /** Version creation timestamp. */
    created_at: string & tags.Format<"date-time">;
  };
}
