import { tags } from "typia";

/**
 * Permission entity defining distinct access rights or actions.
 *
 * Represents system-wide permissions assignable to roles and users.
 *
 * Includes state management through active/disabled status and soft deletion
 * support.
 *
 * Critical for enforcing Role-Based Access Control (RBAC) within the FlexOffice
 * system.
 *
 * Properties:
 *
 * - `id`: Unique ID of the permission.
 * - `permission_key`: Unique key string identifying the permission.
 * - `description`: Optional detailed information about the permission.
 * - `status`: Current state of the permission.
 * - `created_at` and `updated_at`: Timestamps for audit and tracking.
 * - `deleted_at`: Soft deletion timestamp for logical removal.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IFlexOfficePermission = {
  /** Primary Key. */
  id: string & tags.Format<"uuid">;

  /** Unique permission identifier key, e.g., 'edit_pages', 'view_reports'. */
  permission_key: string;

  /** Detailed description of what this permission grants. */
  description?: string | null | undefined;

  /** Status of the permission, e.g., active or disabled. */
  status: string;

  /** Record creation timestamp. */
  created_at: string & tags.Format<"date-time">;

  /** Record last update timestamp. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft deletion timestamp for recoverability. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IFlexOfficePermission {
  /**
   * Request payload to search and paginate permission entities.
   *
   * Supports optional filtering by key name and status.
   *
   * Pagination parameters `page` and `limit` control result set.
   */
  export type IRequest = {
    /** Page number for pagination. */
    page?: number | null | undefined;

    /** Number of items per page. */
    limit?: number | null | undefined;

    /** Filter by the permission key name. */
    permission_key?: string | null | undefined;

    /** Filter by status of the permission, e.g., active, disabled. */
    status?: string | null | undefined;
  };

  /**
   * Payload to create a new permission entity.
   *
   * Requires unique permission key and status. Description is optional.
   *
   * Supports creation of system-wide permissions for RBAC enforcement.
   */
  export type ICreate = {
    /** Unique permission identifier key, e.g., 'edit_pages', 'view_reports'. */
    permission_key: string;

    /** Detailed description of what this permission grants. */
    description?: string | null | undefined;

    /** Status of the permission, e.g., active or disabled. */
    status: string;
  };

  /**
   * Partial update model for FlexOffice permissions.
   *
   * Allows changing permission_key, description, or status individually.
   *
   * @author AutoBE - https://github.com/wrtnlabs/autobe
   * @namespace AccessControl
   */
  export type IUpdate = {
    /** Unique permission identifier key, e.g., 'edit_pages', 'view_reports'. */
    permission_key?: string | undefined;

    /** Detailed description of what this permission grants. */
    description?: string | null | undefined;

    /** Status of the permission, e.g., active or disabled. */
    status?: string | undefined;
  };
}
