import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IFlexOfficeViewer } from "../../../structures/IFlexOfficeViewer";

/**
 * Join operation for flexOffice viewer role creating new viewer accounts and
 * issuing JWT tokens.
 *
 * This join API operation is designed for the viewer role in FlexOffice
 * representing authenticated users with read-only access. The operation
 * references the 'flex_office_viewers' schema for account creation.
 *
 * It expects the client to submit user registration data necessary for creating
 * a viewer profile, including the user's name, email, and authentication
 * credentials (e.g., password).
 *
 * Upon successful registration, the API issues JWT tokens that embed the viewer
 * role information and allow session management. The soft delete feature is
 * maintained by 'deleted_at'.
 *
 * Security considerations include hashing and securely storing passwords using
 * 'password_hash'.
 *
 * Related operations include login (authentication) and refresh (token
 * renewal), which must be used in conjunction for complete session management.
 *
 * @param props.connection
 * @param props.body Viewer creation info for registration, excluding sensitive
 *   tokens.
 * @setHeader token.access Authorization
 *
 * @path /auth/viewer/join
 * @accessor api.functional.auth.viewer.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** Viewer creation info for registration, excluding sensitive tokens. */
    body: IFlexOfficeViewer.ICreate;
  };
  export type Body = IFlexOfficeViewer.ICreate;
  export type Response = IFlexOfficeViewer.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/viewer/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/viewer/join";
  export const random = (): IFlexOfficeViewer.IAuthorized =>
    typia.random<IFlexOfficeViewer.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Login operation for flexOffice viewer role authenticating users and issuing
 * JWT access tokens.
 *
 * Login operation for viewers authenticating credentials and issuing access JWT
 * tokens.
 *
 * Users provide credentials like email and password. On success, JWT tokens are
 * returned embedding viewer permissions for session control.
 *
 * Security considerations include password hash verification and mitigation of
 * authentication attacks.
 *
 * Refresh operations are complementary to renew access tokens securely.
 *
 * The viewer table 'flex_office_viewers' stores user credentials and role data.
 *
 * @param props.connection
 * @param props.body Viewer login credentials required for authentication.
 * @setHeader token.access Authorization
 *
 * @path /auth/viewer/login
 * @accessor api.functional.auth.viewer.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Viewer login credentials required for authentication. */
    body: IFlexOfficeViewer.ILogin;
  };
  export type Body = IFlexOfficeViewer.ILogin;
  export type Response = IFlexOfficeViewer.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/viewer/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/viewer/login";
  export const random = (): IFlexOfficeViewer.IAuthorized =>
    typia.random<IFlexOfficeViewer.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh JWT tokens for flexOffice viewer role maintaining session continuity.
 *
 * Refresh JWT tokens operation for flexOffice viewer role renewing access
 * without full login.
 *
 * Ensures continued authenticated sessions with valid viewer permissions.
 *
 * This operation requires a valid refresh token and securely issues new tokens.
 *
 * Works closely with login and join operations in token lifecycle.
 *
 * @param props.connection
 * @param props.body Refresh token request data.
 * @setHeader token.access Authorization
 *
 * @path /auth/viewer/refresh
 * @accessor api.functional.auth.viewer.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Refresh token request data. */
    body: IFlexOfficeViewer.IRefresh;
  };
  export type Body = IFlexOfficeViewer.IRefresh;
  export type Response = IFlexOfficeViewer.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/viewer/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/viewer/refresh";
  export const random = (): IFlexOfficeViewer.IAuthorized =>
    typia.random<IFlexOfficeViewer.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
