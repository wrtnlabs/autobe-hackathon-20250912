import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IFlexOfficeEditor } from "../../../structures/IFlexOfficeEditor";

/**
 * Register a new Editor user and issue authorization tokens, using
 * flex_office_editors table.
 *
 * The /auth/editor/join endpoint enables registration of a new Editor user
 * account in the FlexOffice system, referencing flex_office_editors table
 * schema. It accepts editor's email and password hash, which are stored
 * securely according to the schema fields 'email' and 'password_hash'. Upon
 * successful creation, the API issues JWT tokens that include the user's role
 * and permissions.
 *
 * This operation is public and allows new member-kind users to create their
 * account. It strictly enforces unique email constraint as defined in the
 * database schema and hashes passwords prior to storage.
 *
 * Security measures include validation of email format and password strength.
 *
 * Related operations include /auth/editor/login and /auth/editor/refresh for
 * session management.
 *
 * Errors include duplicate email (409) and validation errors (400).
 *
 * @param props.connection
 * @param props.body Editor registration input including email and password hash
 * @setHeader token.access Authorization
 *
 * @path /auth/editor/join
 * @accessor api.functional.auth.editor.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** Editor registration input including email and password hash */
    body: IFlexOfficeEditor.ICreate;
  };
  export type Body = IFlexOfficeEditor.ICreate;
  export type Response = IFlexOfficeEditor.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/editor/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/editor/join";
  export const random = (): IFlexOfficeEditor.IAuthorized =>
    typia.random<IFlexOfficeEditor.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate existing Editor user and issue authorization tokens, using
 * flex_office_editors table.
 *
 * The /auth/editor/login endpoint authenticates Editor users by verifying
 * credentials against the flex_office_editors table schema, specifically using
 * the 'email' and 'password_hash' fields. Successful authentication returns JWT
 * tokens authorizing the user with appropriate role and permissions.
 *
 * This operation is open to existing member-kind users and requires submission
 * of valid email and password hash.
 *
 * Security best practices include secure password comparison and prevention of
 * timing attacks.
 *
 * Complementary operations are /auth/editor/join and /auth/editor/refresh.
 *
 * Failed attempts result in 401 Unauthorized responses.
 *
 * @param props.connection
 * @param props.body Editor login input with email and password hash
 * @setHeader token.access Authorization
 *
 * @path /auth/editor/login
 * @accessor api.functional.auth.editor.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Editor login input with email and password hash */
    body: IFlexOfficeEditor.ILogin;
  };
  export type Body = IFlexOfficeEditor.ILogin;
  export type Response = IFlexOfficeEditor.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/editor/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/editor/login";
  export const random = (): IFlexOfficeEditor.IAuthorized =>
    typia.random<IFlexOfficeEditor.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh JWT tokens for Editor user sessions with valid refresh token.
 *
 * The /auth/editor/refresh endpoint allows Editor users to refresh their JWT
 * access tokens using a valid refresh token. It validates the token against the
 * system, then issues new access and refresh tokens retaining the editor role
 * and permissions.
 *
 * This ensures seamless session continuation without re-authentication. It is
 * part of the member kind user's authentication lifecycle.
 *
 * Security considerations include refresh token revocation checking and token
 * expiry validation.
 *
 * Related operations are /auth/editor/join and /auth/editor/login.
 *
 * Unauthorized or invalid tokens result in 401 responses.
 *
 * @param props.connection
 * @param props.body Refresh token input for Editor user session renewal
 * @setHeader token.access Authorization
 *
 * @path /auth/editor/refresh
 * @accessor api.functional.auth.editor.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Refresh token input for Editor user session renewal */
    body: IFlexOfficeEditor.IRefresh;
  };
  export type Body = IFlexOfficeEditor.IRefresh;
  export type Response = IFlexOfficeEditor.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/editor/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/editor/refresh";
  export const random = (): IFlexOfficeEditor.IAuthorized =>
    typia.random<IFlexOfficeEditor.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
