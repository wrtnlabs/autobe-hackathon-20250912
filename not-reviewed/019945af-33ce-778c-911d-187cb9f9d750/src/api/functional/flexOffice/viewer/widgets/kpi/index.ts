import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IFlexOfficeWidgetKpi } from "../../../../../structures/IFlexOfficeWidgetKpi";
import { IPageIFlexOfficeWidgetKpi } from "../../../../../structures/IPageIFlexOfficeWidgetKpi";

/**
 * List and search KPI widgets with pagination.
 *
 * This API endpoint allows authorized users in roles admin, editor, or viewer
 * to retrieve KPI widget data in a paginated, filtered, and sorted fashion. KPI
 * widgets provide key performance indicator metrics linked to UI widgets. The
 * request body allows specification of search criteria, filters on widget IDs,
 * configuration parameters, and pagination controls.
 *
 * Security restrictions ensure that only authorized roles can access these
 * details. The response provides structured paginated results including KPI
 * widget summaries enabling clients to display metric overviews efficiently.
 *
 * This operation complements CRUD operations on KPI widgets and supports
 * frontend performance and usability needs.
 *
 * @param props.connection
 * @param props.body Search, filter, and pagination criteria for KPI widgets
 * @path /flexOffice/viewer/widgets/kpi
 * @accessor api.functional.flexOffice.viewer.widgets.kpi.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search, filter, and pagination criteria for KPI widgets */
    body: IFlexOfficeWidgetKpi.IRequest;
  };
  export type Body = IFlexOfficeWidgetKpi.IRequest;
  export type Response = IPageIFlexOfficeWidgetKpi.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/flexOffice/viewer/widgets/kpi",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/flexOffice/viewer/widgets/kpi";
  export const random = (): IPageIFlexOfficeWidgetKpi.ISummary =>
    typia.random<IPageIFlexOfficeWidgetKpi.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
