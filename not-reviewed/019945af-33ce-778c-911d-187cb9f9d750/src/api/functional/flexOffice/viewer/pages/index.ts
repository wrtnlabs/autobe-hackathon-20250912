import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IFlexOfficePage } from "../../../../structures/IFlexOfficePage";
import { IPageIFlexOfficePage } from "../../../../structures/IPageIFlexOfficePage";
export * as widgets from "./widgets/index";
export * as pageComments from "./pageComments/index";

/**
 * Search and list UI pages with filtering and pagination.
 *
 * Retrieve a paginated list of UI pages with advanced filtering and searching
 * capabilities. Users can filter pages by name, status, theme, and other
 * attributes.
 *
 * This operation queries the flex_office_pages table, returning summaries
 * suitable for displaying in lists.
 *
 * Security measures ensure users only retrieve pages they have permission to
 * view, respecting soft deletion status.
 *
 * Pagination and sorting options allow customized result sets.
 *
 * This powerful search endpoint supports complex query criteria in the request
 * body.
 *
 * Typical use case includes displaying the pages directory with filters
 * applied.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination params for pages
 * @path /flexOffice/viewer/pages
 * @accessor api.functional.flexOffice.viewer.pages.searchPages
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function searchPages(
  connection: IConnection,
  props: searchPages.Props,
): Promise<searchPages.Response> {
  return true === connection.simulate
    ? searchPages.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...searchPages.METADATA,
          path: searchPages.path(),
          status: null,
        },
        props.body,
      );
}
export namespace searchPages {
  export type Props = {
    /** Search criteria and pagination params for pages */
    body: IFlexOfficePage.IRequest;
  };
  export type Body = IFlexOfficePage.IRequest;
  export type Response = IPageIFlexOfficePage.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/flexOffice/viewer/pages",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/flexOffice/viewer/pages";
  export const random = (): IPageIFlexOfficePage.ISummary =>
    typia.random<IPageIFlexOfficePage.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: searchPages.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: searchPages.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed UI page information by ID.
 *
 * Retrieve detailed information of a UI page by its ID. The response includes
 * all page properties such as name, description, status, theme association, and
 * timestamps.
 *
 * The flex_office_pages table supports soft deletion, and deleted pages are not
 * retrievable.
 *
 * Users must be authorized to access page details, failing which a 403 error is
 * returned.
 *
 * This endpoint supports page editing and viewing in the UI/Page Builder.
 *
 * Accurate page data is essential for client rendering and manipulation.
 *
 * The pageId parameter is required in the path and must be a valid UUID.
 *
 * Errors returned may include 404 if the page is not found or is deleted.
 *
 * @param props.connection
 * @param props.pageId Target UI page unique ID
 * @path /flexOffice/viewer/pages/:pageId
 * @accessor api.functional.flexOffice.viewer.pages.getPage
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getPage(
  connection: IConnection,
  props: getPage.Props,
): Promise<getPage.Response> {
  return true === connection.simulate
    ? getPage.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getPage.METADATA,
          path: getPage.path(props),
          status: null,
        },
      );
}
export namespace getPage {
  export type Props = {
    /** Target UI page unique ID */
    pageId: string & tags.Format<"uuid">;
  };
  export type Response = IFlexOfficePage;

  export const METADATA = {
    method: "GET",
    path: "/flexOffice/viewer/pages/:pageId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/viewer/pages/${encodeURIComponent(props.pageId ?? "null")}`;
  export const random = (): IFlexOfficePage => typia.random<IFlexOfficePage>();
  export const simulate = (
    connection: IConnection,
    props: getPage.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getPage.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("pageId")(() => typia.assert(props.pageId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
