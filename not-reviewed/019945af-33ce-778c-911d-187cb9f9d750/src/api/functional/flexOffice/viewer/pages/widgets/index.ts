import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IFlexOfficeWidget } from "../../../../../structures/IFlexOfficeWidget";

/**
 * Get details of a specific widget by pageId and widgetId.
 *
 * Retrieve detailed information about a specific widget associated with a given
 * UI page. This operation fetches data from the 'flex_office_widgets' table,
 * which stores widget characteristics including type, name, and configuration
 * details.
 *
 * Users accessing this endpoint must be authenticated and authorized as admins,
 * editors, or viewers to ensure appropriate access control.
 *
 * The response includes all persistent fields of the widget, such as timestamps
 * and soft-deletion status, providing comprehensive insight into the widget's
 * current configuration and state.
 *
 * Typical error responses include not found if the widget or page does not
 * exist, or unauthorized access if the user lacks sufficient permissions.
 *
 * This operation integrates with the UI/Page Builder frontend to support widget
 * editing and display workflows.
 *
 * @param props.connection
 * @param props.pageId Unique identifier of the target page
 * @param props.widgetId Unique identifier of the target widget
 * @path /flexOffice/viewer/pages/:pageId/widgets/:widgetId
 * @accessor api.functional.flexOffice.viewer.pages.widgets.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target page */
    pageId: string & tags.Format<"uuid">;

    /** Unique identifier of the target widget */
    widgetId: string & tags.Format<"uuid">;
  };
  export type Response = IFlexOfficeWidget;

  export const METADATA = {
    method: "GET",
    path: "/flexOffice/viewer/pages/:pageId/widgets/:widgetId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/viewer/pages/${encodeURIComponent(props.pageId ?? "null")}/widgets/${encodeURIComponent(props.widgetId ?? "null")}`;
  export const random = (): IFlexOfficeWidget =>
    typia.random<IFlexOfficeWidget>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("pageId")(() => typia.assert(props.pageId));
      assert.param("widgetId")(() => typia.assert(props.widgetId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
