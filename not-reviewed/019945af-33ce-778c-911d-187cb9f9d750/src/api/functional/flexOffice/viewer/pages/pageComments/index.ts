import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IFlexOfficePageComment } from "../../../../../structures/IFlexOfficePageComment";
import { IPageIFlexOfficePageComment } from "../../../../../structures/IPageIFlexOfficePageComment";

/**
 * Create a new comment on a specific page.
 *
 * Create a new editor comment associated with a specific FlexOffice UI page.
 * Accepts the page ID in the path parameter and comment content in the request
 * body.
 *
 * Stores comment details in the flex_office_page_comments table including
 * content, editor identity, and timestamps.
 *
 * Supports collaboration workflows by enabling users with proper roles to
 * provide feedback on UI pages.
 *
 * Returns the newly created comment including all metadata.
 *
 * Requires permissions aligned with editor roles or higher.
 *
 * Related endpoints include comment retrieval, listing, and deletion.
 *
 * @param props.connection
 * @param props.pageId Unique identifier of the FlexOffice UI page to associate
 *   the comment with
 * @param props.body Data for creating a new page comment
 * @path /flexOffice/viewer/pages/:pageId/pageComments
 * @accessor api.functional.flexOffice.viewer.pages.pageComments.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Unique identifier of the FlexOffice UI page to associate the comment
     * with
     */
    pageId: string & tags.Format<"uuid">;

    /** Data for creating a new page comment */
    body: IFlexOfficePageComment.ICreate;
  };
  export type Body = IFlexOfficePageComment.ICreate;
  export type Response = IFlexOfficePageComment;

  export const METADATA = {
    method: "POST",
    path: "/flexOffice/viewer/pages/:pageId/pageComments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/viewer/pages/${encodeURIComponent(props.pageId ?? "null")}/pageComments`;
  export const random = (): IFlexOfficePageComment =>
    typia.random<IFlexOfficePageComment>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("pageId")(() => typia.assert(props.pageId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a filtered and paginated list of comments for a specific page.
 *
 * Retrieve a filtered and paginated list of editor comments for a specified
 * FlexOffice UI page. Operates on the flex_office_page_comments table,
 * filtering comments by the page ID provided as a path parameter.
 *
 * Supports pagination, filtering by editor, date, and content search through
 * the defined request body parameters in IFlexOfficePageComment.IRequest.
 * Returns paginated comment summaries.
 *
 * Access control requires authenticated roles to view comments associated with
 * the page. Related operations include creating and deleting comments.
 *
 * Errors include invalid page ID or permission denied.
 *
 * This API endpoint plays a critical role in enabling collaboration and
 * contextual communication within the FlexOffice UI/Page Builder workflows.
 *
 * @param props.connection
 * @param props.pageId Unique identifier of the FlexOffice UI page to retrieve
 *   comments for
 * @param props.body Filtering, pagination, and search parameters for page
 *   comments
 * @path /flexOffice/viewer/pages/:pageId/pageComments
 * @accessor api.functional.flexOffice.viewer.pages.pageComments.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the FlexOffice UI page to retrieve comments for */
    pageId: string & tags.Format<"uuid">;

    /** Filtering, pagination, and search parameters for page comments */
    body: IFlexOfficePageComment.IRequest;
  };
  export type Body = IFlexOfficePageComment.IRequest;
  export type Response = IPageIFlexOfficePageComment.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/flexOffice/viewer/pages/:pageId/pageComments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/viewer/pages/${encodeURIComponent(props.pageId ?? "null")}/pageComments`;
  export const random = (): IPageIFlexOfficePageComment.ISummary =>
    typia.random<IPageIFlexOfficePageComment.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("pageId")(() => typia.assert(props.pageId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a single comment by its unique ID for a specific page.
 *
 * Retrieve detailed information of a single page comment identified by
 * pageCommentId within a specified FlexOffice UI page identified by pageId.
 * Operates on the flex_office_page_comments table.
 *
 * Returns full comment details including content, editor ID, timestamps, and
 * deletion status.
 *
 * Requires proper permissions for reading comments.
 *
 * Related endpoints include creation, listing, and deletion of page comments.
 *
 * Error handling includes validation of existence and permission checks.
 *
 * The path parameters pageId and pageCommentId uniquely identify the record.
 *
 * @param props.connection
 * @param props.pageId Unique identifier of the FlexOffice UI page
 * @param props.pageCommentId Unique identifier of the page comment to retrieve
 * @path /flexOffice/viewer/pages/:pageId/pageComments/:pageCommentId
 * @accessor api.functional.flexOffice.viewer.pages.pageComments.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the FlexOffice UI page */
    pageId: string & tags.Format<"uuid">;

    /** Unique identifier of the page comment to retrieve */
    pageCommentId: string & tags.Format<"uuid">;
  };
  export type Response = IFlexOfficePageComment;

  export const METADATA = {
    method: "GET",
    path: "/flexOffice/viewer/pages/:pageId/pageComments/:pageCommentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/viewer/pages/${encodeURIComponent(props.pageId ?? "null")}/pageComments/${encodeURIComponent(props.pageCommentId ?? "null")}`;
  export const random = (): IFlexOfficePageComment =>
    typia.random<IFlexOfficePageComment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("pageId")(() => typia.assert(props.pageId));
      assert.param("pageCommentId")(() => typia.assert(props.pageCommentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
