import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IFlexOfficeExternalSheet } from "../../../../../structures/IFlexOfficeExternalSheet";

/**
 * Retrieve metadata of a specific external sheet linked to a data source.
 *
 * Retrieve detailed metadata for an external sheet associated with the
 * specified data source. This operation is intended for authorized users who
 * need to view file information including the sheet count and last
 * synchronization times.
 *
 * Access control restricts this operation to users with the appropriate
 * permissions (admin, editor, or viewer) as defined by the system's role-based
 * access controls. The operation references the 'flex_office_external_sheets'
 * Prisma schema table ensuring data consistency.
 *
 * Invalid or missing IDs will cause appropriate error responses. The API is
 * designed to work congruently with create, update, and delete operations for
 * full lifecycle management of external sheets.
 *
 * @param props.connection
 * @param props.dataSourceId Unique identifier of the target data source
 * @param props.sheetId Unique identifier of the target external sheet
 * @path /flexOffice/viewer/dataSources/:dataSourceId/externalSheets/:sheetId
 * @accessor api.functional.flexOffice.viewer.dataSources.externalSheets.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target data source */
    dataSourceId: string & tags.Format<"uuid">;

    /** Unique identifier of the target external sheet */
    sheetId: string & tags.Format<"uuid">;
  };
  export type Response = IFlexOfficeExternalSheet;

  export const METADATA = {
    method: "GET",
    path: "/flexOffice/viewer/dataSources/:dataSourceId/externalSheets/:sheetId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/viewer/dataSources/${encodeURIComponent(props.dataSourceId ?? "null")}/externalSheets/${encodeURIComponent(props.sheetId ?? "null")}`;
  export const random = (): IFlexOfficeExternalSheet =>
    typia.random<IFlexOfficeExternalSheet>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("dataSourceId")(() => typia.assert(props.dataSourceId));
      assert.param("sheetId")(() => typia.assert(props.sheetId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
