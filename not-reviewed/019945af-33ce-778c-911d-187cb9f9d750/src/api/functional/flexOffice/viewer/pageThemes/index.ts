import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IFlexOfficePageTheme } from "../../../../structures/IFlexOfficePageTheme";
import { IPageIFlexOfficePageTheme } from "../../../../structures/IPageIFlexOfficePageTheme";

/**
 * Search and retrieve a filtered, paginated list of UI page themes.
 *
 * Retrieve a filtered and paginated list of FlexOffice UI page themes from the
 * system database. This operation facilitates clients in querying available
 * themes with flexible filters on name, creation date, and update timestamps.
 *
 * Security considerations include that this endpoint is typically accessible by
 * authenticated users with read permissions. No sensitive information is
 * exposed. The response returns essential theme details optimized for display
 * in selection lists.
 *
 * The operation integrates directly with the flex_office_page_themes Prisma
 * table, referencing fields such as id, name, description, created_at, and
 * updated_at. Pagination parameters like page number and size control the
 * response size.
 *
 * It is expected that this operation supports sorting and search filtering to
 * enable user-friendly theme discovery. Errors include invalid query parameters
 * or server failures which will be properly handled with standard HTTP error
 * codes.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for theme
 *   filtering
 * @path /flexOffice/viewer/pageThemes
 * @accessor api.functional.flexOffice.viewer.pageThemes.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for theme filtering */
    body: IFlexOfficePageTheme.IRequest;
  };
  export type Body = IFlexOfficePageTheme.IRequest;
  export type Response = IPageIFlexOfficePageTheme.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/flexOffice/viewer/pageThemes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/flexOffice/viewer/pageThemes";
  export const random = (): IPageIFlexOfficePageTheme.ISummary =>
    typia.random<IPageIFlexOfficePageTheme.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a UI page theme by ID.
 *
 * Retrieve detailed information about a specific FlexOffice UI page theme
 * identified by the pageThemeId path parameter. This includes theme name,
 * description, CSS content, and audit timestamps.
 *
 * Security considerations limit access to authorized users. This operation
 * supports read access for admins, editors, and viewers with appropriate
 * permissions.
 *
 * The operation queries the flex_office_page_themes table for the theme
 * matching the given UUID. It returns a complete representation of the theme
 * entity.
 *
 * Errors include invalid UUID format or theme not found. Proper HTTP error
 * codes are used to communicate such failures.
 *
 * @param props.connection
 * @param props.pageThemeId Unique identifier for the target page theme
 * @path /flexOffice/viewer/pageThemes/:pageThemeId
 * @accessor api.functional.flexOffice.viewer.pageThemes.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the target page theme */
    pageThemeId: string & tags.Format<"uuid">;
  };
  export type Response = IFlexOfficePageTheme;

  export const METADATA = {
    method: "GET",
    path: "/flexOffice/viewer/pageThemes/:pageThemeId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/viewer/pageThemes/${encodeURIComponent(props.pageThemeId ?? "null")}`;
  export const random = (): IFlexOfficePageTheme =>
    typia.random<IFlexOfficePageTheme>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("pageThemeId")(() => typia.assert(props.pageThemeId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
