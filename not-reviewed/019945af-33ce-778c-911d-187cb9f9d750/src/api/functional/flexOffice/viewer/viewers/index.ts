import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IFlexOfficeViewer } from "../../../../structures/IFlexOfficeViewer";

/**
 * Update a specific FlexOffice viewer user.
 *
 * Update a viewer user identified by their unique ID in the FlexOffice system.
 * This operation modifies the viewer's personal details such as name, email
 * address, and password hash. Only users authorized with appropriate
 * permissions can perform this update.
 *
 * The flex_office_viewers table is used as the data source and includes soft
 * deletion support through the deleted_at timestamp, but updating this field is
 * managed internally and excluded from user modification.
 *
 * Security considerations include verifying the authenticated user's rights to
 * update viewer information. On successful update, the new viewer details are
 * returned.
 *
 * Expected errors include 404 if the viewer does not exist and 403 if the user
 * lacks update permissions.
 *
 * Note: This operation performs a full update based on the provided data in
 * IFlexOfficeViewer.IUpdate message format.
 *
 * @param props.connection
 * @param props.viewerId Target viewer's unique ID
 * @param props.body Updated viewer information
 * @path /flexOffice/viewer/viewers/:viewerId
 * @accessor api.functional.flexOffice.viewer.viewers.updateViewer
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateViewer(
  connection: IConnection,
  props: updateViewer.Props,
): Promise<updateViewer.Response> {
  return true === connection.simulate
    ? updateViewer.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateViewer.METADATA,
          path: updateViewer.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateViewer {
  export type Props = {
    /** Target viewer's unique ID */
    viewerId: string & tags.Format<"uuid">;

    /** Updated viewer information */
    body: IFlexOfficeViewer.IUpdate;
  };
  export type Body = IFlexOfficeViewer.IUpdate;
  export type Response = IFlexOfficeViewer;

  export const METADATA = {
    method: "PUT",
    path: "/flexOffice/viewer/viewers/:viewerId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/viewer/viewers/${encodeURIComponent(props.viewerId ?? "null")}`;
  export const random = (): IFlexOfficeViewer =>
    typia.random<IFlexOfficeViewer>();
  export const simulate = (
    connection: IConnection,
    props: updateViewer.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateViewer.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("viewerId")(() => typia.assert(props.viewerId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a FlexOffice viewer user by ID.
 *
 * Perform a soft delete on a FlexOffice viewer user by ID. This marks the user
 * as deleted by setting the deleted_at timestamp while preserving record
 * integrity for auditing purposes.
 *
 * The flex_office_viewers table supports soft deletion, and this operation
 * leverages that behavior.
 *
 * Only authorized users with role 'viewer' may execute this operation.
 * Attempting to delete a non-existent viewer returns a 404 error.
 *
 * No data is returned upon success.
 *
 * This soft delete does not physically remove the record from the database.
 *
 * @param props.connection
 * @param props.viewerId Target viewer's unique ID
 * @path /flexOffice/viewer/viewers/:viewerId
 * @accessor api.functional.flexOffice.viewer.viewers.eraseViewer
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseViewer(
  connection: IConnection,
  props: eraseViewer.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseViewer.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseViewer.METADATA,
          path: eraseViewer.path(props),
          status: null,
        },
      );
}
export namespace eraseViewer {
  export type Props = {
    /** Target viewer's unique ID */
    viewerId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/flexOffice/viewer/viewers/:viewerId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/viewer/viewers/${encodeURIComponent(props.viewerId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseViewer.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseViewer.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("viewerId")(() => typia.assert(props.viewerId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
