import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IFlexOfficeViewer } from "../../../../structures/IFlexOfficeViewer";
import { IPageIFlexOfficeViewer } from "../../../../structures/IPageIFlexOfficeViewer";

/**
 * Search and retrieve a filtered, paginated list of FlexOffice viewers.
 *
 * This API operation allows fetching a filtered and paginated list of
 * FlexOffice viewer users. The viewer users correspond to records in the
 * flex_office_viewers table in the PostgreSQL database.
 *
 * The request body includes search criteria allowing advanced filtering
 * capabilities such as by name, email, and creation date. Pagination parameters
 * (page number, size) and sorting preferences enable flexible querying suited
 * to UI presentation.
 *
 * Responses provide viewer summaries, including basic user identification
 * details, flattened into a compact structure optimized for listing.
 *
 * Authorization is typically granted to admin users or system managers who
 * oversee viewer accounts. The operation uses HTTP PATCH to accommodate complex
 * search criteria in the request body.
 *
 * Proper validation ensures only authorized access and correct query parameter
 * usage, with error handling for invalid or unauthorized requests.
 *
 * This endpoint is crucial for managing viewer accounts within the system.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for viewer
 *   filtering
 * @path /flexOffice/admin/viewers
 * @accessor api.functional.flexOffice.admin.viewers.searchViewers
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function searchViewers(
  connection: IConnection,
  props: searchViewers.Props,
): Promise<searchViewers.Response> {
  return true === connection.simulate
    ? searchViewers.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...searchViewers.METADATA,
          path: searchViewers.path(),
          status: null,
        },
        props.body,
      );
}
export namespace searchViewers {
  export type Props = {
    /** Search criteria and pagination parameters for viewer filtering */
    body: IFlexOfficeViewer.IRequest;
  };
  export type Body = IFlexOfficeViewer.IRequest;
  export type Response = IPageIFlexOfficeViewer.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/flexOffice/admin/viewers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/flexOffice/admin/viewers";
  export const random = (): IPageIFlexOfficeViewer.ISummary =>
    typia.random<IPageIFlexOfficeViewer.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: searchViewers.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: searchViewers.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details of a FlexOffice viewer user by ID.
 *
 * This API operation fetches complete details of one viewer user by their
 * unique identifier viewerId from the PostgreSQL flex_office_viewers table.
 *
 * It returns the full data structure including name, email, password hash, and
 * timestamps for creation, update, and soft deletion status if applicable.
 *
 * The GET method designates a retrieval operation returning a singular
 * resource.
 *
 * Authorization is enforced to limit access to admin users or authorized
 * viewers themselves to ensure data confidentiality.
 *
 * Validation of the viewerId parameter is mandatory to prevent injection or
 * unauthorized access.
 *
 * The response encapsulates all relevant user information excluding sensitive
 * fields like plain-text passwords.
 *
 * If the viewer does not exist, a 404 error is expected.
 *
 * This endpoint is critical for managing individual viewer user profiles.
 *
 * @param props.connection
 * @param props.viewerId Unique identifier of the target viewer user
 * @path /flexOffice/admin/viewers/:viewerId
 * @accessor api.functional.flexOffice.admin.viewers.atViewer
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atViewer(
  connection: IConnection,
  props: atViewer.Props,
): Promise<atViewer.Response> {
  return true === connection.simulate
    ? atViewer.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atViewer.METADATA,
          path: atViewer.path(props),
          status: null,
        },
      );
}
export namespace atViewer {
  export type Props = {
    /** Unique identifier of the target viewer user */
    viewerId: string & tags.Format<"uuid">;
  };
  export type Response = IFlexOfficeViewer;

  export const METADATA = {
    method: "GET",
    path: "/flexOffice/admin/viewers/:viewerId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/admin/viewers/${encodeURIComponent(props.viewerId ?? "null")}`;
  export const random = (): IFlexOfficeViewer =>
    typia.random<IFlexOfficeViewer>();
  export const simulate = (
    connection: IConnection,
    props: atViewer.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atViewer.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("viewerId")(() => typia.assert(props.viewerId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
