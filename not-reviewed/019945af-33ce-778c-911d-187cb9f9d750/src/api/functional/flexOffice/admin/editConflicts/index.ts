import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IFlexOfficeEditConflicts } from "../../../../structures/IFlexOfficeEditConflicts";
import { IPageIFlexOfficeEditConflicts } from "../../../../structures/IPageIFlexOfficeEditConflicts";

/**
 * Search and retrieve paginated list of edit conflicts.
 *
 * Retrieve a paginated list of edit conflicts occurring on UI pages in the
 * FlexOffice system. The list supports filtering and sorting to find relevant
 * conflict records.
 *
 * Accessible for users with Editor or Admin roles. This operation helps in
 * identifying and managing content conflicts during collaborative editing to
 * maintain data integrity.
 *
 * The response includes details on conflicts such as editor ids, conflict data
 * in JSON, and timestamps.
 *
 * @param props.connection
 * @param props.body Search and filter parameters for edit conflicts
 * @path /flexOffice/admin/editConflicts
 * @accessor api.functional.flexOffice.admin.editConflicts.searchEditConflicts
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function searchEditConflicts(
  connection: IConnection,
  props: searchEditConflicts.Props,
): Promise<searchEditConflicts.Response> {
  return true === connection.simulate
    ? searchEditConflicts.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...searchEditConflicts.METADATA,
          path: searchEditConflicts.path(),
          status: null,
        },
        props.body,
      );
}
export namespace searchEditConflicts {
  export type Props = {
    /** Search and filter parameters for edit conflicts */
    body: IFlexOfficeEditConflicts.IRequest;
  };
  export type Body = IFlexOfficeEditConflicts.IRequest;
  export type Response = IPageIFlexOfficeEditConflicts.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/flexOffice/admin/editConflicts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/flexOffice/admin/editConflicts";
  export const random = (): IPageIFlexOfficeEditConflicts.ISummary =>
    typia.random<IPageIFlexOfficeEditConflicts.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: searchEditConflicts.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: searchEditConflicts.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a specific edit conflict.
 *
 * Retrieve detailed information about a single edit conflict in the FlexOffice
 * UI/Page collaboration environment.
 *
 * Only users with Editor or Admin roles can access this data. The conflict
 * details include editor information and JSON-encoded conflicting data.
 *
 * This information aids in conflict resolution and audit tracking for
 * collaborative editing.
 *
 * @param props.connection
 * @param props.editConflictId Unique identifier of the edit conflict
 * @path /flexOffice/admin/editConflicts/:editConflictId
 * @accessor api.functional.flexOffice.admin.editConflicts.getEditConflict
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getEditConflict(
  connection: IConnection,
  props: getEditConflict.Props,
): Promise<getEditConflict.Response> {
  return true === connection.simulate
    ? getEditConflict.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getEditConflict.METADATA,
          path: getEditConflict.path(props),
          status: null,
        },
      );
}
export namespace getEditConflict {
  export type Props = {
    /** Unique identifier of the edit conflict */
    editConflictId: string & tags.Format<"uuid">;
  };
  export type Response = IFlexOfficeEditConflicts;

  export const METADATA = {
    method: "GET",
    path: "/flexOffice/admin/editConflicts/:editConflictId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/admin/editConflicts/${encodeURIComponent(props.editConflictId ?? "null")}`;
  export const random = (): IFlexOfficeEditConflicts =>
    typia.random<IFlexOfficeEditConflicts>();
  export const simulate = (
    connection: IConnection,
    props: getEditConflict.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getEditConflict.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("editConflictId")(() => typia.assert(props.editConflictId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
