import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IFlexOfficeCustomScript } from "../../../../structures/IFlexOfficeCustomScript";
import { IFlexOfficeCustomScripts } from "../../../../structures/IFlexOfficeCustomScripts";
import { IPageIFlexOfficeCustomScript } from "../../../../structures/IPageIFlexOfficeCustomScript";

/**
 * Create a new FlexOffice custom script record with required details: unique
 * code, name, language, optional description, and script content. Ensures
 * uniqueness and permissions check for admin/editor roles.
 *
 * On success, returns the full created entity including generated identifiers
 * and timestamps.
 *
 * Errors due to duplicate codes, validation failures, or unauthorized access
 * will be returned.
 *
 * @param props.connection
 * @param props.body Creation data for new custom script
 * @path /flexOffice/admin/customScripts
 * @accessor api.functional.flexOffice.admin.customScripts.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation data for new custom script */
    body: IFlexOfficeCustomScript.ICreate;
  };
  export type Body = IFlexOfficeCustomScript.ICreate;
  export type Response = IFlexOfficeCustomScript;

  export const METADATA = {
    method: "POST",
    path: "/flexOffice/admin/customScripts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/flexOffice/admin/customScripts";
  export const random = (): IFlexOfficeCustomScript =>
    typia.random<IFlexOfficeCustomScript>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and list FlexOffice custom scripts with filtering, sorting, and
 * pagination.
 *
 * Retrieve a filtered, paginated list of FlexOffice custom scripts stored in
 * the flex_office_custom_scripts table. These scripts represent independent
 * programmable units written in JavaScript or Python, managed for extending
 * system functionality.
 *
 * This operation supports advanced search and filtering capabilities across
 * script codes, names, languages, and timestamps with full-text search indexes
 * enabling responsive queries.
 *
 * Security is enforced to allow only authenticated users with appropriate roles
 * (editor or admin). The API returns summaries of scripts optimized for list
 * views with pagination metadata.
 *
 * Related operations include single entity retrieval, creation, and updates to
 * manage scripts.
 *
 * Errors will be communicated with appropriate status codes for unauthorized
 * access or invalid filters.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for custom
 *   scripts filtering
 * @path /flexOffice/admin/customScripts
 * @accessor api.functional.flexOffice.admin.customScripts.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for custom scripts
     * filtering
     */
    body: IFlexOfficeCustomScripts.IRequest;
  };
  export type Body = IFlexOfficeCustomScripts.IRequest;
  export type Response = IPageIFlexOfficeCustomScript.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/flexOffice/admin/customScripts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/flexOffice/admin/customScripts";
  export const random = (): IPageIFlexOfficeCustomScript.ISummary =>
    typia.random<IPageIFlexOfficeCustomScript.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get single FlexOffice custom script details by ID.
 *
 * Fetch a single FlexOffice custom script by its unique identifier from the
 * flex_office_custom_scripts table. The entity includes comprehensive
 * information such as business code, descriptive name, scripting language,
 * detailed description, and source content.
 *
 * Authorized users with roles 'admin' or 'editor' may access this information
 * securely. The retrieved script supports extension and customization use
 * cases.
 *
 * Errors including not found or unauthorized access are returned with proper
 * HTTP status codes.
 *
 * @param props.connection
 * @param props.id Unique identifier of the custom script
 * @path /flexOffice/admin/customScripts/:id
 * @accessor api.functional.flexOffice.admin.customScripts.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the custom script */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IFlexOfficeCustomScript;

  export const METADATA = {
    method: "GET",
    path: "/flexOffice/admin/customScripts/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/admin/customScripts/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IFlexOfficeCustomScript =>
    typia.random<IFlexOfficeCustomScript>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update FlexOffice custom script information by ID.
 *
 * Update an existing FlexOffice custom script by ID, modifying its name,
 * description, language, or source code. Only authorized users with admin or
 * editor roles can perform this operation.
 *
 * The request body must contain valid update data.
 *
 * Returns the updated full entity on success, with errors for not found,
 * validation failures, or unauthorized access.
 *
 * @param props.connection
 * @param props.id Unique identifier of the custom script to update
 * @param props.body Update data for the custom script
 * @path /flexOffice/admin/customScripts/:id
 * @accessor api.functional.flexOffice.admin.customScripts.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the custom script to update */
    id: string & tags.Format<"uuid">;

    /** Update data for the custom script */
    body: IFlexOfficeCustomScript.IUpdate;
  };
  export type Body = IFlexOfficeCustomScript.IUpdate;
  export type Response = IFlexOfficeCustomScript;

  export const METADATA = {
    method: "PUT",
    path: "/flexOffice/admin/customScripts/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/admin/customScripts/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IFlexOfficeCustomScript =>
    typia.random<IFlexOfficeCustomScript>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a custom script by ID.
 *
 * Deletes a custom script entity from the FlexOffice system. This endpoint
 * permanently removes the script data stored in the flex_office_custom_scripts
 * table, identified by the given custom script ID (UUID).
 *
 * Only users with admin or editor roles can perform this operation. Upon
 * deletion, any version history or references to this script must be handled by
 * cascading deletions or service-level safeguards.
 *
 * This operation does not permit restoring the deleted script; it is a
 * permanent removal.
 *
 * Security considerations include verifying user permissions to avoid
 * unauthorized deletions.
 *
 * If the provided ID does not correspond to an existing script, the operation
 * will return a not found error.
 *
 * No request body is required. The response contains no body.
 *
 * It is related to other script management APIs such as script creation and
 * retrieval. Users should use script creation APIs to add new scripts after
 * deletion if needed.
 *
 * @param props.connection
 * @param props.id Unique identifier of the custom script to delete (UUID)
 * @path /flexOffice/admin/customScripts/:id
 * @accessor api.functional.flexOffice.admin.customScripts.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the custom script to delete (UUID) */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/flexOffice/admin/customScripts/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/admin/customScripts/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
