import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IFlexOfficeEditor } from "../../../../structures/IFlexOfficeEditor";
import { IPageIFlexOfficeEditor } from "../../../../structures/IPageIFlexOfficeEditor";

/**
 * Search and retrieve a filtered, paginated list of editor users.
 *
 * Provides a paginated list of Editor users with advanced filtering and sorting
 * capabilities. This operation enables admin users to search editors by various
 * criteria including email and creation date.
 *
 * Results return summaries of editor information for efficient management
 * overview without revealing sensitive data.
 *
 * This endpoint works with the flex_office_editors table, which tracks users
 * authorized to edit pages.
 *
 * Filtering parameters include optional fields for page size, sorting rules,
 * search keywords, and date ranges.
 *
 * Security mandates admin role to access the detailed user list.
 *
 * Errors arise from invalid search parameters or access violations.
 *
 * Pagination ensures manageable response sizes for UI integration.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for editor
 *   filtering
 * @path /flexOffice/admin/editors
 * @accessor api.functional.flexOffice.admin.editors.searchEditors
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function searchEditors(
  connection: IConnection,
  props: searchEditors.Props,
): Promise<searchEditors.Response> {
  return true === connection.simulate
    ? searchEditors.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...searchEditors.METADATA,
          path: searchEditors.path(),
          status: null,
        },
        props.body,
      );
}
export namespace searchEditors {
  export type Props = {
    /** Search criteria and pagination parameters for editor filtering */
    body: IFlexOfficeEditor.IRequest;
  };
  export type Body = IFlexOfficeEditor.IRequest;
  export type Response = IPageIFlexOfficeEditor.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/flexOffice/admin/editors",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/flexOffice/admin/editors";
  export const random = (): IPageIFlexOfficeEditor.ISummary =>
    typia.random<IPageIFlexOfficeEditor.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: searchEditors.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: searchEditors.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific editor user by ID.
 *
 * Retrieves detailed information about a single Editor user identified by
 * editorId. This includes display name, email, and account status.
 *
 * This operation reads from the flex_office_editors table.
 *
 * Admin role authorization restricts access to details.
 *
 * Errors include 404 if the editor is not found.
 *
 * The response returns full editor profile except sensitive info like password
 * hash.
 *
 * Useful for admin user management UI.
 *
 * @param props.connection
 * @param props.editorId Unique identifier of the editor user to retrieve
 * @path /flexOffice/admin/editors/:editorId
 * @accessor api.functional.flexOffice.admin.editors.atEditor
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atEditor(
  connection: IConnection,
  props: atEditor.Props,
): Promise<atEditor.Response> {
  return true === connection.simulate
    ? atEditor.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atEditor.METADATA,
          path: atEditor.path(props),
          status: null,
        },
      );
}
export namespace atEditor {
  export type Props = {
    /** Unique identifier of the editor user to retrieve */
    editorId: string & tags.Format<"uuid">;
  };
  export type Response = IFlexOfficeEditor;

  export const METADATA = {
    method: "GET",
    path: "/flexOffice/admin/editors/:editorId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/admin/editors/${encodeURIComponent(props.editorId ?? "null")}`;
  export const random = (): IFlexOfficeEditor =>
    typia.random<IFlexOfficeEditor>();
  export const simulate = (
    connection: IConnection,
    props: atEditor.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atEditor.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("editorId")(() => typia.assert(props.editorId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing FlexOffice editor user.
 *
 * This API operation enables the update of an editor user entity in the
 * FlexOffice system. The editor user in question is identified via the editorId
 * path parameter, which corresponds to the unique ID in the flex_office_editors
 * PostgreSQL table.
 *
 * Users with admin role generally have the permissions to update editor details
 * such as name, email, and password hash. The operation validates the input
 * data structure and applies updates to the database while maintaining the
 * integrity of audit fields (created_at, updated_at). Soft deletion handling is
 * not performed here; this operation strictly updates active records.
 *
 * This route uses PUT HTTP method aligned to RESTful standards for updating
 * existing resources. It does not include a response body, as the updated
 * entity state can be fetched via a separate GET operation if needed.
 *
 * Parameters include:
 *
 * - EditorId: UUID string representing the target editor user.
 * - RequestBody: An object matching IFlexOfficeEditor.IUpdate type containing
 *   editable user properties.
 *
 * The operation targets the flex_office_editors table in the Prisma schema and
 * requires validation against defined fields. Proper authorization checks for
 * the admin role role are enforced to secure modification privileges.
 *
 * In case of errors such as not found or validation failures, appropriate HTTP
 * error codes should be returned.
 *
 * @param props.connection
 * @param props.editorId Unique identifier of the target editor user
 * @param props.body Editable information for updating an editor user
 * @path /flexOffice/admin/editors/:editorId
 * @accessor api.functional.flexOffice.admin.editors.updateEditor
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateEditor(
  connection: IConnection,
  props: updateEditor.Props,
): Promise<updateEditor.Response> {
  return true === connection.simulate
    ? updateEditor.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateEditor.METADATA,
          path: updateEditor.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateEditor {
  export type Props = {
    /** Unique identifier of the target editor user */
    editorId: string & tags.Format<"uuid">;

    /** Editable information for updating an editor user */
    body: IFlexOfficeEditor.IUpdate;
  };
  export type Body = IFlexOfficeEditor.IUpdate;
  export type Response = IFlexOfficeEditor;

  export const METADATA = {
    method: "PUT",
    path: "/flexOffice/admin/editors/:editorId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/admin/editors/${encodeURIComponent(props.editorId ?? "null")}`;
  export const random = (): IFlexOfficeEditor =>
    typia.random<IFlexOfficeEditor>();
  export const simulate = (
    connection: IConnection,
    props: updateEditor.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateEditor.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("editorId")(() => typia.assert(props.editorId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a FlexOffice editor user.
 *
 * This API operation performs a soft deletion of a FlexOffice editor user
 * entity. The target editor user is uniquely identified by the editorId path
 * parameter which corresponds to the primary key in the flex_office_editors
 * table.
 *
 * Soft deletion is implemented by setting the deleted_at timestamp, preventing
 * the editor from accessing the system while retaining the data for audit and
 * recovery purposes.
 *
 * Only users with administrative privileges can execute this operation to
 * ensure controlled deactivation of editor accounts. The operation does not
 * require a request body and returns no content upon successful deletion.
 *
 * Strict authorization checks and validation of the editorId parameter are
 * mandatory to protect against unauthorized or accidental deletions.
 *
 * The endpoint is aligned with RESTful DELETE method semantics for soft
 * deletions within the system.
 *
 * No response body is returned on success.
 *
 * @param props.connection
 * @param props.editorId Unique identifier of the target editor user
 * @path /flexOffice/admin/editors/:editorId
 * @accessor api.functional.flexOffice.admin.editors.eraseEditor
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseEditor(
  connection: IConnection,
  props: eraseEditor.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseEditor.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseEditor.METADATA,
          path: eraseEditor.path(props),
          status: null,
        },
      );
}
export namespace eraseEditor {
  export type Props = {
    /** Unique identifier of the target editor user */
    editorId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/flexOffice/admin/editors/:editorId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/admin/editors/${encodeURIComponent(props.editorId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseEditor.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseEditor.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("editorId")(() => typia.assert(props.editorId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
