import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IFlexOfficeUserActivityLog } from "../../../../structures/IFlexOfficeUserActivityLog";
import { IPageIFlexOfficeUserActivityLog } from "../../../../structures/IPageIFlexOfficeUserActivityLog";

/**
 * Search and retrieve paginated user activity logs.
 *
 * Retrieve a filtered, sorted, and paginated list of user activity logs. These
 * logs track various user actions including login events, page edits, dashboard
 * views, and other critical interactions.
 *
 * The operation accepts complex search parameters such as user ID filter,
 * action types, date ranges, and IP address filtering to refine results.
 * Pagination and sorting options allow manageable result sets.
 *
 * Only authorized roles can access user activity logs due to audit policy and
 * privacy concerns.
 *
 * This operation uses the flex_office_user_activity_logs table from the Prisma
 * schema, ensuring all returned data includes action details and timestamps.
 *
 * The response is paginated providing summaries appropriate for dashboard
 * display or audit review.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for user activity
 *   logs
 * @path /flexOffice/admin/userActivityLogs
 * @accessor api.functional.flexOffice.admin.userActivityLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for user activity logs */
    body: IFlexOfficeUserActivityLog.IRequest;
  };
  export type Body = IFlexOfficeUserActivityLog.IRequest;
  export type Response = IPageIFlexOfficeUserActivityLog.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/flexOffice/admin/userActivityLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/flexOffice/admin/userActivityLogs";
  export const random = (): IPageIFlexOfficeUserActivityLog.ISummary =>
    typia.random<IPageIFlexOfficeUserActivityLog.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a single user activity log entry by ID.
 *
 * Retrieve detailed user activity log entry by its unique ID. User activity
 * logs provide comprehensive information about user actions performed in the
 * system including action types, optional detailed context, IP address of
 * origin, and precise timestamps.
 *
 * This operation supports auditing and monitoring by enabling authorized users
 * to view individual user activity records securely.
 *
 * Access is restricted to authorized roles. Data is retrieved from the
 * flex_office_user_activity_logs Prisma table with all related fields.
 *
 * The response returns a detailed single user activity log entry corresponding
 * to the requested ID.
 *
 * @param props.connection
 * @param props.id Unique identifier of the user activity log entry to retrieve
 * @path /flexOffice/admin/userActivityLogs/:id
 * @accessor api.functional.flexOffice.admin.userActivityLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the user activity log entry to retrieve */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IFlexOfficeUserActivityLog;

  export const METADATA = {
    method: "GET",
    path: "/flexOffice/admin/userActivityLogs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/admin/userActivityLogs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IFlexOfficeUserActivityLog =>
    typia.random<IFlexOfficeUserActivityLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
