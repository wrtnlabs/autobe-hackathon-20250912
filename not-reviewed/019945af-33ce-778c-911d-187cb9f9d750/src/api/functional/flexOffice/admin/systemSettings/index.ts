import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IFlexOfficeSystemSettings } from "../../../../structures/IFlexOfficeSystemSettings";
import { IPageIFlexOfficeSystemSettings } from "../../../../structures/IPageIFlexOfficeSystemSettings";

/**
 * Create a new FlexOffice system setting configuration.
 *
 * Create a new FlexOffice system setting record.
 *
 * The system setting represents a global configuration parameter.
 *
 * Admin role required.
 *
 * The submitted data must include a unique key and can optionally contain a
 * value and description.
 *
 * The system will return the newly created setting including its generated ID
 * and timestamps.
 *
 * @param props.connection
 * @param props.body System setting creation data
 * @path /flexOffice/admin/systemSettings
 * @accessor api.functional.flexOffice.admin.systemSettings.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** System setting creation data */
    body: IFlexOfficeSystemSettings.ICreate;
  };
  export type Body = IFlexOfficeSystemSettings.ICreate;
  export type Response = IFlexOfficeSystemSettings;

  export const METADATA = {
    method: "POST",
    path: "/flexOffice/admin/systemSettings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/flexOffice/admin/systemSettings";
  export const random = (): IFlexOfficeSystemSettings =>
    typia.random<IFlexOfficeSystemSettings>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a filtered, paginated list of FlexOffice system settings.
 *
 * Retrieve a filtered and paginated list of FlexOffice system settings from the
 * database. This operation supports advanced query parameters to filter by
 * configuration key or other properties.
 *
 * The flex_office_system_settings table contains global system parameters and
 * feature toggles crucial for system behavior, managed by administrators.
 *
 * Security considerations: access is typically restricted to system
 * administrators only to prevent unauthorized changes to critical system
 * settings.
 *
 * This operation returns system settings summaries optimized for list displays
 * to aid in quick configuration reviews.
 *
 * Pagination and sorting parameters enable efficient browsing through
 * potentially numerous configuration entries.
 *
 * @param props.connection
 * @param props.body Filter and pagination criteria for system settings search
 * @path /flexOffice/admin/systemSettings
 * @accessor api.functional.flexOffice.admin.systemSettings.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filter and pagination criteria for system settings search */
    body: IFlexOfficeSystemSettings.IRequest;
  };
  export type Body = IFlexOfficeSystemSettings.IRequest;
  export type Response = IPageIFlexOfficeSystemSettings.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/flexOffice/admin/systemSettings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/flexOffice/admin/systemSettings";
  export const random = (): IPageIFlexOfficeSystemSettings.ISummary =>
    typia.random<IPageIFlexOfficeSystemSettings.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a FlexOffice system setting by ID.
 *
 * Get detailed information for a specific FlexOffice system setting identified
 * by its unique ID.
 *
 * This entity represents global configuration items crucial for system
 * operation and management.
 *
 * Access restricted to admin users for security.
 *
 * Returns a detailed object including key, value, description, and timestamps
 * for creation and update.
 *
 * @param props.connection
 * @param props.id Unique identifier of the system setting
 * @path /flexOffice/admin/systemSettings/:id
 * @accessor api.functional.flexOffice.admin.systemSettings.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the system setting */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IFlexOfficeSystemSettings;

  export const METADATA = {
    method: "GET",
    path: "/flexOffice/admin/systemSettings/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/admin/systemSettings/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IFlexOfficeSystemSettings =>
    typia.random<IFlexOfficeSystemSettings>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing FlexOffice system setting by ID.
 *
 * Update an existing FlexOffice system setting identified by ID.
 *
 * Allows modifying configuration key, value, and description.
 *
 * Admin permissions required.
 *
 * Returns updated system setting with the latest data and timestamps.
 *
 * @param props.connection
 * @param props.id Unique identifier of the system setting to update
 * @param props.body Fields to update in the system setting
 * @path /flexOffice/admin/systemSettings/:id
 * @accessor api.functional.flexOffice.admin.systemSettings.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the system setting to update */
    id: string & tags.Format<"uuid">;

    /** Fields to update in the system setting */
    body: IFlexOfficeSystemSettings.IUpdate;
  };
  export type Body = IFlexOfficeSystemSettings.IUpdate;
  export type Response = IFlexOfficeSystemSettings;

  export const METADATA = {
    method: "PUT",
    path: "/flexOffice/admin/systemSettings/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/admin/systemSettings/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IFlexOfficeSystemSettings =>
    typia.random<IFlexOfficeSystemSettings>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a system configuration setting by ID.
 *
 * This DELETE operation removes a specific system configuration setting
 * identified by its unique ID from the FlexOffice backend database. The
 * operation impacts the flex_office_system_settings table which maintains
 * key-value pairs representing global system parameters.
 *
 * Only users with administrative privileges should be authorized to perform
 * this deletion to prevent accidental or malicious removal of crucial system
 * settings. The deletion is permanent and cleans the record entirely from the
 * database.
 *
 * No request body is needed since deletion is by resource ID path parameter.
 *
 * Successful execution returns a success status without a response body. Any
 * errors (such as if the ID is not found) should be handled gracefully by the
 * backend with appropriate HTTP error codes.
 *
 * This operation requires a path parameter specifying the target system
 * configuration setting ID as a UUID string.
 *
 * @param props.connection
 * @param props.id Unique identifier of the system setting to delete
 * @path /flexOffice/admin/systemSettings/:id
 * @accessor api.functional.flexOffice.admin.systemSettings.eraseSystemSetting
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseSystemSetting(
  connection: IConnection,
  props: eraseSystemSetting.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseSystemSetting.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseSystemSetting.METADATA,
          path: eraseSystemSetting.path(props),
          status: null,
        },
      );
}
export namespace eraseSystemSetting {
  export type Props = {
    /** Unique identifier of the system setting to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/flexOffice/admin/systemSettings/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/admin/systemSettings/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseSystemSetting.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseSystemSetting.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
