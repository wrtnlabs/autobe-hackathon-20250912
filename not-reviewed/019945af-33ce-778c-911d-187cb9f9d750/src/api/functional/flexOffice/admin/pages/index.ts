import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IFlexOfficePage } from "../../../../structures/IFlexOfficePage";
export * as widgets from "./widgets/index";
export * as versions from "./versions/index";
export * as pageEditors from "./pageEditors/index";
export * as pageComments from "./pageComments/index";

/**
 * Create a new UI page in FlexOffice with specified properties such as name,
 * description, status, and optional theme reference. The created page is stored
 * in the flex_office_pages table which supports versioning, soft deletion, and
 * status lifecycle management.
 *
 * Access control checks ensure that only users with 'admin' or 'editor' roles
 * can perform this operation. The operation validates the uniqueness of the
 * page name to prevent duplicates.
 *
 * The operation maintains data integrity with timestamps and supports soft
 * deletion by not setting deleted_at on creation.
 *
 * Related operations include updating the page (PUT /pages/{pageId}), deleting
 * a page, and managing widgets on the page, as well as retrieving page
 * versions.
 *
 * Errors related to conflicts, missing parameters, or authorization will be
 * properly handled.
 *
 * @param props.connection
 * @param props.body Information required to create a UI page, including name,
 *   description, status and theme association.
 * @path /flexOffice/admin/pages
 * @accessor api.functional.flexOffice.admin.pages.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Information required to create a UI page, including name,
     * description, status and theme association.
     */
    body: IFlexOfficePage.ICreate;
  };
  export type Body = IFlexOfficePage.ICreate;
  export type Response = IFlexOfficePage;

  export const METADATA = {
    method: "POST",
    path: "/flexOffice/admin/pages",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/flexOffice/admin/pages";
  export const random = (): IFlexOfficePage => typia.random<IFlexOfficePage>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing UI page.
 *
 * Update an existing FlexOffice UI page with specified properties such as name,
 * description, status, and theme. Supports validation of existence and
 * uniqueness constraints.
 *
 * Only users with 'admin' or 'editor' roles may perform this update. Operation
 * updates updated_at timestamp.
 *
 * Related operations include creating, deleting the page, and managing related
 * widgets and versions.
 *
 * Proper validations and error handling are implemented for conflicts and
 * missing resources.
 *
 * @param props.connection
 * @param props.pageId Unique identifier of the page to update
 * @param props.body Updated UI page data including name, description, status,
 *   and theme association.
 * @path /flexOffice/admin/pages/:pageId
 * @accessor api.functional.flexOffice.admin.pages.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the page to update */
    pageId: string & tags.Format<"uuid">;

    /**
     * Updated UI page data including name, description, status, and theme
     * association.
     */
    body: IFlexOfficePage.IUpdate;
  };
  export type Body = IFlexOfficePage.IUpdate;
  export type Response = IFlexOfficePage;

  export const METADATA = {
    method: "PUT",
    path: "/flexOffice/admin/pages/:pageId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/admin/pages/${encodeURIComponent(props.pageId ?? "null")}`;
  export const random = (): IFlexOfficePage => typia.random<IFlexOfficePage>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("pageId")(() => typia.assert(props.pageId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Hard delete a UI page permanently.
 *
 * Hard delete the specified UI page and all related data from the FlexOffice
 * system. This operation permanently removes the record and cannot be undone.
 *
 * Only users with the admin role are authorized. Related entities such as
 * widgets, versions, and comments linked to the page will cascade delete.
 *
 * Proper error handling includes not found errors if the page does not exist.
 *
 * This operation permanently deletes data rather than soft deleting.
 *
 * @param props.connection
 * @param props.pageId Unique identifier of the page to delete
 * @path /flexOffice/admin/pages/:pageId
 * @accessor api.functional.flexOffice.admin.pages.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the page to delete */
    pageId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/flexOffice/admin/pages/:pageId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/admin/pages/${encodeURIComponent(props.pageId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("pageId")(() => typia.assert(props.pageId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
