import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IFlexOfficePageVersion } from "../../../../../structures/IFlexOfficePageVersion";
import { IPageIFlexOfficePageVersion } from "../../../../../structures/IPageIFlexOfficePageVersion";

/**
 * Search and retrieve UI page versions for a given page.
 *
 * Retrieve a paginated, filtered, and sorted list of historical version
 * snapshots for a specified UI page in the FlexOffice system.
 *
 * This operation is essential for page version control, allowing users to view
 * snapshots of the page's state captured over time. Version data includes
 * version numbers, JSON serialized page data, and timestamps.
 *
 * Access is restricted to authenticated users with editor or admin roles to
 * ensure secure collaboration and auditing.
 *
 * The pageId path parameter specifies which UI page's version history to query.
 * The request body supports search and filtering criteria conforming to
 * IFlexOfficePageVersion.IRequest to narrow down versions by version number
 * ranges, date ranges, or other metadata.
 *
 * The response includes paginated version summaries, enabling clients to
 * efficiently browse large version histories.
 *
 * This API complements GET endpoints for individual versions and operations to
 * create or restore versions.
 *
 * @param props.connection
 * @param props.pageId Unique identifier of the target UI page
 * @param props.body Search criteria and pagination parameters for page versions
 * @path /flexOffice/admin/pages/:pageId/versions
 * @accessor api.functional.flexOffice.admin.pages.versions.searchPageVersions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function searchPageVersions(
  connection: IConnection,
  props: searchPageVersions.Props,
): Promise<searchPageVersions.Response> {
  return true === connection.simulate
    ? searchPageVersions.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...searchPageVersions.METADATA,
          path: searchPageVersions.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace searchPageVersions {
  export type Props = {
    /** Unique identifier of the target UI page */
    pageId: string & tags.Format<"uuid">;

    /** Search criteria and pagination parameters for page versions */
    body: IFlexOfficePageVersion.IRequest;
  };
  export type Body = IFlexOfficePageVersion.IRequest;
  export type Response = IPageIFlexOfficePageVersion.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/flexOffice/admin/pages/:pageId/versions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/admin/pages/${encodeURIComponent(props.pageId ?? "null")}/versions`;
  export const random = (): IPageIFlexOfficePageVersion.ISummary =>
    typia.random<IPageIFlexOfficePageVersion.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: searchPageVersions.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: searchPageVersions.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("pageId")(() => typia.assert(props.pageId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information for a UI page version.
 *
 * Fetch full details of a single UI page version from the FlexOffice backend
 * system.
 *
 * This operation is crucial for retrieving historical snapshots of UI pages to
 * enable rollback or auditing of changes. The pageId and versionId path
 * parameters identify the exact version record.
 *
 * Only users with editor or admin roles can access this detailed data to ensure
 * proper governance.
 *
 * Upon success, the JSON serialized page data representing the page layout and
 * widget configuration at that version is returned.
 *
 * This API complements version list retrieval and page update endpoints.
 *
 * @param props.connection
 * @param props.pageId Unique identifier of the parent UI page
 * @param props.versionId Unique identifier of the UI page version
 * @path /flexOffice/admin/pages/:pageId/versions/:versionId
 * @accessor api.functional.flexOffice.admin.pages.versions.atPageVersion
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atPageVersion(
  connection: IConnection,
  props: atPageVersion.Props,
): Promise<atPageVersion.Response> {
  return true === connection.simulate
    ? atPageVersion.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atPageVersion.METADATA,
          path: atPageVersion.path(props),
          status: null,
        },
      );
}
export namespace atPageVersion {
  export type Props = {
    /** Unique identifier of the parent UI page */
    pageId: string & tags.Format<"uuid">;

    /** Unique identifier of the UI page version */
    versionId: string & tags.Format<"uuid">;
  };
  export type Response = IFlexOfficePageVersion;

  export const METADATA = {
    method: "GET",
    path: "/flexOffice/admin/pages/:pageId/versions/:versionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/admin/pages/${encodeURIComponent(props.pageId ?? "null")}/versions/${encodeURIComponent(props.versionId ?? "null")}`;
  export const random = (): IFlexOfficePageVersion =>
    typia.random<IFlexOfficePageVersion>();
  export const simulate = (
    connection: IConnection,
    props: atPageVersion.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atPageVersion.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("pageId")(() => typia.assert(props.pageId));
      assert.param("versionId")(() => typia.assert(props.versionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
