import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IFlexOfficeRowPermission } from "../../../../../structures/IFlexOfficeRowPermission";
import { IPageIFlexOfficeRowPermission } from "../../../../../structures/IPageIFlexOfficeRowPermission";

/**
 * Create a new row-level permission under a table permission.
 *
 * Create a new row-level permission filter condition under the specified table
 * permission. This allows defining row-level access limits for data security.
 *
 * Only users with admin roles may execute this operation. The request must
 * include the filter_condition specifying the SQL WHERE clause or expression
 * used to filter rows, applying granular control.
 *
 * Upon successful creation, the newly created row permission entity details are
 * returned.
 *
 * This operation interfaces with the flex_office_row_permissions table as
 * defined in the Prisma schema, ensuring proper linkage and compliance.
 *
 * @param props.connection
 * @param props.tablePermissionId Target table permission's ID
 * @param props.body RowPermission creation payload
 * @path /flexOffice/admin/tablePermissions/:tablePermissionId/rowPermissions
 * @accessor api.functional.flexOffice.admin.tablePermissions.rowPermissions.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Target table permission's ID */
    tablePermissionId: string & tags.Format<"uuid">;

    /** RowPermission creation payload */
    body: IFlexOfficeRowPermission.ICreate;
  };
  export type Body = IFlexOfficeRowPermission.ICreate;
  export type Response = IFlexOfficeRowPermission;

  export const METADATA = {
    method: "POST",
    path: "/flexOffice/admin/tablePermissions/:tablePermissionId/rowPermissions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/admin/tablePermissions/${encodeURIComponent(props.tablePermissionId ?? "null")}/rowPermissions`;
  export const random = (): IFlexOfficeRowPermission =>
    typia.random<IFlexOfficeRowPermission>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("tablePermissionId")(() =>
        typia.assert(props.tablePermissionId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List and search row permissions for a specified table permission.
 *
 * Search and retrieve row-level permissions associated with a specific table
 * permission in the FlexOffice system. These permissions define row filtering
 * rules that restrict data visibility at row granularity.
 *
 * The path parameter `tablePermissionId` identifies the parent table permission
 * context. The request body supports advanced search and pagination parameters
 * to filter, sort, and page through the row permissions.
 *
 * This operation is essential for administrators managing fine-grained,
 * row-level security policies. It returns a paginated collection of matching
 * row permissions, including summary metadata for efficient display.
 *
 * Proper authorization ensures only privileged users can access this sensitive
 * information.
 *
 * @param props.connection
 * @param props.tablePermissionId The unique identifier of the target table
 *   permission
 * @param props.body Search and pagination parameters for row permission
 *   filtering
 * @path /flexOffice/admin/tablePermissions/:tablePermissionId/rowPermissions
 * @accessor api.functional.flexOffice.admin.tablePermissions.rowPermissions.indexRowPermissions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexRowPermissions(
  connection: IConnection,
  props: indexRowPermissions.Props,
): Promise<indexRowPermissions.Response> {
  return true === connection.simulate
    ? indexRowPermissions.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexRowPermissions.METADATA,
          path: indexRowPermissions.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace indexRowPermissions {
  export type Props = {
    /** The unique identifier of the target table permission */
    tablePermissionId: string & tags.Format<"uuid">;

    /** Search and pagination parameters for row permission filtering */
    body: IFlexOfficeRowPermission.IRequest;
  };
  export type Body = IFlexOfficeRowPermission.IRequest;
  export type Response = IPageIFlexOfficeRowPermission.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/flexOffice/admin/tablePermissions/:tablePermissionId/rowPermissions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/admin/tablePermissions/${encodeURIComponent(props.tablePermissionId ?? "null")}/rowPermissions`;
  export const random = (): IPageIFlexOfficeRowPermission.ISummary =>
    typia.random<IPageIFlexOfficeRowPermission.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: indexRowPermissions.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexRowPermissions.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("tablePermissionId")(() =>
        typia.assert(props.tablePermissionId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve row-level permission by ID under a table permission.
 *
 * This operation retrieves a specific row-level permission filter condition
 * associated with a given table permission in the FlexOffice access control
 * system. It supports fine-grained access control at the database row level by
 * returning details of the filter condition that limits data visibility. The
 * API requires the UUID of the parent table permission and the UUID of the row
 * permission to uniquely identify the resource.
 *
 * Only authenticated users with appropriate access roles can retrieve this
 * data. The response includes the complete row permission entity, enabling
 * clients to understand the precise filter condition applied for row-level
 * security.
 *
 * This operation interfaces directly with the flex_office_row_permissions table
 * in the Prisma schema, which contains fields such as id, table_permission_id,
 * filter_condition, created_at, updated_at, and deleted_at.
 *
 * Clients commonly use this operation alongside listing and managing other row
 * permissions under the same table permission to maintain consistent access
 * control configurations.
 *
 * @param props.connection
 * @param props.tablePermissionId Target table permission's ID
 * @param props.rowPermissionId Target row permission's ID
 * @path /flexOffice/admin/tablePermissions/:tablePermissionId/rowPermissions/:rowPermissionId
 * @accessor api.functional.flexOffice.admin.tablePermissions.rowPermissions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Target table permission's ID */
    tablePermissionId: string & tags.Format<"uuid">;

    /** Target row permission's ID */
    rowPermissionId: string & tags.Format<"uuid">;
  };
  export type Response = IFlexOfficeRowPermission;

  export const METADATA = {
    method: "GET",
    path: "/flexOffice/admin/tablePermissions/:tablePermissionId/rowPermissions/:rowPermissionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/admin/tablePermissions/${encodeURIComponent(props.tablePermissionId ?? "null")}/rowPermissions/${encodeURIComponent(props.rowPermissionId ?? "null")}`;
  export const random = (): IFlexOfficeRowPermission =>
    typia.random<IFlexOfficeRowPermission>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("tablePermissionId")(() =>
        typia.assert(props.tablePermissionId),
      );
      assert.param("rowPermissionId")(() =>
        typia.assert(props.rowPermissionId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update row-level permission by ID under table permission.
 *
 * Update an existing row-level permission's filter condition under the
 * specified table permission. This operation modifies the SQL filter or any
 * other modifiable fields to adjust row-level data access control.
 *
 * Authorization is limited to admin users. The request body must conform to the
 * IFlexOfficeRowPermission.IUpdate schema excluding identifiers which are path
 * parameters.
 *
 * A successful update returns the updated row permission entity.
 *
 * Related operations include creation, retrieval, and deletion of row
 * permissions within the same table permission context.
 *
 * @param props.connection
 * @param props.tablePermissionId Target table permission's ID
 * @param props.rowPermissionId Target row permission's ID
 * @param props.body RowPermission update payload
 * @path /flexOffice/admin/tablePermissions/:tablePermissionId/rowPermissions/:rowPermissionId
 * @accessor api.functional.flexOffice.admin.tablePermissions.rowPermissions.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Target table permission's ID */
    tablePermissionId: string & tags.Format<"uuid">;

    /** Target row permission's ID */
    rowPermissionId: string & tags.Format<"uuid">;

    /** RowPermission update payload */
    body: IFlexOfficeRowPermission.IUpdate;
  };
  export type Body = IFlexOfficeRowPermission.IUpdate;
  export type Response = IFlexOfficeRowPermission;

  export const METADATA = {
    method: "PUT",
    path: "/flexOffice/admin/tablePermissions/:tablePermissionId/rowPermissions/:rowPermissionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/admin/tablePermissions/${encodeURIComponent(props.tablePermissionId ?? "null")}/rowPermissions/${encodeURIComponent(props.rowPermissionId ?? "null")}`;
  export const random = (): IFlexOfficeRowPermission =>
    typia.random<IFlexOfficeRowPermission>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("tablePermissionId")(() =>
        typia.assert(props.tablePermissionId),
      );
      assert.param("rowPermissionId")(() =>
        typia.assert(props.rowPermissionId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete row-level permission by ID under table permission.
 *
 * Remove a row-level permission filter condition by ID under the specified
 * table permission. This operation permanently deletes the filter condition.
 *
 * Only admin users can perform this deletion. The target is identified by table
 * and row permission UUIDs.
 *
 * This is a hard delete operation; the filter condition will no longer affect
 * access control after removal.
 *
 * This operation interacts directly with the flex_office_row_permissions table
 * in the Prisma schema.
 *
 * @param props.connection
 * @param props.tablePermissionId Target table permission's ID
 * @param props.rowPermissionId Target row permission's ID
 * @path /flexOffice/admin/tablePermissions/:tablePermissionId/rowPermissions/:rowPermissionId
 * @accessor api.functional.flexOffice.admin.tablePermissions.rowPermissions.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Target table permission's ID */
    tablePermissionId: string & tags.Format<"uuid">;

    /** Target row permission's ID */
    rowPermissionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/flexOffice/admin/tablePermissions/:tablePermissionId/rowPermissions/:rowPermissionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/admin/tablePermissions/${encodeURIComponent(props.tablePermissionId ?? "null")}/rowPermissions/${encodeURIComponent(props.rowPermissionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("tablePermissionId")(() =>
        typia.assert(props.tablePermissionId),
      );
      assert.param("rowPermissionId")(() =>
        typia.assert(props.rowPermissionId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
