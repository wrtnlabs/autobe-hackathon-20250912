import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IFlexOfficeDataSource } from "../../../../structures/IFlexOfficeDataSource";
import { IPageIFlexOfficeDataSource } from "../../../../structures/IPageIFlexOfficeDataSource";
export * as credentials from "./credentials/index";
export * as syncs from "./syncs/index";
export * as externalSheets from "./externalSheets/index";

/**
 * Create a new data source configuration.
 *
 * Create a new external data source configuration, supporting types like MySQL,
 * PostgreSQL, Google Sheets, and Excel.
 *
 * The input includes connection information and activation flag. Proper
 * validation of input data is expected.
 *
 * The operation returns the newly created data source record with all
 * properties as stored in the database.
 *
 * Only authorized roles can perform creation to ensure system integrity.
 *
 * Corresponds to the flex_office_data_sources Prisma schema table.
 *
 * @param props.connection
 * @param props.body Data source creation input data
 * @path /flexOffice/admin/dataSources
 * @accessor api.functional.flexOffice.admin.dataSources.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Data source creation input data */
    body: IFlexOfficeDataSource.ICreate;
  };
  export type Body = IFlexOfficeDataSource.ICreate;
  export type Response = IFlexOfficeDataSource;

  export const METADATA = {
    method: "POST",
    path: "/flexOffice/admin/dataSources",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/flexOffice/admin/dataSources";
  export const random = (): IFlexOfficeDataSource =>
    typia.random<IFlexOfficeDataSource>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a list of data sources with filtering and pagination
 * support.
 *
 * Retrieve a filtered, paginated list of external data sources registered in
 * the system. This includes databases, Google Sheets, Excel uploads, and other
 * supported types.
 *
 * Clients can specify search terms, filter by data source type (e.g., mysql,
 * postgresql, google_sheet, excel), and limit results by active status.
 * Pagination parameters allow controlling page size and the specific page.
 *
 * Security policies restrict this operation to authorized users with the
 * appropriate role.
 *
 * The operation returns summary information optimized for listing including id,
 * name, type, and active status.
 *
 * This operation corresponds directly to the flex_office_data_sources table as
 * defined in the Prisma schema.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for data source
 *   filtering
 * @path /flexOffice/admin/dataSources
 * @accessor api.functional.flexOffice.admin.dataSources.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for data source filtering */
    body: IFlexOfficeDataSource.IRequest;
  };
  export type Body = IFlexOfficeDataSource.IRequest;
  export type Response = IPageIFlexOfficeDataSource.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/flexOffice/admin/dataSources",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/flexOffice/admin/dataSources";
  export const random = (): IPageIFlexOfficeDataSource.ISummary =>
    typia.random<IPageIFlexOfficeDataSource.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed data source information by ID.
 *
 * Get detailed information of an external data source by its unique identifier.
 * The data source can be of type MySQL, PostgreSQL, Google Sheets, Excel, etc.
 *
 * The operation retrieves full configuration details, connection credentials
 * reference, activation status, and audit data.
 *
 * This API ensures that only authorized users can access sensitive data source
 * configurations.
 *
 * Relationship exists with data source syncs, credentials, and external sheets
 * enumerated separately.
 *
 * Returns the full data source record from the flex_office_data_sources table,
 * matching the Prisma schema structure.
 *
 * @param props.connection
 * @param props.dataSourceId Unique identifier of the target data source
 * @path /flexOffice/admin/dataSources/:dataSourceId
 * @accessor api.functional.flexOffice.admin.dataSources.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target data source */
    dataSourceId: string & tags.Format<"uuid">;
  };
  export type Response = IFlexOfficeDataSource;

  export const METADATA = {
    method: "GET",
    path: "/flexOffice/admin/dataSources/:dataSourceId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/admin/dataSources/${encodeURIComponent(props.dataSourceId ?? "null")}`;
  export const random = (): IFlexOfficeDataSource =>
    typia.random<IFlexOfficeDataSource>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("dataSourceId")(() => typia.assert(props.dataSourceId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing data source configuration.
 *
 * Update an existing data source's configuration given its unique identifier.
 *
 * The input body includes editable fields. The record is updated accordingly.
 *
 * The operation returns the updated data source object.
 *
 * Authorization restricted to admin and editor roles for security reasons.
 *
 * Matches the Prisma schema structure for flex_office_data_sources updates.
 *
 * @param props.connection
 * @param props.dataSourceId Unique identifier of the data source to update
 * @param props.body Data source update input data
 * @path /flexOffice/admin/dataSources/:dataSourceId
 * @accessor api.functional.flexOffice.admin.dataSources.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the data source to update */
    dataSourceId: string & tags.Format<"uuid">;

    /** Data source update input data */
    body: IFlexOfficeDataSource.IUpdate;
  };
  export type Body = IFlexOfficeDataSource.IUpdate;
  export type Response = IFlexOfficeDataSource;

  export const METADATA = {
    method: "PUT",
    path: "/flexOffice/admin/dataSources/:dataSourceId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/admin/dataSources/${encodeURIComponent(props.dataSourceId ?? "null")}`;
  export const random = (): IFlexOfficeDataSource =>
    typia.random<IFlexOfficeDataSource>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("dataSourceId")(() => typia.assert(props.dataSourceId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Hard delete a data source by dataSourceId.
 *
 * This API endpoint allows authorized users to permanently delete a data source
 * in the FlexOffice platform by specifying its unique identifier.
 *
 * The data source entity represents external databases or spreadsheets
 * connected for integration. Deleting a data source removes all associated
 * connection settings, credentials, sync schedules, and audit logs. This
 * operation should only be performed by users with sufficient permissions as
 * deletion is irreversible.
 *
 * Security-wise, only users with high-level roles such as administrators should
 * be authorized to perform this deletion to avoid accidental loss of important
 * integration links.
 *
 * Since the schema includes a 'deleted_at' field, this operation enforces hard
 * deletion, permanently erasing the record to maintain data integrity and
 * prevent orphaned relations.
 *
 * Users of this API should ensure that related data is adequately backed up or
 * no longer needed, as once deleted, data cannot be restored by this API.
 *
 * Related endpoints include retrieving data source details (GET
 * /dataSources/{dataSourceId}) and managing credentials for a given data
 * source.
 *
 * Potential errors include attempting to delete a non-existent data source or
 * lacking proper authorization.
 *
 * This operation does not require a request body and does not return any
 * content.
 *
 * @param props.connection
 * @param props.dataSourceId Unique identifier of the data source to delete
 * @path /flexOffice/admin/dataSources/:dataSourceId
 * @accessor api.functional.flexOffice.admin.dataSources.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the data source to delete */
    dataSourceId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/flexOffice/admin/dataSources/:dataSourceId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/admin/dataSources/${encodeURIComponent(props.dataSourceId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("dataSourceId")(() => typia.assert(props.dataSourceId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
