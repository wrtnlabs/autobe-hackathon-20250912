import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IFlexOfficeDataSourceCredential } from "../../../../../structures/IFlexOfficeDataSourceCredential";
import { IPageIFlexOfficeDataSourceCredential } from "../../../../../structures/IPageIFlexOfficeDataSourceCredential";

/**
 * Create a new credential for a data source.
 *
 * This API endpoint enables administrators to add a new authentication
 * credential for an existing data source.
 *
 * Credentials include OAuth2 tokens, API keys, or other secret tokens granting
 * access to external databases or services.
 *
 * The creation request must include all necessary credential details according
 * to the IFlexOfficeDataSourceCredential.ICreate schema.
 *
 * Upon success, the endpoint returns the full credential object including
 * identifiers and timestamps.
 *
 * Being a sensitive operation, only admin users can perform credential creation
 * to ensure security and compliance.
 *
 * Related endpoints allow searching credentials, retrieving details for
 * individual credentials, or deleting them.
 *
 * Errors may arise from invalid input data or unauthorized access attempts.
 *
 * The operation uses the POST method with a detailed request body and returns
 * the created resource in the response.
 *
 * @param props.connection
 * @param props.dataSourceId Unique identifier of the data source to add a
 *   credential for
 * @param props.body Creation info of the new data source credential
 * @path /flexOffice/admin/dataSources/:dataSourceId/credentials
 * @accessor api.functional.flexOffice.admin.dataSources.credentials.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the data source to add a credential for */
    dataSourceId: string & tags.Format<"uuid">;

    /** Creation info of the new data source credential */
    body: IFlexOfficeDataSourceCredential.ICreate;
  };
  export type Body = IFlexOfficeDataSourceCredential.ICreate;
  export type Response = IFlexOfficeDataSourceCredential;

  export const METADATA = {
    method: "POST",
    path: "/flexOffice/admin/dataSources/:dataSourceId/credentials",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/admin/dataSources/${encodeURIComponent(props.dataSourceId ?? "null")}/credentials`;
  export const random = (): IFlexOfficeDataSourceCredential =>
    typia.random<IFlexOfficeDataSourceCredential>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("dataSourceId")(() => typia.assert(props.dataSourceId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search credentials for a specific data source.
 *
 * This API endpoint allows an administrator to search and retrieve all
 * credentials linked to a specific data source.
 *
 * Credentials encompass various authentication tokens or keys required for
 * connecting to external data sources such as databases or cloud services.
 *
 * Users can supply complex search criteria including filtering by credential
 * type, expiration dates, or activity status.
 *
 * Response data is paginated to efficiently handle potentially large sets of
 * credentials.
 *
 * Security considerations require that only users with admin roles can access
 * credential details because they hold sensitive authentication information.
 *
 * This API supports usage scenarios where administrators need to audit, update,
 * or manage authentication credentials securely.
 *
 * It is related to endpoints creating new credentials or fetching individual
 * credential details.
 *
 * The request body defines the search and pagination parameters, while the
 * response includes paginated credential summaries.
 *
 * @param props.connection
 * @param props.dataSourceId Unique identifier of the data source to retrieve
 *   credentials for
 * @param props.body Search criteria and pagination parameters for data source
 *   credentials
 * @path /flexOffice/admin/dataSources/:dataSourceId/credentials
 * @accessor api.functional.flexOffice.admin.dataSources.credentials.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the data source to retrieve credentials for */
    dataSourceId: string & tags.Format<"uuid">;

    /** Search criteria and pagination parameters for data source credentials */
    body: IFlexOfficeDataSourceCredential.IRequest;
  };
  export type Body = IFlexOfficeDataSourceCredential.IRequest;
  export type Response = IPageIFlexOfficeDataSourceCredential.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/flexOffice/admin/dataSources/:dataSourceId/credentials",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/admin/dataSources/${encodeURIComponent(props.dataSourceId ?? "null")}/credentials`;
  export const random = (): IPageIFlexOfficeDataSourceCredential.ISummary =>
    typia.random<IPageIFlexOfficeDataSourceCredential.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("dataSourceId")(() => typia.assert(props.dataSourceId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a data source credential.
 *
 * This API endpoint returns detailed information about a specific credential
 * used to access a linked data source.
 *
 * Credentials contain sensitive authentication tokens necessary for connecting
 * to external data sources such as databases or online spreadsheets.
 *
 * The operation requires both the unique identifier of the data source and the
 * credential itself to ensure scoped and secure access.
 *
 * Users invoking this endpoint must hold admin privileges due to the sensitive
 * nature of the data.
 *
 * This operation complements endpoints that list credentials and allow creation
 * or modification of credentials.
 *
 * Potential errors include invalid identifier parameters or permission denials.
 *
 * No request body is required; the response returns a full credential object.
 *
 * @param props.connection
 * @param props.dataSourceId Unique identifier of the data source to which the
 *   credential belongs
 * @param props.credentialId Unique identifier of the credential to retrieve
 * @path /flexOffice/admin/dataSources/:dataSourceId/credentials/:credentialId
 * @accessor api.functional.flexOffice.admin.dataSources.credentials.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the data source to which the credential belongs */
    dataSourceId: string & tags.Format<"uuid">;

    /** Unique identifier of the credential to retrieve */
    credentialId: string & tags.Format<"uuid">;
  };
  export type Response = IFlexOfficeDataSourceCredential;

  export const METADATA = {
    method: "GET",
    path: "/flexOffice/admin/dataSources/:dataSourceId/credentials/:credentialId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/admin/dataSources/${encodeURIComponent(props.dataSourceId ?? "null")}/credentials/${encodeURIComponent(props.credentialId ?? "null")}`;
  export const random = (): IFlexOfficeDataSourceCredential =>
    typia.random<IFlexOfficeDataSourceCredential>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("dataSourceId")(() => typia.assert(props.dataSourceId));
      assert.param("credentialId")(() => typia.assert(props.credentialId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update credential details for a specific data source.
 *
 * Update a credential associated with a data source in the FlexOffice backend
 * system. This operation targets the flex_office_data_source_credentials table,
 * which stores authentication credentials like OAuth2 tokens or API keys for
 * external data sources.
 *
 * The update requires precise identification via the dataSourceId and
 * credentialId path parameters.
 *
 * Users with appropriate authorization can modify credential_type,
 * credential_value, and expires_at for improved security or credential refresh.
 * The system maintains audit timestamps created_at and updated_at
 * automatically.
 *
 * Security is critical as credentials grant access to external databases; thus,
 * strict validation and role-based access control apply. Errors for invalid IDs
 * or unauthorized attempts will be returned accordingly.
 *
 * Related operations include creating new credentials, deleting credentials,
 * and managing data sources themselves.
 *
 * @param props.connection
 * @param props.dataSourceId Unique identifier of the data source to which the
 *   credential belongs
 * @param props.credentialId Unique identifier of the credential to update
 * @param props.body Credential update payload containing type, value, and
 *   expiration
 * @path /flexOffice/admin/dataSources/:dataSourceId/credentials/:credentialId
 * @accessor api.functional.flexOffice.admin.dataSources.credentials.updateCredential
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateCredential(
  connection: IConnection,
  props: updateCredential.Props,
): Promise<updateCredential.Response> {
  return true === connection.simulate
    ? updateCredential.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateCredential.METADATA,
          path: updateCredential.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateCredential {
  export type Props = {
    /** Unique identifier of the data source to which the credential belongs */
    dataSourceId: string & tags.Format<"uuid">;

    /** Unique identifier of the credential to update */
    credentialId: string & tags.Format<"uuid">;

    /** Credential update payload containing type, value, and expiration */
    body: IFlexOfficeDataSourceCredential.IUpdate;
  };
  export type Body = IFlexOfficeDataSourceCredential.IUpdate;
  export type Response = IFlexOfficeDataSourceCredential;

  export const METADATA = {
    method: "PUT",
    path: "/flexOffice/admin/dataSources/:dataSourceId/credentials/:credentialId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/admin/dataSources/${encodeURIComponent(props.dataSourceId ?? "null")}/credentials/${encodeURIComponent(props.credentialId ?? "null")}`;
  export const random = (): IFlexOfficeDataSourceCredential =>
    typia.random<IFlexOfficeDataSourceCredential>();
  export const simulate = (
    connection: IConnection,
    props: updateCredential.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateCredential.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("dataSourceId")(() => typia.assert(props.dataSourceId));
      assert.param("credentialId")(() => typia.assert(props.credentialId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Erase a credential from a data source permanently.
 *
 * Erase a credential for a given data source identified by dataSourceId and
 * credentialId. This operation deletes the credential record permanently from
 * the flex_office_data_source_credentials table.
 *
 * Due to the sensitive nature of credentials controlling access to external
 * data sources, this operation is restricted to authorized roles (admin,
 * editor).
 *
 * The operation ensures no residual data remains after deletion, supporting
 * security compliance.
 *
 * Related operations include creating and updating credentials and managing
 * data sources.
 *
 * @param props.connection
 * @param props.dataSourceId Unique identifier of the data source owning the
 *   credential
 * @param props.credentialId Unique identifier of the credential to erase
 * @path /flexOffice/admin/dataSources/:dataSourceId/credentials/:credentialId
 * @accessor api.functional.flexOffice.admin.dataSources.credentials.eraseCredential
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseCredential(
  connection: IConnection,
  props: eraseCredential.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseCredential.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseCredential.METADATA,
          path: eraseCredential.path(props),
          status: null,
        },
      );
}
export namespace eraseCredential {
  export type Props = {
    /** Unique identifier of the data source owning the credential */
    dataSourceId: string & tags.Format<"uuid">;

    /** Unique identifier of the credential to erase */
    credentialId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/flexOffice/admin/dataSources/:dataSourceId/credentials/:credentialId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/admin/dataSources/${encodeURIComponent(props.dataSourceId ?? "null")}/credentials/${encodeURIComponent(props.credentialId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseCredential.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseCredential.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("dataSourceId")(() => typia.assert(props.dataSourceId));
      assert.param("credentialId")(() => typia.assert(props.credentialId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
