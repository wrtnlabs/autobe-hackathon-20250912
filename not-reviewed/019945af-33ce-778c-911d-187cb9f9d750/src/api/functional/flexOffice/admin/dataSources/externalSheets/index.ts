import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IFlexOfficeExternalSheet } from "../../../../../structures/IFlexOfficeExternalSheet";
import { IPageIFlexOfficeExternalSheet } from "../../../../../structures/IPageIFlexOfficeExternalSheet";

/**
 * Create an external sheet record for a data source.
 *
 * Create a new external sheet metadata entry linked to a data source. The
 * client must supply the file name, file URL, and sheet count. This facilitates
 * the integration of external spreadsheet data into FlexOffice systems.
 *
 * Access is limited to authorized admin or editor users. The operation enforces
 * constraints from the Prisma schema on data uniqueness and integrity.
 *
 * Supports full lifecycle management with related update and delete operations.
 *
 * @param props.connection
 * @param props.dataSourceId Unique identifier of the target data source
 * @param props.body External sheet creation data
 * @path /flexOffice/admin/dataSources/:dataSourceId/externalSheets
 * @accessor api.functional.flexOffice.admin.dataSources.externalSheets.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the target data source */
    dataSourceId: string & tags.Format<"uuid">;

    /** External sheet creation data */
    body: IFlexOfficeExternalSheet.ICreate;
  };
  export type Body = IFlexOfficeExternalSheet.ICreate;
  export type Response = IFlexOfficeExternalSheet;

  export const METADATA = {
    method: "POST",
    path: "/flexOffice/admin/dataSources/:dataSourceId/externalSheets",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/admin/dataSources/${encodeURIComponent(props.dataSourceId ?? "null")}/externalSheets`;
  export const random = (): IFlexOfficeExternalSheet =>
    typia.random<IFlexOfficeExternalSheet>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("dataSourceId")(() => typia.assert(props.dataSourceId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search external sheets linked to a data source.
 *
 * Search and retrieve external spreadsheet records associated with a data
 * source. Supports filtering and pagination.
 *
 * This operation reads data from the flex_office_external_sheets table and
 * returns relevant metadata such as file names, URLs, sheet counts, and last
 * synced timestamps.
 *
 * Security is restricted to administrator roles due to sensitive external data
 * access.
 *
 * The request allows specifying search parameters to filter and paginate
 * results efficiently.
 *
 * The response contains the matched external sheet records in paginated form
 * for user display and management.
 *
 * @param props.connection
 * @param props.dataSourceId Identifier of the data source to filter external
 *   sheets
 * @param props.body External sheet search criteria and pagination parameters
 * @path /flexOffice/admin/dataSources/:dataSourceId/externalSheets
 * @accessor api.functional.flexOffice.admin.dataSources.externalSheets.searchExternalSheets
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function searchExternalSheets(
  connection: IConnection,
  props: searchExternalSheets.Props,
): Promise<searchExternalSheets.Response> {
  return true === connection.simulate
    ? searchExternalSheets.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...searchExternalSheets.METADATA,
          path: searchExternalSheets.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace searchExternalSheets {
  export type Props = {
    /** Identifier of the data source to filter external sheets */
    dataSourceId: string & tags.Format<"uuid">;

    /** External sheet search criteria and pagination parameters */
    body: IFlexOfficeExternalSheet.IRequest;
  };
  export type Body = IFlexOfficeExternalSheet.IRequest;
  export type Response = IPageIFlexOfficeExternalSheet.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/flexOffice/admin/dataSources/:dataSourceId/externalSheets",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/admin/dataSources/${encodeURIComponent(props.dataSourceId ?? "null")}/externalSheets`;
  export const random = (): IPageIFlexOfficeExternalSheet.ISummary =>
    typia.random<IPageIFlexOfficeExternalSheet.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: searchExternalSheets.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: searchExternalSheets.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("dataSourceId")(() => typia.assert(props.dataSourceId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve metadata of a specific external sheet linked to a data source.
 *
 * Retrieve detailed metadata for an external sheet associated with the
 * specified data source. This operation is intended for authorized users who
 * need to view file information including the sheet count and last
 * synchronization times.
 *
 * Access control restricts this operation to users with the appropriate
 * permissions (admin, editor, or viewer) as defined by the system's role-based
 * access controls. The operation references the 'flex_office_external_sheets'
 * Prisma schema table ensuring data consistency.
 *
 * Invalid or missing IDs will cause appropriate error responses. The API is
 * designed to work congruently with create, update, and delete operations for
 * full lifecycle management of external sheets.
 *
 * @param props.connection
 * @param props.dataSourceId Unique identifier of the target data source
 * @param props.sheetId Unique identifier of the target external sheet
 * @path /flexOffice/admin/dataSources/:dataSourceId/externalSheets/:sheetId
 * @accessor api.functional.flexOffice.admin.dataSources.externalSheets.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target data source */
    dataSourceId: string & tags.Format<"uuid">;

    /** Unique identifier of the target external sheet */
    sheetId: string & tags.Format<"uuid">;
  };
  export type Response = IFlexOfficeExternalSheet;

  export const METADATA = {
    method: "GET",
    path: "/flexOffice/admin/dataSources/:dataSourceId/externalSheets/:sheetId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/admin/dataSources/${encodeURIComponent(props.dataSourceId ?? "null")}/externalSheets/${encodeURIComponent(props.sheetId ?? "null")}`;
  export const random = (): IFlexOfficeExternalSheet =>
    typia.random<IFlexOfficeExternalSheet>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("dataSourceId")(() => typia.assert(props.dataSourceId));
      assert.param("sheetId")(() => typia.assert(props.sheetId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an external sheet metadata record for a given data source and sheet.
 *
 * Update metadata details of an existing external sheet associated with a data
 * source. Updates include file name, URL, sheet count, and last synced
 * timestamp.
 *
 * This operation mandates authorization of admin or editor roles, enforcing
 * access control policies. It aligns with the 'flex_office_external_sheets'
 * Prisma table schema for accurate data manipulation.
 *
 * The API supports concurrency checks and rejects invalid updates with
 * appropriate error responses.
 *
 * @param props.connection
 * @param props.dataSourceId Unique identifier of the target data source
 * @param props.sheetId Unique identifier of the target external sheet
 * @param props.body External sheet update data
 * @path /flexOffice/admin/dataSources/:dataSourceId/externalSheets/:sheetId
 * @accessor api.functional.flexOffice.admin.dataSources.externalSheets.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target data source */
    dataSourceId: string & tags.Format<"uuid">;

    /** Unique identifier of the target external sheet */
    sheetId: string & tags.Format<"uuid">;

    /** External sheet update data */
    body: IFlexOfficeExternalSheet.IUpdate;
  };
  export type Body = IFlexOfficeExternalSheet.IUpdate;
  export type Response = IFlexOfficeExternalSheet;

  export const METADATA = {
    method: "PUT",
    path: "/flexOffice/admin/dataSources/:dataSourceId/externalSheets/:sheetId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/admin/dataSources/${encodeURIComponent(props.dataSourceId ?? "null")}/externalSheets/${encodeURIComponent(props.sheetId ?? "null")}`;
  export const random = (): IFlexOfficeExternalSheet =>
    typia.random<IFlexOfficeExternalSheet>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("dataSourceId")(() => typia.assert(props.dataSourceId));
      assert.param("sheetId")(() => typia.assert(props.sheetId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete an external sheet record from a data source.
 *
 * Soft delete an external sheet linked to a data source by marking it as
 * deleted via the 'deleted_at' timestamp. This operation supports auditability
 * by avoiding physical deletion.
 *
 * Only authorized admin or editor users can perform this operation to ensure
 * data integrity and compliance.
 *
 * It complements create and update operations providing a full lifecycle
 * management API for external sheets.
 *
 * @param props.connection
 * @param props.dataSourceId Unique identifier of the target data source
 * @param props.sheetId Unique identifier of the target external sheet
 * @path /flexOffice/admin/dataSources/:dataSourceId/externalSheets/:sheetId
 * @accessor api.functional.flexOffice.admin.dataSources.externalSheets.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target data source */
    dataSourceId: string & tags.Format<"uuid">;

    /** Unique identifier of the target external sheet */
    sheetId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/flexOffice/admin/dataSources/:dataSourceId/externalSheets/:sheetId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/admin/dataSources/${encodeURIComponent(props.dataSourceId ?? "null")}/externalSheets/${encodeURIComponent(props.sheetId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("dataSourceId")(() => typia.assert(props.dataSourceId));
      assert.param("sheetId")(() => typia.assert(props.sheetId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
