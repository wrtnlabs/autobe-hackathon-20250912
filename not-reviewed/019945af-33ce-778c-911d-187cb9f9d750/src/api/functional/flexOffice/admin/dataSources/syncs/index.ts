import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IFlexOfficeDataSourceSync } from "../../../../../structures/IFlexOfficeDataSourceSync";
import { IPageIFlexOfficeDataSourceSync } from "../../../../../structures/IPageIFlexOfficeDataSourceSync";

/**
 * Create a synchronization task for a specific data source.
 *
 * Create a new synchronization task for an external data source within
 * FlexOffice. This operation accepts parameters defining the synchronization
 * schedule and any initial execution metadata.
 *
 * It is linked to the flex_office_data_source_syncs table that records sync
 * schedules, statuses, execution timestamps, and error messages if any. Users
 * must provide the dataSourceId identifying the data source to sync.
 *
 * Security is critical: only authorized users like system administrators should
 * invoke this operation due to potential impact on system workload and data
 * consistency.
 *
 * Input validation ensures correct scheduling timestamps and proper initial
 * state setup. The newly created sync record is persisted with creation and
 * update timestamps.
 *
 * This API is commonly used in data integration workflows and supports retry
 * mechanisms through subsequent update operations.
 *
 * If the dataSourceId does not exist, the operation will fail with an
 * appropriate error.
 *
 * @param props.connection
 * @param props.dataSourceId Identifier of the data source to synchronize
 * @param props.body Synchronization task creation parameters
 * @path /flexOffice/admin/dataSources/:dataSourceId/syncs
 * @accessor api.functional.flexOffice.admin.dataSources.syncs.createSync
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createSync(
  connection: IConnection,
  props: createSync.Props,
): Promise<createSync.Response> {
  return true === connection.simulate
    ? createSync.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createSync.METADATA,
          path: createSync.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace createSync {
  export type Props = {
    /** Identifier of the data source to synchronize */
    dataSourceId: string & tags.Format<"uuid">;

    /** Synchronization task creation parameters */
    body: IFlexOfficeDataSourceSync.ICreate;
  };
  export type Body = IFlexOfficeDataSourceSync.ICreate;
  export type Response = IFlexOfficeDataSourceSync;

  export const METADATA = {
    method: "POST",
    path: "/flexOffice/admin/dataSources/:dataSourceId/syncs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/admin/dataSources/${encodeURIComponent(props.dataSourceId ?? "null")}/syncs`;
  export const random = (): IFlexOfficeDataSourceSync =>
    typia.random<IFlexOfficeDataSourceSync>();
  export const simulate = (
    connection: IConnection,
    props: createSync.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createSync.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("dataSourceId")(() => typia.assert(props.dataSourceId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve paginated sync operation records for a data source.
 *
 * Search synchronization operations of a particular data source identified by
 * dataSourceId. Supports advanced filters, pagination, and sorting to navigate
 * sync history and status.
 *
 * This operation facilitates monitoring and management of data refresh jobs,
 * enabling display of sync scheduling, completion status, errors, and timing.
 *
 * Role-based access ensures only authorized users can review synchronization
 * logs for secure operations.
 *
 * Related operations include retrieving specific sync details and managing data
 * source configurations.
 *
 * @param props.connection
 * @param props.dataSourceId Unique identifier of the target data source
 * @param props.body Search filters and pagination info for data source syncs
 * @path /flexOffice/admin/dataSources/:dataSourceId/syncs
 * @accessor api.functional.flexOffice.admin.dataSources.syncs.searchSyncs
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function searchSyncs(
  connection: IConnection,
  props: searchSyncs.Props,
): Promise<searchSyncs.Response> {
  return true === connection.simulate
    ? searchSyncs.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...searchSyncs.METADATA,
          path: searchSyncs.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace searchSyncs {
  export type Props = {
    /** Unique identifier of the target data source */
    dataSourceId: string & tags.Format<"uuid">;

    /** Search filters and pagination info for data source syncs */
    body: IFlexOfficeDataSourceSync.IRequest;
  };
  export type Body = IFlexOfficeDataSourceSync.IRequest;
  export type Response = IPageIFlexOfficeDataSourceSync;

  export const METADATA = {
    method: "PATCH",
    path: "/flexOffice/admin/dataSources/:dataSourceId/syncs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/admin/dataSources/${encodeURIComponent(props.dataSourceId ?? "null")}/syncs`;
  export const random = (): IPageIFlexOfficeDataSourceSync =>
    typia.random<IPageIFlexOfficeDataSourceSync>();
  export const simulate = (
    connection: IConnection,
    props: searchSyncs.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: searchSyncs.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("dataSourceId")(() => typia.assert(props.dataSourceId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed synchronization status by ID for a data source.
 *
 * Get detailed synchronization information by syncId for data source identified
 * by dataSourceId. Provides status, timing, error message details of sync
 * operation.
 *
 * Ensures authorized access control and accurate identification with composite
 * primary keys.
 *
 * Related operations include searching sync logs and managing data sources.
 *
 * @param props.connection
 * @param props.dataSourceId Unique identifier of the data source containing the
 *   sync record
 * @param props.syncId Unique identifier of the synchronization record
 * @path /flexOffice/admin/dataSources/:dataSourceId/syncs/:syncId
 * @accessor api.functional.flexOffice.admin.dataSources.syncs.atSync
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atSync(
  connection: IConnection,
  props: atSync.Props,
): Promise<atSync.Response> {
  return true === connection.simulate
    ? atSync.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atSync.METADATA,
          path: atSync.path(props),
          status: null,
        },
      );
}
export namespace atSync {
  export type Props = {
    /** Unique identifier of the data source containing the sync record */
    dataSourceId: string & tags.Format<"uuid">;

    /** Unique identifier of the synchronization record */
    syncId: string & tags.Format<"uuid">;
  };
  export type Response = IFlexOfficeDataSourceSync;

  export const METADATA = {
    method: "GET",
    path: "/flexOffice/admin/dataSources/:dataSourceId/syncs/:syncId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/admin/dataSources/${encodeURIComponent(props.dataSourceId ?? "null")}/syncs/${encodeURIComponent(props.syncId ?? "null")}`;
  export const random = (): IFlexOfficeDataSourceSync =>
    typia.random<IFlexOfficeDataSourceSync>();
  export const simulate = (
    connection: IConnection,
    props: atSync.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atSync.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("dataSourceId")(() => typia.assert(props.dataSourceId));
      assert.param("syncId")(() => typia.assert(props.syncId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update synchronization task details for a specific data source.
 *
 * Update synchronization task details for a data source in FlexOffice. This
 * includes modifying schedule, status, or error information.
 *
 * The operation targets a specific sync record identified by dataSourceId and
 * syncId. Only administrators are authorized to make such changes.
 *
 * Data integrity checks confirm that updates follow valid state progressions
 * and accurate timestamp formats. Upon success, the updated synchronization
 * record is returned.
 *
 * This supports operational management of automated or manual data refresh
 * workflows.
 *
 * @param props.connection
 * @param props.dataSourceId Identifier of the data source owning the sync task
 * @param props.syncId Identifier of the synchronization task to update
 * @param props.body Synchronization task update details
 * @path /flexOffice/admin/dataSources/:dataSourceId/syncs/:syncId
 * @accessor api.functional.flexOffice.admin.dataSources.syncs.updateSync
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateSync(
  connection: IConnection,
  props: updateSync.Props,
): Promise<updateSync.Response> {
  return true === connection.simulate
    ? updateSync.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateSync.METADATA,
          path: updateSync.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateSync {
  export type Props = {
    /** Identifier of the data source owning the sync task */
    dataSourceId: string & tags.Format<"uuid">;

    /** Identifier of the synchronization task to update */
    syncId: string & tags.Format<"uuid">;

    /** Synchronization task update details */
    body: IFlexOfficeDataSourceSync.IUpdate;
  };
  export type Body = IFlexOfficeDataSourceSync.IUpdate;
  export type Response = IFlexOfficeDataSourceSync;

  export const METADATA = {
    method: "PUT",
    path: "/flexOffice/admin/dataSources/:dataSourceId/syncs/:syncId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/admin/dataSources/${encodeURIComponent(props.dataSourceId ?? "null")}/syncs/${encodeURIComponent(props.syncId ?? "null")}`;
  export const random = (): IFlexOfficeDataSourceSync =>
    typia.random<IFlexOfficeDataSourceSync>();
  export const simulate = (
    connection: IConnection,
    props: updateSync.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateSync.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("dataSourceId")(() => typia.assert(props.dataSourceId));
      assert.param("syncId")(() => typia.assert(props.syncId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a synchronization task for a specific data source.
 *
 * Soft delete (mark as deleted) a synchronization task for an external data
 * source. This preserves the record for audit purposes while preventing further
 * execution.
 *
 * The operation is applicable only to administrators for security and
 * compliance reasons.
 *
 * Setting the deleted_at timestamp flags the record as inactive without
 * physically removing it from the database.
 *
 * No request body is needed and there is no content returned on success.
 *
 * This API enhances operational control over sync tasks and maintains data
 * lineage for forensic review.
 *
 * @param props.connection
 * @param props.dataSourceId Data source identifier to which the sync task
 *   belongs
 * @param props.syncId Identifier of the sync task to be soft deleted
 * @path /flexOffice/admin/dataSources/:dataSourceId/syncs/:syncId
 * @accessor api.functional.flexOffice.admin.dataSources.syncs.eraseSync
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseSync(
  connection: IConnection,
  props: eraseSync.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseSync.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseSync.METADATA,
          path: eraseSync.path(props),
          status: null,
        },
      );
}
export namespace eraseSync {
  export type Props = {
    /** Data source identifier to which the sync task belongs */
    dataSourceId: string & tags.Format<"uuid">;

    /** Identifier of the sync task to be soft deleted */
    syncId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/flexOffice/admin/dataSources/:dataSourceId/syncs/:syncId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/admin/dataSources/${encodeURIComponent(props.dataSourceId ?? "null")}/syncs/${encodeURIComponent(props.syncId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseSync.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseSync.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("dataSourceId")(() => typia.assert(props.dataSourceId));
      assert.param("syncId")(() => typia.assert(props.syncId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
