import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IFlexOfficeSystemAlerts } from "../../../../structures/IFlexOfficeSystemAlerts";
import { IFlexOfficeSystemAlert } from "../../../../structures/IFlexOfficeSystemAlert";
import { IPageIFlexOfficeSystemAlert } from "../../../../structures/IPageIFlexOfficeSystemAlert";

/**
 * Create a new system alert notification.
 *
 * Create a new system alert record capturing severity level (e.g., info,
 * warning, critical), descriptive message, initial resolution status (typically
 * unresolved), and timestamps.
 *
 * Security mandates this operation is restricted to admin roles with privileges
 * to generate alerts either manually or from automated backend processes.
 *
 * The operation validates input data integrity, including severity field
 * constraints.
 *
 * System alerts created are recorded with server-generated timestamps for
 * consistency.
 *
 * This endpoint serves system monitoring components or privileged users who
 * manually log new alerts.
 *
 * No response body is necessary other than confirmation of creation success
 * with new alert details.
 *
 * @param props.connection
 * @param props.body Information required to create a new system alert
 * @path /flexOffice/admin/systemAlerts
 * @accessor api.functional.flexOffice.admin.systemAlerts.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information required to create a new system alert */
    body: IFlexOfficeSystemAlerts.ICreate;
  };
  export type Body = IFlexOfficeSystemAlerts.ICreate;
  export type Response = IFlexOfficeSystemAlerts;

  export const METADATA = {
    method: "POST",
    path: "/flexOffice/admin/systemAlerts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/flexOffice/admin/systemAlerts";
  export const random = (): IFlexOfficeSystemAlerts =>
    typia.random<IFlexOfficeSystemAlerts>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve paginated system alerts.
 *
 * Retrieve filtered and paginated list of system alerts to monitor system
 * health and security status. System alerts include severity level, descriptive
 * messages, resolution status, and timestamps for creation and resolution.
 *
 * The operation supports filtering by severity, resolution state, and other
 * parameters, with pagination to limit result size.
 *
 * This API is intended for system administrators to keep track of critical
 * events and ensure timely remediation.
 *
 * Data is sourced from the flex_office_system_alerts Prisma table, which
 * supports active record management.
 *
 * The response consists of alert summary data optimized for dashboard display.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for system alerts
 * @path /flexOffice/admin/systemAlerts
 * @accessor api.functional.flexOffice.admin.systemAlerts.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for system alerts */
    body: IFlexOfficeSystemAlert.IRequest;
  };
  export type Body = IFlexOfficeSystemAlert.IRequest;
  export type Response = IPageIFlexOfficeSystemAlert.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/flexOffice/admin/systemAlerts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/flexOffice/admin/systemAlerts";
  export const random = (): IPageIFlexOfficeSystemAlert.ISummary =>
    typia.random<IPageIFlexOfficeSystemAlert.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a system alert by its ID.
 *
 * Retrieve detailed information about a specific system alert from the
 * database. The targeted system alert includes data such as severity (info,
 * warning, critical), message describing the alert, resolution status, and
 * timestamps for creation, update, and resolution.
 *
 * Security considerations include restricting access to authenticated users
 * with appropriate permissions or roles that allow viewing system alerts. This
 * prevents unauthorized users from accessing potentially sensitive operational
 * information.
 *
 * This operation directly queries the flex_office_system_alerts table, which is
 * central to the system's alerting and monitoring functionality. It is
 * essential for administrators or monitoring services to obtain accurate
 * current alert status.
 *
 * Validation ensures the provided alert ID is a valid UUID matching existing
 * records. If the alert does not exist, an appropriate error response should be
 * given.
 *
 * Related operations include listing alerts, creating new alerts (usually
 * system generated), updating alerts' resolution status, and removing alerts
 * from the active list.
 *
 * This GET operation returns a full system alert data entity without
 * modification.
 *
 * @param props.connection
 * @param props.id Unique identifier (UUID) of the system alert to retrieve
 * @path /flexOffice/admin/systemAlerts/:id
 * @accessor api.functional.flexOffice.admin.systemAlerts.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) of the system alert to retrieve */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IFlexOfficeSystemAlerts;

  export const METADATA = {
    method: "GET",
    path: "/flexOffice/admin/systemAlerts/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/admin/systemAlerts/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IFlexOfficeSystemAlerts =>
    typia.random<IFlexOfficeSystemAlerts>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing system alert by its ID.
 *
 * Update details of an existing system alert including severity, message, and
 * resolution status. The operation requires the alert's unique identifier and a
 * request body containing modifiable alert attributes.
 *
 * Security protocols require only admin users to perform updates. The system
 * ensures request data integrity and validates status transitions.
 *
 * Successful updates modify the alert record's update timestamp.
 *
 * This PUT operation returns the updated system alert information for
 * confirmation.
 *
 * Related operations include retrieving alert info, creating new alerts, and
 * deleting alerts when resolved or obsolete.
 *
 * @param props.connection
 * @param props.id Unique identifier (UUID) of the system alert to update
 * @param props.body New data for the system alert to update
 * @path /flexOffice/admin/systemAlerts/:id
 * @accessor api.functional.flexOffice.admin.systemAlerts.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier (UUID) of the system alert to update */
    id: string & tags.Format<"uuid">;

    /** New data for the system alert to update */
    body: IFlexOfficeSystemAlerts.IUpdate;
  };
  export type Body = IFlexOfficeSystemAlerts.IUpdate;
  export type Response = IFlexOfficeSystemAlerts;

  export const METADATA = {
    method: "PUT",
    path: "/flexOffice/admin/systemAlerts/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/admin/systemAlerts/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IFlexOfficeSystemAlerts =>
    typia.random<IFlexOfficeSystemAlerts>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a system alert by its ID.
 *
 * Delete a system alert permanently from the database. This operation removes
 * all data associated with the alert and cannot be undone.
 *
 * Only users with admin privileges can execute this operation.
 *
 * Validation applies to the alert ID parameter ensuring valid UUID format.
 *
 * This operation does not return a response body but should confirm success or
 * failure through HTTP status codes.
 *
 * Related API calls include listing alerts, retrieving, creating, and updating
 * alerts.
 *
 * This endpoint supports hard deletion of system alert data.
 *
 * @param props.connection
 * @param props.id Unique identifier (UUID) of the system alert to delete
 * @path /flexOffice/admin/systemAlerts/:id
 * @accessor api.functional.flexOffice.admin.systemAlerts.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier (UUID) of the system alert to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/flexOffice/admin/systemAlerts/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/admin/systemAlerts/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
