import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IFlexOfficeWidgetInstallation } from "../../../../../structures/IFlexOfficeWidgetInstallation";
import { IPageIFlexOfficeWidgetInstallation } from "../../../../../structures/IPageIFlexOfficeWidgetInstallation";

/**
 * List widget installations for a marketplace widget.
 *
 * Fetches a paginated list of UI page installations for a specific marketplace
 * widget by its UUID. Supports filtering and sorting via request body
 * parameters. Access allowed for admins and editors only. Returns summarized
 * install data paginated for client consumption.
 *
 * @param props.connection
 * @param props.widgetId Unique identifier of the marketplace widget whose
 *   installations to list
 * @param props.body Search and pagination parameters for widget installations
 * @path /flexOffice/admin/marketplaceWidgets/:widgetId/installations
 * @accessor api.functional.flexOffice.admin.marketplaceWidgets.installations.indexWidgetInstallations
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexWidgetInstallations(
  connection: IConnection,
  props: indexWidgetInstallations.Props,
): Promise<indexWidgetInstallations.Response> {
  return true === connection.simulate
    ? indexWidgetInstallations.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexWidgetInstallations.METADATA,
          path: indexWidgetInstallations.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace indexWidgetInstallations {
  export type Props = {
    /**
     * Unique identifier of the marketplace widget whose installations to
     * list
     */
    widgetId: string & tags.Format<"uuid">;

    /** Search and pagination parameters for widget installations */
    body: IFlexOfficeWidgetInstallation.IRequest;
  };
  export type Body = IFlexOfficeWidgetInstallation.IRequest;
  export type Response = IPageIFlexOfficeWidgetInstallation.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/flexOffice/admin/marketplaceWidgets/:widgetId/installations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/admin/marketplaceWidgets/${encodeURIComponent(props.widgetId ?? "null")}/installations`;
  export const random = (): IPageIFlexOfficeWidgetInstallation.ISummary =>
    typia.random<IPageIFlexOfficeWidgetInstallation.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: indexWidgetInstallations.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexWidgetInstallations.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("widgetId")(() => typia.assert(props.widgetId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a widget installation.
 *
 * Retrieves detailed information of a specific widget installation identified
 * by the marketplace widget UUID and the installation UUID. For admin and
 * editor roles only. Returns all registration data including configuration,
 * installation timestamp, and soft deletion status if applicable.
 *
 * @param props.connection
 * @param props.widgetId Unique identifier of the marketplace widget
 * @param props.installationId Unique identifier of the widget installation
 * @path /flexOffice/admin/marketplaceWidgets/:widgetId/installations/:installationId
 * @accessor api.functional.flexOffice.admin.marketplaceWidgets.installations.atWidgetInstallation
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atWidgetInstallation(
  connection: IConnection,
  props: atWidgetInstallation.Props,
): Promise<atWidgetInstallation.Response> {
  return true === connection.simulate
    ? atWidgetInstallation.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atWidgetInstallation.METADATA,
          path: atWidgetInstallation.path(props),
          status: null,
        },
      );
}
export namespace atWidgetInstallation {
  export type Props = {
    /** Unique identifier of the marketplace widget */
    widgetId: string & tags.Format<"uuid">;

    /** Unique identifier of the widget installation */
    installationId: string & tags.Format<"uuid">;
  };
  export type Response = IFlexOfficeWidgetInstallation;

  export const METADATA = {
    method: "GET",
    path: "/flexOffice/admin/marketplaceWidgets/:widgetId/installations/:installationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/admin/marketplaceWidgets/${encodeURIComponent(props.widgetId ?? "null")}/installations/${encodeURIComponent(props.installationId ?? "null")}`;
  export const random = (): IFlexOfficeWidgetInstallation =>
    typia.random<IFlexOfficeWidgetInstallation>();
  export const simulate = (
    connection: IConnection,
    props: atWidgetInstallation.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atWidgetInstallation.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("widgetId")(() => typia.assert(props.widgetId));
      assert.param("installationId")(() => typia.assert(props.installationId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
