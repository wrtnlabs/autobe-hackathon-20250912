import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IFlexOfficeMarketplaceWidget } from "../../../../structures/IFlexOfficeMarketplaceWidget";
import { IPageIFlexOfficeMarketplaceWidget } from "../../../../structures/IPageIFlexOfficeMarketplaceWidget";
export * as installations from "./installations/index";

/**
 * Create a new marketplace widget.
 *
 * Creates a new marketplace widget in the system. The client must provide
 * detailed widget information including unique widget code, name, version, and
 * optional description.
 *
 * Only users with admin or editor roles may perform this operation. The system
 * validates the uniqueness of the widget code.
 *
 * On successful creation, the newly created widget entity is returned with all
 * details.
 *
 * This operation is part of the extensibility module's marketplace widget
 * management functionalities.
 *
 * No soft delete or versioning is involved beyond audit timestamps.
 *
 * Clients should handle error responses such as duplicate code or validation
 * failures appropriately.
 *
 * @param props.connection
 * @param props.body Creation info for a new marketplace widget
 * @path /flexOffice/admin/marketplaceWidgets
 * @accessor api.functional.flexOffice.admin.marketplaceWidgets.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation info for a new marketplace widget */
    body: IFlexOfficeMarketplaceWidget.ICreate;
  };
  export type Body = IFlexOfficeMarketplaceWidget.ICreate;
  export type Response = IFlexOfficeMarketplaceWidget;

  export const METADATA = {
    method: "POST",
    path: "/flexOffice/admin/marketplaceWidgets",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/flexOffice/admin/marketplaceWidgets";
  export const random = (): IFlexOfficeMarketplaceWidget =>
    typia.random<IFlexOfficeMarketplaceWidget>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve list of marketplace widgets with filtering, pagination, and sorting.
 *
 * Retrieves a filtered, sorted, and paginated list of marketplace widgets from
 * the system. This endpoint provides advanced search capabilities to find
 * marketplace widgets by name, version, or description.
 *
 * Supports pagination parameters such as page number and size, searching by
 * keywords, and sorting by creation date or widget name.
 *
 * Only users with admin or editor roles may access this list due to the
 * sensitivity of marketplace widget management.
 *
 * Response includes summaries of marketplace widgets suitable for listings and
 * browsing.
 *
 * The operation integrates with the flex_office_marketplace_widgets table to
 * fetch current active widgets (not deleted) and includes indexes on name and
 * version for efficient querying.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for marketplace
 *   widgets filtering
 * @path /flexOffice/admin/marketplaceWidgets
 * @accessor api.functional.flexOffice.admin.marketplaceWidgets.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for marketplace widgets
     * filtering
     */
    body: IFlexOfficeMarketplaceWidget.IRequest;
  };
  export type Body = IFlexOfficeMarketplaceWidget.IRequest;
  export type Response = IPageIFlexOfficeMarketplaceWidget.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/flexOffice/admin/marketplaceWidgets",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/flexOffice/admin/marketplaceWidgets";
  export const random = (): IPageIFlexOfficeMarketplaceWidget.ISummary =>
    typia.random<IPageIFlexOfficeMarketplaceWidget.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get marketplace widget details by ID.
 *
 * Retrieve details of a specific marketplace widget identified by the provided
 * UUID. This API fetches the full record, including widget code, name, version,
 * description, and timestamps.
 *
 * Accessible only to users with admin or editor roles. The endpoint validates
 * the ID and returns 404 if the widget does not exist.
 *
 * The operation is useful for displaying detailed widget metadata in management
 * interfaces.
 *
 * Related operations include updating or deleting marketplace widgets, and
 * listing widgets for selection.
 *
 * No request body is required for this GET operation.
 *
 * @param props.connection
 * @param props.id Unique identifier of the marketplace widget (UUID)
 * @path /flexOffice/admin/marketplaceWidgets/:id
 * @accessor api.functional.flexOffice.admin.marketplaceWidgets.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the marketplace widget (UUID) */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IFlexOfficeMarketplaceWidget;

  export const METADATA = {
    method: "GET",
    path: "/flexOffice/admin/marketplaceWidgets/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/admin/marketplaceWidgets/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IFlexOfficeMarketplaceWidget =>
    typia.random<IFlexOfficeMarketplaceWidget>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing marketplace widget.
 *
 * Updates a marketplace widget's details including its unique code, name,
 * version, and description. Only admins may perform this operation. The widget
 * is identified by UUID path parameter. Soft delete timestamps allow marking
 * the widget as archived without physical deletion. Returns the updated widget
 * details upon success.
 *
 * @param props.connection
 * @param props.id Unique identifier of the marketplace widget to update
 * @param props.body MarketPlace widget update data
 * @path /flexOffice/admin/marketplaceWidgets/:id
 * @accessor api.functional.flexOffice.admin.marketplaceWidgets.updateMarketplaceWidget
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateMarketplaceWidget(
  connection: IConnection,
  props: updateMarketplaceWidget.Props,
): Promise<updateMarketplaceWidget.Response> {
  return true === connection.simulate
    ? updateMarketplaceWidget.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateMarketplaceWidget.METADATA,
          path: updateMarketplaceWidget.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateMarketplaceWidget {
  export type Props = {
    /** Unique identifier of the marketplace widget to update */
    id: string & tags.Format<"uuid">;

    /** MarketPlace widget update data */
    body: IFlexOfficeMarketplaceWidget.IUpdate;
  };
  export type Body = IFlexOfficeMarketplaceWidget.IUpdate;
  export type Response = IFlexOfficeMarketplaceWidget;

  export const METADATA = {
    method: "PUT",
    path: "/flexOffice/admin/marketplaceWidgets/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/admin/marketplaceWidgets/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IFlexOfficeMarketplaceWidget =>
    typia.random<IFlexOfficeMarketplaceWidget>();
  export const simulate = (
    connection: IConnection,
    props: updateMarketplaceWidget.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateMarketplaceWidget.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a marketplace widget.
 *
 * Permits an admin to permanently delete a marketplace widget by specifying its
 * UUID. The deletion cannot be undone due to absence of soft delete in the
 * schema. Valid UUIDs are checked and existing references to the widget are
 * cleared as part of cleanup. Admin authorization is required.
 *
 * @param props.connection
 * @param props.id Unique identifier of the marketplace widget to delete
 * @path /flexOffice/admin/marketplaceWidgets/:id
 * @accessor api.functional.flexOffice.admin.marketplaceWidgets.eraseMarketplaceWidget
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseMarketplaceWidget(
  connection: IConnection,
  props: eraseMarketplaceWidget.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseMarketplaceWidget.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseMarketplaceWidget.METADATA,
          path: eraseMarketplaceWidget.path(props),
          status: null,
        },
      );
}
export namespace eraseMarketplaceWidget {
  export type Props = {
    /** Unique identifier of the marketplace widget to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/flexOffice/admin/marketplaceWidgets/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/admin/marketplaceWidgets/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseMarketplaceWidget.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseMarketplaceWidget.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
