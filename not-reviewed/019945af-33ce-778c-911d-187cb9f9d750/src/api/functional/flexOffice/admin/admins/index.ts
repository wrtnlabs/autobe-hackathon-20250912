import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IFlexOfficeAdmin } from "../../../../structures/IFlexOfficeAdmin";
import { IPageIFlexOfficeAdmin } from "../../../../structures/IPageIFlexOfficeAdmin";

/**
 * List administrative user accounts with pagination and filtering.
 *
 * Retrieve a filtered, paginated list of administrative user accounts. This
 * operation supports advanced search criteria such as email filtering, date
 * ranges, and sorting preferences.
 *
 * Security: Only users with the admin role are authorized to access this
 * endpoint.
 *
 * Relationships: Admin users are unique by email and have associated activity
 * logs and role assignments.
 *
 * Validation: Search parameters are validated for correctness.
 *
 * Expected behavior: Returns paginated summaries of admins according to query
 * criteria. Errors are handled gracefully with appropriate status codes and
 * messages.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for admin
 *   filtering
 * @path /flexOffice/admin/admins
 * @accessor api.functional.flexOffice.admin.admins.searchAdmins
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function searchAdmins(
  connection: IConnection,
  props: searchAdmins.Props,
): Promise<searchAdmins.Response> {
  return true === connection.simulate
    ? searchAdmins.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...searchAdmins.METADATA,
          path: searchAdmins.path(),
          status: null,
        },
        props.body,
      );
}
export namespace searchAdmins {
  export type Props = {
    /** Search criteria and pagination parameters for admin filtering */
    body: IFlexOfficeAdmin.IRequest;
  };
  export type Body = IFlexOfficeAdmin.IRequest;
  export type Response = IPageIFlexOfficeAdmin.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/flexOffice/admin/admins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/flexOffice/admin/admins";
  export const random = (): IPageIFlexOfficeAdmin.ISummary =>
    typia.random<IPageIFlexOfficeAdmin.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: searchAdmins.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: searchAdmins.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information of an admin user by ID.
 *
 * Get detailed information about a specific admin user by their unique adminId.
 * Returns the admin's email, timestamps, and deletion status if applicable.
 *
 * Security: Only users with admin role can access detailed admin information.
 *
 * Relationships: Admin users have unique emails and may have linked activity
 * logs and role assignments.
 *
 * Validation: The adminId must be a valid UUID and exist in the database.
 *
 * Expected behavior: Returns the detailed admin record matching the given id.
 * Errors are returned if the id is invalid or not found.
 *
 * @param props.connection
 * @param props.adminId Unique identifier of the admin user
 * @path /flexOffice/admin/admins/:adminId
 * @accessor api.functional.flexOffice.admin.admins.atAdmin
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atAdmin(
  connection: IConnection,
  props: atAdmin.Props,
): Promise<atAdmin.Response> {
  return true === connection.simulate
    ? atAdmin.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atAdmin.METADATA,
          path: atAdmin.path(props),
          status: null,
        },
      );
}
export namespace atAdmin {
  export type Props = {
    /** Unique identifier of the admin user */
    adminId: string & tags.Format<"uuid">;
  };
  export type Response = IFlexOfficeAdmin;

  export const METADATA = {
    method: "GET",
    path: "/flexOffice/admin/admins/:adminId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/admin/admins/${encodeURIComponent(props.adminId ?? "null")}`;
  export const random = (): IFlexOfficeAdmin =>
    typia.random<IFlexOfficeAdmin>();
  export const simulate = (
    connection: IConnection,
    props: atAdmin.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atAdmin.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("adminId")(() => typia.assert(props.adminId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing admin user by ID.
 *
 * This operation updates an existing Admin user in the FlexOffice system. The
 * admin is uniquely identified by their adminId, a UUID string. The operation
 * accepts updated admin data including email and password hash, which must be
 * unique and securely stored.
 *
 * Security considerations ensure only authorized users can perform admin
 * updates, preserving account integrity.
 *
 * Underlying data references the flex_office_admins table with fields for
 * email, password_hash, and audit timestamps. Soft deletion (deleted_at) is
 * tracked but not modified via this endpoint.
 *
 * Validation rules include ensuring email uniqueness and proper UUID format for
 * the adminId path parameter.
 *
 * Related admin management APIs include delete by adminId (this API's
 * complement) and admin creation APIs.
 *
 * On success, returns the updated Admin user entity reflecting persisted data.
 *
 * Error handling includes 404 if the adminId does not exist and validation
 * errors for duplicate email or invalid input.
 *
 * @param props.connection
 * @param props.adminId Unique identifier of the admin user to update
 * @param props.body Admin user update payload
 * @path /flexOffice/admin/admins/:adminId
 * @accessor api.functional.flexOffice.admin.admins.updateAdmin
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateAdmin(
  connection: IConnection,
  props: updateAdmin.Props,
): Promise<updateAdmin.Response> {
  return true === connection.simulate
    ? updateAdmin.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateAdmin.METADATA,
          path: updateAdmin.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateAdmin {
  export type Props = {
    /** Unique identifier of the admin user to update */
    adminId: string & tags.Format<"uuid">;

    /** Admin user update payload */
    body: IFlexOfficeAdmin.IUpdate;
  };
  export type Body = IFlexOfficeAdmin.IUpdate;
  export type Response = IFlexOfficeAdmin;

  export const METADATA = {
    method: "PUT",
    path: "/flexOffice/admin/admins/:adminId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/admin/admins/${encodeURIComponent(props.adminId ?? "null")}`;
  export const random = (): IFlexOfficeAdmin =>
    typia.random<IFlexOfficeAdmin>();
  export const simulate = (
    connection: IConnection,
    props: updateAdmin.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateAdmin.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("adminId")(() => typia.assert(props.adminId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete an admin user by ID.
 *
 * This operation permanently deletes an Admin user from the FlexOffice system
 * identified by adminId, effectively removing all related data. This is a hard
 * delete operation with no soft deletion semantics.
 *
 * Only authorized admin users can execute this operation.
 *
 * The flex_office_admins database table is directly affected, removing the
 * record where id matches adminId.
 *
 * Caller must handle irreversibility and audit compliance externally.
 *
 * On success, no content is returned.
 *
 * Errors include 404 if adminId is not found and authorization errors if caller
 * lacks permissions.
 *
 * @param props.connection
 * @param props.adminId Unique identifier of the admin user to delete
 * @path /flexOffice/admin/admins/:adminId
 * @accessor api.functional.flexOffice.admin.admins.eraseAdmin
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseAdmin(
  connection: IConnection,
  props: eraseAdmin.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseAdmin.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseAdmin.METADATA,
          path: eraseAdmin.path(props),
          status: null,
        },
      );
}
export namespace eraseAdmin {
  export type Props = {
    /** Unique identifier of the admin user to delete */
    adminId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/flexOffice/admin/admins/:adminId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/admin/admins/${encodeURIComponent(props.adminId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseAdmin.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseAdmin.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("adminId")(() => typia.assert(props.adminId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
