import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IFlexOfficeAuditLog } from "../../../../structures/IFlexOfficeAuditLog";
import { IPageIFlexOfficeAuditLog } from "../../../../structures/IPageIFlexOfficeAuditLog";

/**
 * Search and retrieve paginated list of audit logs.
 *
 * Retrieve audit log entries with comprehensive filtering, searching, and
 * pagination support.
 *
 * Audit logs include types, actors, targets, actions performed, descriptions,
 * and timestamps, ensuring a full trace of system and user events.
 *
 * Access is restricted to admin users for security and compliance.
 *
 * The request body contains search filters and pagination info allowing
 * detailed querying.
 *
 * The response returns a paged list of audit log summaries optimized for UI
 * display.
 *
 * This API supports compliance monitoring, forensic analysis, and regulatory
 * audits.
 *
 * @param props.connection
 * @param props.body Audit log search and filter parameters
 * @path /flexOffice/admin/audits
 * @accessor api.functional.flexOffice.admin.audits.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Audit log search and filter parameters */
    body: IFlexOfficeAuditLog.IRequest;
  };
  export type Body = IFlexOfficeAuditLog.IRequest;
  export type Response = IPageIFlexOfficeAuditLog.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/flexOffice/admin/audits",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/flexOffice/admin/audits";
  export const random = (): IPageIFlexOfficeAuditLog.ISummary =>
    typia.random<IPageIFlexOfficeAuditLog.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a single audit log entry by ID.
 *
 * Retrieve a detailed audit log entry by its unique ID from the system's audit
 * logs. Audit logs capture immutable security and system event information
 * including event type, actor role and ID, target entity details, action
 * performed, and optional descriptive text.
 *
 * This operation is critical for administrators and auditors to examine
 * compliance and security-related activities. Access control ensures only
 * authorized users can view sensitive audit information.
 *
 * It accesses the flex_office_audit_logs Prisma table, which stores
 * comprehensive audit events with timestamps and soft deletion support (though
 * soft deleted records are typically excluded).
 *
 * The endpoint takes an UUID path parameter identifying the audit log record.
 * It returns the full audit log entry if found or appropriate error if not.
 *
 * Security and authorization are paramount given the sensitive nature of audit
 * logs.
 *
 * @param props.connection
 * @param props.id Unique identifier of the audit log entry to retrieve
 * @path /flexOffice/admin/audits/:id
 * @accessor api.functional.flexOffice.admin.audits.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the audit log entry to retrieve */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IFlexOfficeAuditLog;

  export const METADATA = {
    method: "GET",
    path: "/flexOffice/admin/audits/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/admin/audits/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IFlexOfficeAuditLog =>
    typia.random<IFlexOfficeAuditLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
