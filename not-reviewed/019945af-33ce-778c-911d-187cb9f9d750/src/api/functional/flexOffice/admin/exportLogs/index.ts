import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IFlexOfficeExportLog } from "../../../../structures/IFlexOfficeExportLog";
import { IPageIFlexOfficeExportLog } from "../../../../structures/IPageIFlexOfficeExportLog";

/**
 * Search and retrieve paginated list of export logs.
 *
 * Retrieve a filtered and paginated list of export logs documenting user export
 * operations within FlexOffice. These logs include export format, data targets,
 * success or failure status, and user audit details.
 *
 * Security considerations restrict access to admin users for audit and
 * compliance purposes.
 *
 * Search and filter parameters allow querying logs based on relevant criteria,
 * with pagination to handle large data volumes.
 *
 * The response includes summary export log items optimized for list display.
 *
 * No path parameters are required. Request body contains search, filter, and
 * pagination details.
 *
 * Use this operation to audit data export activities and track usage patterns
 * across the system.
 *
 * @param props.connection
 * @param props.body Export log search criteria and pagination parameters
 * @path /flexOffice/admin/exportLogs
 * @accessor api.functional.flexOffice.admin.exportLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Export log search criteria and pagination parameters */
    body: IFlexOfficeExportLog.IRequest;
  };
  export type Body = IFlexOfficeExportLog.IRequest;
  export type Response = IPageIFlexOfficeExportLog.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/flexOffice/admin/exportLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/flexOffice/admin/exportLogs";
  export const random = (): IPageIFlexOfficeExportLog.ISummary =>
    typia.random<IPageIFlexOfficeExportLog.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed export log by ID.
 *
 * Fetch detailed information of a single export log by its unique identifier.
 *
 * This operation is important for audit review, forensic analysis, and
 * compliance monitoring of export activities.
 *
 * The export log entity contains comprehensive information about the export
 * type, data involved, status result, user who executed the operation, and
 * timing details.
 *
 * Only authorized admin users may access this sensitive data.
 *
 * No request body is needed; the response includes the full export log entity.
 *
 * Errors are handled with appropriate status codes if the log entry is not
 * found or access is denied.
 *
 * @param props.connection
 * @param props.exportLogId Unique identifier of the target export log (UUID)
 * @path /flexOffice/admin/exportLogs/:exportLogId
 * @accessor api.functional.flexOffice.admin.exportLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target export log (UUID) */
    exportLogId: string & tags.Format<"uuid">;
  };
  export type Response = IFlexOfficeExportLog;

  export const METADATA = {
    method: "GET",
    path: "/flexOffice/admin/exportLogs/:exportLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/admin/exportLogs/${encodeURIComponent(props.exportLogId ?? "null")}`;
  export const random = (): IFlexOfficeExportLog =>
    typia.random<IFlexOfficeExportLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("exportLogId")(() => typia.assert(props.exportLogId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
