import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

/**
 * Delete a FlexOffice page comment by its ID.
 *
 * This operation permanently deletes a page comment identified by its unique ID
 * from the flex_office_page_comments table in the Prisma schema. It supports
 * collaboration workflows by enabling authorized users to remove inappropriate
 * or obsolete comments associated with FlexOffice UI pages.
 *
 * Access is restricted to authorized roles such as admin, editor, or viewer
 * depending on permissions. The path parameter pageCommentId specifies the
 * target comment for deletion.
 *
 * No request body is required or accepted. This performs a hard delete and the
 * record will be unrecoverable.
 *
 * Related endpoints allow listing comments for a page, retrieving individual
 * comments, and creating new comments.
 *
 * Proper error handling includes validation of comment existence and
 * authorization verification before deletion.
 *
 * @param props.connection
 * @param props.pageCommentId Unique identifier of the page comment to delete
 * @path /flexOffice/admin/pageComments/:pageCommentId
 * @accessor api.functional.flexOffice.admin.pageComments.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the page comment to delete */
    pageCommentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/flexOffice/admin/pageComments/:pageCommentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/admin/pageComments/${encodeURIComponent(props.pageCommentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("pageCommentId")(() => typia.assert(props.pageCommentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
