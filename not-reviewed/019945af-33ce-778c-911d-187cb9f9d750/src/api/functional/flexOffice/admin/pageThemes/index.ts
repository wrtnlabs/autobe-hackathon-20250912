import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IFlexOfficePageTheme } from "../../../../structures/IFlexOfficePageTheme";
import { IPageIFlexOfficePageTheme } from "../../../../structures/IPageIFlexOfficePageTheme";

/**
 * Create a new UI page theme with specified name, optional description, and
 * optional CSS content. The theme name must be unique to prevent conflicts.
 *
 * Security considerations require this operation to be restricted to Admin and
 * Editor roles authorized to manage UI themes.
 *
 * Validation includes checking for uniqueness of theme name and correct
 * formatting of CSS.
 *
 * Upon success, returns the created theme entity with all attributes including
 * generated ID and timestamps.
 *
 * Errors include duplicate theme name or validation failure with appropriate
 * HTTP error responses.
 *
 * @param props.connection
 * @param props.body Information required for new UI page theme creation
 * @path /flexOffice/admin/pageThemes
 * @accessor api.functional.flexOffice.admin.pageThemes.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information required for new UI page theme creation */
    body: IFlexOfficePageTheme.ICreate;
  };
  export type Body = IFlexOfficePageTheme.ICreate;
  export type Response = IFlexOfficePageTheme;

  export const METADATA = {
    method: "POST",
    path: "/flexOffice/admin/pageThemes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/flexOffice/admin/pageThemes";
  export const random = (): IFlexOfficePageTheme =>
    typia.random<IFlexOfficePageTheme>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of UI page themes.
 *
 * Retrieve a filtered and paginated list of FlexOffice UI page themes from the
 * system database. This operation facilitates clients in querying available
 * themes with flexible filters on name, creation date, and update timestamps.
 *
 * Security considerations include that this endpoint is typically accessible by
 * authenticated users with read permissions. No sensitive information is
 * exposed. The response returns essential theme details optimized for display
 * in selection lists.
 *
 * The operation integrates directly with the flex_office_page_themes Prisma
 * table, referencing fields such as id, name, description, created_at, and
 * updated_at. Pagination parameters like page number and size control the
 * response size.
 *
 * It is expected that this operation supports sorting and search filtering to
 * enable user-friendly theme discovery. Errors include invalid query parameters
 * or server failures which will be properly handled with standard HTTP error
 * codes.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for theme
 *   filtering
 * @path /flexOffice/admin/pageThemes
 * @accessor api.functional.flexOffice.admin.pageThemes.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for theme filtering */
    body: IFlexOfficePageTheme.IRequest;
  };
  export type Body = IFlexOfficePageTheme.IRequest;
  export type Response = IPageIFlexOfficePageTheme.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/flexOffice/admin/pageThemes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/flexOffice/admin/pageThemes";
  export const random = (): IPageIFlexOfficePageTheme.ISummary =>
    typia.random<IPageIFlexOfficePageTheme.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a UI page theme by ID.
 *
 * Retrieve detailed information about a specific FlexOffice UI page theme
 * identified by the pageThemeId path parameter. This includes theme name,
 * description, CSS content, and audit timestamps.
 *
 * Security considerations limit access to authorized users. This operation
 * supports read access for admins, editors, and viewers with appropriate
 * permissions.
 *
 * The operation queries the flex_office_page_themes table for the theme
 * matching the given UUID. It returns a complete representation of the theme
 * entity.
 *
 * Errors include invalid UUID format or theme not found. Proper HTTP error
 * codes are used to communicate such failures.
 *
 * @param props.connection
 * @param props.pageThemeId Unique identifier for the target page theme
 * @path /flexOffice/admin/pageThemes/:pageThemeId
 * @accessor api.functional.flexOffice.admin.pageThemes.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the target page theme */
    pageThemeId: string & tags.Format<"uuid">;
  };
  export type Response = IFlexOfficePageTheme;

  export const METADATA = {
    method: "GET",
    path: "/flexOffice/admin/pageThemes/:pageThemeId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/admin/pageThemes/${encodeURIComponent(props.pageThemeId ?? "null")}`;
  export const random = (): IFlexOfficePageTheme =>
    typia.random<IFlexOfficePageTheme>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("pageThemeId")(() => typia.assert(props.pageThemeId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing FlexOffice UI page theme by ID.
 *
 * This API endpoint allows authorized administrators to modify an existing UI
 * page theme used in the FlexOffice platform. The updated fields include theme
 * name and CSS styles which define the visual appearance of UI pages.
 *
 * The operation enforces uniqueness of the theme name to avoid conflicts and
 * maintains the consistency of the system's visual styling. It is associated
 * with the flex_office_page_themes database entity, which stores theme metadata
 * including creation and update timestamps for audit purposes.
 *
 * Security considerations restrict this operation to users with admin
 * privileges to prevent unauthorized changes to system-wide visual
 * configurations.
 *
 * Clients must supply the pageThemeId path parameter to identify which theme
 * record to update and provide the update data in the request body adhering to
 * IFlexOfficePageTheme.IUpdate schema. Upon success, the updated theme details
 * are returned.
 *
 * Any attempt to update a non-existent theme ID or duplicate a theme name
 * results in an error response.
 *
 * This operation complements GET endpoints that retrieve themes and DELETE
 * endpoints that remove themes.
 *
 * @param props.connection
 * @param props.pageThemeId Unique identifier of the target page theme
 * @param props.body Page theme update data
 * @path /flexOffice/admin/pageThemes/:pageThemeId
 * @accessor api.functional.flexOffice.admin.pageThemes.updatePageTheme
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updatePageTheme(
  connection: IConnection,
  props: updatePageTheme.Props,
): Promise<updatePageTheme.Response> {
  return true === connection.simulate
    ? updatePageTheme.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updatePageTheme.METADATA,
          path: updatePageTheme.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updatePageTheme {
  export type Props = {
    /** Unique identifier of the target page theme */
    pageThemeId: string & tags.Format<"uuid">;

    /** Page theme update data */
    body: IFlexOfficePageTheme.IUpdate;
  };
  export type Body = IFlexOfficePageTheme.IUpdate;
  export type Response = IFlexOfficePageTheme;

  export const METADATA = {
    method: "PUT",
    path: "/flexOffice/admin/pageThemes/:pageThemeId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/admin/pageThemes/${encodeURIComponent(props.pageThemeId ?? "null")}`;
  export const random = (): IFlexOfficePageTheme =>
    typia.random<IFlexOfficePageTheme>();
  export const simulate = (
    connection: IConnection,
    props: updatePageTheme.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updatePageTheme.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("pageThemeId")(() => typia.assert(props.pageThemeId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a FlexOffice UI page theme by ID.
 *
 * This API endpoint enables administrators to permanently delete a UI page
 * theme from the FlexOffice backend system.
 *
 * The deletion applies directly to the flex_office_page_themes database table,
 * removing all metadata associated with the theme including name, CSS content,
 * and audit timestamps.
 *
 * Security restrictions limit deletion access to admin users only to maintain
 * system stability and prevent accidental removal.
 *
 * Clients must specify the unique pageThemeId path parameter to identify the
 * exact theme record to be deleted.
 *
 * Successful execution returns no response body, signifying the resource is no
 * longer present in the system.
 *
 * This operation complements page theme creation, update, and retrieval
 * endpoints, enabling full lifecycle management of UI themes.
 *
 * @param props.connection
 * @param props.pageThemeId Unique identifier of the target page theme
 * @path /flexOffice/admin/pageThemes/:pageThemeId
 * @accessor api.functional.flexOffice.admin.pageThemes.erasePageTheme
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erasePageTheme(
  connection: IConnection,
  props: erasePageTheme.Props,
): Promise<void> {
  return true === connection.simulate
    ? erasePageTheme.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erasePageTheme.METADATA,
          path: erasePageTheme.path(props),
          status: null,
        },
      );
}
export namespace erasePageTheme {
  export type Props = {
    /** Unique identifier of the target page theme */
    pageThemeId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/flexOffice/admin/pageThemes/:pageThemeId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/admin/pageThemes/${encodeURIComponent(props.pageThemeId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erasePageTheme.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erasePageTheme.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("pageThemeId")(() => typia.assert(props.pageThemeId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
