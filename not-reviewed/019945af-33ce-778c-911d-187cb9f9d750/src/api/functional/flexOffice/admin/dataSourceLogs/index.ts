import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IFlexOfficeDataSourceLog } from "../../../../structures/IFlexOfficeDataSourceLog";
import { IPageIFlexOfficeDataSourceLog } from "../../../../structures/IPageIFlexOfficeDataSourceLog";

/**
 * Search and retrieve a filtered, paginated list of data source logs.
 *
 * Retrieve a paginated list of data source logs from the system. Each log entry
 * records the severity, message, timestamp, and optionally the user involved in
 * the event.
 *
 * This operation supports filtering and pagination, allowing administrators to
 * monitor data source health and troubleshoot issues efficiently.
 *
 * Security considerations include limiting access to authorized users due to
 * sensitive operational details.
 *
 * The underlying data is stored in the flex_office_data_source_logs table,
 * which records event details with creation and update timestamps.
 *
 * This operation returns summarized log entries matching the search criteria.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for data source
 *   logs filtering
 * @path /flexOffice/admin/dataSourceLogs
 * @accessor api.functional.flexOffice.admin.dataSourceLogs.search
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /**
     * Search criteria and pagination parameters for data source logs
     * filtering
     */
    body: IFlexOfficeDataSourceLog.IRequest;
  };
  export type Body = IFlexOfficeDataSourceLog.IRequest;
  export type Response = IPageIFlexOfficeDataSourceLog.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/flexOffice/admin/dataSourceLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/flexOffice/admin/dataSourceLogs";
  export const random = (): IPageIFlexOfficeDataSourceLog.ISummary =>
    typia.random<IPageIFlexOfficeDataSourceLog.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed data source log entry by ID.
 *
 * Fetch detailed information of a single data source log entry specified by
 * logId. The log entry recorded event details, severity, timestamp, and
 * relevant user identification if available.
 *
 * Access to this operation should be restricted to authorized administrators.
 *
 * The underlying data is stored in the flex_office_data_source_logs table.
 *
 * Returns full log entry details for inspection.
 *
 * @param props.connection
 * @param props.logId Unique identifier of the target data source log entry
 * @path /flexOffice/admin/dataSourceLogs/:logId
 * @accessor api.functional.flexOffice.admin.dataSourceLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target data source log entry */
    logId: string & tags.Format<"uuid">;
  };
  export type Response = IFlexOfficeDataSourceLog;

  export const METADATA = {
    method: "GET",
    path: "/flexOffice/admin/dataSourceLogs/:logId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/admin/dataSourceLogs/${encodeURIComponent(props.logId ?? "null")}`;
  export const random = (): IFlexOfficeDataSourceLog =>
    typia.random<IFlexOfficeDataSourceLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("logId")(() => typia.assert(props.logId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
