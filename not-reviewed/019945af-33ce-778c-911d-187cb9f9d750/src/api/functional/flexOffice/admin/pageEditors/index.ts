import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IFlexOfficePageEditor } from "../../../../structures/IFlexOfficePageEditor";
import { IPageIFlexOfficePageEditor } from "../../../../structures/IPageIFlexOfficePageEditor";

/**
 * Search and retrieve a paginated list of active page editors.
 *
 * Get a list of page editors currently active on pages with support for
 * pagination and filtering. Each record shows editor and page associations and
 * timestamps.
 *
 * This operation allows administrators and editors to see concurrent editing
 * activity.
 *
 * Underlying data is sourced from the flex_office_page_editors table with
 * fields for page and editor references, and session timestamps.
 *
 * Returns paginated, filtered list of active page editors.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for page editors
 *   filtering
 * @path /flexOffice/admin/pageEditors
 * @accessor api.functional.flexOffice.admin.pageEditors.search
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /** Search criteria and pagination parameters for page editors filtering */
    body: IFlexOfficePageEditor.IRequest;
  };
  export type Body = IFlexOfficePageEditor.IRequest;
  export type Response = IPageIFlexOfficePageEditor.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/flexOffice/admin/pageEditors",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/flexOffice/admin/pageEditors";
  export const random = (): IPageIFlexOfficePageEditor.ISummary =>
    typia.random<IPageIFlexOfficePageEditor.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed page editor session information by ID.
 *
 * Fetch detailed info of an active or historic page editor session specified by
 * pageEditorId. Data includes page and editor references and session
 * timestamps.
 *
 * This supports collaboration management and audit functionalities.
 *
 * Data source is the flex_office_page_editors table.
 *
 * Returns full detail of the page editor session record.
 *
 * @param props.connection
 * @param props.pageEditorId Unique identifier of the target page editor session
 * @path /flexOffice/admin/pageEditors/:pageEditorId
 * @accessor api.functional.flexOffice.admin.pageEditors.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target page editor session */
    pageEditorId: string & tags.Format<"uuid">;
  };
  export type Response = IFlexOfficePageEditor;

  export const METADATA = {
    method: "GET",
    path: "/flexOffice/admin/pageEditors/:pageEditorId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/admin/pageEditors/${encodeURIComponent(props.pageEditorId ?? "null")}`;
  export const random = (): IFlexOfficePageEditor =>
    typia.random<IFlexOfficePageEditor>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("pageEditorId")(() => typia.assert(props.pageEditorId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
