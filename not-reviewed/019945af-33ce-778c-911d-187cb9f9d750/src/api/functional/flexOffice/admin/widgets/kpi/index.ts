import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IFlexOfficeKpiWidget } from "../../../../../structures/IFlexOfficeKpiWidget";
import { IFlexOfficeWidgetKpi } from "../../../../../structures/IFlexOfficeWidgetKpi";
import { IPageIFlexOfficeWidgetKpi } from "../../../../../structures/IPageIFlexOfficeWidgetKpi";

/**
 * Create a KPI widget.
 *
 * Create a new KPI widget by providing configuration JSON and metadata.
 *
 * Security: Restricted to users with 'admin' or 'editor' roles.
 *
 * Business logic: Configuration JSON must be well-formed and comply with
 * business rules for KPI widgets.
 *
 * The operation returns the created KPI widget details.
 *
 * Part of CRUD for KPI management along with get, update, and delete endpoints.
 *
 * Appropriate error code returned for malformed requests or insufficient
 * permissions.
 *
 * @param props.connection
 * @param props.body Creation data for KPI widget
 * @path /flexOffice/admin/widgets/kpi
 * @accessor api.functional.flexOffice.admin.widgets.kpi.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation data for KPI widget */
    body: IFlexOfficeKpiWidget.ICreate;
  };
  export type Body = IFlexOfficeKpiWidget.ICreate;
  export type Response = IFlexOfficeKpiWidget;

  export const METADATA = {
    method: "POST",
    path: "/flexOffice/admin/widgets/kpi",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/flexOffice/admin/widgets/kpi";
  export const random = (): IFlexOfficeKpiWidget =>
    typia.random<IFlexOfficeKpiWidget>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List and search KPI widgets with pagination.
 *
 * This API endpoint allows authorized users in roles admin, editor, or viewer
 * to retrieve KPI widget data in a paginated, filtered, and sorted fashion. KPI
 * widgets provide key performance indicator metrics linked to UI widgets. The
 * request body allows specification of search criteria, filters on widget IDs,
 * configuration parameters, and pagination controls.
 *
 * Security restrictions ensure that only authorized roles can access these
 * details. The response provides structured paginated results including KPI
 * widget summaries enabling clients to display metric overviews efficiently.
 *
 * This operation complements CRUD operations on KPI widgets and supports
 * frontend performance and usability needs.
 *
 * @param props.connection
 * @param props.body Search, filter, and pagination criteria for KPI widgets
 * @path /flexOffice/admin/widgets/kpi
 * @accessor api.functional.flexOffice.admin.widgets.kpi.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search, filter, and pagination criteria for KPI widgets */
    body: IFlexOfficeWidgetKpi.IRequest;
  };
  export type Body = IFlexOfficeWidgetKpi.IRequest;
  export type Response = IPageIFlexOfficeWidgetKpi.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/flexOffice/admin/widgets/kpi",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/flexOffice/admin/widgets/kpi";
  export const random = (): IPageIFlexOfficeWidgetKpi.ISummary =>
    typia.random<IPageIFlexOfficeWidgetKpi.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information on a specific KPI widget.
 *
 * Retrieve detailed information of a KPI widget identified by kpiWidgetId. This
 * includes configuration JSON, creation and update timestamps, and soft delete
 * status.
 *
 * Security considerations: Access restricted to users with 'admin' or 'editor'
 * roles. Unauthorized access attempts are denied.
 *
 * This operation maps to the flex_office_kpi_widgets table in the Prisma
 * schema.
 *
 * Validation: kpiWidgetId must be a valid UUID.
 *
 * Related CRUD operations: POST to create, PUT to update, and DELETE to soft
 * delete KPI widgets.
 *
 * Proper error handling must respond to invalid IDs or access violations.
 *
 * @param props.connection
 * @param props.kpiWidgetId Unique identifier of the target KPI widget
 * @path /flexOffice/admin/widgets/kpi/:kpiWidgetId
 * @accessor api.functional.flexOffice.admin.widgets.kpi.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target KPI widget */
    kpiWidgetId: string & tags.Format<"uuid">;
  };
  export type Response = IFlexOfficeKpiWidget;

  export const METADATA = {
    method: "GET",
    path: "/flexOffice/admin/widgets/kpi/:kpiWidgetId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/admin/widgets/kpi/${encodeURIComponent(props.kpiWidgetId ?? "null")}`;
  export const random = (): IFlexOfficeKpiWidget =>
    typia.random<IFlexOfficeKpiWidget>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("kpiWidgetId")(() => typia.assert(props.kpiWidgetId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing KPI widget.
 *
 * Update a KPI widget with new configuration and metadata.
 *
 * Security: Access restricted to users with 'admin' or 'editor' roles.
 *
 * Validation: kpiWidgetId must be a valid UUID and exist in the database.
 *
 * Payload must conform to the IFlexOfficeKpiWidget.IUpdate schema.
 *
 * This operation complements the create, retrieve, and delete operations for
 * KPI widgets.
 *
 * Errors returned for invalid IDs, malformed input, or insufficient
 * permissions.
 *
 * @param props.connection
 * @param props.kpiWidgetId Unique identifier of the KPI widget to update
 * @param props.body New data for KPI widget update
 * @path /flexOffice/admin/widgets/kpi/:kpiWidgetId
 * @accessor api.functional.flexOffice.admin.widgets.kpi.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the KPI widget to update */
    kpiWidgetId: string & tags.Format<"uuid">;

    /** New data for KPI widget update */
    body: IFlexOfficeKpiWidget.IUpdate;
  };
  export type Body = IFlexOfficeKpiWidget.IUpdate;
  export type Response = IFlexOfficeKpiWidget;

  export const METADATA = {
    method: "PUT",
    path: "/flexOffice/admin/widgets/kpi/:kpiWidgetId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/admin/widgets/kpi/${encodeURIComponent(props.kpiWidgetId ?? "null")}`;
  export const random = (): IFlexOfficeKpiWidget =>
    typia.random<IFlexOfficeKpiWidget>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("kpiWidgetId")(() => typia.assert(props.kpiWidgetId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete of a KPI widget.
 *
 * Soft delete a KPI widget identified by kpiWidgetId.
 *
 * Security: Only users with 'admin' or 'editor' roles may execute this
 * operation.
 *
 * This action sets the deleted_at timestamp to mark the KPI widget as deleted.
 *
 * No response body is returned; success indicated via HTTP status.
 *
 * Error handling includes invalid UUIDs and authorization failures.
 *
 * Relates to create, read, and update API endpoints for KPI widgets.
 *
 * @param props.connection
 * @param props.kpiWidgetId Unique identifier of the KPI widget to be deleted
 * @path /flexOffice/admin/widgets/kpi/:kpiWidgetId
 * @accessor api.functional.flexOffice.admin.widgets.kpi.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the KPI widget to be deleted */
    kpiWidgetId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/flexOffice/admin/widgets/kpi/:kpiWidgetId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/admin/widgets/kpi/${encodeURIComponent(props.kpiWidgetId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("kpiWidgetId")(() => typia.assert(props.kpiWidgetId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
