import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

/**
 * Delete a UI widget script by ID.
 *
 * Deletes a UI widget script from the system given the widgetId and scriptId.
 * This operation permanently removes the script record from the
 * flex_office_widget_scripts table and cannot be undone.
 *
 * Security considerations dictate that only Admin and Editor roles with proper
 * authorizations can perform this action.
 *
 * The operation requires both widgetId and scriptId path parameters, both
 * UUIDs, to identify the target script associated with the widget.
 *
 * Errors may include resource not found or unauthorized access, which are
 * appropriately handled.
 *
 * There is no request body or response content for this operation.
 *
 * @param props.connection
 * @param props.widgetId Unique identifier of the UI widget
 * @param props.scriptId Unique identifier of the widget script to delete
 * @path /flexOffice/admin/widgets/:widgetId/scripts/:scriptId
 * @accessor api.functional.flexOffice.admin.widgets.scripts.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the UI widget */
    widgetId: string & tags.Format<"uuid">;

    /** Unique identifier of the widget script to delete */
    scriptId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/flexOffice/admin/widgets/:widgetId/scripts/:scriptId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/admin/widgets/${encodeURIComponent(props.widgetId ?? "null")}/scripts/${encodeURIComponent(props.scriptId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("widgetId")(() => typia.assert(props.widgetId));
      assert.param("scriptId")(() => typia.assert(props.scriptId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
