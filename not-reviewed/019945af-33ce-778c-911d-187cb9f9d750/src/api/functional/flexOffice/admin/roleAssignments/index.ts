import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IFlexOfficeRoleAssignment } from "../../../../structures/IFlexOfficeRoleAssignment";
import { IPageIFlexOfficeRoleAssignment } from "../../../../structures/IPageIFlexOfficeRoleAssignment";

/**
 * Create a new role assignment linking a user to a role.
 *
 * Create a new role assignment by specifying the target user and their role.
 * The request body includes the user_id and role_name fields that define the
 * assignment.
 *
 * Administrators use this operation to grant roles to system users, enabling
 * RBAC enforcement. Proper validation prevents duplication and conflicts. On
 * success, the created role assignment data is returned for confirmation.
 *
 * @param props.connection
 * @param props.body Information required to create a role assignment
 * @path /flexOffice/admin/roleAssignments
 * @accessor api.functional.flexOffice.admin.roleAssignments.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information required to create a role assignment */
    body: IFlexOfficeRoleAssignment.ICreate;
  };
  export type Body = IFlexOfficeRoleAssignment.ICreate;
  export type Response = IFlexOfficeRoleAssignment;

  export const METADATA = {
    method: "POST",
    path: "/flexOffice/admin/roleAssignments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/flexOffice/admin/roleAssignments";
  export const random = (): IFlexOfficeRoleAssignment =>
    typia.random<IFlexOfficeRoleAssignment>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of role assignments.
 *
 * Retrieve a paginated list of role assignments with support for filtering and
 * pagination. Enables administrators to search user-role mappings efficiently.
 *
 * Security considerations: This operation requires admin level authorization
 * due to sensitive access control data.
 *
 * Related API operations include creating, updating, or deleting individual
 * role assignments.
 *
 * @param props.connection
 * @param props.body Search and pagination criteria for role assignments
 * @path /flexOffice/admin/roleAssignments
 * @accessor api.functional.flexOffice.admin.roleAssignments.searchRoleAssignments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function searchRoleAssignments(
  connection: IConnection,
  props: searchRoleAssignments.Props,
): Promise<searchRoleAssignments.Response> {
  return true === connection.simulate
    ? searchRoleAssignments.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...searchRoleAssignments.METADATA,
          path: searchRoleAssignments.path(),
          status: null,
        },
        props.body,
      );
}
export namespace searchRoleAssignments {
  export type Props = {
    /** Search and pagination criteria for role assignments */
    body: IFlexOfficeRoleAssignment.IRequest;
  };
  export type Body = IFlexOfficeRoleAssignment.IRequest;
  export type Response = IPageIFlexOfficeRoleAssignment.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/flexOffice/admin/roleAssignments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/flexOffice/admin/roleAssignments";
  export const random = (): IPageIFlexOfficeRoleAssignment.ISummary =>
    typia.random<IPageIFlexOfficeRoleAssignment.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: searchRoleAssignments.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: searchRoleAssignments.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific role assignment by its unique identifier.
 *
 * This API operation retrieves the details of a specific role assignment by its
 * unique identifier (id). It reads from the 'flex_office_role_assignments'
 * table which stores mappings of users to role names in the system.
 *
 * Security considerations ensure that only authorized administrators can view
 * role assignments. The retrieved data includes the assigned user's identifier,
 * the role name, and timestamps for creation and last update. The operation
 * supports efficient lookup and management of role assignments for
 * administrative auditing and role enforcement.
 *
 * @param props.connection
 * @param props.id Unique identifier of the role assignment to retrieve
 * @path /flexOffice/admin/roleAssignments/:id
 * @accessor api.functional.flexOffice.admin.roleAssignments.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the role assignment to retrieve */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IFlexOfficeRoleAssignment;

  export const METADATA = {
    method: "GET",
    path: "/flexOffice/admin/roleAssignments/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/admin/roleAssignments/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IFlexOfficeRoleAssignment =>
    typia.random<IFlexOfficeRoleAssignment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing role assignment's details.
 *
 * Update the details of an existing role assignment by its ID. The request body
 * allows modification of the role_name and user_id fields.
 *
 * This operation helps administrators manage and correct role assignments as
 * needed. It ensures that the updated assignment complies with current
 * authorization policies and maintains data integrity.
 *
 * @param props.connection
 * @param props.id Unique identifier of the role assignment to update
 * @param props.body Updated role assignment information
 * @path /flexOffice/admin/roleAssignments/:id
 * @accessor api.functional.flexOffice.admin.roleAssignments.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the role assignment to update */
    id: string & tags.Format<"uuid">;

    /** Updated role assignment information */
    body: IFlexOfficeRoleAssignment.IUpdate;
  };
  export type Body = IFlexOfficeRoleAssignment.IUpdate;
  export type Response = IFlexOfficeRoleAssignment;

  export const METADATA = {
    method: "PUT",
    path: "/flexOffice/admin/roleAssignments/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/admin/roleAssignments/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IFlexOfficeRoleAssignment =>
    typia.random<IFlexOfficeRoleAssignment>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a role assignment by ID.
 *
 * Soft delete a role assignment by its unique ID. This operation marks the
 * record as deleted by setting the 'deleted_at' timestamp, thus removing the
 * role assignment without permanent data loss.
 *
 * Admins use this operation to revoke user roles in a secure and auditable
 * manner. The soft delete ensures history preservation and compliance with
 * audit requirements.
 *
 * This API returns no content upon success.
 *
 * @param props.connection
 * @param props.id Unique identifier of the role assignment to delete
 * @path /flexOffice/admin/roleAssignments/:id
 * @accessor api.functional.flexOffice.admin.roleAssignments.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the role assignment to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/flexOffice/admin/roleAssignments/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/admin/roleAssignments/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
