import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IFlexOfficePermission } from "../../../../structures/IFlexOfficePermission";
import { IPageIFlexOfficePermission } from "../../../../structures/IPageIFlexOfficePermission";

/**
 * Create a new FlexOffice permission entity.
 *
 * This operation inserts a new record into the flex_office_permissions table
 * with specified permission key, description, and status.
 *
 * Only admin users are allowed to perform this action.
 *
 * The server generates creation and update timestamps automatically.
 *
 * Validation ensures permission keys are unique and status values are valid.
 *
 * Returns the created permission entity details upon success.
 *
 * @param props.connection
 * @param props.body Permission creation data
 * @path /flexOffice/admin/permissions
 * @accessor api.functional.flexOffice.admin.permissions.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Permission creation data */
    body: IFlexOfficePermission.ICreate;
  };
  export type Body = IFlexOfficePermission.ICreate;
  export type Response = IFlexOfficePermission;

  export const METADATA = {
    method: "POST",
    path: "/flexOffice/admin/permissions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/flexOffice/admin/permissions";
  export const random = (): IFlexOfficePermission =>
    typia.random<IFlexOfficePermission>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of FlexOffice permissions.
 *
 * Retrieve a filtered and paginated list of FlexOffice permission entities for
 * access control.
 *
 * This operation interacts directly with the flex_office_permissions table as
 * defined in the Prisma schema. It accepts complex request criteria such as
 * permission_key filters, status filters, and free text searches on
 * descriptions.
 *
 * Security and access control apply at the application layer; typically, only
 * users with admin or equivalent roles should query permissions data.
 *
 * The response provides structured paginated lists, including metadata for
 * pagination navigation.
 *
 * This operation is foundational for managing system permissions and role
 * capabilities.
 *
 * Errors on invalid requests or unauthenticated access must be handled
 * gracefully.
 *
 * @param props.connection
 * @param props.body Search parameters and filters for permissions
 * @path /flexOffice/admin/permissions
 * @accessor api.functional.flexOffice.admin.permissions.search
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /** Search parameters and filters for permissions */
    body: IFlexOfficePermission.IRequest;
  };
  export type Body = IFlexOfficePermission.IRequest;
  export type Response = IPageIFlexOfficePermission;

  export const METADATA = {
    method: "PATCH",
    path: "/flexOffice/admin/permissions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/flexOffice/admin/permissions";
  export const random = (): IPageIFlexOfficePermission =>
    typia.random<IPageIFlexOfficePermission>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed FlexOffice permission.
 *
 * Get detailed information for a single FlexOffice permission by ID.
 *
 * This GET operation accesses the flex_office_permissions table using the
 * specified UUID. It returns all defined fields including permission key,
 * description, status, and audit data.
 *
 * Secure access requires admin-level privileges.
 *
 * Invalid or non-existent IDs should result in standard 404 and error handling.
 *
 * Uses path parameter to specify target permission.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target permission
 * @path /flexOffice/admin/permissions/:id
 * @accessor api.functional.flexOffice.admin.permissions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target permission */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IFlexOfficePermission;

  export const METADATA = {
    method: "GET",
    path: "/flexOffice/admin/permissions/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/admin/permissions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IFlexOfficePermission =>
    typia.random<IFlexOfficePermission>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing FlexOffice permission by ID.
 *
 * Update an existing FlexOffice permission identified by ID.
 *
 * Receives targeted permission ID as path parameter and update data in the
 * request body.
 *
 * Updates fields such as permission_key, description, and status within the
 * flex_office_permissions table.
 *
 * Admin authorization is mandatory to maintain secure control over permissions.
 *
 * Returns the updated permission entity details to confirm changes.
 *
 * 404 error if permission does not exist.
 *
 * Validation ensures key uniqueness and status correctness.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target permission
 * @param props.body Permission update data
 * @path /flexOffice/admin/permissions/:id
 * @accessor api.functional.flexOffice.admin.permissions.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target permission */
    id: string & tags.Format<"uuid">;

    /** Permission update data */
    body: IFlexOfficePermission.IUpdate;
  };
  export type Body = IFlexOfficePermission.IUpdate;
  export type Response = IFlexOfficePermission;

  export const METADATA = {
    method: "PUT",
    path: "/flexOffice/admin/permissions/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/admin/permissions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IFlexOfficePermission =>
    typia.random<IFlexOfficePermission>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a permission by ID from flex_office_permissions table.
 *
 * This DELETE operation removes a permission entry from the
 * flex_office_permissions table in the FlexOffice system. Permissions define
 * specific access rights that can be assigned for role-based access control.
 * The operation requires the unique ID of the permission. Once deleted, the
 * permission and all its related assignments cease to exist and cannot be
 * recovered.
 *
 * Security considerations include restricting this operation to high-level
 * administrative roles to prevent accidental or unauthorized permission
 * removal. The operation only requires the permission ID path parameter for
 * targeting the exact record.
 *
 * This operation is critical for system administration to maintain and update
 * access controls but must be guarded carefully due to its impact on system
 * security and user access.
 *
 * No request body is needed, and no content is returned upon success.
 *
 * @param props.connection
 * @param props.id Unique identifier of the permission to delete
 * @path /flexOffice/admin/permissions/:id
 * @accessor api.functional.flexOffice.admin.permissions.erasePermission
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erasePermission(
  connection: IConnection,
  props: erasePermission.Props,
): Promise<void> {
  return true === connection.simulate
    ? erasePermission.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erasePermission.METADATA,
          path: erasePermission.path(props),
          status: null,
        },
      );
}
export namespace erasePermission {
  export type Props = {
    /** Unique identifier of the permission to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/flexOffice/admin/permissions/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/admin/permissions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erasePermission.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erasePermission.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
