import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IFlexOfficeDataSourceCredential } from "../../../../../structures/IFlexOfficeDataSourceCredential";

/**
 * Update credential details for a specific data source.
 *
 * Update a credential associated with a data source in the FlexOffice backend
 * system. This operation targets the flex_office_data_source_credentials table,
 * which stores authentication credentials like OAuth2 tokens or API keys for
 * external data sources.
 *
 * The update requires precise identification via the dataSourceId and
 * credentialId path parameters.
 *
 * Users with appropriate authorization can modify credential_type,
 * credential_value, and expires_at for improved security or credential refresh.
 * The system maintains audit timestamps created_at and updated_at
 * automatically.
 *
 * Security is critical as credentials grant access to external databases; thus,
 * strict validation and role-based access control apply. Errors for invalid IDs
 * or unauthorized attempts will be returned accordingly.
 *
 * Related operations include creating new credentials, deleting credentials,
 * and managing data sources themselves.
 *
 * @param props.connection
 * @param props.dataSourceId Unique identifier of the data source to which the
 *   credential belongs
 * @param props.credentialId Unique identifier of the credential to update
 * @param props.body Credential update payload containing type, value, and
 *   expiration
 * @path /flexOffice/editor/dataSources/:dataSourceId/credentials/:credentialId
 * @accessor api.functional.flexOffice.editor.dataSources.credentials.updateCredential
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateCredential(
  connection: IConnection,
  props: updateCredential.Props,
): Promise<updateCredential.Response> {
  return true === connection.simulate
    ? updateCredential.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateCredential.METADATA,
          path: updateCredential.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateCredential {
  export type Props = {
    /** Unique identifier of the data source to which the credential belongs */
    dataSourceId: string & tags.Format<"uuid">;

    /** Unique identifier of the credential to update */
    credentialId: string & tags.Format<"uuid">;

    /** Credential update payload containing type, value, and expiration */
    body: IFlexOfficeDataSourceCredential.IUpdate;
  };
  export type Body = IFlexOfficeDataSourceCredential.IUpdate;
  export type Response = IFlexOfficeDataSourceCredential;

  export const METADATA = {
    method: "PUT",
    path: "/flexOffice/editor/dataSources/:dataSourceId/credentials/:credentialId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/editor/dataSources/${encodeURIComponent(props.dataSourceId ?? "null")}/credentials/${encodeURIComponent(props.credentialId ?? "null")}`;
  export const random = (): IFlexOfficeDataSourceCredential =>
    typia.random<IFlexOfficeDataSourceCredential>();
  export const simulate = (
    connection: IConnection,
    props: updateCredential.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateCredential.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("dataSourceId")(() => typia.assert(props.dataSourceId));
      assert.param("credentialId")(() => typia.assert(props.credentialId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Erase a credential from a data source permanently.
 *
 * Erase a credential for a given data source identified by dataSourceId and
 * credentialId. This operation deletes the credential record permanently from
 * the flex_office_data_source_credentials table.
 *
 * Due to the sensitive nature of credentials controlling access to external
 * data sources, this operation is restricted to authorized roles (admin,
 * editor).
 *
 * The operation ensures no residual data remains after deletion, supporting
 * security compliance.
 *
 * Related operations include creating and updating credentials and managing
 * data sources.
 *
 * @param props.connection
 * @param props.dataSourceId Unique identifier of the data source owning the
 *   credential
 * @param props.credentialId Unique identifier of the credential to erase
 * @path /flexOffice/editor/dataSources/:dataSourceId/credentials/:credentialId
 * @accessor api.functional.flexOffice.editor.dataSources.credentials.eraseCredential
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseCredential(
  connection: IConnection,
  props: eraseCredential.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseCredential.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseCredential.METADATA,
          path: eraseCredential.path(props),
          status: null,
        },
      );
}
export namespace eraseCredential {
  export type Props = {
    /** Unique identifier of the data source owning the credential */
    dataSourceId: string & tags.Format<"uuid">;

    /** Unique identifier of the credential to erase */
    credentialId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/flexOffice/editor/dataSources/:dataSourceId/credentials/:credentialId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/editor/dataSources/${encodeURIComponent(props.dataSourceId ?? "null")}/credentials/${encodeURIComponent(props.credentialId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseCredential.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseCredential.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("dataSourceId")(() => typia.assert(props.dataSourceId));
      assert.param("credentialId")(() => typia.assert(props.credentialId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
