import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IFlexOfficeWidgetScript } from "../../../../../structures/IFlexOfficeWidgetScript";
import { IPageIFlexOfficeWidgetScript } from "../../../../../structures/IPageIFlexOfficeWidgetScript";

/**
 * Create widget script for a widget.
 *
 * Create a new script associated with a widget specified by widgetId. Input
 * includes script type and content.
 *
 * Validates access permissions.
 *
 * Returns detailed information of the created script.
 *
 * Rejects malformed input or unauthorized access.
 *
 * @param props.connection
 * @param props.widgetId Unique identifier of the target widget
 * @param props.body Information required to create a widget script
 * @path /flexOffice/editor/widgets/:widgetId/scripts
 * @accessor api.functional.flexOffice.editor.widgets.scripts.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the target widget */
    widgetId: string & tags.Format<"uuid">;

    /** Information required to create a widget script */
    body: IFlexOfficeWidgetScript.ICreate;
  };
  export type Body = IFlexOfficeWidgetScript.ICreate;
  export type Response = IFlexOfficeWidgetScript;

  export const METADATA = {
    method: "POST",
    path: "/flexOffice/editor/widgets/:widgetId/scripts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/editor/widgets/${encodeURIComponent(props.widgetId ?? "null")}/scripts`;
  export const random = (): IFlexOfficeWidgetScript =>
    typia.random<IFlexOfficeWidgetScript>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("widgetId")(() => typia.assert(props.widgetId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List widget scripts for a widget with pagination and filtering.
 *
 * Retrieve a paginated and filtered list of scripts associated with the widget
 * identified by widgetId. Supports comprehensive filtering, sorting, and
 * pagination capabilities.
 *
 * Security enforcement ensures only authorized users can access the widget's
 * scripts.
 *
 * The response provides concise script summaries suitable for listing and
 * browsing.
 *
 * All requested scripts correspond to the target widgetId.
 *
 * Returns errors if widgetId is invalid or access is unauthorized.
 *
 * @param props.connection
 * @param props.widgetId Unique identifier of the target widget
 * @param props.body Filtering, pagination, and sorting criteria for fetching
 *   widget scripts
 * @path /flexOffice/editor/widgets/:widgetId/scripts
 * @accessor api.functional.flexOffice.editor.widgets.scripts.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the target widget */
    widgetId: string & tags.Format<"uuid">;

    /**
     * Filtering, pagination, and sorting criteria for fetching widget
     * scripts
     */
    body: IFlexOfficeWidgetScript.IRequest;
  };
  export type Body = IFlexOfficeWidgetScript.IRequest;
  export type Response = IPageIFlexOfficeWidgetScript.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/flexOffice/editor/widgets/:widgetId/scripts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/editor/widgets/${encodeURIComponent(props.widgetId ?? "null")}/scripts`;
  export const random = (): IPageIFlexOfficeWidgetScript.ISummary =>
    typia.random<IPageIFlexOfficeWidgetScript.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("widgetId")(() => typia.assert(props.widgetId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get widget script details by widgetId and scriptId.
 *
 * Retrieve detailed information for a widget script specified by scriptId under
 * the widget identified by widgetId.
 *
 * Includes full script metadata and source content.
 *
 * Requires valid UUIDs for widgetId and scriptId.
 *
 * Access control restricts to authorized users.
 *
 * Returns 404 if not found or access denied.
 *
 * @param props.connection
 * @param props.widgetId Unique identifier of the target widget
 * @param props.scriptId Unique identifier of the target script
 * @path /flexOffice/editor/widgets/:widgetId/scripts/:scriptId
 * @accessor api.functional.flexOffice.editor.widgets.scripts.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target widget */
    widgetId: string & tags.Format<"uuid">;

    /** Unique identifier of the target script */
    scriptId: string & tags.Format<"uuid">;
  };
  export type Response = IFlexOfficeWidgetScript;

  export const METADATA = {
    method: "GET",
    path: "/flexOffice/editor/widgets/:widgetId/scripts/:scriptId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/editor/widgets/${encodeURIComponent(props.widgetId ?? "null")}/scripts/${encodeURIComponent(props.scriptId ?? "null")}`;
  export const random = (): IFlexOfficeWidgetScript =>
    typia.random<IFlexOfficeWidgetScript>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("widgetId")(() => typia.assert(props.widgetId));
      assert.param("scriptId")(() => typia.assert(props.scriptId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update widget script for a given widget.
 *
 * Update a widget script identified by scriptId under the widget identified by
 * widgetId. Input body contains script update details.
 *
 * Validates user authorization.
 *
 * Returns full updated script information.
 *
 * Errors if script does not exist or access denied.
 *
 * @param props.connection
 * @param props.widgetId Unique identifier of the target widget
 * @param props.scriptId Unique identifier of the target script
 * @param props.body Details to update widget script
 * @path /flexOffice/editor/widgets/:widgetId/scripts/:scriptId
 * @accessor api.functional.flexOffice.editor.widgets.scripts.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target widget */
    widgetId: string & tags.Format<"uuid">;

    /** Unique identifier of the target script */
    scriptId: string & tags.Format<"uuid">;

    /** Details to update widget script */
    body: IFlexOfficeWidgetScript.IUpdate;
  };
  export type Body = IFlexOfficeWidgetScript.IUpdate;
  export type Response = IFlexOfficeWidgetScript;

  export const METADATA = {
    method: "PUT",
    path: "/flexOffice/editor/widgets/:widgetId/scripts/:scriptId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/editor/widgets/${encodeURIComponent(props.widgetId ?? "null")}/scripts/${encodeURIComponent(props.scriptId ?? "null")}`;
  export const random = (): IFlexOfficeWidgetScript =>
    typia.random<IFlexOfficeWidgetScript>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("widgetId")(() => typia.assert(props.widgetId));
      assert.param("scriptId")(() => typia.assert(props.scriptId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a UI widget script by ID.
 *
 * Deletes a UI widget script from the system given the widgetId and scriptId.
 * This operation permanently removes the script record from the
 * flex_office_widget_scripts table and cannot be undone.
 *
 * Security considerations dictate that only Admin and Editor roles with proper
 * authorizations can perform this action.
 *
 * The operation requires both widgetId and scriptId path parameters, both
 * UUIDs, to identify the target script associated with the widget.
 *
 * Errors may include resource not found or unauthorized access, which are
 * appropriately handled.
 *
 * There is no request body or response content for this operation.
 *
 * @param props.connection
 * @param props.widgetId Unique identifier of the UI widget
 * @param props.scriptId Unique identifier of the widget script to delete
 * @path /flexOffice/editor/widgets/:widgetId/scripts/:scriptId
 * @accessor api.functional.flexOffice.editor.widgets.scripts.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the UI widget */
    widgetId: string & tags.Format<"uuid">;

    /** Unique identifier of the widget script to delete */
    scriptId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/flexOffice/editor/widgets/:widgetId/scripts/:scriptId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/editor/widgets/${encodeURIComponent(props.widgetId ?? "null")}/scripts/${encodeURIComponent(props.scriptId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("widgetId")(() => typia.assert(props.widgetId));
      assert.param("scriptId")(() => typia.assert(props.scriptId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
