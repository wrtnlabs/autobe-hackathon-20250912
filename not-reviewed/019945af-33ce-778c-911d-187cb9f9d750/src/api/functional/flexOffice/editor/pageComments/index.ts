import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IFlexOfficePageComment } from "../../../../structures/IFlexOfficePageComment";

/**
 * Create a new FlexOffice page comment.
 *
 * Create a new comment on a FlexOffice UI page. This operation allows
 * authorized users to add textual annotations associated with pages for
 * collaboration and editorial workflows.
 *
 * The payload must include the page ID, editor ID, and comment content. The
 * system records the creation timestamp automatically.
 *
 * Authorization checks ensure the user can comment on the specified page.
 *
 * This operation complements list and detail retrieval endpoints for comments.
 *
 * @param props.connection
 * @param props.body Payload containing new comment details
 * @path /flexOffice/editor/pageComments
 * @accessor api.functional.flexOffice.editor.pageComments.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Payload containing new comment details */
    body: IFlexOfficePageComment.ICreate;
  };
  export type Body = IFlexOfficePageComment.ICreate;
  export type Response = IFlexOfficePageComment;

  export const METADATA = {
    method: "POST",
    path: "/flexOffice/editor/pageComments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/flexOffice/editor/pageComments";
  export const random = (): IFlexOfficePageComment =>
    typia.random<IFlexOfficePageComment>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing FlexOffice page comment by ID.
 *
 * Update the content and properties of an existing FlexOffice page comment. The
 * comment is uniquely identified by its ID in the path parameter.
 *
 * The operation verifies user authorization to modify the comment.
 *
 * The request body includes fields for partial or full updates of comment
 * content.
 *
 * This supports collaborative editing and correction in UI interfaces.
 *
 * @param props.connection
 * @param props.pageCommentId Unique identifier of the target page comment
 * @param props.body Payload containing updated comment information
 * @path /flexOffice/editor/pageComments/:pageCommentId
 * @accessor api.functional.flexOffice.editor.pageComments.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target page comment */
    pageCommentId: string & tags.Format<"uuid">;

    /** Payload containing updated comment information */
    body: IFlexOfficePageComment.IUpdate;
  };
  export type Body = IFlexOfficePageComment.IUpdate;
  export type Response = IFlexOfficePageComment;

  export const METADATA = {
    method: "PUT",
    path: "/flexOffice/editor/pageComments/:pageCommentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/editor/pageComments/${encodeURIComponent(props.pageCommentId ?? "null")}`;
  export const random = (): IFlexOfficePageComment =>
    typia.random<IFlexOfficePageComment>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("pageCommentId")(() => typia.assert(props.pageCommentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a FlexOffice page comment by its ID.
 *
 * This operation permanently deletes a page comment identified by its unique ID
 * from the flex_office_page_comments table in the Prisma schema. It supports
 * collaboration workflows by enabling authorized users to remove inappropriate
 * or obsolete comments associated with FlexOffice UI pages.
 *
 * Access is restricted to authorized roles such as admin, editor, or viewer
 * depending on permissions. The path parameter pageCommentId specifies the
 * target comment for deletion.
 *
 * No request body is required or accepted. This performs a hard delete and the
 * record will be unrecoverable.
 *
 * Related endpoints allow listing comments for a page, retrieving individual
 * comments, and creating new comments.
 *
 * Proper error handling includes validation of comment existence and
 * authorization verification before deletion.
 *
 * @param props.connection
 * @param props.pageCommentId Unique identifier of the page comment to delete
 * @path /flexOffice/editor/pageComments/:pageCommentId
 * @accessor api.functional.flexOffice.editor.pageComments.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the page comment to delete */
    pageCommentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/flexOffice/editor/pageComments/:pageCommentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/editor/pageComments/${encodeURIComponent(props.pageCommentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("pageCommentId")(() => typia.assert(props.pageCommentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
