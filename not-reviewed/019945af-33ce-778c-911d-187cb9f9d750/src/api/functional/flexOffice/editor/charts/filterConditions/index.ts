import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IFlexOfficeFilterCondition } from "../../../../../structures/IFlexOfficeFilterCondition";
import { IPageIFlexOfficeFilterCondition } from "../../../../../structures/IPageIFlexOfficeFilterCondition";

/**
 * Create a new filter condition for a specific chart.
 *
 * Create a new filter condition linked to a specified chart. The client
 * provides the filter expression and other related data.
 *
 * Authorization ensures only users with admin or editor roles can create filter
 * conditions.
 *
 * Upon successful creation, the new filter condition entity is returned.
 *
 * Errors include validation failures or unauthorized access.
 *
 * This operation is critical when extending chart filtering capabilities
 * dynamically.
 *
 * @param props.connection
 * @param props.chartId Unique identifier of the target chart
 * @param props.body New filter condition data for creation
 * @path /flexOffice/editor/charts/:chartId/filterConditions
 * @accessor api.functional.flexOffice.editor.charts.filterConditions.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the target chart */
    chartId: string;

    /** New filter condition data for creation */
    body: IFlexOfficeFilterCondition.ICreate;
  };
  export type Body = IFlexOfficeFilterCondition.ICreate;
  export type Response = IFlexOfficeFilterCondition;

  export const METADATA = {
    method: "POST",
    path: "/flexOffice/editor/charts/:chartId/filterConditions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/editor/charts/${encodeURIComponent(props.chartId ?? "null")}/filterConditions`;
  export const random = (): IFlexOfficeFilterCondition =>
    typia.random<IFlexOfficeFilterCondition>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("chartId")(() => typia.assert(props.chartId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve filter conditions for a specific chart.
 *
 * Retrieve a list of filter conditions linked to a specific chart in the
 * system. This operation fetches all filter conditions, including their
 * expressions and enablement status, associated with the given chart
 * identifier.
 *
 * Security is enforced by requiring user authentication and role-based access
 * permissions to ensure only authorized users (e.g., admins, editors) can query
 * filter conditions.
 *
 * The response includes an array of filter condition summaries suitable for use
 * in UI lists or detailed configuration screens.
 *
 * This operation directly interfaces with the flex_office_filter_conditions
 * table, which defines filtering expressions for charts and optionally links
 * these conditions to widgets.
 *
 * Clients should use this endpoint before creating or updating conditions to
 * understand existing configurations and avoid duplicates or conflicts.
 *
 * Errors occur if the chart ID is invalid or access is unauthorized. Pagination
 * and sorting behavior can be enhanced via query parameters supported by the
 * IRequest request body.
 *
 * @param props.connection
 * @param props.chartId Unique identifier of the target chart
 * @param props.body Search criteria with pagination and filtering options for
 *   chart filter conditions
 * @path /flexOffice/editor/charts/:chartId/filterConditions
 * @accessor api.functional.flexOffice.editor.charts.filterConditions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the target chart */
    chartId: string;

    /**
     * Search criteria with pagination and filtering options for chart
     * filter conditions
     */
    body: IFlexOfficeFilterCondition.IRequest;
  };
  export type Body = IFlexOfficeFilterCondition.IRequest;
  export type Response = IPageIFlexOfficeFilterCondition.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/flexOffice/editor/charts/:chartId/filterConditions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/editor/charts/${encodeURIComponent(props.chartId ?? "null")}/filterConditions`;
  export const random = (): IPageIFlexOfficeFilterCondition.ISummary =>
    typia.random<IPageIFlexOfficeFilterCondition.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("chartId")(() => typia.assert(props.chartId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve specific filter condition details by chart and condition ID.
 *
 * Fetch detailed information about a particular filter condition by its unique
 * identifier within the context of a specific chart.
 *
 * This endpoint enforces authorization to ensure that only allowed users such
 * as those with admin or editor roles can access the condition details.
 *
 * The response includes all defined properties of the filter condition,
 * including the filter expression and enablement flag.
 *
 * Clients use this operation to display or modify existing filter conditions.
 *
 * Errors may include invalid IDs or unauthorized access.
 *
 * @param props.connection
 * @param props.chartId Unique identifier of the target chart
 * @param props.filterConditionId Unique identifier of the target filter
 *   condition
 * @path /flexOffice/editor/charts/:chartId/filterConditions/:filterConditionId
 * @accessor api.functional.flexOffice.editor.charts.filterConditions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target chart */
    chartId: string;

    /** Unique identifier of the target filter condition */
    filterConditionId: string;
  };
  export type Response = IFlexOfficeFilterCondition;

  export const METADATA = {
    method: "GET",
    path: "/flexOffice/editor/charts/:chartId/filterConditions/:filterConditionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/editor/charts/${encodeURIComponent(props.chartId ?? "null")}/filterConditions/${encodeURIComponent(props.filterConditionId ?? "null")}`;
  export const random = (): IFlexOfficeFilterCondition =>
    typia.random<IFlexOfficeFilterCondition>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("chartId")(() => typia.assert(props.chartId));
      assert.param("filterConditionId")(() =>
        typia.assert(props.filterConditionId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing filter condition for a specific chart.
 *
 * Update properties of an existing filter condition for a given chart. The
 * client supplies updated filter expression or enablement flag.
 *
 * The system validates that the user holds the appropriate role (admin or
 * editor) before permitting the update.
 *
 * Upon success, the updated filter condition data is returned.
 *
 * Errors occur on invalid ID references or failing permission checks.
 *
 * This API supports the workflow of maintaining and tuning existing chart
 * filters.
 *
 * @param props.connection
 * @param props.chartId Unique identifier of the target chart
 * @param props.filterConditionId Unique identifier of the target filter
 *   condition
 * @param props.body Filter condition update data
 * @path /flexOffice/editor/charts/:chartId/filterConditions/:filterConditionId
 * @accessor api.functional.flexOffice.editor.charts.filterConditions.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target chart */
    chartId: string;

    /** Unique identifier of the target filter condition */
    filterConditionId: string;

    /** Filter condition update data */
    body: IFlexOfficeFilterCondition.IUpdate;
  };
  export type Body = IFlexOfficeFilterCondition.IUpdate;
  export type Response = IFlexOfficeFilterCondition;

  export const METADATA = {
    method: "PUT",
    path: "/flexOffice/editor/charts/:chartId/filterConditions/:filterConditionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/editor/charts/${encodeURIComponent(props.chartId ?? "null")}/filterConditions/${encodeURIComponent(props.filterConditionId ?? "null")}`;
  export const random = (): IFlexOfficeFilterCondition =>
    typia.random<IFlexOfficeFilterCondition>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("chartId")(() => typia.assert(props.chartId));
      assert.param("filterConditionId")(() =>
        typia.assert(props.filterConditionId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specific filter condition of a chart in FlexOffice analytics.
 *
 * This DELETE endpoint permanently removes a filter condition from the system
 * associated with a specific chart. Filter conditions are defined expressions
 * that enable dynamic querying and data filtering on charts. Removing a filter
 * condition disables the corresponding filter effect on analytics dashboards.
 *
 * Security considerations require that only authorized users can delete filter
 * conditions, ensuring data integrity.
 *
 * This operation acts on the 'flex_office_filter_conditions' table as per
 * Prisma schema, ensuring that all related references and constraints are
 * respected during deletion.
 *
 * Validation includes confirming the existence of the target filter condition
 * and proper cleanup of the database.
 *
 * No request body is needed for this DELETE operation, and no response body is
 * returned, indicating successful deletion by HTTP status code.
 *
 * This operation should be used when filter conditions are no longer relevant
 * or need to be permanently removed from analytics configurations.
 *
 * @param props.connection
 * @param props.chartId Target chart's unique identifier (UUID)
 * @param props.filterConditionId Target filter condition's unique identifier
 *   (UUID)
 * @path /flexOffice/editor/charts/:chartId/filterConditions/:filterConditionId
 * @accessor api.functional.flexOffice.editor.charts.filterConditions.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Target chart's unique identifier (UUID) */
    chartId: string & tags.Format<"uuid">;

    /** Target filter condition's unique identifier (UUID) */
    filterConditionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/flexOffice/editor/charts/:chartId/filterConditions/:filterConditionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/editor/charts/${encodeURIComponent(props.chartId ?? "null")}/filterConditions/${encodeURIComponent(props.filterConditionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("chartId")(() => typia.assert(props.chartId));
      assert.param("filterConditionId")(() =>
        typia.assert(props.filterConditionId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
