import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IFlexOfficeWidgetInstallation } from "../../../../../structures/IFlexOfficeWidgetInstallation";
import { IPageIFlexOfficeWidgetInstallation } from "../../../../../structures/IPageIFlexOfficeWidgetInstallation";

/**
 * Create a new widget installation for a marketplace widget.
 *
 * Create a new installation of a marketplace widget on a FlexOffice UI page.
 * This operation requires providing the marketplace widget's unique identifier
 * (widgetId) via the URL path and the installation details in the request body.
 * The installation record includes references to the marketplace widget ID,
 * target UI page ID, installation date, and optional configuration data.
 *
 * Security considerations: Only authenticated users with rights to modify pages
 * should invoke this operation. Input validation ensures the pageId references
 * an existing page.
 *
 * This operation acts on the flex_office_widget_installations table as defined
 * in the Prisma schema, including all relevant fields necessary to manage
 * widget installations. The server will perform cascading deletes if the
 * referenced marketplace widget or page is removed.
 *
 * Request failures due to invalid IDs or missing required fields will result in
 * appropriate error responses.
 *
 * @param props.connection
 * @param props.widgetId Target marketplace widget's unique identifier
 * @param props.body Installation details for the marketplace widget
 * @path /flexOffice/editor/marketplaceWidgets/:widgetId/installations
 * @accessor api.functional.flexOffice.editor.marketplaceWidgets.installations.createInstallation
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createInstallation(
  connection: IConnection,
  props: createInstallation.Props,
): Promise<createInstallation.Response> {
  return true === connection.simulate
    ? createInstallation.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createInstallation.METADATA,
          path: createInstallation.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace createInstallation {
  export type Props = {
    /** Target marketplace widget's unique identifier */
    widgetId: string & tags.Format<"uuid">;

    /** Installation details for the marketplace widget */
    body: IFlexOfficeWidgetInstallation.ICreate;
  };
  export type Body = IFlexOfficeWidgetInstallation.ICreate;
  export type Response = IFlexOfficeWidgetInstallation;

  export const METADATA = {
    method: "POST",
    path: "/flexOffice/editor/marketplaceWidgets/:widgetId/installations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/editor/marketplaceWidgets/${encodeURIComponent(props.widgetId ?? "null")}/installations`;
  export const random = (): IFlexOfficeWidgetInstallation =>
    typia.random<IFlexOfficeWidgetInstallation>();
  export const simulate = (
    connection: IConnection,
    props: createInstallation.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createInstallation.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("widgetId")(() => typia.assert(props.widgetId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List widget installations for a marketplace widget.
 *
 * Fetches a paginated list of UI page installations for a specific marketplace
 * widget by its UUID. Supports filtering and sorting via request body
 * parameters. Access allowed for admins and editors only. Returns summarized
 * install data paginated for client consumption.
 *
 * @param props.connection
 * @param props.widgetId Unique identifier of the marketplace widget whose
 *   installations to list
 * @param props.body Search and pagination parameters for widget installations
 * @path /flexOffice/editor/marketplaceWidgets/:widgetId/installations
 * @accessor api.functional.flexOffice.editor.marketplaceWidgets.installations.indexWidgetInstallations
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexWidgetInstallations(
  connection: IConnection,
  props: indexWidgetInstallations.Props,
): Promise<indexWidgetInstallations.Response> {
  return true === connection.simulate
    ? indexWidgetInstallations.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexWidgetInstallations.METADATA,
          path: indexWidgetInstallations.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace indexWidgetInstallations {
  export type Props = {
    /**
     * Unique identifier of the marketplace widget whose installations to
     * list
     */
    widgetId: string & tags.Format<"uuid">;

    /** Search and pagination parameters for widget installations */
    body: IFlexOfficeWidgetInstallation.IRequest;
  };
  export type Body = IFlexOfficeWidgetInstallation.IRequest;
  export type Response = IPageIFlexOfficeWidgetInstallation.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/flexOffice/editor/marketplaceWidgets/:widgetId/installations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/editor/marketplaceWidgets/${encodeURIComponent(props.widgetId ?? "null")}/installations`;
  export const random = (): IPageIFlexOfficeWidgetInstallation.ISummary =>
    typia.random<IPageIFlexOfficeWidgetInstallation.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: indexWidgetInstallations.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexWidgetInstallations.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("widgetId")(() => typia.assert(props.widgetId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a widget installation.
 *
 * Retrieves detailed information of a specific widget installation identified
 * by the marketplace widget UUID and the installation UUID. For admin and
 * editor roles only. Returns all registration data including configuration,
 * installation timestamp, and soft deletion status if applicable.
 *
 * @param props.connection
 * @param props.widgetId Unique identifier of the marketplace widget
 * @param props.installationId Unique identifier of the widget installation
 * @path /flexOffice/editor/marketplaceWidgets/:widgetId/installations/:installationId
 * @accessor api.functional.flexOffice.editor.marketplaceWidgets.installations.atWidgetInstallation
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atWidgetInstallation(
  connection: IConnection,
  props: atWidgetInstallation.Props,
): Promise<atWidgetInstallation.Response> {
  return true === connection.simulate
    ? atWidgetInstallation.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atWidgetInstallation.METADATA,
          path: atWidgetInstallation.path(props),
          status: null,
        },
      );
}
export namespace atWidgetInstallation {
  export type Props = {
    /** Unique identifier of the marketplace widget */
    widgetId: string & tags.Format<"uuid">;

    /** Unique identifier of the widget installation */
    installationId: string & tags.Format<"uuid">;
  };
  export type Response = IFlexOfficeWidgetInstallation;

  export const METADATA = {
    method: "GET",
    path: "/flexOffice/editor/marketplaceWidgets/:widgetId/installations/:installationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/editor/marketplaceWidgets/${encodeURIComponent(props.widgetId ?? "null")}/installations/${encodeURIComponent(props.installationId ?? "null")}`;
  export const random = (): IFlexOfficeWidgetInstallation =>
    typia.random<IFlexOfficeWidgetInstallation>();
  export const simulate = (
    connection: IConnection,
    props: atWidgetInstallation.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atWidgetInstallation.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("widgetId")(() => typia.assert(props.widgetId));
      assert.param("installationId")(() => typia.assert(props.installationId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing widget installation.
 *
 * Update details of an existing widget installation for a marketplace widget.
 * The path parameters identify the widgetInstallation to update, while the
 * request body provides the updated fields such as configuration data or
 * installation date.
 *
 * Security considerations: Only authorized users with edit rights on the
 * associated pages can perform this operation.
 *
 * This operation affects the flex_office_widget_installations table, ensuring
 * strong consistency and validation against the referenced marketplace widget
 * and page IDs. Proper error handling delivers meaningful messages for invalid
 * or missing IDs.
 *
 * @param props.connection
 * @param props.widgetId Target marketplace widget's unique identifier
 * @param props.installationId Target widget installation's unique identifier
 * @param props.body Updated information for the widget installation
 * @path /flexOffice/editor/marketplaceWidgets/:widgetId/installations/:installationId
 * @accessor api.functional.flexOffice.editor.marketplaceWidgets.installations.updateInstallation
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateInstallation(
  connection: IConnection,
  props: updateInstallation.Props,
): Promise<updateInstallation.Response> {
  return true === connection.simulate
    ? updateInstallation.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateInstallation.METADATA,
          path: updateInstallation.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateInstallation {
  export type Props = {
    /** Target marketplace widget's unique identifier */
    widgetId: string & tags.Format<"uuid">;

    /** Target widget installation's unique identifier */
    installationId: string & tags.Format<"uuid">;

    /** Updated information for the widget installation */
    body: IFlexOfficeWidgetInstallation.IUpdate;
  };
  export type Body = IFlexOfficeWidgetInstallation.IUpdate;
  export type Response = IFlexOfficeWidgetInstallation;

  export const METADATA = {
    method: "PUT",
    path: "/flexOffice/editor/marketplaceWidgets/:widgetId/installations/:installationId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/editor/marketplaceWidgets/${encodeURIComponent(props.widgetId ?? "null")}/installations/${encodeURIComponent(props.installationId ?? "null")}`;
  export const random = (): IFlexOfficeWidgetInstallation =>
    typia.random<IFlexOfficeWidgetInstallation>();
  export const simulate = (
    connection: IConnection,
    props: updateInstallation.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateInstallation.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("widgetId")(() => typia.assert(props.widgetId));
      assert.param("installationId")(() => typia.assert(props.installationId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a widget installation and disassociate a marketplace widget from a UI
 * page. The deletion is permanent and removes the record from the database.
 *
 * Security considerations: Ensure only authorized users can delete
 * installations. The operation returns no content on success.
 *
 * Associated cascading effects happen if related widgets or pages are deleted
 * separately.
 *
 * @param props.connection
 * @param props.widgetId Target marketplace widget's unique identifier
 * @param props.installationId Target widget installation's unique identifier
 * @path /flexOffice/editor/marketplaceWidgets/:widgetId/installations/:installationId
 * @accessor api.functional.flexOffice.editor.marketplaceWidgets.installations.eraseInstallation
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseInstallation(
  connection: IConnection,
  props: eraseInstallation.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseInstallation.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseInstallation.METADATA,
          path: eraseInstallation.path(props),
          status: null,
        },
      );
}
export namespace eraseInstallation {
  export type Props = {
    /** Target marketplace widget's unique identifier */
    widgetId: string & tags.Format<"uuid">;

    /** Target widget installation's unique identifier */
    installationId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/flexOffice/editor/marketplaceWidgets/:widgetId/installations/:installationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/editor/marketplaceWidgets/${encodeURIComponent(props.widgetId ?? "null")}/installations/${encodeURIComponent(props.installationId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseInstallation.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseInstallation.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("widgetId")(() => typia.assert(props.widgetId));
      assert.param("installationId")(() => typia.assert(props.installationId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
