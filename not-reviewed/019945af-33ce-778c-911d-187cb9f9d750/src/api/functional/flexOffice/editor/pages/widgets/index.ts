import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IFlexOfficeWidget } from "../../../../../structures/IFlexOfficeWidget";
import { IPageIFlexOfficeWidget } from "../../../../../structures/IPageIFlexOfficeWidget";

/**
 * Create a new widget in a UI page.
 *
 * Create a new widget in the specified page. The operation accepts widget
 * properties including type, name, and optional configuration JSON.
 *
 * Only users with admin or editor roles can perform this creation.
 *
 * Request body must conform to the structure of IFlexOfficeWidget.ICreate with
 * required fields.
 *
 * On success, returns the full representation of the created widget.
 *
 * Errors may include validation failures if widget name duplicates or
 * widgetType is missing.
 *
 * @param props.connection
 * @param props.pageId Unique identifier of the target page
 * @param props.body Properties required to create a new widget
 * @path /flexOffice/editor/pages/:pageId/widgets
 * @accessor api.functional.flexOffice.editor.pages.widgets.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the target page */
    pageId: string & tags.Format<"uuid">;

    /** Properties required to create a new widget */
    body: IFlexOfficeWidget.ICreate;
  };
  export type Body = IFlexOfficeWidget.ICreate;
  export type Response = IFlexOfficeWidget;

  export const METADATA = {
    method: "POST",
    path: "/flexOffice/editor/pages/:pageId/widgets",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/editor/pages/${encodeURIComponent(props.pageId ?? "null")}/widgets`;
  export const random = (): IFlexOfficeWidget =>
    typia.random<IFlexOfficeWidget>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("pageId")(() => typia.assert(props.pageId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and list widgets on a UI page with pagination and filters.
 *
 * Retrieve a paginated list of widgets on the specified UI page. Supports
 * filtering by widget type, name, and status.
 *
 * Only users with 'admin' or 'editor' roles can access this data.
 *
 * Supports pagination parameters such as page number and size to handle large
 * sets.
 *
 * Includes summary widget details optimized for listing.
 *
 * Related operations allow managing individual widgets and scripts separately.
 *
 * @param props.connection
 * @param props.pageId Unique identifier of the page whose widgets are to be
 *   retrieved
 * @param props.body Search, filter, and pagination parameters for widgets.
 * @path /flexOffice/editor/pages/:pageId/widgets
 * @accessor api.functional.flexOffice.editor.pages.widgets.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the page whose widgets are to be retrieved */
    pageId: string & tags.Format<"uuid">;

    /** Search, filter, and pagination parameters for widgets. */
    body: IFlexOfficeWidget.IRequest;
  };
  export type Body = IFlexOfficeWidget.IRequest;
  export type Response = IPageIFlexOfficeWidget.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/flexOffice/editor/pages/:pageId/widgets",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/editor/pages/${encodeURIComponent(props.pageId ?? "null")}/widgets`;
  export const random = (): IPageIFlexOfficeWidget.ISummary =>
    typia.random<IPageIFlexOfficeWidget.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("pageId")(() => typia.assert(props.pageId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a specific widget by pageId and widgetId.
 *
 * Retrieve detailed information about a specific widget associated with a given
 * UI page. This operation fetches data from the 'flex_office_widgets' table,
 * which stores widget characteristics including type, name, and configuration
 * details.
 *
 * Users accessing this endpoint must be authenticated and authorized as admins,
 * editors, or viewers to ensure appropriate access control.
 *
 * The response includes all persistent fields of the widget, such as timestamps
 * and soft-deletion status, providing comprehensive insight into the widget's
 * current configuration and state.
 *
 * Typical error responses include not found if the widget or page does not
 * exist, or unauthorized access if the user lacks sufficient permissions.
 *
 * This operation integrates with the UI/Page Builder frontend to support widget
 * editing and display workflows.
 *
 * @param props.connection
 * @param props.pageId Unique identifier of the target page
 * @param props.widgetId Unique identifier of the target widget
 * @path /flexOffice/editor/pages/:pageId/widgets/:widgetId
 * @accessor api.functional.flexOffice.editor.pages.widgets.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target page */
    pageId: string & tags.Format<"uuid">;

    /** Unique identifier of the target widget */
    widgetId: string & tags.Format<"uuid">;
  };
  export type Response = IFlexOfficeWidget;

  export const METADATA = {
    method: "GET",
    path: "/flexOffice/editor/pages/:pageId/widgets/:widgetId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/editor/pages/${encodeURIComponent(props.pageId ?? "null")}/widgets/${encodeURIComponent(props.widgetId ?? "null")}`;
  export const random = (): IFlexOfficeWidget =>
    typia.random<IFlexOfficeWidget>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("pageId")(() => typia.assert(props.pageId));
      assert.param("widgetId")(() => typia.assert(props.widgetId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing widget by pageId and widgetId.
 *
 * Update an existing widget of a given page, identified by widgetId.
 *
 * This operation modifies widget properties including name, type, and
 * configuration.
 *
 * Only users with admin or editor roles may update widgets.
 *
 * Returns the updated widget entity upon success.
 *
 * Validation errors or unauthorized access are possible failure modes.
 *
 * @param props.connection
 * @param props.pageId Unique identifier of the target page
 * @param props.widgetId Unique identifier of the target widget
 * @param props.body Properties to update on the widget
 * @path /flexOffice/editor/pages/:pageId/widgets/:widgetId
 * @accessor api.functional.flexOffice.editor.pages.widgets.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target page */
    pageId: string & tags.Format<"uuid">;

    /** Unique identifier of the target widget */
    widgetId: string & tags.Format<"uuid">;

    /** Properties to update on the widget */
    body: IFlexOfficeWidget.IUpdate;
  };
  export type Body = IFlexOfficeWidget.IUpdate;
  export type Response = IFlexOfficeWidget;

  export const METADATA = {
    method: "PUT",
    path: "/flexOffice/editor/pages/:pageId/widgets/:widgetId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/editor/pages/${encodeURIComponent(props.pageId ?? "null")}/widgets/${encodeURIComponent(props.widgetId ?? "null")}`;
  export const random = (): IFlexOfficeWidget =>
    typia.random<IFlexOfficeWidget>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("pageId")(() => typia.assert(props.pageId));
      assert.param("widgetId")(() => typia.assert(props.widgetId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a widget from a page.
 *
 * Delete a widget from a specific page permanently. This removes the widget
 * record from the database.
 *
 * Only users with admin or editor roles may perform deletion.
 *
 * No request body required.
 *
 * Clients should handle errors such as widget not found or unauthorized access.
 *
 * This operation employs hard deletion despite the presence of 'deleted_at' for
 * soft delete support in the database.
 *
 * @param props.connection
 * @param props.pageId Unique identifier of the target page
 * @param props.widgetId Unique identifier of the target widget
 * @path /flexOffice/editor/pages/:pageId/widgets/:widgetId
 * @accessor api.functional.flexOffice.editor.pages.widgets.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target page */
    pageId: string & tags.Format<"uuid">;

    /** Unique identifier of the target widget */
    widgetId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/flexOffice/editor/pages/:pageId/widgets/:widgetId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/editor/pages/${encodeURIComponent(props.pageId ?? "null")}/widgets/${encodeURIComponent(props.widgetId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("pageId")(() => typia.assert(props.pageId));
      assert.param("widgetId")(() => typia.assert(props.widgetId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
