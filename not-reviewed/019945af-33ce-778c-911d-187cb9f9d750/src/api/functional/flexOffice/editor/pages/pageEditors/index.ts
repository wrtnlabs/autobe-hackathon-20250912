import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IFlexOfficePageEditor } from "../../../../../structures/IFlexOfficePageEditor";
import { IPageIFlexOfficePageEditor } from "../../../../../structures/IPageIFlexOfficePageEditor";

/**
 * Create a new page editor session for a given UI page and editor user.
 *
 * This enables collaborative editing by tracking active editor sessions and
 * enforcing concurrency control.
 *
 * It is critical that each editor is only active once per page to preserve
 * concurrency limits.
 *
 * The request body must include valid references to the page and editor, and
 * optionally timestamps can be supplied but the system usually maintains them.
 *
 * @param props.connection
 * @param props.pageId Unique identifier of the UI page to create the editor
 *   session for
 * @param props.body Information required to create a page editor session
 * @path /flexOffice/editor/pages/:pageId/pageEditors
 * @accessor api.functional.flexOffice.editor.pages.pageEditors.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the UI page to create the editor session for */
    pageId: string & tags.Format<"uuid">;

    /** Information required to create a page editor session */
    body: IFlexOfficePageEditor.ICreate;
  };
  export type Body = IFlexOfficePageEditor.ICreate;
  export type Response = IFlexOfficePageEditor;

  export const METADATA = {
    method: "POST",
    path: "/flexOffice/editor/pages/:pageId/pageEditors",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/editor/pages/${encodeURIComponent(props.pageId ?? "null")}/pageEditors`;
  export const random = (): IFlexOfficePageEditor =>
    typia.random<IFlexOfficePageEditor>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("pageId")(() => typia.assert(props.pageId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List editor sessions for a specific page.
 *
 * Search and retrieve a paginated list of page editor sessions for a specified
 * page ID.
 *
 * Supports complex filtering, sorting, and pagination defined in the request
 * payload to enable efficient management of active editors involved in
 * collaborative editing.
 *
 * This endpoint interacts with the flex_office_page_editors table, filtering
 * sessions belonging to the specified page.
 *
 * Response data shows summarized active editor session information suitable for
 * UI display and management controls.
 *
 * Access restrictions ensure only authorized users access this data.
 *
 * Errors are managed via validation of pageId and request filters.
 *
 * @param props.connection
 * @param props.pageId Unique identifier of the page whose editor sessions are
 *   requested
 * @param props.body Filtering, sorting, and pagination parameters
 * @path /flexOffice/editor/pages/:pageId/pageEditors
 * @accessor api.functional.flexOffice.editor.pages.pageEditors.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the page whose editor sessions are requested */
    pageId: string & tags.Format<"uuid">;

    /** Filtering, sorting, and pagination parameters */
    body: IFlexOfficePageEditor.IRequest;
  };
  export type Body = IFlexOfficePageEditor.IRequest;
  export type Response = IPageIFlexOfficePageEditor.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/flexOffice/editor/pages/:pageId/pageEditors",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/editor/pages/${encodeURIComponent(props.pageId ?? "null")}/pageEditors`;
  export const random = (): IPageIFlexOfficePageEditor.ISummary =>
    typia.random<IPageIFlexOfficePageEditor.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("pageId")(() => typia.assert(props.pageId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve specific page editor session details.
 *
 * Retrieve details of a specific page editor session by page ID and page editor
 * ID. This operation allows clients to fetch comprehensive information about
 * the editor session for collaboration management.
 *
 * Security considerations include ensuring that only authorized users with at
 * least editor role or higher can access this data to maintain privacy and
 * integrity of editing sessions.
 *
 * The underlying data is sourced from the flex_office_page_editors table, which
 * tracks active editors for enforcing concurrent editing limits.
 *
 * Requests must specify valid UUIDs for both the page and the editor session.
 * The response returns structured data including timestamps for session
 * creation and updates, with nullable deleted_at indicating active or closed
 * sessions.
 *
 * Errors include 404 when no matching session is found, or 403 if the user
 * lacks permission.
 *
 * @param props.connection
 * @param props.pageId Unique identifier of the UI page the editor session
 *   belongs to
 * @param props.pageEditorId Unique identifier of the page editor session to
 *   retrieve
 * @path /flexOffice/editor/pages/:pageId/pageEditors/:pageEditorId
 * @accessor api.functional.flexOffice.editor.pages.pageEditors.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the UI page the editor session belongs to */
    pageId: string & tags.Format<"uuid">;

    /** Unique identifier of the page editor session to retrieve */
    pageEditorId: string & tags.Format<"uuid">;
  };
  export type Response = IFlexOfficePageEditor;

  export const METADATA = {
    method: "GET",
    path: "/flexOffice/editor/pages/:pageId/pageEditors/:pageEditorId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/editor/pages/${encodeURIComponent(props.pageId ?? "null")}/pageEditors/${encodeURIComponent(props.pageEditorId ?? "null")}`;
  export const random = (): IFlexOfficePageEditor =>
    typia.random<IFlexOfficePageEditor>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("pageId")(() => typia.assert(props.pageId));
      assert.param("pageEditorId")(() => typia.assert(props.pageEditorId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update page editor session details.
 *
 * Update an existing page editor session by page ID and page editor ID.
 *
 * This allows modification of session metadata such as timestamps and soft
 * deletion state.
 *
 * Clients must provide updated session information adhering to the expected
 * schema.
 *
 * Authorization roles required are editor and admin.
 *
 * @param props.connection
 * @param props.pageId Unique identifier of the UI page the editor session
 *   belongs to
 * @param props.pageEditorId Unique identifier of the page editor session to
 *   update
 * @param props.body Updated information for the page editor session
 * @path /flexOffice/editor/pages/:pageId/pageEditors/:pageEditorId
 * @accessor api.functional.flexOffice.editor.pages.pageEditors.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the UI page the editor session belongs to */
    pageId: string & tags.Format<"uuid">;

    /** Unique identifier of the page editor session to update */
    pageEditorId: string & tags.Format<"uuid">;

    /** Updated information for the page editor session */
    body: IFlexOfficePageEditor.IUpdate;
  };
  export type Body = IFlexOfficePageEditor.IUpdate;
  export type Response = IFlexOfficePageEditor;

  export const METADATA = {
    method: "PUT",
    path: "/flexOffice/editor/pages/:pageId/pageEditors/:pageEditorId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/editor/pages/${encodeURIComponent(props.pageId ?? "null")}/pageEditors/${encodeURIComponent(props.pageEditorId ?? "null")}`;
  export const random = (): IFlexOfficePageEditor =>
    typia.random<IFlexOfficePageEditor>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("pageId")(() => typia.assert(props.pageId));
      assert.param("pageEditorId")(() => typia.assert(props.pageEditorId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete (soft) a page editor session.
 *
 * Soft-delete a page editor session by page ID and page editor ID.
 *
 * Marks the session as deleted but retains it for audit purposes.
 *
 * Ensures that collaborative editing session counts remain correct by tracking
 * active sessions.
 *
 * Authorization required for editor or admin roles.
 *
 * @param props.connection
 * @param props.pageId Unique identifier of the UI page the editor session
 *   belongs to
 * @param props.pageEditorId Unique identifier of the page editor session to
 *   delete
 * @path /flexOffice/editor/pages/:pageId/pageEditors/:pageEditorId
 * @accessor api.functional.flexOffice.editor.pages.pageEditors.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the UI page the editor session belongs to */
    pageId: string & tags.Format<"uuid">;

    /** Unique identifier of the page editor session to delete */
    pageEditorId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/flexOffice/editor/pages/:pageId/pageEditors/:pageEditorId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/editor/pages/${encodeURIComponent(props.pageId ?? "null")}/pageEditors/${encodeURIComponent(props.pageEditorId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("pageId")(() => typia.assert(props.pageId));
      assert.param("pageEditorId")(() => typia.assert(props.pageEditorId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
