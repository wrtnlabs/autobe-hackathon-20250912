import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IFlexOfficeEditConflict } from "../../../../../structures/IFlexOfficeEditConflict";
import { IPageIFlexOfficeEditConflict } from "../../../../../structures/IPageIFlexOfficeEditConflict";

/**
 * Search and retrieve a paginated list of edit conflicts for a UI page.
 *
 * Retrieve a filtered and paginated list of edit conflicts for a specified UI
 * page in the FlexOffice system. The operation enables administrators and
 * editors to monitor conflicts arising during concurrent editing sessions. It
 * supports filtering by conflict attributes and pagination for scalability.
 *
 * Access is restricted to authenticated users with appropriate permissions,
 * typically Editor or Admin roles. The returned data includes conflict details
 * such as editor ID, page ID, conflicting change data, and timestamps to inform
 * collaboration workflows. Pagination ensures efficient network usage and
 * client rendering.
 *
 * This operation accesses the flex_office_edit_conflicts table which records
 * each conflict as a JSON-encoded data snapshot linked to a page and an editor.
 * The data field "conflict_data" captures the nature of the conflicting edits.
 * Retrieval allows review and analysis to guide conflict resolution
 * strategies.
 *
 * The API supports concurrency scenarios and helps maintain data consistency by
 * providing auditability and conflict tracking in collaboration environments.
 * Error handling includes validation of the pageId path parameter and
 * appropriate access control enforcement.
 *
 * @param props.connection
 * @param props.pageId Unique identifier of the target UI page
 * @param props.body Search criteria and pagination parameters for filtering
 *   edit conflicts
 * @path /flexOffice/editor/pages/:pageId/editConflicts
 * @accessor api.functional.flexOffice.editor.pages.editConflicts.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the target UI page */
    pageId: string & tags.Format<"uuid">;

    /**
     * Search criteria and pagination parameters for filtering edit
     * conflicts
     */
    body: IFlexOfficeEditConflict.IRequest;
  };
  export type Body = IFlexOfficeEditConflict.IRequest;
  export type Response = IPageIFlexOfficeEditConflict;

  export const METADATA = {
    method: "PATCH",
    path: "/flexOffice/editor/pages/:pageId/editConflicts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/flexOffice/editor/pages/${encodeURIComponent(props.pageId ?? "null")}/editConflicts`;
  export const random = (): IPageIFlexOfficeEditConflict =>
    typia.random<IPageIFlexOfficeEditConflict>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("pageId")(() => typia.assert(props.pageId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific edit conflict by ID for a UI page.
 *
 * Retrieve detailed information of a specific edit conflict record by its ID
 * and associated UI page ID. This API operation allows admins and editors to
 * inspect conflict data to resolve collaboration issues effectively.
 *
 * Access control ensures only users with suitable roles (Admin or Editor) can
 * view conflict details. The response includes all conflict record fields
 * stored in the database, aiding in audit trails and user support scenarios.
 *
 * Appropriate parameter validation and error handling ensure robust operation
 * in distributed multi-user editing environments.
 *
 * @param props.connection
 * @param props.pageId Unique identifier of the target UI page
 * @param props.editConflictId Unique identifier of the target edit conflict
 *   record
 * @path /flexOffice/editor/pages/:pageId/editConflicts/:editConflictId
 * @accessor api.functional.flexOffice.editor.pages.editConflicts.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target UI page */
    pageId: string & tags.Format<"uuid">;

    /** Unique identifier of the target edit conflict record */
    editConflictId: string & tags.Format<"uuid">;
  };
  export type Response = IFlexOfficeEditConflict;

  export const METADATA = {
    method: "GET",
    path: "/flexOffice/editor/pages/:pageId/editConflicts/:editConflictId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/flexOffice/editor/pages/${encodeURIComponent(props.pageId ?? "null")}/editConflicts/${encodeURIComponent(props.editConflictId ?? "null")}`;
  export const random = (): IFlexOfficeEditConflict =>
    typia.random<IFlexOfficeEditConflict>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("pageId")(() => typia.assert(props.pageId));
      assert.param("editConflictId")(() => typia.assert(props.editConflictId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
