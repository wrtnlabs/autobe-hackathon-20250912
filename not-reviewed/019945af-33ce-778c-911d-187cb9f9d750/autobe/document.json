{"operations":[{"specification":"This API operation allows administrators to register a new admin account within the FlexOffice system. It creates a new administrator user record in the `flex_office_admins` table, storing unique email and securely hashed password fields as required by system security policies. Upon successful registration, initial JWT tokens (access and refresh tokens) for session management are issued to establish authenticated sessions. \n\nThe creation process validates email uniqueness and password security. The operation supports public access for registration.\n\nThis operation aligns with FlexOffice security requirements where admins have full control, necessitating secure credential handling and strict account creation.\n\nRelated operations include login and refresh to maintain secure authenticated sessions.","authorizationType":"join","description":"Register a new FlexOffice admin by creating an account with unique email and password. The system stores password hashes and issues JWT tokens upon successful join for secure session management.\n\nReferences the `flex_office_admins` table, leveraging fields: `email`, `password_hash`, `created_at`, and `updated_at`.\n\nThis operation is open to public access for initial registration but will require approval and role assignment for proper admin provisioning.\n\nEnsure secure handling of credentials and validation of unique emails to prevent duplicates.\n\nRelated operations include login to authenticate and refresh to renew tokens.","summary":"Create a new admin account in the flex_office_admins table.","parameters":[],"requestBody":{"description":"Details for creating a new admin account.","typeName":"IFlexOfficeAdmin.ICreate"},"responseBody":{"description":"Newly created admin authorized session details.","typeName":"IFlexOfficeAdmin.IAuthorized"},"authorizationRole":"admin","name":"join","path":"/auth/admin/join","method":"post"},{"specification":"Authenticate an administrator in the FlexOffice system using email and password credentials stored in the `flex_office_admins` table. Upon successful authentication, the system issues JWT access and refresh tokens for session management.\n\nAuthentication involves verifying the provided email against the unique email field and validating the hashed password. Successful login grants access to all administrative features and modules in the platform.\n\nSecurity practices include encrypted transport, limited login attempts, and session token expiry management.\n\nCommonly used with join (registration) and refresh operations to maintain secure authenticated sessions.","authorizationType":"login","description":"Log in as a FlexOffice admin user providing valid email and password. The system verifies credentials stored in `flex_office_admins` table and issues JWT tokens upon success.\n\nReferences: `email`, `password_hash`, `created_at`, `updated_at` fields for authentication flow.\n\nSecurity best practices apply for credential transmission and token issuance.\n\nTypically paired with join for user registration and refresh for session token renewal.","summary":"Authenticate an admin user and obtain JWT tokens.","parameters":[],"requestBody":{"description":"Admin login credentials.","typeName":"IFlexOfficeAdmin.ILogin"},"responseBody":{"description":"Authorized admin session information with tokens.","typeName":"IFlexOfficeAdmin.IAuthorized"},"authorizationRole":"admin","name":"login","path":"/auth/admin/login","method":"post"},{"specification":"Refresh JWT access and refresh tokens for an authenticated admin user in FlexOffice using a valid refresh token. This operation maintains ongoing secure sessions by issuing new tokens as old ones expire.\n\nThe operation verifies the validity of the provided refresh token linked to the admin user in the `flex_office_admins` table. Upon successful validation, new access and refresh tokens are generated and returned.\n\nThis operation is restricted to authenticated admins holding valid refresh tokens.\n\nRelated operations include initial login and join (registration) to establish accounts and sessions.","authorizationType":"refresh","description":"Refresh JWT tokens for an authenticated FlexOffice admin user to maintain session integrity.\n\nRequires a valid refresh token linked to the admin in the `flex_office_admins` table.\n\nEnsures continuous access while enforcing security policies for token expiration and renewal.\n\nTypically used alongside login and join endpoints.","summary":"Renew access and refresh tokens for an admin user.","parameters":[],"requestBody":{"description":"Refresh token request body.","typeName":"IFlexOfficeAdmin.IRefresh"},"responseBody":{"description":"Newly issued authorized tokens for admin user.","typeName":"IFlexOfficeAdmin.IAuthorized"},"authorizationRole":"admin","name":"refresh","path":"/auth/admin/refresh","method":"post"},{"specification":"Authentication operation for Editor user registration (join). This API creates a new editor user account, storing email and password hash securely, and returns initial JWT tokens to authorize the user session. Corresponds to flex_office_editors table, using fields email and password_hash for credential validation and account creation. Includes standard audit fields like created_at and updated_at, but these are managed internally and not in API input. This public operation accepts user's registration info and issues authorization tokens. Ensures email uniqueness and secure password handling. This supports member kind role that requires full registration plus login and token management.","authorizationType":"join","description":"The /auth/editor/join endpoint enables registration of a new Editor user account in the FlexOffice system, referencing flex_office_editors table schema. It accepts editor's email and password hash, which are stored securely according to the schema fields 'email' and 'password_hash'. Upon successful creation, the API issues JWT tokens that include the user's role and permissions.\n\nThis operation is public and allows new member-kind users to create their account. It strictly enforces unique email constraint as defined in the database schema and hashes passwords prior to storage.\n\nSecurity measures include validation of email format and password strength.\n\nRelated operations include /auth/editor/login and /auth/editor/refresh for session management.\n\nErrors include duplicate email (409) and validation errors (400).","summary":"Register a new Editor user and issue authorization tokens, using flex_office_editors table","parameters":[],"requestBody":{"description":"Editor registration input including email and password hash","typeName":"IFlexOfficeEditor.ICreate"},"responseBody":{"description":"Authorized Editor user session tokens","typeName":"IFlexOfficeEditor.IAuthorized"},"authorizationRole":"editor","name":"join","path":"/auth/editor/join","method":"post"},{"specification":"Authentication operation for Editor user login. Validates credentials against flex_office_editors table fields 'email' and 'password_hash' (hashed). On success, issues JWT authorization tokens embedding user role and permissions. Supports member kind role authentication flow. Endpoint is public and allows existing editors to login securely using email and password. Ensures password hash comparison with secure authentication mechanisms.\n\nRelated operations: /auth/editor/join for registration and /auth/editor/refresh for token renewal.","authorizationType":"login","description":"The /auth/editor/login endpoint authenticates Editor users by verifying credentials against the flex_office_editors table schema, specifically using the 'email' and 'password_hash' fields. Successful authentication returns JWT tokens authorizing the user with appropriate role and permissions.\n\nThis operation is open to existing member-kind users and requires submission of valid email and password hash.\n\nSecurity best practices include secure password comparison and prevention of timing attacks.\n\nComplementary operations are /auth/editor/join and /auth/editor/refresh.\n\nFailed attempts result in 401 Unauthorized responses.","summary":"Authenticate existing Editor user and issue authorization tokens, using flex_office_editors table","parameters":[],"requestBody":{"description":"Editor login input with email and password hash","typeName":"IFlexOfficeEditor.ILogin"},"responseBody":{"description":"Authorized Editor user session tokens","typeName":"IFlexOfficeEditor.IAuthorized"},"authorizationRole":"editor","name":"login","path":"/auth/editor/login","method":"post"},{"specification":"Token refresh operation for Editor users. Allows renewal of JWT access tokens using a valid refresh token. Works with member kind role users. Validates the incoming refresh token, issues new access and refresh tokens embedding the user's editor role and permissions. This endpoint is secured and requires valid refresh token, but is indispensable in JWT-based session management.","authorizationType":"refresh","description":"The /auth/editor/refresh endpoint allows Editor users to refresh their JWT access tokens using a valid refresh token. It validates the token against the system, then issues new access and refresh tokens retaining the editor role and permissions.\n\nThis ensures seamless session continuation without re-authentication. It is part of the member kind user's authentication lifecycle.\n\nSecurity considerations include refresh token revocation checking and token expiry validation.\n\nRelated operations are /auth/editor/join and /auth/editor/login.\n\nUnauthorized or invalid tokens result in 401 responses.","summary":"Refresh JWT tokens for Editor user sessions with valid refresh token","parameters":[],"requestBody":{"description":"Refresh token input for Editor user session renewal","typeName":"IFlexOfficeEditor.IRefresh"},"responseBody":{"description":"New authorized Editor user session tokens","typeName":"IFlexOfficeEditor.IAuthorized"},"authorizationRole":"editor","name":"refresh","path":"/auth/editor/refresh","method":"post"},{"specification":"This operation allows a member-role user, specifically a viewer in the FlexOffice system, to register an account by providing necessary credentials and information. It is based on the 'flex_office_viewers' table which stores viewers with fields like id (UUID), name, email, and password_hash, along with timestamps for creation and update, and support for soft deletion via 'deleted_at'. The join operation creates a new viewer record and issues initial JWT tokens for authentication using the 'viewer' role's registration process.\n\nThe API endpoint is public, requiring no prior authentication. The response returns an authorization object that includes JWT tokens indicating successful account creation and access rights.\n\nThis registration operation is critical for allowing new viewers to access the system with read-only permissions as defined by the role's business logic.","authorizationType":"join","description":"This join API operation is designed for the viewer role in FlexOffice representing authenticated users with read-only access. The operation references the 'flex_office_viewers' schema for account creation.\n\nIt expects the client to submit user registration data necessary for creating a viewer profile, including the user's name, email, and authentication credentials (e.g., password).\n\nUpon successful registration, the API issues JWT tokens that embed the viewer role information and allow session management. The soft delete feature is maintained by 'deleted_at'.\n\nSecurity considerations include hashing and securely storing passwords using 'password_hash'.\n\nRelated operations include login (authentication) and refresh (token renewal), which must be used in conjunction for complete session management.","summary":"Join operation for flexOffice viewer role creating new viewer accounts and issuing JWT tokens.","parameters":[],"requestBody":{"description":"Viewer creation info for registration, excluding sensitive tokens.","typeName":"IFlexOfficeViewer.ICreate"},"responseBody":{"description":"Authorized viewer login result including JWT tokens.","typeName":"IFlexOfficeViewer.IAuthorized"},"authorizationRole":"viewer","name":"join","path":"/auth/viewer/join","method":"post"},{"specification":"This operation authenticates a member-role user, specifically a viewer user in the FlexOffice system, by validating submitted login credentials. It leverages the 'flex_office_viewers' table for user identification and authentication.\n\nThe API endpoint is public, allowing users to log in and obtain JWT tokens upon successful authentication. The response contains a structured authorization object with access and refresh tokens embedding viewer role permissions.\n\nThis login operation is essential for enabling registered viewers to prove identity and access the system.\n\nSecurity best practices include verifying password hashes securely and preventing unauthorized access.\n\nThis operation works closely with join (registration) and refresh (token renewal) operations for full authentication lifecycle.","authorizationType":"login","description":"Login operation for viewers authenticating credentials and issuing access JWT tokens.\n\nUsers provide credentials like email and password. On success, JWT tokens are returned embedding viewer permissions for session control.\n\nSecurity considerations include password hash verification and mitigation of authentication attacks.\n\nRefresh operations are complementary to renew access tokens securely.\n\nThe viewer table 'flex_office_viewers' stores user credentials and role data.","summary":"Login operation for flexOffice viewer role authenticating users and issuing JWT access tokens.","parameters":[],"requestBody":{"description":"Viewer login credentials required for authentication.","typeName":"IFlexOfficeViewer.ILogin"},"responseBody":{"description":"Authorized viewer login result including JWT tokens.","typeName":"IFlexOfficeViewer.IAuthorized"},"authorizationRole":"viewer","name":"login","path":"/auth/viewer/login","method":"post"},{"specification":"This operation allows a member-role viewer user to refresh their JWT access tokens using a valid refresh token.\n\nIt accesses the 'flex_office_viewers' table to validate the refresh token and issue new access tokens without requiring re-authentication with credentials.\n\nThe API endpoint requires the refresh token and grants new JWT tokens embedding the viewer role claims, thus maintaining secure session continuity.\n\nSecurity practices include validating refresh token integrity and expiration. This operation complements join (registration) and login (authentication) operations as part of the token lifecycle management.\n\nUpdate of tokens follows the role's permissions and claims defined in the 'flex_office_viewers' schema.","authorizationType":"refresh","description":"Refresh JWT tokens operation for flexOffice viewer role renewing access without full login.\n\nEnsures continued authenticated sessions with valid viewer permissions.\n\nThis operation requires a valid refresh token and securely issues new tokens.\n\nWorks closely with login and join operations in token lifecycle.","summary":"Refresh JWT tokens for flexOffice viewer role maintaining session continuity.","parameters":[],"requestBody":{"description":"Refresh token request data.","typeName":"IFlexOfficeViewer.IRefresh"},"responseBody":{"description":"New JWT tokens after refresh.","typeName":"IFlexOfficeViewer.IAuthorized"},"authorizationRole":"viewer","name":"refresh","path":"/auth/viewer/refresh","method":"post"},{"specification":"This operation retrieves a paginated list of system settings configurations for the FlexOffice platform. It operates on the flex_office_system_settings table, supporting filtering and pagination to allow clients to query configuration keys, values, and descriptions with timestamps for creation and updates. This endpoint is designed for administrative interface needs where system parameters are managed or queried.","description":"Retrieve a filtered and paginated list of FlexOffice system settings from the database. This operation supports advanced query parameters to filter by configuration key or other properties.\n\nThe flex_office_system_settings table contains global system parameters and feature toggles crucial for system behavior, managed by administrators.\n\nSecurity considerations: access is typically restricted to system administrators only to prevent unauthorized changes to critical system settings.\n\nThis operation returns system settings summaries optimized for list displays to aid in quick configuration reviews.\n\nPagination and sorting parameters enable efficient browsing through potentially numerous configuration entries.","summary":"Retrieve a filtered, paginated list of FlexOffice system settings","parameters":[],"requestBody":{"description":"Filter and pagination criteria for system settings search","typeName":"IFlexOfficeSystemSettings.IRequest"},"responseBody":{"description":"Paginated list of system settings summaries","typeName":"IPageIFlexOfficeSystemSettings.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/flexOffice/admin/systemSettings","method":"patch"},{"specification":"This operation retrieves detailed information about a specific FlexOffice system setting identified by its ID. It accesses the flex_office_system_settings table to fetch configuration key, value, description, and timestamps.\n\nOnly authorized administrative users can view system settings detail to ensure configuration confidentiality and prevent unauthorized access.\n\nThe response returns full detailed system setting record corresponding to the requested ID.","description":"Get detailed information for a specific FlexOffice system setting identified by its unique ID.\n\nThis entity represents global configuration items crucial for system operation and management.\n\nAccess restricted to admin users for security.\n\nReturns a detailed object including key, value, description, and timestamps for creation and update.","summary":"Retrieve detailed information of a FlexOffice system setting by ID","parameters":[{"name":"id","description":"Unique identifier of the system setting","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed system setting information","typeName":"IFlexOfficeSystemSettings"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/flexOffice/admin/systemSettings/{id}","method":"get"},{"specification":"This operation creates a new FlexOffice system setting entry in the database. It inserts details such as the unique key, optional value, and configuration description. Creation operations require strict validation on the uniqueness of the configuration key.\n\nAccess control restricts this operation to admin users to prevent unauthorized system modifications.\n\nUpon successful creation, the new system setting record including timestamps is returned.","description":"Create a new FlexOffice system setting record.\n\nThe system setting represents a global configuration parameter.\n\nAdmin role required.\n\nThe submitted data must include a unique key and can optionally contain a value and description.\n\nThe system will return the newly created setting including its generated ID and timestamps.","summary":"Create a new FlexOffice system setting configuration","parameters":[],"requestBody":{"description":"System setting creation data","typeName":"IFlexOfficeSystemSettings.ICreate"},"responseBody":{"description":"Newly created system setting data","typeName":"IFlexOfficeSystemSettings"},"authorizationType":null,"authorizationRole":"admin","name":"create","path":"/flexOffice/admin/systemSettings","method":"post"},{"specification":"This operation updates an existing FlexOffice system setting identified by its ID. It allows modifications to the key (subject to uniqueness), value, and description. Update operations enforce validation to maintain system integrity and prevent conflicting configuration keys.\n\nAdmin-level authorization is required to perform updates.\n\nThe response contains the updated system setting record reflecting the changes and update timestamp.","description":"Update an existing FlexOffice system setting identified by ID.\n\nAllows modifying configuration key, value, and description.\n\nAdmin permissions required.\n\nReturns updated system setting with the latest data and timestamps.","summary":"Update an existing FlexOffice system setting by ID","parameters":[{"name":"id","description":"Unique identifier of the system setting to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the system setting","typeName":"IFlexOfficeSystemSettings.IUpdate"},"responseBody":{"description":"Updated system setting data","typeName":"IFlexOfficeSystemSettings"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/flexOffice/admin/systemSettings/{id}","method":"put"},{"specification":"This operation deletes a single flex_office_system_settings record from the database by its unique ID. The flex_office_system_settings table stores global system configuration settings including key-value pairs and descriptive metadata. Deleting such a record permanently removes that configuration setting from the system, which is typically an administrative task reserved for system administrators. The deletion is a hard delete without soft deletion as per the Prisma schema. Proper authorization ensures only admins can perform this operation.","path":"/flexOffice/admin/systemSettings/{id}","method":"delete","summary":"Delete a system configuration setting by ID","description":"This DELETE operation removes a specific system configuration setting identified by its unique ID from the FlexOffice backend database. The operation impacts the flex_office_system_settings table which maintains key-value pairs representing global system parameters.\n\nOnly users with administrative privileges should be authorized to perform this deletion to prevent accidental or malicious removal of crucial system settings. The deletion is permanent and cleans the record entirely from the database.\n\nNo request body is needed since deletion is by resource ID path parameter.\n\nSuccessful execution returns a success status without a response body. Any errors (such as if the ID is not found) should be handled gracefully by the backend with appropriate HTTP error codes.\n\nThis operation requires a path parameter specifying the target system configuration setting ID as a UUID string.","parameters":[{"name":"id","in":"path","description":"Unique identifier of the system setting to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"eraseSystemSetting"},{"specification":"This operation retrieves a paginated list of flex_office_themes records with filtering, sorting, and pagination capabilities. The flex_office_themes table holds theme entities used for UI/Page Builder customization, including theme names and CSS content. The operation supports complex queries to filter themes by name or creation date, enabling administrators and other authorized users to efficiently browse and manage themes.\n\nThe operation returns paginated summaries of theme entities optimized for list displays. It allows optional search criteria and pagination parameters in the request body.\n\nTypical users include Admin and Editor roles authorized to manage UI themes. This operation does not require any path parameters but expects a JSON request body specifying search and paging options.","path":"/flexOffice/admin/themes","method":"patch","summary":"Search and paginate UI themes","description":"Retrieve a filtered, sorted, and paginated list of UI/Page Builder themes stored in the FlexOffice system. The operation accesses the flex_office_themes table which contains theming information represented by theme names and CSS content.\n\nThis PATCH endpoint accepts search criteria such as name filters and supports pagination fields like page number and size. The response contains a paginated collection of theme summary information optimizing data transfer and UI rendering.\n\nAuthorized users typically include Admins and Editors who can view, create, and manage themes in the system. Users can utilize this operation to find existing themes quickly and support UI customization workflows.\n\nThe response contains only summary data rather than full theme details to ensure efficiency.","parameters":[],"requestBody":{"description":"Filter and pagination parameters for searching themes","typeName":"IFlexOfficeTheme.IRequest"},"responseBody":{"description":"Paginated summaries of UI themes matching the filters","typeName":"IPageIFlexOfficeTheme.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"searchThemes"},{"specification":"This operation retrieves a paginated list of flex_office_themes records with filtering, sorting, and pagination capabilities. The flex_office_themes table holds theme entities used for UI/Page Builder customization, including theme names and CSS content. The operation supports complex queries to filter themes by name or creation date, enabling administrators and other authorized users to efficiently browse and manage themes.\n\nThe operation returns paginated summaries of theme entities optimized for list displays. It allows optional search criteria and pagination parameters in the request body.\n\nTypical users include Admin and Editor roles authorized to manage UI themes. This operation does not require any path parameters but expects a JSON request body specifying search and paging options.","path":"/flexOffice/editor/themes","method":"patch","summary":"Search and paginate UI themes","description":"Retrieve a filtered, sorted, and paginated list of UI/Page Builder themes stored in the FlexOffice system. The operation accesses the flex_office_themes table which contains theming information represented by theme names and CSS content.\n\nThis PATCH endpoint accepts search criteria such as name filters and supports pagination fields like page number and size. The response contains a paginated collection of theme summary information optimizing data transfer and UI rendering.\n\nAuthorized users typically include Admins and Editors who can view, create, and manage themes in the system. Users can utilize this operation to find existing themes quickly and support UI customization workflows.\n\nThe response contains only summary data rather than full theme details to ensure efficiency.","parameters":[],"requestBody":{"description":"Filter and pagination parameters for searching themes","typeName":"IFlexOfficeTheme.IRequest"},"responseBody":{"description":"Paginated summaries of UI themes matching the filters","typeName":"IPageIFlexOfficeTheme.ISummary"},"authorizationType":null,"authorizationRole":"editor","name":"searchThemes"},{"specification":"This operation retrieves detailed information for a single UI/Page Builder theme from the flex_office_themes table by its unique ID. Themes define visual styles and CSS applied globally or per page. Authorization ensures only Admin and Editor users can access detailed theme configurations.\n\nThe operation requires a path parameter for the theme ID and returns the complete theme record including id, name, css, created_at, and updated_at timestamps. Successful response contains the full IFlexOfficeTheme entity as defined in the DTO schemas.","path":"/flexOffice/admin/themes/{id}","method":"get","summary":"Get a UI theme by ID","description":"Retrieve detailed information about a specific UI/Page Builder theme identified by its unique ID. Themes store CSS content and metadata for consistent UI appearance.\n\nThis GET operation fetches all fields of the theme entity from the flex_office_themes table in the database.\n\nAuthorized users with Admin or Editor roles can access this endpoint to view or manage theme details.\n\nIf the ID is invalid or the theme does not exist, an appropriate HTTP error response is returned.\n\nThe request requires a single path parameter specifying the UUID of the theme.","parameters":[{"name":"id","in":"path","description":"Unique identifier of the UI theme","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed UI theme information","typeName":"IFlexOfficeTheme"},"authorizationType":null,"authorizationRole":"admin","name":"atTheme"},{"specification":"This operation retrieves detailed information for a single UI/Page Builder theme from the flex_office_themes table by its unique ID. Themes define visual styles and CSS applied globally or per page. Authorization ensures only Admin and Editor users can access detailed theme configurations.\n\nThe operation requires a path parameter for the theme ID and returns the complete theme record including id, name, css, created_at, and updated_at timestamps. Successful response contains the full IFlexOfficeTheme entity as defined in the DTO schemas.","path":"/flexOffice/editor/themes/{id}","method":"get","summary":"Get a UI theme by ID","description":"Retrieve detailed information about a specific UI/Page Builder theme identified by its unique ID. Themes store CSS content and metadata for consistent UI appearance.\n\nThis GET operation fetches all fields of the theme entity from the flex_office_themes table in the database.\n\nAuthorized users with Admin or Editor roles can access this endpoint to view or manage theme details.\n\nIf the ID is invalid or the theme does not exist, an appropriate HTTP error response is returned.\n\nThe request requires a single path parameter specifying the UUID of the theme.","parameters":[{"name":"id","in":"path","description":"Unique identifier of the UI theme","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed UI theme information","typeName":"IFlexOfficeTheme"},"authorizationType":null,"authorizationRole":"editor","name":"atTheme"},{"specification":"This operation creates a new UI/Page Builder theme in the flex_office_themes table. Themes define CSS and styling information for UI customization. The operation requires a JSON request body containing the theme creation details including name and optional CSS content.\n\nOnly Admin and Editor roles are authorized to create new themes. On success, the created theme record is returned including its generated unique ID and timestamp fields.\n\nThe operation does not allow manual specification of created_at or updated_at timestamps, which are managed automatically by the database.","path":"/flexOffice/admin/themes","method":"post","summary":"Create a new UI theme","description":"Create a new UI/Page Builder theme by providing name and optional CSS content. The operation inserts a new record into the flex_office_themes table.\n\nInput validation ensures the name is unique and CSS content is valid text.\n\nUpon successful creation, the response returns the full newly created theme including ID and timestamps.\n\nAuthorized users include Admins and Editors who manage UI customization.\n\nRequest requires a JSON request body specifying theme creation fields defined in the IFlexOfficeTheme.ICreate DTO.","parameters":[],"requestBody":{"description":"Theme creation data including name and CSS","typeName":"IFlexOfficeTheme.ICreate"},"responseBody":{"description":"Created UI theme information","typeName":"IFlexOfficeTheme"},"authorizationType":null,"authorizationRole":"admin","name":"createTheme"},{"specification":"This operation creates a new UI/Page Builder theme in the flex_office_themes table. Themes define CSS and styling information for UI customization. The operation requires a JSON request body containing the theme creation details including name and optional CSS content.\n\nOnly Admin and Editor roles are authorized to create new themes. On success, the created theme record is returned including its generated unique ID and timestamp fields.\n\nThe operation does not allow manual specification of created_at or updated_at timestamps, which are managed automatically by the database.","path":"/flexOffice/editor/themes","method":"post","summary":"Create a new UI theme","description":"Create a new UI/Page Builder theme by providing name and optional CSS content. The operation inserts a new record into the flex_office_themes table.\n\nInput validation ensures the name is unique and CSS content is valid text.\n\nUpon successful creation, the response returns the full newly created theme including ID and timestamps.\n\nAuthorized users include Admins and Editors who manage UI customization.\n\nRequest requires a JSON request body specifying theme creation fields defined in the IFlexOfficeTheme.ICreate DTO.","parameters":[],"requestBody":{"description":"Theme creation data including name and CSS","typeName":"IFlexOfficeTheme.ICreate"},"responseBody":{"description":"Created UI theme information","typeName":"IFlexOfficeTheme"},"authorizationType":null,"authorizationRole":"editor","name":"createTheme"},{"specification":"This operation updates the details of a specific theme in the FlexOffice system. It operates on the flex_office_themes table from the Prisma schema. It allows modification of the theme's name and CSS content. The input requires the theme identifier as a path parameter and the update request body containing the new data. The operation returns the updated theme information, including timestamps for creation and last update. This update must be performed by authorized users with appropriate roles.","description":"Update the details of a theme, including its name and CSS styles. This operation modifies the theme record identified by the given id path parameter. The request body allows changing the name, description, and CSS properties of the theme.\n\nSecurity considerations:\nOnly authorized roles can perform this update to prevent unauthorized visual changes.\n\nRelationships:\nThe theme is referenced by UI pages, so updates may affect page appearances.\n\nValidation:\nThe theme name must remain unique and the CSS content should be valid CSS text.\n\nRelated APIs:\n- GET /themes/{id} to retrieve theme details\n- DELETE /themes/{id} to remove a theme\n\nExpected behavior:\nThe updated theme record is returned with accurate timestamps.\nErrors are raised if the theme id does not exist or on validation failures.","summary":"Update details of a theme by ID in flex_office_themes","parameters":[{"name":"id","description":"Unique identifier of the target theme","schema":{"type":"string","format":"uuid"},"in":"path"}],"requestBody":{"description":"Update data for the theme","typeName":"IFlexOfficeTheme.IUpdate"},"responseBody":{"description":"Updated theme information","typeName":"IFlexOfficeTheme"},"authorizationType":null,"authorizationRole":"admin","name":"updateTheme","path":"/flexOffice/admin/themes/{id}","method":"put"},{"specification":"This operation updates the details of a specific theme in the FlexOffice system. It operates on the flex_office_themes table from the Prisma schema. It allows modification of the theme's name and CSS content. The input requires the theme identifier as a path parameter and the update request body containing the new data. The operation returns the updated theme information, including timestamps for creation and last update. This update must be performed by authorized users with appropriate roles.","description":"Update the details of a theme, including its name and CSS styles. This operation modifies the theme record identified by the given id path parameter. The request body allows changing the name, description, and CSS properties of the theme.\n\nSecurity considerations:\nOnly authorized roles can perform this update to prevent unauthorized visual changes.\n\nRelationships:\nThe theme is referenced by UI pages, so updates may affect page appearances.\n\nValidation:\nThe theme name must remain unique and the CSS content should be valid CSS text.\n\nRelated APIs:\n- GET /themes/{id} to retrieve theme details\n- DELETE /themes/{id} to remove a theme\n\nExpected behavior:\nThe updated theme record is returned with accurate timestamps.\nErrors are raised if the theme id does not exist or on validation failures.","summary":"Update details of a theme by ID in flex_office_themes","parameters":[{"name":"id","description":"Unique identifier of the target theme","schema":{"type":"string","format":"uuid"},"in":"path"}],"requestBody":{"description":"Update data for the theme","typeName":"IFlexOfficeTheme.IUpdate"},"responseBody":{"description":"Updated theme information","typeName":"IFlexOfficeTheme"},"authorizationType":null,"authorizationRole":"editor","name":"updateTheme","path":"/flexOffice/editor/themes/{id}","method":"put"},{"specification":"This operation permanently removes a theme identified by its unique UUID. It deletes the theme record from the flex_office_themes table. The operation requires administrative or editor authorization roles to perform this destructive action. Upon success, there is no response body returned. This operation does not perform soft delete but permanently deletes the record. It should be used cautiously as deleted themes cannot be restored.","description":"Permanently delete a theme by its unique identifier. This operation removes the theme record from the database completely.\n\nSecurity considerations:\nOnly admins and editors can perform this delete to avoid accidental loss.\n\nRelationship:\nThe theme may be referenced by pages, so deletion should be done carefully, ensuring no pages are broken.\n\nValidation:\nThe theme id must exist; otherwise, an error is returned.\n\nExpected behavior:\nThe theme is removed from the database and cannot be recovered.\nNo content is returned upon success.","summary":"Delete a theme by ID in flex_office_themes","parameters":[{"name":"id","description":"Unique identifier of the target theme","schema":{"type":"string","format":"uuid"},"in":"path"}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"eraseTheme","path":"/flexOffice/admin/themes/{id}","method":"delete"},{"specification":"This operation permanently removes a theme identified by its unique UUID. It deletes the theme record from the flex_office_themes table. The operation requires administrative or editor authorization roles to perform this destructive action. Upon success, there is no response body returned. This operation does not perform soft delete but permanently deletes the record. It should be used cautiously as deleted themes cannot be restored.","description":"Permanently delete a theme by its unique identifier. This operation removes the theme record from the database completely.\n\nSecurity considerations:\nOnly admins and editors can perform this delete to avoid accidental loss.\n\nRelationship:\nThe theme may be referenced by pages, so deletion should be done carefully, ensuring no pages are broken.\n\nValidation:\nThe theme id must exist; otherwise, an error is returned.\n\nExpected behavior:\nThe theme is removed from the database and cannot be recovered.\nNo content is returned upon success.","summary":"Delete a theme by ID in flex_office_themes","parameters":[{"name":"id","description":"Unique identifier of the target theme","schema":{"type":"string","format":"uuid"},"in":"path"}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"editor","name":"eraseTheme","path":"/flexOffice/editor/themes/{id}","method":"delete"},{"specification":"Retrieve a paginated list of administrative users from the flex_office_admins table. Supports filtering, search, sorting, and pagination to browse admin accounts. The operation requires admin role authorization for sensitive data access. The response includes summaries of admin users with key properties such as email and creation date.","description":"Retrieve a filtered, paginated list of administrative user accounts. This operation supports advanced search criteria such as email filtering, date ranges, and sorting preferences.\n\nSecurity:\nOnly users with the admin role are authorized to access this endpoint.\n\nRelationships:\nAdmin users are unique by email and have associated activity logs and role assignments.\n\nValidation:\nSearch parameters are validated for correctness.\n\nExpected behavior:\nReturns paginated summaries of admins according to query criteria.\nErrors are handled gracefully with appropriate status codes and messages.","summary":"List administrative user accounts with pagination and filtering","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for admin filtering","typeName":"IFlexOfficeAdmin.IRequest"},"responseBody":{"description":"Paginated list of administrative user summaries","typeName":"IPageIFlexOfficeAdmin.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"searchAdmins","path":"/flexOffice/admin/admins","method":"patch"},{"specification":"Retrieve detailed information of a specific administrative user by their unique identifier. This operation reads from the flex_office_admins table and returns full details including email, created and updated timestamps. Authorization for this operation is restricted to only admin role users to protect sensitive data.","description":"Get detailed information about a specific admin user by their unique adminId. Returns the admin's email, timestamps, and deletion status if applicable.\n\nSecurity:\nOnly users with admin role can access detailed admin information.\n\nRelationships:\nAdmin users have unique emails and may have linked activity logs and role assignments.\n\nValidation:\nThe adminId must be a valid UUID and exist in the database.\n\nExpected behavior:\nReturns the detailed admin record matching the given id.\nErrors are returned if the id is invalid or not found.","summary":"Get detailed information of an admin user by ID","parameters":[{"name":"adminId","description":"Unique identifier of the admin user","schema":{"type":"string","format":"uuid"},"in":"path"}],"requestBody":null,"responseBody":{"description":"Detailed information of the admin user","typeName":"IFlexOfficeAdmin"},"authorizationType":null,"authorizationRole":"admin","name":"atAdmin","path":"/flexOffice/admin/admins/{adminId}","method":"get"},{"specification":"The API operation targets the flex_office_admins table in the Prisma schema, enabling updates to an existing admin user record identified by adminId. This endpoint allows modification of admin details such as email and password hash while maintaining audit data including timestamps and soft deletion state. The operation ensures admin user credentials remain unique and secured, allowing only authorized edits. It reflects business rules that only active admins are modifiable and supports full overwrite of modifiable fields.","description":"This operation updates an existing Admin user in the FlexOffice system. The admin is uniquely identified by their adminId, a UUID string. The operation accepts updated admin data including email and password hash, which must be unique and securely stored.\n\nSecurity considerations ensure only authorized users can perform admin updates, preserving account integrity.\n\nUnderlying data references the flex_office_admins table with fields for email, password_hash, and audit timestamps. Soft deletion (deleted_at) is tracked but not modified via this endpoint.\n\nValidation rules include ensuring email uniqueness and proper UUID format for the adminId path parameter.\n\nRelated admin management APIs include delete by adminId (this API's complement) and admin creation APIs.\n\nOn success, returns the updated Admin user entity reflecting persisted data.\n\nError handling includes 404 if the adminId does not exist and validation errors for duplicate email or invalid input.","summary":"Update an existing admin user by ID","parameters":[{"name":"adminId","description":"Unique identifier of the admin user to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Admin user update payload","typeName":"IFlexOfficeAdmin.IUpdate"},"responseBody":{"description":"Updated Admin user information","typeName":"IFlexOfficeAdmin"},"authorizationType":null,"authorizationRole":"admin","name":"updateAdmin","path":"/flexOffice/admin/admins/{adminId}","method":"put"},{"specification":"The API operation targets the flex_office_admins table in the Prisma schema, allowing permanent removal of an admin user identified by adminId. This operation performs a hard delete removing the admin record and all associated data, reflecting business policy to exclusively allow full removal of admin users upon request by authorized personnel.\n\nSecurity is critical: only admin role users may perform deletion. Given the lack of soft-delete flags in the operation, deletion is permanent and irreversible.\n\nThis operation links to other admin user management endpoints for full CRUD functionality.\n\nOwners must confirm deletion impacts and handle cascading effects outside this API scope.\n\nNo request body is required, and no response body is returned upon success.","description":"This operation permanently deletes an Admin user from the FlexOffice system identified by adminId, effectively removing all related data. This is a hard delete operation with no soft deletion semantics.\n\nOnly authorized admin users can execute this operation.\n\nThe flex_office_admins database table is directly affected, removing the record where id matches adminId.\n\nCaller must handle irreversibility and audit compliance externally.\n\nOn success, no content is returned.\n\nErrors include 404 if adminId is not found and authorization errors if caller lacks permissions.","summary":"Permanently delete an admin user by ID","parameters":[{"name":"adminId","description":"Unique identifier of the admin user to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"eraseAdmin","path":"/flexOffice/admin/admins/{adminId}","method":"delete"},{"specification":"The API operation targets the flex_office_editors table in the Prisma schema, enabling complex searches and retrieval of editor user accounts. Supports filtering, pagination, sorting, and querying by various attributes such as email, name, and creation date.\n\nPrimarily for administrative use, this operation returns a paginated list of editor summaries optimized for listing and management UI.\n\nEditors can be filtered by status, and pagination parameters control page sizes and offsets. The operation helps admins efficiently manage and audit editors.\n\nNo request body is required, indicating parameters are included via the request body schema.\n\nThe response contains paginated editor summary information consistent with the schema.\n\nAuthorization restricts this endpoint to admin role users to ensure user data confidentiality.","description":"Provides a paginated list of Editor users with advanced filtering and sorting capabilities. This operation enables admin users to search editors by various criteria including email and creation date.\n\nResults return summaries of editor information for efficient management overview without revealing sensitive data.\n\nThis endpoint works with the flex_office_editors table, which tracks users authorized to edit pages.\n\nFiltering parameters include optional fields for page size, sorting rules, search keywords, and date ranges.\n\nSecurity mandates admin role to access the detailed user list.\n\nErrors arise from invalid search parameters or access violations.\n\nPagination ensures manageable response sizes for UI integration.","summary":"Search and retrieve a filtered, paginated list of editor users","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for editor filtering","typeName":"IFlexOfficeEditor.IRequest"},"responseBody":{"description":"Paginated list of editor summary information matching search criteria","typeName":"IPageIFlexOfficeEditor.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"searchEditors","path":"/flexOffice/admin/editors","method":"patch"},{"specification":"The API operation targets the flex_office_editors table in the Prisma schema for retrieving a single editor user by their unique ID. Returns comprehensive editor details including name, email, and audit timestamps while excluding sensitive credentials.\n\nSupports identification via UUID passed as path parameter editorId.\n\nEnsures authorization allows only admin users to retrieve editor details.\n\nReturns 404 if editorId does not exist.\n\nThis forms part of the editor management set alongside searches and creation operations.\n","description":"Retrieves detailed information about a single Editor user identified by editorId. This includes display name, email, and account status.\n\nThis operation reads from the flex_office_editors table.\n\nAdmin role authorization restricts access to details.\n\nErrors include 404 if the editor is not found.\n\nThe response returns full editor profile except sensitive info like password hash.\n\nUseful for admin user management UI.","summary":"Retrieve a specific editor user by ID","parameters":[{"name":"editorId","description":"Unique identifier of the editor user to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed Editor user information","typeName":"IFlexOfficeEditor"},"authorizationType":null,"authorizationRole":"admin","name":"atEditor","path":"/flexOffice/admin/editors/{editorId}","method":"get"},{"specification":"This operation updates an existing editor user's information based on the unique editor ID provided in the path parameter. It allows modification of editable fields of the flex_office_editors table such as name, email, and password hash, following the constraints defined in the Prisma schema. The operation ensures the editor user exists and updates the record atomically while preserving audit fields like created_at and updated_at. Users with administrative privileges are expected to perform this action to maintain editor accounts.","description":"This API operation enables the update of an editor user entity in the FlexOffice system. The editor user in question is identified via the editorId path parameter, which corresponds to the unique ID in the flex_office_editors PostgreSQL table.\n\nUsers with admin role generally have the permissions to update editor details such as name, email, and password hash. The operation validates the input data structure and applies updates to the database while maintaining the integrity of audit fields (created_at, updated_at). Soft deletion handling is not performed here; this operation strictly updates active records.\n\nThis route uses PUT HTTP method aligned to RESTful standards for updating existing resources. It does not include a response body, as the updated entity state can be fetched via a separate GET operation if needed.\n\nParameters include:\n- editorId: UUID string representing the target editor user.\n- requestBody: An object matching IFlexOfficeEditor.IUpdate type containing editable user properties.\n\nThe operation targets the flex_office_editors table in the Prisma schema and requires validation against defined fields. Proper authorization checks for the admin role role are enforced to secure modification privileges.\n\nIn case of errors such as not found or validation failures, appropriate HTTP error codes should be returned.","summary":"Update an existing FlexOffice editor user","parameters":[{"name":"editorId","description":"Unique identifier of the target editor user","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Editable information for updating an editor user","typeName":"IFlexOfficeEditor.IUpdate"},"responseBody":{"description":"Updated editor user information","typeName":"IFlexOfficeEditor"},"authorizationType":null,"authorizationRole":"admin","path":"/flexOffice/admin/editors/{editorId}","method":"put","name":"updateEditor"},{"specification":"This operation permanently deletes (soft deletes) an editor user identified by editorId from the flex_office_editors table in the FlexOffice system. The deletion marks the deleted_at timestamp to indicate account deactivation but preserves historical audit data for compliance. This allows administrative users to deactivate or remove access for editor accounts without physically removing records from the database, supporting auditing and potential recovery. Only users with admin role have permission to perform this deletion.","description":"This API operation performs a soft deletion of a FlexOffice editor user entity. The target editor user is uniquely identified by the editorId path parameter which corresponds to the primary key in the flex_office_editors table.\n\nSoft deletion is implemented by setting the deleted_at timestamp, preventing the editor from accessing the system while retaining the data for audit and recovery purposes.\n\nOnly users with administrative privileges can execute this operation to ensure controlled deactivation of editor accounts. The operation does not require a request body and returns no content upon successful deletion.\n\nStrict authorization checks and validation of the editorId parameter are mandatory to protect against unauthorized or accidental deletions.\n\nThe endpoint is aligned with RESTful DELETE method semantics for soft deletions within the system.\n\nNo response body is returned on success.","summary":"Soft delete a FlexOffice editor user","parameters":[{"name":"editorId","description":"Unique identifier of the target editor user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","path":"/flexOffice/admin/editors/{editorId}","method":"delete","name":"eraseEditor"},{"specification":"This operation retrieves a paginated list of viewer users from the FlexOffice system. It supports advanced filtering and searching capabilities according to the fields defined in the flex_office_viewers table. The response includes summary information with essential viewer properties useful for UI list displays. The operation targets the flex_office_viewers Prisma schema table and supports typical pagination parameters such as page number, page size, and sorting options.","description":"This API operation allows fetching a filtered and paginated list of FlexOffice viewer users. The viewer users correspond to records in the flex_office_viewers table in the PostgreSQL database.\n\nThe request body includes search criteria allowing advanced filtering capabilities such as by name, email, and creation date. Pagination parameters (page number, size) and sorting preferences enable flexible querying suited to UI presentation.\n\nResponses provide viewer summaries, including basic user identification details, flattened into a compact structure optimized for listing.\n\nAuthorization is typically granted to admin users or system managers who oversee viewer accounts. The operation uses HTTP PATCH to accommodate complex search criteria in the request body.\n\nProper validation ensures only authorized access and correct query parameter usage, with error handling for invalid or unauthorized requests.\n\nThis endpoint is crucial for managing viewer accounts within the system.","summary":"Search and retrieve a filtered, paginated list of FlexOffice viewers","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for viewer filtering","typeName":"IFlexOfficeViewer.IRequest"},"responseBody":{"description":"Paginated list of viewer summary information matching search criteria","typeName":"IPageIFlexOfficeViewer.ISummary"},"authorizationType":null,"authorizationRole":"admin","path":"/flexOffice/admin/viewers","method":"patch","name":"searchViewers"},{"specification":"This operation retrieves detailed information for a specific viewer user identified by viewerId. It fetches the record from the flex_office_viewers table and returns full entity details conforming to the FlexOffice viewer user schema. This operation is typically used to view profile details or for administrative user management. Security and authorization privileges usually restrict access to administrators or the viewer themselves.","description":"This API operation fetches complete details of one viewer user by their unique identifier viewerId from the PostgreSQL flex_office_viewers table.\n\nIt returns the full data structure including name, email, password hash, and timestamps for creation, update, and soft deletion status if applicable.\n\nThe GET method designates a retrieval operation returning a singular resource.\n\nAuthorization is enforced to limit access to admin users or authorized viewers themselves to ensure data confidentiality.\n\nValidation of the viewerId parameter is mandatory to prevent injection or unauthorized access.\n\nThe response encapsulates all relevant user information excluding sensitive fields like plain-text passwords.\n\nIf the viewer does not exist, a 404 error is expected.\n\nThis endpoint is critical for managing individual viewer user profiles.","summary":"Retrieve details of a FlexOffice viewer user by ID","parameters":[{"name":"viewerId","description":"Unique identifier of the target viewer user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed viewer user information","typeName":"IFlexOfficeViewer"},"authorizationType":null,"authorizationRole":"admin","path":"/flexOffice/admin/viewers/{viewerId}","method":"get","name":"atViewer"},{"specification":"This operation updates the details of a specific viewer user in the FlexOffice system, represented by the flex_office_viewers table. It allows modification of basic viewer information such as name, email, and password hash. The operation requires the viewer's unique identifier (viewerId) as a path parameter. Only authorized users with the 'viewer' role can perform this update. The request body must conform to IFlexOfficeViewer.IUpdate, and the response is an updated IFlexOfficeViewer object.","description":"Update a viewer user identified by their unique ID in the FlexOffice system. This operation modifies the viewer's personal details such as name, email address, and password hash. Only users authorized with appropriate permissions can perform this update.\n\nThe flex_office_viewers table is used as the data source and includes soft deletion support through the deleted_at timestamp, but updating this field is managed internally and excluded from user modification.\n\nSecurity considerations include verifying the authenticated user's rights to update viewer information. On successful update, the new viewer details are returned.\n\nExpected errors include 404 if the viewer does not exist and 403 if the user lacks update permissions.\n\nNote: This operation performs a full update based on the provided data in IFlexOfficeViewer.IUpdate message format.","summary":"Update a specific FlexOffice viewer user","parameters":[{"name":"viewerId","description":"Target viewer's unique ID","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated viewer information","typeName":"IFlexOfficeViewer.IUpdate"},"responseBody":{"description":"Updated viewer user details","typeName":"IFlexOfficeViewer"},"authorizationType":null,"authorizationRole":"viewer","name":"updateViewer","path":"/flexOffice/viewer/viewers/{viewerId}","method":"put"},{"specification":"This operation deletes a specific viewer user record identified by viewerId from the FlexOffice system database flex_office_viewers. It performs a soft deletion by setting the deleted_at timestamp, preserving the record for audit and recovery. The operation requires the viewer's unique UUID and can only be performed by authorized users with 'viewer' role.\n\nNo request body is required for this delete operation. Successful execution does not return any body content.\n\nAccess control checks ensure only permitted users can delete viewers, and appropriate error handling covers cases of missing or unauthorized deletions.","description":"Perform a soft delete on a FlexOffice viewer user by ID. This marks the user as deleted by setting the deleted_at timestamp while preserving record integrity for auditing purposes.\n\nThe flex_office_viewers table supports soft deletion, and this operation leverages that behavior.\n\nOnly authorized users with role 'viewer' may execute this operation. Attempting to delete a non-existent viewer returns a 404 error.\n\nNo data is returned upon success.\n\nThis soft delete does not physically remove the record from the database.","summary":"Soft delete a FlexOffice viewer user by ID","parameters":[{"name":"viewerId","description":"Target viewer's unique ID","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"viewer","name":"eraseViewer","path":"/flexOffice/viewer/viewers/{viewerId}","method":"delete"},{"specification":"This operation retrieves a paginated list of UI pages from the flex_office_pages table in the FlexOffice system. It supports advanced filtering, searching, and sorting through a complex search payload provided in the request body (IFlexOfficePage.IRequest). Only authorized users with the 'viewer' role can access this data.\n\nThe response returns a paginated collection of page summary objects (IPageIFlexOfficePage.ISummary) including essential page information such as page id, name, status, and timestamps.\n\nBusiness rules include secure filtering to only return accessible pages according to user permissions and status filtering to include active and non-deleted pages.\n\nErrors include proper responses to malformed requests or unauthorized access attempts.\n\nThis PATCH method is used due to the complex nature of search and pagination criteria.","description":"Retrieve a paginated list of UI pages with advanced filtering and searching capabilities. Users can filter pages by name, status, theme, and other attributes.\n\nThis operation queries the flex_office_pages table, returning summaries suitable for displaying in lists.\n\nSecurity measures ensure users only retrieve pages they have permission to view, respecting soft deletion status.\n\nPagination and sorting options allow customized result sets.\n\nThis powerful search endpoint supports complex query criteria in the request body.\n\nTypical use case includes displaying the pages directory with filters applied.","summary":"Search and list UI pages with filtering and pagination","parameters":[],"requestBody":{"description":"Search criteria and pagination params for pages","typeName":"IFlexOfficePage.IRequest"},"responseBody":{"description":"Paginated list of UI page summaries","typeName":"IPageIFlexOfficePage.ISummary"},"authorizationType":null,"authorizationRole":"viewer","name":"searchPages","path":"/flexOffice/viewer/pages","method":"patch"},{"specification":"This operation retrieves detailed information about a specific UI page based on its unique identifier, pageId. The flex_office_pages table serves as the data source. The operation responds with the full detail entity IFlexOfficePage.\n\nIt supports the querying user's authorization checks and returns 404 if the page does not exist or is soft deleted.\n\nThis GET method returns a single page entity, enabling display or editing within the FlexOffice UI/Page Builder context.\n\nSecurity requires authenticated users with the 'viewer' role permission to access the page data.\n\nPath parameter pageId must be a valid UUID identifying the target UI page.","description":"Retrieve detailed information of a UI page by its ID. The response includes all page properties such as name, description, status, theme association, and timestamps.\n\nThe flex_office_pages table supports soft deletion, and deleted pages are not retrievable.\n\nUsers must be authorized to access page details, failing which a 403 error is returned.\n\nThis endpoint supports page editing and viewing in the UI/Page Builder.\n\nAccurate page data is essential for client rendering and manipulation.\n\nThe pageId parameter is required in the path and must be a valid UUID.\n\nErrors returned may include 404 if the page is not found or is deleted.","summary":"Retrieve detailed UI page information by ID","parameters":[{"name":"pageId","description":"Target UI page unique ID","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed UI page entity","typeName":"IFlexOfficePage"},"authorizationType":null,"authorizationRole":"viewer","name":"getPage","path":"/flexOffice/viewer/pages/{pageId}","method":"get"},{"specification":"This operation creates a new UI page in the FlexOffice system, allowing users with appropriate roles to define the page's name, optional description, and assign a theme. The operation corresponds to the flex_office_pages table which stores user-created UI pages. It supports atomic persistence of page layout and configuration. The page status is set upon creation, typically to 'draft' or initial state. The operation verifies input fields including name uniqueness and references to themes. It ensures compliance with user roles (Admin, Editor) that can create pages.","description":"Create a new UI page in FlexOffice with specified properties such as name, description, status, and optional theme reference. The created page is stored in the flex_office_pages table which supports versioning, soft deletion, and status lifecycle management.\n\nAccess control checks ensure that only users with 'admin' or 'editor' roles can perform this operation. The operation validates the uniqueness of the page name to prevent duplicates.\n\nThe operation maintains data integrity with timestamps and supports soft deletion by not setting deleted_at on creation.\n\nRelated operations include updating the page (PUT /pages/{pageId}), deleting a page, and managing widgets on the page, as well as retrieving page versions.\n\nErrors related to conflicts, missing parameters, or authorization will be properly handled.","summary":"Create a new UI page in FlexOffice","parameters":[],"requestBody":{"description":"Information required to create a UI page, including name, description, status and theme association.","typeName":"IFlexOfficePage.ICreate"},"responseBody":{"description":"The created UI page record with details.","typeName":"IFlexOfficePage"},"authorizationType":null,"authorizationRole":"admin","name":"create","path":"/flexOffice/admin/pages","method":"post"},{"specification":"This operation creates a new UI page in the FlexOffice system, allowing users with appropriate roles to define the page's name, optional description, and assign a theme. The operation corresponds to the flex_office_pages table which stores user-created UI pages. It supports atomic persistence of page layout and configuration. The page status is set upon creation, typically to 'draft' or initial state. The operation verifies input fields including name uniqueness and references to themes. It ensures compliance with user roles (Admin, Editor) that can create pages.","description":"Create a new UI page in FlexOffice with specified properties such as name, description, status, and optional theme reference. The created page is stored in the flex_office_pages table which supports versioning, soft deletion, and status lifecycle management.\n\nAccess control checks ensure that only users with 'admin' or 'editor' roles can perform this operation. The operation validates the uniqueness of the page name to prevent duplicates.\n\nThe operation maintains data integrity with timestamps and supports soft deletion by not setting deleted_at on creation.\n\nRelated operations include updating the page (PUT /pages/{pageId}), deleting a page, and managing widgets on the page, as well as retrieving page versions.\n\nErrors related to conflicts, missing parameters, or authorization will be properly handled.","summary":"Create a new UI page in FlexOffice","parameters":[],"requestBody":{"description":"Information required to create a UI page, including name, description, status and theme association.","typeName":"IFlexOfficePage.ICreate"},"responseBody":{"description":"The created UI page record with details.","typeName":"IFlexOfficePage"},"authorizationType":null,"authorizationRole":"editor","name":"create","path":"/flexOffice/editor/pages","method":"post"},{"specification":"This operation updates an existing UI page identified by pageId in the FlexOffice system. It allows modification of page properties including name, description, status, and associated theme. The operation is linked to the flex_office_pages table which manages page lifecycle with soft-deletion support and versioning.\n\nThe request must validate that the page exists and input name remains unique if changed. Access control enforces that only admins and editors can update pages. Timestamps are updated accordingly.\n\nRelated operations include page creation (POST /pages), deletion (DELETE /pages/{pageId}), and managing widgets and versions for the page.\n\nErrors include 404 if page not found and conflict errors if name duplicates occur.","description":"Update an existing FlexOffice UI page with specified properties such as name, description, status, and theme. Supports validation of existence and uniqueness constraints.\n\nOnly users with 'admin' or 'editor' roles may perform this update. Operation updates updated_at timestamp.\n\nRelated operations include creating, deleting the page, and managing related widgets and versions.\n\nProper validations and error handling are implemented for conflicts and missing resources.","summary":"Update an existing UI page","parameters":[{"name":"pageId","description":"Unique identifier of the page to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated UI page data including name, description, status, and theme association.","typeName":"IFlexOfficePage.IUpdate"},"responseBody":{"description":"The updated UI page record with details.","typeName":"IFlexOfficePage"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/flexOffice/admin/pages/{pageId}","method":"put"},{"specification":"This operation updates an existing UI page identified by pageId in the FlexOffice system. It allows modification of page properties including name, description, status, and associated theme. The operation is linked to the flex_office_pages table which manages page lifecycle with soft-deletion support and versioning.\n\nThe request must validate that the page exists and input name remains unique if changed. Access control enforces that only admins and editors can update pages. Timestamps are updated accordingly.\n\nRelated operations include page creation (POST /pages), deletion (DELETE /pages/{pageId}), and managing widgets and versions for the page.\n\nErrors include 404 if page not found and conflict errors if name duplicates occur.","description":"Update an existing FlexOffice UI page with specified properties such as name, description, status, and theme. Supports validation of existence and uniqueness constraints.\n\nOnly users with 'admin' or 'editor' roles may perform this update. Operation updates updated_at timestamp.\n\nRelated operations include creating, deleting the page, and managing related widgets and versions.\n\nProper validations and error handling are implemented for conflicts and missing resources.","summary":"Update an existing UI page","parameters":[{"name":"pageId","description":"Unique identifier of the page to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated UI page data including name, description, status, and theme association.","typeName":"IFlexOfficePage.IUpdate"},"responseBody":{"description":"The updated UI page record with details.","typeName":"IFlexOfficePage"},"authorizationType":null,"authorizationRole":"editor","name":"update","path":"/flexOffice/editor/pages/{pageId}","method":"put"},{"specification":"This operation permanently deletes a UI page identified by pageId from the FlexOffice system. It corresponds to the flex_office_pages table that supports soft deletion but this endpoint performs hard deletion.\n\nThe deletion removes the page and all related entities such as widgets, page versions, editors, comments, and conflicts due to cascading.\n\nOnly users with 'admin' role are authorized to perform this operation, enforcing strict access control.\n\nErrors include 404 if the page does not exist.\n\nThis endpoint performs hard delete, permanently removing the page record and associated data.","description":"Hard delete the specified UI page and all related data from the FlexOffice system. This operation permanently removes the record and cannot be undone.\n\nOnly users with the admin role are authorized. Related entities such as widgets, versions, and comments linked to the page will cascade delete.\n\nProper error handling includes not found errors if the page does not exist.\n\nThis operation permanently deletes data rather than soft deleting.","summary":"Hard delete a UI page permanently","parameters":[{"name":"pageId","description":"Unique identifier of the page to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/flexOffice/admin/pages/{pageId}","method":"delete"},{"specification":"This operation retrieves and searches widgets associated with a specific UI page in FlexOffice, supporting advanced filtering, sorting, and pagination. It interfaces with the flex_office_widgets table that stores user-placed widgets on pages with configurations.\n\nThe request allows filtering by widget_type, name, and status (active or deleted), and pagination controls. Only users with 'admin' or 'editor' roles can access this operation.\n\nThe response is paginated including summary information of the widgets matching the criteria.\n\nRelated operations include widget creation, update, and deletion, as well as managing widget scripts and links to charts or KPIs.","description":"Retrieve a paginated list of widgets on the specified UI page. Supports filtering by widget type, name, and status.\n\nOnly users with 'admin' or 'editor' roles can access this data.\n\nSupports pagination parameters such as page number and size to handle large sets.\n\nIncludes summary widget details optimized for listing.\n\nRelated operations allow managing individual widgets and scripts separately.","summary":"Search and list widgets on a UI page with pagination and filters","parameters":[{"name":"pageId","description":"Unique identifier of the page whose widgets are to be retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search, filter, and pagination parameters for widgets.","typeName":"IFlexOfficeWidget.IRequest"},"responseBody":{"description":"Paginated list of widget summaries matching criteria.","typeName":"IPageIFlexOfficeWidget.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/flexOffice/admin/pages/{pageId}/widgets","method":"patch"},{"specification":"This operation retrieves and searches widgets associated with a specific UI page in FlexOffice, supporting advanced filtering, sorting, and pagination. It interfaces with the flex_office_widgets table that stores user-placed widgets on pages with configurations.\n\nThe request allows filtering by widget_type, name, and status (active or deleted), and pagination controls. Only users with 'admin' or 'editor' roles can access this operation.\n\nThe response is paginated including summary information of the widgets matching the criteria.\n\nRelated operations include widget creation, update, and deletion, as well as managing widget scripts and links to charts or KPIs.","description":"Retrieve a paginated list of widgets on the specified UI page. Supports filtering by widget type, name, and status.\n\nOnly users with 'admin' or 'editor' roles can access this data.\n\nSupports pagination parameters such as page number and size to handle large sets.\n\nIncludes summary widget details optimized for listing.\n\nRelated operations allow managing individual widgets and scripts separately.","summary":"Search and list widgets on a UI page with pagination and filters","parameters":[{"name":"pageId","description":"Unique identifier of the page whose widgets are to be retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search, filter, and pagination parameters for widgets.","typeName":"IFlexOfficeWidget.IRequest"},"responseBody":{"description":"Paginated list of widget summaries matching criteria.","typeName":"IPageIFlexOfficeWidget.ISummary"},"authorizationType":null,"authorizationRole":"editor","name":"index","path":"/flexOffice/editor/pages/{pageId}/widgets","method":"patch"},{"specification":"This operation retrieves detailed information for a specific widget identified by widgetId that belongs to a particular page identified by pageId. It accesses the 'flex_office_widgets' table in the Prisma database schema, which contains widget properties such as type, name, configuration, creation and update timestamps, and soft deletion status. The API requires path parameters for pageId and widgetId to locate the specific widget. The response returns the full widget entity representation. Only authenticated users with roles 'admin', 'editor', or 'viewer' are authorized to access this information, reflecting typical read permissions for widget data within a page context.","description":"Retrieve detailed information about a specific widget associated with a given UI page. This operation fetches data from the 'flex_office_widgets' table, which stores widget characteristics including type, name, and configuration details.\n\nUsers accessing this endpoint must be authenticated and authorized as admins, editors, or viewers to ensure appropriate access control.\n\nThe response includes all persistent fields of the widget, such as timestamps and soft-deletion status, providing comprehensive insight into the widget's current configuration and state.\n\nTypical error responses include not found if the widget or page does not exist, or unauthorized access if the user lacks sufficient permissions.\n\nThis operation integrates with the UI/Page Builder frontend to support widget editing and display workflows.","summary":"Get details of a specific widget by pageId and widgetId","parameters":[{"name":"pageId","description":"Unique identifier of the target page","schema":{"type":"string","format":"uuid"}},{"name":"widgetId","description":"Unique identifier of the target widget","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed widget information","typeName":"IFlexOfficeWidget"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/flexOffice/admin/pages/{pageId}/widgets/{widgetId}","method":"get"},{"specification":"This operation retrieves detailed information for a specific widget identified by widgetId that belongs to a particular page identified by pageId. It accesses the 'flex_office_widgets' table in the Prisma database schema, which contains widget properties such as type, name, configuration, creation and update timestamps, and soft deletion status. The API requires path parameters for pageId and widgetId to locate the specific widget. The response returns the full widget entity representation. Only authenticated users with roles 'admin', 'editor', or 'viewer' are authorized to access this information, reflecting typical read permissions for widget data within a page context.","description":"Retrieve detailed information about a specific widget associated with a given UI page. This operation fetches data from the 'flex_office_widgets' table, which stores widget characteristics including type, name, and configuration details.\n\nUsers accessing this endpoint must be authenticated and authorized as admins, editors, or viewers to ensure appropriate access control.\n\nThe response includes all persistent fields of the widget, such as timestamps and soft-deletion status, providing comprehensive insight into the widget's current configuration and state.\n\nTypical error responses include not found if the widget or page does not exist, or unauthorized access if the user lacks sufficient permissions.\n\nThis operation integrates with the UI/Page Builder frontend to support widget editing and display workflows.","summary":"Get details of a specific widget by pageId and widgetId","parameters":[{"name":"pageId","description":"Unique identifier of the target page","schema":{"type":"string","format":"uuid"}},{"name":"widgetId","description":"Unique identifier of the target widget","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed widget information","typeName":"IFlexOfficeWidget"},"authorizationType":null,"authorizationRole":"editor","name":"at","path":"/flexOffice/editor/pages/{pageId}/widgets/{widgetId}","method":"get"},{"specification":"This operation retrieves detailed information for a specific widget identified by widgetId that belongs to a particular page identified by pageId. It accesses the 'flex_office_widgets' table in the Prisma database schema, which contains widget properties such as type, name, configuration, creation and update timestamps, and soft deletion status. The API requires path parameters for pageId and widgetId to locate the specific widget. The response returns the full widget entity representation. Only authenticated users with roles 'admin', 'editor', or 'viewer' are authorized to access this information, reflecting typical read permissions for widget data within a page context.","description":"Retrieve detailed information about a specific widget associated with a given UI page. This operation fetches data from the 'flex_office_widgets' table, which stores widget characteristics including type, name, and configuration details.\n\nUsers accessing this endpoint must be authenticated and authorized as admins, editors, or viewers to ensure appropriate access control.\n\nThe response includes all persistent fields of the widget, such as timestamps and soft-deletion status, providing comprehensive insight into the widget's current configuration and state.\n\nTypical error responses include not found if the widget or page does not exist, or unauthorized access if the user lacks sufficient permissions.\n\nThis operation integrates with the UI/Page Builder frontend to support widget editing and display workflows.","summary":"Get details of a specific widget by pageId and widgetId","parameters":[{"name":"pageId","description":"Unique identifier of the target page","schema":{"type":"string","format":"uuid"}},{"name":"widgetId","description":"Unique identifier of the target widget","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed widget information","typeName":"IFlexOfficeWidget"},"authorizationType":null,"authorizationRole":"viewer","name":"at","path":"/flexOffice/viewer/pages/{pageId}/widgets/{widgetId}","method":"get"},{"specification":"This operation creates a new widget on a specified UI page using data provided in the request body. It targets the 'flex_office_widgets' table in the Prisma schema, which stores widget attributes including type, name, configuration, and timestamps. The API requires path parameter 'pageId' indicating the page to which the widget will be added. The request body includes the necessary properties for widget creation, such as widgetType, name, and optional configuration details.\n\nThe response returns the newly created widget entity with all persistent fields.\n\nAuthorization roles 'admin' and 'editor' are allowed for creation, reflecting the permissions typically required for modifying page content. Viewers do not have creation privileges.\n\nValidation rules ensure that the widget name is unique within the page, and the widget type is specified. Timestamps for creation and update are automatically managed by the system.","description":"Create a new widget in the specified page. The operation accepts widget properties including type, name, and optional configuration JSON.\n\nOnly users with admin or editor roles can perform this creation.\n\nRequest body must conform to the structure of IFlexOfficeWidget.ICreate with required fields.\n\nOn success, returns the full representation of the created widget.\n\nErrors may include validation failures if widget name duplicates or widgetType is missing.","summary":"Create a new widget in a UI page","parameters":[{"name":"pageId","description":"Unique identifier of the target page","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Properties required to create a new widget","typeName":"IFlexOfficeWidget.ICreate"},"responseBody":{"description":"The created widget entity","typeName":"IFlexOfficeWidget"},"authorizationType":null,"authorizationRole":"admin","name":"create","path":"/flexOffice/admin/pages/{pageId}/widgets","method":"post"},{"specification":"This operation creates a new widget on a specified UI page using data provided in the request body. It targets the 'flex_office_widgets' table in the Prisma schema, which stores widget attributes including type, name, configuration, and timestamps. The API requires path parameter 'pageId' indicating the page to which the widget will be added. The request body includes the necessary properties for widget creation, such as widgetType, name, and optional configuration details.\n\nThe response returns the newly created widget entity with all persistent fields.\n\nAuthorization roles 'admin' and 'editor' are allowed for creation, reflecting the permissions typically required for modifying page content. Viewers do not have creation privileges.\n\nValidation rules ensure that the widget name is unique within the page, and the widget type is specified. Timestamps for creation and update are automatically managed by the system.","description":"Create a new widget in the specified page. The operation accepts widget properties including type, name, and optional configuration JSON.\n\nOnly users with admin or editor roles can perform this creation.\n\nRequest body must conform to the structure of IFlexOfficeWidget.ICreate with required fields.\n\nOn success, returns the full representation of the created widget.\n\nErrors may include validation failures if widget name duplicates or widgetType is missing.","summary":"Create a new widget in a UI page","parameters":[{"name":"pageId","description":"Unique identifier of the target page","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Properties required to create a new widget","typeName":"IFlexOfficeWidget.ICreate"},"responseBody":{"description":"The created widget entity","typeName":"IFlexOfficeWidget"},"authorizationType":null,"authorizationRole":"editor","name":"create","path":"/flexOffice/editor/pages/{pageId}/widgets","method":"post"},{"specification":"This operation updates an existing widget identified by widgetId on a specific page identified by pageId. It updates the 'flex_office_widgets' table fields such as widgetType, name, and configuration based on the request body. Path parameters 'pageId' and 'widgetId' are used to identify the widget to update precisely.\n\nAuthorized roles are 'admin' and 'editor' only, consistent with modification permissions.\n\nThe requestBody must conform to the IFlexOfficeWidget.IUpdate type.\n\nThe response returns the updated widget entity with all properties reflecting the latest state.\n\nValidation ensures widget name uniqueness within the page and required presence of widgetType.","description":"Update an existing widget of a given page, identified by widgetId.\n\nThis operation modifies widget properties including name, type, and configuration.\n\nOnly users with admin or editor roles may update widgets.\n\nReturns the updated widget entity upon success.\n\nValidation errors or unauthorized access are possible failure modes.","summary":"Update an existing widget by pageId and widgetId","parameters":[{"name":"pageId","description":"Unique identifier of the target page","schema":{"type":"string","format":"uuid"}},{"name":"widgetId","description":"Unique identifier of the target widget","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Properties to update on the widget","typeName":"IFlexOfficeWidget.IUpdate"},"responseBody":{"description":"Updated widget entity","typeName":"IFlexOfficeWidget"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/flexOffice/admin/pages/{pageId}/widgets/{widgetId}","method":"put"},{"specification":"This operation updates an existing widget identified by widgetId on a specific page identified by pageId. It updates the 'flex_office_widgets' table fields such as widgetType, name, and configuration based on the request body. Path parameters 'pageId' and 'widgetId' are used to identify the widget to update precisely.\n\nAuthorized roles are 'admin' and 'editor' only, consistent with modification permissions.\n\nThe requestBody must conform to the IFlexOfficeWidget.IUpdate type.\n\nThe response returns the updated widget entity with all properties reflecting the latest state.\n\nValidation ensures widget name uniqueness within the page and required presence of widgetType.","description":"Update an existing widget of a given page, identified by widgetId.\n\nThis operation modifies widget properties including name, type, and configuration.\n\nOnly users with admin or editor roles may update widgets.\n\nReturns the updated widget entity upon success.\n\nValidation errors or unauthorized access are possible failure modes.","summary":"Update an existing widget by pageId and widgetId","parameters":[{"name":"pageId","description":"Unique identifier of the target page","schema":{"type":"string","format":"uuid"}},{"name":"widgetId","description":"Unique identifier of the target widget","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Properties to update on the widget","typeName":"IFlexOfficeWidget.IUpdate"},"responseBody":{"description":"Updated widget entity","typeName":"IFlexOfficeWidget"},"authorizationType":null,"authorizationRole":"editor","name":"update","path":"/flexOffice/editor/pages/{pageId}/widgets/{widgetId}","method":"put"},{"specification":"This operation permanently deletes a widget identified by widgetId from a specific page identified by pageId. It performs a hard delete on the 'flex_office_widgets' table since the table supports soft deletion via 'deleted_at' but this endpoint represents a complete removal.\n\nOnly users with 'admin' or 'editor' roles may delete widgets, ensuring controlled permission.\n\nPath parameters 'pageId' and 'widgetId' identify the widget precisely. No request body is required.\n\nSuccessful deletion does not return a response body but removes the record entirely from the accessible dataset.\n\nClients should handle possible errors like not found or forbidden access properly.","description":"Delete a widget from a specific page permanently. This removes the widget record from the database.\n\nOnly users with admin or editor roles may perform deletion.\n\nNo request body required.\n\nClients should handle errors such as widget not found or unauthorized access.\n\nThis operation employs hard deletion despite the presence of 'deleted_at' for soft delete support in the database.","summary":"Delete a widget from a page","parameters":[{"name":"pageId","description":"Unique identifier of the target page","schema":{"type":"string","format":"uuid"}},{"name":"widgetId","description":"Unique identifier of the target widget","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/flexOffice/admin/pages/{pageId}/widgets/{widgetId}","method":"delete"},{"specification":"This operation permanently deletes a widget identified by widgetId from a specific page identified by pageId. It performs a hard delete on the 'flex_office_widgets' table since the table supports soft deletion via 'deleted_at' but this endpoint represents a complete removal.\n\nOnly users with 'admin' or 'editor' roles may delete widgets, ensuring controlled permission.\n\nPath parameters 'pageId' and 'widgetId' identify the widget precisely. No request body is required.\n\nSuccessful deletion does not return a response body but removes the record entirely from the accessible dataset.\n\nClients should handle possible errors like not found or forbidden access properly.","description":"Delete a widget from a specific page permanently. This removes the widget record from the database.\n\nOnly users with admin or editor roles may perform deletion.\n\nNo request body required.\n\nClients should handle errors such as widget not found or unauthorized access.\n\nThis operation employs hard deletion despite the presence of 'deleted_at' for soft delete support in the database.","summary":"Delete a widget from a page","parameters":[{"name":"pageId","description":"Unique identifier of the target page","schema":{"type":"string","format":"uuid"}},{"name":"widgetId","description":"Unique identifier of the target widget","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"editor","name":"erase","path":"/flexOffice/editor/pages/{pageId}/widgets/{widgetId}","method":"delete"},{"specification":"This operation retrieves a paginated list of widget scripts belonging to a specified widget. It corresponds to the flex_office_widget_scripts table in the Prisma schema, which stores script information such as script type and content linked to widget IDs. The operation accepts a widgetId path parameter to identify the widget and accepts complex filtering and pagination options in the request body.","description":"Retrieve a paginated and filtered list of scripts associated with the widget identified by widgetId. Supports comprehensive filtering, sorting, and pagination capabilities.\n\nSecurity enforcement ensures only authorized users can access the widget's scripts.\n\nThe response provides concise script summaries suitable for listing and browsing.\n\nAll requested scripts correspond to the target widgetId.\n\nReturns errors if widgetId is invalid or access is unauthorized.","summary":"List widget scripts for a widget with pagination and filtering","parameters":[{"name":"widgetId","in":"path","description":"Unique identifier of the target widget","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering, pagination, and sorting criteria for fetching widget scripts","typeName":"IFlexOfficeWidgetScript.IRequest"},"responseBody":{"description":"Paginated results containing summaries of widget scripts","typeName":"IPageIFlexOfficeWidgetScript.ISummary"},"authorizationType":null,"authorizationRole":"editor","name":"index","path":"/flexOffice/editor/widgets/{widgetId}/scripts","method":"patch"},{"specification":"This operation obtains detailed information about a specific widget script identified by scriptId belonging to a widget identified by widgetId. It maps to the flex_office_widget_scripts table which contains script metadata and content.\n\nClients must provide both widgetId and scriptId as path parameters. The operation returns the full script information including script type, content, and timestamps.\n\nAuthorization enforces that only permitted users can access script details.","description":"Retrieve detailed information for a widget script specified by scriptId under the widget identified by widgetId.\n\nIncludes full script metadata and source content.\n\nRequires valid UUIDs for widgetId and scriptId.\n\nAccess control restricts to authorized users.\n\nReturns 404 if not found or access denied.","summary":"Get widget script details by widgetId and scriptId","parameters":[{"name":"widgetId","in":"path","description":"Unique identifier of the target widget","schema":{"type":"string","format":"uuid"}},{"name":"scriptId","in":"path","description":"Unique identifier of the target script","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full widget script information including content and timestamps","typeName":"IFlexOfficeWidgetScript"},"authorizationType":null,"authorizationRole":"editor","name":"at","path":"/flexOffice/editor/widgets/{widgetId}/scripts/{scriptId}","method":"get"},{"specification":"This operation creates a new script for a specified widget, corresponding to the flex_office_widget_scripts table in the Prisma schema. The new script must be linked to the widget identified by the widgetId path parameter.\n\nInput includes script properties such as script_type and script_content.\n\nAuthorization validates permission to add scripts to the widget.\n\nOn success, returns the created script record with full metadata.","description":"Create a new script associated with a widget specified by widgetId. Input includes script type and content.\n\nValidates access permissions.\n\nReturns detailed information of the created script.\n\nRejects malformed input or unauthorized access.","summary":"Create widget script for a widget","parameters":[{"name":"widgetId","in":"path","description":"Unique identifier of the target widget","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information required to create a widget script","typeName":"IFlexOfficeWidgetScript.ICreate"},"responseBody":{"description":"Detailed widget script information after creation","typeName":"IFlexOfficeWidgetScript"},"authorizationType":null,"authorizationRole":"editor","name":"create","path":"/flexOffice/editor/widgets/{widgetId}/scripts","method":"post"},{"specification":"This operation updates an existing widget script identified by scriptId belonging to the widget identified by widgetId. It maps to the flex_office_widget_scripts table schema.\n\nInputs in the request body specify updated fields such as script_type and script_content.\n\nAuthorization ensures only permitted users can update scripts.\n\nReturns the updated script record.\n\nHandles errors including invalid scriptId, malformed input, and permission denial.","description":"Update a widget script identified by scriptId under the widget identified by widgetId. Input body contains script update details.\n\nValidates user authorization.\n\nReturns full updated script information.\n\nErrors if script does not exist or access denied.","summary":"Update widget script for a given widget","parameters":[{"name":"widgetId","in":"path","description":"Unique identifier of the target widget","schema":{"type":"string","format":"uuid"}},{"name":"scriptId","in":"path","description":"Unique identifier of the target script","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Details to update widget script","typeName":"IFlexOfficeWidgetScript.IUpdate"},"responseBody":{"description":"Full updated widget script information","typeName":"IFlexOfficeWidgetScript"},"authorizationType":null,"authorizationRole":"editor","name":"update","path":"/flexOffice/editor/widgets/{widgetId}/scripts/{scriptId}","method":"put"},{"specification":"This operation retrieves a paginated, filterable list of FlexOffice page themes used to style UI pages. It operates on the flex_office_page_themes Prisma table. This API supports search criteria, pagination, and sorting to allow clients to browse available themes efficiently. It returns a paginated list of theme summaries including name and description.","path":"/flexOffice/admin/pageThemes","method":"patch","summary":"Search and retrieve a filtered, paginated list of UI page themes","description":"Retrieve a filtered and paginated list of FlexOffice UI page themes from the system database. This operation facilitates clients in querying available themes with flexible filters on name, creation date, and update timestamps.\n\nSecurity considerations include that this endpoint is typically accessible by authenticated users with read permissions. No sensitive information is exposed. The response returns essential theme details optimized for display in selection lists.\n\nThe operation integrates directly with the flex_office_page_themes Prisma table, referencing fields such as id, name, description, created_at, and updated_at. Pagination parameters like page number and size control the response size.\n\nIt is expected that this operation supports sorting and search filtering to enable user-friendly theme discovery. Errors include invalid query parameters or server failures which will be properly handled with standard HTTP error codes.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for theme filtering","typeName":"IFlexOfficePageTheme.IRequest"},"responseBody":{"description":"Paginated list of UI page theme summaries matching search criteria","typeName":"IPageIFlexOfficePageTheme.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index"},{"specification":"This operation retrieves a paginated, filterable list of FlexOffice page themes used to style UI pages. It operates on the flex_office_page_themes Prisma table. This API supports search criteria, pagination, and sorting to allow clients to browse available themes efficiently. It returns a paginated list of theme summaries including name and description.","path":"/flexOffice/editor/pageThemes","method":"patch","summary":"Search and retrieve a filtered, paginated list of UI page themes","description":"Retrieve a filtered and paginated list of FlexOffice UI page themes from the system database. This operation facilitates clients in querying available themes with flexible filters on name, creation date, and update timestamps.\n\nSecurity considerations include that this endpoint is typically accessible by authenticated users with read permissions. No sensitive information is exposed. The response returns essential theme details optimized for display in selection lists.\n\nThe operation integrates directly with the flex_office_page_themes Prisma table, referencing fields such as id, name, description, created_at, and updated_at. Pagination parameters like page number and size control the response size.\n\nIt is expected that this operation supports sorting and search filtering to enable user-friendly theme discovery. Errors include invalid query parameters or server failures which will be properly handled with standard HTTP error codes.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for theme filtering","typeName":"IFlexOfficePageTheme.IRequest"},"responseBody":{"description":"Paginated list of UI page theme summaries matching search criteria","typeName":"IPageIFlexOfficePageTheme.ISummary"},"authorizationType":null,"authorizationRole":"editor","name":"index"},{"specification":"This operation retrieves a paginated, filterable list of FlexOffice page themes used to style UI pages. It operates on the flex_office_page_themes Prisma table. This API supports search criteria, pagination, and sorting to allow clients to browse available themes efficiently. It returns a paginated list of theme summaries including name and description.","path":"/flexOffice/viewer/pageThemes","method":"patch","summary":"Search and retrieve a filtered, paginated list of UI page themes","description":"Retrieve a filtered and paginated list of FlexOffice UI page themes from the system database. This operation facilitates clients in querying available themes with flexible filters on name, creation date, and update timestamps.\n\nSecurity considerations include that this endpoint is typically accessible by authenticated users with read permissions. No sensitive information is exposed. The response returns essential theme details optimized for display in selection lists.\n\nThe operation integrates directly with the flex_office_page_themes Prisma table, referencing fields such as id, name, description, created_at, and updated_at. Pagination parameters like page number and size control the response size.\n\nIt is expected that this operation supports sorting and search filtering to enable user-friendly theme discovery. Errors include invalid query parameters or server failures which will be properly handled with standard HTTP error codes.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for theme filtering","typeName":"IFlexOfficePageTheme.IRequest"},"responseBody":{"description":"Paginated list of UI page theme summaries matching search criteria","typeName":"IPageIFlexOfficePageTheme.ISummary"},"authorizationType":null,"authorizationRole":"viewer","name":"index"},{"specification":"This operation retrieves detailed information of a single UI page theme by its unique identifier. It operates on the flex_office_page_themes table. The response includes all relevant theme attributes including CSS content and timestamps.","path":"/flexOffice/admin/pageThemes/{pageThemeId}","method":"get","summary":"Retrieve detailed information of a UI page theme by ID","description":"Retrieve detailed information about a specific FlexOffice UI page theme identified by the pageThemeId path parameter. This includes theme name, description, CSS content, and audit timestamps.\n\nSecurity considerations limit access to authorized users. This operation supports read access for admins, editors, and viewers with appropriate permissions.\n\nThe operation queries the flex_office_page_themes table for the theme matching the given UUID. It returns a complete representation of the theme entity.\n\nErrors include invalid UUID format or theme not found. Proper HTTP error codes are used to communicate such failures.","parameters":[{"name":"pageThemeId","description":"Unique identifier for the target page theme","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed UI page theme information","typeName":"IFlexOfficePageTheme"},"authorizationType":null,"authorizationRole":"admin","name":"at"},{"specification":"This operation retrieves detailed information of a single UI page theme by its unique identifier. It operates on the flex_office_page_themes table. The response includes all relevant theme attributes including CSS content and timestamps.","path":"/flexOffice/editor/pageThemes/{pageThemeId}","method":"get","summary":"Retrieve detailed information of a UI page theme by ID","description":"Retrieve detailed information about a specific FlexOffice UI page theme identified by the pageThemeId path parameter. This includes theme name, description, CSS content, and audit timestamps.\n\nSecurity considerations limit access to authorized users. This operation supports read access for admins, editors, and viewers with appropriate permissions.\n\nThe operation queries the flex_office_page_themes table for the theme matching the given UUID. It returns a complete representation of the theme entity.\n\nErrors include invalid UUID format or theme not found. Proper HTTP error codes are used to communicate such failures.","parameters":[{"name":"pageThemeId","description":"Unique identifier for the target page theme","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed UI page theme information","typeName":"IFlexOfficePageTheme"},"authorizationType":null,"authorizationRole":"editor","name":"at"},{"specification":"This operation retrieves detailed information of a single UI page theme by its unique identifier. It operates on the flex_office_page_themes table. The response includes all relevant theme attributes including CSS content and timestamps.","path":"/flexOffice/viewer/pageThemes/{pageThemeId}","method":"get","summary":"Retrieve detailed information of a UI page theme by ID","description":"Retrieve detailed information about a specific FlexOffice UI page theme identified by the pageThemeId path parameter. This includes theme name, description, CSS content, and audit timestamps.\n\nSecurity considerations limit access to authorized users. This operation supports read access for admins, editors, and viewers with appropriate permissions.\n\nThe operation queries the flex_office_page_themes table for the theme matching the given UUID. It returns a complete representation of the theme entity.\n\nErrors include invalid UUID format or theme not found. Proper HTTP error codes are used to communicate such failures.","parameters":[{"name":"pageThemeId","description":"Unique identifier for the target page theme","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed UI page theme information","typeName":"IFlexOfficePageTheme"},"authorizationType":null,"authorizationRole":"viewer","name":"at"},{"specification":"This operation creates a new UI page theme in the system. It operates on the flex_office_page_themes table and requires a unique name and optional description and CSS content. Created and updated timestamps are managed by the database system.","path":"/flexOffice/admin/pageThemes","method":"post","summary":"Create a new UI page theme","description":"Create a new UI page theme with specified name, optional description, and optional CSS content. The theme name must be unique to prevent conflicts.\n\nSecurity considerations require this operation to be restricted to Admin and Editor roles authorized to manage UI themes.\n\nValidation includes checking for uniqueness of theme name and correct formatting of CSS.\n\nUpon success, returns the created theme entity with all attributes including generated ID and timestamps.\n\nErrors include duplicate theme name or validation failure with appropriate HTTP error responses.","parameters":[],"requestBody":{"description":"Information required for new UI page theme creation","typeName":"IFlexOfficePageTheme.ICreate"},"responseBody":{"description":"Created UI page theme information","typeName":"IFlexOfficePageTheme"},"authorizationType":null,"authorizationRole":"admin","name":"create"},{"specification":"This operation creates a new UI page theme in the system. It operates on the flex_office_page_themes table and requires a unique name and optional description and CSS content. Created and updated timestamps are managed by the database system.","path":"/flexOffice/editor/pageThemes","method":"post","summary":"Create a new UI page theme","description":"Create a new UI page theme with specified name, optional description, and optional CSS content. The theme name must be unique to prevent conflicts.\n\nSecurity considerations require this operation to be restricted to Admin and Editor roles authorized to manage UI themes.\n\nValidation includes checking for uniqueness of theme name and correct formatting of CSS.\n\nUpon success, returns the created theme entity with all attributes including generated ID and timestamps.\n\nErrors include duplicate theme name or validation failure with appropriate HTTP error responses.","parameters":[],"requestBody":{"description":"Information required for new UI page theme creation","typeName":"IFlexOfficePageTheme.ICreate"},"responseBody":{"description":"Created UI page theme information","typeName":"IFlexOfficePageTheme"},"authorizationType":null,"authorizationRole":"editor","name":"create"},{"specification":"This operation deletes a widget script associated with a specific widget. It operates on the flex_office_widget_scripts table. This endpoint requires both widgetId and scriptId path parameters to identify the exact script to remove.","path":"/flexOffice/admin/widgets/{widgetId}/scripts/{scriptId}","method":"delete","summary":"Delete a UI widget script by ID","description":"Deletes a UI widget script from the system given the widgetId and scriptId. This operation permanently removes the script record from the flex_office_widget_scripts table and cannot be undone.\n\nSecurity considerations dictate that only Admin and Editor roles with proper authorizations can perform this action.\n\nThe operation requires both widgetId and scriptId path parameters, both UUIDs, to identify the target script associated with the widget.\n\nErrors may include resource not found or unauthorized access, which are appropriately handled.\n\nThere is no request body or response content for this operation.","parameters":[{"name":"widgetId","description":"Unique identifier of the UI widget","schema":{"type":"string","format":"uuid"}},{"name":"scriptId","description":"Unique identifier of the widget script to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase"},{"specification":"This operation deletes a widget script associated with a specific widget. It operates on the flex_office_widget_scripts table. This endpoint requires both widgetId and scriptId path parameters to identify the exact script to remove.","path":"/flexOffice/editor/widgets/{widgetId}/scripts/{scriptId}","method":"delete","summary":"Delete a UI widget script by ID","description":"Deletes a UI widget script from the system given the widgetId and scriptId. This operation permanently removes the script record from the flex_office_widget_scripts table and cannot be undone.\n\nSecurity considerations dictate that only Admin and Editor roles with proper authorizations can perform this action.\n\nThe operation requires both widgetId and scriptId path parameters, both UUIDs, to identify the target script associated with the widget.\n\nErrors may include resource not found or unauthorized access, which are appropriately handled.\n\nThere is no request body or response content for this operation.","parameters":[{"name":"widgetId","description":"Unique identifier of the UI widget","schema":{"type":"string","format":"uuid"}},{"name":"scriptId","description":"Unique identifier of the widget script to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"editor","name":"erase"},{"specification":"This operation updates the properties of an existing page theme within the FlexOffice system. It corresponds to the flex_office_page_themes table in the Prisma schema, enabling administrators to modify theme details such as name and CSS styles. The operation requires the unique identifier of the page theme (pageThemeId) as a path parameter and accepts the updated theme data in the request body. Validation ensures the theme name remains unique and the CSS content is valid text. The operation is authorized for admin users who manage system visual settings.","description":"This API endpoint allows authorized administrators to modify an existing UI page theme used in the FlexOffice platform. The updated fields include theme name and CSS styles which define the visual appearance of UI pages.\n\nThe operation enforces uniqueness of the theme name to avoid conflicts and maintains the consistency of the system's visual styling. It is associated with the flex_office_page_themes database entity, which stores theme metadata including creation and update timestamps for audit purposes.\n\nSecurity considerations restrict this operation to users with admin privileges to prevent unauthorized changes to system-wide visual configurations.\n\nClients must supply the pageThemeId path parameter to identify which theme record to update and provide the update data in the request body adhering to IFlexOfficePageTheme.IUpdate schema. Upon success, the updated theme details are returned.\n\nAny attempt to update a non-existent theme ID or duplicate a theme name results in an error response.\n\nThis operation complements GET endpoints that retrieve themes and DELETE endpoints that remove themes.","summary":"Update an existing FlexOffice UI page theme by ID","parameters":[{"name":"pageThemeId","in":"path","description":"Unique identifier of the target page theme","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Page theme update data","typeName":"IFlexOfficePageTheme.IUpdate"},"responseBody":{"description":"Updated page theme information","typeName":"IFlexOfficePageTheme"},"authorizationType":null,"authorizationRole":"admin","name":"updatePageTheme","path":"/flexOffice/admin/pageThemes/{pageThemeId}","method":"put"},{"specification":"This API operation deletes a page theme from the FlexOffice system permanently. It acts on the flex_office_page_themes table reflecting removal of theme metadata like name, CSS, and timestamps. The endpoint requires the pageThemeId path parameter to specify which page theme to delete. The system performs a hard delete, completely removing the theme record from the database without soft delete support. Authorization is restricted to admin users who manage visual system configurations. Upon successful deletion, no content is returned. This operation ensures the maintenance of an up-to-date theme catalog by allowing removal of obsolete entries.","description":"This API endpoint enables administrators to permanently delete a UI page theme from the FlexOffice backend system.\n\nThe deletion applies directly to the flex_office_page_themes database table, removing all metadata associated with the theme including name, CSS content, and audit timestamps.\n\nSecurity restrictions limit deletion access to admin users only to maintain system stability and prevent accidental removal.\n\nClients must specify the unique pageThemeId path parameter to identify the exact theme record to be deleted.\n\nSuccessful execution returns no response body, signifying the resource is no longer present in the system.\n\nThis operation complements page theme creation, update, and retrieval endpoints, enabling full lifecycle management of UI themes.","summary":"Delete a FlexOffice UI page theme by ID","parameters":[{"name":"pageThemeId","in":"path","description":"Unique identifier of the target page theme","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erasePageTheme","path":"/flexOffice/admin/pageThemes/{pageThemeId}","method":"delete"},{"specification":"This operation retrieves a paginated list of version snapshots for a specific UI page. Operating on the flex_office_page_versions table, it gathers version metadata including version numbers and creation timestamps. Clients can retrieve historical snapshots of a page's layout and configuration to support version control and rollback capabilities. The endpoint requires the pageId path parameter to specify the parent page. Query filtering, sorting, and pagination can be managed through the IFlexOfficePageVersion.IRequest request body schema. The response returns a paginated list of version summaries. Authorization roles include editor and admin users allowed to view page versions for collaboration and audit purposes.","description":"Retrieve a paginated, filtered, and sorted list of historical version snapshots for a specified UI page in the FlexOffice system.\n\nThis operation is essential for page version control, allowing users to view snapshots of the page's state captured over time. Version data includes version numbers, JSON serialized page data, and timestamps.\n\nAccess is restricted to authenticated users with editor or admin roles to ensure secure collaboration and auditing.\n\nThe pageId path parameter specifies which UI page's version history to query. The request body supports search and filtering criteria conforming to IFlexOfficePageVersion.IRequest to narrow down versions by version number ranges, date ranges, or other metadata.\n\nThe response includes paginated version summaries, enabling clients to efficiently browse large version histories.\n\nThis API complements GET endpoints for individual versions and operations to create or restore versions.","summary":"Search and retrieve UI page versions for a given page","parameters":[{"name":"pageId","in":"path","description":"Unique identifier of the target UI page","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for page versions","typeName":"IFlexOfficePageVersion.IRequest"},"responseBody":{"description":"Paginated list of page version summaries matching search criteria","typeName":"IPageIFlexOfficePageVersion.ISummary"},"authorizationType":null,"authorizationRole":"editor","name":"searchPageVersions","path":"/flexOffice/editor/pages/{pageId}/versions","method":"patch"},{"specification":"This operation retrieves a paginated list of version snapshots for a specific UI page. Operating on the flex_office_page_versions table, it gathers version metadata including version numbers and creation timestamps. Clients can retrieve historical snapshots of a page's layout and configuration to support version control and rollback capabilities. The endpoint requires the pageId path parameter to specify the parent page. Query filtering, sorting, and pagination can be managed through the IFlexOfficePageVersion.IRequest request body schema. The response returns a paginated list of version summaries. Authorization roles include editor and admin users allowed to view page versions for collaboration and audit purposes.","description":"Retrieve a paginated, filtered, and sorted list of historical version snapshots for a specified UI page in the FlexOffice system.\n\nThis operation is essential for page version control, allowing users to view snapshots of the page's state captured over time. Version data includes version numbers, JSON serialized page data, and timestamps.\n\nAccess is restricted to authenticated users with editor or admin roles to ensure secure collaboration and auditing.\n\nThe pageId path parameter specifies which UI page's version history to query. The request body supports search and filtering criteria conforming to IFlexOfficePageVersion.IRequest to narrow down versions by version number ranges, date ranges, or other metadata.\n\nThe response includes paginated version summaries, enabling clients to efficiently browse large version histories.\n\nThis API complements GET endpoints for individual versions and operations to create or restore versions.","summary":"Search and retrieve UI page versions for a given page","parameters":[{"name":"pageId","in":"path","description":"Unique identifier of the target UI page","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for page versions","typeName":"IFlexOfficePageVersion.IRequest"},"responseBody":{"description":"Paginated list of page version summaries matching search criteria","typeName":"IPageIFlexOfficePageVersion.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"searchPageVersions","path":"/flexOffice/admin/pages/{pageId}/versions","method":"patch"},{"specification":"Retrieve detailed information of a specific UI page version. This endpoint accesses the flex_office_page_versions table to fetch serialized snapshot data including version number, JSON page state, and timestamps. Requires path parameters pageId and versionId to uniquely identify the version record. Authorized roles editor and admin may use this endpoint to review or restore historical page states. The response returns the full page version entity conforming to IFlexOfficePageVersion.","description":"Fetch full details of a single UI page version from the FlexOffice backend system.\n\nThis operation is crucial for retrieving historical snapshots of UI pages to enable rollback or auditing of changes. The pageId and versionId path parameters identify the exact version record.\n\nOnly users with editor or admin roles can access this detailed data to ensure proper governance.\n\nUpon success, the JSON serialized page data representing the page layout and widget configuration at that version is returned.\n\nThis API complements version list retrieval and page update endpoints.","summary":"Get detailed information for a UI page version","parameters":[{"name":"pageId","in":"path","description":"Unique identifier of the parent UI page","schema":{"type":"string","format":"uuid"}},{"name":"versionId","in":"path","description":"Unique identifier of the UI page version","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Details of the specified UI page version","typeName":"IFlexOfficePageVersion"},"authorizationType":null,"authorizationRole":"editor","name":"atPageVersion","path":"/flexOffice/editor/pages/{pageId}/versions/{versionId}","method":"get"},{"specification":"Retrieve detailed information of a specific UI page version. This endpoint accesses the flex_office_page_versions table to fetch serialized snapshot data including version number, JSON page state, and timestamps. Requires path parameters pageId and versionId to uniquely identify the version record. Authorized roles editor and admin may use this endpoint to review or restore historical page states. The response returns the full page version entity conforming to IFlexOfficePageVersion.","description":"Fetch full details of a single UI page version from the FlexOffice backend system.\n\nThis operation is crucial for retrieving historical snapshots of UI pages to enable rollback or auditing of changes. The pageId and versionId path parameters identify the exact version record.\n\nOnly users with editor or admin roles can access this detailed data to ensure proper governance.\n\nUpon success, the JSON serialized page data representing the page layout and widget configuration at that version is returned.\n\nThis API complements version list retrieval and page update endpoints.","summary":"Get detailed information for a UI page version","parameters":[{"name":"pageId","in":"path","description":"Unique identifier of the parent UI page","schema":{"type":"string","format":"uuid"}},{"name":"versionId","in":"path","description":"Unique identifier of the UI page version","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Details of the specified UI page version","typeName":"IFlexOfficePageVersion"},"authorizationType":null,"authorizationRole":"admin","name":"atPageVersion","path":"/flexOffice/admin/pages/{pageId}/versions/{versionId}","method":"get"},{"specification":"This operation retrieves a filtered and paginated list of data sources managed within the FlexOffice system. It operates on the flex_office_data_sources table from the Prisma schema, which stores configuration and metadata for external data sources such as MySQL, PostgreSQL, Google Sheets, and Excel files. The operation supports advanced searching, filtering by fields like type and status, sorting, and pagination. It allows clients to find data sources matching specific criteria, including active status and integration types. No request body is necessary; instead, the criteria can be passed in the PATCH request body following the IFlexOfficeDataSource.IRequest schema.","description":"Retrieve a filtered, paginated list of external data sources registered in the system. This includes databases, Google Sheets, Excel uploads, and other supported types.\n\nClients can specify search terms, filter by data source type (e.g., mysql, postgresql, google_sheet, excel), and limit results by active status. Pagination parameters allow controlling page size and the specific page.\n\nSecurity policies restrict this operation to authorized users with the appropriate role.\n\nThe operation returns summary information optimized for listing including id, name, type, and active status.\n\nThis operation corresponds directly to the flex_office_data_sources table as defined in the Prisma schema.","summary":"Search and retrieve a list of data sources with filtering and pagination support","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for data source filtering","typeName":"IFlexOfficeDataSource.IRequest"},"responseBody":{"description":"Paginated list of data source summary information matching the search criteria","typeName":"IPageIFlexOfficeDataSource.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/flexOffice/admin/dataSources","method":"patch"},{"specification":"This operation retrieves a filtered and paginated list of data sources managed within the FlexOffice system. It operates on the flex_office_data_sources table from the Prisma schema, which stores configuration and metadata for external data sources such as MySQL, PostgreSQL, Google Sheets, and Excel files. The operation supports advanced searching, filtering by fields like type and status, sorting, and pagination. It allows clients to find data sources matching specific criteria, including active status and integration types. No request body is necessary; instead, the criteria can be passed in the PATCH request body following the IFlexOfficeDataSource.IRequest schema.","description":"Retrieve a filtered, paginated list of external data sources registered in the system. This includes databases, Google Sheets, Excel uploads, and other supported types.\n\nClients can specify search terms, filter by data source type (e.g., mysql, postgresql, google_sheet, excel), and limit results by active status. Pagination parameters allow controlling page size and the specific page.\n\nSecurity policies restrict this operation to authorized users with the appropriate role.\n\nThe operation returns summary information optimized for listing including id, name, type, and active status.\n\nThis operation corresponds directly to the flex_office_data_sources table as defined in the Prisma schema.","summary":"Search and retrieve a list of data sources with filtering and pagination support","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for data source filtering","typeName":"IFlexOfficeDataSource.IRequest"},"responseBody":{"description":"Paginated list of data source summary information matching the search criteria","typeName":"IPageIFlexOfficeDataSource.ISummary"},"authorizationType":null,"authorizationRole":"editor","name":"index","path":"/flexOffice/editor/dataSources","method":"patch"},{"specification":"This operation retrieves detailed information about a specific data source from the flex_office_data_sources table identified by its unique UUID. It provides all configuration parameters, status, and audit timestamps for comprehensive client display or management purposes. The data source type includes MySQL, PostgreSQL, Google Sheets, Excel, and others, as defined in the schema. Access is restricted to authorized roles including administrators and editors who manage data integration setups.","description":"Get detailed information of an external data source by its unique identifier. The data source can be of type MySQL, PostgreSQL, Google Sheets, Excel, etc.\n\nThe operation retrieves full configuration details, connection credentials reference, activation status, and audit data.\n\nThis API ensures that only authorized users can access sensitive data source configurations.\n\nRelationship exists with data source syncs, credentials, and external sheets enumerated separately.\n\nReturns the full data source record from the flex_office_data_sources table, matching the Prisma schema structure.","summary":"Retrieve detailed data source information by ID","parameters":[{"name":"dataSourceId","description":"Unique identifier of the target data source","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Data source detailed information","typeName":"IFlexOfficeDataSource"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/flexOffice/admin/dataSources/{dataSourceId}","method":"get"},{"specification":"This operation retrieves detailed information about a specific data source from the flex_office_data_sources table identified by its unique UUID. It provides all configuration parameters, status, and audit timestamps for comprehensive client display or management purposes. The data source type includes MySQL, PostgreSQL, Google Sheets, Excel, and others, as defined in the schema. Access is restricted to authorized roles including administrators and editors who manage data integration setups.","description":"Get detailed information of an external data source by its unique identifier. The data source can be of type MySQL, PostgreSQL, Google Sheets, Excel, etc.\n\nThe operation retrieves full configuration details, connection credentials reference, activation status, and audit data.\n\nThis API ensures that only authorized users can access sensitive data source configurations.\n\nRelationship exists with data source syncs, credentials, and external sheets enumerated separately.\n\nReturns the full data source record from the flex_office_data_sources table, matching the Prisma schema structure.","summary":"Retrieve detailed data source information by ID","parameters":[{"name":"dataSourceId","description":"Unique identifier of the target data source","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Data source detailed information","typeName":"IFlexOfficeDataSource"},"authorizationType":null,"authorizationRole":"editor","name":"at","path":"/flexOffice/editor/dataSources/{dataSourceId}","method":"get"},{"specification":"This operation creates a new external data source configuration in the flex_office_data_sources table. The input includes all required fields such as name, type (mysql, postgresql, google_sheet, excel), connection details, and active status. Upon creation, timestamps for creation and update are recorded. This operation is restricted to administrative and editor roles responsible for managing data source integrations.\n\nValidation ensures name uniqueness and connection details format correctness. The newly created data source record is returned as confirmation.","description":"Create a new external data source configuration, supporting types like MySQL, PostgreSQL, Google Sheets, and Excel.\n\nThe input includes connection information and activation flag. Proper validation of input data is expected.\n\nThe operation returns the newly created data source record with all properties as stored in the database.\n\nOnly authorized roles can perform creation to ensure system integrity.\n\nCorresponds to the flex_office_data_sources Prisma schema table.","summary":"Create a new data source configuration","parameters":[],"requestBody":{"description":"Data source creation input data","typeName":"IFlexOfficeDataSource.ICreate"},"responseBody":{"description":"Newly created data source information","typeName":"IFlexOfficeDataSource"},"authorizationType":null,"authorizationRole":"admin","name":"create","path":"/flexOffice/admin/dataSources","method":"post"},{"specification":"This operation creates a new external data source configuration in the flex_office_data_sources table. The input includes all required fields such as name, type (mysql, postgresql, google_sheet, excel), connection details, and active status. Upon creation, timestamps for creation and update are recorded. This operation is restricted to administrative and editor roles responsible for managing data source integrations.\n\nValidation ensures name uniqueness and connection details format correctness. The newly created data source record is returned as confirmation.","description":"Create a new external data source configuration, supporting types like MySQL, PostgreSQL, Google Sheets, and Excel.\n\nThe input includes connection information and activation flag. Proper validation of input data is expected.\n\nThe operation returns the newly created data source record with all properties as stored in the database.\n\nOnly authorized roles can perform creation to ensure system integrity.\n\nCorresponds to the flex_office_data_sources Prisma schema table.","summary":"Create a new data source configuration","parameters":[],"requestBody":{"description":"Data source creation input data","typeName":"IFlexOfficeDataSource.ICreate"},"responseBody":{"description":"Newly created data source information","typeName":"IFlexOfficeDataSource"},"authorizationType":null,"authorizationRole":"editor","name":"create","path":"/flexOffice/editor/dataSources","method":"post"},{"specification":"Update an existing external data source configuration identified by its unique UUID in the flex_office_data_sources table. This operation allows modifying fields such as name, type, connection info, and active status. Creation timestamp remains unchanged, while the updated_at timestamp is set to current time. Validation ensures the name remains unique and connection info format is valid. Access is restricted to administrators and editors with permission to manage data source settings.\n\nThe operation returns the updated data source record reflecting all changes.\n\nThis corresponds exactly to the flex_office_data_sources table specified in the Prisma schema.","description":"Update an existing data source's configuration given its unique identifier.\n\nThe input body includes editable fields. The record is updated accordingly.\n\nThe operation returns the updated data source object.\n\nAuthorization restricted to admin and editor roles for security reasons.\n\nMatches the Prisma schema structure for flex_office_data_sources updates.","summary":"Update an existing data source configuration","parameters":[{"name":"dataSourceId","description":"Unique identifier of the data source to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data source update input data","typeName":"IFlexOfficeDataSource.IUpdate"},"responseBody":{"description":"Updated data source information","typeName":"IFlexOfficeDataSource"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/flexOffice/admin/dataSources/{dataSourceId}","method":"put"},{"specification":"Update an existing external data source configuration identified by its unique UUID in the flex_office_data_sources table. This operation allows modifying fields such as name, type, connection info, and active status. Creation timestamp remains unchanged, while the updated_at timestamp is set to current time. Validation ensures the name remains unique and connection info format is valid. Access is restricted to administrators and editors with permission to manage data source settings.\n\nThe operation returns the updated data source record reflecting all changes.\n\nThis corresponds exactly to the flex_office_data_sources table specified in the Prisma schema.","description":"Update an existing data source's configuration given its unique identifier.\n\nThe input body includes editable fields. The record is updated accordingly.\n\nThe operation returns the updated data source object.\n\nAuthorization restricted to admin and editor roles for security reasons.\n\nMatches the Prisma schema structure for flex_office_data_sources updates.","summary":"Update an existing data source configuration","parameters":[{"name":"dataSourceId","description":"Unique identifier of the data source to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data source update input data","typeName":"IFlexOfficeDataSource.IUpdate"},"responseBody":{"description":"Updated data source information","typeName":"IFlexOfficeDataSource"},"authorizationType":null,"authorizationRole":"editor","name":"update","path":"/flexOffice/editor/dataSources/{dataSourceId}","method":"put"},{"specification":"This operation deletes a specific data source identified by its unique UUID from the FlexOffice system. It removes the data source configuration and all related synchronization records, credentials, external spreadsheets, and logs from the database, ensuring complete removal of the resource. The operation performs a hard delete, permanently removing the record since the Prisma schema includes a 'deleted_at' column that supports soft deletion but DELETE method here implies actual deletion. The endpoint requires the 'dataSourceId' parameter to target the resource.","description":"This API endpoint allows authorized users to permanently delete a data source in the FlexOffice platform by specifying its unique identifier.\n\nThe data source entity represents external databases or spreadsheets connected for integration. Deleting a data source removes all associated connection settings, credentials, sync schedules, and audit logs. This operation should only be performed by users with sufficient permissions as deletion is irreversible.\n\nSecurity-wise, only users with high-level roles such as administrators should be authorized to perform this deletion to avoid accidental loss of important integration links.\n\nSince the schema includes a 'deleted_at' field, this operation enforces hard deletion, permanently erasing the record to maintain data integrity and prevent orphaned relations.\n\nUsers of this API should ensure that related data is adequately backed up or no longer needed, as once deleted, data cannot be restored by this API.\n\nRelated endpoints include retrieving data source details (GET /dataSources/{dataSourceId}) and managing credentials for a given data source.\n\nPotential errors include attempting to delete a non-existent data source or lacking proper authorization.\n\nThis operation does not require a request body and does not return any content.","summary":"Hard delete a data source by dataSourceId","parameters":[{"name":"dataSourceId","in":"path","description":"Unique identifier of the data source to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"path":"/flexOffice/admin/dataSources/{dataSourceId}","method":"delete","name":"erase","authorizationRole":"admin","authorizationType":null},{"specification":"This operation retrieves a paginated list of credentials associated with a specified data source in the FlexOffice system. The credentials include authentication tokens like OAuth2 tokens and API keys used to access the data source. Users can search, filter, and paginate through the credentials. The endpoint requires the data source id as path parameter and supports complex search requests through a PATCH method. This operation is accessible only to administrators with the proper authorization role.","description":"This API endpoint allows an administrator to search and retrieve all credentials linked to a specific data source.\n\nCredentials encompass various authentication tokens or keys required for connecting to external data sources such as databases or cloud services.\n\nUsers can supply complex search criteria including filtering by credential type, expiration dates, or activity status.\n\nResponse data is paginated to efficiently handle potentially large sets of credentials.\n\nSecurity considerations require that only users with admin roles can access credential details because they hold sensitive authentication information.\n\nThis API supports usage scenarios where administrators need to audit, update, or manage authentication credentials securely.\n\nIt is related to endpoints creating new credentials or fetching individual credential details.\n\nThe request body defines the search and pagination parameters, while the response includes paginated credential summaries.","summary":"Search credentials for a specific data source","parameters":[{"name":"dataSourceId","in":"path","description":"Unique identifier of the data source to retrieve credentials for","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for data source credentials","typeName":"IFlexOfficeDataSourceCredential.IRequest"},"responseBody":{"description":"Paginated list of credential summary information matching search criteria","typeName":"IPageIFlexOfficeDataSourceCredential.ISummary"},"authorizationRoles":["admin"],"path":"/flexOffice/admin/dataSources/{dataSourceId}/credentials","method":"patch","name":"index","authorizationRole":"admin","authorizationType":null},{"specification":"This operation fetches a detailed information record of a single credential identified by its unique id and associated with a specific data source in the FlexOffice platform. Credentials hold authentication details like tokens or API keys used to connect to external data sources. The request requires the dataSourceId and credentialId as path parameters. Only administrators are authorized to access this endpoint.","description":"This API endpoint returns detailed information about a specific credential used to access a linked data source.\n\nCredentials contain sensitive authentication tokens necessary for connecting to external data sources such as databases or online spreadsheets.\n\nThe operation requires both the unique identifier of the data source and the credential itself to ensure scoped and secure access.\n\nUsers invoking this endpoint must hold admin privileges due to the sensitive nature of the data.\n\nThis operation complements endpoints that list credentials and allow creation or modification of credentials.\n\nPotential errors include invalid identifier parameters or permission denials.\n\nNo request body is required; the response returns a full credential object.","summary":"Retrieve detailed information of a data source credential","parameters":[{"name":"dataSourceId","in":"path","description":"Unique identifier of the data source to which the credential belongs","schema":{"type":"string","format":"uuid"}},{"name":"credentialId","in":"path","description":"Unique identifier of the credential to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the requested data source credential","typeName":"IFlexOfficeDataSourceCredential"},"authorizationRoles":["admin"],"path":"/flexOffice/admin/dataSources/{dataSourceId}/credentials/{credentialId}","method":"get","name":"at","authorizationRole":"admin","authorizationType":null},{"specification":"This operation creates a new credential entry associated with a specific data source within FlexOffice. Credentials represent authentication information such as OAuth2 tokens or API keys necessary for connecting to data sources. The request provides the creation data in the body and requires the dataSourceId path parameter. Only administrators have permission to create credentials. The response returns the newly created credential record.","description":"This API endpoint enables administrators to add a new authentication credential for an existing data source.\n\nCredentials include OAuth2 tokens, API keys, or other secret tokens granting access to external databases or services.\n\nThe creation request must include all necessary credential details according to the IFlexOfficeDataSourceCredential.ICreate schema.\n\nUpon success, the endpoint returns the full credential object including identifiers and timestamps.\n\nBeing a sensitive operation, only admin users can perform credential creation to ensure security and compliance.\n\nRelated endpoints allow searching credentials, retrieving details for individual credentials, or deleting them.\n\nErrors may arise from invalid input data or unauthorized access attempts.\n\nThe operation uses the POST method with a detailed request body and returns the created resource in the response.","summary":"Create a new credential for a data source","parameters":[{"name":"dataSourceId","in":"path","description":"Unique identifier of the data source to add a credential for","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Creation info of the new data source credential","typeName":"IFlexOfficeDataSourceCredential.ICreate"},"responseBody":{"description":"Information of the newly created data source credential","typeName":"IFlexOfficeDataSourceCredential"},"authorizationRoles":["admin"],"path":"/flexOffice/admin/dataSources/{dataSourceId}/credentials","method":"post","name":"create","authorizationRole":"admin","authorizationType":null},{"specification":"This operation updates specific credential details associated with a given data source in the FlexOffice system, referencing the flex_office_data_source_credentials table of the Prisma schema. It allows modification of credential information such as credential type, value, and expiration. The operation requires the data source ID and credential ID as path parameters to precisely identify the target record. Only authenticated users with appropriate roles can perform this update, ensuring secure management of sensitive access credentials. Validation includes verifying existence of given IDs and ensuring updated credential values comply with security standards.","description":"Update a credential associated with a data source in the FlexOffice backend system. This operation targets the flex_office_data_source_credentials table, which stores authentication credentials like OAuth2 tokens or API keys for external data sources.\n\nThe update requires precise identification via the dataSourceId and credentialId path parameters.\n\nUsers with appropriate authorization can modify credential_type, credential_value, and expires_at for improved security or credential refresh. The system maintains audit timestamps created_at and updated_at automatically.\n\nSecurity is critical as credentials grant access to external databases; thus, strict validation and role-based access control apply. Errors for invalid IDs or unauthorized attempts will be returned accordingly.\n\nRelated operations include creating new credentials, deleting credentials, and managing data sources themselves.","summary":"Update credential details for a specific data source","parameters":[{"name":"dataSourceId","description":"Unique identifier of the data source to which the credential belongs","schema":{"type":"string","format":"uuid"}},{"name":"credentialId","description":"Unique identifier of the credential to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Credential update payload containing type, value, and expiration","typeName":"IFlexOfficeDataSourceCredential.IUpdate"},"responseBody":{"description":"Updated credential information","typeName":"IFlexOfficeDataSourceCredential"},"authorizationRoles":["admin","editor"],"path":"/flexOffice/admin/dataSources/{dataSourceId}/credentials/{credentialId}","method":"put","name":"updateCredential","authorizationRole":"admin","authorizationType":null},{"specification":"This operation updates specific credential details associated with a given data source in the FlexOffice system, referencing the flex_office_data_source_credentials table of the Prisma schema. It allows modification of credential information such as credential type, value, and expiration. The operation requires the data source ID and credential ID as path parameters to precisely identify the target record. Only authenticated users with appropriate roles can perform this update, ensuring secure management of sensitive access credentials. Validation includes verifying existence of given IDs and ensuring updated credential values comply with security standards.","description":"Update a credential associated with a data source in the FlexOffice backend system. This operation targets the flex_office_data_source_credentials table, which stores authentication credentials like OAuth2 tokens or API keys for external data sources.\n\nThe update requires precise identification via the dataSourceId and credentialId path parameters.\n\nUsers with appropriate authorization can modify credential_type, credential_value, and expires_at for improved security or credential refresh. The system maintains audit timestamps created_at and updated_at automatically.\n\nSecurity is critical as credentials grant access to external databases; thus, strict validation and role-based access control apply. Errors for invalid IDs or unauthorized attempts will be returned accordingly.\n\nRelated operations include creating new credentials, deleting credentials, and managing data sources themselves.","summary":"Update credential details for a specific data source","parameters":[{"name":"dataSourceId","description":"Unique identifier of the data source to which the credential belongs","schema":{"type":"string","format":"uuid"}},{"name":"credentialId","description":"Unique identifier of the credential to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Credential update payload containing type, value, and expiration","typeName":"IFlexOfficeDataSourceCredential.IUpdate"},"responseBody":{"description":"Updated credential information","typeName":"IFlexOfficeDataSourceCredential"},"authorizationRoles":["admin","editor"],"path":"/flexOffice/editor/dataSources/{dataSourceId}/credentials/{credentialId}","method":"put","name":"updateCredential","authorizationRole":"editor","authorizationType":null},{"specification":"This operation permanently removes a specified credential from a data source in the FlexOffice system, represented by the flex_office_data_source_credentials table. It requires the data source ID and credential ID as path parameters to identify the target credential record to delete. Deletion is a hard delete, removing the credential record completely from the database with no soft delete flag found in the schema, ensuring the credential cannot be reused or recovered. This operation enforces strict permission controls, allowing only authorized administrators or editors to remove sensitive authentication credentials.","description":"Erase a credential for a given data source identified by dataSourceId and credentialId. This operation deletes the credential record permanently from the flex_office_data_source_credentials table.\n\nDue to the sensitive nature of credentials controlling access to external data sources, this operation is restricted to authorized roles (admin, editor).\n\nThe operation ensures no residual data remains after deletion, supporting security compliance.\n\nRelated operations include creating and updating credentials and managing data sources.","summary":"Erase a credential from a data source permanently","parameters":[{"name":"dataSourceId","description":"Unique identifier of the data source owning the credential","schema":{"type":"string","format":"uuid"}},{"name":"credentialId","description":"Unique identifier of the credential to erase","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","editor"],"path":"/flexOffice/admin/dataSources/{dataSourceId}/credentials/{credentialId}","method":"delete","name":"eraseCredential","authorizationRole":"admin","authorizationType":null},{"specification":"This operation permanently removes a specified credential from a data source in the FlexOffice system, represented by the flex_office_data_source_credentials table. It requires the data source ID and credential ID as path parameters to identify the target credential record to delete. Deletion is a hard delete, removing the credential record completely from the database with no soft delete flag found in the schema, ensuring the credential cannot be reused or recovered. This operation enforces strict permission controls, allowing only authorized administrators or editors to remove sensitive authentication credentials.","description":"Erase a credential for a given data source identified by dataSourceId and credentialId. This operation deletes the credential record permanently from the flex_office_data_source_credentials table.\n\nDue to the sensitive nature of credentials controlling access to external data sources, this operation is restricted to authorized roles (admin, editor).\n\nThe operation ensures no residual data remains after deletion, supporting security compliance.\n\nRelated operations include creating and updating credentials and managing data sources.","summary":"Erase a credential from a data source permanently","parameters":[{"name":"dataSourceId","description":"Unique identifier of the data source owning the credential","schema":{"type":"string","format":"uuid"}},{"name":"credentialId","description":"Unique identifier of the credential to erase","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","editor"],"path":"/flexOffice/editor/dataSources/{dataSourceId}/credentials/{credentialId}","method":"delete","name":"eraseCredential","authorizationRole":"editor","authorizationType":null},{"specification":"This operation retrieves a paginated list of synchronization records for a specified data source in FlexOffice, referencing the flex_office_data_source_syncs table. It accepts complex search filters, sorting, and pagination options via the request body to enable efficient querying of scheduled and executed sync operations. The data source is identified via the dataSourceId path parameter. Returned data includes sync details such as scheduling, status, and error messages, supporting monitoring and management of data refresh jobs. Authorization restricts access to authorized users with admin or editor roles.","description":"Search synchronization operations of a particular data source identified by dataSourceId. Supports advanced filters, pagination, and sorting to navigate sync history and status.\n\nThis operation facilitates monitoring and management of data refresh jobs, enabling display of sync scheduling, completion status, errors, and timing.\n\nRole-based access ensures only authorized users can review synchronization logs for secure operations.\n\nRelated operations include retrieving specific sync details and managing data source configurations.","summary":"Search and retrieve paginated sync operation records for a data source","parameters":[{"name":"dataSourceId","description":"Unique identifier of the target data source","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search filters and pagination info for data source syncs","typeName":"IFlexOfficeDataSourceSync.IRequest"},"responseBody":{"description":"Paginated list of sync operation records matching criteria","typeName":"IPageIFlexOfficeDataSourceSync"},"authorizationRoles":["admin","editor"],"path":"/flexOffice/admin/dataSources/{dataSourceId}/syncs","method":"patch","name":"searchSyncs","authorizationRole":"admin","authorizationType":null},{"specification":"This operation retrieves a paginated list of synchronization records for a specified data source in FlexOffice, referencing the flex_office_data_source_syncs table. It accepts complex search filters, sorting, and pagination options via the request body to enable efficient querying of scheduled and executed sync operations. The data source is identified via the dataSourceId path parameter. Returned data includes sync details such as scheduling, status, and error messages, supporting monitoring and management of data refresh jobs. Authorization restricts access to authorized users with admin or editor roles.","description":"Search synchronization operations of a particular data source identified by dataSourceId. Supports advanced filters, pagination, and sorting to navigate sync history and status.\n\nThis operation facilitates monitoring and management of data refresh jobs, enabling display of sync scheduling, completion status, errors, and timing.\n\nRole-based access ensures only authorized users can review synchronization logs for secure operations.\n\nRelated operations include retrieving specific sync details and managing data source configurations.","summary":"Search and retrieve paginated sync operation records for a data source","parameters":[{"name":"dataSourceId","description":"Unique identifier of the target data source","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search filters and pagination info for data source syncs","typeName":"IFlexOfficeDataSourceSync.IRequest"},"responseBody":{"description":"Paginated list of sync operation records matching criteria","typeName":"IPageIFlexOfficeDataSourceSync"},"authorizationRoles":["admin","editor"],"path":"/flexOffice/editor/dataSources/{dataSourceId}/syncs","method":"patch","name":"searchSyncs","authorizationRole":"editor","authorizationType":null},{"specification":"This operation retrieves detailed information for a single synchronization record identified by syncId associated with a specific data source identified by dataSourceId within the FlexOffice system. It returns sync metadata such as scheduled time, status, start and completion timestamps, and error messages from the flex_office_data_source_syncs table. It supports monitoring and audit of data refresh operations with access restricted to authorized users (admin and editor roles).","description":"Get detailed synchronization information by syncId for data source identified by dataSourceId. Provides status, timing, error message details of sync operation.\n\nEnsures authorized access control and accurate identification with composite primary keys.\n\nRelated operations include searching sync logs and managing data sources.","summary":"Retrieve detailed synchronization status by ID for a data source","parameters":[{"name":"dataSourceId","description":"Unique identifier of the data source containing the sync record","schema":{"type":"string","format":"uuid"}},{"name":"syncId","description":"Unique identifier of the synchronization record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Synchronization record details","typeName":"IFlexOfficeDataSourceSync"},"authorizationRoles":["admin","editor"],"path":"/flexOffice/admin/dataSources/{dataSourceId}/syncs/{syncId}","method":"get","name":"atSync","authorizationRole":"admin","authorizationType":null},{"specification":"This operation retrieves detailed information for a single synchronization record identified by syncId associated with a specific data source identified by dataSourceId within the FlexOffice system. It returns sync metadata such as scheduled time, status, start and completion timestamps, and error messages from the flex_office_data_source_syncs table. It supports monitoring and audit of data refresh operations with access restricted to authorized users (admin and editor roles).","description":"Get detailed synchronization information by syncId for data source identified by dataSourceId. Provides status, timing, error message details of sync operation.\n\nEnsures authorized access control and accurate identification with composite primary keys.\n\nRelated operations include searching sync logs and managing data sources.","summary":"Retrieve detailed synchronization status by ID for a data source","parameters":[{"name":"dataSourceId","description":"Unique identifier of the data source containing the sync record","schema":{"type":"string","format":"uuid"}},{"name":"syncId","description":"Unique identifier of the synchronization record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Synchronization record details","typeName":"IFlexOfficeDataSourceSync"},"authorizationRoles":["admin","editor"],"path":"/flexOffice/editor/dataSources/{dataSourceId}/syncs/{syncId}","method":"get","name":"atSync","authorizationRole":"editor","authorizationType":null},{"specification":"This operation creates a new synchronization record for a specific data source in the FlexOffice system. It is associated with the flex_office_data_source_syncs table from the Prisma schema, which tracks all synchronization jobs scheduled or executed for external data sources. This allows users (typically admins or system services) to initiate fresh synchronizations on demand or schedule automatic data refreshes. The operation requires the dataSourceId as a path parameter to identify which data source is to be synchronized, and expects a creation request body (IFlexOfficeDataSourceSync.ICreate) specifying relevant sync parameters. Upon success, it returns the created sync entity detailing scheduling, status, and timing info.","description":"Create a new synchronization task for an external data source within FlexOffice. This operation accepts parameters defining the synchronization schedule and any initial execution metadata.\n\nIt is linked to the flex_office_data_source_syncs table that records sync schedules, statuses, execution timestamps, and error messages if any. Users must provide the dataSourceId identifying the data source to sync.\n\nSecurity is critical: only authorized users like system administrators should invoke this operation due to potential impact on system workload and data consistency.\n\nInput validation ensures correct scheduling timestamps and proper initial state setup. The newly created sync record is persisted with creation and update timestamps.\n\nThis API is commonly used in data integration workflows and supports retry mechanisms through subsequent update operations.\n\nIf the dataSourceId does not exist, the operation will fail with an appropriate error.","summary":"Create a synchronization task for a specific data source","parameters":[{"name":"dataSourceId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Identifier of the data source to synchronize"}],"requestBody":{"description":"Synchronization task creation parameters","typeName":"IFlexOfficeDataSourceSync.ICreate"},"responseBody":{"description":"Created synchronization task information","typeName":"IFlexOfficeDataSourceSync"},"authorizationRoles":["admin"],"path":"/flexOffice/admin/dataSources/{dataSourceId}/syncs","method":"post","authorizationType":null,"authorizationRole":"admin","name":"createSync"},{"specification":"This operation creates a new synchronization run entry for a specified external data source in the FlexOffice system, leveraging the 'flex_office_data_source_syncs' table from the Prisma schema. It accepts the dataSourceId as a path parameter to specify which data source to sync. Upon creation, a new sync record is added with scheduling and status information managed by the server. This supports the users' ability to trigger data refresh operations for external sources such as databases or spreadsheets respecting connection info and sync policies. Business logic ensures that only valid dataSourceId values are accepted, and proper permissions restrict who can trigger syncs. The system maintains detailed timestamps for audit and retry mechanisms.","description":"This API operation creates a new synchronization attempt record linked to an existing data source in the system. It enables authorized users to trigger or schedule a new sync job for updating data from external sources like MySQL, PostgreSQL databases or uploaded spreadsheets.\n\nThe 'dataSourceId' path parameter identifies the exact external data source to be synchronized. The operation verifies that the provided dataSourceId references an active and valid data source record.\n\nUpon invocation, a new flex_office_data_source_syncs record is created with initial scheduling and status fields setup to mark a scheduled sync. The system will later update this record with actual run timestamps, completion status, and errors if any.\n\nSecurity considerations restrict this operation to authorized roles able to manage synchronization tasks. Permissions ensure users only trigger syncs for data sources they are permitted to access.\n\nRelated operations include querying sync job histories, updating sync records, and deleting obsolete sync tasks, which help manage data refresh workflows comprehensively.\n\nClient applications should handle potential errors such as invalid dataSourceId, permission denials, or system failures gracefully.\n\nThis operation does not require a request body beyond the path parameter and returns the newly created sync record on success.","summary":"Create a new synchronization task for a specified data source","parameters":[{"name":"dataSourceId","in":"path","description":"Unique identifier of the external data source","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information to create a new sync task","typeName":"IFlexOfficeDataSourceSync.ICreate"},"responseBody":{"description":"Details of the created synchronization task","typeName":"IFlexOfficeDataSourceSync"},"authorizationRoles":["admin","editor"],"path":"/flexOffice/editor/dataSources/{dataSourceId}/syncs","method":"post","authorizationType":null,"authorizationRole":"editor","name":"createSync"},{"specification":"This operation updates an existing synchronization record's details for a specific data source in FlexOffice. It operates on the flex_office_data_source_syncs table that tracks scheduled and executed sync jobs. The path parameters dataSourceId and syncId identify which sync job is being updated. The request body (IFlexOfficeDataSourceSync.IUpdate) provides fields to modify such as status, scheduling time, or error messages.\n\nUsage of this API is restricted to authorized administrators to maintain data integrity. On successful update, the revised sync entity with updated timestamps and state is returned.\n\nProper validation ensures only valid state transitions and data formats are accepted. Attempts to update non-existent records result in errors.","description":"Update synchronization task details for a data source in FlexOffice. This includes modifying schedule, status, or error information.\n\nThe operation targets a specific sync record identified by dataSourceId and syncId. Only administrators are authorized to make such changes.\n\nData integrity checks confirm that updates follow valid state progressions and accurate timestamp formats. Upon success, the updated synchronization record is returned.\n\nThis supports operational management of automated or manual data refresh workflows.","summary":"Update synchronization task details for a specific data source","parameters":[{"name":"dataSourceId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Identifier of the data source owning the sync task"},{"name":"syncId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Identifier of the synchronization task to update"}],"requestBody":{"description":"Synchronization task update details","typeName":"IFlexOfficeDataSourceSync.IUpdate"},"responseBody":{"description":"Updated synchronization task information","typeName":"IFlexOfficeDataSourceSync"},"authorizationRoles":["admin"],"path":"/flexOffice/admin/dataSources/{dataSourceId}/syncs/{syncId}","method":"put","authorizationType":null,"authorizationRole":"admin","name":"updateSync"},{"specification":"This operation deletes a synchronization record from a specific data source in the FlexOffice system. It refers to the flex_office_data_source_syncs table, which stores all synchronization tasks. The path parameters include dataSourceId to specify the parent data source and syncId identifying which specific sync task to delete.\n\nSince the Prisma schema supports soft deletion through a nullable deleted_at field, this operation performs a soft delete by setting deleted_at timestamp, thus preserving historical data for auditing and recovery.\n\nOnly users with administrator roles are authorized to delete synchronization tasks to prevent accidental loss of critical operation data.\n\nThe operation does not require a request body and returns no response body on success. Attempts to delete non-existent tasks or unauthorized access are rejected with error responses.","description":"Soft delete (mark as deleted) a synchronization task for an external data source. This preserves the record for audit purposes while preventing further execution.\n\nThe operation is applicable only to administrators for security and compliance reasons.\n\nSetting the deleted_at timestamp flags the record as inactive without physically removing it from the database.\n\nNo request body is needed and there is no content returned on success.\n\nThis API enhances operational control over sync tasks and maintains data lineage for forensic review.","summary":"Soft delete a synchronization task for a specific data source","parameters":[{"name":"dataSourceId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Data source identifier to which the sync task belongs"},{"name":"syncId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Identifier of the sync task to be soft deleted"}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"path":"/flexOffice/admin/dataSources/{dataSourceId}/syncs/{syncId}","method":"delete","authorizationType":null,"authorizationRole":"admin","name":"eraseSync"},{"specification":"This operation retrieves and searches through the metadata records of externally uploaded spreadsheets (such as Google Sheets and Excel files) linked to a particular data source in FlexOffice. It operates on the flex_office_external_sheets table.\n\nThe dataSourceId parameter specifies the target data source for which associated external sheets are listed. This operation supports filtering, pagination, and sorting through a search request body.\n\nThe response includes a paginated list of external sheets matching the query criteria.\n\nThis API is essential for managing external spreadsheet integrations and their synchronization status in the data source management workflow.\n\nAccess to this operation is restricted to admin users for security and data privacy.","description":"Search and retrieve external spreadsheet records associated with a data source. Supports filtering and pagination.\n\nThis operation reads data from the flex_office_external_sheets table and returns relevant metadata such as file names, URLs, sheet counts, and last synced timestamps.\n\nSecurity is restricted to administrator roles due to sensitive external data access.\n\nThe request allows specifying search parameters to filter and paginate results efficiently.\n\nThe response contains the matched external sheet records in paginated form for user display and management.","summary":"Search external sheets linked to a data source","parameters":[{"name":"dataSourceId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Identifier of the data source to filter external sheets"}],"requestBody":{"description":"External sheet search criteria and pagination parameters","typeName":"IFlexOfficeExternalSheet.IRequest"},"responseBody":{"description":"Paginated list of external sheet metadata matching search criteria","typeName":"IPageIFlexOfficeExternalSheet.ISummary"},"authorizationRoles":["admin"],"path":"/flexOffice/admin/dataSources/{dataSourceId}/externalSheets","method":"patch","authorizationType":null,"authorizationRole":"admin","name":"searchExternalSheets"},{"specification":"This operation retrieves detailed information about a specific external sheet linked to a data source in the FlexOffice platform. It accesses the 'flex_office_external_sheets' table using the provided dataSourceId and sheetId as path parameters. The operation returns the sheet metadata including file name, file URL, sheet count, last synchronization timestamp, and audit fields.","description":"Retrieve detailed metadata for an external sheet associated with the specified data source. This operation is intended for authorized users who need to view file information including the sheet count and last synchronization times.\n\nAccess control restricts this operation to users with the appropriate permissions (admin, editor, or viewer) as defined by the system's role-based access controls. The operation references the 'flex_office_external_sheets' Prisma schema table ensuring data consistency.\n\nInvalid or missing IDs will cause appropriate error responses. The API is designed to work congruently with create, update, and delete operations for full lifecycle management of external sheets.","summary":"Retrieve metadata of a specific external sheet linked to a data source","parameters":[{"name":"dataSourceId","in":"path","description":"Unique identifier of the target data source","schema":{"type":"string","format":"uuid"}},{"name":"sheetId","in":"path","description":"Unique identifier of the target external sheet","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"External sheet metadata object","typeName":"IFlexOfficeExternalSheet"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/flexOffice/admin/dataSources/{dataSourceId}/externalSheets/{sheetId}","method":"get"},{"specification":"This operation retrieves detailed information about a specific external sheet linked to a data source in the FlexOffice platform. It accesses the 'flex_office_external_sheets' table using the provided dataSourceId and sheetId as path parameters. The operation returns the sheet metadata including file name, file URL, sheet count, last synchronization timestamp, and audit fields.","description":"Retrieve detailed metadata for an external sheet associated with the specified data source. This operation is intended for authorized users who need to view file information including the sheet count and last synchronization times.\n\nAccess control restricts this operation to users with the appropriate permissions (admin, editor, or viewer) as defined by the system's role-based access controls. The operation references the 'flex_office_external_sheets' Prisma schema table ensuring data consistency.\n\nInvalid or missing IDs will cause appropriate error responses. The API is designed to work congruently with create, update, and delete operations for full lifecycle management of external sheets.","summary":"Retrieve metadata of a specific external sheet linked to a data source","parameters":[{"name":"dataSourceId","in":"path","description":"Unique identifier of the target data source","schema":{"type":"string","format":"uuid"}},{"name":"sheetId","in":"path","description":"Unique identifier of the target external sheet","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"External sheet metadata object","typeName":"IFlexOfficeExternalSheet"},"authorizationType":null,"authorizationRole":"editor","name":"at","path":"/flexOffice/editor/dataSources/{dataSourceId}/externalSheets/{sheetId}","method":"get"},{"specification":"This operation retrieves detailed information about a specific external sheet linked to a data source in the FlexOffice platform. It accesses the 'flex_office_external_sheets' table using the provided dataSourceId and sheetId as path parameters. The operation returns the sheet metadata including file name, file URL, sheet count, last synchronization timestamp, and audit fields.","description":"Retrieve detailed metadata for an external sheet associated with the specified data source. This operation is intended for authorized users who need to view file information including the sheet count and last synchronization times.\n\nAccess control restricts this operation to users with the appropriate permissions (admin, editor, or viewer) as defined by the system's role-based access controls. The operation references the 'flex_office_external_sheets' Prisma schema table ensuring data consistency.\n\nInvalid or missing IDs will cause appropriate error responses. The API is designed to work congruently with create, update, and delete operations for full lifecycle management of external sheets.","summary":"Retrieve metadata of a specific external sheet linked to a data source","parameters":[{"name":"dataSourceId","in":"path","description":"Unique identifier of the target data source","schema":{"type":"string","format":"uuid"}},{"name":"sheetId","in":"path","description":"Unique identifier of the target external sheet","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"External sheet metadata object","typeName":"IFlexOfficeExternalSheet"},"authorizationType":null,"authorizationRole":"viewer","name":"at","path":"/flexOffice/viewer/dataSources/{dataSourceId}/externalSheets/{sheetId}","method":"get"},{"specification":"This operation creates a new external sheet metadata record under the specified data source in the FlexOffice platform. It manipulates the 'flex_office_external_sheets' table defined in the Prisma schema. Required fields include file name, file URL, sheet count, and data source association. The operation validates uniqueness of the file URL and ensures consistency in data source references.\n\nOnly users with roles 'admin' or 'editor' have permission to perform creation. Upon successful creation, the API returns the newly created external sheet object with audit timestamps and soft delete status.\n\nError responses are issued for validation failures such as duplicate file URLs or missing required fields.","description":"Create a new external sheet metadata entry linked to a data source. The client must supply the file name, file URL, and sheet count. This facilitates the integration of external spreadsheet data into FlexOffice systems.\n\nAccess is limited to authorized admin or editor users. The operation enforces constraints from the Prisma schema on data uniqueness and integrity.\n\nSupports full lifecycle management with related update and delete operations.","summary":"Create an external sheet record for a data source","parameters":[{"name":"dataSourceId","in":"path","description":"Unique identifier of the target data source","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"External sheet creation data","typeName":"IFlexOfficeExternalSheet.ICreate"},"responseBody":{"description":"Created external sheet metadata","typeName":"IFlexOfficeExternalSheet"},"authorizationType":null,"authorizationRole":"admin","name":"create","path":"/flexOffice/admin/dataSources/{dataSourceId}/externalSheets","method":"post"},{"specification":"This operation creates a new external sheet metadata record under the specified data source in the FlexOffice platform. It manipulates the 'flex_office_external_sheets' table defined in the Prisma schema. Required fields include file name, file URL, sheet count, and data source association. The operation validates uniqueness of the file URL and ensures consistency in data source references.\n\nOnly users with roles 'admin' or 'editor' have permission to perform creation. Upon successful creation, the API returns the newly created external sheet object with audit timestamps and soft delete status.\n\nError responses are issued for validation failures such as duplicate file URLs or missing required fields.","description":"Create a new external sheet metadata entry linked to a data source. The client must supply the file name, file URL, and sheet count. This facilitates the integration of external spreadsheet data into FlexOffice systems.\n\nAccess is limited to authorized admin or editor users. The operation enforces constraints from the Prisma schema on data uniqueness and integrity.\n\nSupports full lifecycle management with related update and delete operations.","summary":"Create an external sheet record for a data source","parameters":[{"name":"dataSourceId","in":"path","description":"Unique identifier of the target data source","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"External sheet creation data","typeName":"IFlexOfficeExternalSheet.ICreate"},"responseBody":{"description":"Created external sheet metadata","typeName":"IFlexOfficeExternalSheet"},"authorizationType":null,"authorizationRole":"editor","name":"create","path":"/flexOffice/editor/dataSources/{dataSourceId}/externalSheets","method":"post"},{"specification":"This operation updates an existing external sheet metadata record under a specified data source. It applies to the 'flex_office_external_sheets' table in the Prisma schema. The client must provide both dataSourceId and sheetId as path parameters and supply update payload fields.\n\nAllowed updates include file name, file URL, sheet count, last synchronization timestamp, and audit fields. Validation ensures unique file URLs and existing record linkage. Only authorized users ('admin' or 'editor') may perform updates.\n\nThe operation returns the updated external sheet record to confirm successful modification and ensure client synchronization.","description":"Update metadata details of an existing external sheet associated with a data source. Updates include file name, URL, sheet count, and last synced timestamp.\n\nThis operation mandates authorization of admin or editor roles, enforcing access control policies. It aligns with the 'flex_office_external_sheets' Prisma table schema for accurate data manipulation.\n\nThe API supports concurrency checks and rejects invalid updates with appropriate error responses.","summary":"Update an external sheet metadata record for a given data source and sheet","parameters":[{"name":"dataSourceId","in":"path","description":"Unique identifier of the target data source","schema":{"type":"string","format":"uuid"}},{"name":"sheetId","in":"path","description":"Unique identifier of the target external sheet","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"External sheet update data","typeName":"IFlexOfficeExternalSheet.IUpdate"},"responseBody":{"description":"Updated external sheet metadata","typeName":"IFlexOfficeExternalSheet"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/flexOffice/admin/dataSources/{dataSourceId}/externalSheets/{sheetId}","method":"put"},{"specification":"This operation updates an existing external sheet metadata record under a specified data source. It applies to the 'flex_office_external_sheets' table in the Prisma schema. The client must provide both dataSourceId and sheetId as path parameters and supply update payload fields.\n\nAllowed updates include file name, file URL, sheet count, last synchronization timestamp, and audit fields. Validation ensures unique file URLs and existing record linkage. Only authorized users ('admin' or 'editor') may perform updates.\n\nThe operation returns the updated external sheet record to confirm successful modification and ensure client synchronization.","description":"Update metadata details of an existing external sheet associated with a data source. Updates include file name, URL, sheet count, and last synced timestamp.\n\nThis operation mandates authorization of admin or editor roles, enforcing access control policies. It aligns with the 'flex_office_external_sheets' Prisma table schema for accurate data manipulation.\n\nThe API supports concurrency checks and rejects invalid updates with appropriate error responses.","summary":"Update an external sheet metadata record for a given data source and sheet","parameters":[{"name":"dataSourceId","in":"path","description":"Unique identifier of the target data source","schema":{"type":"string","format":"uuid"}},{"name":"sheetId","in":"path","description":"Unique identifier of the target external sheet","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"External sheet update data","typeName":"IFlexOfficeExternalSheet.IUpdate"},"responseBody":{"description":"Updated external sheet metadata","typeName":"IFlexOfficeExternalSheet"},"authorizationType":null,"authorizationRole":"editor","name":"update","path":"/flexOffice/editor/dataSources/{dataSourceId}/externalSheets/{sheetId}","method":"put"},{"specification":"This operation performs a soft delete on an external sheet record linked to a specific data source. It targets the 'flex_office_external_sheets' table in the Prisma schema by setting the 'deleted_at' timestamp to mark the record as deleted without physical removal.\n\nThe operation requires both dataSourceId and sheetId as path parameters. Only users with roles 'admin' or 'editor' are authorized to perform the deletion. The soft delete preserves audit trail integrity and enables possible recovery.\n\nNo response body is returned upon success. The operation must gracefully handle attempts to delete non-existent or already deleted records.","description":"Soft delete an external sheet linked to a data source by marking it as deleted via the 'deleted_at' timestamp. This operation supports auditability by avoiding physical deletion.\n\nOnly authorized admin or editor users can perform this operation to ensure data integrity and compliance.\n\nIt complements create and update operations providing a full lifecycle management API for external sheets.","summary":"Soft delete an external sheet record from a data source","parameters":[{"name":"dataSourceId","in":"path","description":"Unique identifier of the target data source","schema":{"type":"string","format":"uuid"}},{"name":"sheetId","in":"path","description":"Unique identifier of the target external sheet","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/flexOffice/admin/dataSources/{dataSourceId}/externalSheets/{sheetId}","method":"delete"},{"specification":"This operation performs a soft delete on an external sheet record linked to a specific data source. It targets the 'flex_office_external_sheets' table in the Prisma schema by setting the 'deleted_at' timestamp to mark the record as deleted without physical removal.\n\nThe operation requires both dataSourceId and sheetId as path parameters. Only users with roles 'admin' or 'editor' are authorized to perform the deletion. The soft delete preserves audit trail integrity and enables possible recovery.\n\nNo response body is returned upon success. The operation must gracefully handle attempts to delete non-existent or already deleted records.","description":"Soft delete an external sheet linked to a data source by marking it as deleted via the 'deleted_at' timestamp. This operation supports auditability by avoiding physical deletion.\n\nOnly authorized admin or editor users can perform this operation to ensure data integrity and compliance.\n\nIt complements create and update operations providing a full lifecycle management API for external sheets.","summary":"Soft delete an external sheet record from a data source","parameters":[{"name":"dataSourceId","in":"path","description":"Unique identifier of the target data source","schema":{"type":"string","format":"uuid"}},{"name":"sheetId","in":"path","description":"Unique identifier of the target external sheet","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"editor","name":"erase","path":"/flexOffice/editor/dataSources/{dataSourceId}/externalSheets/{sheetId}","method":"delete"},{"specification":"This operation retrieves a filtered, paginated list of data source log entries from the flex_office_data_source_logs table. The logs capture audit and operational events related to external data sources such as connection attempts, errors, or informational messages. Users can query logs by filters such as log level, timestamp ranges, and specific data source associations.","description":"Retrieve a paginated list of data source logs from the system. Each log entry records the severity, message, timestamp, and optionally the user involved in the event. \n\nThis operation supports filtering and pagination, allowing administrators to monitor data source health and troubleshoot issues efficiently.\n\nSecurity considerations include limiting access to authorized users due to sensitive operational details.\n\nThe underlying data is stored in the flex_office_data_source_logs table, which records event details with creation and update timestamps. \n\nThis operation returns summarized log entries matching the search criteria.","summary":"Search and retrieve a filtered, paginated list of data source logs","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for data source logs filtering","typeName":"IFlexOfficeDataSourceLog.IRequest"},"responseBody":{"description":"Paginated list of data source log entries matching search criteria","typeName":"IPageIFlexOfficeDataSourceLog.ISummary"},"authorizationType":null,"authorizationRole":"admin","path":"/flexOffice/admin/dataSourceLogs","method":"patch","name":"search"},{"specification":"This operation retrieves detailed information about a specific data source log entry by its ID from the flex_office_data_source_logs table. The log includes log level, message, timestamp, and user attribution if applicable.\n\nThis enables administrators to review detailed audit and operational events for diagnostics and compliance.","description":"Fetch detailed information of a single data source log entry specified by logId. The log entry recorded event details, severity, timestamp, and relevant user identification if available.\n\nAccess to this operation should be restricted to authorized administrators.\n\nThe underlying data is stored in the flex_office_data_source_logs table. \n\nReturns full log entry details for inspection.","summary":"Retrieve detailed data source log entry by ID","parameters":[{"name":"logId","description":"Unique identifier of the target data source log entry","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed data source log entry information","typeName":"IFlexOfficeDataSourceLog"},"authorizationType":null,"authorizationRole":"admin","path":"/flexOffice/admin/dataSourceLogs/{logId}","method":"get","name":"at"},{"specification":"Retrieve a filtered and paginated list of active page editors currently editing pages for collaboration management. This data is stored in the flex_office_page_editors table which tracks which editors are active on which pages along with timestamps and soft deletion markers.\n\nThis operation supports searching, filtering, and pagination to help manage active editing sessions and enforce concurrent editor limits.","description":"Get a list of page editors currently active on pages with support for pagination and filtering. Each record shows editor and page associations and timestamps.\n\nThis operation allows administrators and editors to see concurrent editing activity.\n\nUnderlying data is sourced from the flex_office_page_editors table with fields for page and editor references, and session timestamps.\n\nReturns paginated, filtered list of active page editors.","summary":"Search and retrieve a paginated list of active page editors","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for page editors filtering","typeName":"IFlexOfficePageEditor.IRequest"},"responseBody":{"description":"Paginated list of active page editors matching search criteria","typeName":"IPageIFlexOfficePageEditor.ISummary"},"authorizationType":null,"authorizationRole":"admin","path":"/flexOffice/admin/pageEditors","method":"patch","name":"search"},{"specification":"Retrieve a filtered and paginated list of active page editors currently editing pages for collaboration management. This data is stored in the flex_office_page_editors table which tracks which editors are active on which pages along with timestamps and soft deletion markers.\n\nThis operation supports searching, filtering, and pagination to help manage active editing sessions and enforce concurrent editor limits.","description":"Get a list of page editors currently active on pages with support for pagination and filtering. Each record shows editor and page associations and timestamps.\n\nThis operation allows administrators and editors to see concurrent editing activity.\n\nUnderlying data is sourced from the flex_office_page_editors table with fields for page and editor references, and session timestamps.\n\nReturns paginated, filtered list of active page editors.","summary":"Search and retrieve a paginated list of active page editors","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for page editors filtering","typeName":"IFlexOfficePageEditor.IRequest"},"responseBody":{"description":"Paginated list of active page editors matching search criteria","typeName":"IPageIFlexOfficePageEditor.ISummary"},"authorizationType":null,"authorizationRole":"editor","path":"/flexOffice/editor/pageEditors","method":"patch","name":"search"},{"specification":"Retrieve detailed information about a specific page editor session identified by pageEditorId from the flex_office_page_editors table. This includes references to the target page and editor user, session start and update times, and soft deletion status.\n\nThis operation supports audit, monitoring, and management of collaboration sessions.\n\nAccessibility is limited to authorized administrators and editors.","description":"Fetch detailed info of an active or historic page editor session specified by pageEditorId. Data includes page and editor references and session timestamps.\n\nThis supports collaboration management and audit functionalities.\n\nData source is the flex_office_page_editors table.\n\nReturns full detail of the page editor session record.","summary":"Retrieve detailed page editor session information by ID","parameters":[{"name":"pageEditorId","description":"Unique identifier of the target page editor session","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed page editor session information","typeName":"IFlexOfficePageEditor"},"authorizationType":null,"authorizationRole":"admin","path":"/flexOffice/admin/pageEditors/{pageEditorId}","method":"get","name":"at"},{"specification":"Retrieve detailed information about a specific page editor session identified by pageEditorId from the flex_office_page_editors table. This includes references to the target page and editor user, session start and update times, and soft deletion status.\n\nThis operation supports audit, monitoring, and management of collaboration sessions.\n\nAccessibility is limited to authorized administrators and editors.","description":"Fetch detailed info of an active or historic page editor session specified by pageEditorId. Data includes page and editor references and session timestamps.\n\nThis supports collaboration management and audit functionalities.\n\nData source is the flex_office_page_editors table.\n\nReturns full detail of the page editor session record.","summary":"Retrieve detailed page editor session information by ID","parameters":[{"name":"pageEditorId","description":"Unique identifier of the target page editor session","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed page editor session information","typeName":"IFlexOfficePageEditor"},"authorizationType":null,"authorizationRole":"editor","path":"/flexOffice/editor/pageEditors/{pageEditorId}","method":"get","name":"at"},{"specification":"This operation creates a new page editor session in the FlexOffice system, allowing an editor user to become an active concurrent editor of a UI page. It operates on the flex_office_page_editors table, which manages active editor sessions on pages to enforce concurrency limits and collaboration awareness. The payload requires the page ID and the editor ID, linking a specific editor user to a page for editing purposes. Business rules mandate that only active editor users can be assigned, and concurrency limits must be respected by the system's business logic layer. The operation records creation and update timestamps automatically.","description":"Create a new active editor session on a FlexOffice UI page. This operation enables a user with editor privileges to join the editing session of a specific page, thereby contributing to real-time collaborative editing and enforcing concurrency limits.\n\nSecurity considerations include verifying the editor's credentials and ensuring they have permissions to edit the target page. The system avoids duplicate editor sessions for the same page and user.\n\nThis endpoint interfaces directly with the flex_office_page_editors table, linking the editor and the page via their unique IDs and creating a new record to represent this session.\n\nValidation rules enforce uniqueness of the (page_id, editor_id) pair and ensure references exist to both flex_office_pages and flex_office_editors tables.\n\nThe operation will handle business logic like concurrency limits, rejecting or queuing requests beyond allowed concurrent editor caps.\n\nExpected behavior includes returning the newly created page editor session details including timestamps.","summary":"Create a new editor session (flex_office_page_editors)","parameters":[],"requestBody":{"description":"Editor session creation payload","typeName":"IFlexOfficePageEditor.ICreate"},"responseBody":{"description":"Created page editor session details","typeName":"IFlexOfficePageEditor"},"authorizationType":null,"authorizationRole":"editor","name":"create","path":"/flexOffice/editor/pageEditors","method":"post"},{"specification":"This operation updates an existing active editor session by its unique ID in the flex_office_page_editors table. It allows modification of session details such as associating a different page or editor, though typically the session remains linked to the original page and editor. Logical updates may include changing timestamps or session status managed by the system. The API validates that the session exists and that referenced page and editor IDs are valid.\n\nSecurity considerations include authentication and authorization of the editor attempting the update and adherence to concurrency and collaboration policies. Any soft delete state or concurrency constraints are adhering to system business rules.\n\nThe request body includes all updatable fields per the IFlexOfficePageEditor.IUpdate schema. The response reflects the updated session data.","description":"Update an existing editor session identified by pageEditorId. Allows modification of page editor session details such as associated page, editor, and updated timestamps.\n\nSecurity checks ensure the updating user has rights to modify this session. Business logic enforces concurrency rules and session integrity.\n\nThis operation targets the flex_office_page_editors table and updates the specified record based on the provided data.\n\nIt returns the updated entity details for client confirmation.","summary":"Update a page editor session by ID","parameters":[{"name":"pageEditorId","description":"Unique identifier of the page editor session to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Page editor session update payload","typeName":"IFlexOfficePageEditor.IUpdate"},"responseBody":{"description":"Updated page editor session details","typeName":"IFlexOfficePageEditor"},"authorizationType":null,"authorizationRole":"editor","name":"update","path":"/flexOffice/editor/pageEditors/{pageEditorId}","method":"put"},{"specification":"This operation deletes an active editor session by its unique ID from the flex_office_page_editors table, effectively removing an editor from a page editing session. It performs a hard delete removing the record entirely, as the table supports soft deletion which can be handled by business logic if necessary. Security checks verify the user's authorization to remove the session, and concurrency limits are adjusted accordingly.\n\nThis operation is critical for managing active editors and ensuring accurate concurrency tracking.","description":"Remove an editor session from a page by deleting the session record identified by pageEditorId.\n\nSecurity controls must confirm the user has sufficient rights. This operation affects real-time collaboration state by potentially freeing a concurrency slot.\n\nThe response contains no body upon success.","summary":"Delete a page editor session","parameters":[{"name":"pageEditorId","description":"Unique identifier of the page editor session to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"editor","name":"erase","path":"/flexOffice/editor/pageEditors/{pageEditorId}","method":"delete"},{"specification":"This operation retrieves a filtered and pagated list of active editor sessions (pageEditors) associated with a specific UI page in FlexOffice. It provides search, filter, sorting, and pagination capabilities based on criteria in the request body according to IFlexOfficePageEditor.IRequest schema. This facilitates effective concurrency management and collaboration oversight.\n\nThe response is a paginated collection of page editor session summaries, enabling UI clients or administrative tools to display and manage active editors on particular pages.\n\nSecurity considerations include validating that the requesting user has appropriate permission to view editor sessions for the target page. Business logic enforces concurrency policies and filters.","description":"Search and retrieve a paginated list of page editor sessions for a specified page ID.\n\nSupports complex filtering, sorting, and pagination defined in the request payload to enable efficient management of active editors involved in collaborative editing.\n\nThis endpoint interacts with the flex_office_page_editors table, filtering sessions belonging to the specified page.\n\nResponse data shows summarized active editor session information suitable for UI display and management controls.\n\nAccess restrictions ensure only authorized users access this data.\n\nErrors are managed via validation of pageId and request filters.","summary":"List editor sessions for a specific page","parameters":[{"name":"pageId","description":"Unique identifier of the page whose editor sessions are requested","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering, sorting, and pagination parameters","typeName":"IFlexOfficePageEditor.IRequest"},"responseBody":{"description":"Paginated list of page editor sessions","typeName":"IPageIFlexOfficePageEditor.ISummary"},"authorizationType":null,"authorizationRole":"editor","name":"index","path":"/flexOffice/editor/pages/{pageId}/pageEditors","method":"patch"},{"specification":"This operation retrieves the details of a specific active page editor session associated with a UI page in the FlexOffice system. It targets the flex_office_page_editors table which manages records of editors currently editing pages concurrently, supporting collaborative editing features. The data includes references to both the page and editor user, along with session start/update timestamps and soft deletion status. This GET method returns the full details of a single flex_office_page_editors record specified by the path parameters pageId and pageEditorId.","path":"/flexOffice/editor/pages/{pageId}/pageEditors/{pageEditorId}","method":"get","summary":"Retrieve specific page editor session details","description":"Retrieve details of a specific page editor session by page ID and page editor ID. This operation allows clients to fetch comprehensive information about the editor session for collaboration management.\n\nSecurity considerations include ensuring that only authorized users with at least editor role or higher can access this data to maintain privacy and integrity of editing sessions.\n\nThe underlying data is sourced from the flex_office_page_editors table, which tracks active editors for enforcing concurrent editing limits.\n\nRequests must specify valid UUIDs for both the page and the editor session. The response returns structured data including timestamps for session creation and updates, with nullable deleted_at indicating active or closed sessions.\n\nErrors include 404 when no matching session is found, or 403 if the user lacks permission.","parameters":[{"name":"pageId","description":"Unique identifier of the UI page the editor session belongs to","schema":{"type":"string","format":"uuid"}},{"name":"pageEditorId","description":"Unique identifier of the page editor session to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Details of the requested page editor session","typeName":"IFlexOfficePageEditor"},"authorizationType":null,"authorizationRole":"editor","name":"at"},{"specification":"This operation retrieves the details of a specific active page editor session associated with a UI page in the FlexOffice system. It targets the flex_office_page_editors table which manages records of editors currently editing pages concurrently, supporting collaborative editing features. The data includes references to both the page and editor user, along with session start/update timestamps and soft deletion status. This GET method returns the full details of a single flex_office_page_editors record specified by the path parameters pageId and pageEditorId.","path":"/flexOffice/admin/pages/{pageId}/pageEditors/{pageEditorId}","method":"get","summary":"Retrieve specific page editor session details","description":"Retrieve details of a specific page editor session by page ID and page editor ID. This operation allows clients to fetch comprehensive information about the editor session for collaboration management.\n\nSecurity considerations include ensuring that only authorized users with at least editor role or higher can access this data to maintain privacy and integrity of editing sessions.\n\nThe underlying data is sourced from the flex_office_page_editors table, which tracks active editors for enforcing concurrent editing limits.\n\nRequests must specify valid UUIDs for both the page and the editor session. The response returns structured data including timestamps for session creation and updates, with nullable deleted_at indicating active or closed sessions.\n\nErrors include 404 when no matching session is found, or 403 if the user lacks permission.","parameters":[{"name":"pageId","description":"Unique identifier of the UI page the editor session belongs to","schema":{"type":"string","format":"uuid"}},{"name":"pageEditorId","description":"Unique identifier of the page editor session to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Details of the requested page editor session","typeName":"IFlexOfficePageEditor"},"authorizationType":null,"authorizationRole":"admin","name":"at"},{"specification":"This operation creates a new page editor session associated with a UI page for collaborative editing in the FlexOffice system. It operates on the flex_office_page_editors table which tracks users currently editing pages concurrently to enforce editing limits and enable collaboration workflows.\n\nClients must provide the references to the page and editor user when creating a new session, along with the session's timestamps if applicable. The system enforces that each editor can be active only once per page.\n\nSuccessful creation returns the full details of the newly created page editor session.\n\nThis operation requires authorization roles of editor or admin to ensure only permitted users can initiate editing sessions.","path":"/flexOffice/editor/pages/{pageId}/pageEditors","method":"post","summary":"Create a new page editor session","description":"Create a new page editor session for a given UI page and editor user.\n\nThis enables collaborative editing by tracking active editor sessions and enforcing concurrency control.\n\nIt is critical that each editor is only active once per page to preserve concurrency limits.\n\nThe request body must include valid references to the page and editor, and optionally timestamps can be supplied but the system usually maintains them.","parameters":[{"name":"pageId","description":"Unique identifier of the UI page to create the editor session for","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information required to create a page editor session","typeName":"IFlexOfficePageEditor.ICreate"},"responseBody":{"description":"Details of the newly created page editor session","typeName":"IFlexOfficePageEditor"},"authorizationType":null,"authorizationRole":"editor","name":"create"},{"specification":"This operation creates a new page editor session associated with a UI page for collaborative editing in the FlexOffice system. It operates on the flex_office_page_editors table which tracks users currently editing pages concurrently to enforce editing limits and enable collaboration workflows.\n\nClients must provide the references to the page and editor user when creating a new session, along with the session's timestamps if applicable. The system enforces that each editor can be active only once per page.\n\nSuccessful creation returns the full details of the newly created page editor session.\n\nThis operation requires authorization roles of editor or admin to ensure only permitted users can initiate editing sessions.","path":"/flexOffice/admin/pages/{pageId}/pageEditors","method":"post","summary":"Create a new page editor session","description":"Create a new page editor session for a given UI page and editor user.\n\nThis enables collaborative editing by tracking active editor sessions and enforcing concurrency control.\n\nIt is critical that each editor is only active once per page to preserve concurrency limits.\n\nThe request body must include valid references to the page and editor, and optionally timestamps can be supplied but the system usually maintains them.","parameters":[{"name":"pageId","description":"Unique identifier of the UI page to create the editor session for","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information required to create a page editor session","typeName":"IFlexOfficePageEditor.ICreate"},"responseBody":{"description":"Details of the newly created page editor session","typeName":"IFlexOfficePageEditor"},"authorizationType":null,"authorizationRole":"admin","name":"create"},{"specification":"This operation updates an existing page editor session on a specific UI page. It is designed for managing collaborative editing metadata such as session timestamps or state within flex_office_page_editors. This PUT method is applied to the flex_office_page_editors table, referencing the target page and editor session by pageId and pageEditorId path parameters.\n\nThe client must provide the updated fields in the request body following the IFlexOfficePageEditor.IUpdate schema.\n\nAuthorization is required for editor and admin roles, reflecting permissions needed to update collaboration session metadata.\n\nErrors include 404 when specified editor session does not exist, or 403 for unauthorized access.","path":"/flexOffice/editor/pages/{pageId}/pageEditors/{pageEditorId}","method":"put","summary":"Update page editor session details","description":"Update an existing page editor session by page ID and page editor ID.\n\nThis allows modification of session metadata such as timestamps and soft deletion state.\n\nClients must provide updated session information adhering to the expected schema.\n\nAuthorization roles required are editor and admin.","parameters":[{"name":"pageId","description":"Unique identifier of the UI page the editor session belongs to","schema":{"type":"string","format":"uuid"}},{"name":"pageEditorId","description":"Unique identifier of the page editor session to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated information for the page editor session","typeName":"IFlexOfficePageEditor.IUpdate"},"responseBody":{"description":"Details of the updated page editor session","typeName":"IFlexOfficePageEditor"},"authorizationType":null,"authorizationRole":"editor","name":"update"},{"specification":"This operation updates an existing page editor session on a specific UI page. It is designed for managing collaborative editing metadata such as session timestamps or state within flex_office_page_editors. This PUT method is applied to the flex_office_page_editors table, referencing the target page and editor session by pageId and pageEditorId path parameters.\n\nThe client must provide the updated fields in the request body following the IFlexOfficePageEditor.IUpdate schema.\n\nAuthorization is required for editor and admin roles, reflecting permissions needed to update collaboration session metadata.\n\nErrors include 404 when specified editor session does not exist, or 403 for unauthorized access.","path":"/flexOffice/admin/pages/{pageId}/pageEditors/{pageEditorId}","method":"put","summary":"Update page editor session details","description":"Update an existing page editor session by page ID and page editor ID.\n\nThis allows modification of session metadata such as timestamps and soft deletion state.\n\nClients must provide updated session information adhering to the expected schema.\n\nAuthorization roles required are editor and admin.","parameters":[{"name":"pageId","description":"Unique identifier of the UI page the editor session belongs to","schema":{"type":"string","format":"uuid"}},{"name":"pageEditorId","description":"Unique identifier of the page editor session to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated information for the page editor session","typeName":"IFlexOfficePageEditor.IUpdate"},"responseBody":{"description":"Details of the updated page editor session","typeName":"IFlexOfficePageEditor"},"authorizationType":null,"authorizationRole":"admin","name":"update"},{"specification":"This operation deletes a page editor session record from the flex_office_page_editors table, which manages live editor sessions linked to UI pages. Given the schema supports soft deletion via \"deleted_at\" column, this operation marks the editor session as deleted rather than physically removing it, enabling recovery and audit trails.\n\nClients specify the page and the editor session by pageId and pageEditorId path parameters.\n\nAuthorization roles editor and admin are required to permit controlled session removal. Actual physical deletion is not performed to maintain audit history.\n\nErrors include 404 if the specified session does not exist, and 403 if user lacks permission.","path":"/flexOffice/editor/pages/{pageId}/pageEditors/{pageEditorId}","method":"delete","summary":"Delete (soft) a page editor session","description":"Soft-delete a page editor session by page ID and page editor ID.\n\nMarks the session as deleted but retains it for audit purposes.\n\nEnsures that collaborative editing session counts remain correct by tracking active sessions.\n\nAuthorization required for editor or admin roles.","parameters":[{"name":"pageId","description":"Unique identifier of the UI page the editor session belongs to","schema":{"type":"string","format":"uuid"}},{"name":"pageEditorId","description":"Unique identifier of the page editor session to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"editor","name":"erase"},{"specification":"This operation deletes a page editor session record from the flex_office_page_editors table, which manages live editor sessions linked to UI pages. Given the schema supports soft deletion via \"deleted_at\" column, this operation marks the editor session as deleted rather than physically removing it, enabling recovery and audit trails.\n\nClients specify the page and the editor session by pageId and pageEditorId path parameters.\n\nAuthorization roles editor and admin are required to permit controlled session removal. Actual physical deletion is not performed to maintain audit history.\n\nErrors include 404 if the specified session does not exist, and 403 if user lacks permission.","path":"/flexOffice/admin/pages/{pageId}/pageEditors/{pageEditorId}","method":"delete","summary":"Delete (soft) a page editor session","description":"Soft-delete a page editor session by page ID and page editor ID.\n\nMarks the session as deleted but retains it for audit purposes.\n\nEnsures that collaborative editing session counts remain correct by tracking active sessions.\n\nAuthorization required for editor or admin roles.","parameters":[{"name":"pageId","description":"Unique identifier of the UI page the editor session belongs to","schema":{"type":"string","format":"uuid"}},{"name":"pageEditorId","description":"Unique identifier of the page editor session to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase"},{"specification":"This operation retrieves a filtered and paginated list of FlexOffice page comments. It operates on the flex_office_page_comments table from the Prisma schema, supporting search criteria including page ID, editor ID, content, and date filters. It returns a paginated summary of comment data to efficiently display lists in UI components.","description":"Retrieve a filtered, paginated list of page comments from the FlexOffice system. This operation accesses the flex_office_page_comments table and supports filtering by page, editor, content keyword, and creation date.\n\nSecurity and authorization ensure that only authorized users with permission to view comments can retrieve this list.\n\nThe response provides a summary of page comments optimized for list views, including comment content previews and metadata.\n\nThis operation integrates with other endpoints for detailed comment retrieval and comment management.","summary":"Search and retrieve a paginated list of FlexOffice page comments","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for filtering page comments","typeName":"IFlexOfficePageComment.IRequest"},"responseBody":{"description":"Paginated list of page comment summaries matching search criteria","typeName":"IPageIFlexOfficePageComment.ISummary"},"authorizationType":null,"authorizationRole":"viewer","path":"/flexOffice/viewer/pageComments","method":"patch","name":"index"},{"specification":"This operation retrieves detailed information for a specific FlexOffice page comment by its unique identifier. It accesses the flex_office_page_comments table in the Prisma schema and returns all detailed fields of the comment including content, associated page, and editor information.","description":"Retrieve detailed information about a FlexOffice page comment specified by its unique ID. This operation fetches the full comment content, creation and update timestamps, and relationships to the editor and page.\n\nSecurity ensures that only users authorized to view the comment can access this detail.\n\nThe operation facilitates comment management and display in user interfaces.\n\nIt complements the list retrieval and comment modification endpoints.","summary":"Retrieve detailed FlexOffice page comment information by ID","parameters":[{"name":"pageCommentId","description":"Unique identifier of the target page comment","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed page comment information","typeName":"IFlexOfficePageComment"},"authorizationType":null,"authorizationRole":"viewer","path":"/flexOffice/viewer/pageComments/{pageCommentId}","method":"get","name":"at"},{"specification":"This operation creates a new FlexOffice page comment associated with a UI page and editor. It inserts a new record into the flex_office_page_comments table in the Prisma schema. The request body includes comment content, page ID, and editor ID. The system assigns creation timestamps and ensures integrity.","description":"Create a new comment on a FlexOffice UI page. This operation allows authorized users to add textual annotations associated with pages for collaboration and editorial workflows.\n\nThe payload must include the page ID, editor ID, and comment content. The system records the creation timestamp automatically.\n\nAuthorization checks ensure the user can comment on the specified page.\n\nThis operation complements list and detail retrieval endpoints for comments.","summary":"Create a new FlexOffice page comment","parameters":[],"requestBody":{"description":"Payload containing new comment details","typeName":"IFlexOfficePageComment.ICreate"},"responseBody":{"description":"Created page comment details","typeName":"IFlexOfficePageComment"},"authorizationType":null,"authorizationRole":"editor","path":"/flexOffice/editor/pageComments","method":"post","name":"create"},{"specification":"This operation updates an existing FlexOffice page comment by its unique ID. It modifies the content and metadata fields in the flex_office_page_comments table of the Prisma schema. The request body permits updating comment text and related editable properties. Updates to creation metadata are disallowed.","description":"Update the content and properties of an existing FlexOffice page comment. The comment is uniquely identified by its ID in the path parameter.\n\nThe operation verifies user authorization to modify the comment.\n\nThe request body includes fields for partial or full updates of comment content.\n\nThis supports collaborative editing and correction in UI interfaces.","summary":"Update an existing FlexOffice page comment by ID","parameters":[{"name":"pageCommentId","description":"Unique identifier of the target page comment","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload containing updated comment information","typeName":"IFlexOfficePageComment.IUpdate"},"responseBody":{"description":"Updated page comment details","typeName":"IFlexOfficePageComment"},"authorizationType":null,"authorizationRole":"editor","path":"/flexOffice/editor/pageComments/{pageCommentId}","method":"put","name":"update"},{"name":"erase","summary":"Delete a FlexOffice page comment by its ID","description":"This operation permanently deletes a page comment identified by its unique ID from the flex_office_page_comments table in the Prisma schema. It supports collaboration workflows by enabling authorized users to remove inappropriate or obsolete comments associated with FlexOffice UI pages.\n\nAccess is restricted to authorized roles such as admin, editor, or viewer depending on permissions. The path parameter pageCommentId specifies the target comment for deletion.\n\nNo request body is required or accepted. This performs a hard delete and the record will be unrecoverable.\n\nRelated endpoints allow listing comments for a page, retrieving individual comments, and creating new comments.\n\nProper error handling includes validation of comment existence and authorization verification before deletion.","specification":"Deleting a page comment in the flex_office_page_comments Prisma table by pageCommentId. Hard delete operation without request body.","path":"/flexOffice/admin/pageComments/{pageCommentId}","method":"delete","parameters":[{"name":"pageCommentId","description":"Unique identifier of the page comment to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","editor","viewer"],"authorizationRole":"admin","authorizationType":null},{"name":"erase","summary":"Delete a FlexOffice page comment by its ID","description":"This operation permanently deletes a page comment identified by its unique ID from the flex_office_page_comments table in the Prisma schema. It supports collaboration workflows by enabling authorized users to remove inappropriate or obsolete comments associated with FlexOffice UI pages.\n\nAccess is restricted to authorized roles such as admin, editor, or viewer depending on permissions. The path parameter pageCommentId specifies the target comment for deletion.\n\nNo request body is required or accepted. This performs a hard delete and the record will be unrecoverable.\n\nRelated endpoints allow listing comments for a page, retrieving individual comments, and creating new comments.\n\nProper error handling includes validation of comment existence and authorization verification before deletion.","specification":"Deleting a page comment in the flex_office_page_comments Prisma table by pageCommentId. Hard delete operation without request body.","path":"/flexOffice/editor/pageComments/{pageCommentId}","method":"delete","parameters":[{"name":"pageCommentId","description":"Unique identifier of the page comment to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","editor","viewer"],"authorizationRole":"editor","authorizationType":null},{"name":"erase","summary":"Delete a FlexOffice page comment by its ID","description":"This operation permanently deletes a page comment identified by its unique ID from the flex_office_page_comments table in the Prisma schema. It supports collaboration workflows by enabling authorized users to remove inappropriate or obsolete comments associated with FlexOffice UI pages.\n\nAccess is restricted to authorized roles such as admin, editor, or viewer depending on permissions. The path parameter pageCommentId specifies the target comment for deletion.\n\nNo request body is required or accepted. This performs a hard delete and the record will be unrecoverable.\n\nRelated endpoints allow listing comments for a page, retrieving individual comments, and creating new comments.\n\nProper error handling includes validation of comment existence and authorization verification before deletion.","specification":"Deleting a page comment in the flex_office_page_comments Prisma table by pageCommentId. Hard delete operation without request body.","path":"/flexOffice/viewer/pageComments/{pageCommentId}","method":"delete","parameters":[{"name":"pageCommentId","description":"Unique identifier of the page comment to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","editor","viewer"],"authorizationRole":"viewer","authorizationType":null},{"name":"index","summary":"Retrieve a filtered and paginated list of comments for a specific page","description":"Retrieve a filtered and paginated list of editor comments for a specified FlexOffice UI page. Operates on the flex_office_page_comments table, filtering comments by the page ID provided as a path parameter.\n\nSupports pagination, filtering by editor, date, and content search through the defined request body parameters in IFlexOfficePageComment.IRequest. Returns paginated comment summaries.\n\nAccess control requires authenticated roles to view comments associated with the page. Related operations include creating and deleting comments.\n\nErrors include invalid page ID or permission denied.\n\nThis API endpoint plays a critical role in enabling collaboration and contextual communication within the FlexOffice UI/Page Builder workflows.\n","specification":"Patch operation for paginated, filtered retrieval from flex_office_page_comments filtered by pageId in path parameter, with request parameters in body and paginated summary response.","path":"/flexOffice/admin/pages/{pageId}/pageComments","method":"patch","parameters":[{"name":"pageId","description":"Unique identifier of the FlexOffice UI page to retrieve comments for","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering, pagination, and search parameters for page comments","typeName":"IFlexOfficePageComment.IRequest"},"responseBody":{"description":"Paginated list of page comment summaries matching the filters","typeName":"IPageIFlexOfficePageComment.ISummary"},"authorizationRoles":["admin","editor","viewer"],"authorizationRole":"admin","authorizationType":null},{"name":"index","summary":"Retrieve a filtered and paginated list of comments for a specific page","description":"Retrieve a filtered and paginated list of editor comments for a specified FlexOffice UI page. Operates on the flex_office_page_comments table, filtering comments by the page ID provided as a path parameter.\n\nSupports pagination, filtering by editor, date, and content search through the defined request body parameters in IFlexOfficePageComment.IRequest. Returns paginated comment summaries.\n\nAccess control requires authenticated roles to view comments associated with the page. Related operations include creating and deleting comments.\n\nErrors include invalid page ID or permission denied.\n\nThis API endpoint plays a critical role in enabling collaboration and contextual communication within the FlexOffice UI/Page Builder workflows.\n","specification":"Patch operation for paginated, filtered retrieval from flex_office_page_comments filtered by pageId in path parameter, with request parameters in body and paginated summary response.","path":"/flexOffice/editor/pages/{pageId}/pageComments","method":"patch","parameters":[{"name":"pageId","description":"Unique identifier of the FlexOffice UI page to retrieve comments for","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering, pagination, and search parameters for page comments","typeName":"IFlexOfficePageComment.IRequest"},"responseBody":{"description":"Paginated list of page comment summaries matching the filters","typeName":"IPageIFlexOfficePageComment.ISummary"},"authorizationRoles":["admin","editor","viewer"],"authorizationRole":"editor","authorizationType":null},{"name":"index","summary":"Retrieve a filtered and paginated list of comments for a specific page","description":"Retrieve a filtered and paginated list of editor comments for a specified FlexOffice UI page. Operates on the flex_office_page_comments table, filtering comments by the page ID provided as a path parameter.\n\nSupports pagination, filtering by editor, date, and content search through the defined request body parameters in IFlexOfficePageComment.IRequest. Returns paginated comment summaries.\n\nAccess control requires authenticated roles to view comments associated with the page. Related operations include creating and deleting comments.\n\nErrors include invalid page ID or permission denied.\n\nThis API endpoint plays a critical role in enabling collaboration and contextual communication within the FlexOffice UI/Page Builder workflows.\n","specification":"Patch operation for paginated, filtered retrieval from flex_office_page_comments filtered by pageId in path parameter, with request parameters in body and paginated summary response.","path":"/flexOffice/viewer/pages/{pageId}/pageComments","method":"patch","parameters":[{"name":"pageId","description":"Unique identifier of the FlexOffice UI page to retrieve comments for","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering, pagination, and search parameters for page comments","typeName":"IFlexOfficePageComment.IRequest"},"responseBody":{"description":"Paginated list of page comment summaries matching the filters","typeName":"IPageIFlexOfficePageComment.ISummary"},"authorizationRoles":["admin","editor","viewer"],"authorizationRole":"viewer","authorizationType":null},{"name":"at","summary":"Retrieve a single comment by its unique ID for a specific page","description":"Retrieve detailed information of a single page comment identified by pageCommentId within a specified FlexOffice UI page identified by pageId. Operates on the flex_office_page_comments table.\n\nReturns full comment details including content, editor ID, timestamps, and deletion status.\n\nRequires proper permissions for reading comments.\n\nRelated endpoints include creation, listing, and deletion of page comments.\n\nError handling includes validation of existence and permission checks.\n\nThe path parameters pageId and pageCommentId uniquely identify the record.\n","specification":"Get operation to read a specific page comment record in flex_office_page_comments by pageId and pageCommentId.","path":"/flexOffice/admin/pages/{pageId}/pageComments/{pageCommentId}","method":"get","parameters":[{"name":"pageId","description":"Unique identifier of the FlexOffice UI page","schema":{"type":"string","format":"uuid"}},{"name":"pageCommentId","description":"Unique identifier of the page comment to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed page comment entity","typeName":"IFlexOfficePageComment"},"authorizationRoles":["admin","editor","viewer"],"authorizationRole":"admin","authorizationType":null},{"name":"at","summary":"Retrieve a single comment by its unique ID for a specific page","description":"Retrieve detailed information of a single page comment identified by pageCommentId within a specified FlexOffice UI page identified by pageId. Operates on the flex_office_page_comments table.\n\nReturns full comment details including content, editor ID, timestamps, and deletion status.\n\nRequires proper permissions for reading comments.\n\nRelated endpoints include creation, listing, and deletion of page comments.\n\nError handling includes validation of existence and permission checks.\n\nThe path parameters pageId and pageCommentId uniquely identify the record.\n","specification":"Get operation to read a specific page comment record in flex_office_page_comments by pageId and pageCommentId.","path":"/flexOffice/editor/pages/{pageId}/pageComments/{pageCommentId}","method":"get","parameters":[{"name":"pageId","description":"Unique identifier of the FlexOffice UI page","schema":{"type":"string","format":"uuid"}},{"name":"pageCommentId","description":"Unique identifier of the page comment to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed page comment entity","typeName":"IFlexOfficePageComment"},"authorizationRoles":["admin","editor","viewer"],"authorizationRole":"editor","authorizationType":null},{"name":"at","summary":"Retrieve a single comment by its unique ID for a specific page","description":"Retrieve detailed information of a single page comment identified by pageCommentId within a specified FlexOffice UI page identified by pageId. Operates on the flex_office_page_comments table.\n\nReturns full comment details including content, editor ID, timestamps, and deletion status.\n\nRequires proper permissions for reading comments.\n\nRelated endpoints include creation, listing, and deletion of page comments.\n\nError handling includes validation of existence and permission checks.\n\nThe path parameters pageId and pageCommentId uniquely identify the record.\n","specification":"Get operation to read a specific page comment record in flex_office_page_comments by pageId and pageCommentId.","path":"/flexOffice/viewer/pages/{pageId}/pageComments/{pageCommentId}","method":"get","parameters":[{"name":"pageId","description":"Unique identifier of the FlexOffice UI page","schema":{"type":"string","format":"uuid"}},{"name":"pageCommentId","description":"Unique identifier of the page comment to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed page comment entity","typeName":"IFlexOfficePageComment"},"authorizationRoles":["admin","editor","viewer"],"authorizationRole":"viewer","authorizationType":null},{"name":"create","summary":"Create a new comment on a specific page","description":"Create a new editor comment associated with a specific FlexOffice UI page. Accepts the page ID in the path parameter and comment content in the request body.\n\nStores comment details in the flex_office_page_comments table including content, editor identity, and timestamps.\n\nSupports collaboration workflows by enabling users with proper roles to provide feedback on UI pages.\n\nReturns the newly created comment including all metadata.\n\nRequires permissions aligned with editor roles or higher.\n\nRelated endpoints include comment retrieval, listing, and deletion.\n","specification":"Post operation to create a new flex_office_page_comments record linked to the specified pageId. Returns the created comment entity.","path":"/flexOffice/admin/pages/{pageId}/pageComments","method":"post","parameters":[{"name":"pageId","description":"Unique identifier of the FlexOffice UI page to associate the comment with","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data for creating a new page comment","typeName":"IFlexOfficePageComment.ICreate"},"responseBody":{"description":"Newly created page comment entity","typeName":"IFlexOfficePageComment"},"authorizationRoles":["admin","editor","viewer"],"authorizationRole":"admin","authorizationType":null},{"name":"create","summary":"Create a new comment on a specific page","description":"Create a new editor comment associated with a specific FlexOffice UI page. Accepts the page ID in the path parameter and comment content in the request body.\n\nStores comment details in the flex_office_page_comments table including content, editor identity, and timestamps.\n\nSupports collaboration workflows by enabling users with proper roles to provide feedback on UI pages.\n\nReturns the newly created comment including all metadata.\n\nRequires permissions aligned with editor roles or higher.\n\nRelated endpoints include comment retrieval, listing, and deletion.\n","specification":"Post operation to create a new flex_office_page_comments record linked to the specified pageId. Returns the created comment entity.","path":"/flexOffice/editor/pages/{pageId}/pageComments","method":"post","parameters":[{"name":"pageId","description":"Unique identifier of the FlexOffice UI page to associate the comment with","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data for creating a new page comment","typeName":"IFlexOfficePageComment.ICreate"},"responseBody":{"description":"Newly created page comment entity","typeName":"IFlexOfficePageComment"},"authorizationRoles":["admin","editor","viewer"],"authorizationRole":"editor","authorizationType":null},{"name":"create","summary":"Create a new comment on a specific page","description":"Create a new editor comment associated with a specific FlexOffice UI page. Accepts the page ID in the path parameter and comment content in the request body.\n\nStores comment details in the flex_office_page_comments table including content, editor identity, and timestamps.\n\nSupports collaboration workflows by enabling users with proper roles to provide feedback on UI pages.\n\nReturns the newly created comment including all metadata.\n\nRequires permissions aligned with editor roles or higher.\n\nRelated endpoints include comment retrieval, listing, and deletion.\n","specification":"Post operation to create a new flex_office_page_comments record linked to the specified pageId. Returns the created comment entity.","path":"/flexOffice/viewer/pages/{pageId}/pageComments","method":"post","parameters":[{"name":"pageId","description":"Unique identifier of the FlexOffice UI page to associate the comment with","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data for creating a new page comment","typeName":"IFlexOfficePageComment.ICreate"},"responseBody":{"description":"Newly created page comment entity","typeName":"IFlexOfficePageComment"},"authorizationRoles":["admin","editor","viewer"],"authorizationRole":"viewer","authorizationType":null},{"specification":"This operation updates an existing page comment under the specified UI page in the FlexOffice system. It targets the flex_office_page_comments table. The API allows modification of the comment content and metadata, supporting collaboration and editorial workflows among users with appropriate permissions. The pageId and pageCommentId path parameters correspond to the comment's unique association with a UI page and the comment identifier itself. Content updates must observe validation rules for text length and permitted character sets. Authorization is typically limited to editors and admins who have edit rights for the page.","description":"Update an existing comment on a UI page within the FlexOffice system. This operation modifies the content of the specified comment identified by {pageCommentId} associated with the page {pageId}.\n\nOnly authorized users with Editor or Admin roles can perform this update. The system enforces content validation ensuring the comment text is appropriate and correctly formatted.\n\nThe underlying database table flex_office_page_comments stores comments with fields for content, timestamps, and soft deletion status. This operation updates the record while maintaining audit integrity via updated_at timestamp.\n\nClients must supply the updated comment content in the request body. The API responds with the updated comment entity including metadata for client synchronization and UI updates.","summary":"Update a specific page comment on a UI page","parameters":[{"name":"pageId","description":"Unique identifier of the target UI page","schema":{"type":"string","format":"uuid"}},{"name":"pageCommentId","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated content for the page comment","typeName":"IFlexOfficePageComments.IUpdate"},"responseBody":{"description":"The updated page comment entity","typeName":"IFlexOfficePageComments"},"authorizationRoles":["editor","admin"],"name":"updatePageComment","path":"/flexOffice/editor/pages/{pageId}/pageComments/{pageCommentId}","method":"put","authorizationRole":"editor","authorizationType":null},{"specification":"This operation updates an existing page comment under the specified UI page in the FlexOffice system. It targets the flex_office_page_comments table. The API allows modification of the comment content and metadata, supporting collaboration and editorial workflows among users with appropriate permissions. The pageId and pageCommentId path parameters correspond to the comment's unique association with a UI page and the comment identifier itself. Content updates must observe validation rules for text length and permitted character sets. Authorization is typically limited to editors and admins who have edit rights for the page.","description":"Update an existing comment on a UI page within the FlexOffice system. This operation modifies the content of the specified comment identified by {pageCommentId} associated with the page {pageId}.\n\nOnly authorized users with Editor or Admin roles can perform this update. The system enforces content validation ensuring the comment text is appropriate and correctly formatted.\n\nThe underlying database table flex_office_page_comments stores comments with fields for content, timestamps, and soft deletion status. This operation updates the record while maintaining audit integrity via updated_at timestamp.\n\nClients must supply the updated comment content in the request body. The API responds with the updated comment entity including metadata for client synchronization and UI updates.","summary":"Update a specific page comment on a UI page","parameters":[{"name":"pageId","description":"Unique identifier of the target UI page","schema":{"type":"string","format":"uuid"}},{"name":"pageCommentId","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated content for the page comment","typeName":"IFlexOfficePageComments.IUpdate"},"responseBody":{"description":"The updated page comment entity","typeName":"IFlexOfficePageComments"},"authorizationRoles":["editor","admin"],"name":"updatePageComment","path":"/flexOffice/admin/pages/{pageId}/pageComments/{pageCommentId}","method":"put","authorizationRole":"admin","authorizationType":null},{"specification":"This operation permanently deletes a specific page comment associated with a UI page from the FlexOffice system. The target resource is identified by both pageId and pageCommentId path parameters corresponding to flex_office_page_comments table's comment entity.\n\nThe deletion here is a hard delete, removing the comment record completely from the database and freeing storage. This operation requires high-level permissions generally restricted to admins and authorized editors.\n\nThe system does not support soft deletion via this API; once deleted, the comment cannot be recovered through API means.\n\nClients should handle confirmation dialogs before invoking this delete operation to prevent accidental data loss.","description":"Permanently remove a page comment from a UI page in the FlexOffice platform. The comment identified by {pageCommentId} under page {pageId} is deleted.\n\nOnly authorized users with admin or editor role can delete comments. This operation performs a hard delete, permanently erasing the comment from the database.\n\nThere is no response body; clients should interpret a successful HTTP status code as confirmation.","summary":"Delete a specific page comment from a UI page","parameters":[{"name":"pageId","description":"Unique identifier of the target UI page","schema":{"type":"string","format":"uuid"}},{"name":"pageCommentId","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["editor","admin"],"name":"erasePageComment","path":"/flexOffice/editor/pages/{pageId}/pageComments/{pageCommentId}","method":"delete","authorizationRole":"editor","authorizationType":null},{"specification":"This operation permanently deletes a specific page comment associated with a UI page from the FlexOffice system. The target resource is identified by both pageId and pageCommentId path parameters corresponding to flex_office_page_comments table's comment entity.\n\nThe deletion here is a hard delete, removing the comment record completely from the database and freeing storage. This operation requires high-level permissions generally restricted to admins and authorized editors.\n\nThe system does not support soft deletion via this API; once deleted, the comment cannot be recovered through API means.\n\nClients should handle confirmation dialogs before invoking this delete operation to prevent accidental data loss.","description":"Permanently remove a page comment from a UI page in the FlexOffice platform. The comment identified by {pageCommentId} under page {pageId} is deleted.\n\nOnly authorized users with admin or editor role can delete comments. This operation performs a hard delete, permanently erasing the comment from the database.\n\nThere is no response body; clients should interpret a successful HTTP status code as confirmation.","summary":"Delete a specific page comment from a UI page","parameters":[{"name":"pageId","description":"Unique identifier of the target UI page","schema":{"type":"string","format":"uuid"}},{"name":"pageCommentId","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["editor","admin"],"name":"erasePageComment","path":"/flexOffice/admin/pages/{pageId}/pageComments/{pageCommentId}","method":"delete","authorizationRole":"admin","authorizationType":null},{"specification":"This operation retrieves a filtered and paginated list of concurrent editing conflicts in the FlexOffice platform across all UI pages. It provides insights into unresolved or historical conflicts among multiple editors collaborating on the same page, assisting in collaboration monitoring and conflict resolution.\n\nThe API supports search, filtering, paging, and sorting through request body parameters encapsulated in IFlexOfficeEditConflicts.IRequest. Responses include paginated conflict summaries for display and workflow integration.\n\nThis operation targets the flex_office_edit_conflicts table and is accessible by users with editor and admin permissions aligned with their collaboration roles.","description":"Retrieve a paginated list of edit conflicts occurring on UI pages in the FlexOffice system. The list supports filtering and sorting to find relevant conflict records.\n\nAccessible for users with Editor or Admin roles. This operation helps in identifying and managing content conflicts during collaborative editing to maintain data integrity.\n\nThe response includes details on conflicts such as editor ids, conflict data in JSON, and timestamps.","summary":"Search and retrieve paginated list of edit conflicts","parameters":[],"requestBody":{"description":"Search and filter parameters for edit conflicts","typeName":"IFlexOfficeEditConflicts.IRequest"},"responseBody":{"description":"Paginated list of edit conflicts matching search criteria","typeName":"IPageIFlexOfficeEditConflicts.ISummary"},"authorizationRoles":["editor","admin"],"name":"searchEditConflicts","path":"/flexOffice/editor/editConflicts","method":"patch","authorizationRole":"editor","authorizationType":null},{"specification":"This operation retrieves a filtered and paginated list of concurrent editing conflicts in the FlexOffice platform across all UI pages. It provides insights into unresolved or historical conflicts among multiple editors collaborating on the same page, assisting in collaboration monitoring and conflict resolution.\n\nThe API supports search, filtering, paging, and sorting through request body parameters encapsulated in IFlexOfficeEditConflicts.IRequest. Responses include paginated conflict summaries for display and workflow integration.\n\nThis operation targets the flex_office_edit_conflicts table and is accessible by users with editor and admin permissions aligned with their collaboration roles.","description":"Retrieve a paginated list of edit conflicts occurring on UI pages in the FlexOffice system. The list supports filtering and sorting to find relevant conflict records.\n\nAccessible for users with Editor or Admin roles. This operation helps in identifying and managing content conflicts during collaborative editing to maintain data integrity.\n\nThe response includes details on conflicts such as editor ids, conflict data in JSON, and timestamps.","summary":"Search and retrieve paginated list of edit conflicts","parameters":[],"requestBody":{"description":"Search and filter parameters for edit conflicts","typeName":"IFlexOfficeEditConflicts.IRequest"},"responseBody":{"description":"Paginated list of edit conflicts matching search criteria","typeName":"IPageIFlexOfficeEditConflicts.ISummary"},"authorizationRoles":["editor","admin"],"name":"searchEditConflicts","path":"/flexOffice/admin/editConflicts","method":"patch","authorizationRole":"admin","authorizationType":null},{"specification":"This operation retrieves detailed information about a specific edit conflict by its unique identifier. It returns the conflict data, associated page and editor, and timestamps. This supports administrators and editors in investigating and resolving collaborative edit conflicts.\n\nThe resource is located by the editConflictId path parameter. The data is fetched from the flex_office_edit_conflicts table.\n\nAccess is restricted to users with editor or admin roles due to the sensitive nature of conflict data.","description":"Retrieve detailed information about a single edit conflict in the FlexOffice UI/Page collaboration environment.\n\nOnly users with Editor or Admin roles can access this data. The conflict details include editor information and JSON-encoded conflicting data.\n\nThis information aids in conflict resolution and audit tracking for collaborative editing.","summary":"Get details of a specific edit conflict","parameters":[{"name":"editConflictId","description":"Unique identifier of the edit conflict","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed edit conflict entity information","typeName":"IFlexOfficeEditConflicts"},"authorizationRoles":["editor","admin"],"name":"getEditConflict","path":"/flexOffice/editor/editConflicts/{editConflictId}","method":"get","authorizationRole":"editor","authorizationType":null},{"specification":"This operation retrieves detailed information about a specific edit conflict by its unique identifier. It returns the conflict data, associated page and editor, and timestamps. This supports administrators and editors in investigating and resolving collaborative edit conflicts.\n\nThe resource is located by the editConflictId path parameter. The data is fetched from the flex_office_edit_conflicts table.\n\nAccess is restricted to users with editor or admin roles due to the sensitive nature of conflict data.","description":"Retrieve detailed information about a single edit conflict in the FlexOffice UI/Page collaboration environment.\n\nOnly users with Editor or Admin roles can access this data. The conflict details include editor information and JSON-encoded conflicting data.\n\nThis information aids in conflict resolution and audit tracking for collaborative editing.","summary":"Get details of a specific edit conflict","parameters":[{"name":"editConflictId","description":"Unique identifier of the edit conflict","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed edit conflict entity information","typeName":"IFlexOfficeEditConflicts"},"authorizationRoles":["editor","admin"],"name":"getEditConflict","path":"/flexOffice/admin/editConflicts/{editConflictId}","method":"get","authorizationRole":"admin","authorizationType":null},{"specification":"This operation retrieves a paginated list of edit conflict records associated with a specific UI page. It operates on the flex_office_edit_conflicts table from the Prisma schema. Users can filter, sort, and paginate conflict records to monitor collaboration issues. The edit conflicts store JSON-encoded conflicting changes along with references to the page and editor involved, and a creation timestamp. This supports collaborative editing scenarios requiring conflict detection and resolution.","description":"Retrieve a filtered and paginated list of edit conflicts for a specified UI page in the FlexOffice system. The operation enables administrators and editors to monitor conflicts arising during concurrent editing sessions. It supports filtering by conflict attributes and pagination for scalability.\n\nAccess is restricted to authenticated users with appropriate permissions, typically Editor or Admin roles. The returned data includes conflict details such as editor ID, page ID, conflicting change data, and timestamps to inform collaboration workflows. Pagination ensures efficient network usage and client rendering.\n\nThis operation accesses the flex_office_edit_conflicts table which records each conflict as a JSON-encoded data snapshot linked to a page and an editor. The data field \"conflict_data\" captures the nature of the conflicting edits. Retrieval allows review and analysis to guide conflict resolution strategies.\n\nThe API supports concurrency scenarios and helps maintain data consistency by providing auditability and conflict tracking in collaboration environments. Error handling includes validation of the pageId path parameter and appropriate access control enforcement.","summary":"Search and retrieve a paginated list of edit conflicts for a UI page","parameters":[{"name":"pageId","in":"path","description":"Unique identifier of the target UI page","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for filtering edit conflicts","typeName":"IFlexOfficeEditConflict.IRequest"},"responseBody":{"description":"Paginated list of edit conflicts matching search criteria","typeName":"IPageIFlexOfficeEditConflict"},"authorizationType":null,"authorizationRole":"editor","name":"index","path":"/flexOffice/editor/pages/{pageId}/editConflicts","method":"patch"},{"specification":"This operation retrieves detailed information about a specific edit conflict record by its unique identifier and associated page ID. It operates on the flex_office_edit_conflicts table from the Prisma schema, providing JSON-encoded conflicting change data along with metadata such as editor and page references and timestamp.\n\nThis endpoint serves administrators and editors who need to inspect conflict details to analyze editing issues in collaborative environments. Security enforces that only authorized users with Editor or Admin roles may access this detailed conflict data.\n\nValidation of UUID path parameters ensures proper resource identification. Typical error handling includes not found and forbidden access scenarios. This operation enhances collaboration monitoring and conflict resolution by providing precise conflict snapshots.","description":"Retrieve detailed information of a specific edit conflict record by its ID and associated UI page ID. This API operation allows admins and editors to inspect conflict data to resolve collaboration issues effectively.\n\nAccess control ensures only users with suitable roles (Admin or Editor) can view conflict details. The response includes all conflict record fields stored in the database, aiding in audit trails and user support scenarios.\n\nAppropriate parameter validation and error handling ensure robust operation in distributed multi-user editing environments.","summary":"Retrieve a specific edit conflict by ID for a UI page","parameters":[{"name":"pageId","in":"path","description":"Unique identifier of the target UI page","schema":{"type":"string","format":"uuid"}},{"name":"editConflictId","in":"path","description":"Unique identifier of the target edit conflict record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed edit conflict information","typeName":"IFlexOfficeEditConflict"},"authorizationType":null,"authorizationRole":"editor","name":"at","path":"/flexOffice/editor/pages/{pageId}/editConflicts/{editConflictId}","method":"get"},{"specification":"This operation searches and retrieves a paginated list of chart metadata records with support for filtering, sorting, and pagination. It operates on the flex_office_charts table from the Prisma schema, which stores chart configurations including type, title, description, and timestamps along with soft delete support.\n\nThe API enables users to find charts for display or further manipulation in dashboards. Typical search parameters may include chart type, title keywords, and status. The response contains detailed chart metadata entries suitable for UI listing.\n\nAuthorization ensures that users have appropriate viewing or editing roles. The API supports scalable retrieval with pagination.","description":"Retrieve a filtered and paginated list of analytics chart metadata records. Provides users with the ability to find charts by type, title, or other criteria to support dashboard construction.\n\nSecurity restricts access to authenticated users with viewing permission. The paginated response optimizes client-side loading and rendering.\n\nUnderlying data resides in the flex_office_charts table, including chart type, title, description, creation, and update timestamps. Soft-deleted charts are excluded by default.\n\nThis operation supports analytical dashboard building and enhances reusability of chart components.","summary":"Search and retrieve a paginated list of analytics charts","parameters":[],"requestBody":{"description":"Search and pagination parameters for charts filtering","typeName":"IFlexOfficeChart.IRequest"},"responseBody":{"description":"Paginated list of analytics charts matching criteria","typeName":"IPageIFlexOfficeChart"},"authorizationType":null,"authorizationRole":"editor","name":"index","path":"/flexOffice/editor/charts","method":"patch"},{"specification":"This operation retrieves detailed information about a specific chart by its unique identifier. It accesses the flex_office_charts table in the Prisma schema, returning chart metadata including type, title, description, timestamps, and soft deletion status.\n\nThis operation serves users who want to view or edit chart configurations for dashboard customization. Security enforces role-based access control ensuring only authorized users such as Editors and Admins may access this data.\n\nThe API validates the chartId path parameter to prevent invalid requests. Errors such as not found or forbidden will be properly returned. This operation aids in detailed inspection and manipulation of chart entities within analytics workflows.","description":"Retrieve detailed information of a specific analytics chart by its unique ID. The response includes all chart metadata fields stored in the database.\n\nOnly users with proper authorization (Editor or Admin) may access this endpoint. This facilitates detailed inspection and dashboard customization tasks.\n\nParameter validation ensures proper UUID format. The response payload includes chart details for client consumption.\n\nThis operation is fundamental for analytics dashboard management and component reusability.","summary":"Retrieve a specific analytics chart by ID","parameters":[{"name":"chartId","in":"path","description":"Unique identifier of the target chart","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed analytics chart information","typeName":"IFlexOfficeChart"},"authorizationType":null,"authorizationRole":"editor","name":"at","path":"/flexOffice/editor/charts/{chartId}","method":"get"},{"specification":"This operation creates a new chart entity in the FlexOffice system, based on the Prisma model flex_office_charts. This table stores metadata and configuration for various chart types used in analytics dashboards. The creation operation requires providing widget association, chart type, title, and optionally description. The operation will persist a new chart record with creation and update timestamps handled by the backend. Authorization is restricted to users with 'admin', 'editor', or 'viewer' roles as defined in the system schema models for comprehensive access management.","description":"This API endpoint allows the creation of a new analytics chart within the FlexOffice platform. The chart entity acts as the foundational metadata container for visualization widgets associated with UI page widgets. Users can specify the chart type such as bar, line, or pie, set a meaningful title, and optionally provide a description to inform viewers of the chart's context and purpose.\n\nSecurity-wise, this operation requires authenticated user access restricted to roles 'admin', 'editor', or 'viewer' to ensure authorized users can manage chart metadata.\n\nThe created chart will be linked to an existing UI widget by ID and stored atomically in the database, ensuring data integrity. Backend services are responsible for generating unique IDs, timestamps, and managing soft deletion flags where applicable.\n\nThis operation complements related operations such as updating charts, deleting charts, and retrieving chart details or summaries. Error handling includes validation of widget existence and chart type correctness.\n\nThe response returns the fully created chart entity with all relevant fields.","summary":"Create a new analytics chart in the FlexOffice system","parameters":[],"requestBody":{"description":"Detailed information for creating a FlexOffice chart","typeName":"IFlexOfficeChart.ICreate"},"responseBody":{"description":"The newly created FlexOffice chart entity","typeName":"IFlexOfficeChart"},"authorizationType":null,"authorizationRole":"admin","name":"create","path":"/flexOffice/admin/charts","method":"post"},{"specification":"This operation creates a new chart entity in the FlexOffice system, based on the Prisma model flex_office_charts. This table stores metadata and configuration for various chart types used in analytics dashboards. The creation operation requires providing widget association, chart type, title, and optionally description. The operation will persist a new chart record with creation and update timestamps handled by the backend. Authorization is restricted to users with 'admin', 'editor', or 'viewer' roles as defined in the system schema models for comprehensive access management.","description":"This API endpoint allows the creation of a new analytics chart within the FlexOffice platform. The chart entity acts as the foundational metadata container for visualization widgets associated with UI page widgets. Users can specify the chart type such as bar, line, or pie, set a meaningful title, and optionally provide a description to inform viewers of the chart's context and purpose.\n\nSecurity-wise, this operation requires authenticated user access restricted to roles 'admin', 'editor', or 'viewer' to ensure authorized users can manage chart metadata.\n\nThe created chart will be linked to an existing UI widget by ID and stored atomically in the database, ensuring data integrity. Backend services are responsible for generating unique IDs, timestamps, and managing soft deletion flags where applicable.\n\nThis operation complements related operations such as updating charts, deleting charts, and retrieving chart details or summaries. Error handling includes validation of widget existence and chart type correctness.\n\nThe response returns the fully created chart entity with all relevant fields.","summary":"Create a new analytics chart in the FlexOffice system","parameters":[],"requestBody":{"description":"Detailed information for creating a FlexOffice chart","typeName":"IFlexOfficeChart.ICreate"},"responseBody":{"description":"The newly created FlexOffice chart entity","typeName":"IFlexOfficeChart"},"authorizationType":null,"authorizationRole":"editor","name":"create","path":"/flexOffice/editor/charts","method":"post"},{"specification":"This operation creates a new chart entity in the FlexOffice system, based on the Prisma model flex_office_charts. This table stores metadata and configuration for various chart types used in analytics dashboards. The creation operation requires providing widget association, chart type, title, and optionally description. The operation will persist a new chart record with creation and update timestamps handled by the backend. Authorization is restricted to users with 'admin', 'editor', or 'viewer' roles as defined in the system schema models for comprehensive access management.","description":"This API endpoint allows the creation of a new analytics chart within the FlexOffice platform. The chart entity acts as the foundational metadata container for visualization widgets associated with UI page widgets. Users can specify the chart type such as bar, line, or pie, set a meaningful title, and optionally provide a description to inform viewers of the chart's context and purpose.\n\nSecurity-wise, this operation requires authenticated user access restricted to roles 'admin', 'editor', or 'viewer' to ensure authorized users can manage chart metadata.\n\nThe created chart will be linked to an existing UI widget by ID and stored atomically in the database, ensuring data integrity. Backend services are responsible for generating unique IDs, timestamps, and managing soft deletion flags where applicable.\n\nThis operation complements related operations such as updating charts, deleting charts, and retrieving chart details or summaries. Error handling includes validation of widget existence and chart type correctness.\n\nThe response returns the fully created chart entity with all relevant fields.","summary":"Create a new analytics chart in the FlexOffice system","parameters":[],"requestBody":{"description":"Detailed information for creating a FlexOffice chart","typeName":"IFlexOfficeChart.ICreate"},"responseBody":{"description":"The newly created FlexOffice chart entity","typeName":"IFlexOfficeChart"},"authorizationType":null,"authorizationRole":"viewer","name":"create","path":"/flexOffice/viewer/charts","method":"post"},{"specification":"This operation updates an existing chart entity identified by chartId in FlexOffice system, based on the Prisma model flex_office_charts. The update operation allows modification of chart properties like type, title, description, and timestamps for audit. It requires the chart ID path parameter and an update body with changed fields. Authorization roles include 'admin', 'editor', or 'viewer'.","description":"This API endpoint updates the attributes of an existing analytics chart in the FlexOffice platform. By specifying the chart ID, authorized users such as admin, editor, or viewer roles can modify properties such as chart type, descriptive title, and optional descriptive fields to keep visualizations accurate and relevant.\n\nStrict access control is enforced ensuring that only authorized users with roles 'admin', 'editor', or 'viewer' can perform modifications to prevent unauthorized data tampering.\n\nThe system will validate the existence of the target chart prior to applying updates and return the updated entity in the response. This operation serves as a complement to chart creation, deletion, and retrieval endpoints.\n\nErrors include handling cases of not found chart ID or invalid update data.","summary":"Update an existing analytics chart by chartId","parameters":[{"name":"chartId","description":"Unique identifier of the target chart to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for an existing FlexOffice chart","typeName":"IFlexOfficeChart.IUpdate"},"responseBody":{"description":"The updated FlexOffice chart entity","typeName":"IFlexOfficeChart"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/flexOffice/admin/charts/{chartId}","method":"put"},{"specification":"This operation updates an existing chart entity identified by chartId in FlexOffice system, based on the Prisma model flex_office_charts. The update operation allows modification of chart properties like type, title, description, and timestamps for audit. It requires the chart ID path parameter and an update body with changed fields. Authorization roles include 'admin', 'editor', or 'viewer'.","description":"This API endpoint updates the attributes of an existing analytics chart in the FlexOffice platform. By specifying the chart ID, authorized users such as admin, editor, or viewer roles can modify properties such as chart type, descriptive title, and optional descriptive fields to keep visualizations accurate and relevant.\n\nStrict access control is enforced ensuring that only authorized users with roles 'admin', 'editor', or 'viewer' can perform modifications to prevent unauthorized data tampering.\n\nThe system will validate the existence of the target chart prior to applying updates and return the updated entity in the response. This operation serves as a complement to chart creation, deletion, and retrieval endpoints.\n\nErrors include handling cases of not found chart ID or invalid update data.","summary":"Update an existing analytics chart by chartId","parameters":[{"name":"chartId","description":"Unique identifier of the target chart to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for an existing FlexOffice chart","typeName":"IFlexOfficeChart.IUpdate"},"responseBody":{"description":"The updated FlexOffice chart entity","typeName":"IFlexOfficeChart"},"authorizationType":null,"authorizationRole":"editor","name":"update","path":"/flexOffice/editor/charts/{chartId}","method":"put"},{"specification":"This operation updates an existing chart entity identified by chartId in FlexOffice system, based on the Prisma model flex_office_charts. The update operation allows modification of chart properties like type, title, description, and timestamps for audit. It requires the chart ID path parameter and an update body with changed fields. Authorization roles include 'admin', 'editor', or 'viewer'.","description":"This API endpoint updates the attributes of an existing analytics chart in the FlexOffice platform. By specifying the chart ID, authorized users such as admin, editor, or viewer roles can modify properties such as chart type, descriptive title, and optional descriptive fields to keep visualizations accurate and relevant.\n\nStrict access control is enforced ensuring that only authorized users with roles 'admin', 'editor', or 'viewer' can perform modifications to prevent unauthorized data tampering.\n\nThe system will validate the existence of the target chart prior to applying updates and return the updated entity in the response. This operation serves as a complement to chart creation, deletion, and retrieval endpoints.\n\nErrors include handling cases of not found chart ID or invalid update data.","summary":"Update an existing analytics chart by chartId","parameters":[{"name":"chartId","description":"Unique identifier of the target chart to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for an existing FlexOffice chart","typeName":"IFlexOfficeChart.IUpdate"},"responseBody":{"description":"The updated FlexOffice chart entity","typeName":"IFlexOfficeChart"},"authorizationType":null,"authorizationRole":"viewer","name":"update","path":"/flexOffice/viewer/charts/{chartId}","method":"put"},{"specification":"This operation deletes an existing chart identified by chartId in the FlexOffice system based on Prisma model flex_office_charts. The operation performs a hard delete by removing the chart record since soft delete is supported by a nullable deleted_at timestamp column. The path parameter chartId specifies the target chart. Authorization is granted to users with 'admin', 'editor', or 'viewer' roles.","description":"This API endpoint permanently removes a FlexOffice chart from the system by its unique identifier. The operation is a hard delete that will erase all associated data with the chart, making it unrecoverable. Only authorized users such as admin, editor, or viewer may perform this action to protect data integrity and comply with permission policies.\n\nThe operation expects the target chart to exist; otherwise, an error will be returned. It complements other chart management endpoints such as create, update, and retrieve. No request body is required.\n\nCare must be taken to handle cascading effects on dependent entities, such as filter conditions or linked widgets, which should also be cleaned up by backend transactional logic.","summary":"Delete an analytics chart permanently by chartId","parameters":[{"name":"chartId","description":"Unique identifier of the target chart to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/flexOffice/admin/charts/{chartId}","method":"delete"},{"specification":"This operation deletes an existing chart identified by chartId in the FlexOffice system based on Prisma model flex_office_charts. The operation performs a hard delete by removing the chart record since soft delete is supported by a nullable deleted_at timestamp column. The path parameter chartId specifies the target chart. Authorization is granted to users with 'admin', 'editor', or 'viewer' roles.","description":"This API endpoint permanently removes a FlexOffice chart from the system by its unique identifier. The operation is a hard delete that will erase all associated data with the chart, making it unrecoverable. Only authorized users such as admin, editor, or viewer may perform this action to protect data integrity and comply with permission policies.\n\nThe operation expects the target chart to exist; otherwise, an error will be returned. It complements other chart management endpoints such as create, update, and retrieve. No request body is required.\n\nCare must be taken to handle cascading effects on dependent entities, such as filter conditions or linked widgets, which should also be cleaned up by backend transactional logic.","summary":"Delete an analytics chart permanently by chartId","parameters":[{"name":"chartId","description":"Unique identifier of the target chart to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"editor","name":"erase","path":"/flexOffice/editor/charts/{chartId}","method":"delete"},{"specification":"This operation deletes an existing chart identified by chartId in the FlexOffice system based on Prisma model flex_office_charts. The operation performs a hard delete by removing the chart record since soft delete is supported by a nullable deleted_at timestamp column. The path parameter chartId specifies the target chart. Authorization is granted to users with 'admin', 'editor', or 'viewer' roles.","description":"This API endpoint permanently removes a FlexOffice chart from the system by its unique identifier. The operation is a hard delete that will erase all associated data with the chart, making it unrecoverable. Only authorized users such as admin, editor, or viewer may perform this action to protect data integrity and comply with permission policies.\n\nThe operation expects the target chart to exist; otherwise, an error will be returned. It complements other chart management endpoints such as create, update, and retrieve. No request body is required.\n\nCare must be taken to handle cascading effects on dependent entities, such as filter conditions or linked widgets, which should also be cleaned up by backend transactional logic.","summary":"Delete an analytics chart permanently by chartId","parameters":[{"name":"chartId","description":"Unique identifier of the target chart to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"viewer","name":"erase","path":"/flexOffice/viewer/charts/{chartId}","method":"delete"},{"specification":"This operation fetches a paginated list of KPI widgets associated with UI widgets in the FlexOffice system, based on the Prisma model flex_office_kpi_widgets. It supports complex querying via request body with search, filter, sort, and pagination parameters. Authorization includes roles 'admin', 'editor', and 'viewer'.","description":"This API endpoint allows authorized users in roles admin, editor, or viewer to retrieve KPI widget data in a paginated, filtered, and sorted fashion. KPI widgets provide key performance indicator metrics linked to UI widgets. The request body allows specification of search criteria, filters on widget IDs, configuration parameters, and pagination controls.\n\nSecurity restrictions ensure that only authorized roles can access these details. The response provides structured paginated results including KPI widget summaries enabling clients to display metric overviews efficiently.\n\nThis operation complements CRUD operations on KPI widgets and supports frontend performance and usability needs.","summary":"List and search KPI widgets with pagination","parameters":[],"requestBody":{"description":"Search, filter, and pagination criteria for KPI widgets","typeName":"IFlexOfficeWidgetKpi.IRequest"},"responseBody":{"description":"Paginated list of KPI widget summaries","typeName":"IPageIFlexOfficeWidgetKpi.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/flexOffice/admin/widgets/kpi","method":"patch"},{"specification":"This operation fetches a paginated list of KPI widgets associated with UI widgets in the FlexOffice system, based on the Prisma model flex_office_kpi_widgets. It supports complex querying via request body with search, filter, sort, and pagination parameters. Authorization includes roles 'admin', 'editor', and 'viewer'.","description":"This API endpoint allows authorized users in roles admin, editor, or viewer to retrieve KPI widget data in a paginated, filtered, and sorted fashion. KPI widgets provide key performance indicator metrics linked to UI widgets. The request body allows specification of search criteria, filters on widget IDs, configuration parameters, and pagination controls.\n\nSecurity restrictions ensure that only authorized roles can access these details. The response provides structured paginated results including KPI widget summaries enabling clients to display metric overviews efficiently.\n\nThis operation complements CRUD operations on KPI widgets and supports frontend performance and usability needs.","summary":"List and search KPI widgets with pagination","parameters":[],"requestBody":{"description":"Search, filter, and pagination criteria for KPI widgets","typeName":"IFlexOfficeWidgetKpi.IRequest"},"responseBody":{"description":"Paginated list of KPI widget summaries","typeName":"IPageIFlexOfficeWidgetKpi.ISummary"},"authorizationType":null,"authorizationRole":"editor","name":"index","path":"/flexOffice/editor/widgets/kpi","method":"patch"},{"specification":"This operation fetches a paginated list of KPI widgets associated with UI widgets in the FlexOffice system, based on the Prisma model flex_office_kpi_widgets. It supports complex querying via request body with search, filter, sort, and pagination parameters. Authorization includes roles 'admin', 'editor', and 'viewer'.","description":"This API endpoint allows authorized users in roles admin, editor, or viewer to retrieve KPI widget data in a paginated, filtered, and sorted fashion. KPI widgets provide key performance indicator metrics linked to UI widgets. The request body allows specification of search criteria, filters on widget IDs, configuration parameters, and pagination controls.\n\nSecurity restrictions ensure that only authorized roles can access these details. The response provides structured paginated results including KPI widget summaries enabling clients to display metric overviews efficiently.\n\nThis operation complements CRUD operations on KPI widgets and supports frontend performance and usability needs.","summary":"List and search KPI widgets with pagination","parameters":[],"requestBody":{"description":"Search, filter, and pagination criteria for KPI widgets","typeName":"IFlexOfficeWidgetKpi.IRequest"},"responseBody":{"description":"Paginated list of KPI widget summaries","typeName":"IPageIFlexOfficeWidgetKpi.ISummary"},"authorizationType":null,"authorizationRole":"viewer","name":"index","path":"/flexOffice/viewer/widgets/kpi","method":"patch"},{"specification":"This operation retrieves detailed information of a KPI widget by its unique identifier from the flex_office_kpi_widgets table in the Prisma schema. It provides the main entity data including its configuration and metadata fields to authorized users. It supports basic access control with roles allowing appropriate authenticated users with editor or admin roles to view the data, ensuring security and permission enforcement. This API is fundamental to display KPI widgets used in FlexOffice dashboards and interfaces.","path":"/flexOffice/admin/widgets/kpi/{kpiWidgetId}","method":"get","summary":"Get detailed information on a specific KPI widget","description":"Retrieve detailed information of a KPI widget identified by kpiWidgetId. This includes configuration JSON, creation and update timestamps, and soft delete status.\n\nSecurity considerations: Access restricted to users with 'admin' or 'editor' roles. Unauthorized access attempts are denied.\n\nThis operation maps to the flex_office_kpi_widgets table in the Prisma schema.\n\nValidation: kpiWidgetId must be a valid UUID.\n\nRelated CRUD operations: POST to create, PUT to update, and DELETE to soft delete KPI widgets.\n\nProper error handling must respond to invalid IDs or access violations.","parameters":[{"name":"kpiWidgetId","description":"Unique identifier of the target KPI widget","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed KPI widget information","typeName":"IFlexOfficeKpiWidget"},"authorizationType":null,"authorizationRole":"admin","name":"at"},{"specification":"This operation retrieves detailed information of a KPI widget by its unique identifier from the flex_office_kpi_widgets table in the Prisma schema. It provides the main entity data including its configuration and metadata fields to authorized users. It supports basic access control with roles allowing appropriate authenticated users with editor or admin roles to view the data, ensuring security and permission enforcement. This API is fundamental to display KPI widgets used in FlexOffice dashboards and interfaces.","path":"/flexOffice/editor/widgets/kpi/{kpiWidgetId}","method":"get","summary":"Get detailed information on a specific KPI widget","description":"Retrieve detailed information of a KPI widget identified by kpiWidgetId. This includes configuration JSON, creation and update timestamps, and soft delete status.\n\nSecurity considerations: Access restricted to users with 'admin' or 'editor' roles. Unauthorized access attempts are denied.\n\nThis operation maps to the flex_office_kpi_widgets table in the Prisma schema.\n\nValidation: kpiWidgetId must be a valid UUID.\n\nRelated CRUD operations: POST to create, PUT to update, and DELETE to soft delete KPI widgets.\n\nProper error handling must respond to invalid IDs or access violations.","parameters":[{"name":"kpiWidgetId","description":"Unique identifier of the target KPI widget","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed KPI widget information","typeName":"IFlexOfficeKpiWidget"},"authorizationType":null,"authorizationRole":"editor","name":"at"},{"specification":"This operation creates a new KPI widget record in the flex_office_kpi_widgets table, storing configuration details for display in dashboards. It allows authenticated users with 'admin' or 'editor' roles to add KPI widgets with JSON configurations that define queries and display formats. This creation API supports managing dashboard content within the FlexOffice system.","path":"/flexOffice/admin/widgets/kpi","method":"post","summary":"Create a KPI widget","description":"Create a new KPI widget by providing configuration JSON and metadata.\n\nSecurity: Restricted to users with 'admin' or 'editor' roles.\n\nBusiness logic: Configuration JSON must be well-formed and comply with business rules for KPI widgets.\n\nThe operation returns the created KPI widget details.\n\nPart of CRUD for KPI management along with get, update, and delete endpoints.\n\nAppropriate error code returned for malformed requests or insufficient permissions.","parameters":[],"requestBody":{"description":"Creation data for KPI widget","typeName":"IFlexOfficeKpiWidget.ICreate"},"responseBody":{"description":"Details of newly created KPI widget","typeName":"IFlexOfficeKpiWidget"},"authorizationType":null,"authorizationRole":"admin","name":"create"},{"specification":"This operation creates a new KPI widget record in the flex_office_kpi_widgets table, storing configuration details for display in dashboards. It allows authenticated users with 'admin' or 'editor' roles to add KPI widgets with JSON configurations that define queries and display formats. This creation API supports managing dashboard content within the FlexOffice system.","path":"/flexOffice/editor/widgets/kpi","method":"post","summary":"Create a KPI widget","description":"Create a new KPI widget by providing configuration JSON and metadata.\n\nSecurity: Restricted to users with 'admin' or 'editor' roles.\n\nBusiness logic: Configuration JSON must be well-formed and comply with business rules for KPI widgets.\n\nThe operation returns the created KPI widget details.\n\nPart of CRUD for KPI management along with get, update, and delete endpoints.\n\nAppropriate error code returned for malformed requests or insufficient permissions.","parameters":[],"requestBody":{"description":"Creation data for KPI widget","typeName":"IFlexOfficeKpiWidget.ICreate"},"responseBody":{"description":"Details of newly created KPI widget","typeName":"IFlexOfficeKpiWidget"},"authorizationType":null,"authorizationRole":"editor","name":"create"},{"specification":"This operation updates an existing KPI widget identified by kpiWidgetId in the flex_office_kpi_widgets table. It enables authorized users with 'admin' or 'editor' roles to modify KPI widget configurations and metadata. The update request must conform to the IFlexOfficeKpiWidget.IUpdate schema and returns the updated entity upon success.","path":"/flexOffice/admin/widgets/kpi/{kpiWidgetId}","method":"put","summary":"Update an existing KPI widget","description":"Update a KPI widget with new configuration and metadata.\n\nSecurity: Access restricted to users with 'admin' or 'editor' roles.\n\nValidation: kpiWidgetId must be a valid UUID and exist in the database.\n\nPayload must conform to the IFlexOfficeKpiWidget.IUpdate schema.\n\nThis operation complements the create, retrieve, and delete operations for KPI widgets.\n\nErrors returned for invalid IDs, malformed input, or insufficient permissions.","parameters":[{"name":"kpiWidgetId","description":"Unique identifier of the KPI widget to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New data for KPI widget update","typeName":"IFlexOfficeKpiWidget.IUpdate"},"responseBody":{"description":"Updated KPI widget details","typeName":"IFlexOfficeKpiWidget"},"authorizationType":null,"authorizationRole":"admin","name":"update"},{"specification":"This operation updates an existing KPI widget identified by kpiWidgetId in the flex_office_kpi_widgets table. It enables authorized users with 'admin' or 'editor' roles to modify KPI widget configurations and metadata. The update request must conform to the IFlexOfficeKpiWidget.IUpdate schema and returns the updated entity upon success.","path":"/flexOffice/editor/widgets/kpi/{kpiWidgetId}","method":"put","summary":"Update an existing KPI widget","description":"Update a KPI widget with new configuration and metadata.\n\nSecurity: Access restricted to users with 'admin' or 'editor' roles.\n\nValidation: kpiWidgetId must be a valid UUID and exist in the database.\n\nPayload must conform to the IFlexOfficeKpiWidget.IUpdate schema.\n\nThis operation complements the create, retrieve, and delete operations for KPI widgets.\n\nErrors returned for invalid IDs, malformed input, or insufficient permissions.","parameters":[{"name":"kpiWidgetId","description":"Unique identifier of the KPI widget to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New data for KPI widget update","typeName":"IFlexOfficeKpiWidget.IUpdate"},"responseBody":{"description":"Updated KPI widget details","typeName":"IFlexOfficeKpiWidget"},"authorizationType":null,"authorizationRole":"editor","name":"update"},{"specification":"This operation performs a soft delete on a KPI widget identified by kpiWidgetId in the flex_office_kpi_widgets table, marking the record as deleted by setting the deleted_at timestamp, instead of hard removal. It restricts access to authorized users with 'admin' or 'editor' roles. The operation requires no request body and returns no content on successful deletion, using HTTP status code 204 No Content.","path":"/flexOffice/admin/widgets/kpi/{kpiWidgetId}","method":"delete","summary":"Soft delete of a KPI widget","description":"Soft delete a KPI widget identified by kpiWidgetId.\n\nSecurity: Only users with 'admin' or 'editor' roles may execute this operation.\n\nThis action sets the deleted_at timestamp to mark the KPI widget as deleted.\n\nNo response body is returned; success indicated via HTTP status.\n\nError handling includes invalid UUIDs and authorization failures.\n\nRelates to create, read, and update API endpoints for KPI widgets.","parameters":[{"name":"kpiWidgetId","description":"Unique identifier of the KPI widget to be deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase"},{"specification":"This operation performs a soft delete on a KPI widget identified by kpiWidgetId in the flex_office_kpi_widgets table, marking the record as deleted by setting the deleted_at timestamp, instead of hard removal. It restricts access to authorized users with 'admin' or 'editor' roles. The operation requires no request body and returns no content on successful deletion, using HTTP status code 204 No Content.","path":"/flexOffice/editor/widgets/kpi/{kpiWidgetId}","method":"delete","summary":"Soft delete of a KPI widget","description":"Soft delete a KPI widget identified by kpiWidgetId.\n\nSecurity: Only users with 'admin' or 'editor' roles may execute this operation.\n\nThis action sets the deleted_at timestamp to mark the KPI widget as deleted.\n\nNo response body is returned; success indicated via HTTP status.\n\nError handling includes invalid UUIDs and authorization failures.\n\nRelates to create, read, and update API endpoints for KPI widgets.","parameters":[{"name":"kpiWidgetId","description":"Unique identifier of the KPI widget to be deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"editor","name":"erase"},{"specification":"This operation retrieves a paginated and filtered list of filter conditions associated with a specific chart entity within the FlexOffice system. It allows clients to query active filter conditions tied to a chart for configuring or displaying analytical filters. The operation relates to the flex_office_filter_conditions table in the Analytics namespace of the Prisma schema, which stores domain-specific filter expressions that control data filtering in charts and widgets.","path":"/flexOffice/admin/charts/{chartId}/filterConditions","method":"patch","summary":"Search and retrieve filter conditions for a specific chart","description":"Retrieve a list of filter conditions linked to a specific chart in the system. This operation fetches all filter conditions, including their expressions and enablement status, associated with the given chart identifier.\n\nSecurity is enforced by requiring user authentication and role-based access permissions to ensure only authorized users (e.g., admins, editors) can query filter conditions.\n\nThe response includes an array of filter condition summaries suitable for use in UI lists or detailed configuration screens.\n\nThis operation directly interfaces with the flex_office_filter_conditions table, which defines filtering expressions for charts and optionally links these conditions to widgets.\n\nClients should use this endpoint before creating or updating conditions to understand existing configurations and avoid duplicates or conflicts.\n\nErrors occur if the chart ID is invalid or access is unauthorized. Pagination and sorting behavior can be enhanced via query parameters supported by the IRequest request body.","parameters":[{"name":"chartId","description":"Unique identifier of the target chart","schema":{"type":"string"}}],"requestBody":{"description":"Search criteria with pagination and filtering options for chart filter conditions","typeName":"IFlexOfficeFilterCondition.IRequest"},"responseBody":{"description":"Paginated list of filter conditions matching the search criteria for the chart","typeName":"IPageIFlexOfficeFilterCondition.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index"},{"specification":"This operation retrieves a paginated and filtered list of filter conditions associated with a specific chart entity within the FlexOffice system. It allows clients to query active filter conditions tied to a chart for configuring or displaying analytical filters. The operation relates to the flex_office_filter_conditions table in the Analytics namespace of the Prisma schema, which stores domain-specific filter expressions that control data filtering in charts and widgets.","path":"/flexOffice/editor/charts/{chartId}/filterConditions","method":"patch","summary":"Search and retrieve filter conditions for a specific chart","description":"Retrieve a list of filter conditions linked to a specific chart in the system. This operation fetches all filter conditions, including their expressions and enablement status, associated with the given chart identifier.\n\nSecurity is enforced by requiring user authentication and role-based access permissions to ensure only authorized users (e.g., admins, editors) can query filter conditions.\n\nThe response includes an array of filter condition summaries suitable for use in UI lists or detailed configuration screens.\n\nThis operation directly interfaces with the flex_office_filter_conditions table, which defines filtering expressions for charts and optionally links these conditions to widgets.\n\nClients should use this endpoint before creating or updating conditions to understand existing configurations and avoid duplicates or conflicts.\n\nErrors occur if the chart ID is invalid or access is unauthorized. Pagination and sorting behavior can be enhanced via query parameters supported by the IRequest request body.","parameters":[{"name":"chartId","description":"Unique identifier of the target chart","schema":{"type":"string"}}],"requestBody":{"description":"Search criteria with pagination and filtering options for chart filter conditions","typeName":"IFlexOfficeFilterCondition.IRequest"},"responseBody":{"description":"Paginated list of filter conditions matching the search criteria for the chart","typeName":"IPageIFlexOfficeFilterCondition.ISummary"},"authorizationType":null,"authorizationRole":"editor","name":"index"},{"specification":"This operation retrieves a specific filter condition entity associated with a given chart in the FlexOffice system. It provides detailed information about a single filter condition identified by both the chart and filter condition IDs. It links to the flex_office_filter_conditions table which stores the filter expressions and metadata.\n","path":"/flexOffice/admin/charts/{chartId}/filterConditions/{filterConditionId}","method":"get","summary":"Retrieve specific filter condition details by chart and condition ID","description":"Fetch detailed information about a particular filter condition by its unique identifier within the context of a specific chart.\n\nThis endpoint enforces authorization to ensure that only allowed users such as those with admin or editor roles can access the condition details.\n\nThe response includes all defined properties of the filter condition, including the filter expression and enablement flag.\n\nClients use this operation to display or modify existing filter conditions.\n\nErrors may include invalid IDs or unauthorized access.","parameters":[{"name":"chartId","description":"Unique identifier of the target chart","schema":{"type":"string"}},{"name":"filterConditionId","description":"Unique identifier of the target filter condition","schema":{"type":"string"}}],"requestBody":null,"responseBody":{"description":"Detailed filter condition information","typeName":"IFlexOfficeFilterCondition"},"authorizationType":null,"authorizationRole":"admin","name":"at"},{"specification":"This operation retrieves a specific filter condition entity associated with a given chart in the FlexOffice system. It provides detailed information about a single filter condition identified by both the chart and filter condition IDs. It links to the flex_office_filter_conditions table which stores the filter expressions and metadata.\n","path":"/flexOffice/editor/charts/{chartId}/filterConditions/{filterConditionId}","method":"get","summary":"Retrieve specific filter condition details by chart and condition ID","description":"Fetch detailed information about a particular filter condition by its unique identifier within the context of a specific chart.\n\nThis endpoint enforces authorization to ensure that only allowed users such as those with admin or editor roles can access the condition details.\n\nThe response includes all defined properties of the filter condition, including the filter expression and enablement flag.\n\nClients use this operation to display or modify existing filter conditions.\n\nErrors may include invalid IDs or unauthorized access.","parameters":[{"name":"chartId","description":"Unique identifier of the target chart","schema":{"type":"string"}},{"name":"filterConditionId","description":"Unique identifier of the target filter condition","schema":{"type":"string"}}],"requestBody":null,"responseBody":{"description":"Detailed filter condition information","typeName":"IFlexOfficeFilterCondition"},"authorizationType":null,"authorizationRole":"editor","name":"at"},{"specification":"This operation creates a new filter condition associated with a specific chart in the FlexOffice platform. It accepts condition details such as the filtering expression and enablement flag, storing the new filter condition in the flex_office_filter_conditions table.\n","path":"/flexOffice/admin/charts/{chartId}/filterConditions","method":"post","summary":"Create a new filter condition for a specific chart","description":"Create a new filter condition linked to a specified chart. The client provides the filter expression and other related data.\n\nAuthorization ensures only users with admin or editor roles can create filter conditions.\n\nUpon successful creation, the new filter condition entity is returned.\n\nErrors include validation failures or unauthorized access.\n\nThis operation is critical when extending chart filtering capabilities dynamically.","parameters":[{"name":"chartId","description":"Unique identifier of the target chart","schema":{"type":"string"}}],"requestBody":{"description":"New filter condition data for creation","typeName":"IFlexOfficeFilterCondition.ICreate"},"responseBody":{"description":"Newly created filter condition information","typeName":"IFlexOfficeFilterCondition"},"authorizationType":null,"authorizationRole":"admin","name":"create"},{"specification":"This operation creates a new filter condition associated with a specific chart in the FlexOffice platform. It accepts condition details such as the filtering expression and enablement flag, storing the new filter condition in the flex_office_filter_conditions table.\n","path":"/flexOffice/editor/charts/{chartId}/filterConditions","method":"post","summary":"Create a new filter condition for a specific chart","description":"Create a new filter condition linked to a specified chart. The client provides the filter expression and other related data.\n\nAuthorization ensures only users with admin or editor roles can create filter conditions.\n\nUpon successful creation, the new filter condition entity is returned.\n\nErrors include validation failures or unauthorized access.\n\nThis operation is critical when extending chart filtering capabilities dynamically.","parameters":[{"name":"chartId","description":"Unique identifier of the target chart","schema":{"type":"string"}}],"requestBody":{"description":"New filter condition data for creation","typeName":"IFlexOfficeFilterCondition.ICreate"},"responseBody":{"description":"Newly created filter condition information","typeName":"IFlexOfficeFilterCondition"},"authorizationType":null,"authorizationRole":"editor","name":"create"},{"specification":"This operation updates an existing filter condition identified by its unique filterConditionId and associated with a specific chart. It modifies properties such as filter expression and enablement status, recorded in the flex_office_filter_conditions database entity.\n","path":"/flexOffice/admin/charts/{chartId}/filterConditions/{filterConditionId}","method":"put","summary":"Update an existing filter condition for a specific chart","description":"Update properties of an existing filter condition for a given chart. The client supplies updated filter expression or enablement flag.\n\nThe system validates that the user holds the appropriate role (admin or editor) before permitting the update.\n\nUpon success, the updated filter condition data is returned.\n\nErrors occur on invalid ID references or failing permission checks.\n\nThis API supports the workflow of maintaining and tuning existing chart filters.","parameters":[{"name":"chartId","description":"Unique identifier of the target chart","schema":{"type":"string"}},{"name":"filterConditionId","description":"Unique identifier of the target filter condition","schema":{"type":"string"}}],"requestBody":{"description":"Filter condition update data","typeName":"IFlexOfficeFilterCondition.IUpdate"},"responseBody":{"description":"Updated filter condition information","typeName":"IFlexOfficeFilterCondition"},"authorizationType":null,"authorizationRole":"admin","name":"update"},{"specification":"This operation updates an existing filter condition identified by its unique filterConditionId and associated with a specific chart. It modifies properties such as filter expression and enablement status, recorded in the flex_office_filter_conditions database entity.\n","path":"/flexOffice/editor/charts/{chartId}/filterConditions/{filterConditionId}","method":"put","summary":"Update an existing filter condition for a specific chart","description":"Update properties of an existing filter condition for a given chart. The client supplies updated filter expression or enablement flag.\n\nThe system validates that the user holds the appropriate role (admin or editor) before permitting the update.\n\nUpon success, the updated filter condition data is returned.\n\nErrors occur on invalid ID references or failing permission checks.\n\nThis API supports the workflow of maintaining and tuning existing chart filters.","parameters":[{"name":"chartId","description":"Unique identifier of the target chart","schema":{"type":"string"}},{"name":"filterConditionId","description":"Unique identifier of the target filter condition","schema":{"type":"string"}}],"requestBody":{"description":"Filter condition update data","typeName":"IFlexOfficeFilterCondition.IUpdate"},"responseBody":{"description":"Updated filter condition information","typeName":"IFlexOfficeFilterCondition"},"authorizationType":null,"authorizationRole":"editor","name":"update"},{"specification":"This operation removes a specific filter condition associated with a chart within the FlexOffice analytics module. It targets the 'flex_office_filter_conditions' table in the Prisma schema, which stores dynamic filter expressions applied to charts for data querying. Deleting a filter condition permanently removes it along with its configuration and disables any data filtering associated with it. Proper authorization for delete access is required.","description":"This DELETE endpoint permanently removes a filter condition from the system associated with a specific chart. Filter conditions are defined expressions that enable dynamic querying and data filtering on charts. Removing a filter condition disables the corresponding filter effect on analytics dashboards.\n\nSecurity considerations require that only authorized users can delete filter conditions, ensuring data integrity.\n\nThis operation acts on the 'flex_office_filter_conditions' table as per Prisma schema, ensuring that all related references and constraints are respected during deletion.\n\nValidation includes confirming the existence of the target filter condition and proper cleanup of the database.\n\nNo request body is needed for this DELETE operation, and no response body is returned, indicating successful deletion by HTTP status code.\n\nThis operation should be used when filter conditions are no longer relevant or need to be permanently removed from analytics configurations.","summary":"Delete a specific filter condition of a chart in FlexOffice analytics","parameters":[{"name":"chartId","description":"Target chart's unique identifier (UUID)","schema":{"type":"string","format":"uuid"}},{"name":"filterConditionId","description":"Target filter condition's unique identifier (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/flexOffice/admin/charts/{chartId}/filterConditions/{filterConditionId}","method":"delete"},{"specification":"This operation removes a specific filter condition associated with a chart within the FlexOffice analytics module. It targets the 'flex_office_filter_conditions' table in the Prisma schema, which stores dynamic filter expressions applied to charts for data querying. Deleting a filter condition permanently removes it along with its configuration and disables any data filtering associated with it. Proper authorization for delete access is required.","description":"This DELETE endpoint permanently removes a filter condition from the system associated with a specific chart. Filter conditions are defined expressions that enable dynamic querying and data filtering on charts. Removing a filter condition disables the corresponding filter effect on analytics dashboards.\n\nSecurity considerations require that only authorized users can delete filter conditions, ensuring data integrity.\n\nThis operation acts on the 'flex_office_filter_conditions' table as per Prisma schema, ensuring that all related references and constraints are respected during deletion.\n\nValidation includes confirming the existence of the target filter condition and proper cleanup of the database.\n\nNo request body is needed for this DELETE operation, and no response body is returned, indicating successful deletion by HTTP status code.\n\nThis operation should be used when filter conditions are no longer relevant or need to be permanently removed from analytics configurations.","summary":"Delete a specific filter condition of a chart in FlexOffice analytics","parameters":[{"name":"chartId","description":"Target chart's unique identifier (UUID)","schema":{"type":"string","format":"uuid"}},{"name":"filterConditionId","description":"Target filter condition's unique identifier (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"editor","name":"erase","path":"/flexOffice/editor/charts/{chartId}/filterConditions/{filterConditionId}","method":"delete"},{"specification":"This operation retrieves a paginated list of export logs in the FlexOffice analytics context. It accesses the 'flex_office_export_logs' table that tracks user export activities including export type, target objects, status, executing user, and timestamps. The endpoint supports search criteria, filtering, and pagination parameters.","description":"Retrieve a filtered and paginated list of export logs documenting user export operations within FlexOffice. These logs include export format, data targets, success or failure status, and user audit details.\n\nSecurity considerations restrict access to admin users for audit and compliance purposes.\n\nSearch and filter parameters allow querying logs based on relevant criteria, with pagination to handle large data volumes.\n\nThe response includes summary export log items optimized for list display.\n\nNo path parameters are required. Request body contains search, filter, and pagination details.\n\nUse this operation to audit data export activities and track usage patterns across the system.","summary":"Search and retrieve paginated list of export logs","parameters":[],"requestBody":{"description":"Export log search criteria and pagination parameters","typeName":"IFlexOfficeExportLog.IRequest"},"responseBody":{"description":"Paginated list of export log summary information matching search criteria","typeName":"IPageIFlexOfficeExportLog.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/flexOffice/admin/exportLogs","method":"patch"},{"specification":"Retrieve detailed information of a specific export log entry from the FlexOffice analytics export audit trail, stored in the 'flex_office_export_logs' table. This operation returns all recorded metadata including export type, target data, status, executor, and timestamps.","description":"Fetch detailed information of a single export log by its unique identifier.\n\nThis operation is important for audit review, forensic analysis, and compliance monitoring of export activities.\n\nThe export log entity contains comprehensive information about the export type, data involved, status result, user who executed the operation, and timing details.\n\nOnly authorized admin users may access this sensitive data.\n\nNo request body is needed; the response includes the full export log entity.\n\nErrors are handled with appropriate status codes if the log entry is not found or access is denied.","summary":"Retrieve detailed export log by ID","parameters":[{"name":"exportLogId","description":"Unique identifier of the target export log (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Export log detailed information","typeName":"IFlexOfficeExportLog"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/flexOffice/admin/exportLogs/{exportLogId}","method":"get"},{"specification":"This operation retrieves a paginated list of audit logs related to system events, user actions, and security monitoring within the FlexOffice administration context. It reads from the 'flex_office_audit_logs' table which stores immutable, append-only records for compliance and forensic investigation.","description":"Retrieve audit log entries with comprehensive filtering, searching, and pagination support.\n\nAudit logs include types, actors, targets, actions performed, descriptions, and timestamps, ensuring a full trace of system and user events.\n\nAccess is restricted to admin users for security and compliance.\n\nThe request body contains search filters and pagination info allowing detailed querying.\n\nThe response returns a paged list of audit log summaries optimized for UI display.\n\nThis API supports compliance monitoring, forensic analysis, and regulatory audits.","summary":"Search and retrieve paginated list of audit logs","parameters":[],"requestBody":{"description":"Audit log search and filter parameters","typeName":"IFlexOfficeAuditLog.IRequest"},"responseBody":{"description":"Paginated list of audit log summary entries matching criteria","typeName":"IPageIFlexOfficeAuditLog.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/flexOffice/admin/audits","method":"patch"},{"specification":"This operation retrieves a single audit log record by its unique identifier from the flex_office_audit_logs table in the Administration namespace as defined in the Prisma schema. It is used by admins to view detailed immutable audit event information such as event type, actor, target entity, action performed, description, and timestamps. This read-only GET endpoint ensures security and access control compliance by limiting visibility to authorized roles only. It returns detailed audit log data for forensic and compliance purposes.","description":"Retrieve a detailed audit log entry by its unique ID from the system's audit logs. Audit logs capture immutable security and system event information including event type, actor role and ID, target entity details, action performed, and optional descriptive text.\n\nThis operation is critical for administrators and auditors to examine compliance and security-related activities. Access control ensures only authorized users can view sensitive audit information.\n\nIt accesses the flex_office_audit_logs Prisma table, which stores comprehensive audit events with timestamps and soft deletion support (though soft deleted records are typically excluded).\n\nThe endpoint takes an UUID path parameter identifying the audit log record. It returns the full audit log entry if found or appropriate error if not.\n\nSecurity and authorization are paramount given the sensitive nature of audit logs.","summary":"Get a single audit log entry by ID","parameters":[{"name":"id","description":"Unique identifier of the audit log entry to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed audit log entry","typeName":"IFlexOfficeAuditLog"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/flexOffice/admin/audits/{id}","method":"get"},{"specification":"This operation lists user activity logs from the flex_office_user_activity_logs table with support for advanced filtering, searching, and pagination via the IFlexOfficeUserActivityLog.IRequest request structure. It enables authorized users, typically admins, to monitor user interactions such as logins, edits, and views with associated metadata including IP address and timestamps. The paginated response returns summaries of activity logs along with total counts for overview and management purposes.","description":"Retrieve a filtered, sorted, and paginated list of user activity logs. These logs track various user actions including login events, page edits, dashboard views, and other critical interactions.\n\nThe operation accepts complex search parameters such as user ID filter, action types, date ranges, and IP address filtering to refine results. Pagination and sorting options allow manageable result sets.\n\nOnly authorized roles can access user activity logs due to audit policy and privacy concerns.\n\nThis operation uses the flex_office_user_activity_logs table from the Prisma schema, ensuring all returned data includes action details and timestamps.\n\nThe response is paginated providing summaries appropriate for dashboard display or audit review.","summary":"Search and retrieve paginated user activity logs","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for user activity logs","typeName":"IFlexOfficeUserActivityLog.IRequest"},"responseBody":{"description":"Paginated list of user activity log summaries matching search criteria","typeName":"IPageIFlexOfficeUserActivityLog.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/flexOffice/admin/userActivityLogs","method":"patch"},{"specification":"Retrieve detailed user activity log information for a specific log entry identified by UUID from the flex_office_user_activity_logs Prisma table. This endpoint provides authorized administrators with full metadata about user actions such as action type, details, IP address, and timestamps. This is essential for audit and monitoring to track user behavior and system usage patterns with security permissions enforced.","description":"Retrieve detailed user activity log entry by its unique ID. User activity logs provide comprehensive information about user actions performed in the system including action types, optional detailed context, IP address of origin, and precise timestamps.\n\nThis operation supports auditing and monitoring by enabling authorized users to view individual user activity records securely.\n\nAccess is restricted to authorized roles. Data is retrieved from the flex_office_user_activity_logs Prisma table with all related fields.\n\nThe response returns a detailed single user activity log entry corresponding to the requested ID.","summary":"Get a single user activity log entry by ID","parameters":[{"name":"id","description":"Unique identifier of the user activity log entry to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed user activity log entry","typeName":"IFlexOfficeUserActivityLog"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/flexOffice/admin/userActivityLogs/{id}","method":"get"},{"specification":"Retrieve a paginated list of system alerts from the flex_office_system_alerts table with filtering and sorting options. This operation is vital for system administrators to monitor active and resolved alerts related to system health, security, and performance issues. The request allows querying by severity, resolution status, and creation date ranges. Alerts include severity, message, resolution flags, and timestamps. The response returns alert summaries for efficient monitoring.","description":"Retrieve filtered and paginated list of system alerts to monitor system health and security status. System alerts include severity level, descriptive messages, resolution status, and timestamps for creation and resolution.\n\nThe operation supports filtering by severity, resolution state, and other parameters, with pagination to limit result size.\n\nThis API is intended for system administrators to keep track of critical events and ensure timely remediation.\n\nData is sourced from the flex_office_system_alerts Prisma table, which supports active record management.\n\nThe response consists of alert summary data optimized for dashboard display.","summary":"Search and retrieve paginated system alerts","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for system alerts","typeName":"IFlexOfficeSystemAlert.IRequest"},"responseBody":{"description":"Paginated list of system alert summaries matching search criteria","typeName":"IPageIFlexOfficeSystemAlert.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/flexOffice/admin/systemAlerts","method":"patch"},{"specification":"This operation retrieves a specific system alert entity identified by its unique ID from the flex_office_system_alerts table in the Prisma DB schema. The system alert represents notifications and warnings about system health, security, or performance status, including severity, message, resolution status, and timestamps. This GET endpoint allows authorized users to view detailed alert information for monitoring and troubleshooting purposes, ensuring only users with appropriate roles can access sensitive operational data.","description":"Retrieve detailed information about a specific system alert from the database. The targeted system alert includes data such as severity (info, warning, critical), message describing the alert, resolution status, and timestamps for creation, update, and resolution.\n\nSecurity considerations include restricting access to authenticated users with appropriate permissions or roles that allow viewing system alerts. This prevents unauthorized users from accessing potentially sensitive operational information.\n\nThis operation directly queries the flex_office_system_alerts table, which is central to the system's alerting and monitoring functionality. It is essential for administrators or monitoring services to obtain accurate current alert status.\n\nValidation ensures the provided alert ID is a valid UUID matching existing records. If the alert does not exist, an appropriate error response should be given.\n\nRelated operations include listing alerts, creating new alerts (usually system generated), updating alerts' resolution status, and removing alerts from the active list.\n\nThis GET operation returns a full system alert data entity without modification.","summary":"Retrieve detailed information of a system alert by its ID","parameters":[{"name":"id","description":"Unique identifier (UUID) of the system alert to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed system alert information","typeName":"IFlexOfficeSystemAlerts"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/flexOffice/admin/systemAlerts/{id}","method":"get"},{"specification":"This operation creates a new system alert notification entry in the flex_office_system_alerts table as part of the FlexOffice administration monitoring framework. System alerts notify administrators or monitoring tools about critical or warning events relating to system health, security issues, or performance anomalies. This POST method receives necessary alert details such as severity, message content, and resolution status to log new incidents requiring administrator attention.","description":"Create a new system alert record capturing severity level (e.g., info, warning, critical), descriptive message, initial resolution status (typically unresolved), and timestamps.\n\nSecurity mandates this operation is restricted to admin roles with privileges to generate alerts either manually or from automated backend processes.\n\nThe operation validates input data integrity, including severity field constraints.\n\nSystem alerts created are recorded with server-generated timestamps for consistency.\n\nThis endpoint serves system monitoring components or privileged users who manually log new alerts.\n\nNo response body is necessary other than confirmation of creation success with new alert details.","summary":"Create a new system alert notification","parameters":[],"requestBody":{"description":"Information required to create a new system alert","typeName":"IFlexOfficeSystemAlerts.ICreate"},"responseBody":{"description":"Created system alert information","typeName":"IFlexOfficeSystemAlerts"},"authorizationType":null,"authorizationRole":"admin","name":"create","path":"/flexOffice/admin/systemAlerts","method":"post"},{"specification":"This operation updates an existing system alert identified by its unique ID in the flex_office_system_alerts table. Administrative users can modify alert severity, message, and resolution status, and update relevant timestamps to reflect resolution or status changes. This operation is critical for managing ongoing alert lifecycle and ensuring system monitoring data remains accurate and actionable.","description":"Update details of an existing system alert including severity, message, and resolution status. The operation requires the alert's unique identifier and a request body containing modifiable alert attributes.\n\nSecurity protocols require only admin users to perform updates. The system ensures request data integrity and validates status transitions.\n\nSuccessful updates modify the alert record's update timestamp.\n\nThis PUT operation returns the updated system alert information for confirmation.\n\nRelated operations include retrieving alert info, creating new alerts, and deleting alerts when resolved or obsolete.","summary":"Update an existing system alert by its ID","parameters":[{"name":"id","description":"Unique identifier (UUID) of the system alert to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New data for the system alert to update","typeName":"IFlexOfficeSystemAlerts.IUpdate"},"responseBody":{"description":"Updated system alert information","typeName":"IFlexOfficeSystemAlerts"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/flexOffice/admin/systemAlerts/{id}","method":"put"},{"specification":"This operation permanently deletes a system alert record identified by its unique ID from the flex_office_system_alerts table. Deletion removes the alert from the active alert list and database, typically used to clean up resolved or obsolete alerts. Only administrators with appropriate roles can perform this irreversible operation to maintain system integrity and prevent accidental data loss.","description":"Delete a system alert permanently from the database. This operation removes all data associated with the alert and cannot be undone.\n\nOnly users with admin privileges can execute this operation.\n\nValidation applies to the alert ID parameter ensuring valid UUID format.\n\nThis operation does not return a response body but should confirm success or failure through HTTP status codes.\n\nRelated API calls include listing alerts, retrieving, creating, and updating alerts.\n\nThis endpoint supports hard deletion of system alert data.","summary":"Delete a system alert by its ID","parameters":[{"name":"id","description":"Unique identifier (UUID) of the system alert to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/flexOffice/admin/systemAlerts/{id}","method":"delete"},{"specification":"This operation retrieves a paginated list of custom logic scripts that extend FlexOffice functionality. The flex_office_custom_scripts table stores standalone programmable modules executable as JavaScript or Python code. This GET-like search endpoint supports complex filtering, full-text search, and pagination to enable clients to browse, filter, and page through custom scripts by properties such as code, name, language, and dates. The operation requires user authentication with an 'editor' or 'admin' role to safeguard script access and editing capabilities. Returned data comprises summary entities for efficient listing.","description":"Retrieve a filtered, paginated list of FlexOffice custom scripts stored in the flex_office_custom_scripts table. These scripts represent independent programmable units written in JavaScript or Python, managed for extending system functionality.\n\nThis operation supports advanced search and filtering capabilities across script codes, names, languages, and timestamps with full-text search indexes enabling responsive queries.\n\nSecurity is enforced to allow only authenticated users with appropriate roles (editor or admin). The API returns summaries of scripts optimized for list views with pagination metadata.\n\nRelated operations include single entity retrieval, creation, and updates to manage scripts.\n\nErrors will be communicated with appropriate status codes for unauthorized access or invalid filters.","summary":"Search and list FlexOffice custom scripts with filtering, sorting, and pagination","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for custom scripts filtering","typeName":"IFlexOfficeCustomScripts.IRequest"},"responseBody":{"description":"Paginated list of custom script summaries match search conditions","typeName":"IPageIFlexOfficeCustomScript.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/flexOffice/admin/customScripts","method":"patch"},{"specification":"This operation retrieves a paginated list of custom logic scripts that extend FlexOffice functionality. The flex_office_custom_scripts table stores standalone programmable modules executable as JavaScript or Python code. This GET-like search endpoint supports complex filtering, full-text search, and pagination to enable clients to browse, filter, and page through custom scripts by properties such as code, name, language, and dates. The operation requires user authentication with an 'editor' or 'admin' role to safeguard script access and editing capabilities. Returned data comprises summary entities for efficient listing.","description":"Retrieve a filtered, paginated list of FlexOffice custom scripts stored in the flex_office_custom_scripts table. These scripts represent independent programmable units written in JavaScript or Python, managed for extending system functionality.\n\nThis operation supports advanced search and filtering capabilities across script codes, names, languages, and timestamps with full-text search indexes enabling responsive queries.\n\nSecurity is enforced to allow only authenticated users with appropriate roles (editor or admin). The API returns summaries of scripts optimized for list views with pagination metadata.\n\nRelated operations include single entity retrieval, creation, and updates to manage scripts.\n\nErrors will be communicated with appropriate status codes for unauthorized access or invalid filters.","summary":"Search and list FlexOffice custom scripts with filtering, sorting, and pagination","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for custom scripts filtering","typeName":"IFlexOfficeCustomScripts.IRequest"},"responseBody":{"description":"Paginated list of custom script summaries match search conditions","typeName":"IPageIFlexOfficeCustomScript.ISummary"},"authorizationType":null,"authorizationRole":"editor","name":"index","path":"/flexOffice/editor/customScripts","method":"patch"},{"specification":"This operation retrieves detailed information of a specific FlexOffice custom script identified by its unique ID. The target record resides in the flex_office_custom_scripts table, storing independently managed programmable scripts with properties such as code, name, language, description, and source code content.\n\nThe API requires user authorization restricted to 'admin' and 'editor' roles ensuring confidentiality and control over script details. On success, it returns the full entity representing the custom script. If not found, an error response is issued.\n\nThis operation complements the list and modification APIs to enable full lifecycle management of custom scripts for FlexOffice extensibility.","description":"Fetch a single FlexOffice custom script by its unique identifier from the flex_office_custom_scripts table. The entity includes comprehensive information such as business code, descriptive name, scripting language, detailed description, and source content.\n\nAuthorized users with roles 'admin' or 'editor' may access this information securely. The retrieved script supports extension and customization use cases.\n\nErrors including not found or unauthorized access are returned with proper HTTP status codes.","summary":"Get single FlexOffice custom script details by ID","parameters":[{"name":"id","description":"Unique identifier of the custom script","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed custom script information","typeName":"IFlexOfficeCustomScript"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/flexOffice/admin/customScripts/{id}","method":"get"},{"specification":"This operation retrieves detailed information of a specific FlexOffice custom script identified by its unique ID. The target record resides in the flex_office_custom_scripts table, storing independently managed programmable scripts with properties such as code, name, language, description, and source code content.\n\nThe API requires user authorization restricted to 'admin' and 'editor' roles ensuring confidentiality and control over script details. On success, it returns the full entity representing the custom script. If not found, an error response is issued.\n\nThis operation complements the list and modification APIs to enable full lifecycle management of custom scripts for FlexOffice extensibility.","description":"Fetch a single FlexOffice custom script by its unique identifier from the flex_office_custom_scripts table. The entity includes comprehensive information such as business code, descriptive name, scripting language, detailed description, and source content.\n\nAuthorized users with roles 'admin' or 'editor' may access this information securely. The retrieved script supports extension and customization use cases.\n\nErrors including not found or unauthorized access are returned with proper HTTP status codes.","summary":"Get single FlexOffice custom script details by ID","parameters":[{"name":"id","description":"Unique identifier of the custom script","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed custom script information","typeName":"IFlexOfficeCustomScript"},"authorizationType":null,"authorizationRole":"editor","name":"at","path":"/flexOffice/editor/customScripts/{id}","method":"get"},{"specification":"This operation creates a new FlexOffice custom script in the flex_office_custom_scripts table. Users with 'admin' or 'editor' roles can create independent programmable modules using JavaScript or Python to extend system functionality.\n\nClients must provide creation data including unique business code, human-readable name, scripting language type, optional description, and the source code content. The system persists the new script and returns the complete stored entity.\n\nValidation ensures code uniqueness and correct script language specification. Creation triggers may log audit events internally.\n\nThis API complements the read and update endpoints for full custom script lifecycle management.","description":"Create a new FlexOffice custom script record with required details: unique code, name, language, optional description, and script content. Ensures uniqueness and permissions check for admin/editor roles.\n\nOn success, returns the full created entity including generated identifiers and timestamps.\n\nErrors due to duplicate codes, validation failures, or unauthorized access will be returned.","summary":"Create a new FlexOffice custom script","parameters":[],"requestBody":{"description":"Creation data for new custom script","typeName":"IFlexOfficeCustomScript.ICreate"},"responseBody":{"description":"Created custom script entity","typeName":"IFlexOfficeCustomScript"},"authorizationType":null,"authorizationRole":"admin","name":"create","path":"/flexOffice/admin/customScripts","method":"post"},{"specification":"This operation creates a new FlexOffice custom script in the flex_office_custom_scripts table. Users with 'admin' or 'editor' roles can create independent programmable modules using JavaScript or Python to extend system functionality.\n\nClients must provide creation data including unique business code, human-readable name, scripting language type, optional description, and the source code content. The system persists the new script and returns the complete stored entity.\n\nValidation ensures code uniqueness and correct script language specification. Creation triggers may log audit events internally.\n\nThis API complements the read and update endpoints for full custom script lifecycle management.","description":"Create a new FlexOffice custom script record with required details: unique code, name, language, optional description, and script content. Ensures uniqueness and permissions check for admin/editor roles.\n\nOn success, returns the full created entity including generated identifiers and timestamps.\n\nErrors due to duplicate codes, validation failures, or unauthorized access will be returned.","summary":"Create a new FlexOffice custom script","parameters":[],"requestBody":{"description":"Creation data for new custom script","typeName":"IFlexOfficeCustomScript.ICreate"},"responseBody":{"description":"Created custom script entity","typeName":"IFlexOfficeCustomScript"},"authorizationType":null,"authorizationRole":"editor","name":"create","path":"/flexOffice/editor/customScripts","method":"post"},{"specification":"This operation updates an existing FlexOffice custom script identified by its unique ID within the flex_office_custom_scripts table. It accepts modifications to properties such as name, description, scripting language, and source code content.\n\nAccess is restricted to users with 'admin' or 'editor' roles for security and integrity. The endpoint expects updated data in the request body and returns the modified entity upon success.\n\nValidation ensures updated script details comply with system requirements, and concurrency control may be enforced at the system level. This operation supports full lifecycle maintenance of custom scripts as part of the extensibility module.","description":"Update an existing FlexOffice custom script by ID, modifying its name, description, language, or source code. Only authorized users with admin or editor roles can perform this operation.\n\nThe request body must contain valid update data.\n\nReturns the updated full entity on success, with errors for not found, validation failures, or unauthorized access.","summary":"Update FlexOffice custom script information by ID","parameters":[{"name":"id","description":"Unique identifier of the custom script to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for the custom script","typeName":"IFlexOfficeCustomScript.IUpdate"},"responseBody":{"description":"Updated custom script entity","typeName":"IFlexOfficeCustomScript"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/flexOffice/admin/customScripts/{id}","method":"put"},{"specification":"This operation updates an existing FlexOffice custom script identified by its unique ID within the flex_office_custom_scripts table. It accepts modifications to properties such as name, description, scripting language, and source code content.\n\nAccess is restricted to users with 'admin' or 'editor' roles for security and integrity. The endpoint expects updated data in the request body and returns the modified entity upon success.\n\nValidation ensures updated script details comply with system requirements, and concurrency control may be enforced at the system level. This operation supports full lifecycle maintenance of custom scripts as part of the extensibility module.","description":"Update an existing FlexOffice custom script by ID, modifying its name, description, language, or source code. Only authorized users with admin or editor roles can perform this operation.\n\nThe request body must contain valid update data.\n\nReturns the updated full entity on success, with errors for not found, validation failures, or unauthorized access.","summary":"Update FlexOffice custom script information by ID","parameters":[{"name":"id","description":"Unique identifier of the custom script to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for the custom script","typeName":"IFlexOfficeCustomScript.IUpdate"},"responseBody":{"description":"Updated custom script entity","typeName":"IFlexOfficeCustomScript"},"authorizationType":null,"authorizationRole":"editor","name":"update","path":"/flexOffice/editor/customScripts/{id}","method":"put"},{"specification":"This operation deletes a specific custom script from the Extensibility module's flex_office_custom_scripts table. It permanently removes the custom script identified by the given UUID. Only active scripts without deleted_at null can be deleted. This API performs a hard delete, removing the script record from the database. It requires authorization roles that include admin and editor users, who manage scripts.","path":"/flexOffice/admin/customScripts/{id}","method":"delete","summary":"Delete a custom script by ID","description":"Deletes a custom script entity from the FlexOffice system. This endpoint permanently removes the script data stored in the flex_office_custom_scripts table, identified by the given custom script ID (UUID).\n\nOnly users with admin or editor roles can perform this operation. Upon deletion, any version history or references to this script must be handled by cascading deletions or service-level safeguards.\n\nThis operation does not permit restoring the deleted script; it is a permanent removal.\n\nSecurity considerations include verifying user permissions to avoid unauthorized deletions.\n\nIf the provided ID does not correspond to an existing script, the operation will return a not found error.\n\nNo request body is required. The response contains no body.\n\nIt is related to other script management APIs such as script creation and retrieval. Users should use script creation APIs to add new scripts after deletion if needed.","parameters":[{"name":"id","in":"path","description":"Unique identifier of the custom script to delete (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase"},{"specification":"This operation deletes a specific custom script from the Extensibility module's flex_office_custom_scripts table. It permanently removes the custom script identified by the given UUID. Only active scripts without deleted_at null can be deleted. This API performs a hard delete, removing the script record from the database. It requires authorization roles that include admin and editor users, who manage scripts.","path":"/flexOffice/editor/customScripts/{id}","method":"delete","summary":"Delete a custom script by ID","description":"Deletes a custom script entity from the FlexOffice system. This endpoint permanently removes the script data stored in the flex_office_custom_scripts table, identified by the given custom script ID (UUID).\n\nOnly users with admin or editor roles can perform this operation. Upon deletion, any version history or references to this script must be handled by cascading deletions or service-level safeguards.\n\nThis operation does not permit restoring the deleted script; it is a permanent removal.\n\nSecurity considerations include verifying user permissions to avoid unauthorized deletions.\n\nIf the provided ID does not correspond to an existing script, the operation will return a not found error.\n\nNo request body is required. The response contains no body.\n\nIt is related to other script management APIs such as script creation and retrieval. Users should use script creation APIs to add new scripts after deletion if needed.","parameters":[{"name":"id","in":"path","description":"Unique identifier of the custom script to delete (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"editor","name":"erase"},{"specification":"This operation retrieves a paginated list of marketplace widgets available in the Extensibility module's flex_office_marketplace_widgets table. It supports complex search, filtering, sorting, and pagination through a structured request body. The list includes widget summaries optimized for overview display. Only authorized users with roles admin or editor can access this endpoint.","path":"/flexOffice/admin/marketplaceWidgets","method":"patch","summary":"Retrieve list of marketplace widgets with filtering, pagination, and sorting","description":"Retrieves a filtered, sorted, and paginated list of marketplace widgets from the system. This endpoint provides advanced search capabilities to find marketplace widgets by name, version, or description.\n\nSupports pagination parameters such as page number and size, searching by keywords, and sorting by creation date or widget name.\n\nOnly users with admin or editor roles may access this list due to the sensitivity of marketplace widget management.\n\nResponse includes summaries of marketplace widgets suitable for listings and browsing.\n\nThe operation integrates with the flex_office_marketplace_widgets table to fetch current active widgets (not deleted) and includes indexes on name and version for efficient querying.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for marketplace widgets filtering","typeName":"IFlexOfficeMarketplaceWidget.IRequest"},"responseBody":{"description":"Paginated list of marketplace widget summaries matching search criteria","typeName":"IPageIFlexOfficeMarketplaceWidget.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index"},{"specification":"This operation retrieves a paginated list of marketplace widgets available in the Extensibility module's flex_office_marketplace_widgets table. It supports complex search, filtering, sorting, and pagination through a structured request body. The list includes widget summaries optimized for overview display. Only authorized users with roles admin or editor can access this endpoint.","path":"/flexOffice/editor/marketplaceWidgets","method":"patch","summary":"Retrieve list of marketplace widgets with filtering, pagination, and sorting","description":"Retrieves a filtered, sorted, and paginated list of marketplace widgets from the system. This endpoint provides advanced search capabilities to find marketplace widgets by name, version, or description.\n\nSupports pagination parameters such as page number and size, searching by keywords, and sorting by creation date or widget name.\n\nOnly users with admin or editor roles may access this list due to the sensitivity of marketplace widget management.\n\nResponse includes summaries of marketplace widgets suitable for listings and browsing.\n\nThe operation integrates with the flex_office_marketplace_widgets table to fetch current active widgets (not deleted) and includes indexes on name and version for efficient querying.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for marketplace widgets filtering","typeName":"IFlexOfficeMarketplaceWidget.IRequest"},"responseBody":{"description":"Paginated list of marketplace widget summaries matching search criteria","typeName":"IPageIFlexOfficeMarketplaceWidget.ISummary"},"authorizationType":null,"authorizationRole":"editor","name":"index"},{"specification":"This operation retrieves detailed information of a single marketplace widget from the Extensibility flex_office_marketplace_widgets table by its unique identifier. Users with admin or editor roles may access the detailed widget record including metadata, version, and description. The operation returns the full widget entity.","path":"/flexOffice/admin/marketplaceWidgets/{id}","method":"get","summary":"Get marketplace widget details by ID","description":"Retrieve details of a specific marketplace widget identified by the provided UUID. This API fetches the full record, including widget code, name, version, description, and timestamps.\n\nAccessible only to users with admin or editor roles. The endpoint validates the ID and returns 404 if the widget does not exist.\n\nThe operation is useful for displaying detailed widget metadata in management interfaces.\n\nRelated operations include updating or deleting marketplace widgets, and listing widgets for selection.\n\nNo request body is required for this GET operation.","parameters":[{"name":"id","in":"path","description":"Unique identifier of the marketplace widget (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Marketplace widget detail information","typeName":"IFlexOfficeMarketplaceWidget"},"authorizationType":null,"authorizationRole":"admin","name":"at"},{"specification":"This operation retrieves detailed information of a single marketplace widget from the Extensibility flex_office_marketplace_widgets table by its unique identifier. Users with admin or editor roles may access the detailed widget record including metadata, version, and description. The operation returns the full widget entity.","path":"/flexOffice/editor/marketplaceWidgets/{id}","method":"get","summary":"Get marketplace widget details by ID","description":"Retrieve details of a specific marketplace widget identified by the provided UUID. This API fetches the full record, including widget code, name, version, description, and timestamps.\n\nAccessible only to users with admin or editor roles. The endpoint validates the ID and returns 404 if the widget does not exist.\n\nThe operation is useful for displaying detailed widget metadata in management interfaces.\n\nRelated operations include updating or deleting marketplace widgets, and listing widgets for selection.\n\nNo request body is required for this GET operation.","parameters":[{"name":"id","in":"path","description":"Unique identifier of the marketplace widget (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Marketplace widget detail information","typeName":"IFlexOfficeMarketplaceWidget"},"authorizationType":null,"authorizationRole":"editor","name":"at"},{"specification":"This operation creates a new marketplace widget record in the FlexOffice extensibility module's flex_office_marketplace_widgets table. It requires a request body with the widget's code, name, version, description, and timestamps. Only admin and editor roles are authorized to create new marketplace widgets.\n\nThe created widget record is returned in the response.","path":"/flexOffice/admin/marketplaceWidgets","method":"post","summary":"Create a new marketplace widget","description":"Creates a new marketplace widget in the system. The client must provide detailed widget information including unique widget code, name, version, and optional description.\n\nOnly users with admin or editor roles may perform this operation. The system validates the uniqueness of the widget code.\n\nOn successful creation, the newly created widget entity is returned with all details.\n\nThis operation is part of the extensibility module's marketplace widget management functionalities.\n\nNo soft delete or versioning is involved beyond audit timestamps.\n\nClients should handle error responses such as duplicate code or validation failures appropriately.","parameters":[],"requestBody":{"description":"Creation info for a new marketplace widget","typeName":"IFlexOfficeMarketplaceWidget.ICreate"},"responseBody":{"description":"Created marketplace widget entity","typeName":"IFlexOfficeMarketplaceWidget"},"authorizationType":null,"authorizationRole":"admin","name":"create"},{"specification":"This operation creates a new marketplace widget record in the FlexOffice extensibility module's flex_office_marketplace_widgets table. It requires a request body with the widget's code, name, version, description, and timestamps. Only admin and editor roles are authorized to create new marketplace widgets.\n\nThe created widget record is returned in the response.","path":"/flexOffice/editor/marketplaceWidgets","method":"post","summary":"Create a new marketplace widget","description":"Creates a new marketplace widget in the system. The client must provide detailed widget information including unique widget code, name, version, and optional description.\n\nOnly users with admin or editor roles may perform this operation. The system validates the uniqueness of the widget code.\n\nOn successful creation, the newly created widget entity is returned with all details.\n\nThis operation is part of the extensibility module's marketplace widget management functionalities.\n\nNo soft delete or versioning is involved beyond audit timestamps.\n\nClients should handle error responses such as duplicate code or validation failures appropriately.","parameters":[],"requestBody":{"description":"Creation info for a new marketplace widget","typeName":"IFlexOfficeMarketplaceWidget.ICreate"},"responseBody":{"description":"Created marketplace widget entity","typeName":"IFlexOfficeMarketplaceWidget"},"authorizationType":null,"authorizationRole":"editor","name":"create"},{"specification":"This operation updates an existing marketplace widget resource identified by the widget's UUID. It modifies attributes such as its code, name, version, description, timestamps, and soft deletion status from the 'flex_office_marketplace_widgets' table in the Prisma schema. The update is restricted to admin users for security and consistency. The schema mandates unique widget_code and supports versioning. The update persists with proper concurrency and audit considerations.","path":"/flexOffice/admin/marketplaceWidgets/{id}","method":"put","summary":"Update an existing marketplace widget","description":"Updates a marketplace widget's details including its unique code, name, version, and description. Only admins may perform this operation. The widget is identified by UUID path parameter. Soft delete timestamps allow marking the widget as archived without physical deletion. Returns the updated widget details upon success.","parameters":[{"name":"id","in":"path","description":"Unique identifier of the marketplace widget to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"MarketPlace widget update data","typeName":"IFlexOfficeMarketplaceWidget.IUpdate"},"responseBody":{"description":"Updated marketplace widget information","typeName":"IFlexOfficeMarketplaceWidget"},"authorizationType":null,"authorizationRole":"admin","name":"updateMarketplaceWidget"},{"specification":"This operation deletes a marketplace widget permanently by its UUID in the 'flex_office_marketplace_widgets' table. Since the schema does not include a soft deletion timestamp for this table, this is a hard delete operation. Only admin role holders may delete widgets to protect system integrity. The endpoint requires the widget UUID in the path and returns no content.","path":"/flexOffice/admin/marketplaceWidgets/{id}","method":"delete","summary":"Permanently delete a marketplace widget","description":"Permits an admin to permanently delete a marketplace widget by specifying its UUID. The deletion cannot be undone due to absence of soft delete in the schema. Valid UUIDs are checked and existing references to the widget are cleared as part of cleanup. Admin authorization is required.","parameters":[{"name":"id","in":"path","description":"Unique identifier of the marketplace widget to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"eraseMarketplaceWidget"},{"specification":"Retrieves a paginated and filtered list of widget installations for a specified marketplace widget. This operation operates on the 'flex_office_widget_installations' table and supports search and pagination criteria through the request body. It returns summarized installation information with paging data. Access is limited to admin and editor roles for oversight and management.","path":"/flexOffice/admin/marketplaceWidgets/{widgetId}/installations","method":"patch","summary":"List widget installations for a marketplace widget","description":"Fetches a paginated list of UI page installations for a specific marketplace widget by its UUID. Supports filtering and sorting via request body parameters. Access allowed for admins and editors only. Returns summarized install data paginated for client consumption.","parameters":[{"name":"widgetId","in":"path","description":"Unique identifier of the marketplace widget whose installations to list","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and pagination parameters for widget installations","typeName":"IFlexOfficeWidgetInstallation.IRequest"},"responseBody":{"description":"Paginated list of widget installation summaries","typeName":"IPageIFlexOfficeWidgetInstallation.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"indexWidgetInstallations"},{"specification":"Retrieves a paginated and filtered list of widget installations for a specified marketplace widget. This operation operates on the 'flex_office_widget_installations' table and supports search and pagination criteria through the request body. It returns summarized installation information with paging data. Access is limited to admin and editor roles for oversight and management.","path":"/flexOffice/editor/marketplaceWidgets/{widgetId}/installations","method":"patch","summary":"List widget installations for a marketplace widget","description":"Fetches a paginated list of UI page installations for a specific marketplace widget by its UUID. Supports filtering and sorting via request body parameters. Access allowed for admins and editors only. Returns summarized install data paginated for client consumption.","parameters":[{"name":"widgetId","in":"path","description":"Unique identifier of the marketplace widget whose installations to list","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and pagination parameters for widget installations","typeName":"IFlexOfficeWidgetInstallation.IRequest"},"responseBody":{"description":"Paginated list of widget installation summaries","typeName":"IPageIFlexOfficeWidgetInstallation.ISummary"},"authorizationType":null,"authorizationRole":"editor","name":"indexWidgetInstallations"},{"specification":"Retrieves full details of a specific widget installation by UUIDs of the marketplace widget and the installation record. This operation accesses the 'flex_office_widget_installations' record and returns complete information including configuration data and timestamps. Access is restricted to admin and editor roles. It requires both widgetId and installationId as path parameters and returns a detailed installation object.","path":"/flexOffice/admin/marketplaceWidgets/{widgetId}/installations/{installationId}","method":"get","summary":"Get details of a widget installation","description":"Retrieves detailed information of a specific widget installation identified by the marketplace widget UUID and the installation UUID. For admin and editor roles only. Returns all registration data including configuration, installation timestamp, and soft deletion status if applicable.","parameters":[{"name":"widgetId","in":"path","description":"Unique identifier of the marketplace widget","schema":{"type":"string","format":"uuid"}},{"name":"installationId","in":"path","description":"Unique identifier of the widget installation","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed widget installation information","typeName":"IFlexOfficeWidgetInstallation"},"authorizationType":null,"authorizationRole":"admin","name":"atWidgetInstallation"},{"specification":"Retrieves full details of a specific widget installation by UUIDs of the marketplace widget and the installation record. This operation accesses the 'flex_office_widget_installations' record and returns complete information including configuration data and timestamps. Access is restricted to admin and editor roles. It requires both widgetId and installationId as path parameters and returns a detailed installation object.","path":"/flexOffice/editor/marketplaceWidgets/{widgetId}/installations/{installationId}","method":"get","summary":"Get details of a widget installation","description":"Retrieves detailed information of a specific widget installation identified by the marketplace widget UUID and the installation UUID. For admin and editor roles only. Returns all registration data including configuration, installation timestamp, and soft deletion status if applicable.","parameters":[{"name":"widgetId","in":"path","description":"Unique identifier of the marketplace widget","schema":{"type":"string","format":"uuid"}},{"name":"installationId","in":"path","description":"Unique identifier of the widget installation","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed widget installation information","typeName":"IFlexOfficeWidgetInstallation"},"authorizationType":null,"authorizationRole":"editor","name":"atWidgetInstallation"},{"specification":"This operation creates a new widget installation for a given marketplace widget ID. It associates the marketplace widget with a specific UI page and saves configuration details. The operation targets the flex_office_widget_installations table, allowing users with appropriate privileges to manage widget installations within their pages.","description":"Create a new installation of a marketplace widget on a FlexOffice UI page. This operation requires providing the marketplace widget's unique identifier (widgetId) via the URL path and the installation details in the request body. The installation record includes references to the marketplace widget ID, target UI page ID, installation date, and optional configuration data.\n\nSecurity considerations: Only authenticated users with rights to modify pages should invoke this operation. Input validation ensures the pageId references an existing page.\n\nThis operation acts on the flex_office_widget_installations table as defined in the Prisma schema, including all relevant fields necessary to manage widget installations. The server will perform cascading deletes if the referenced marketplace widget or page is removed.\n\nRequest failures due to invalid IDs or missing required fields will result in appropriate error responses.","summary":"Create a new widget installation for a marketplace widget","parameters":[{"name":"widgetId","in":"path","description":"Target marketplace widget's unique identifier","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Installation details for the marketplace widget","typeName":"IFlexOfficeWidgetInstallation.ICreate"},"responseBody":{"description":"Information about the created widget installation","typeName":"IFlexOfficeWidgetInstallation"},"authorizationRoles":["editor"],"path":"/flexOffice/editor/marketplaceWidgets/{widgetId}/installations","method":"post","name":"createInstallation","authorizationRole":"editor","authorizationType":null},{"specification":"This operation updates the properties of an existing widget installation identified by installationId under a given marketplace widget widgetId. It modifies configuration and date details as needed. The operation targets the flex_office_widget_installations table, which stores mappings between marketplace widgets and UI pages.","description":"Update details of an existing widget installation for a marketplace widget. The path parameters identify the widgetInstallation to update, while the request body provides the updated fields such as configuration data or installation date.\n\nSecurity considerations: Only authorized users with edit rights on the associated pages can perform this operation.\n\nThis operation affects the flex_office_widget_installations table, ensuring strong consistency and validation against the referenced marketplace widget and page IDs. Proper error handling delivers meaningful messages for invalid or missing IDs.","summary":"Update an existing widget installation","parameters":[{"name":"widgetId","in":"path","description":"Target marketplace widget's unique identifier","schema":{"type":"string","format":"uuid"}},{"name":"installationId","in":"path","description":"Target widget installation's unique identifier","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated information for the widget installation","typeName":"IFlexOfficeWidgetInstallation.IUpdate"},"responseBody":{"description":"Updated widget installation information","typeName":"IFlexOfficeWidgetInstallation"},"authorizationRoles":["editor"],"path":"/flexOffice/editor/marketplaceWidgets/{widgetId}/installations/{installationId}","method":"put","name":"updateInstallation","authorizationRole":"editor","authorizationType":null},{"specification":"This operation removes a widget installation record identified by installationId under the marketplace widget widgetId. This performs a hard delete removing the association of a widget from a UI page. It targets the flex_office_widget_installations table and permanently deletes the record.\n\nSecurity considerations: Only users with sufficient permissions to modify page content or manage widget installations can perform this deletion.\n\nProper validation is performed on the IDs, and errors are reported if the target installation does not exist.","description":"Delete a widget installation and disassociate a marketplace widget from a UI page. The deletion is permanent and removes the record from the database.\n\nSecurity considerations: Ensure only authorized users can delete installations. The operation returns no content on success.\n\nAssociated cascading effects happen if related widgets or pages are deleted separately.","summary":"Delete a widget installation","parameters":[{"name":"widgetId","in":"path","description":"Target marketplace widget's unique identifier","schema":{"type":"string","format":"uuid"}},{"name":"installationId","in":"path","description":"Target widget installation's unique identifier","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["editor"],"path":"/flexOffice/editor/marketplaceWidgets/{widgetId}/installations/{installationId}","method":"delete","name":"eraseInstallation","authorizationRole":"editor","authorizationType":null},{"specification":"This operation retrieves a filtered and paginated list of role assignments within the FlexOffice system, supporting search and filtering criteria. It acts on the flex_office_role_assignments table which links users to roles.\n\nThe request body specifies search parameters for efficient querying, including role name filtering and pagination options.\n\nOnly authorized users with admin privileges should execute this operation due to sensitive nature of role assignments.","description":"Retrieve a paginated list of role assignments with support for filtering and pagination. Enables administrators to search user-role mappings efficiently.\n\nSecurity considerations: This operation requires admin level authorization due to sensitive access control data.\n\nRelated API operations include creating, updating, or deleting individual role assignments.","summary":"Search and retrieve a filtered, paginated list of role assignments","parameters":[],"requestBody":{"description":"Search and pagination criteria for role assignments","typeName":"IFlexOfficeRoleAssignment.IRequest"},"responseBody":{"description":"Paginated list of role assignments matching search criteria","typeName":"IPageIFlexOfficeRoleAssignment.ISummary"},"authorizationRoles":["admin"],"path":"/flexOffice/admin/roleAssignments","method":"patch","name":"searchRoleAssignments","authorizationRole":"admin","authorizationType":null},{"specification":"The Role Assignment API operations manage the associations between system users and their roles in the FlexOffice system, enabling Role-Based Access Control (RBAC). These operations include creating, reading, updating, and deleting role assignments for users. The database table involved is 'flex_office_role_assignments', which links a user (admin) to a specific role_name string, enforcing RBAC throughout the system. The role assignment ensures that users are granted appropriate access levels and permissions according to their assigned role. These APIs are intended for administrative use to manage user roles securely and efficiently, with all operations restricted to admin roles for security and control.","description":"This API operation retrieves the details of a specific role assignment by its unique identifier (id). It reads from the 'flex_office_role_assignments' table which stores mappings of users to role names in the system.\n\nSecurity considerations ensure that only authorized administrators can view role assignments. The retrieved data includes the assigned user's identifier, the role name, and timestamps for creation and last update. The operation supports efficient lookup and management of role assignments for administrative auditing and role enforcement.","summary":"Retrieve a specific role assignment by its unique identifier","parameters":[{"name":"id","description":"Unique identifier of the role assignment to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed role assignment information","typeName":"IFlexOfficeRoleAssignment"},"authorizationType":null,"authorizationRole":"admin","method":"get","path":"/flexOffice/admin/roleAssignments/{id}","name":"at"},{"specification":"This operation creates a new role assignment linking a user to a specific role within the FlexOffice system, implementing Role-Based Access Control. It writes a new record into the 'flex_office_role_assignments' table, specifying the user_id and the role_name.\n\nRole assignments confer access rights and permissions according to the assigned role. This API is critical for managing user access by administrators, ensuring proper authorization policies are enforced. Input validation includes ensuring the role_name is one of the permitted roles and that the user_id corresponds to an existing user.\n\nOnly administrators have permission to create new role assignments, securing the system from unauthorized access escalations.","description":"Create a new role assignment by specifying the target user and their role. The request body includes the user_id and role_name fields that define the assignment.\n\nAdministrators use this operation to grant roles to system users, enabling RBAC enforcement. Proper validation prevents duplication and conflicts. On success, the created role assignment data is returned for confirmation.","summary":"Create a new role assignment linking a user to a role","parameters":[],"requestBody":{"description":"Information required to create a role assignment","typeName":"IFlexOfficeRoleAssignment.ICreate"},"responseBody":{"description":"Created role assignment information","typeName":"IFlexOfficeRoleAssignment"},"authorizationType":null,"authorizationRole":"admin","method":"post","path":"/flexOffice/admin/roleAssignments","name":"create"},{"specification":"This operation updates an existing role assignment identified by its unique ID. It modifies properties such as role_name and potentially user_id, altering the access rights associated with that user.\n\nThe 'flex_office_role_assignments' table is updated with new values for the specified record. This API is critical for administration to reassign or revoke roles as organizational needs change. Input validation ensures the role_name and user_id are valid and consistent.\n\nAuthorization is restricted to administrators to prevent unauthorized role changes.","description":"Update the details of an existing role assignment by its ID. The request body allows modification of the role_name and user_id fields.\n\nThis operation helps administrators manage and correct role assignments as needed. It ensures that the updated assignment complies with current authorization policies and maintains data integrity.","summary":"Update an existing role assignment's details","parameters":[{"name":"id","description":"Unique identifier of the role assignment to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated role assignment information","typeName":"IFlexOfficeRoleAssignment.IUpdate"},"responseBody":{"description":"Updated role assignment information","typeName":"IFlexOfficeRoleAssignment"},"authorizationType":null,"authorizationRole":"admin","method":"put","path":"/flexOffice/admin/roleAssignments/{id}","name":"update"},{"specification":"Deletes a role assignment entry from the 'flex_office_role_assignments' table, permanently removing the association between a user and a role. This operation is critical for revoking access and managing user permissions securely.\n\nAs the table supports soft deletion via a 'deleted_at' timestamp, this operation performs a soft delete, marking the record as deleted without physically removing it.\n\nOnly administrators are authorized to perform this action to maintain system security and access control integrity.","description":"Soft delete a role assignment by its unique ID. This operation marks the record as deleted by setting the 'deleted_at' timestamp, thus removing the role assignment without permanent data loss.\n\nAdmins use this operation to revoke user roles in a secure and auditable manner. The soft delete ensures history preservation and compliance with audit requirements.\n\nThis API returns no content upon success.","summary":"Soft delete a role assignment by ID","parameters":[{"name":"id","description":"Unique identifier of the role assignment to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","method":"delete","path":"/flexOffice/admin/roleAssignments/{id}","name":"erase"},{"specification":"This operation retrieves a paginated list of permission entities from the AccessControl namespace defined in the Prisma schema. It allows clients to perform complex queries with filtering, sorting, and pagination to find permissions by their keys, status, or descriptions. The Permission table stores unique permission keys along with their descriptions, status (e.g., active or disabled), and audit timestamps. This search endpoint adheres to RESTful principles using a PATCH method with a request body for search criteria. The response body provides paginated Permission entities matching the specified filters.","path":"/flexOffice/admin/permissions","method":"patch","summary":"Search and retrieve a filtered, paginated list of FlexOffice permissions","description":"Retrieve a filtered and paginated list of FlexOffice permission entities for access control.\n\nThis operation interacts directly with the flex_office_permissions table as defined in the Prisma schema. It accepts complex request criteria such as permission_key filters, status filters, and free text searches on descriptions.\n\nSecurity and access control apply at the application layer; typically, only users with admin or equivalent roles should query permissions data.\n\nThe response provides structured paginated lists, including metadata for pagination navigation.\n\nThis operation is foundational for managing system permissions and role capabilities.\n\nErrors on invalid requests or unauthenticated access must be handled gracefully.","parameters":[],"requestBody":{"description":"Search parameters and filters for permissions","typeName":"IFlexOfficePermission.IRequest"},"responseBody":{"description":"Paginated list of permissions matching criteria","typeName":"IPageIFlexOfficePermission"},"authorizationType":null,"authorizationRole":"admin","name":"search"},{"specification":"Retrieve detailed information about a specific FlexOffice permission entity identified by its unique ID from the AccessControl namespace in the Prisma schema. The flex_office_permissions table holds permission keys and their descriptive information with status and audit timestamps.\n\nClients must specify the permission's UUID in the path parameter to fetch full details.\n\nThis endpoint is essential for viewing exact permission details before editing or assignment.\n\nAppropriate authorization (admin role) is required to ensure secure access and protect permission data integrity.","path":"/flexOffice/admin/permissions/{id}","method":"get","summary":"Retrieve detailed FlexOffice permission","description":"Get detailed information for a single FlexOffice permission by ID.\n\nThis GET operation accesses the flex_office_permissions table using the specified UUID. It returns all defined fields including permission key, description, status, and audit data.\n\nSecure access requires admin-level privileges.\n\nInvalid or non-existent IDs should result in standard 404 and error handling.\n\nUses path parameter to specify target permission.","parameters":[{"name":"id","description":"Unique identifier of the target permission","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Permission entity details","typeName":"IFlexOfficePermission"},"authorizationType":null,"authorizationRole":"admin","name":"at"},{"specification":"Create a new FlexOffice permission entity in the access control system by submitting the required data. Permissions have unique keys to identify specific rights, descriptions explaining their purpose, and status flags indicating if they are active or disabled. This endpoint writes to the flex_office_permissions table and records creation timestamps automatically.\n\nOnly users with admin role may create new permissions to maintain system integrity.\n\nInput is validated to ensure uniqueness and required fields.\n\nThis POST operation requires a creation request body with permission key, status, optional description, and timestamps.","path":"/flexOffice/admin/permissions","method":"post","summary":"Create a new FlexOffice permission entity.","description":"Create a new FlexOffice permission entity.\n\nThis operation inserts a new record into the flex_office_permissions table with specified permission key, description, and status.\n\nOnly admin users are allowed to perform this action.\n\nThe server generates creation and update timestamps automatically.\n\nValidation ensures permission keys are unique and status values are valid.\n\nReturns the created permission entity details upon success.","parameters":[],"requestBody":{"description":"Permission creation data","typeName":"IFlexOfficePermission.ICreate"},"responseBody":{"description":"Created permission entity","typeName":"IFlexOfficePermission"},"authorizationType":null,"authorizationRole":"admin","name":"create"},{"specification":"Update an existing FlexOffice permission identified by its unique ID. This operation modifies permission key, description, status, and update timestamps in the flex_office_permissions table within the AccessControl namespace. It requires the permission UUID as a path parameter and uses a request body specifying fields to update.\n\nOnly authorized admin roles can perform updates to maintain access control integrity.\n\nThe update validates input to prevent duplicate keys, invalid status values, and preserves audit data.\n\nUpon success, the updated permission entity is returned in the response.","path":"/flexOffice/admin/permissions/{id}","method":"put","summary":"Update an existing FlexOffice permission by ID","description":"Update an existing FlexOffice permission identified by ID.\n\nReceives targeted permission ID as path parameter and update data in the request body.\n\nUpdates fields such as permission_key, description, and status within the flex_office_permissions table.\n\nAdmin authorization is mandatory to maintain secure control over permissions.\n\nReturns the updated permission entity details to confirm changes.\n\n404 error if permission does not exist.\n\nValidation ensures key uniqueness and status correctness.","parameters":[{"name":"id","description":"Unique identifier of the target permission","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Permission update data","typeName":"IFlexOfficePermission.IUpdate"},"responseBody":{"description":"Updated permission entity","typeName":"IFlexOfficePermission"},"authorizationType":null,"authorizationRole":"admin","name":"update"},{"specification":"This operation deletes a permission record from the flex_office_permissions table. Permissions represent distinct access rights or actions within the FlexOffice system. Deleting a permission will remove it permanently from the database and will remove any associated table, column, or row permissions. This operation requires specifying the unique identifier of the permission to delete. Only authorized users with admin roles should be able to perform this irreversible deletion.","description":"This DELETE operation removes a permission entry from the flex_office_permissions table in the FlexOffice system. Permissions define specific access rights that can be assigned for role-based access control. The operation requires the unique ID of the permission. Once deleted, the permission and all its related assignments cease to exist and cannot be recovered.\n\nSecurity considerations include restricting this operation to high-level administrative roles to prevent accidental or unauthorized permission removal. The operation only requires the permission ID path parameter for targeting the exact record.\n\nThis operation is critical for system administration to maintain and update access controls but must be guarded carefully due to its impact on system security and user access.\n\nNo request body is needed, and no content is returned upon success.","summary":"Delete a permission by ID from flex_office_permissions table","parameters":[{"name":"id","description":"Unique identifier of the permission to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"path":"/flexOffice/admin/permissions/{id}","method":"delete","name":"erasePermission","authorizationRole":"admin","authorizationType":null},{"specification":"Retrieve a paginated and optionally filtered list of table permission entries from the flex_office_table_permissions table. Table permissions link specific permissions to database tables for granular access control. This operation supports pagination and filtering by properties such as table name or permission ID, enabling efficient management of table-level permission assignments.","description":"This PATCH operation enables clients to query the flex_office_table_permissions table with flexible filtering options like table name, permission, status, etc., combined with pagination settings.\n\nIt returns a paginated list of table permission summaries suitable for administrative interfaces managing RBAC assignments. Security requires admin authentication due to privileged nature of permission management data.\n\nNo path parameters are required, but a request body defines the search filters and pagination parameters. The response includes paginated table permission summaries.","summary":"Search and retrieve paginated list of table permissions","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for table permissions","typeName":"IFlexOfficeTablePermission.IRequest"},"responseBody":{"description":"Paginated list of table permission summaries matching search filters","typeName":"IPageIFlexOfficeTablePermission.ISummary"},"authorizationRoles":["admin"],"path":"/flexOffice/admin/tablePermissions","method":"patch","name":"indexTablePermission","authorizationRole":"admin","authorizationType":null},{"specification":"Retrieve detailed information about a specific table permission entry from the flex_office_table_permissions table given its unique ID. A table permission links a system permission to a database table, enabling fine-grained authorization control. This operation returns all fields and relationships to column and row-level permissions associated with the table permission.","description":"This GET operation fetches a detailed view of a single table permission by its ID. It includes permission key, table name, related column permissions, and row permissions if present. The operation requires the table permission's unique identifier as a path parameter.\n\nAccess to this information is restricted to authorized users such as administrators managing access control policies.\n\nThe operation does not require a request body and returns the full table permission resource.","summary":"Retrieve detailed information of a table permission by ID","parameters":[{"name":"id","description":"Unique identifier of the target table permission","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed table permission information including column and row permissions","typeName":"IFlexOfficeTablePermission"},"authorizationRoles":["admin"],"path":"/flexOffice/admin/tablePermissions/{id}","method":"get","name":"atTablePermission","authorizationRole":"admin","authorizationType":null},{"specification":"Create a new table permission record in the flex_office_table_permissions table. This operation enables administrators to assign specific permission keys to database tables for fine-grained access control within FlexOffice. The creation process requires specifying the associated permission and the target table name.","description":"This POST operation allows administrators to create a new entry in the flex_office_table_permissions table, establishing a link between a permission and a database table. The request body must provide the required fields such as permission ID and target table name.\n\nUpon success, the operation returns the created table permission record, including timestamps and identifiers.\n\nSecurity measures restrict this creation to admins to maintain control over access rights.\n\nNo path parameters required. Request body must specify creation data.","summary":"Create a new table permission record linking permission and table","parameters":[],"requestBody":{"description":"Details for creating a new table permission record","typeName":"IFlexOfficeTablePermission.ICreate"},"responseBody":{"description":"Created table permission record with full details","typeName":"IFlexOfficeTablePermission"},"authorizationRoles":["admin"],"path":"/flexOffice/admin/tablePermissions","method":"post","name":"createTablePermission","authorizationRole":"admin","authorizationType":null},{"specification":"This operation updates an existing table permission identified by the 'id' path parameter. It interacts with the 'flex_office_table_permissions' table which defines permissions scoped to specific database tables, linking permissions to tables and supporting fine-grained access control. The API must validate the provided update data against the schema and ensure the record exists. The update modifies attributes such as permission associations and table names, respecting soft-deletion status and audit fields. The operation requires authentication and authorization to restrict modification to users with appropriate roles.","path":"/flexOffice/admin/tablePermissions/{id}","method":"put","summary":"Update an existing table permission by ID","description":"Update a specific table permission in the FlexOffice system.\n\nThis operation updates the details of a table permission record, identified uniquely by its ID. Table permissions define which database tables a specific permission applies to, allowing for granular control over access to database resources.\n\nThe 'flex_office_table_permissions' Prisma model includes fields for linking to permissions and specifying target tables. Updates must preserve data integrity and audit fields. Soft deletion timestamps exist but this operation modifies non-deleted records.\n\nAuthorization is required to ensure only authorized users can update permissions, maintaining system security. Proper error handling is expected if the resource does not exist.\n\nRelated endpoints include GET for reading and DELETE for removing table permissions.\n\nNo request body is returned; the response includes the updated table permission object.","parameters":[{"name":"id","description":"Unique identifier of the table permission","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information for the table permission","typeName":"IFlexOfficeTablePermission.IUpdate"},"responseBody":{"description":"Updated table permission information","typeName":"IFlexOfficeTablePermission"},"authorizationType":null,"authorizationRole":"admin","name":"update"},{"specification":"This operation deletes a table permission record identified by the 'id' path parameter from the 'flex_office_table_permissions' table. This table links permissions to specific database tables and supports granular access control. Given the presence of a 'deleted_at' column, this operation performs a soft delete, marking the record as deleted without permanent removal from the database. Authorization and validation ensure only authorized users perform this action.","path":"/flexOffice/admin/tablePermissions/{id}","method":"delete","summary":"Soft delete a table permission by ID","description":"Delete a specified table permission by ID.\n\nThis endpoint performs a soft delete on the table permission entity. Instead of permanently removing the data, the soft delete marks the record as deleted, preserving it for audit and recovery purposes.\n\nAuthorization is strictly enforced to ensure only users with admin roles can delete table permissions. Attempts to delete non-existing or already deleted records should be handled gracefully.\n\nThis operation is critical for managing access control policies while maintaining historical records for compliance.\n\nRelated operations include update and read endpoints for table permissions.\n\nNo content is returned on success.","parameters":[{"name":"id","description":"Unique identifier of the table permission","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase"},{"specification":"This operation retrieves a paginated and optionally filtered list of column permissions associated with a specific table permission, identified by the 'tablePermissionId' path parameter. Column permissions specify access controls at the column level within tables, allowing fine-grained permission management. The operation supports search, filtering, and pagination through the request body parameters, allowing clients to specify criteria and navigate results efficiently. This operation reads from the 'flex_office_column_permissions' table and returns summary information suitable for overview displays.","path":"/flexOffice/admin/tablePermissions/{tablePermissionId}/columnPermissions","method":"patch","summary":"List column permissions under a table permission","description":"Retrieve a paginated list of column permissions for a specific table permission.\n\nThis endpoint allows clients to query and browse column-level permissions linked to a table permission record. Filtering and pagination are supported for efficient navigation.\n\nEach column permission controls access at the column granularity, linked to the broader table permission entity.\n\nThe operation enforces authorization to limit access to users with admin privileges managing access control configurations.\n\nRelated operations include detailed reads and modifications of column permissions.\n\nResponse contains paginated summary details of column permissions matching the request criteria.","parameters":[{"name":"tablePermissionId","description":"ID of the parent table permission","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and pagination parameters for column permissions","typeName":"IFlexOfficeColumnPermission.IRequest"},"responseBody":{"description":"Paginated list of column permission summaries","typeName":"IPageIFlexOfficeColumnPermission.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index"},{"specification":"This operation retrieves detailed information of a specific column permission identified by the 'columnPermissionId' path parameter, which is scoped under a specific table permission indicated by the 'tablePermissionId' path parameter. Column permissions provide fine-grained control at the column level within tables, specifying access rights and constraints. The operation ensures that only authorized users with admin roles can access this sensitive configuration data. It returns the full detailed view of the column permission resource.","path":"/flexOffice/admin/tablePermissions/{tablePermissionId}/columnPermissions/{columnPermissionId}","method":"get","summary":"Get detailed information of a column permission by ID","description":"Retrieve detailed information about a specific column permission.\n\nThis endpoint fetches a single column permission record by its unique identifier, scoped within a parent table permission. It enables inspection of column-level permission configurations including controlled columns and associated access rights.\n\nAuthorization ensures that only users with administrative privileges can access this sensitive configuration.\n\nComplementary operations include list, update, and delete APIs for column permissions.\n\nReturns full column permission entity information upon success.","parameters":[{"name":"tablePermissionId","description":"ID of the parent table permission","schema":{"type":"string","format":"uuid"}},{"name":"columnPermissionId","description":"ID of the target column permission","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Column permission detailed information","typeName":"IFlexOfficeColumnPermission"},"authorizationType":null,"authorizationRole":"admin","name":"at"},{"specification":"This operation creates a new column permission record associated with a specific table permission, allowing granular access control at the column level within the table. It operates on the `flex_office_column_permissions` table from the AccessControl schema. The API accepts the table permission ID as a path parameter and the column permission creation data in the request body. Upon successful creation, the newly created column permission is returned.","description":"Create a new column permission under the specified table permission in the FlexOffice access control system. This allows administrators to define fine-grained access restrictions by specifying permissions on individual columns within a database table.\n\nThe operation requires the `tablePermissionId` path parameter to identify the parent table permission entity, ensuring the column permission is linked correctly. The request body must include the column name to restrict and the system sets audit timestamps accordingly.\n\nProper authorization for this operation ensures that only appropriate administrative users can assign new column permissions. The API returns the details of the created column permission record, including its unique identifier and timestamps.","summary":"Create a new column permission for a specified table permission","parameters":[{"name":"tablePermissionId","description":"The unique identifier of the target table permission","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information required to create a new column permission","typeName":"IFlexOfficeColumnPermission.ICreate"},"responseBody":{"description":"Details of the created column permission","typeName":"IFlexOfficeColumnPermission"},"authorizationType":null,"authorizationRole":"admin","method":"post","path":"/flexOffice/admin/tablePermissions/{tablePermissionId}/columnPermissions","name":"createColumnPermission"},{"specification":"This operation updates an existing column permission record associated with a specific table permission, allowing modification of column-based access controls. It targets the `flex_office_column_permissions` table in the AccessControl schema. The API requires both the table permission ID and column permission ID in the URL path, along with updated data in the request body. The updated column permission entity is returned upon success.","description":"Update details of a column permission for a given table permission in the FlexOffice access control system. This enables administrative users to modify access restrictions at the column level within database tables.\n\nThe operation requires path parameters `tablePermissionId` and `columnPermissionId` to uniquely identify the record being updated. The request body allows changes to the column name and other editable fields. Audit timestamps are maintained to track modifications.\n\nAuthorization ensures only privileged users can perform updates. The API response includes the fully updated column permission details to confirm changes.","summary":"Update an existing column permission by its ID under a specified table permission","parameters":[{"name":"tablePermissionId","description":"The unique identifier of the target table permission","schema":{"type":"string","format":"uuid"}},{"name":"columnPermissionId","description":"The unique identifier of the column permission to be updated","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated information for the column permission","typeName":"IFlexOfficeColumnPermission.IUpdate"},"responseBody":{"description":"Updated column permission details","typeName":"IFlexOfficeColumnPermission"},"authorizationType":null,"authorizationRole":"admin","method":"put","path":"/flexOffice/admin/tablePermissions/{tablePermissionId}/columnPermissions/{columnPermissionId}","name":"updateColumnPermission"},{"specification":"This operation deletes a specific column permission record linked to a given table permission, effectively removing the column-level access control. It acts on the `flex_office_column_permissions` table from the AccessControl schema. Requires both table permission ID and column permission ID as path parameters for accurate identification. The deletion performs a hard delete, permanently removing the record as no soft-delete column is defined for this entity.","description":"Delete a column permission identified by its ID and associated table permission ID in FlexOffice. This operation removes column-level access control constraints for the specified column.\n\nThe API expects path parameters `tablePermissionId` and `columnPermissionId` to locate the exact record. This is a hard delete operation which irreversibly removes the record from the database, ensuring the access control is no longer active for the column.\n\nAuthorization is required to perform this sensitive operation, typically limited to administrators. The operation does not return any content upon success.","summary":"Delete a column permission permanently by IDs","parameters":[{"name":"tablePermissionId","description":"The unique identifier of the target table permission","schema":{"type":"string","format":"uuid"}},{"name":"columnPermissionId","description":"The unique identifier of the column permission to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","method":"delete","path":"/flexOffice/admin/tablePermissions/{tablePermissionId}/columnPermissions/{columnPermissionId}","name":"eraseColumnPermission"},{"specification":"This operation retrieves and lists row-level permissions scoped to a specific table permission, allowing detailed control over row filtering rules. It interacts with the `flex_office_row_permissions` table within the AccessControl schema. The API requires the table permission ID as a path parameter and allows filtering, search, pagination, and sorting via request body parameters. The response delivers paginated row permission summaries matching criteria.","description":"Search and retrieve row-level permissions associated with a specific table permission in the FlexOffice system. These permissions define row filtering rules that restrict data visibility at row granularity.\n\nThe path parameter `tablePermissionId` identifies the parent table permission context. The request body supports advanced search and pagination parameters to filter, sort, and page through the row permissions.\n\nThis operation is essential for administrators managing fine-grained, row-level security policies. It returns a paginated collection of matching row permissions, including summary metadata for efficient display.\n\nProper authorization ensures only privileged users can access this sensitive information.","summary":"List and search row permissions for a specified table permission","parameters":[{"name":"tablePermissionId","description":"The unique identifier of the target table permission","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and pagination parameters for row permission filtering","typeName":"IFlexOfficeRowPermission.IRequest"},"responseBody":{"description":"Paginated list of row permission summaries","typeName":"IPageIFlexOfficeRowPermission.ISummary"},"authorizationType":null,"authorizationRole":"admin","method":"patch","path":"/flexOffice/admin/tablePermissions/{tablePermissionId}/rowPermissions","name":"indexRowPermissions"},{"specification":"These API operations manipulate the row-level permissions within the FlexOffice access control system. The row permissions are associated with a particular table permission entity, which links a permission to a specific database table. The row permissions table defines filter conditions for row-level access control policies, enabling fine-grained control of data access at the row level. The CRUD operations for row permissions allow clients to create, read, update, and delete individual row permission filter conditions connected to a given table permission ID. These endpoints strictly require valid UUID identifiers for the tablePermissionId and rowPermissionId path parameters, ensuring accurate resource identification. The operations ensure proper cascading deletes and updates according to the Prisma schema constraints, and the data conforms to the flex_office_row_permissions table which is part of the AccessControl namespace.","path":"/flexOffice/admin/tablePermissions/{tablePermissionId}/rowPermissions/{rowPermissionId}","method":"get","summary":"Retrieve row-level permission by ID under a table permission","description":"This operation retrieves a specific row-level permission filter condition associated with a given table permission in the FlexOffice access control system. It supports fine-grained access control at the database row level by returning details of the filter condition that limits data visibility. The API requires the UUID of the parent table permission and the UUID of the row permission to uniquely identify the resource.\n\nOnly authenticated users with appropriate access roles can retrieve this data. The response includes the complete row permission entity, enabling clients to understand the precise filter condition applied for row-level security.\n\nThis operation interfaces directly with the flex_office_row_permissions table in the Prisma schema, which contains fields such as id, table_permission_id, filter_condition, created_at, updated_at, and deleted_at.\n\nClients commonly use this operation alongside listing and managing other row permissions under the same table permission to maintain consistent access control configurations.","parameters":[{"name":"tablePermissionId","description":"Target table permission's ID","schema":{"type":"string","format":"uuid"}},{"name":"rowPermissionId","description":"Target row permission's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"RowPermission entity details","typeName":"IFlexOfficeRowPermission"},"authorizationRoles":["admin"],"authorizationRole":"admin","authorizationType":null,"name":"at"},{"specification":"This operation creates a new row-level permission filter condition under a specific table permission. The flex_office_row_permissions table stores filter conditions used to enforce row-level data access restrictions for the associated table permission.\n\nThe input must include the row permission's filter condition string. The creation automatically links the new row permission to the table permission identified by the path parameter. The new record will capture creation and update timestamps automatically via Prisma.\n\nThis operation enforces authorization checks to allow only admin role users to create new row-level permissions. Proper validation and schema compliance ensure secure and consistent access control policy management.\n\nThe create request body corresponds to IFlexOfficeRowPermission.ICreate type in the FlexOffice service namespace, covering required fields except the ID and foreign key which are managed by the server and request path respectively.","path":"/flexOffice/admin/tablePermissions/{tablePermissionId}/rowPermissions","method":"post","summary":"Create a new row-level permission under a table permission","description":"Create a new row-level permission filter condition under the specified table permission. This allows defining row-level access limits for data security.\n\nOnly users with admin roles may execute this operation. The request must include the filter_condition specifying the SQL WHERE clause or expression used to filter rows, applying granular control.\n\nUpon successful creation, the newly created row permission entity details are returned.\n\nThis operation interfaces with the flex_office_row_permissions table as defined in the Prisma schema, ensuring proper linkage and compliance.","parameters":[{"name":"tablePermissionId","description":"Target table permission's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"RowPermission creation payload","typeName":"IFlexOfficeRowPermission.ICreate"},"responseBody":{"description":"Newly created rowPermission entity","typeName":"IFlexOfficeRowPermission"},"authorizationRoles":["admin"],"authorizationRole":"admin","authorizationType":null,"name":"create"},{"specification":"This operation updates an existing row-level permission filter condition identified by its ID under a specific table permission in the FlexOffice access control system. It enables modification of the filter condition and timestamp fields while maintaining the link to the parent table permission.\n\nClients must provide the full update payload compliant with IFlexOfficeRowPermission.IUpdate schema type, excluding the ID and foreign key which remain unchanged via the URL path.\n\nThe operation is restricted to admin users, enforcing security and integrity for access control policies.\n\nThis operation directly interacts with the flex_office_row_permissions Prisma table, ensuring all data remains consistent and validated according to the schema.","path":"/flexOffice/admin/tablePermissions/{tablePermissionId}/rowPermissions/{rowPermissionId}","method":"put","summary":"Update row-level permission by ID under table permission","description":"Update an existing row-level permission's filter condition under the specified table permission. This operation modifies the SQL filter or any other modifiable fields to adjust row-level data access control.\n\nAuthorization is limited to admin users. The request body must conform to the IFlexOfficeRowPermission.IUpdate schema excluding identifiers which are path parameters.\n\nA successful update returns the updated row permission entity.\n\nRelated operations include creation, retrieval, and deletion of row permissions within the same table permission context.","parameters":[{"name":"tablePermissionId","description":"Target table permission's ID","schema":{"type":"string","format":"uuid"}},{"name":"rowPermissionId","description":"Target row permission's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"RowPermission update payload","typeName":"IFlexOfficeRowPermission.IUpdate"},"responseBody":{"description":"Updated rowPermission entity","typeName":"IFlexOfficeRowPermission"},"authorizationRoles":["admin"],"authorizationRole":"admin","authorizationType":null,"name":"update"},{"specification":"Deletes a specific row-level permission filter condition under a given table permission in the FlexOffice access control system. This operation permanently removes the filter condition, affecting how data rows are filtered for access control.\n\nThe API call requires the UUID of both the parent table permission and the row permission to identify the resource to delete. This is a hard delete operation, removing the record from the flex_office_row_permissions table and cannot be undone.\n\nAuthorization is limited to admin users only. Clients should use this operation carefully as deleting row permissions can impact application access control behavior.\n\nThis operation complements other management APIs for row permissions, including creation, update, and retrieval, allowing complete CRUD lifecycle management.","path":"/flexOffice/admin/tablePermissions/{tablePermissionId}/rowPermissions/{rowPermissionId}","method":"delete","summary":"Delete row-level permission by ID under table permission","description":"Remove a row-level permission filter condition by ID under the specified table permission. This operation permanently deletes the filter condition.\n\nOnly admin users can perform this deletion. The target is identified by table and row permission UUIDs.\n\nThis is a hard delete operation; the filter condition will no longer affect access control after removal.\n\nThis operation interacts directly with the flex_office_row_permissions table in the Prisma schema.","parameters":[{"name":"tablePermissionId","description":"Target table permission's ID","schema":{"type":"string","format":"uuid"}},{"name":"rowPermissionId","description":"Target row permission's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"authorizationRole":"admin","authorizationType":null,"name":"erase"}],"components":{"authorization":[{"name":"admin","description":"System administrator with full permissions to manage users, configure system settings, and access all features including monitoring and administration.","kind":"admin"},{"name":"editor","description":"Authenticated user who can create, edit, and manage back-office data, UI pages, and dashboards as permitted by role-based access control.","kind":"member"},{"name":"viewer","description":"Authenticated user with read-only access to view dashboards, reports, and back-office data according to permissions.","kind":"member"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageIFlexOfficeSystemSettings.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IFlexOfficeSystemSettings.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIFlexOfficeTheme.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IFlexOfficeTheme.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIFlexOfficeAdmin.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IFlexOfficeAdmin.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIFlexOfficeEditor.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IFlexOfficeEditor.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIFlexOfficeViewer.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IFlexOfficeViewer.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIFlexOfficePage.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IFlexOfficePage.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIFlexOfficeWidget.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IFlexOfficeWidget.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIFlexOfficeWidgetScript.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IFlexOfficeWidgetScript.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIFlexOfficePageTheme.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IFlexOfficePageTheme.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIFlexOfficePageVersion.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IFlexOfficePageVersion.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIFlexOfficeDataSource.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IFlexOfficeDataSource.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIFlexOfficeDataSourceCredential.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IFlexOfficeDataSourceCredential.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIFlexOfficeDataSourceSync":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IFlexOfficeDataSourceSync"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIFlexOfficeExternalSheet.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IFlexOfficeExternalSheet.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIFlexOfficeDataSourceLog.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IFlexOfficeDataSourceLog.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIFlexOfficePageEditor.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IFlexOfficePageEditor.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIFlexOfficePageComment.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IFlexOfficePageComment.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIFlexOfficeEditConflicts.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IFlexOfficeEditConflicts.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIFlexOfficeEditConflict":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IFlexOfficeEditConflict"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIFlexOfficeChart":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IFlexOfficeChart"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIFlexOfficeWidgetKpi.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IFlexOfficeWidgetKpi.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIFlexOfficeFilterCondition.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IFlexOfficeFilterCondition.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIFlexOfficeExportLog.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IFlexOfficeExportLog.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIFlexOfficeAuditLog.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IFlexOfficeAuditLog.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIFlexOfficeUserActivityLog.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IFlexOfficeUserActivityLog.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIFlexOfficeSystemAlert.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IFlexOfficeSystemAlert.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIFlexOfficeCustomScript.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IFlexOfficeCustomScript.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIFlexOfficeMarketplaceWidget.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IFlexOfficeMarketplaceWidget.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIFlexOfficeWidgetInstallation.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IFlexOfficeWidgetInstallation.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIFlexOfficeRoleAssignment.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IFlexOfficeRoleAssignment.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIFlexOfficePermission":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IFlexOfficePermission"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIFlexOfficeTablePermission.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IFlexOfficeTablePermission.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIFlexOfficeColumnPermission.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IFlexOfficeColumnPermission.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIFlexOfficeRowPermission.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IFlexOfficeRowPermission.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IFlexOfficeAdmin":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the admin user."},"email":{"type":"string","description":"Email address of the admin user for login and contact."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of when the admin user was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of when the admin user was last updated."}},"required":["id","email","created_at","updated_at"],"description":"FlexOffice administrator user entity storing unique email and audit timestamps. Used for system-level admin access and management."},"IFlexOfficeAdmin.ICreate":{"type":"object","properties":{"email":{"type":"string","description":"Unique email address for the new admin."},"password":{"type":"string","description":"Plaintext password to generate a secure password hash."}},"required":["email","password"],"description":"Payload for creating a new admin user, including email and plaintext password."},"IFlexOfficeAdmin.ILogin":{"type":"object","properties":{"email":{"type":"string","description":"Admin user's email for login."},"password":{"type":"string","description":"Admin user's password for authentication."}},"required":["email","password"],"description":"Admin login credentials with email and password."},"IFlexOfficeAdmin.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Valid refresh token for renewing JWT tokens."}},"required":["refresh_token"],"description":"Request payload to refresh JWT tokens for admin sessions."},"IFlexOfficeAdmin.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated admin user."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","token"],"description":"Response schema for admin authorization containing JWT tokens."},"IFlexOfficeEditor":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the editor user."},"name":{"type":"string","description":"Full name of the editor user."},"email":{"type":"string","description":"Email address of the editor user."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of account creation."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update."}},"required":["id","name","email","created_at","updated_at"],"description":"Editor users with personal identification and audit timestamps."},"IFlexOfficeEditor.ICreate":{"type":"object","properties":{"name":{"type":"string","description":"Full name of the editor user."},"email":{"type":"string","description":"Email address for editor registration."},"password":{"type":"string","description":"Plaintext password for authentication."}},"required":["name","email","password"],"description":"Payload for creating a new editor user account."},"IFlexOfficeEditor.ILogin":{"type":"object","properties":{"email":{"type":"string","description":"Editor user login email."},"password":{"type":"string","description":"Password for authentication."}},"required":["email","password"],"description":"Editor login credentials."},"IFlexOfficeEditor.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token to renew access JWT"}},"required":["refresh_token"],"description":"Request body for token refresh operation."},"IFlexOfficeEditor.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated editor."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","token"],"description":"Response containing authorized editor tokens."},"IFlexOfficeViewer.ICreate":{"type":"object","properties":{"name":{"type":"string","description":"Full name for viewer registration."},"email":{"type":"string","description":"Viewer email address."},"password":{"type":"string","description":"Plaintext password for account."}},"required":["name","email","password"],"description":"Viewer account creation payload."},"IFlexOfficeViewer.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated viewer."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","token"],"description":"Authorized response for viewer including JWT tokens."},"IFlexOfficeViewer.ILogin":{"type":"object","properties":{"email":{"type":"string","description":"Viewer login email."},"password":{"type":"string","description":"Password for login."}},"required":["email","password"],"description":"Viewer user login credentials."},"IFlexOfficeViewer.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token to regain access."}},"required":["refresh_token"],"description":"Refresh token request for viewer sessions."},"IFlexOfficeSystemSettings.IRequest":{"type":"object","properties":{"key":{"type":"string","description":"Optional filter for configuration key."},"created_at_min":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional minimum creation date filter (ISO 8601)."},"created_at_max":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional maximum creation date filter (ISO 8601)."},"page":{"oneOf":[{"type":"integer","format":"int32","minimum":1,"description":"Optional page number for pagination, positive integer.\n\nUse this to specify which page of results to retrieve."},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"integer","format":"int32","minimum":1,"description":"Optional limit for records per page, positive integer.\n\nUse this to specify the maximum number of items per page."},{"type":"null"}],"description":"Limit for records per page."},"order_by_key":{"oneOf":[{"const":"asc","description":"Optional sort order for the configuration key.\nAllowed values:\n- `asc`: ascending order\n- `desc`: descending order"},{"const":"desc","description":"Optional sort order for the configuration key.\nAllowed values:\n- `asc`: ascending order\n- `desc`: descending order"},{"type":"null"}],"description":"Sort order for the configuration key."}},"required":[],"description":"Search criteria and pagination parameters for system settings search."},"IFlexOfficeSystemSettings":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key - UUID.\n\nUnique identifier of the system setting."},"key":{"type":"string","description":"Unique configuration key identifier.\n\nThe key for the configuration setting, must be unique."},"value":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional value for the configuration key.\n\nCan be null if not set."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description of the configuration setting.\n\nProvides context or explanation about the setting."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of when the configuration was created in ISO 8601 format."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of when the configuration was last updated in ISO 8601 format."}},"required":["id","key","created_at","updated_at"],"description":"Represents a global system configuration setting in FlexOffice.\n\nProvides key-value storage with descriptions relating to system behavior.\n\nIncluding timestamps for audit and synchronization purposes."},"IFlexOfficeSystemSettings.ICreate":{"type":"object","properties":{"key":{"type":"string","description":"Unique configuration key."},"value":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional value."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description."}},"required":["key"],"description":"Request body for creating a new system configuration setting."},"IFlexOfficeSystemSettings.IUpdate":{"type":"object","properties":{"key":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Configuration key to update."},"value":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Configuration value to update."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Configuration description to update."}},"required":[],"description":"Request body for updating an existing system configuration setting."},"IFlexOfficeTheme":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier for a FlexOffice UI theme.\n\nUses UUID string format."},"name":{"type":"string","description":"Unique name of the theme.\n\nMust be unique across all themes.\nUseful for identification in UI/Page Builder."},"css":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional CSS content defining the theme styles.\n\nRepresents custom styling for UI pages.\nMay be null if no CSS is specified."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the theme was created.\n\nStored in ISO 8601 date-time string format.\nImmutable once set."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the theme was last updated.\n\nStored in ISO 8601 date-time string format.\nChanges on modification."}},"required":["id","name","created_at","updated_at"],"description":"FlexOffice UI theme entity representing a named theme with optional CSS styles.\n\nEach theme enables customization of the UI/Page Builder appearance across the platform.\n\nMaintains audit timestamps and uniqueness constraints on name."},"IFlexOfficeTheme.IRequest":{"type":"object","properties":{"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional filter string to search theme names.\n\nUsed to filter the list of themes.\n\nNullable to allow no filter."},"page":{"oneOf":[{"type":"number","format":"uint32"},{"type":"null"}],"description":"Optional page number for pagination.\n\nUnsigned 32-bit integer.\nNullable to use default paging."},"limit":{"oneOf":[{"type":"number","format":"uint32"},{"type":"null"}],"description":"Optional limit of items per page.\n\nUnsigned 32-bit integer.\nNullable to use default limit."},"sortOrder":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Optional sort order.\n\nCan be 'asc' or 'desc'.\nNullable for default sorting."}},"description":"Request parameters for searching and paginating FlexOffice UI themes.\n\nIncludes optional filters for name, pagination controls, and sorting options.","required":[]},"IFlexOfficeTheme.ICreate":{"type":"object","properties":{"name":{"type":"string","description":"Unique name of the theme to create.\n\nRequired for creation."},"css":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional CSS content defining the theme's styles.\n\nIf omitted, theme defaults to no CSS customization."}},"required":["name"],"description":"Request body for creating a new FlexOffice UI theme.\n\nIncludes required 'name' and optional 'css' properties."},"IFlexOfficeTheme.IUpdate":{"type":"object","properties":{"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional updated name of the theme.\n\nMust maintain uniqueness.\nNullable for no update."},"css":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional updated CSS content.\n\nNullable for no update."}},"required":[],"description":"Request body for updating an existing FlexOffice UI theme.\n\nProperties are optional and may be null for no change.\n\nMaintains uniqueness constraints on 'name'."},"IFlexOfficeAdmin.IUpdate":{"type":"object","properties":{"email":{"type":"string","description":"Administrator's login email address, unique across the system."},"password_hash":{"type":"string","description":"Hashed password for authentication purposes, never storing plain text passwords."}},"required":[],"description":"Request schema for updating FlexOffice admin user details. Properties are optional to allow partial updates."},"IFlexOfficeAdmin.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number to retrieve.","minimum":1},"limit":{"type":"integer","description":"Number of records per page.","minimum":1},"search":{"type":"string","description":"Search string to filter admin users."}},"required":[],"description":"Request parameters for searching and paginating admin users."},"IFlexOfficeEditor.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number for pagination","minimum":1},"limit":{"type":"integer","description":"Max records per page","minimum":1},"search":{"type":"string","description":"Search term for editor list"}},"required":[],"description":"Request parameters for listing editors with filters and pagination."},"IFlexOfficeEditor.IUpdate":{"type":"object","properties":{"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Full name of the editor user for display and identification purposes."},"email":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Editor user login email, unique within the system."},"password_hash":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Hashed password for authentication. Password is stored securely as a hash."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp; null if the editor account is active."}},"required":[],"description":"Update object for an Editor user, with optional fields for partial updates.\n\nAll properties are optional and allow nullable values.\n\nUsed to modify editor user details like name, email, password hash, and deletion status."},"IFlexOfficeViewer.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number for pagination."},"limit":{"type":"integer","description":"Record limit per page."},"search":{"type":"string","description":"Search term for filtering viewers."}},"required":[],"description":"Request parameters for viewer user search and pagination."},"IFlexOfficeViewer":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the viewer."},"name":{"type":"string","description":"Full name of the viewer user."},"email":{"type":"string","description":"Email address of the viewer user."},"created_at":{"type":"string","format":"date-time","description":"Account creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp."}},"required":["id","name","email","created_at","updated_at"],"description":"Viewer users with read-only access and audit timestamps."},"IFlexOfficeViewer.IUpdate":{"type":"object","properties":{"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Full name of the viewer for display and identification."},"email":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Viewer's login email, unique within the system."},"password_hash":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Hashed credential for authentication. Do not store plain passwords."}},"required":[],"description":"Update Viewer user data. All fields are optional and nullable."},"IFlexOfficePage":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the UI page"},"flex_office_page_theme_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Associated page theme UUID (nullable)"},"name":{"type":"string","description":"Display name or title of the page"},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Detailed description of the page (nullable)"},"status":{"type":"string","description":"Current lifecycle status of the page, e.g., draft, published, archived"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the page was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the page was last updated"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp for soft deletion (nullable)"}},"required":["id","name","status","created_at","updated_at"],"description":"Represents a UI page in the FlexOffice system that can be customized using the UI/Page Builder. Supports lifecycle management, theming, and soft deletion."},"IFlexOfficePage.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Limitation of records per a page."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search keyword to filter pages by name or description."},"status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter pages by status such as draft, published."},"flex_office_page_theme_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter pages by associated theme id."}},"required":[],"description":"Request parameters for querying UI pages with pagination, filtering, and search capabilities."},"IFlexOfficePage.ICreate":{"type":"object","properties":{"flex_office_page_theme_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional associated page theme id."},"name":{"type":"string","description":"The display name or title of the page."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description of the page."},"status":{"type":"string","description":"Current lifecycle status of the page, e.g., draft, published, archived."}},"required":["name","status"],"description":"Request body for creating a new UI page in FlexOffice."},"IFlexOfficePage.IUpdate":{"type":"object","properties":{"flex_office_page_theme_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional UUID of the associated page theme"},"name":{"type":"string","description":"Display name or title of the page"},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Detailed description of the page"},"status":{"type":"string","description":"Lifecycle status of the page"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp for soft deletion"}},"required":[],"description":"Model for updating a UI page. All fields are optional except Id, which is path parameter and not included here."},"IFlexOfficeWidget":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the UI widget"},"flex_office_page_id":{"type":"string","format":"uuid","description":"Identifier of the UI page this widget belongs to"},"widget_type":{"type":"string","description":"Type of the widget, e.g., table, chart, filter, button, form"},"name":{"type":"string","description":"Name or label of the widget"},"configuration":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"JSON string storing widget-specific configuration"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the widget was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the widget was last updated"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp for soft deletion"}},"required":["id","flex_office_page_id","widget_type","name","created_at","updated_at"],"description":"A UI widget placed on a UI page within the FlexOffice system, storing widget metadata and configuration."},"IFlexOfficeWidget.IRequest":{"type":"object","properties":{"page_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional ID of the page to filter widgets"},"widget_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Type filter for widgets"},"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Name filter for widgets"},"deleted_at":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Filter by soft-deleted status; true to filter deleted, false for active, null for all"},"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number for pagination"},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Record limit per page"},"orderBy":{"type":"object","description":"Object defining sort order by fields with \"asc\" or \"desc\" values","properties":{},"additionalProperties":{"oneOf":[{"const":"asc"},{"const":"desc"}]},"required":[]}},"required":[],"description":"Request parameters for searching and paginating UI widgets."},"IFlexOfficeWidget.ICreate":{"type":"object","properties":{"flex_office_page_id":{"type":"string","format":"uuid","description":"Required ID of the page the widget belongs to"},"widget_type":{"type":"string","description":"Required type of the widget (table, chart, filter, button, form)"},"name":{"type":"string","description":"Required name of the widget"},"configuration":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional JSON string for widget configuration"}},"required":["flex_office_page_id","widget_type","name"],"description":"Request body schema for creating a UI widget."},"IFlexOfficeWidget.IUpdate":{"type":"object","properties":{"flex_office_page_id":{"type":"string","format":"uuid","description":"The page this widget belongs to, referencing flex_office_pages.id."},"widget_type":{"type":"string","description":"Type of the widget, e.g., table, chart, filter, button, form."},"name":{"type":"string","description":"Name or label of the widget."},"configuration":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"JSON string storing widget-specific configuration details."}},"description":"Partial update of a UI widget entity with optional fields for page id, type, name, and configuration.","required":[]},"IFlexOfficeWidgetScript.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Current page number for pagination, starting from 1."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Number of records per page limit in pagination."},"sortBy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Field name to sort the records by."},"order":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sort order: 'asc' or 'desc'."},"filter":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter expression for filtering the records."}},"description":"Request parameters for listing UI widget scripts with optional filtering, sorting, and pagination.","required":[]},"IFlexOfficeWidgetScript":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"flex_office_widget_id":{"type":"string","format":"uuid","description":"Associated widget referencing flex_office_widgets.id."},"script_type":{"type":"string","description":"Type of scripting language, e.g., javascript, python."},"script_content":{"type":"string","description":"The actual script content as text."},"created_at":{"type":"string","format":"date-time","description":"Script creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp of the script."}},"required":["id","flex_office_widget_id","script_type","script_content","created_at","updated_at"],"description":"UI widget custom script entity representing extensible scripting logic for widgets in the system."},"IFlexOfficeWidgetScript.ICreate":{"type":"object","properties":{"flex_office_widget_id":{"type":"string","format":"uuid","description":"Associated widget referencing flex_office_widgets.id."},"script_type":{"type":"string","description":"Type of scripting language, e.g., javascript, python."},"script_content":{"type":"string","description":"The actual script content as text."}},"required":["flex_office_widget_id","script_type","script_content"],"description":"Request body for creating a new widget script with required script properties."},"IFlexOfficeWidgetScript.IUpdate":{"type":"object","description":"Partial update for a widget script capturing scripting language type and the script content.","properties":{"script_type":{"type":"string","description":"Type of scripting language, e.g., javascript, python."},"script_content":{"type":"string","description":"The actual script content as text."}},"required":[]},"IFlexOfficePageTheme.IRequest":{"type":"object","description":"Request payload for searching and paginating UI page themes. Includes optional filters and pagination parameters.","properties":{"name":{"oneOf":[{"type":"string","description":"Optional filter by theme name."},{"type":"null"}],"description":"Optional filter by theme name."},"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for paginated results."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Number of records to return per page."}},"required":[]},"IFlexOfficePageTheme":{"type":"object","description":"UI Page Theme entity defining visual styles and CSS for FlexOffice platform. Contains unique name, optional description, and audit timestamps.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the page theme."},"name":{"type":"string","description":"Unique name of the theme. Used for selection and identification in UI/Page Builder."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description of the theme for context."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the theme was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the theme was last updated."}},"required":["id","name","created_at","updated_at"]},"IFlexOfficePageTheme.ICreate":{"type":"object","description":"Payload to create a new UI page theme. Requires unique theme name and optional description.","properties":{"name":{"type":"string","description":"Unique name for the new UI page theme."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description of the theme."}},"required":["name"]},"IFlexOfficePageTheme.IUpdate":{"type":"object","properties":{"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Name of the UI/Page Builder theme"},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed theme description of the theme"},"css":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"CSS content defining the theme styles"}},"description":"Updatable fields of a UI/Page Builder theme\n\nAllows partial update. All fields optional.","required":[]},"IFlexOfficePageVersion.IRequest":{"type":"object","properties":{"pageId":{"type":"string","description":"ID of the page to search versions for"},"pageIds":{"oneOf":[{"type":"array","items":{"type":"string"}},{"type":"null"}],"description":"Optional list of page IDs to filter"},"version_number":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Specific version number filter"},"version_numbers":{"oneOf":[{"type":"array","items":{"type":"integer"}},{"type":"null"}],"description":"Multiple version numbers filter"},"page_data":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by matching page data"},"created_at_gte":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Created after or equal to this date"},"created_at_lte":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Created before or equal to this date"},"page_data_contains":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Substring filter for page data"},"sortBy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sorting criteria"},"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number for pagination"},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Maximum results per page"}},"required":["pageId"],"description":"Request parameters for searching UI page versions\n\nSupports paging, filtering, and sorting."},"IFlexOfficePageVersion":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of a page version"},"flex_office_page_id":{"type":"string","format":"uuid","description":"Associated UI page ID"},"version_number":{"type":"integer","description":"Sequential version number"},"page_data":{"type":"string","description":"Serialized JSON data of the page"},"created_at":{"type":"string","format":"date-time","description":"Version creation timestamp"}},"required":["id","flex_office_page_id","version_number","page_data","created_at"],"description":"Historical snapshot of a UI page representing a version of the page's layout and configuration at a point in time."},"IFlexOfficeDataSource.IRequest":{"type":"object","properties":{"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional name filter for data sources"},"type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional data source type filter, e.g., mysql, postgresql, google_sheet, excel"},"is_active":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Filter for active data sources"},"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number for pagination"},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Limit number of records per page"}},"required":[],"description":"Search and filtering parameters for FlexOffice data sources\n\nAllows filtering by name, type, and active status\nSupports pagination through page and limit"},"IFlexOfficeDataSource":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key identifier for the data source."},"name":{"type":"string","description":"Human-readable unique name for the data source."},"type":{"type":"string","description":"Type category such as 'mysql', 'postgresql', 'google_sheet', or 'excel'."},"connection_info":{"type":"string","description":"Structured connection details or credentials reference."},"is_active":{"type":"boolean","description":"Flag indicating if the data source is active and available for synchronization."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this data source record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this data source record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp indicating when this data source was soft deleted, if applicable."}},"required":["id","name","type","connection_info","is_active","created_at","updated_at"],"description":"Stores configuration and metadata for external data sources in FlexOffice, including connection details, type classification, and activation status. Serves as the central registry enabling unified access and management of diverse external databases and spreadsheets."},"IFlexOfficeDataSource.ICreate":{"type":"object","properties":{"name":{"type":"string","description":"Human-readable unique name for the data source."},"type":{"type":"string","description":"Type category such as 'mysql', 'postgresql', 'google_sheet', or 'excel'."},"connection_info":{"type":"string","description":"Structured connection details or credentials reference."},"is_active":{"type":"boolean","description":"Flag indicating if the data source is active and available for synchronization."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp indicating when this data source was soft deleted, if applicable."}},"required":["name","type","connection_info","is_active"],"description":"Request body schema for creating a new external data source configuration in the FlexOffice system."},"IFlexOfficeDataSource.IUpdate":{"type":"object","properties":{"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Human-readable unique name for the data source."},"type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Type category such as 'mysql', 'postgresql', 'google_sheet', or 'excel'."},"connection_info":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Structured connection details or credentials reference."},"is_active":{"type":"boolean","description":"Flag indicating if the data source is active and available for synchronization."}},"required":[],"description":"Request body schema for updating an existing external data source configuration. All fields are optional and nullable except is_active which is boolean non-nullable."},"IFlexOfficeDataSourceCredential.IRequest":{"type":"object","properties":{"filter":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter string or expression for querying credentials."},"page":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Page number for paginated results."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Maximum number of records per page."},"sort_by":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sort by field name."},"order":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort order: ascending 'asc' or descending 'desc'."}},"required":[],"description":"Search and pagination request body schema for filtering data source credentials."},"IFlexOfficeDataSourceCredential":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the data source credential."},"flex_office_data_source_id":{"type":"string","format":"uuid","description":"Foreign key to the data source."},"credential_type":{"type":"string","description":"Credential type, e.g. 'oauth2', 'api_key'."},"credential_value":{"type":"string","description":"Credential token or key value."},"expires_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Expiration date-time in ISO 8601 format or null if not set."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp if any, null when active."}},"required":["id","flex_office_data_source_id","credential_type","credential_value","expires_at","created_at","updated_at","deleted_at"],"description":"Represents a credential associated with a FlexOffice data source. Holds authentication tokens such as OAuth2 tokens or API keys and their relevant metadata."},"IFlexOfficeDataSourceCredential.ICreate":{"type":"object","properties":{"flex_office_data_source_id":{"type":"string","format":"uuid","description":"Foreign key to the data source."},"credential_type":{"type":"string","description":"Credential type, e.g. 'oauth2', 'api_key'."},"credential_value":{"type":"string","description":"Credential token or key value."},"expires_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional expiration date-time in ISO 8601 format or null if not set."}},"required":["flex_office_data_source_id","credential_type","credential_value","expires_at"],"description":"Data required to create a new data source credential. Includes authentication type, secret value, and optional expiration date."},"IFlexOfficeDataSourceCredential.IUpdate":{"type":"object","properties":{"credential_type":{"type":"string","description":"Credential type, e.g. 'oauth2', 'api_key'."},"credential_value":{"type":"string","description":"Credential token or key value."},"expires_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional expiration date-time in ISO 8601 format or null if not set."}},"required":[],"description":"Fields that can be updated for a data source credential. All properties are optional to allow partial updates."},"IFlexOfficeDataSourceSync.IRequest":{"type":"object","properties":{"flex_office_data_source_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optionally filter by data source identifier."},"scheduled_at_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter scheduled sync operations from this date-time."},"scheduled_at_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter scheduled sync operations up to this date-time."},"status":{"oneOf":[{"const":"pending"},{"const":"running"},{"const":"success"},{"const":"failed"},{"type":"null"}],"description":"Filter by sync operation status."},"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Limit number of records per page."},"sort_by":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Field to sort by."},"sort_order":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sorting order."}},"required":[],"description":"Request parameters for searching and paginating data source synchronization records. Allows filtering by data source ID, date ranges, status, and sorting order."},"IFlexOfficeDataSourceSync":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the sync operation."},"flex_office_data_source_id":{"type":"string","format":"uuid","description":"Foreign key referencing the associated data source."},"scheduled_at":{"type":"string","format":"date-time","description":"Scheduled time for execution of the sync."},"started_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Actual start time of the sync; null if not started yet."},"completed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Time when sync finished; null if not finished yet."},"status":{"type":"string","description":"Current sync status (e.g., pending, running, success, failed)."},"error_message":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Error message if sync failed, null if no error."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Last record update timestamp."}},"required":["id","flex_office_data_source_id","scheduled_at","status","created_at","updated_at"],"description":"Records scheduled and executed synchronization operations for external data sources.\n\nTracks timestamps, status, success, and error details enabling monitoring and retry mechanisms for data refresh workflows.\n\nProperties:\n- id: Primary Key, UUID.\n- flex_office_data_source_id: Foreign key to data source.\n- scheduled_at: Scheduled execution time.\n- started_at: Sync start time, nullable.\n- completed_at: Sync completion time, nullable.\n- status: Sync status string.\n- error_message: Error details, nullable.\n- created_at: Record creation time.\n- updated_at: Last update time.\n\nAll timestamps must be ISO 8601 date-time strings.\n\nStatus is a string but should be one of 'pending', 'running', 'success', 'failed' as business practice (not enforced explicitly here)."},"IFlexOfficeDataSourceSync.ICreate":{"type":"object","properties":{"flex_office_data_source_id":{"type":"string","format":"uuid","description":"Foreign key linking to the data source to be synchronized."},"scheduled_at":{"type":"string","format":"date-time","description":"Scheduled date and time for execution of the sync operation."},"started_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp recording actual start of the sync process; null if not yet started."},"completed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp marking when the sync operation finished; null if ongoing."},"status":{"type":"string","description":"Status indicator of the sync operation (e.g., pending, running, success, failed)."},"error_message":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Error message details if the sync operation failed; null if successful or not attempted."}},"required":["flex_office_data_source_id","scheduled_at","status"],"description":"Payload to create a new synchronization operation for an external data source.\n\nRequired fields:\n- flex_office_data_source_id (UUID)\n- scheduled_at (ISO 8601 date-time string)\n- status (string)\n\nOptional fields:\n- started_at (nullable ISO 8601 date-time string)\n- completed_at (nullable ISO 8601 date-time string)\n- error_message (nullable string)"},"IFlexOfficeDataSourceSync.IUpdate":{"type":"object","properties":{"flex_office_data_source_id":{"type":"string","format":"uuid","description":"Optional foreign key linking to data source."},"scheduled_at":{"type":"string","format":"date-time","description":"Optional scheduled execution time."},"started_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional timestamp of sync start; can be null."},"completed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional timestamp of sync completion; can be null."},"status":{"type":"string","description":"Optional status update string."},"error_message":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional error message if sync failed."}},"required":[],"description":"Fields allowed to update in an existing synchronization record. All fields optional, enabling partial updates.\n\nProperties:\n- flex_office_data_source_id (optional UUID)\n- scheduled_at (optional ISO 8601 date-time string)\n- started_at (optional nullable ISO 8601 date-time string)\n- completed_at (optional nullable ISO 8601 date-time string)\n- status (optional string)\n- error_message (optional nullable string)"},"IFlexOfficeExternalSheet.IRequest":{"type":"object","properties":{"flex_office_data_source_id":{"type":"string","format":"uuid","description":"Filter external sheets by associated data source ID."},"file_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by exact or partial file name."},"file_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by the virus-checked URL of the uploaded spreadsheet."},"sheet_count":{"type":"number","description":"Filter by number of sheets contained within the external spreadsheet."},"last_synced_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter by last successful synchronization timestamp."},"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Page index for pagination requests, 1-based."},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Number of items to return per page."}},"required":[],"description":"Parameters used to filter and paginate external sheet records associated with a data source.\n\nIncludes optional search criteria and pagination settings.\n\nProperties:\n- flex_office_data_source_id (optional UUID to filter sheets by data source)\n- file_name (optional, nullable string for file name filter)\n- file_url (optional, nullable string for URL filter)\n- sheet_count (optional number to filter by sheet count)\n- last_synced_at (optional, nullable ISO 8601 date-time for last sync filter)\n- page (optional, nullable number for pagination page)\n- limit (optional, nullable number for pagination limit)\n"},"IFlexOfficeExternalSheet":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"flex_office_data_source_id":{"type":"string","format":"uuid","description":"Foreign key referencing the linked data source."},"file_name":{"type":"string","description":"Original name of the uploaded spreadsheet file."},"file_url":{"type":"string","description":"URL location to access the spreadsheet remotely."},"sheet_count":{"type":"integer","description":"Count of individual sheets contained within the spreadsheet."},"last_synced_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of the last successful synchronization of the sheet."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the metadata record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this metadata record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp for this spreadsheet metadata."}},"required":["id","flex_office_data_source_id","file_name","file_url","sheet_count","created_at","updated_at"],"description":"Metadata for externally uploaded spreadsheet files, such as Google Sheets and Excel, linked to data sources. Contains file identification, access URLs, sheet counts, synchronization timestamps, and soft deletion data."},"IFlexOfficeExternalSheet.ICreate":{"type":"object","properties":{"flex_office_data_source_id":{"type":"string","format":"uuid","description":"Foreign key referencing the linked data source."},"file_name":{"type":"string","description":"Original name of the uploaded spreadsheet file."},"file_url":{"type":"string","description":"URL location to access the spreadsheet remotely."},"sheet_count":{"type":"integer","description":"Count of individual sheets contained within the spreadsheet."}},"required":["flex_office_data_source_id","file_name","file_url","sheet_count"],"description":"Payload for creating a new external sheet metadata entry. Includes file name, URL, sheet count, and associated data source ID."},"IFlexOfficeExternalSheet.IUpdate":{"type":"object","properties":{"file_name":{"type":"string","description":"Original name of the uploaded spreadsheet file."},"file_url":{"type":"string","description":"URL location to access the spreadsheet remotely."},"sheet_count":{"type":"integer","description":"Count of individual sheets contained within the spreadsheet."},"last_synced_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of the last successful synchronization of the sheet."}},"required":[],"description":"Payload for updating external sheet metadata. Allows modifying file details and the last synchronization timestamp."},"IFlexOfficeDataSourceLog.IRequest":{"type":"object","properties":{"flex_office_data_source_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Foreign key linking to the associated data source."},"log_level":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Severity level of the log entry, e.g., 'info', 'warning', 'error'."},"message":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Detailed message describing the log event."},"user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"User ID if the event is user-triggered; null for system-generated logs."},"timestamp_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Start of event occurrence timestamp filter range."},"timestamp_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"End of event occurrence timestamp filter range."},"page":{"type":"integer","description":"Page number to retrieve."},"limit":{"type":"integer","description":"Maximum number of records per page."}},"required":["page","limit"],"description":"Filters and pagination for querying data source log entries."},"IFlexOfficeDataSourceLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"flex_office_data_source_id":{"type":"string","format":"uuid","description":"Foreign key linking to the associated data source"},"log_level":{"type":"string","description":"Severity level of the log entry, e.g., 'info', 'warning', 'error'."},"message":{"type":"string","description":"Detailed message describing the log event."},"timestamp":{"type":"string","format":"date-time","description":"Event occurrence timestamp."},"user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"User ID if the event is user-triggered; null for system-generated logs."},"created_at":{"type":"string","format":"date-time","description":"Log record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the log record was last updated."}},"required":["id","flex_office_data_source_id","log_level","message","timestamp","created_at","updated_at"],"description":"Audit and operational log entries related to data sources, supporting troubleshooting and security auditing. Logs include event timestamps, severity levels, user attribution, and descriptive messages."},"IFlexOfficePageEditor.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Limitation of records per a page."},"page_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Referenced page's ID for filtering."},"editor_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Referenced editor user's ID for filtering."}},"required":[],"description":"Page request data for FlexOffice PageEditor, supporting pagination and filtering by page and editor."},"IFlexOfficePageEditor":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\nUnique identifier of the active editor session."},"page_id":{"type":"string","format":"uuid","description":"Referenced page's flex_office_pages.id.\nUUID pointing to the UI page this editor session is active on."},"editor_id":{"type":"string","format":"uuid","description":"Referenced editor user's flex_office_editors.id.\nUUID of the editor user participating in this session."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the editor session started.\nISO 8601 combined date and time in UTC."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the editor session was last updated.\nUseful for concurrency and heartbeat checks."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the editor session was closed or removed (soft delete).\nNull if the session is active."}},"required":["id","page_id","editor_id","created_at","updated_at"],"description":"Active editor session record on a UI page within FlexOffice collaboration.\nTracks which editor is actively editing a page and session state including soft deletion flag."},"IFlexOfficePageEditor.ICreate":{"type":"object","properties":{"page_id":{"type":"string","format":"uuid","description":"Referenced page's ID."},"editor_id":{"type":"string","format":"uuid","description":"Referenced editor user's ID."}},"required":["page_id","editor_id"],"description":"Create a new record for an active editor session on a page."},"IFlexOfficePageEditor.IUpdate":{"type":"object","properties":{"page_id":{"type":"string","format":"uuid","description":"Referenced page's flex_office_pages.id.\nOptional UUID to re-assign editor session to another page."},"editor_id":{"type":"string","format":"uuid","description":"Referenced editor user's flex_office_editors.id.\nOptional UUID to re-assign editor session to another editor."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the editor session was closed or removed (soft delete).\nSet to null to mark session active, or date-time string when closing session."}},"required":[],"description":"Properties for updating a page editor session in FlexOffice collaboration. Optional fields to modify assignment and session state."},"IFlexOfficePageComment":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key."},"page_id":{"type":"string","format":"uuid","description":"Belonged page's ID."},"editor_id":{"type":"string","format":"uuid","description":"Belonged editor user's ID."},"content":{"type":"string","description":"The text content of the comment."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the comment was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the comment was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the comment was soft deleted or moderated."}},"required":["id","page_id","editor_id","content","created_at","updated_at"],"description":"Represents a comment made by an editor on a UI page within FlexOffice system.\n\nThis entity stores author and content info, timestamps, and soft-deletion status.\n\nSupports collaboration and editorial workflows through comment records.\n\nSecurity: Access restricted to authorized roles for viewing or editing comments."},"IFlexOfficePageComment.IRequest":{"type":"object","properties":{"page_id":{"type":"string","format":"uuid","description":"Optional filter for page ID."},"editor_id":{"type":"string","format":"uuid","description":"Optional filter for editor ID."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Free-text search term applied to content or related fields.\nSet to null if no search is desired."},"page":{"oneOf":[{"type":"number","minimum":0},{"type":"null"}],"description":"Page number for paginated query.\nOptional; if not provided, default pagination logic applies."},"limit":{"oneOf":[{"type":"number","minimum":0},{"type":"null"}],"description":"Number of items per page in pagination.\nOptional; default limit applies if omitted."}},"required":[],"description":"Parameters to filter and paginate page comments in a search."},"IFlexOfficePageComment.ICreate":{"type":"object","properties":{"page_id":{"type":"string","format":"uuid","description":"The UI page id this comment belongs to."},"editor_id":{"type":"string","format":"uuid","description":"The editor user id who authors the comment."},"content":{"type":"string","description":"The textual comment content."}},"required":["page_id","editor_id","content"],"description":"Data required to create a new comment on a page."},"IFlexOfficePageComment.IUpdate":{"type":"object","properties":{"content":{"type":"string","description":"The text content of the comment."},"updated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the comment was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the comment was soft deleted or moderated."}},"required":[],"description":"Defines updatable fields for an editor's comment on a page.\n\nAllows modifying content text and soft deletion timestamps.\n\nTimestamps are used for audit and concurrency control.\n\nOnly authorized users can perform updates."},"IFlexOfficePageComments":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key."},"page_id":{"type":"string","format":"uuid","description":"Belonged page's ID."},"editor_id":{"type":"string","format":"uuid","description":"Belonged editor user's ID."},"content":{"type":"string","description":"The text content of the comment."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the comment was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the comment was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the comment was soft deleted or moderated."}},"required":["id","page_id","editor_id","content","created_at","updated_at"],"description":"Represents a comment record in the FlexOffice system, supporting collaboration.\n\nContains identification, authorship, content, and audit fields.\n\nSecurity and soft deletion are handled appropriately."},"IFlexOfficePageComments.IUpdate":{"type":"object","properties":{"content":{"type":"string","description":"The text content of the comment."},"updated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the comment was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the comment was soft deleted or moderated."}},"required":[],"description":"Request body schema for updating a page comment.\n\nAllows partial updates of comment content and audit fields.\n\nEnables soft delete management and concurrency tracking."},"IFlexOfficeEditConflicts":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key."},"page_id":{"type":"string","format":"uuid","description":"Referenced page's ID."},"editor_id":{"type":"string","format":"uuid","description":"Referenced editor user's ID."},"conflict_data":{"type":"string","description":"JSON encoded data representing conflicting changes."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the conflict record was created."}},"required":["id","page_id","editor_id","conflict_data","created_at"],"description":"Captures records of edit conflicts occurring in collaborative editing sessions. Provides historical tracking and audit trails for conflict resolution. Links to the affected page, involved editor, and the conflicting change snapshot. Immutable append-only snapshot table capturing details and timestamps."},"IFlexOfficeEditConflicts.IRequest":{"type":"object","properties":{"page_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by page ID."},"editor_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by editor user ID."},"conflict_data_search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search string within conflict data JSON."},"created_at_from":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter conflicts created after this date."},"created_at_to":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter conflicts created before this date."},"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Limit of records per page."},"orderBy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Field to order results by."},"orderDir":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Order direction: ascending or descending."}},"required":[],"description":"Request body for paginated search of edit conflicts with filter criteria."},"IFlexOfficeEditConflict":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key."},"page_id":{"type":"string","format":"uuid","description":"Referenced page's ID."},"editor_id":{"type":"string","format":"uuid","description":"Referenced editor user's ID."},"conflict_data":{"type":"string","description":"JSON encoded data representing conflicting changes."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the conflict record was created."}},"required":["id","page_id","editor_id","conflict_data","created_at"],"description":"Captures records of edit conflicts occurring in collaborative editing sessions. Provides historical tracking and audit trails for conflict resolution. Links to the affected page, involved editor, and the conflicting change snapshot. Immutable append-only snapshot table capturing details and timestamps."},"IFlexOfficeEditConflict.IRequest":{"type":"object","properties":{"page_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by page ID."},"editor_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by editor user ID."},"conflict_data_search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search string within conflict data JSON."},"created_at_from":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter conflicts created after this date."},"created_at_to":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter conflicts created before this date."},"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Limit of records per page."},"orderBy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Field to order results by."},"orderDir":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Order direction: ascending or descending."}},"required":[],"description":"Request body for paginated search of edit conflicts with filter criteria."},"IFlexOfficeChart":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the chart."},"flex_office_widget_id":{"type":"string","format":"uuid","description":"Associated widget's unique ID rendering the chart."},"chart_type":{"type":"string","description":"Visualization style type: e.g., bar, line, pie."},"title":{"type":"string","description":"Display title of the chart."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed business description of the chart."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record last updated timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp or null if active."}},"required":["id","flex_office_widget_id","chart_type","title","created_at","updated_at"],"description":"Represents analytics chart metadata and configuration linked to a UI widget, defining visualization styles, titles, optional descriptions, and timestamps with soft delete support."},"IFlexOfficeChart.IRequest":{"type":"object","properties":{"chart_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter chart types."},"title_search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Title filter string."},"description_search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Description search keyword."},"enabled":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Filter active/inactive charts."},"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Limit of records per page."},"orderBy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Field to order results by."},"orderDir":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Ordering direction: asc or desc."}},"required":[],"description":"Request structure for searching and paginating chart metadata."},"IFlexOfficeChart.ICreate":{"type":"object","properties":{"flex_office_widget_id":{"type":"string","format":"uuid","description":"ID of the associated UI widget."},"chart_type":{"type":"string","description":"Chart type such as bar, line, pie."},"title":{"type":"string","description":"Display title for the chart."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description."}},"required":["flex_office_widget_id","chart_type","title"],"description":"Request body for creating a new analytics chart with required and optional fields."},"IFlexOfficeChart.IUpdate":{"type":"object","properties":{"flex_office_widget_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"ID of the associated UI widget."},"chart_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Chart type such as bar, line, pie."},"title":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Display title for the chart."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description."}},"required":[],"description":"Request body for updating an existing analytics chart with optional fields."},"IFlexOfficeWidgetKpi.IRequest":{"type":"object","properties":{"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional search keyword for filtering."},"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Optional pagination page number."},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Optional pagination limit per page."},"orderBy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional property name to sort by."},"orderDirection":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Optional sort direction ('asc' or 'desc')."}},"required":[],"description":"Request body for searching and filtering KPI widgets."},"IFlexOfficeKpiWidget":{"type":"object","description":"Analytics KPI widget representing key business metrics linked to a UI widget. Stores the JSON configuration of the widget's data sources, aggregation methods, and display options. Tracks standard timestamps for creation, update, and soft deletion.","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for the KPI widget record."},"flex_office_widget_id":{"type":"string","format":"uuid","description":"Foreign key to the FlexOffice UI widget that this KPI widget represents."},"config_json":{"type":"string","description":"JSON string specifying data queries, aggregation methods, and display options."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp when this KPI widget was created in the system."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp when this KPI widget was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp. Nullable timestamp indicating if the KPI widget has been deleted."}},"required":["id","flex_office_widget_id","config_json","created_at","updated_at"]},"IFlexOfficeKpiWidget.ICreate":{"type":"object","description":"Request body for creating a new KPI widget.","properties":{"flex_office_widget_id":{"type":"string","format":"uuid","description":"Foreign key to the FlexOffice UI widget."},"config_json":{"type":"string","description":"JSON configuration specifying data queries, aggregation methods, and display options."}},"required":["flex_office_widget_id","config_json"]},"IFlexOfficeKpiWidget.IUpdate":{"type":"object","description":"Request body for updating an existing KPI widget.","properties":{"flex_office_widget_id":{"type":"string","format":"uuid","description":"Foreign key to the FlexOffice UI widget."},"config_json":{"type":"string","description":"JSON configuration specifying data queries, aggregation methods, and display options."}},"required":[]},"IFlexOfficeFilterCondition":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the filter condition."},"flex_office_chart_id":{"type":"string","format":"uuid","description":"Identifier of the chart to which this filter condition belongs."},"flex_office_widget_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional identifier of the widget this condition may be attached to. Nullable."},"filter_expression":{"type":"string","description":"Filter logic expression defining the filter."},"enabled":{"type":"boolean","description":"Flag indicating if the filter condition is active."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this filter condition was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this filter condition was last updated."}},"required":["id","flex_office_chart_id","filter_expression","enabled","created_at","updated_at"],"description":"Represents a filter condition applied to a chart for dynamic data querying.\n\nThis entity is linked to a specific chart and optionally to a widget.\n\nIt defines the filter logic expression, its enabled state, and includes audit timestamps."},"IFlexOfficeFilterCondition.IRequest":{"type":"object","description":"Request criteria for searching and filtering filter conditions with pagination support.","properties":{"filter_expression":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional filter expression to narrow search results."},"enabled":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Optional flag to filter by enabled status."},"flex_office_chart_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional chart ID to filter conditions."},"flex_office_widget_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional widget ID to filter conditions."},"page":{"oneOf":[{"type":"number","minimum":0,"multipleOf":1},{"type":"null"}],"description":"Optional page number for pagination."},"limit":{"oneOf":[{"type":"number","minimum":1,"multipleOf":1},{"type":"null"}],"description":"Optional limit of records per page."}},"required":[]},"IFlexOfficeFilterCondition.ICreate":{"type":"object","properties":{"flex_office_chart_id":{"type":"string","format":"uuid","description":"Identifier of the chart this filter condition applies to."},"flex_office_widget_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional widget ID this filter condition is associated with."},"filter_expression":{"type":"string","description":"Required filter expression defining the filtering logic."},"enabled":{"type":"boolean","description":"Enabled flag indicating if this filter condition is active."}},"required":["flex_office_chart_id","filter_expression","enabled"],"description":"Request body for creating a new filter condition.\n\nRequires chart ID, filter expression, and enabled flag.\n\nOptionally, a widget ID may be specified."},"IFlexOfficeFilterCondition.IUpdate":{"type":"object","properties":{"flex_office_chart_id":{"type":"string","format":"uuid","description":"Optional chart ID. Normally not updated."},"flex_office_widget_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional widget ID this filter condition is associated with."},"filter_expression":{"type":"string","description":"Optional filter expression update."},"enabled":{"type":"boolean","description":"Optional enabled flag update."}},"required":[],"description":"Request body to update an existing filter condition. Allows partial updates.\n\nAll fields optional."},"IFlexOfficeExportLog.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Optional page number for pagination."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Optional limit per page for pagination."},"export_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional filter on export_type (e.g., CSV, Excel)."},"executed_at_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional start date filter in ISO 8601 format."},"executed_at_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional end date filter in ISO 8601 format."},"executed_by_user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional filter by executing user ID."},"status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional filter on status (e.g., success, failure)."}},"required":[],"description":"Request body to search and paginate export logs with optional filters."},"IFlexOfficeExportLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"export_type":{"type":"string","description":"Type/format of the export such as CSV, Excel, PDF."},"target_object":{"type":"string","description":"Identifier of the exported data or report, e.g., chart or dashboard ID."},"status":{"type":"string","description":"Result of the export operation, e.g., success, failure."},"executed_by_user_id":{"type":"string","format":"uuid","description":"User ID who performed the export operation."},"executed_at":{"type":"string","format":"date-time","description":"Timestamp when the export was executed."},"created_at":{"type":"string","format":"date-time","description":"Record creation time for audit purposes."}},"required":["id","export_type","target_object","status","executed_by_user_id","executed_at","created_at"],"description":"Export log records capturing user export actions such as type, target, and status with execution timestamps."},"IFlexOfficeAuditLog.IRequest":{"type":"object","properties":{"event_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Type/category of the audit event, e.g., 'login', 'permission_change', 'data_access'."},"actor_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Role or type of the actor performing the action, e.g., 'admin', 'editor', 'viewer'."},"actor_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Unique identifier of the user who performed the action; nullable if system generated event."},"target_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Type/category of the target entity affected by the event, e.g., 'page', 'data_source'."},"target_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Unique identifier of the target entity involved in the event."},"action":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Describes the specific action performed, e.g., 'create', 'update', 'delete'."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description of the audit event."},"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the audit event was recorded."},"updated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the audit event record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp marking soft deletion; null if not deleted."}},"required":[],"description":"Page request data to filter and paginate audit log search results."},"IFlexOfficeAuditLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"event_type":{"type":"string","description":"Type/category of the audit event, e.g., 'login', 'permission_change', 'data_access'."},"actor_type":{"type":"string","description":"Role or type of the actor performing the action, e.g., 'admin', 'editor', 'viewer'."},"actor_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Unique identifier of the user who performed the action; nullable if system generated event."},"target_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Type/category of the target entity affected by the event, e.g., 'page', 'data_source'."},"target_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Unique identifier of the target entity involved in the event."},"action":{"type":"string","description":"Describes the specific action performed, e.g., 'create', 'update', 'delete'."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description of the audit event."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the audit event was recorded."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the audit event record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp marking soft deletion; null if not deleted."}},"required":["id","event_type","actor_type","action","created_at","updated_at"],"description":"Audit log records capturing immutable, append-only security and system events for compliance monitoring."},"IFlexOfficeUserActivityLog.IRequest":{"type":"object","properties":{"user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Referenced user's flex_office_admins.id, flex_office_editors.id, or flex_office_viewers.id depending on role."},"action_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Type/category of the action performed by the user, e.g., 'login', 'edit_page', 'view_dashboard'."},"action_details":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional details providing additional context about the user's action."},"ip_address":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"IP address from which the user performed the action."},"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the user action was recorded."},"updated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the user action record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp; null if not deleted."}},"required":[],"description":"Page request data to filter and paginate user activity log search results."},"IFlexOfficeUserActivityLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the user activity record."},"user_id":{"type":"string","format":"uuid","description":"Identifier of the user performing the action; refers to flex_office_admins, flex_office_editors, or flex_office_viewers."},"action_type":{"type":"string","description":"Category of user action such as login, edit_page, or view_dashboard."},"action_details":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional additional details describing the user action. Nullable."},"ip_address":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"IP address from which the user performed the action. Nullable."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the action was recorded."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the activity record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp; null if record is active."}},"required":["id","user_id","action_type","created_at","updated_at"],"description":"User activity log entity indicating user interactions in the FlexOffice system."},"IFlexOfficeSystemAlert.IRequest":{"type":"object","properties":{"severity":{"oneOf":[{"type":"string","description":"Severity levels to filter alerts; e.g., info, warning, critical."},{"type":"null"}],"description":"Severity levels to filter alerts; e.g., info, warning, critical."},"is_resolved":{"oneOf":[{"type":"boolean","description":"Filter to include only resolved or unresolved alerts."},{"type":"null"}],"description":"Filter to include only resolved or unresolved alerts."},"created_after":{"oneOf":[{"type":"string","format":"date-time","description":"Starting date for creation timestamp filter."},{"type":"null"}],"description":"Starting date for creation timestamp filter."},"created_before":{"oneOf":[{"type":"string","format":"date-time","description":"Ending date for creation timestamp filter."},{"type":"null"}],"description":"Ending date for creation timestamp filter."},"page":{"oneOf":[{"type":"number","format":"int32","description":"Page number for pagination; starts from 1."},{"type":"null"}],"description":"Page number for pagination; starts from 1."},"limit":{"oneOf":[{"type":"number","format":"int32","description":"Maximum number of records per page."},{"type":"null"}],"description":"Maximum number of records per page."}},"required":[],"description":"Request type for system alert list retrieval with filtering and pagination parameters."},"IFlexOfficeSystemAlerts":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the system alert."},"severity":{"type":"string","description":"Severity level such as info, warning, or critical alert."},"message":{"type":"string","description":"Descriptive message describing the alert."},"is_resolved":{"type":"boolean","description":"Indicator whether the alert is resolved."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when alert was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when alert record was last updated."},"resolved_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the alert was resolved."}},"required":["id","severity","message","is_resolved","created_at","updated_at"],"description":"System alert entity for warnings and notifications about system health, security, or performance."},"IFlexOfficeSystemAlerts.ICreate":{"type":"object","properties":{"severity":{"type":"string","description":"Severity of the alert; allowed values include info, warning, critical."},"message":{"type":"string","description":"Descriptive message text describing the alert."},"is_resolved":{"oneOf":[{"type":"boolean","description":"Initial resolution state. Defaults to false if omitted."},{"type":"null"}],"description":"Initial resolution state. Defaults to false if omitted."}},"required":["severity","message"],"description":"Request body for creating new system alert notification."},"IFlexOfficeSystemAlerts.IUpdate":{"type":"object","properties":{"severity":{"type":"string","description":"Severity level, e.g., 'info', 'warning', 'critical'."},"message":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Detailed alert message describing the issue or event."},"is_resolved":{"type":"boolean","description":"Flag indicating whether the alert has been resolved."},"resolved_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the alert was resolved, null if unresolved."}},"required":[],"description":"Payload for updating a FlexOffice system alert.\n\nIncludes editable properties that inform the alert's status and message."},"IFlexOfficeCustomScripts.IRequest":{"type":"object","properties":{"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional search keyword filtering code, name, description."},"script_language":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by script language, e.g., \"javascript\" or \"python\""},"page":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Limit of records per page."},"sort":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sort order, e.g., name, created_at."},"direction":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort direction, \"asc\" or \"desc\"."}},"required":[],"description":"Request payload for searching and filtering FlexOffice custom scripts with pagination.\n\nAllows filtering by keyword, language, and specifying pagination and sorting options."},"IFlexOfficeCustomScript":{"type":"object","description":"FlexOffice custom logic script module. Stores independent programmable scripts in JavaScript or Python for FlexOffice extensibility. Maintains properties for code, name, description, language, content, and audit timestamps. Supports soft deletion.","properties":{"id":{"type":"string","format":"uuid","description":"Primary unique identifier of the custom script"},"code":{"type":"string","description":"Unique business code identifying the custom script"},"name":{"type":"string","description":"Human-readable name for the custom script"},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description of the script's purpose and usage"},"script_language":{"type":"string","description":"Programming language of the script, such as JavaScript or Python"},"script_content":{"type":"string","description":"Source code content of the custom script"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the script was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the script was last updated"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Deletion timestamp if the script is archived or removed"}},"required":["id","code","name","script_language","script_content","created_at","updated_at"]},"IFlexOfficeCustomScript.ICreate":{"type":"object","properties":{"code":{"type":"string","description":"Unique business identifier for the custom script."},"name":{"type":"string","description":"Human-readable name of the custom script."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Detailed description of the script's purpose and usage."},"script_language":{"type":"string","description":"Programming language of the custom script (e.g., JavaScript, Python)."},"script_content":{"type":"string","description":"Source code content of the custom script."}},"required":["code","name","script_language","script_content"],"description":"Data required to create a new FlexOffice custom script."},"IFlexOfficeCustomScript.IUpdate":{"type":"object","description":"Data to update an existing custom script. All fields are optional except at least one must be present.","properties":{"code":{"type":"string","description":"Unique business code identifying the custom script"},"name":{"type":"string","description":"Human-readable name for the custom script"},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description of the script's purpose and usage"},"script_language":{"type":"string","description":"Programming language of the script, such as JavaScript or Python"},"script_content":{"type":"string","description":"Source code content of the custom script"}},"required":[]},"IFlexOfficeMarketplaceWidget":{"type":"object","description":"FlexOffice marketplace widget entity representing marketplace-available widgets managed for extensibility features. Includes unique widget code, name, version, description, timestamps, and soft deletion support.","properties":{"id":{"type":"string","format":"uuid","description":"Primary unique identifier of the marketplace widget"},"widget_code":{"type":"string","description":"Unique code identifier of the marketplace widget"},"name":{"type":"string","description":"Human-readable name of the marketplace widget"},"version":{"type":"string","description":"Semantic version string following SemVer format"},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description of the marketplace widget"},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp"},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp indicating deprecation or removal"}},"required":["id","widget_code","name","version","created_at","updated_at"]},"IFlexOfficeMarketplaceWidget.ICreate":{"type":"object","description":"Data required to create a new marketplace widget entity in FlexOffice. Includes unique widget code, name, version, and optional description.","properties":{"widget_code":{"type":"string","description":"Unique code identifier of the marketplace widget"},"name":{"type":"string","description":"Human-readable name of the marketplace widget"},"version":{"type":"string","description":"Semantic version string following SemVer format"},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description of the marketplace widget"}},"required":["widget_code","name","version"]},"IFlexOfficeMarketplaceWidget.IRequest":{"type":"object","description":"Parameters for searching and paginating marketplace widgets in FlexOffice. Includes filtering, sorting, and pagination options to narrow down widget lists.","properties":{"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number for pagination"},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Number of items per page limit"},"sortBy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Property name to sort by"},"sortDir":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort direction, ascending ('asc') or descending ('desc')"},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search term to filter widget properties"}},"required":[]},"IFlexOfficeMarketplaceWidget.IUpdate":{"type":"object","properties":{"widget_code":{"type":"string","description":"Unique code identifying the marketplace widget."},"name":{"type":"string","description":"Human-friendly widget name."},"version":{"type":"string","description":"Version string following semantic versioning for the widget."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Detailed description of the widget's functionality and features."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp marking if the widget has been deprecated or removed."}},"required":[],"description":"Properties allowable for updating a FlexOffice marketplace widget. All fields are optional as partial updates are permitted."},"IFlexOfficeWidgetInstallation.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Limit number of records per page."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search text to filter widget installations."},"sortBy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Field name to sort by."},"sortOrder":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort direction, ascending or descending."},"filterByPageId":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter widget installations by page ID."},"filterByWidgetId":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter widget installations by marketplace widget ID."}},"required":[],"description":"Request parameters for searching and paginating widget installations with optional filters and sorting."},"IFlexOfficeWidgetInstallation":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"marketplace_widget_id":{"type":"string","format":"uuid","description":"Referenced marketplace widget ID."},"page_id":{"type":"string","format":"uuid","description":"Associated page ID."},"installation_date":{"type":"string","format":"date-time","description":"Timestamp when the widget was installed on the page."},"configuration_data":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Configuration settings of the installed widget in JSON."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp."}},"required":["id","marketplace_widget_id","page_id","installation_date","created_at","updated_at"],"description":"Entity representing an installation of a marketplace widget on a FlexOffice UI page."},"IFlexOfficeWidgetInstallation.ICreate":{"type":"object","properties":{"marketplace_widget_id":{"type":"string","format":"uuid","description":"Referenced marketplace widget ID."},"page_id":{"type":"string","format":"uuid","description":"Associated page ID."},"installation_date":{"type":"string","format":"date-time","description":"Timestamp when the widget was installed on the page."},"configuration_data":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Configuration settings of the installed widget in JSON."}},"required":["marketplace_widget_id","page_id","installation_date"],"description":"Data required to create a new installation of a marketplace widget on a UI page."},"IFlexOfficeRoleAssignment.IRequest":{"type":"object","properties":{"role_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional filter for role name to search by"},"user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional filter by user ID (UUID)"},"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Optional page number for pagination"},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Optional limit for pagination"}},"required":[],"description":"Request interface for searching and paginating role assignments."},"IFlexOfficeRoleAssignment":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) of the role assignment"},"user_id":{"type":"string","format":"uuid","description":"User ID this role assignment is assigned to"},"role_name":{"type":"string","description":"Role name assigned to the user"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this assignment was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this assignment was last updated"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp, null if assignment is active"}},"required":["id","user_id","role_name","created_at","updated_at"],"description":"Role assignment mapping between users and roles in the FlexOffice system."},"IFlexOfficeRoleAssignment.ICreate":{"type":"object","properties":{"user_id":{"type":"string","format":"uuid","description":"User ID to assign the role to (UUID)"},"role_name":{"type":"string","description":"Name of the role to assign, e.g. 'Admin', 'Editor', 'Viewer'"}},"required":["user_id","role_name"],"description":"Request interface for creating a new role assignment."},"IFlexOfficeWidgetInstallation.IUpdate":{"type":"object","properties":{"marketplace_widget_id":{"type":"string","format":"uuid","description":"Optional unique identifier of the marketplace widget"},"page_id":{"type":"string","format":"uuid","description":"Optional unique identifier of the UI page where widget is installed"},"installation_date":{"type":"string","format":"date-time","description":"Optional installation datetime string in ISO 8601 format"},"configuration_data":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional JSON configuration string or null"}},"required":[],"description":"Request interface for partial update of widget installation."},"IFlexOfficeRoleAssignment.IUpdate":{"type":"object","properties":{"user_id":{"type":"string","format":"uuid","description":"Belonged user's flex_office_admins.id, flex_office_editors.id, or flex_office_viewers.id."},"role_name":{"type":"string","description":"Name of the assigned role, e.g., Admin, Editor, Viewer."}},"description":"Update payload to modify fields of the role assignment.\n\nAllows partial updates enabling changes to `user_id` and/or `role_name`.\n\nAttributes are optional to support patch-like behavior.\n\nBelonged user and role name are required fields when creating, but optional for updates.","required":[]},"IFlexOfficePermission.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Number of items per page."},"permission_key":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by the permission key name."},"status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by status of the permission, e.g., active, disabled."}},"description":"Request payload to search and paginate permission entities.\n\nSupports optional filtering by key name and status.\n\nPagination parameters `page` and `limit` control result set.","required":[]},"IFlexOfficePermission":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"permission_key":{"type":"string","description":"Unique permission identifier key, e.g., 'edit_pages', 'view_reports'."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Detailed description of what this permission grants."},"status":{"type":"string","description":"Status of the permission, e.g., active or disabled."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp for recoverability."}},"required":["id","permission_key","status","created_at","updated_at"],"description":"Permission entity defining distinct access rights or actions.\n\nRepresents system-wide permissions assignable to roles and users.\n\nIncludes state management through active/disabled status and soft deletion support.\n\nCritical for enforcing Role-Based Access Control (RBAC) within the FlexOffice system.\n\nProperties:\n- `id`: Unique ID of the permission.\n- `permission_key`: Unique key string identifying the permission.\n- `description`: Optional detailed information about the permission.\n- `status`: Current state of the permission.\n- `created_at` and `updated_at`: Timestamps for audit and tracking.\n- `deleted_at`: Soft deletion timestamp for logical removal."},"IFlexOfficePermission.ICreate":{"type":"object","properties":{"permission_key":{"type":"string","description":"Unique permission identifier key, e.g., 'edit_pages', 'view_reports'."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Detailed description of what this permission grants."},"status":{"type":"string","description":"Status of the permission, e.g., active or disabled."}},"required":["permission_key","status"],"description":"Payload to create a new permission entity.\n\nRequires unique permission key and status. Description is optional.\n\nSupports creation of system-wide permissions for RBAC enforcement."},"IFlexOfficePermission.IUpdate":{"type":"object","properties":{"permission_key":{"type":"string","description":"Unique permission identifier key, e.g., 'edit_pages', 'view_reports'."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Detailed description of what this permission grants."},"status":{"type":"string","description":"Status of the permission, e.g., active or disabled."}},"required":[],"description":"Partial update model for FlexOffice permissions.\n\nAllows changing permission_key, description, or status individually.\n\n@namespace AccessControl\n@author AutoBE - https://github.com/wrtnlabs/autobe"},"IFlexOfficeTablePermission.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Number of records per page."},"permission_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Referenced permission ID for filtering."},"table_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Name of the database table to filter."}},"required":[],"description":"Request payload for listing flexOffice table permissions with filters.\n\nIncludes pagination and filter fields.\n\n@namespace AccessControl\n@author AutoBE - https://github.com/wrtnlabs/autobe"},"IFlexOfficeTablePermission":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier of the table permission record."},"permission_id":{"type":"string","format":"uuid","description":"Referenced permission's flex_office_permissions.id.\n\nLinks this table permission to a specific permission entity."},"table_name":{"type":"string","description":"Name of the database table this permission applies to."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp.\nNullable; if present, record is considered deleted."}},"required":["id","permission_id","table_name","created_at","updated_at"],"description":"Permissions scoped to specific database tables in the FlexOffice system.\nDefines which permissions apply to which tables. Subsidiary entity\nsupporting granular access control."},"IFlexOfficeTablePermission.ICreate":{"type":"object","properties":{"permission_id":{"type":"string","format":"uuid","description":"Referenced permission's flex_office_permissions.id."},"table_name":{"type":"string","description":"Name of the database table this permission applies to."}},"required":["permission_id","table_name"],"description":"Create model for flexOffice table permission defining permission and target table.\n\n@namespace AccessControl\n@author AutoBE - https://github.com/wrtnlabs/autobe"},"IFlexOfficeTablePermission.IUpdate":{"type":"object","properties":{"permission_id":{"type":"string","format":"uuid","description":"Referenced permission's flex_office_permissions.id.\n\nOptional; used for updating this association."},"table_name":{"type":"string","description":"Name of the database table this permission applies to.\n\nOptional."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp; nullable.\n\nUsed to mark this record as deleted or restored."}},"required":[],"description":"Update operation for FlexOffice table permissions.\n\nAllows updating permission association, table name, or soft deletion status."},"IFlexOfficeColumnPermission":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier of the column permission."},"table_permission_id":{"type":"string","format":"uuid","description":"Referenced table permission's flex_office_table_permissions.id.\n\nForeign key referencing the parent table permission."},"column_name":{"type":"string","description":"Name of the column this permission controls.\n\nSpecifies the database column for which this permission applies."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp.\n\nMarks the record as deleted when not null."}},"required":["id","table_permission_id","column_name","created_at","updated_at"],"description":"Defines fine-grained access control permissions scoped to specific columns within database tables.\n\nThis entity specifies which columns are controlled under a particular table permission context.\n\nIncluded are auditing timestamps and soft deletion capability allowing recoverability and historic tracking."},"IFlexOfficeColumnPermission.IRequest":{"type":"object","properties":{"column_name":{"type":"string","description":"Optional filter by column_name."},"page":{"oneOf":[{"type":"number","minimum":0},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"number","minimum":0},{"type":"null"}],"description":"Page limit (number of items) for pagination."}},"required":[],"description":"Request parameters for searching and paginating column permissions."},"IFlexOfficeColumnPermission.ICreate":{"type":"object","properties":{"table_permission_id":{"type":"string","format":"uuid","description":"Referenced table permission's flex_office_table_permissions.id."},"column_name":{"type":"string","description":"Name of the column this permission controls."}},"required":["table_permission_id","column_name"],"description":"Request body for creating a new column permission."},"IFlexOfficeColumnPermission.IUpdate":{"type":"object","properties":{"column_name":{"type":"string","description":"Name of the column this permission controls.\n\nSpecifies the column name to modify or leave unchanged."}},"required":["column_name"],"description":"Request body to update the name of an existing column permission."},"IFlexOfficeRowPermission.IRequest":{"type":"object","properties":{"filter_condition":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional filter by partial filter_condition string.\n\nUsed to query row permissions matching conditions."},"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Optional pagination parameters indicating page number."},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Optional pagination parameter limiting number of records returned per page."}},"required":[],"description":"Request payload for searching and paginating row permissions.\n\nSupports optional filter_condition matching and pagination parameters like page number and page size.\n\nUsed for flexible querying in administration interfaces."},"IFlexOfficeRowPermission.ICreate":{"type":"object","properties":{"table_permission_id":{"type":"string","format":"uuid","description":"Referenced table permission's flex_office_table_permissions.id.\n\nMust be provided to link this row permission to a table permission."},"filter_condition":{"type":"string","description":"Filter condition as a SQL WHERE clause or expression.\n\nDefines the row-level access filter."}},"required":["table_permission_id","filter_condition"],"description":"Request payload for creating a new row permission.\n\nIncludes mandatory linkage to a table permission and specification of the filter condition to enforce."},"IFlexOfficeRowPermission":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier of the row permission."},"table_permission_id":{"type":"string","format":"uuid","description":"Referenced table permission's flex_office_table_permissions.id.\n\nForeign key to the parent table permission schema."},"filter_condition":{"type":"string","description":"Filter condition as a SQL WHERE clause or expression for row-level access\ncontrol.\n\nDefines the filter expression applied at row level."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp for record recovery.\n\nNullable timestamp indicating soft deleted records."}},"required":["id","table_permission_id","filter_condition","created_at","updated_at"],"description":"Defines row-level access control permissions by associating filtering conditions with table permissions.\n\nThese permissions allow fine-grained control over data visibility at the row level within database tables.\n\nIncludes auditing information and support for soft deletion."},"IFlexOfficeRowPermission.IUpdate":{"type":"object","properties":{"filter_condition":{"type":"string","description":"Filter condition as a SQL WHERE clause or expression for row-level access control."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update."}},"required":["filter_condition","updated_at"],"description":"Update input for FlexOffice Row Permission.\n\nAllows partial update of row-level filtering conditions.\n\nOnly filter_condition and updated_at can be updated.\n\nAll other properties are immutable through this update schema."},"IFlexOfficeSystemSettings.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the system setting."},"key":{"type":"string","description":"Unique configuration key identifier."},"value":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Value associated with the configuration key."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Detailed description of the configuration setting."}},"required":["id","key"],"description":"Summary view of FlexOffice System Settings.\n\nIncludes essential identifiers and display values.\n\nExcludes audit timestamps and soft deletion data for listing efficiency.\n\nThis type is used for list and search responses."},"IFlexOfficeTheme.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the theme."},"name":{"type":"string","description":"Unique name of the theme."}},"required":["id","name"],"description":"Summary view of FlexOffice UI/Page Builder Themes.\n\nIncludes identifying fields for listing themes in dropdowns or search results.\n\nExcludes detailed CSS and audit fields for concise overview.\n\nThis type is optimized for UI selection lists."},"IFlexOfficeAdmin.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the admin user."},"email":{"type":"string","description":"Email address of the admin user."}},"required":["id","email"],"description":"Summary view of FlexOffice administrator user with core identifying fields."},"IFlexOfficeEditor.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the editor."},"name":{"type":"string","description":"Editor user's full name."},"email":{"type":"string","description":"Editor user's email."}},"required":["id","name","email"],"description":"Summary data for editor users."},"IFlexOfficeViewer.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Identifier of viewer user."},"name":{"type":"string","description":"Viewer full name."},"email":{"type":"string","description":"Viewer email."}},"required":["id","name","email"],"description":"Summary view of viewer user accounts."},"IFlexOfficePage.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the UI page as UUID.\n\nRepresents a user-created UI page record from FlexOffice."},"name":{"type":"string","description":"Name/title of the UI page.\n\nDisplay name shown to users listing UI pages."},"status":{"type":"string","description":"Current status of the page (e.g., draft, published).\n\nImportant for lifecycle management."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the page was created, ISO 8601 date-time."}},"required":["id","name","status","created_at"],"description":"Summary representation of a UI page including ID, name, status, and creation timestamp."},"IFlexOfficeWidget.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the widget as UUID.\n\nRepresents a UI widget placed on a page."},"widget_type":{"type":"string","description":"Type of widget, e.g., table, chart, filter, etc.\n\nDefines what the widget displays or controls."},"name":{"type":"string","description":"Widget name or label for display."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of widget creation in ISO 8601 format."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last widget update in ISO 8601 format."}},"required":["id","widget_type","name","created_at","updated_at"],"description":"Summary representation of FlexOffice UI widget including ID, type, name, and timestamps."},"IFlexOfficeWidgetScript.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"script_type":{"type":"string","description":"Type of scripting language, e.g., javascript, python."},"created_at":{"type":"string","format":"date-time","description":"Script creation timestamp."}},"required":["id","script_type","created_at"],"description":"Summary of a widget script entity for FlexOffice UI widgets, representing key metadata for display and identification."},"IFlexOfficePageTheme.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"name":{"type":"string","description":"Theme name to identify and select for pages."}},"required":["id","name"],"description":"Summary of UI/Page Builder theme entity in FlexOffice, providing key identification properties suitable for list displays."},"IFlexOfficePageVersion.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"version_number":{"type":"integer","description":"Sequential version number for the snapshot."},"created_at":{"type":"string","format":"date-time","description":"Version creation timestamp."}},"required":["id","version_number","created_at"],"description":"Summary representation of UI page version entity capturing essential snapshot metadata for version control."},"IFlexOfficeDataSource.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"name":{"type":"string","description":"Human-readable unique name for the data source."},"type":{"type":"string","description":"Type category of the data source, such as 'mysql', 'postgresql', 'google_sheet', or 'excel'."},"is_active":{"type":"boolean","description":"Flag indicating whether the data source is active and available for synchronization."}},"required":["id","name","type","is_active"],"description":"Summary of external data source configuration for FlexOffice, capturing key properties for list views including name, type, and active status."},"IFlexOfficeDataSourceCredential.ISummary":{"type":"object","properties":{"id":{"type":"string","description":"Unique identifier of the credential."},"credential_type":{"type":"string","description":"Type of the credential."},"expires_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Expiration date/time of the credential (nullable)."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp for the credential, nullable."}},"required":["id","credential_type","expires_at","created_at","updated_at","deleted_at"],"description":"Represents summarized information of data source credential.\n\nContains limited fields for overview and listing purposes."},"IFlexOfficeExternalSheet.ISummary":{"type":"object","properties":{"id":{"type":"string","description":"Unique identifier."},"file_name":{"type":"string","description":"Original filename of the sheet."},"file_url":{"type":"string","description":"URL location to access the sheet remotely."},"sheet_count":{"type":"integer","description":"Number of sheets in the document."},"last_synced_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of last synchronization, nullable."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp, nullable."}},"required":["id","file_name","file_url","sheet_count","last_synced_at","created_at","updated_at","deleted_at"],"description":"Summarized information for external sheet listings."},"IFlexOfficeDataSourceLog.ISummary":{"type":"object","properties":{"id":{"type":"string","description":"Unique identifier of the log entry."},"log_level":{"type":"string","description":"Log severity level."},"timestamp":{"type":"string","format":"date-time","description":"Timestamp of the log."},"message":{"type":"string","description":"Brief log message."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Update timestamp."}},"required":["id","log_level","timestamp","message","created_at","updated_at"],"description":"Summary information for data source logs."},"IFlexOfficePageEditor.ISummary":{"type":"object","properties":{"id":{"type":"string","description":"Unique identifier of the page editor session."},"page_id":{"type":"string","format":"uuid","description":"Associated UI page ID."},"editor_id":{"type":"string","format":"uuid","description":"Editor user ID."}},"required":["id","page_id","editor_id"],"description":"Summarized information for page editor session listings."},"IFlexOfficePageComment.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the page comment."},"content":{"type":"string","description":"The text content of the comment."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the comment was created."},"editor_id":{"type":"string","format":"uuid","description":"Referenced editor user's ID."}},"required":["id","content","created_at","editor_id"],"description":"Summary information of a FlexOffice page comment for list views. Includes essential comment ID, content snippet, creation timestamp, and editor reference."},"IFlexOfficeEditConflicts.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the edit conflict."},"page_id":{"type":"string","format":"uuid","description":"Referenced page ID where conflict occurred."},"editor_id":{"type":"string","format":"uuid","description":"Referenced editor user who caused the conflict."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the conflict record was created."}},"required":["id","page_id","editor_id","created_at"],"description":"Summary information of an edit conflict in FlexOffice collaboration environment. Contains conflict ID, page and editor references, and creation timestamp."},"IFlexOfficeWidgetKpi.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the KPI widget."},"flex_office_widget_id":{"type":"string","format":"uuid","description":"Linked UI widget ID presenting the KPI data."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of KPI widget creation."}},"required":["id","flex_office_widget_id","created_at"],"description":"Summary information of a KPI widget. Includes IDs and creation date for listing and reference purposes."},"IFlexOfficeFilterCondition.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the filter condition."},"flex_office_chart_id":{"type":"string","format":"uuid","description":"Chart ID this filter condition belongs to."},"enabled":{"type":"boolean","description":"Flag indicating if the filter condition is active."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of filter condition creation."}},"required":["id","flex_office_chart_id","enabled","created_at"],"description":"Summary information of a filter condition used in FlexOffice analytics charts. Includes IDs, enabled flag, and creation timestamp."},"IFlexOfficeExportLog.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the export log entry"},"export_type":{"type":"string","description":"Type/format of the export such as CSV, Excel, PDF"},"target_object":{"type":"string","description":"Identifier of the exported data or report, e.g., chart or dashboard ID"},"status":{"type":"string","description":"Result of the export operation, e.g., success, failure"},"executed_by_user_id":{"type":"string","format":"uuid","description":"User ID who performed the export operation"},"executed_at":{"type":"string","format":"date-time","description":"Timestamp when the export was executed"}},"required":["id","export_type","target_object","status","executed_by_user_id","executed_at"],"description":"Summary information about FlexOffice export log entries"},"IFlexOfficeAuditLog.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the audit log entry"},"event_type":{"type":"string","description":"Type/category of the audit event, e.g., 'login', 'permission_change', 'data_access'"},"actor_type":{"type":"string","description":"Role or type of the actor performing the action, e.g., 'admin', 'editor', 'viewer'"},"actor_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Unique identifier of the user who performed the action; nullable if system generated event"},"target_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Type/category of the target entity affected by the event, e.g., 'page', 'data_source'"},"target_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Unique identifier of the target entity involved in the event"},"action":{"type":"string","description":"Describes the specific action performed, e.g., 'create', 'update', 'delete'"},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description of the audit event"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the audit event was recorded"}},"required":["id","event_type","actor_type","action","created_at"],"description":"Summary information about FlexOffice audit log entries"},"IFlexOfficeUserActivityLog.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the user activity log entry"},"user_id":{"type":"string","format":"uuid","description":"Referenced user's unique identifier"},"action_type":{"type":"string","description":"Type/category of the action performed by the user, e.g., 'login', 'edit_page', 'view_dashboard'"},"action_details":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional details providing additional context about the user's action"},"ip_address":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"IP address from which the user performed the action"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the user action was recorded"}},"required":["id","user_id","action_type","created_at"],"description":"Summary information about FlexOffice user activity log entries"},"IFlexOfficeSystemAlert.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the system alert entry"},"severity":{"type":"string","description":"Alert severity level, e.g., 'info', 'warning', 'critical'"},"message":{"type":"string","description":"Detailed alert message describing the issue or event"},"is_resolved":{"type":"boolean","description":"Flag indicating whether the alert has been resolved"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the alert was generated"}},"required":["id","severity","message","is_resolved","created_at"],"description":"Summary information about FlexOffice system alerts"},"IFlexOfficeCustomScript.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"code":{"type":"string","description":"Unique business identifier for the custom script."},"name":{"type":"string","description":"Human-readable name of the custom script."},"description":{"oneOf":[{"type":"string","description":"Detailed description of the script's purpose and usage."},{"type":"null"}],"description":"Detailed description of the script's purpose and usage."},"script_language":{"type":"string","description":"Programming language of the custom script (e.g., JavaScript, Python)."},"created_at":{"type":"string","format":"date-time","description":"Time of script creation."}},"required":["id","code","name","script_language","created_at"],"description":"Summary information for FlexOffice custom scripts including identity and metadata, used for listings and brief views."},"IFlexOfficeMarketplaceWidget.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"widget_code":{"type":"string","description":"Unique code identifying the marketplace widget."},"name":{"type":"string","description":"Human-friendly widget name."},"version":{"type":"string","description":"Version string following semantic versioning for the widget."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the widget was created in the marketplace."}},"required":["id","widget_code","name","version","created_at"],"description":"Summary information for FlexOffice marketplace widgets including identity and versioning data, used for listings."},"IFlexOfficeWidgetInstallation.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"marketplace_widget_id":{"type":"string","format":"uuid","description":"Referenced marketplace widget ID."},"page_id":{"type":"string","format":"uuid","description":"Associated UI page ID."},"installation_date":{"type":"string","format":"date-time","description":"Timestamp when the widget was installed on the page."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."}},"required":["id","marketplace_widget_id","page_id","installation_date","created_at"],"description":"Summary information for widget installations on UI pages including references and timestamps."},"IFlexOfficeRoleAssignment.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"user_id":{"type":"string","format":"uuid","description":"Linked user ID assigned this role."},"role_name":{"type":"string","description":"Name of the assigned role."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."}},"required":["id","user_id","role_name","created_at"],"description":"Summary information for FlexOffice role assignments including user links and role names."},"IFlexOfficeTablePermission.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key identifier for the table permission record.\n\nThis unique UUID distinguishes each table permission entry in the system.\n\nUsed to reference this specific permission assignment in APIs and internal logic."},"permission_id":{"type":"string","format":"uuid","description":"Foreign key referencing the associated permission entity.\n\nLinks the table permission to a defined permission key representing an access right.\n\nCritical for enforcing security policies on specified tables."},"table_name":{"type":"string","description":"Name of the database table to which the permission applies.\n\nThis string identifies the target table within the FlexOffice system database.\n\nSupports precise control over which tables access permissions govern."},"created_at":{"type":"string","format":"date-time","description":"Timestamp marking when this table permission record was created.\n\nServes auditing purposes and chronological tracking of permission assignments."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp marking the last update time of this table permission record.\n\nIndicates recent modifications or validation checks on the permission entry."}},"required":["id","permission_id","table_name","created_at","updated_at"],"description":"Summary information of a table permission entity representing the association between a permission key and a specific database table.\n\nThis summary provides essential identifiers and relevant audit timestamps for listing and management purposes.\n\nIt enables administrators to view concise details about table-level access control assignments."},"IFlexOfficeColumnPermission.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key UUID for the column permission record.\n\nUniquely identifies this column-level permission within the system.\n\nUsed for referencing and management operations."},"table_permission_id":{"type":"string","format":"uuid","description":"Foreign key linking this column permission to a parent table permission record.\n\nEstablishes the hierarchical association indicating the table context of this column permission.\n\nEnsures enforcement of column-level access controls within the scope of table permissions."},"column_name":{"type":"string","description":"Name of the database column to which this permission applies.\n\nThis string specifies the exact column within the table for granular access control.\n\nKey to defining fine-grained security restrictions."},"created_at":{"type":"string","format":"date-time","description":"Timestamp recording when the column permission entry was created.\n\nImportant for audit trails and historical review of access control changes."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp indicating the last modification time of this column permission.\n\nReflects recent updates or validation activities related to access rights."}},"required":["id","table_permission_id","column_name","created_at","updated_at"],"description":"Summary of a column permission entity linking a permission to a specific column in a database table.\n\nProvides essential identifiers and auditing timestamps for managing granular access control at the column level.\n\nSupports administrative overview and editing of column-specific permissions."},"IFlexOfficeRowPermission.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary UUID identifier for the row-level permission record.\n\nServes as the main key for managing row permissions within the system.\n\nReferenced in access control enforcement and administrative APIs."},"table_permission_id":{"type":"string","format":"uuid","description":"Associative foreign key linking this row permission to its parent table permission.\n\nDefines the context in which the row-level filter condition applies.\n\nCrucial for implementing row-based data filtering and security."},"filter_condition":{"type":"string","description":"SQL expression or filter that determines access control at the row level.\n\nDefines the logical condition filtering rows visible or accessible to the user.\n\nEssential for fine-grained data access and compliance enforcement."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the row permission was originally created.\n\nRecords when the access control policy was first applied to this filter."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the most recent update to the row permission.\n\nIndicates when filtering rules or conditions were last modified to adapt to business needs."}},"required":["id","table_permission_id","filter_condition","created_at","updated_at"],"description":"Summary information for a row-level permission entity representing access control filter conditions applied to a specific database table.\n\nThis summary aids in administration and enforcement of granular row-based security policies within FlexOffice."}}}}