import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAuctionPlatformTeamLeaders } from "../../../../structures/IAuctionPlatformTeamLeaders";

/**
 * Create a new auction team leader associated with a member account.
 *
 * Create a new auction team leader, representing an authenticated member user
 * authorized to participate in auctions by bidding. The operation requires a
 * member ID that associates the team leader to a user account in the system.
 *
 * This API enforces role-based access controls, allowing only users with the
 * 'admin' role to perform this action.
 *
 * The team leader record holds data including point balances used for bidding
 * and timestamps for creation and updates.
 *
 * Related operations include updating or deleting team leader records.
 *
 * On success, the created team leader entity is returned, including the
 * assigned available points and member association.
 *
 * Errors may occur if the member ID is invalid or already assigned as a team
 * leader.
 *
 * @param props.connection
 * @param props.body Data required to create a team leader including member
 *   association
 * @path /auctionPlatform/admin/teamLeaders
 * @accessor api.functional.auctionPlatform.admin.teamLeaders.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Data required to create a team leader including member association */
    body: IAuctionPlatformTeamLeaders.ICreate;
  };
  export type Body = IAuctionPlatformTeamLeaders.ICreate;
  export type Response = IAuctionPlatformTeamLeaders;

  export const METADATA = {
    method: "POST",
    path: "/auctionPlatform/admin/teamLeaders",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auctionPlatform/admin/teamLeaders";
  export const random = (): IAuctionPlatformTeamLeaders =>
    typia.random<IAuctionPlatformTeamLeaders>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update auction team leader details by ID.
 *
 * Update an auction team leader by ID. This operation updates mutable fields
 * such as available points, enabling adjustment of bidding power.
 *
 * Authorization is restricted to administrators.
 *
 * The operation validates the target team leader ID and returns the updated
 * entity.
 *
 * Related to create and delete operations on team leaders.
 *
 * Errors include invalid ID or data validation failures.
 *
 * @param props.connection
 * @param props.teamLeaderId Unique identifier of the target team leader
 * @param props.body Data used to update the team leader's properties
 * @path /auctionPlatform/admin/teamLeaders/:teamLeaderId
 * @accessor api.functional.auctionPlatform.admin.teamLeaders.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target team leader */
    teamLeaderId: string & tags.Format<"uuid">;

    /** Data used to update the team leader's properties */
    body: IAuctionPlatformTeamLeaders.IUpdate;
  };
  export type Body = IAuctionPlatformTeamLeaders.IUpdate;
  export type Response = IAuctionPlatformTeamLeaders;

  export const METADATA = {
    method: "PUT",
    path: "/auctionPlatform/admin/teamLeaders/:teamLeaderId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/auctionPlatform/admin/teamLeaders/${encodeURIComponent(props.teamLeaderId ?? "null")}`;
  export const random = (): IAuctionPlatformTeamLeaders =>
    typia.random<IAuctionPlatformTeamLeaders>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("teamLeaderId")(() => typia.assert(props.teamLeaderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete an auction team leader by ID.
 *
 * Delete an auction team leader by ID. This operation performs a permanent
 * removal of the team leader record and associated data.
 *
 * Authorization is required (admin roles).
 *
 * No response is returned upon success.
 *
 * Related operations include create and update team leader endpoints.
 *
 * Errors include invalid ID and deletion violations.
 *
 * @param props.connection
 * @param props.teamLeaderId Unique identifier of the target team leader
 * @path /auctionPlatform/admin/teamLeaders/:teamLeaderId
 * @accessor api.functional.auctionPlatform.admin.teamLeaders.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target team leader */
    teamLeaderId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/auctionPlatform/admin/teamLeaders/:teamLeaderId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/auctionPlatform/admin/teamLeaders/${encodeURIComponent(props.teamLeaderId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("teamLeaderId")(() => typia.assert(props.teamLeaderId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
