import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAuctionPlatformRateLimit } from "../../../../structures/IAuctionPlatformRateLimit";
import { IPageIAuctionPlatformRateLimit } from "../../../../structures/IPageIAuctionPlatformRateLimit";
import { IAuctionPlatformAuctionPlatformRateLimit } from "../../../../structures/IAuctionPlatformAuctionPlatformRateLimit";

/**
 * Create a new auction platform rate limit configuration. Components or
 * services can have specified max requests per minute, hour, and day.
 *
 * Request body must include component name and numeric request limits.
 *
 * Admin role required for creation.
 *
 * Response contains the created rate limit details including timestamps.
 *
 * Validation errors or permission errors are returned as needed.
 *
 * @param props.connection
 * @param props.body Information to create a new rate limit configuration
 * @path /auctionPlatform/admin/auctionPlatformRateLimits
 * @accessor api.functional.auctionPlatform.admin.auctionPlatformRateLimits.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information to create a new rate limit configuration */
    body: IAuctionPlatformRateLimit.ICreate;
  };
  export type Body = IAuctionPlatformRateLimit.ICreate;
  export type Response = IAuctionPlatformRateLimit;

  export const METADATA = {
    method: "POST",
    path: "/auctionPlatform/admin/auctionPlatformRateLimits",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auctionPlatform/admin/auctionPlatformRateLimits";
  export const random = (): IAuctionPlatformRateLimit =>
    typia.random<IAuctionPlatformRateLimit>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve auction platform rate limit configurations.
 *
 * Retrieve a filtered, paginated list of auction platform rate limit
 * configurations. These rate limits govern request frequency to components of
 * the auction platform, such as API endpoints or services, to protect system
 * stability and prevent abuse.
 *
 * The patch request body contains search criteria including component name and
 * maximum requests per time intervals. The response body contains a paginated
 * list of rate limit configurations matching the criteria.
 *
 * Only authorized admin users can access this endpoint due to sensitivity of
 * rate limit configurations.
 *
 * Errors may occur if the request body is malformed or authorization fails.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for rate limit
 *   filtering
 * @path /auctionPlatform/admin/auctionPlatformRateLimits
 * @accessor api.functional.auctionPlatform.admin.auctionPlatformRateLimits.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for rate limit filtering */
    body: IAuctionPlatformRateLimit.IRequest;
  };
  export type Body = IAuctionPlatformRateLimit.IRequest;
  export type Response = IPageIAuctionPlatformRateLimit;

  export const METADATA = {
    method: "PATCH",
    path: "/auctionPlatform/admin/auctionPlatformRateLimits",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auctionPlatform/admin/auctionPlatformRateLimits";
  export const random = (): IPageIAuctionPlatformRateLimit =>
    typia.random<IPageIAuctionPlatformRateLimit>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve an auction platform rate limit configuration by ID.
 *
 * Retrieve detailed auction platform rate limit configuration by ID. The rate
 * limit policies specify how many requests per unit time are allowed to
 * components or services, protecting system stability.
 *
 * This operation requires `id` path parameter identifying the target rate limit
 * policy record by UUID.
 *
 * Admin authorization is required.
 *
 * Errors include not found or unauthorized access.
 *
 * Successful response returns the rate limit record details including component
 * name and thresholds.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target auction platform rate limit
 *   record
 * @path /auctionPlatform/admin/auctionPlatformRateLimits/:id
 * @accessor api.functional.auctionPlatform.admin.auctionPlatformRateLimits.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target auction platform rate limit record */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IAuctionPlatformRateLimit;

  export const METADATA = {
    method: "GET",
    path: "/auctionPlatform/admin/auctionPlatformRateLimits/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/auctionPlatform/admin/auctionPlatformRateLimits/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IAuctionPlatformRateLimit =>
    typia.random<IAuctionPlatformRateLimit>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing auction platform rate limit by ID.
 *
 * Update the specified auction platform rate limit record identified by its
 * UUID. The operation accepts full updates to the rate limiting parameters such
 * as maximum requests per minute, hour, and day for the specified component.
 *
 * Security considerations require that only authorized administrators can
 * perform this operation to prevent misuse or accidental service disruptions.
 * The API enforces data validation to ensure all request values comply with
 * expected ranges.
 *
 * The underlying database entity is defined in the auction_platform_rate_limits
 * table with unique component_name constraints.
 *
 * Successful updates return the updated rate limit record with all relevant
 * details including creation and last modified timestamps.
 *
 * Errors will be returned for invalid IDs, unauthorized access, or malformed
 * requests.
 *
 * @param props.connection
 * @param props.id Unique identifier of the rate limit record to update
 * @param props.body Updated data for auctionPlatformRateLimits record
 * @path /auctionPlatform/admin/auctionPlatformRateLimits/:id
 * @accessor api.functional.auctionPlatform.admin.auctionPlatformRateLimits.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the rate limit record to update */
    id: string & tags.Format<"uuid">;

    /** Updated data for auctionPlatformRateLimits record */
    body: IAuctionPlatformAuctionPlatformRateLimit.IUpdate;
  };
  export type Body = IAuctionPlatformAuctionPlatformRateLimit.IUpdate;
  export type Response = IAuctionPlatformAuctionPlatformRateLimit;

  export const METADATA = {
    method: "PUT",
    path: "/auctionPlatform/admin/auctionPlatformRateLimits/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/auctionPlatform/admin/auctionPlatformRateLimits/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IAuctionPlatformAuctionPlatformRateLimit =>
    typia.random<IAuctionPlatformAuctionPlatformRateLimit>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an auction platform rate limit by ID.
 *
 * Permanently remove the auction platform rate limit with the specified ID.
 * This action deletes the rate limit policy from the system, removing any
 * restrictions on request frequency for the associated component.
 *
 * This operation requires administrator privileges due to its potential impact
 * on system stability.
 *
 * There is no response body as the record is fully removed from the database.
 *
 * @param props.connection
 * @param props.id Unique identifier of the rate limit record to delete
 * @path /auctionPlatform/admin/auctionPlatformRateLimits/:id
 * @accessor api.functional.auctionPlatform.admin.auctionPlatformRateLimits.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the rate limit record to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/auctionPlatform/admin/auctionPlatformRateLimits/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/auctionPlatform/admin/auctionPlatformRateLimits/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
