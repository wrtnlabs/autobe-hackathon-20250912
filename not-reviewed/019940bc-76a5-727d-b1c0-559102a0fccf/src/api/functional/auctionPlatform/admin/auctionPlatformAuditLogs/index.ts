import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAuctionPlatformAuctionPlatformAuditLog } from "../../../../structures/IAuctionPlatformAuctionPlatformAuditLog";
import { IPageIAuctionPlatformAuctionPlatformAuditLog } from "../../../../structures/IPageIAuctionPlatformAuctionPlatformAuditLog";

/**
 * Search and retrieve auction platform audit logs.
 *
 * Retrieve a filtered and paginated list of auction platform audit logs. This
 * operation allows searching through the audit logs using provided criteria
 * such as user ID, action type, and date ranges.
 *
 * Audit logs provide essential insight into critical system operations, user
 * activities, and compliance monitoring.
 *
 * Authorization ensures only authorized personnel with admin role can access
 * comprehensive audit details.
 *
 * Supports pagination and sorting to handle large volumes of log data
 * efficiently.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for audit log
 *   filtering
 * @path /auctionPlatform/admin/auctionPlatformAuditLogs
 * @accessor api.functional.auctionPlatform.admin.auctionPlatformAuditLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for audit log filtering */
    body: IAuctionPlatformAuctionPlatformAuditLog.IRequest;
  };
  export type Body = IAuctionPlatformAuctionPlatformAuditLog.IRequest;
  export type Response = IPageIAuctionPlatformAuctionPlatformAuditLog;

  export const METADATA = {
    method: "PATCH",
    path: "/auctionPlatform/admin/auctionPlatformAuditLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auctionPlatform/admin/auctionPlatformAuditLogs";
  export const random = (): IPageIAuctionPlatformAuctionPlatformAuditLog =>
    typia.random<IPageIAuctionPlatformAuctionPlatformAuditLog>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed auction platform audit log by ID.
 *
 * Retrieve detailed information for a specific auction platform audit log entry
 * identified by its UUID. This operation returns comprehensive data including
 * the performed action, user involved, detailed context, and creation
 * timestamp.
 *
 * Access is restricted to administrators to ensure data confidentiality and
 * integrity.
 *
 * Error handling includes responses for invalid or non-existent IDs.
 *
 * @param props.connection
 * @param props.id Unique identifier of the audit log entry
 * @path /auctionPlatform/admin/auctionPlatformAuditLogs/:id
 * @accessor api.functional.auctionPlatform.admin.auctionPlatformAuditLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the audit log entry */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IAuctionPlatformAuctionPlatformAuditLog;

  export const METADATA = {
    method: "GET",
    path: "/auctionPlatform/admin/auctionPlatformAuditLogs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/auctionPlatform/admin/auctionPlatformAuditLogs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IAuctionPlatformAuctionPlatformAuditLog =>
    typia.random<IAuctionPlatformAuctionPlatformAuditLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
