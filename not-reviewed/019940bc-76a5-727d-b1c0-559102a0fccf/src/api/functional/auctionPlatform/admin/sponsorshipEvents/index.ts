import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAuctionPlatformSponsorshipEvent } from "../../../../structures/IAuctionPlatformSponsorshipEvent";
import { IPageIAuctionPlatformSponsorshipEvent } from "../../../../structures/IPageIAuctionPlatformSponsorshipEvent";

/**
 * Create a new sponsorship event record.
 *
 * Creates a new sponsorship event record capturing donation information during
 * an auction room. The record includes donor name, donation amount, optional
 * message, and linkage to the auction room and optionally the donating member
 * (team leader). The unique Chijijik sponsorship ID prevents duplication.
 * Animations triggered by the sponsorship can be flagged.
 *
 * Security considerations revolve around appropriate authorization for creating
 * sponsorship events, usually limited to system components or admin roles
 * interfacing with the Chijijik API or authenticated processes.
 *
 * This operation interacts with the auction_platform_sponsorship_events table,
 * and successful creation results in immediate availability for real-time
 * auction bid updates and overlay broadcasts.
 *
 * Validation rules require the chijijik_sponsorship_id to be unique and
 * donation_amount to be a positive float.
 *
 * Related operations include updating or deleting sponsorship events.
 *
 * Error handling includes rejecting duplicates or invalid donation amounts.
 *
 * @param props.connection
 * @param props.body Sponsorship event creation data
 * @path /auctionPlatform/admin/sponsorshipEvents
 * @accessor api.functional.auctionPlatform.admin.sponsorshipEvents.createSponsorshipEvent
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createSponsorshipEvent(
  connection: IConnection,
  props: createSponsorshipEvent.Props,
): Promise<createSponsorshipEvent.Response> {
  return true === connection.simulate
    ? createSponsorshipEvent.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createSponsorshipEvent.METADATA,
          path: createSponsorshipEvent.path(),
          status: null,
        },
        props.body,
      );
}
export namespace createSponsorshipEvent {
  export type Props = {
    /** Sponsorship event creation data */
    body: IAuctionPlatformSponsorshipEvent.ICreate;
  };
  export type Body = IAuctionPlatformSponsorshipEvent.ICreate;
  export type Response = IAuctionPlatformSponsorshipEvent;

  export const METADATA = {
    method: "POST",
    path: "/auctionPlatform/admin/sponsorshipEvents",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auctionPlatform/admin/sponsorshipEvents";
  export const random = (): IAuctionPlatformSponsorshipEvent =>
    typia.random<IAuctionPlatformSponsorshipEvent>();
  export const simulate = (
    connection: IConnection,
    props: createSponsorshipEvent.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createSponsorshipEvent.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search sponsorship events with filters and pagination.
 *
 * Search and retrieve paginated sponsorship event records.
 *
 * This operation supports filtering by donor name, auction room, date ranges,
 * and more to allow administrators to monitor sponsorship activities within the
 * auction platform.
 *
 * Response provides a paginated list of sponsorship event summaries including
 * donor, amount, message, and timestamps.
 *
 * Authorization is restricted to admin roles due to sensitivity of sponsorship
 * financial data.
 *
 * Request body defines filtering and pagination parameters to efficiently query
 * the dataset.
 *
 * @param props.connection
 * @param props.body Filtering and pagination criteria for sponsorship events
 * @path /auctionPlatform/admin/sponsorshipEvents
 * @accessor api.functional.auctionPlatform.admin.sponsorshipEvents.searchSponsorshipEvents
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function searchSponsorshipEvents(
  connection: IConnection,
  props: searchSponsorshipEvents.Props,
): Promise<searchSponsorshipEvents.Response> {
  return true === connection.simulate
    ? searchSponsorshipEvents.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...searchSponsorshipEvents.METADATA,
          path: searchSponsorshipEvents.path(),
          status: null,
        },
        props.body,
      );
}
export namespace searchSponsorshipEvents {
  export type Props = {
    /** Filtering and pagination criteria for sponsorship events */
    body: IAuctionPlatformSponsorshipEvent.IRequest;
  };
  export type Body = IAuctionPlatformSponsorshipEvent.IRequest;
  export type Response = IPageIAuctionPlatformSponsorshipEvent.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/auctionPlatform/admin/sponsorshipEvents",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auctionPlatform/admin/sponsorshipEvents";
  export const random = (): IPageIAuctionPlatformSponsorshipEvent.ISummary =>
    typia.random<IPageIAuctionPlatformSponsorshipEvent.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: searchSponsorshipEvents.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: searchSponsorshipEvents.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a sponsorship event by ID.
 *
 * Get detailed information about a specific sponsorship event by its unique ID.
 *
 * This operation returns all relevant fields including donor name, donation
 * amount, message, animation status, related auction room and member
 * references, and timestamps.
 *
 * Only admins are authorized to access this financial and personally
 * identifiable information.
 *
 * Path parameter includes the sponsorship event UUID.
 *
 * @param props.connection
 * @param props.id Unique identifier of the sponsorship event
 * @path /auctionPlatform/admin/sponsorshipEvents/:id
 * @accessor api.functional.auctionPlatform.admin.sponsorshipEvents.atSponsorshipEvent
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atSponsorshipEvent(
  connection: IConnection,
  props: atSponsorshipEvent.Props,
): Promise<atSponsorshipEvent.Response> {
  return true === connection.simulate
    ? atSponsorshipEvent.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atSponsorshipEvent.METADATA,
          path: atSponsorshipEvent.path(props),
          status: null,
        },
      );
}
export namespace atSponsorshipEvent {
  export type Props = {
    /** Unique identifier of the sponsorship event */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IAuctionPlatformSponsorshipEvent;

  export const METADATA = {
    method: "GET",
    path: "/auctionPlatform/admin/sponsorshipEvents/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/auctionPlatform/admin/sponsorshipEvents/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IAuctionPlatformSponsorshipEvent =>
    typia.random<IAuctionPlatformSponsorshipEvent>();
  export const simulate = (
    connection: IConnection,
    props: atSponsorshipEvent.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atSponsorshipEvent.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a sponsorship event by ID.
 *
 * Updates an existing sponsorship event by id. Allows modification of donor
 * name, donation amount, message, animation status, and links to auction room
 * and member. The record's updated_at timestamp is managed automatically.
 *
 * Security enforces admin role restriction.
 *
 * This operation works on the auction_platform_sponsorship_events database
 * table, ensuring auction sponsorship data remains consistent and up to date.
 *
 * Errors include targeting non-existent records or violating uniqueness
 * constraints.
 *
 * @param props.connection
 * @param props.id Unique identifier of the sponsorship event to update
 * @param props.body Sponsorship event update data
 * @path /auctionPlatform/admin/sponsorshipEvents/:id
 * @accessor api.functional.auctionPlatform.admin.sponsorshipEvents.updateSponsorshipEvent
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateSponsorshipEvent(
  connection: IConnection,
  props: updateSponsorshipEvent.Props,
): Promise<updateSponsorshipEvent.Response> {
  return true === connection.simulate
    ? updateSponsorshipEvent.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateSponsorshipEvent.METADATA,
          path: updateSponsorshipEvent.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateSponsorshipEvent {
  export type Props = {
    /** Unique identifier of the sponsorship event to update */
    id: string & tags.Format<"uuid">;

    /** Sponsorship event update data */
    body: IAuctionPlatformSponsorshipEvent.IUpdate;
  };
  export type Body = IAuctionPlatformSponsorshipEvent.IUpdate;
  export type Response = IAuctionPlatformSponsorshipEvent;

  export const METADATA = {
    method: "PUT",
    path: "/auctionPlatform/admin/sponsorshipEvents/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/auctionPlatform/admin/sponsorshipEvents/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IAuctionPlatformSponsorshipEvent =>
    typia.random<IAuctionPlatformSponsorshipEvent>();
  export const simulate = (
    connection: IConnection,
    props: updateSponsorshipEvent.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateSponsorshipEvent.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a sponsorship event by ID.
 *
 * Deletes a sponsorship event record permanently identified by the given unique
 * ID.
 *
 * Security is enforced to limit this operation to admin users.
 *
 * Once deleted, the sponsorship event data is removed from all auction state
 * and overlays permanently. There is no recovery.
 *
 * Errors include attempts to delete non-existent IDs.
 *
 * @param props.connection
 * @param props.id Unique identifier of the sponsorship event to delete
 * @path /auctionPlatform/admin/sponsorshipEvents/:id
 * @accessor api.functional.auctionPlatform.admin.sponsorshipEvents.eraseSponsorshipEvent
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseSponsorshipEvent(
  connection: IConnection,
  props: eraseSponsorshipEvent.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseSponsorshipEvent.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseSponsorshipEvent.METADATA,
          path: eraseSponsorshipEvent.path(props),
          status: null,
        },
      );
}
export namespace eraseSponsorshipEvent {
  export type Props = {
    /** Unique identifier of the sponsorship event to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/auctionPlatform/admin/sponsorshipEvents/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/auctionPlatform/admin/sponsorshipEvents/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseSponsorshipEvent.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseSponsorshipEvent.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
