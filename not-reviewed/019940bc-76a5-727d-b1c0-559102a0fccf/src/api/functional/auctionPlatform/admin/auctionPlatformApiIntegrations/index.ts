import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAuctionPlatformApiIntegrations } from "../../../../structures/IAuctionPlatformApiIntegrations";
import { IPageIAuctionPlatformApiIntegrations } from "../../../../structures/IPageIAuctionPlatformApiIntegrations";

/**
 * Create a new auction platform API integration configuration.
 *
 * Create a new API integration configuration for the auction platform. Requires
 * administrative privileges.
 *
 * The request body must contain all required fields for creation including
 * unique name, API key credentials, endpoint URL, and active flag.
 *
 * This operation is critical for expanding platform connectivity to external
 * services.
 *
 * Ensures secure and controlled addition of API configurations.
 *
 * @param props.connection
 * @param props.body Information required to create a new API integration
 *   configuration
 * @path /auctionPlatform/admin/auctionPlatformApiIntegrations
 * @accessor api.functional.auctionPlatform.admin.auctionPlatformApiIntegrations.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information required to create a new API integration configuration */
    body: IAuctionPlatformApiIntegrations.ICreate;
  };
  export type Body = IAuctionPlatformApiIntegrations.ICreate;
  export type Response = IAuctionPlatformApiIntegrations;

  export const METADATA = {
    method: "POST",
    path: "/auctionPlatform/admin/auctionPlatformApiIntegrations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/auctionPlatform/admin/auctionPlatformApiIntegrations";
  export const random = (): IAuctionPlatformApiIntegrations =>
    typia.random<IAuctionPlatformApiIntegrations>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve paginated list of auction platform API integration configurations.
 *
 * Retrieve a filtered, paginated list of auction platform external API
 * integration configurations. This endpoint enables administrative users to
 * manage the external APIs connected to the platform, including keys and URLs.
 *
 * Access is typically restricted to authorized administrative roles to protect
 * API credentials.
 *
 * This operation references the auction_platform_api_integrations table that
 * stores API integration details. The response includes summaries suitable for
 * management interfaces.
 *
 * Request parameters allow searching by component names, filtering by active
 * status, and applying pagination controls.
 *
 * No modification is performed by this endpoint; it is read-only and safe for
 * repeated use by authorized users.
 *
 * @param props.connection
 * @param props.body Search filters and pagination parameters for API
 *   integrations
 * @path /auctionPlatform/admin/auctionPlatformApiIntegrations
 * @accessor api.functional.auctionPlatform.admin.auctionPlatformApiIntegrations.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search filters and pagination parameters for API integrations */
    body: IAuctionPlatformApiIntegrations.IRequest;
  };
  export type Body = IAuctionPlatformApiIntegrations.IRequest;
  export type Response = IPageIAuctionPlatformApiIntegrations.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/auctionPlatform/admin/auctionPlatformApiIntegrations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/auctionPlatform/admin/auctionPlatformApiIntegrations";
  export const random = (): IPageIAuctionPlatformApiIntegrations.ISummary =>
    typia.random<IPageIAuctionPlatformApiIntegrations.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed API integration configuration by ID.
 *
 * Retrieve detailed information of a specific API integration configuration by
 * its UUID. Useful for administration and configuration management.
 *
 * Secure access is enforced for users with admin privileges due to the
 * sensitivity of API keys and integration details.
 *
 * The operation returns full integration details including API key, URLs, and
 * status.
 *
 * Errors occur if the ID does not exist or if the user lacks proper
 * authorization.
 *
 * @param props.connection
 * @param props.id Unique identifier (UUID) of the target API integration
 *   configuration
 * @path /auctionPlatform/admin/auctionPlatformApiIntegrations/:id
 * @accessor api.functional.auctionPlatform.admin.auctionPlatformApiIntegrations.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) of the target API integration configuration */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IAuctionPlatformApiIntegrations;

  export const METADATA = {
    method: "GET",
    path: "/auctionPlatform/admin/auctionPlatformApiIntegrations/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/auctionPlatform/admin/auctionPlatformApiIntegrations/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IAuctionPlatformApiIntegrations =>
    typia.random<IAuctionPlatformApiIntegrations>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update auction platform API integration configuration by ID.
 *
 * Update an existing API integration configuration. Requires admin role
 * authorization.
 *
 * Supports modification of API keys, endpoint URL, and the integration's active
 * status.
 *
 * Safeguards for security and consistency are managed at the business logic
 * layer.
 *
 * Errors result from invalid IDs or authorization failures.
 *
 * @param props.connection
 * @param props.id Unique identifier (UUID) of the API integration configuration
 *   to update
 * @param props.body Updated information for the API integration configuration
 * @path /auctionPlatform/admin/auctionPlatformApiIntegrations/:id
 * @accessor api.functional.auctionPlatform.admin.auctionPlatformApiIntegrations.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * Unique identifier (UUID) of the API integration configuration to
     * update
     */
    id: string & tags.Format<"uuid">;

    /** Updated information for the API integration configuration */
    body: IAuctionPlatformApiIntegrations.IUpdate;
  };
  export type Body = IAuctionPlatformApiIntegrations.IUpdate;
  export type Response = IAuctionPlatformApiIntegrations;

  export const METADATA = {
    method: "PUT",
    path: "/auctionPlatform/admin/auctionPlatformApiIntegrations/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/auctionPlatform/admin/auctionPlatformApiIntegrations/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IAuctionPlatformApiIntegrations =>
    typia.random<IAuctionPlatformApiIntegrations>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specific auction platform API integration by ID.
 *
 * This operation permanently removes the specified auction platform API
 * integration record from the database using its unique ID. The API integration
 * contains critical configuration data including API keys and endpoint URLs, so
 * this operation should only be accessible to administrators. The requested
 * resource is identified by the `id` path parameter which must be a valid
 * UUID.
 *
 * Administrators use this endpoint to deactivate and delete API integrations
 * when they are no longer needed or have been compromised. Proper
 * authentication and authorization checks are mandatory to secure this
 * operation.
 *
 * The operation performs a hard delete, removing the record fully without
 * retaining a soft deletion flag. No request body is necessary, and no response
 * body is returned to confirm deletion; HTTP status codes indicate success or
 * failure.
 *
 * Errors such as invalid IDs or auth failures should be returned according to
 * the API error handling policy.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target auction platform API
 *   integration record
 * @path /auctionPlatform/admin/auctionPlatformApiIntegrations/:id
 * @accessor api.functional.auctionPlatform.admin.auctionPlatformApiIntegrations.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * Unique identifier of the target auction platform API integration
     * record
     */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/auctionPlatform/admin/auctionPlatformApiIntegrations/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/auctionPlatform/admin/auctionPlatformApiIntegrations/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
