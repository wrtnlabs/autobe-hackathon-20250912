import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAuctionPlatformGuest } from "../../../../structures/IAuctionPlatformGuest";
import { IPageIAuctionPlatformGuest } from "../../../../structures/IPageIAuctionPlatformGuest";

/**
 * Search and retrieve a paginated list of auction platform guests.
 *
 * Retrieve a filtered, paginated list of guest users registered in the auction
 * platform system. Guest users are allowed limited view-only access without
 * login credentials, and their records contain email, optional nickname,
 * creation and update timestamps.
 *
 * This operation supports advanced filtering based on email and nickname, with
 * pagination and sorting to handle large datasets. Only users with appropriate
 * reading permissions should invoke this endpoint to ensure guest data privacy
 * and control.
 *
 * The underlying data is maintained in the auction_platform_guests table as
 * defined in the Prisma schema, leveraging its unique email constraint and
 * full-text indexing on nickname to optimize search functionality. The returned
 * data provides necessary fields for display and management while keeping
 * sensitive login information out, as guests do not have credentials.
 *
 * Typical use cases include administrative consoles listing guest users,
 * monitoring system usage by non-registered visitors, and enabling compliance
 * reviews.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for filtering
 *   guest users
 * @path /auctionPlatform/admin/guests
 * @accessor api.functional.auctionPlatform.admin.guests.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for filtering guest users */
    body: IAuctionPlatformGuest.IRequest;
  };
  export type Body = IAuctionPlatformGuest.IRequest;
  export type Response = IPageIAuctionPlatformGuest.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/auctionPlatform/admin/guests",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auctionPlatform/admin/guests";
  export const random = (): IPageIAuctionPlatformGuest.ISummary =>
    typia.random<IPageIAuctionPlatformGuest.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of an auction platform guest by ID.
 *
 * Retrieve detailed information of a single auction platform guest user
 * identified by their unique guestId. Guests have limited privileges and no
 * authentication credentials. This operation provides all available guest
 * record fields including email, nickname, creation and update timestamps for
 * audit purposes.
 *
 * Security must ensure only authorized admins can access detailed guest
 * information. Data returned contains no sensitive authentication data as
 * guests are not registered members.
 *
 * This operation accesses the auction_platform_guests table as reflected in the
 * Prisma schema, matching the guestId path parameter to the primary key UUID of
 * the guest record.
 *
 * @param props.connection
 * @param props.guestId Unique identifier of the auction platform guest
 * @path /auctionPlatform/admin/guests/:guestId
 * @accessor api.functional.auctionPlatform.admin.guests.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the auction platform guest */
    guestId: string & tags.Format<"uuid">;
  };
  export type Response = IAuctionPlatformGuest;

  export const METADATA = {
    method: "GET",
    path: "/auctionPlatform/admin/guests/:guestId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/auctionPlatform/admin/guests/${encodeURIComponent(props.guestId ?? "null")}`;
  export const random = (): IAuctionPlatformGuest =>
    typia.random<IAuctionPlatformGuest>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("guestId")(() => typia.assert(props.guestId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update auction platform guest information.
 *
 * Update an existing auction platform guest's information identified by
 * guestId. This operation supports modifying guest properties such as email and
 * nickname while enforcing uniqueness constraints.
 *
 * Only authorized users such as admins can perform this update. The operation
 * does not allow modifying audit timestamps or soft deletion flags directly.
 *
 * The underlying data entity is auction_platform_guests as modeled in the
 * Prisma schema.
 *
 * @param props.connection
 * @param props.guestId Unique identifier of the auction platform guest
 * @param props.body Updated guest information
 * @path /auctionPlatform/admin/guests/:guestId
 * @accessor api.functional.auctionPlatform.admin.guests.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the auction platform guest */
    guestId: string & tags.Format<"uuid">;

    /** Updated guest information */
    body: IAuctionPlatformGuest.IUpdate;
  };
  export type Body = IAuctionPlatformGuest.IUpdate;
  export type Response = IAuctionPlatformGuest;

  export const METADATA = {
    method: "PUT",
    path: "/auctionPlatform/admin/guests/:guestId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/auctionPlatform/admin/guests/${encodeURIComponent(props.guestId ?? "null")}`;
  export const random = (): IAuctionPlatformGuest =>
    typia.random<IAuctionPlatformGuest>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("guestId")(() => typia.assert(props.guestId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an auction platform guest user by ID.
 *
 * Permanently remove an auction platform guest user identified by guestId from
 * the database. This operation is irreversible and will delete all associated
 * guest data.
 *
 * Only authorized admins should execute this action. Proper logging and audit
 * trails should accompany this operation to ensure compliance.
 *
 * This operation targets the auction_platform_guests table as defined in the
 * Prisma schema and matches guestId as the UUID primary key.
 *
 * @param props.connection
 * @param props.guestId Unique identifier of the auction platform guest
 * @path /auctionPlatform/admin/guests/:guestId
 * @accessor api.functional.auctionPlatform.admin.guests.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the auction platform guest */
    guestId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/auctionPlatform/admin/guests/:guestId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/auctionPlatform/admin/guests/${encodeURIComponent(props.guestId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("guestId")(() => typia.assert(props.guestId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
