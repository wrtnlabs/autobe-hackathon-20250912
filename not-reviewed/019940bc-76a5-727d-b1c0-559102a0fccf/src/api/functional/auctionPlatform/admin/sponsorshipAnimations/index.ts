import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAuctionPlatformSponsorshipAnimation } from "../../../../structures/IAuctionPlatformSponsorshipAnimation";
import { IPageIAuctionPlatformSponsorshipAnimation } from "../../../../structures/IPageIAuctionPlatformSponsorshipAnimation";

/**
 * Create a new auction platform sponsorship animation.
 *
 * Create a new sponsorship animation record for the auction platform.
 *
 * This operation allows administrators to register a new custom animation used
 * to enhance sponsorship notifications during auctions. The input includes
 * animation name, file URI pointing to the animation file (e.g., S3 URL),
 * optional description, and uploader member ID.
 *
 * The auction_platform_sponsorship_animations table stores these records with
 * audit metadata including creation and update timestamps and supports soft
 * deletion.
 *
 * Security restrictions require admin role authorization.
 *
 * Errors may arise from validation failures such as missing required fields or
 * invalid file URI.
 *
 * The endpoint returns the full created animation record.
 *
 * Complementary API operations include retrieving, updating, and deleting
 * sponsorship animations.
 *
 * @param props.connection
 * @param props.body Data to create a new sponsorship animation
 * @path /auctionPlatform/admin/sponsorshipAnimations
 * @accessor api.functional.auctionPlatform.admin.sponsorshipAnimations.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Data to create a new sponsorship animation */
    body: IAuctionPlatformSponsorshipAnimation.ICreate;
  };
  export type Body = IAuctionPlatformSponsorshipAnimation.ICreate;
  export type Response = IAuctionPlatformSponsorshipAnimation;

  export const METADATA = {
    method: "POST",
    path: "/auctionPlatform/admin/sponsorshipAnimations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auctionPlatform/admin/sponsorshipAnimations";
  export const random = (): IAuctionPlatformSponsorshipAnimation =>
    typia.random<IAuctionPlatformSponsorshipAnimation>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List sponsorship animations with pagination and filtering.
 *
 * Retrieve a paginated list of sponsorship animation metadata records with
 * filtering, searching, and sorting capabilities. This operation facilitates
 * management of custom sponsorship animations used in auction overlays.
 *
 * Security is restricted to admin users.
 *
 * This operation returns paginated results optimized for administrative
 * browsing.
 *
 * Supports complex search parameters in request body facilitating flexible
 * client querying.
 *
 * @param props.connection
 * @param props.body Search parameters and pagination for sponsorship animations
 * @path /auctionPlatform/admin/sponsorshipAnimations
 * @accessor api.functional.auctionPlatform.admin.sponsorshipAnimations.searchSponsorshipAnimations
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function searchSponsorshipAnimations(
  connection: IConnection,
  props: searchSponsorshipAnimations.Props,
): Promise<searchSponsorshipAnimations.Response> {
  return true === connection.simulate
    ? searchSponsorshipAnimations.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...searchSponsorshipAnimations.METADATA,
          path: searchSponsorshipAnimations.path(),
          status: null,
        },
        props.body,
      );
}
export namespace searchSponsorshipAnimations {
  export type Props = {
    /** Search parameters and pagination for sponsorship animations */
    body: IAuctionPlatformSponsorshipAnimation.IRequest;
  };
  export type Body = IAuctionPlatformSponsorshipAnimation.IRequest;
  export type Response = IPageIAuctionPlatformSponsorshipAnimation;

  export const METADATA = {
    method: "PATCH",
    path: "/auctionPlatform/admin/sponsorshipAnimations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auctionPlatform/admin/sponsorshipAnimations";
  export const random = (): IPageIAuctionPlatformSponsorshipAnimation =>
    typia.random<IPageIAuctionPlatformSponsorshipAnimation>();
  export const simulate = (
    connection: IConnection,
    props: searchSponsorshipAnimations.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: searchSponsorshipAnimations.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information of a specific auction platform sponsorship
 * animation.
 *
 * Retrieve detailed information for a specific sponsorship animation by its
 * unique ID.
 *
 * This API endpoint operates on the auction_platform_sponsorship_animations
 * table, which stores metadata about custom animations used in sponsorship
 * notifications during auctions. The record includes the animation's name, file
 * URI, optional description, the member who uploaded it, and audit timestamps.
 *
 * Users with appropriate permissions can query this resource to obtain full
 * details about an animation asset for display or management purposes.
 *
 * Security considerations require proper authentication and authorization to
 * access this animation data since it pertains to sponsorship notification
 * customization.
 *
 * This GET operation supports retrieval by the unique animation identifier
 * passed as a path parameter, which must be a valid UUID corresponding to an
 * existing record.
 *
 * Errors may include 404 for missing animation IDs or 401/403 for unauthorized
 * access.
 *
 * Related APIs include creating, updating, and deleting sponsorship animations,
 * which modify this resource.
 *
 * The response body contains the full auction_platform_sponsorship_animations
 * entity as defined in the Prisma schema including all its columns and
 * properties.
 *
 * @param props.connection
 * @param props.id Unique identifier of the sponsorship animation
 * @path /auctionPlatform/admin/sponsorshipAnimations/:id
 * @accessor api.functional.auctionPlatform.admin.sponsorshipAnimations.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the sponsorship animation */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IAuctionPlatformSponsorshipAnimation;

  export const METADATA = {
    method: "GET",
    path: "/auctionPlatform/admin/sponsorshipAnimations/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/auctionPlatform/admin/sponsorshipAnimations/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IAuctionPlatformSponsorshipAnimation =>
    typia.random<IAuctionPlatformSponsorshipAnimation>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing auction platform sponsorship animation.
 *
 * Update an existing sponsorship animation's details by its unique ID.
 *
 * This API modifies records in the auction_platform_sponsorship_animations
 * table, permitting admins to change animation metadata such as name, file URI,
 * description, and uploader member ID. The endpoint requires the animation ID
 * as a path parameter and a request body with updated fields.
 *
 * Authorization enforcement ensures only admins can perform updates.
 *
 * Failures may be due to invalid IDs, missing records, or validation errors on
 * input fields.
 *
 * On success, the full updated sponsorship animation entity is returned.
 *
 * Related endpoints include creation and deletion of sponsorship animations.
 *
 * @param props.connection
 * @param props.id Unique identifier of the sponsorship animation to update
 * @param props.body Updated data for the sponsorship animation
 * @path /auctionPlatform/admin/sponsorshipAnimations/:id
 * @accessor api.functional.auctionPlatform.admin.sponsorshipAnimations.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the sponsorship animation to update */
    id: string & tags.Format<"uuid">;

    /** Updated data for the sponsorship animation */
    body: IAuctionPlatformSponsorshipAnimation.IUpdate;
  };
  export type Body = IAuctionPlatformSponsorshipAnimation.IUpdate;
  export type Response = IAuctionPlatformSponsorshipAnimation;

  export const METADATA = {
    method: "PUT",
    path: "/auctionPlatform/admin/sponsorshipAnimations/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/auctionPlatform/admin/sponsorshipAnimations/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IAuctionPlatformSponsorshipAnimation =>
    typia.random<IAuctionPlatformSponsorshipAnimation>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an auction platform sponsorship animation by ID.
 *
 * Delete a sponsorship animation permanently using its unique ID.
 *
 * This API removes the auction_platform_sponsorship_animations record
 * identified by the given UUID. It performs a hard delete, completely removing
 * the record and all associated metadata.
 *
 * Only users with admin role authorization can delete sponsorship animations.
 *
 * No response body is returned upon success.
 *
 * Error cases may include attempting to delete a non-existent ID or lacking
 * proper authorization.
 *
 * Complementary endpoints allow reading, creating, and updating sponsorship
 * animations.
 *
 * @param props.connection
 * @param props.id Unique identifier of the sponsorship animation to delete
 * @path /auctionPlatform/admin/sponsorshipAnimations/:id
 * @accessor api.functional.auctionPlatform.admin.sponsorshipAnimations.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the sponsorship animation to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/auctionPlatform/admin/sponsorshipAnimations/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/auctionPlatform/admin/sponsorshipAnimations/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
