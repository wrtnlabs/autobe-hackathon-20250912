import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAuctionPlatformAdmin } from "../../../../structures/IAuctionPlatformAdmin";
import { IPageIAuctionPlatformAdmin } from "../../../../structures/IPageIAuctionPlatformAdmin";

/**
 * Search and retrieve a paginated list of admin users.
 *
 * Retrieve a filtered and paginated list of administrator user accounts. The
 * list supports search criteria such as email, nickname, and creation/update
 * dates, enabling efficient management of admins by authorized users.
 *
 * Security considerations ensure that only authenticated users with admin role
 * access this endpoint. Returned admin data excludes sensitive password hashes
 * to maintain security.
 *
 * This operation interfaces with the auction_platform_admins table in the
 * database and returns summarized data suitable for user management views.
 *
 * For detailed administration, use the specific admin retrieval endpoint by ID.
 * Pagination parameters control response size for performance optimization.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for admin user
 *   filtering
 * @path /auctionPlatform/admin/admins
 * @accessor api.functional.auctionPlatform.admin.admins.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for admin user filtering */
    body: IAuctionPlatformAdmin.IRequest;
  };
  export type Body = IAuctionPlatformAdmin.IRequest;
  export type Response = IPageIAuctionPlatformAdmin.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/auctionPlatform/admin/admins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auctionPlatform/admin/admins";
  export const random = (): IPageIAuctionPlatformAdmin.ISummary =>
    typia.random<IPageIAuctionPlatformAdmin.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information of a specific admin user.
 *
 * Retrieve detailed information of a specific administrator user by their
 * unique ID. This includes email, nickname, and audit timestamps.
 *
 * Only authenticated admin users may access this endpoint. The data is
 * retrieved from the auction_platform_admins table.
 *
 * This operation supports administrative interfaces requiring full admin
 * account details for management or audit purposes.
 *
 * @param props.connection
 * @param props.adminId Unique identifier of the target admin
 * @path /auctionPlatform/admin/admins/:adminId
 * @accessor api.functional.auctionPlatform.admin.admins.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target admin */
    adminId: string & tags.Format<"uuid">;
  };
  export type Response = IAuctionPlatformAdmin;

  export const METADATA = {
    method: "GET",
    path: "/auctionPlatform/admin/admins/:adminId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/auctionPlatform/admin/admins/${encodeURIComponent(props.adminId ?? "null")}`;
  export const random = (): IAuctionPlatformAdmin =>
    typia.random<IAuctionPlatformAdmin>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("adminId")(() => typia.assert(props.adminId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an admin user's information.
 *
 * Update details of an existing administrator user by their unique ID. Supports
 * modification of profile fields including nickname and password hash.
 *
 * Admin-level authentication is mandatory. The operation returns the updated
 * admin record.
 *
 * Ensure secure handling of password hashes during updates to maintain data
 * protection.
 *
 * @param props.connection
 * @param props.adminId Unique identifier of the admin to update
 * @param props.body Admin user update information
 * @path /auctionPlatform/admin/admins/:adminId
 * @accessor api.functional.auctionPlatform.admin.admins.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the admin to update */
    adminId: string & tags.Format<"uuid">;

    /** Admin user update information */
    body: IAuctionPlatformAdmin.IUpdate;
  };
  export type Body = IAuctionPlatformAdmin.IUpdate;
  export type Response = IAuctionPlatformAdmin;

  export const METADATA = {
    method: "PUT",
    path: "/auctionPlatform/admin/admins/:adminId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/auctionPlatform/admin/admins/${encodeURIComponent(props.adminId ?? "null")}`;
  export const random = (): IAuctionPlatformAdmin =>
    typia.random<IAuctionPlatformAdmin>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("adminId")(() => typia.assert(props.adminId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an admin user.
 *
 * Delete an administrator user permanently from the system by their unique ID.
 *
 * This operation removes all associated admin user data from the database.
 *
 * Only admins with appropriate permissions are authorized to execute this
 * request.
 *
 * No content is returned after deletion.
 *
 * @param props.connection
 * @param props.adminId Unique identifier of the admin to delete
 * @path /auctionPlatform/admin/admins/:adminId
 * @accessor api.functional.auctionPlatform.admin.admins.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the admin to delete */
    adminId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/auctionPlatform/admin/admins/:adminId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/auctionPlatform/admin/admins/${encodeURIComponent(props.adminId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("adminId")(() => typia.assert(props.adminId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
