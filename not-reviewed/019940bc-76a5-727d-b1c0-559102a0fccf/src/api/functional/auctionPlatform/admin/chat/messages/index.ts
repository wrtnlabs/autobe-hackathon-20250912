import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

/**
 * Soft delete a chat message by ID.
 *
 * Delete a chat message by its unique ID.
 *
 * This performs a soft delete by setting the deleted_at timestamp on the
 * auction_platform_chat_messages record. The record remains in the database for
 * auditing but is treated as deleted.
 *
 * Only authorized personnel can perform delete operations on chat messages.
 *
 * Parameters include the message ID path parameter. No request body is needed.
 *
 * Response does not return data, only confirmation of deletion.
 *
 * @param props.connection
 * @param props.id Unique identifier of the chat message to delete
 * @path /auctionPlatform/admin/chat/messages/:id
 * @accessor api.functional.auctionPlatform.admin.chat.messages.eraseChatMessage
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseChatMessage(
  connection: IConnection,
  props: eraseChatMessage.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseChatMessage.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseChatMessage.METADATA,
          path: eraseChatMessage.path(props),
          status: null,
        },
      );
}
export namespace eraseChatMessage {
  export type Props = {
    /** Unique identifier of the chat message to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/auctionPlatform/admin/chat/messages/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/auctionPlatform/admin/chat/messages/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseChatMessage.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseChatMessage.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
