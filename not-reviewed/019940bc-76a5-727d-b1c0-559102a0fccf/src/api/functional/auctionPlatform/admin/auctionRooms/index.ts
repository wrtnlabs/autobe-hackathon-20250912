import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAuctionPlatformAuctionRoom } from "../../../../structures/IAuctionPlatformAuctionRoom";
import { IPageIAuctionPlatformAuctionRoom } from "../../../../structures/IPageIAuctionPlatformAuctionRoom";

/**
 * Create a new auction room that represents a scheduled live auction event.
 * Required fields include streamer name, start time, optional end time, and
 * status.
 *
 * Only users with the admin role are authorized to perform this operation.
 *
 * The operation validates uniqueness of streamer name with the scheduled start
 * time and proper ISO date-time formats for temporal fields.
 *
 * Upon successful creation, the full auction room entity is returned.
 *
 * @param props.connection
 * @param props.body Details required for creating an auction room
 * @path /auctionPlatform/admin/auctionRooms
 * @accessor api.functional.auctionPlatform.admin.auctionRooms.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Details required for creating an auction room */
    body: IAuctionPlatformAuctionRoom.ICreate;
  };
  export type Body = IAuctionPlatformAuctionRoom.ICreate;
  export type Response = IAuctionPlatformAuctionRoom;

  export const METADATA = {
    method: "POST",
    path: "/auctionPlatform/admin/auctionRooms",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auctionPlatform/admin/auctionRooms";
  export const random = (): IAuctionPlatformAuctionRoom =>
    typia.random<IAuctionPlatformAuctionRoom>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and list auction rooms with filtering, sorting, and pagination.
 *
 * Retrieve a filtered, paginated list of auction rooms from the system. This
 * operation allows clients to perform complex queries including filtering by
 * streamer name, auction status, and date ranges for scheduled auctions.
 * Pagination parameters support efficient data retrieval and sorting options
 * allow ordering by start time, status, or update timestamps.
 *
 * Security is enforced through role-based access control ensuring only
 * authorized users, such as administrators, can access detailed auction room
 * data.
 *
 * This operation corresponds to the auction_platform_auction_rooms table in the
 * Prisma schema, utilizing all pertinent fields including streamer_name,
 * status, start_time, and end_time. The response consists of summary
 * information optimized for list views. Error handling includes validation of
 * filter parameters and proper pagination boundaries.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for filtering
 *   auction rooms
 * @path /auctionPlatform/admin/auctionRooms
 * @accessor api.functional.auctionPlatform.admin.auctionRooms.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for filtering auction rooms */
    body: IAuctionPlatformAuctionRoom.IRequest;
  };
  export type Body = IAuctionPlatformAuctionRoom.IRequest;
  export type Response = IPageIAuctionPlatformAuctionRoom.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/auctionPlatform/admin/auctionRooms",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auctionPlatform/admin/auctionRooms";
  export const random = (): IPageIAuctionPlatformAuctionRoom.ISummary =>
    typia.random<IPageIAuctionPlatformAuctionRoom.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a specific auction room.
 *
 * Retrieve detailed information of a specific auction room by its unique
 * identifier. The auction room represents a scheduled live auction managed per
 * streamer with metadata including start and end times, status, and audit
 * timestamps.
 *
 * Security is enforced via role-based authentication ensuring that only users
 * with appropriate admin privileges can access this information.
 *
 * The response includes all fields of the auction_platform_auction_rooms table
 * for the specified auction room ID. If the auction room is not found, a
 * suitable error response is expected.
 *
 * @param props.connection
 * @param props.auctionRoomId Unique identifier (UUID) of the target auction
 *   room
 * @path /auctionPlatform/admin/auctionRooms/:auctionRoomId
 * @accessor api.functional.auctionPlatform.admin.auctionRooms.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) of the target auction room */
    auctionRoomId: string & tags.Format<"uuid">;
  };
  export type Response = IAuctionPlatformAuctionRoom;

  export const METADATA = {
    method: "GET",
    path: "/auctionPlatform/admin/auctionRooms/:auctionRoomId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/auctionPlatform/admin/auctionRooms/${encodeURIComponent(props.auctionRoomId ?? "null")}`;
  export const random = (): IAuctionPlatformAuctionRoom =>
    typia.random<IAuctionPlatformAuctionRoom>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("auctionRoomId")(() => typia.assert(props.auctionRoomId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing auction room identified by its unique UUID. Input data may
 * include streamer name, schedule start time, optional end time, and status.
 *
 * Authorization is restricted to admin users.
 *
 * The operation validates the uniqueness of streamer name and start time
 * combination, input formats, and enforces proper update semantics.
 *
 * The updated auction room entity is returned on success.
 *
 * @param props.connection
 * @param props.auctionRoomId Unique identifier (UUID) of the auction room to
 *   update
 * @param props.body Data for updating an auction room
 * @path /auctionPlatform/admin/auctionRooms/:auctionRoomId
 * @accessor api.functional.auctionPlatform.admin.auctionRooms.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier (UUID) of the auction room to update */
    auctionRoomId: string & tags.Format<"uuid">;

    /** Data for updating an auction room */
    body: IAuctionPlatformAuctionRoom.IUpdate;
  };
  export type Body = IAuctionPlatformAuctionRoom.IUpdate;
  export type Response = IAuctionPlatformAuctionRoom;

  export const METADATA = {
    method: "PUT",
    path: "/auctionPlatform/admin/auctionRooms/:auctionRoomId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/auctionPlatform/admin/auctionRooms/${encodeURIComponent(props.auctionRoomId ?? "null")}`;
  export const random = (): IAuctionPlatformAuctionRoom =>
    typia.random<IAuctionPlatformAuctionRoom>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("auctionRoomId")(() => typia.assert(props.auctionRoomId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an auction room by its unique ID.
 *
 * Permanently delete an auction room identified by auctionRoomId from the
 * system. The auction room holds metadata such as streamer name, schedule, and
 * status.
 *
 * This deletion permanently removes the record from the database along with any
 * dependent data due to cascading rules.
 *
 * Only authorized admin users may perform this operation.
 *
 * No request body is needed as the deletion is identified solely by the path
 * parameter.
 *
 * No content is returned upon successful deletion.
 *
 * @param props.connection
 * @param props.auctionRoomId Unique identifier of the auction room to delete
 * @path /auctionPlatform/admin/auctionRooms/:auctionRoomId
 * @accessor api.functional.auctionPlatform.admin.auctionRooms.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the auction room to delete */
    auctionRoomId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/auctionPlatform/admin/auctionRooms/:auctionRoomId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/auctionPlatform/admin/auctionRooms/${encodeURIComponent(props.auctionRoomId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("auctionRoomId")(() => typia.assert(props.auctionRoomId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
