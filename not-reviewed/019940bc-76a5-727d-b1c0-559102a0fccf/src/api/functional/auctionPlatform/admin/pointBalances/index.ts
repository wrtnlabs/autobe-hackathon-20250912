import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAuctionPlatformPointBalance } from "../../../../structures/IAuctionPlatformPointBalance";
import { IAuctionPlatformPointBalances } from "../../../../structures/IAuctionPlatformPointBalances";
import { IPageIAuctionPlatformPointBalances } from "../../../../structures/IPageIAuctionPlatformPointBalances";

/**
 * Create a new auction platform point balance record assigning auction points
 * to a team leader in a specific auction room.
 *
 * Admin authorization is required to modify sensitive point allocation data.
 *
 * The request body must specify all necessary data fields. On success, returns
 * the created point balance record.
 *
 * @param props.connection
 * @param props.body Creation data for a new auction platform point balance
 * @path /auctionPlatform/admin/pointBalances
 * @accessor api.functional.auctionPlatform.admin.pointBalances.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation data for a new auction platform point balance */
    body: IAuctionPlatformPointBalance.ICreate;
  };
  export type Body = IAuctionPlatformPointBalance.ICreate;
  export type Response = IAuctionPlatformPointBalance;

  export const METADATA = {
    method: "POST",
    path: "/auctionPlatform/admin/pointBalances",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auctionPlatform/admin/pointBalances";
  export const random = (): IAuctionPlatformPointBalance =>
    typia.random<IAuctionPlatformPointBalance>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a paginated list of auction platform point balances.
 *
 * Retrieve a filtered and paginated list of point balance records from the
 * auction platform. This operation supports searching by team leader, auction
 * room, points allocated, and points used.
 *
 * Security considerations require that this endpoint is accessible only by
 * users with admin privileges due to sensitive point management data.
 *
 * The auction_platform_point_balances table stores allocation and usage of
 * auction points for team leaders per auction room. Each record tracks total
 * allocated points and points spent.
 *
 * Validation ensures pagination parameters are respected. The response includes
 * pagination metadata and a list of point balance summaries.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for point
 *   balances filtering
 * @path /auctionPlatform/admin/pointBalances
 * @accessor api.functional.auctionPlatform.admin.pointBalances.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for point balances
     * filtering
     */
    body: IAuctionPlatformPointBalances.IRequest;
  };
  export type Body = IAuctionPlatformPointBalances.IRequest;
  export type Response = IPageIAuctionPlatformPointBalances.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/auctionPlatform/admin/pointBalances",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auctionPlatform/admin/pointBalances";
  export const random = (): IPageIAuctionPlatformPointBalances.ISummary =>
    typia.random<IPageIAuctionPlatformPointBalances.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed auction platform point balance information by ID.
 *
 * Retrieve detailed auction platform point balance information by its unique
 * identifier. The record includes points allocated, points used, and
 * associations to the team leader and auction room.
 *
 * Security requires admin role due to sensitivity of point balance management.
 *
 * The operation validates the format of the pointBalanceId parameter and
 * returns the full entity representation.
 *
 * @param props.connection
 * @param props.pointBalanceId Unique identifier of the target point balance
 *   record
 * @path /auctionPlatform/admin/pointBalances/:pointBalanceId
 * @accessor api.functional.auctionPlatform.admin.pointBalances.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target point balance record */
    pointBalanceId: string & tags.Format<"uuid">;
  };
  export type Response = IAuctionPlatformPointBalance;

  export const METADATA = {
    method: "GET",
    path: "/auctionPlatform/admin/pointBalances/:pointBalanceId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/auctionPlatform/admin/pointBalances/${encodeURIComponent(props.pointBalanceId ?? "null")}`;
  export const random = (): IAuctionPlatformPointBalance =>
    typia.random<IAuctionPlatformPointBalance>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("pointBalanceId")(() => typia.assert(props.pointBalanceId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update auction platform point balance record by ID.
 *
 * Update an existing auction platform point balance record by ID with new
 * allocation and usage data.
 *
 * Only admin users may perform this update.
 *
 * The endpoint requires the pointBalanceId path parameter and an update request
 * body. Returns the updated entity on success.
 *
 * @param props.connection
 * @param props.pointBalanceId Unique identifier of the point balance record to
 *   update
 * @param props.body Update data for an existing auction platform point balance
 * @path /auctionPlatform/admin/pointBalances/:pointBalanceId
 * @accessor api.functional.auctionPlatform.admin.pointBalances.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the point balance record to update */
    pointBalanceId: string & tags.Format<"uuid">;

    /** Update data for an existing auction platform point balance */
    body: IAuctionPlatformPointBalance.IUpdate;
  };
  export type Body = IAuctionPlatformPointBalance.IUpdate;
  export type Response = IAuctionPlatformPointBalance;

  export const METADATA = {
    method: "PUT",
    path: "/auctionPlatform/admin/pointBalances/:pointBalanceId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/auctionPlatform/admin/pointBalances/${encodeURIComponent(props.pointBalanceId ?? "null")}`;
  export const random = (): IAuctionPlatformPointBalance =>
    typia.random<IAuctionPlatformPointBalance>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("pointBalanceId")(() => typia.assert(props.pointBalanceId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
