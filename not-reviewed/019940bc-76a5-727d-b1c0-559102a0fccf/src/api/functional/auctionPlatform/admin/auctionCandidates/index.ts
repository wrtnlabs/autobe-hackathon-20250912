import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAuctionPlatformAuctionCandidate } from "../../../../structures/IAuctionPlatformAuctionCandidate";

/**
 * Update an auction candidate's details.
 *
 * Update the information of an existing auction candidate identified by
 * auctionCandidateId. This operation modifies properties such as nickname and
 * season statistics, ensuring that the candidate data remains consistent and
 * up-to-date.
 *
 * Only authorized users with appropriate permissions can perform this update.
 * The unique auctionCandidateId identifies which candidate record to modify.
 *
 * The operation interfaces directly with the
 * auction_platform_auction_candidates table, respecting all schema constraints
 * and relations. Updated timestamp is managed by the system to reflect
 * changes.
 *
 * Validation includes checking uniqueness of nickname, proper JSON formatting
 * of stats if supplied, and prevention of updates to immutable fields.
 *
 * The response returns the fully updated auction candidate entity after
 * successful modification.
 *
 * @param props.connection
 * @param props.auctionCandidateId Unique identifier of the auction candidate to
 *   update
 * @param props.body Information required to update an auction candidate
 * @path /auctionPlatform/admin/auctionCandidates/:auctionCandidateId
 * @accessor api.functional.auctionPlatform.admin.auctionCandidates.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the auction candidate to update */
    auctionCandidateId: string & tags.Format<"uuid">;

    /** Information required to update an auction candidate */
    body: IAuctionPlatformAuctionCandidate.IUpdate;
  };
  export type Body = IAuctionPlatformAuctionCandidate.IUpdate;
  export type Response = IAuctionPlatformAuctionCandidate;

  export const METADATA = {
    method: "PUT",
    path: "/auctionPlatform/admin/auctionCandidates/:auctionCandidateId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/auctionPlatform/admin/auctionCandidates/${encodeURIComponent(props.auctionCandidateId ?? "null")}`;
  export const random = (): IAuctionPlatformAuctionCandidate =>
    typia.random<IAuctionPlatformAuctionCandidate>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("auctionCandidateId")(() =>
        typia.assert(props.auctionCandidateId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an auction candidate permanently.
 *
 * Permanently remove an auction candidate from the system by specifying their
 * unique auctionCandidateId.
 *
 * This operation performs a hard delete; the record is removed entirely and
 * cannot be recovered.
 *
 * Only users with administrative privileges may perform this operation to
 * prevent accidental data loss.
 *
 * The system ensures that all cascading relationships and dependencies are
 * handled appropriately during deletion.
 *
 * No response content is returned upon successful deletion.
 *
 * @param props.connection
 * @param props.auctionCandidateId Unique identifier of the auction candidate to
 *   delete
 * @path /auctionPlatform/admin/auctionCandidates/:auctionCandidateId
 * @accessor api.functional.auctionPlatform.admin.auctionCandidates.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the auction candidate to delete */
    auctionCandidateId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/auctionPlatform/admin/auctionCandidates/:auctionCandidateId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/auctionPlatform/admin/auctionCandidates/${encodeURIComponent(props.auctionCandidateId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("auctionCandidateId")(() =>
        typia.assert(props.auctionCandidateId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
