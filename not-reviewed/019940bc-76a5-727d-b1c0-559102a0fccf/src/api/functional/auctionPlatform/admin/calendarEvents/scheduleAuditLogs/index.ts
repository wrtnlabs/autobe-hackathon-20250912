import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAuctionPlatformScheduleAuditLog } from "../../../../../structures/IAuctionPlatformScheduleAuditLog";
import { IPageIAuctionPlatformScheduleAuditLog } from "../../../../../structures/IPageIAuctionPlatformScheduleAuditLog";

/**
 * Create a schedule audit log entry.
 *
 * Create a new schedule audit log entry for a specific calendar event
 * identified by calendarEventId. Audit logs capture who made changes, what
 * changes occurred, and when.
 *
 * This API is intended for administrative use to maintain an audit trail of
 * schedule modifications.
 *
 * Authorization restricted to admin users to protect audit data integrity.
 *
 * Returns the created audit log record with comprehensive details for
 * confirmation and further processing.
 *
 * @param props.connection
 * @param props.calendarEventId Unique identifier of the calendar event
 * @param props.body Creation information of the schedule audit log entry
 * @path /auctionPlatform/admin/calendarEvents/:calendarEventId/scheduleAuditLogs
 * @accessor api.functional.auctionPlatform.admin.calendarEvents.scheduleAuditLogs.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the calendar event */
    calendarEventId: string & tags.Format<"uuid">;

    /** Creation information of the schedule audit log entry */
    body: IAuctionPlatformScheduleAuditLog.ICreate;
  };
  export type Body = IAuctionPlatformScheduleAuditLog.ICreate;
  export type Response = IAuctionPlatformScheduleAuditLog;

  export const METADATA = {
    method: "POST",
    path: "/auctionPlatform/admin/calendarEvents/:calendarEventId/scheduleAuditLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/auctionPlatform/admin/calendarEvents/${encodeURIComponent(props.calendarEventId ?? "null")}/scheduleAuditLogs`;
  export const random = (): IAuctionPlatformScheduleAuditLog =>
    typia.random<IAuctionPlatformScheduleAuditLog>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("calendarEventId")(() =>
        typia.assert(props.calendarEventId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List schedule audit logs for a calendar event.
 *
 * Retrieve a paginated list of schedule audit logs for a specific calendar
 * event identified by calendarEventId. Audit logs capture changes made to
 * auction schedule records, including who made the change, what was changed,
 * and when.
 *
 * This operation supports advanced search and filtering capabilities via the
 * request body, enabling queries by change types, users, and date ranges, with
 * pagination parameters.
 *
 * Security policies restrict access to authorized admin users only to maintain
 * data privacy and audit integrity.
 *
 * The response contains a paginated collection of audit log summaries providing
 * essential metadata about schedule changes.
 *
 * Use cases include auditing schedule modifications, compliance reporting, and
 * troubleshooting calendar event issues.
 *
 * @param props.connection
 * @param props.calendarEventId Unique identifier of the calendar event
 * @param props.body Search criteria and pagination parameters for schedule
 *   audit logs filtering
 * @path /auctionPlatform/admin/calendarEvents/:calendarEventId/scheduleAuditLogs
 * @accessor api.functional.auctionPlatform.admin.calendarEvents.scheduleAuditLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the calendar event */
    calendarEventId: string & tags.Format<"uuid">;

    /**
     * Search criteria and pagination parameters for schedule audit logs
     * filtering
     */
    body: IAuctionPlatformScheduleAuditLog.IRequest;
  };
  export type Body = IAuctionPlatformScheduleAuditLog.IRequest;
  export type Response = IPageIAuctionPlatformScheduleAuditLog.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/auctionPlatform/admin/calendarEvents/:calendarEventId/scheduleAuditLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/auctionPlatform/admin/calendarEvents/${encodeURIComponent(props.calendarEventId ?? "null")}/scheduleAuditLogs`;
  export const random = (): IPageIAuctionPlatformScheduleAuditLog.ISummary =>
    typia.random<IPageIAuctionPlatformScheduleAuditLog.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("calendarEventId")(() =>
        typia.assert(props.calendarEventId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a schedule audit log entry.
 *
 * Retrieve details of a single schedule audit log entry by scheduleAuditLogId
 * for a calendar event identified by calendarEventId. Provides comprehensive
 * audit data such as change type, user responsible, and timestamps.
 *
 * Access restricted to admin users to ensure audit data confidentiality.
 *
 * Useful for detailed examination of specific schedule changes in the auction
 * platform.
 *
 * @param props.connection
 * @param props.calendarEventId Unique identifier of the calendar event
 * @param props.scheduleAuditLogId Unique identifier of the schedule audit log
 *   entry
 * @path /auctionPlatform/admin/calendarEvents/:calendarEventId/scheduleAuditLogs/:scheduleAuditLogId
 * @accessor api.functional.auctionPlatform.admin.calendarEvents.scheduleAuditLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the calendar event */
    calendarEventId: string & tags.Format<"uuid">;

    /** Unique identifier of the schedule audit log entry */
    scheduleAuditLogId: string & tags.Format<"uuid">;
  };
  export type Response = IAuctionPlatformScheduleAuditLog;

  export const METADATA = {
    method: "GET",
    path: "/auctionPlatform/admin/calendarEvents/:calendarEventId/scheduleAuditLogs/:scheduleAuditLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/auctionPlatform/admin/calendarEvents/${encodeURIComponent(props.calendarEventId ?? "null")}/scheduleAuditLogs/${encodeURIComponent(props.scheduleAuditLogId ?? "null")}`;
  export const random = (): IAuctionPlatformScheduleAuditLog =>
    typia.random<IAuctionPlatformScheduleAuditLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("calendarEventId")(() =>
        typia.assert(props.calendarEventId),
      );
      assert.param("scheduleAuditLogId")(() =>
        typia.assert(props.scheduleAuditLogId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a schedule audit log by ID within a calendar event.
 *
 * Update the details of a schedule audit log entry belonging to a specific
 * calendar event. This allows administrators to correct or augment audit
 * information such as the type of change (e.g., create, update, delete) and
 * descriptive details about the change.
 *
 * Security and permission controls restrict this operation to users with
 * administrative privileges to ensure audit trail integrity.
 *
 * This operation directly updates records in the
 * auction_platform_schedule_audit_logs table, which logs modifications on
 * calendar events. It supports operational transparency and compliance by
 * enabling controlled edits to audit logs.
 *
 * Correct usage involves specifying valid calendarEventId and
 * scheduleAuditLogId path parameters and providing update data. Failure to
 * provide sufficient identification or authorization results in access denial
 * or record not found errors.
 *
 * @param props.connection
 * @param props.calendarEventId Unique identifier of the target calendar event
 * @param props.scheduleAuditLogId Unique identifier of the target schedule
 *   audit log
 * @param props.body Update data for the schedule audit log entry
 * @path /auctionPlatform/admin/calendarEvents/:calendarEventId/scheduleAuditLogs/:scheduleAuditLogId
 * @accessor api.functional.auctionPlatform.admin.calendarEvents.scheduleAuditLogs.updateScheduleAuditLog
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateScheduleAuditLog(
  connection: IConnection,
  props: updateScheduleAuditLog.Props,
): Promise<updateScheduleAuditLog.Response> {
  return true === connection.simulate
    ? updateScheduleAuditLog.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateScheduleAuditLog.METADATA,
          path: updateScheduleAuditLog.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateScheduleAuditLog {
  export type Props = {
    /** Unique identifier of the target calendar event */
    calendarEventId: string & tags.Format<"uuid">;

    /** Unique identifier of the target schedule audit log */
    scheduleAuditLogId: string & tags.Format<"uuid">;

    /** Update data for the schedule audit log entry */
    body: IAuctionPlatformScheduleAuditLog.IUpdate;
  };
  export type Body = IAuctionPlatformScheduleAuditLog.IUpdate;
  export type Response = IAuctionPlatformScheduleAuditLog;

  export const METADATA = {
    method: "PUT",
    path: "/auctionPlatform/admin/calendarEvents/:calendarEventId/scheduleAuditLogs/:scheduleAuditLogId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/auctionPlatform/admin/calendarEvents/${encodeURIComponent(props.calendarEventId ?? "null")}/scheduleAuditLogs/${encodeURIComponent(props.scheduleAuditLogId ?? "null")}`;
  export const random = (): IAuctionPlatformScheduleAuditLog =>
    typia.random<IAuctionPlatformScheduleAuditLog>();
  export const simulate = (
    connection: IConnection,
    props: updateScheduleAuditLog.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateScheduleAuditLog.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("calendarEventId")(() =>
        typia.assert(props.calendarEventId),
      );
      assert.param("scheduleAuditLogId")(() =>
        typia.assert(props.scheduleAuditLogId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a schedule audit log by ID within a calendar event.
 *
 * Delete a specific schedule audit log entry permanently from a calendar event.
 * This removal is irreversible and removes all trace of the audit log from the
 * system.
 *
 * Due to the sensitive nature of audit logs, only administrators are permitted
 * to perform this operation.
 *
 * Ensure that the calendarEventId and scheduleAuditLogId uniquely identify the
 * audit log entry to avoid unintended data loss. Attempting deletion of
 * non-existent entries should return appropriate errors.
 *
 * This operation corresponds to a DELETE on the
 * auction_platform_schedule_audit_logs table with no soft delete implemented
 * here.
 *
 * @param props.connection
 * @param props.calendarEventId Unique identifier of the target calendar event
 * @param props.scheduleAuditLogId Unique identifier of the target schedule
 *   audit log
 * @path /auctionPlatform/admin/calendarEvents/:calendarEventId/scheduleAuditLogs/:scheduleAuditLogId
 * @accessor api.functional.auctionPlatform.admin.calendarEvents.scheduleAuditLogs.eraseScheduleAuditLog
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseScheduleAuditLog(
  connection: IConnection,
  props: eraseScheduleAuditLog.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseScheduleAuditLog.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseScheduleAuditLog.METADATA,
          path: eraseScheduleAuditLog.path(props),
          status: null,
        },
      );
}
export namespace eraseScheduleAuditLog {
  export type Props = {
    /** Unique identifier of the target calendar event */
    calendarEventId: string & tags.Format<"uuid">;

    /** Unique identifier of the target schedule audit log */
    scheduleAuditLogId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/auctionPlatform/admin/calendarEvents/:calendarEventId/scheduleAuditLogs/:scheduleAuditLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/auctionPlatform/admin/calendarEvents/${encodeURIComponent(props.calendarEventId ?? "null")}/scheduleAuditLogs/${encodeURIComponent(props.scheduleAuditLogId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseScheduleAuditLog.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseScheduleAuditLog.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("calendarEventId")(() =>
        typia.assert(props.calendarEventId),
      );
      assert.param("scheduleAuditLogId")(() =>
        typia.assert(props.scheduleAuditLogId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
