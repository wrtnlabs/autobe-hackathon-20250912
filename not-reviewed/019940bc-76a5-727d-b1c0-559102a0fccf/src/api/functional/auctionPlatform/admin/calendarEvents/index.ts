import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
export * as scheduleAuditLogs from "./scheduleAuditLogs/index";

/**
 * Delete a calendar event by ID (hard delete).
 *
 * This DELETE operation removes a calendar event identified by calendarEventId
 * from the auction platform's calendar_events data store. The calendar event is
 * linked to a specific auction room and contains event details such as title,
 * start and optional end times.
 *
 * Only authorized users with admin roles may perform this delete to prevent
 * unauthorized data removal. This operation permanently deletes the calendar
 * event from the database, ensuring the auction schedule is no longer listed or
 * active.
 *
 * This operation involves the auction_platform_calendar_events table in the
 * database and enforces referential integrity with the related auction rooms
 * through cascading deletes or similar strategies.
 *
 * Proper validation ensures calendarEventId corresponds to a valid record. If
 * not found, an error response should be returned.
 *
 * No request body is required since the only input is the calendarEventId path
 * parameter. No response body is returned; the successful deletion is indicated
 * by HTTP status code.
 *
 * This endpoint is typically invoked as part of schedule management features by
 * administrators managing auction rooms and events.
 *
 * @param props.connection
 * @param props.calendarEventId Unique identifier of the calendar event to
 *   delete
 * @path /auctionPlatform/admin/calendarEvents/:calendarEventId
 * @accessor api.functional.auctionPlatform.admin.calendarEvents.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the calendar event to delete */
    calendarEventId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/auctionPlatform/admin/calendarEvents/:calendarEventId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/auctionPlatform/admin/calendarEvents/${encodeURIComponent(props.calendarEventId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("calendarEventId")(() =>
        typia.assert(props.calendarEventId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
