import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAuctionPlatformIconPurchase } from "../../../structures/IAuctionPlatformIconPurchase";
import { IAuctionPlatformPageIAuctionPlatformIconPurchase } from "../../../structures/IAuctionPlatformPageIAuctionPlatformIconPurchase";

/**
 * Search and retrieve paginated icon purchase records.
 *
 * Retrieve a filtered and paginated list of icon purchase records. Supports
 * advanced search conditions such as filtering by user, date ranges, or
 * specific icon codes.
 *
 * Pagination parameters allow clients to control page sizes, navigate pages,
 * and sort results.
 *
 * This operation connects with auction_platform_icon_purchases entities,
 * returning concise summary views optimized for list displays. It is useful for
 * administrative reporting and user history views.
 *
 * No authorization required as this is a public facing operation though
 * sensitive user filtering should be handled carefully in business logic.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for icon
 *   purchases
 * @path /auctionPlatform/iconPurchases
 * @accessor api.functional.auctionPlatform.iconPurchases.searchIconPurchases
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function searchIconPurchases(
  connection: IConnection,
  props: searchIconPurchases.Props,
): Promise<searchIconPurchases.Response> {
  return true === connection.simulate
    ? searchIconPurchases.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...searchIconPurchases.METADATA,
          path: searchIconPurchases.path(),
          status: null,
        },
        props.body,
      );
}
export namespace searchIconPurchases {
  export type Props = {
    /** Search criteria and pagination parameters for icon purchases */
    body: IAuctionPlatformIconPurchase.IRequest;
  };
  export type Body = IAuctionPlatformIconPurchase.IRequest;
  export type Response =
    IAuctionPlatformPageIAuctionPlatformIconPurchase.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/auctionPlatform/iconPurchases",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auctionPlatform/iconPurchases";
  export const random =
    (): IAuctionPlatformPageIAuctionPlatformIconPurchase.ISummary =>
      typia.random<IAuctionPlatformPageIAuctionPlatformIconPurchase.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: searchIconPurchases.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: searchIconPurchases.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve an icon purchase record by ID.
 *
 * Fetch detailed information for a specific icon purchase by its ID.
 *
 * Provides complete purchase details including purchasing user, icon code,
 * points spent, and timestamps.
 *
 * This operation supports user or administrative interfaces requiring detailed
 * purchase views.
 *
 * The iconPurchaseId must be valid to avoid not found errors.
 *
 * @param props.connection
 * @param props.iconPurchaseId Unique identifier of the icon purchase
 * @path /auctionPlatform/iconPurchases/:iconPurchaseId
 * @accessor api.functional.auctionPlatform.iconPurchases.atIconPurchase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atIconPurchase(
  connection: IConnection,
  props: atIconPurchase.Props,
): Promise<atIconPurchase.Response> {
  return true === connection.simulate
    ? atIconPurchase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atIconPurchase.METADATA,
          path: atIconPurchase.path(props),
          status: null,
        },
      );
}
export namespace atIconPurchase {
  export type Props = {
    /** Unique identifier of the icon purchase */
    iconPurchaseId: string & tags.Format<"uuid">;
  };
  export type Response = IAuctionPlatformIconPurchase;

  export const METADATA = {
    method: "GET",
    path: "/auctionPlatform/iconPurchases/:iconPurchaseId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/auctionPlatform/iconPurchases/${encodeURIComponent(props.iconPurchaseId ?? "null")}`;
  export const random = (): IAuctionPlatformIconPurchase =>
    typia.random<IAuctionPlatformIconPurchase>();
  export const simulate = (
    connection: IConnection,
    props: atIconPurchase.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atIconPurchase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("iconPurchaseId")(() => typia.assert(props.iconPurchaseId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
