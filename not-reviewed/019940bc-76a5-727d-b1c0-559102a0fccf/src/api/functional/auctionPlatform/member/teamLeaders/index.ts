import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAuctionPlatformTeamLeader } from "../../../../structures/IAuctionPlatformTeamLeader";
import { IPageIAuctionPlatformTeamLeader } from "../../../../structures/IPageIAuctionPlatformTeamLeader";

/**
 * Search and list auction team leaders.
 *
 * Retrieve a paginated, filtered list of team leaders participating in
 * auctions. Supports complex search and sorting parameters.
 *
 * The results include summary details to aid in managing point allocations and
 * auction participation.
 *
 * This operation reads from the auction_platform_team_leaders table and returns
 * a paginated result set.
 *
 * Only authenticated users with valid roles may access this data.
 *
 * Filtering on available points and member nicknames is supported.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination options for team leaders
 * @path /auctionPlatform/member/teamLeaders
 * @accessor api.functional.auctionPlatform.member.teamLeaders.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination options for team leaders */
    body: IAuctionPlatformTeamLeader.IRequest;
  };
  export type Body = IAuctionPlatformTeamLeader.IRequest;
  export type Response = IPageIAuctionPlatformTeamLeader.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/auctionPlatform/member/teamLeaders",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auctionPlatform/member/teamLeaders";
  export const random = (): IPageIAuctionPlatformTeamLeader.ISummary =>
    typia.random<IPageIAuctionPlatformTeamLeader.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific team leader's details.
 *
 * Retrieve detailed information of a specific team leader by their unique
 * identifier teamLeaderId.
 *
 * This operation returns all relevant data including current points and
 * membership linkage.
 *
 * The teamLeaderId path parameter identifies which team leader to fetch.
 *
 * Access is restricted to authenticated users based on role/ownership.
 *
 * The response contains the full team leader record as defined in the Prisma
 * schema.
 *
 * @param props.connection
 * @param props.teamLeaderId Unique identifier of the team leader to retrieve
 * @path /auctionPlatform/member/teamLeaders/:teamLeaderId
 * @accessor api.functional.auctionPlatform.member.teamLeaders.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the team leader to retrieve */
    teamLeaderId: string & tags.Format<"uuid">;
  };
  export type Response = IAuctionPlatformTeamLeader;

  export const METADATA = {
    method: "GET",
    path: "/auctionPlatform/member/teamLeaders/:teamLeaderId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/auctionPlatform/member/teamLeaders/${encodeURIComponent(props.teamLeaderId ?? "null")}`;
  export const random = (): IAuctionPlatformTeamLeader =>
    typia.random<IAuctionPlatformTeamLeader>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("teamLeaderId")(() => typia.assert(props.teamLeaderId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
