import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAuctionPlatformAuctionCandidate } from "../../../../structures/IAuctionPlatformAuctionCandidate";
import { IAuctionPlatformAuctionCandidates } from "../../../../structures/IAuctionPlatformAuctionCandidates";
import { IPageIAuctionPlatformAuctionCandidates } from "../../../../structures/IPageIAuctionPlatformAuctionCandidates";

/**
 * Create a new auction candidate entry.
 *
 * Register an existing member as a new auction candidate with required profile
 * data.
 *
 * Only authenticated members may perform this creation.
 *
 * The request body must include all mandatory candidate creation properties.
 *
 * The response returns the newly created candidate entity with all details.
 *
 * No path parameters are needed.
 *
 * @param props.connection
 * @param props.body Data required to create a new auction candidate
 * @path /auctionPlatform/member/auctionCandidates
 * @accessor api.functional.auctionPlatform.member.auctionCandidates.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Data required to create a new auction candidate */
    body: IAuctionPlatformAuctionCandidate.ICreate;
  };
  export type Body = IAuctionPlatformAuctionCandidate.ICreate;
  export type Response = IAuctionPlatformAuctionCandidate;

  export const METADATA = {
    method: "POST",
    path: "/auctionPlatform/member/auctionCandidates",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auctionPlatform/member/auctionCandidates";
  export const random = (): IAuctionPlatformAuctionCandidate =>
    typia.random<IAuctionPlatformAuctionCandidate>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve paginated auction candidates list.
 *
 * Retrieve a paginated, filtered list of auction candidates registered in the
 * system. This supports advanced queries including search and sorting,
 * leveraging request body parameters.
 *
 * Access is restricted to authenticated members with the 'member' role to
 * maintain data privacy.
 *
 * The response includes summary information about each candidate optimized for
 * listing.
 *
 * No path parameters are required.
 *
 * @param props.connection
 * @param props.body Filter, search, and pagination parameters for auction
 *   candidates
 * @path /auctionPlatform/member/auctionCandidates
 * @accessor api.functional.auctionPlatform.member.auctionCandidates.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filter, search, and pagination parameters for auction candidates */
    body: IAuctionPlatformAuctionCandidates.IRequest;
  };
  export type Body = IAuctionPlatformAuctionCandidates.IRequest;
  export type Response = IPageIAuctionPlatformAuctionCandidates.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/auctionPlatform/member/auctionCandidates",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auctionPlatform/member/auctionCandidates";
  export const random = (): IPageIAuctionPlatformAuctionCandidates.ISummary =>
    typia.random<IPageIAuctionPlatformAuctionCandidates.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve auction candidate details by ID.
 *
 * Get detailed auction candidate information by unique ID auctionCandidateId
 * provided as path parameter.
 *
 * Only authenticated members with role 'member' may access this data.
 *
 * The response returns the full detailed candidate entity.
 *
 * No request body is required.
 *
 * @param props.connection
 * @param props.auctionCandidateId Unique identifier of the auction candidate
 * @path /auctionPlatform/member/auctionCandidates/:auctionCandidateId
 * @accessor api.functional.auctionPlatform.member.auctionCandidates.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the auction candidate */
    auctionCandidateId: string & tags.Format<"uuid">;
  };
  export type Response = IAuctionPlatformAuctionCandidate;

  export const METADATA = {
    method: "GET",
    path: "/auctionPlatform/member/auctionCandidates/:auctionCandidateId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/auctionPlatform/member/auctionCandidates/${encodeURIComponent(props.auctionCandidateId ?? "null")}`;
  export const random = (): IAuctionPlatformAuctionCandidate =>
    typia.random<IAuctionPlatformAuctionCandidate>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("auctionCandidateId")(() =>
        typia.assert(props.auctionCandidateId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
