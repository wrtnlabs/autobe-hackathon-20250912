import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAuctionPlatformChatMessage } from "../../../../../structures/IAuctionPlatformChatMessage";
import { IPageIAuctionPlatformChatMessage } from "../../../../../structures/IPageIAuctionPlatformChatMessage";

/**
 * Create a new auction platform chat message record.
 *
 * Create a new chat message for the auction platform. The message includes the
 * unique external message ID from Chijijik, the content, sender name, and
 * references to the auction room and team leader.
 *
 * This operation enables real-time chat functionalities by storing incoming
 * chat messages into the platform's persistent storage.
 *
 * Access is restricted to authenticated members to ensure messages are properly
 * attributed and authorized.
 *
 * The response contains the complete chat message entity created, allowing
 * immediate confirmation and display.
 *
 * Message ID uniqueness is enforced to prevent duplicates.
 *
 * @param props.connection
 * @param props.body Data needed to create a new chat message
 * @path /auctionPlatform/member/chat/messages
 * @accessor api.functional.auctionPlatform.member.chat.messages.createChatMessage
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createChatMessage(
  connection: IConnection,
  props: createChatMessage.Props,
): Promise<createChatMessage.Response> {
  return true === connection.simulate
    ? createChatMessage.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createChatMessage.METADATA,
          path: createChatMessage.path(),
          status: null,
        },
        props.body,
      );
}
export namespace createChatMessage {
  export type Props = {
    /** Data needed to create a new chat message */
    body: IAuctionPlatformChatMessage.ICreate;
  };
  export type Body = IAuctionPlatformChatMessage.ICreate;
  export type Response = IAuctionPlatformChatMessage;

  export const METADATA = {
    method: "POST",
    path: "/auctionPlatform/member/chat/messages",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auctionPlatform/member/chat/messages";
  export const random = (): IAuctionPlatformChatMessage =>
    typia.random<IAuctionPlatformChatMessage>();
  export const simulate = (
    connection: IConnection,
    props: createChatMessage.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createChatMessage.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve auction platform chat messages with filters and
 * pagination.
 *
 * Retrieve a paginated list of chat messages for auction platforms. This search
 * operation allows filtering, sorting, and pagination to efficiently manage
 * large volumes of chat messages associated with auction rooms and team
 * leaders.
 *
 * Chat messages are sourced from the auction_platform_chat_messages table,
 * where each message stores the unique Chijijik message ID, content, sender
 * information, and timestamps. Filtering criteria may include auction room,
 * team leader, date ranges, and message contents for comprehensive search
 * capabilities.
 *
 * Access is restricted to authenticated members to protect chat data privacy.
 *
 * This operation is essential for monitoring, auditing, and displaying chat
 * data in real time and historical reviews.
 *
 * @param props.connection
 * @param props.body Filter and pagination properties to search auction platform
 *   chat messages
 * @path /auctionPlatform/member/chat/messages
 * @accessor api.functional.auctionPlatform.member.chat.messages.indexChatMessages
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexChatMessages(
  connection: IConnection,
  props: indexChatMessages.Props,
): Promise<indexChatMessages.Response> {
  return true === connection.simulate
    ? indexChatMessages.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexChatMessages.METADATA,
          path: indexChatMessages.path(),
          status: null,
        },
        props.body,
      );
}
export namespace indexChatMessages {
  export type Props = {
    /**
     * Filter and pagination properties to search auction platform chat
     * messages
     */
    body: IAuctionPlatformChatMessage.IRequest;
  };
  export type Body = IAuctionPlatformChatMessage.IRequest;
  export type Response = IPageIAuctionPlatformChatMessage;

  export const METADATA = {
    method: "PATCH",
    path: "/auctionPlatform/member/chat/messages",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auctionPlatform/member/chat/messages";
  export const random = (): IPageIAuctionPlatformChatMessage =>
    typia.random<IPageIAuctionPlatformChatMessage>();
  export const simulate = (
    connection: IConnection,
    props: indexChatMessages.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexChatMessages.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get auction platform chat message by ID.
 *
 * Retrieve detailed information about a specific chat message identified by its
 * ID. The chat message includes content, sender name, timestamp, auction room
 * association, and team leader association.
 *
 * This single-entity retrieval supports detailed audit and display requirements
 * for chat messages collected from the auction platform's chat system.
 *
 * Access to this operation requires member authentication to protect sensitive
 * communication data.
 *
 * If the ID does not match any message, the response would typically return a
 * not found error.
 *
 * This operation is vital for displaying specific chat message details within
 * auction administrative or monitoring tools.
 *
 * @param props.connection
 * @param props.id Unique identifier of the chat message to retrieve
 * @path /auctionPlatform/member/chat/messages/:id
 * @accessor api.functional.auctionPlatform.member.chat.messages.atChatMessage
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atChatMessage(
  connection: IConnection,
  props: atChatMessage.Props,
): Promise<atChatMessage.Response> {
  return true === connection.simulate
    ? atChatMessage.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atChatMessage.METADATA,
          path: atChatMessage.path(props),
          status: null,
        },
      );
}
export namespace atChatMessage {
  export type Props = {
    /** Unique identifier of the chat message to retrieve */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IAuctionPlatformChatMessage;

  export const METADATA = {
    method: "GET",
    path: "/auctionPlatform/member/chat/messages/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/auctionPlatform/member/chat/messages/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IAuctionPlatformChatMessage =>
    typia.random<IAuctionPlatformChatMessage>();
  export const simulate = (
    connection: IConnection,
    props: atChatMessage.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atChatMessage.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a chat message by ID.
 *
 * Update an existing chat message by its unique ID. This operation allows
 * modifying the content and sender's name of a chat message collected from the
 * Chijijik API. It relates to the auction_platform_chat_messages table where
 * each message is linked to an auction room and a team leader.
 *
 * The update requires authentication with appropriate user roles. Only
 * authorized members can update message content to correct or moderate
 * messages.
 *
 * Parameters include the message UUID path parameter. The request body accepts
 * fields for updating message content and sender details.
 *
 * The response provides the updated chat message with all its properties
 * including message ID and timestamps.
 *
 * Validation includes ensuring the uniqueness of chijijik_message_id and
 * integrity of foreign keys.
 *
 * No deletion is performed by this operation; it strictly updates existing
 * messages.
 *
 * @param props.connection
 * @param props.id Unique identifier of the chat message to update
 * @param props.body Data for updating the chat message
 * @path /auctionPlatform/member/chat/messages/:id
 * @accessor api.functional.auctionPlatform.member.chat.messages.updateChatMessage
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateChatMessage(
  connection: IConnection,
  props: updateChatMessage.Props,
): Promise<updateChatMessage.Response> {
  return true === connection.simulate
    ? updateChatMessage.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateChatMessage.METADATA,
          path: updateChatMessage.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateChatMessage {
  export type Props = {
    /** Unique identifier of the chat message to update */
    id: string & tags.Format<"uuid">;

    /** Data for updating the chat message */
    body: IAuctionPlatformChatMessage.IUpdate;
  };
  export type Body = IAuctionPlatformChatMessage.IUpdate;
  export type Response = IAuctionPlatformChatMessage;

  export const METADATA = {
    method: "PUT",
    path: "/auctionPlatform/member/chat/messages/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/auctionPlatform/member/chat/messages/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IAuctionPlatformChatMessage =>
    typia.random<IAuctionPlatformChatMessage>();
  export const simulate = (
    connection: IConnection,
    props: updateChatMessage.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateChatMessage.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
