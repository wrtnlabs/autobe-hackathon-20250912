import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAuctionPlatformBid } from "../../../../structures/IAuctionPlatformBid";
import { IAuctionPlatformBids } from "../../../../structures/IAuctionPlatformBids";
import { IPageIAuctionPlatformBids } from "../../../../structures/IPageIAuctionPlatformBids";

/**
 * Create a new auction bid record for a team leader bidding on an auction
 * candidate within a specific auction room. The request must include the
 * auction room ID, candidate ID, team leader ID, bid points, and the bid time.
 *
 * This operation is restricted to authenticated users authorized to participate
 * in bidding. Server-side business logic should validate bidding rules such as
 * point availability and bid validity.
 *
 * Upon success, the created bid record with all associated fields is returned.
 *
 * The API expects a JSON request body conforming to the
 * IAuctionPlatformBid.ICreate interface, without requiring fields generated by
 * the system like bid ID or timestamps.
 *
 * @param props.connection
 * @param props.body Bid creation data including auction room, candidate, team
 *   leader, points, and time
 * @path /auctionPlatform/member/bids
 * @accessor api.functional.auctionPlatform.member.bids.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Bid creation data including auction room, candidate, team leader,
     * points, and time
     */
    body: IAuctionPlatformBid.ICreate;
  };
  export type Body = IAuctionPlatformBid.ICreate;
  export type Response = IAuctionPlatformBid;

  export const METADATA = {
    method: "POST",
    path: "/auctionPlatform/member/bids",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auctionPlatform/member/bids";
  export const random = (): IAuctionPlatformBid =>
    typia.random<IAuctionPlatformBid>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and list paginated auction bids with filters.
 *
 * Retrieve a paginated list of auction bids applying filtering, sorting, and
 * pagination as per request criteria.
 *
 * Supports filtering by auction room, candidate, team leader, time ranges, and
 * winning status.
 *
 * This operation returns summary information including bid amounts, times, and
 * bidder details.
 *
 * Authorization requires authenticated member access.
 *
 * Related operations include single bid retrieval and bid creation (via
 * chat/sponsorship).
 *
 * Errors may include invalid filters or access denial.
 *
 * @param props.connection
 * @param props.body Bid filtering and pagination criteria
 * @path /auctionPlatform/member/bids
 * @accessor api.functional.auctionPlatform.member.bids.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Bid filtering and pagination criteria */
    body: IAuctionPlatformBids.IRequest;
  };
  export type Body = IAuctionPlatformBids.IRequest;
  export type Response = IPageIAuctionPlatformBids.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/auctionPlatform/member/bids",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auctionPlatform/member/bids";
  export const random = (): IPageIAuctionPlatformBids.ISummary =>
    typia.random<IPageIAuctionPlatformBids.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a bid by its unique ID.
 *
 * Retrieve detailed information for a specific bid by its unique identifier
 * from the auction system. This includes details such as the auction room the
 * bid belongs to, the auction candidate targeted, the bidding team leader, the
 * number of points bid, the bid timestamp, and the winning status.
 *
 * The operation requires authentication and is typically accessible to
 * authorized users like team leaders and administrators. It allows monitoring
 * and analyzing individual bid records.
 *
 * This operation directly maps to the 'auction_platform_bids' table in the
 * Prisma schema, utilizing the unique bid identifier. It returns a
 * comprehensive set of fields representing the bid state.
 *
 * The endpoint returns the bid data or a not found error if the specified bid
 * does not exist. No request body is required. Path parameter 'bidId' must be a
 * valid UUID representing the bid's unique id.
 *
 * @param props.connection
 * @param props.bidId Unique identifier of the bid to retrieve
 * @path /auctionPlatform/member/bids/:bidId
 * @accessor api.functional.auctionPlatform.member.bids.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the bid to retrieve */
    bidId: string & tags.Format<"uuid">;
  };
  export type Response = IAuctionPlatformBid;

  export const METADATA = {
    method: "GET",
    path: "/auctionPlatform/member/bids/:bidId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/auctionPlatform/member/bids/${encodeURIComponent(props.bidId ?? "null")}`;
  export const random = (): IAuctionPlatformBid =>
    typia.random<IAuctionPlatformBid>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("bidId")(() => typia.assert(props.bidId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a bid by its unique ID.
 *
 * Update details of an existing bid identified by its unique ID. This allows
 * changing bid attributes including auction room, candidate, team leader, bid
 * point amount, timestamp, and whether it is the winning bid.
 *
 * Only authorized users may update bids. Proper validation of input data is
 * required.
 *
 * The request body must comply with IAuctionPlatformBid.IUpdate interface. No
 * partial updates are implied; the full update object is expected.
 *
 * Response returns the updated bid record reflecting applied changes.
 *
 * @param props.connection
 * @param props.bidId Unique identifier of the bid to update
 * @param props.body Bid update data conforming to IAuctionPlatformBid.IUpdate
 * @path /auctionPlatform/member/bids/:bidId
 * @accessor api.functional.auctionPlatform.member.bids.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the bid to update */
    bidId: string & tags.Format<"uuid">;

    /** Bid update data conforming to IAuctionPlatformBid.IUpdate */
    body: IAuctionPlatformBid.IUpdate;
  };
  export type Body = IAuctionPlatformBid.IUpdate;
  export type Response = IAuctionPlatformBid;

  export const METADATA = {
    method: "PUT",
    path: "/auctionPlatform/member/bids/:bidId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/auctionPlatform/member/bids/${encodeURIComponent(props.bidId ?? "null")}`;
  export const random = (): IAuctionPlatformBid =>
    typia.random<IAuctionPlatformBid>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("bidId")(() => typia.assert(props.bidId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a bid by its unique ID.
 *
 * Permanently remove an existing bid record identified by its unique ID from
 * the auction platform database.
 *
 * This operation performs a hard delete as no soft deletion mechanism is
 * defined. The bid and all its data will be irreversibly deleted.
 *
 * Only authorized users or administrators can invoke this operation.
 *
 * No request body is required. No response body is returned after successful
 * deletion.
 *
 * Attempting to delete a non-existent bid should result in an appropriate error
 * response.
 *
 * @param props.connection
 * @param props.bidId Unique identifier of the bid to delete
 * @path /auctionPlatform/member/bids/:bidId
 * @accessor api.functional.auctionPlatform.member.bids.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the bid to delete */
    bidId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/auctionPlatform/member/bids/:bidId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/auctionPlatform/member/bids/${encodeURIComponent(props.bidId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("bidId")(() => typia.assert(props.bidId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
