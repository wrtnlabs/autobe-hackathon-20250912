import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAuctionPlatformMember } from "../../../../structures/IAuctionPlatformMember";
import { IPageIAuctionPlatformMember } from "../../../../structures/IPageIAuctionPlatformMember";

/**
 * Search and retrieve a filtered, paginated list of auction platform members.
 *
 * Retrieve a filtered and paginated list of registered auction platform members
 * (team leaders) with search and sorting support. This endpoint allows
 * authenticated users to obtain summaries of member information relevant to
 * auction participation.
 *
 * This operation integrates with the 'auction_platform_members' Prisma table,
 * utilizing fields such as email and nickname for filtering and display.
 *
 * Security is enforced by requiring authentication with role 'member'. Returned
 * data excludes sensitive information like password hashes.
 *
 * This operation is useful for UI components listing team leaders and supports
 * pagination controls to handle large datasets.
 *
 * Error handling includes validation of request parameters and appropriate
 * response for unauthorized access.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for member
 *   filtering
 * @path /auctionPlatform/member/members
 * @accessor api.functional.auctionPlatform.member.members.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for member filtering */
    body: IAuctionPlatformMember.IRequest;
  };
  export type Body = IAuctionPlatformMember.IRequest;
  export type Response = IPageIAuctionPlatformMember.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/auctionPlatform/member/members",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auctionPlatform/member/members";
  export const random = (): IPageIAuctionPlatformMember.ISummary =>
    typia.random<IPageIAuctionPlatformMember.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a specific auction platform member.
 *
 * Retrieves full details about a specific registered member (team leader) using
 * a unique member ID.
 *
 * This operation queries the 'auction_platform_members' Prisma table, pulling
 * fields such as email, nickname, and audit timestamps.
 *
 * Authentication is required with role 'member'.
 *
 * Errors are returned if the member does not exist or if access is
 * unauthorized.
 *
 * Useful for detailed member profile views in client applications.
 *
 * @param props.connection
 * @param props.memberId Unique identifier of the target member
 * @path /auctionPlatform/member/members/:memberId
 * @accessor api.functional.auctionPlatform.member.members.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target member */
    memberId: string & tags.Format<"uuid">;
  };
  export type Response = IAuctionPlatformMember;

  export const METADATA = {
    method: "GET",
    path: "/auctionPlatform/member/members/:memberId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/auctionPlatform/member/members/${encodeURIComponent(props.memberId ?? "null")}`;
  export const random = (): IAuctionPlatformMember =>
    typia.random<IAuctionPlatformMember>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific auction platform member's information.
 *
 * Update mutable fields of a specific registered member (team leader)
 * identified by memberId.
 *
 * This operation updates the 'auction_platform_members' Prisma table fields
 * such as nickname.
 *
 * Authentication with role 'member' is required.
 *
 * Includes validation of UUID memberId path parameter and input data.
 *
 * Updates result in returning the modified member info.
 *
 * Errors include access denied and invalid member ID.
 *
 * Useful for profile update forms or administrative tools.
 *
 * @param props.connection
 * @param props.memberId Unique identifier of the target member
 * @param props.body Updated member data for modification
 * @path /auctionPlatform/member/members/:memberId
 * @accessor api.functional.auctionPlatform.member.members.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target member */
    memberId: string & tags.Format<"uuid">;

    /** Updated member data for modification */
    body: IAuctionPlatformMember.IUpdate;
  };
  export type Body = IAuctionPlatformMember.IUpdate;
  export type Response = IAuctionPlatformMember;

  export const METADATA = {
    method: "PUT",
    path: "/auctionPlatform/member/members/:memberId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/auctionPlatform/member/members/${encodeURIComponent(props.memberId ?? "null")}`;
  export const random = (): IAuctionPlatformMember =>
    typia.random<IAuctionPlatformMember>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specific auction platform member.
 *
 * Permanently removes the specified member (team leader) from the auction
 * platform database.
 *
 * This operation deletes the member record in the 'auction_platform_members'
 * Prisma table.
 *
 * Authentication with role 'member' is required.
 *
 * Deletes are hard and irreversible; all associated data is removed.
 *
 * Errors are returned if the member ID is invalid or not found.
 *
 * Intended for administrative or self-service account deletion scenarios.
 *
 * @param props.connection
 * @param props.memberId Unique identifier of the target member
 * @path /auctionPlatform/member/members/:memberId
 * @accessor api.functional.auctionPlatform.member.members.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target member */
    memberId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/auctionPlatform/member/members/:memberId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/auctionPlatform/member/members/${encodeURIComponent(props.memberId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
