import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAuctionPlatformIconPurchase } from "../../../../structures/IAuctionPlatformIconPurchase";

/**
 * Create a new calendar icon purchase record associating a purchased icon with
 * a registered member. This enables users to customize their calendar event
 * appearance by buying icons using platform points.
 *
 * The operation inserts a validated record into the
 * auction_platform_icon_purchases table with user ID, icon code, and points
 * spent.
 *
 * The authorization requires authenticated member access to ensure only valid
 * users can make purchases.
 *
 * Proper error handling includes checks for user existence, sufficient points,
 * and valid icon codes.
 *
 * Returns the created icon purchase record with its details for client display
 * and confirmation.
 *
 * @param props.connection
 * @param props.body Payload containing user ID, icon code, and purchase points
 *   for the new icon purchase
 * @path /auctionPlatform/member/iconPurchases
 * @accessor api.functional.auctionPlatform.member.iconPurchases.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Payload containing user ID, icon code, and purchase points for the
     * new icon purchase
     */
    body: IAuctionPlatformIconPurchase.ICreate;
  };
  export type Body = IAuctionPlatformIconPurchase.ICreate;
  export type Response = IAuctionPlatformIconPurchase;

  export const METADATA = {
    method: "POST",
    path: "/auctionPlatform/member/iconPurchases",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auctionPlatform/member/iconPurchases";
  export const random = (): IAuctionPlatformIconPurchase =>
    typia.random<IAuctionPlatformIconPurchase>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing calendar icon purchase record identified by the
 * iconPurchaseId path parameter. Allows modification of icon purchase details.
 *
 * Ensures that the icon purchase exists and that the requesting member has
 * authorization to modify it.
 *
 * Reflects updated fields and timestamps in the response.
 *
 * Relates to user customization workflows for calendar event icons.
 *
 * This operation requires authenticated member access.
 *
 * @param props.connection
 * @param props.iconPurchaseId Unique identifier of the icon purchase to update
 * @param props.body Fields to update in the icon purchase record
 * @path /auctionPlatform/member/iconPurchases/:iconPurchaseId
 * @accessor api.functional.auctionPlatform.member.iconPurchases.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the icon purchase to update */
    iconPurchaseId: string & tags.Format<"uuid">;

    /** Fields to update in the icon purchase record */
    body: IAuctionPlatformIconPurchase.IUpdate;
  };
  export type Body = IAuctionPlatformIconPurchase.IUpdate;
  export type Response = IAuctionPlatformIconPurchase;

  export const METADATA = {
    method: "PUT",
    path: "/auctionPlatform/member/iconPurchases/:iconPurchaseId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/auctionPlatform/member/iconPurchases/${encodeURIComponent(props.iconPurchaseId ?? "null")}`;
  export const random = (): IAuctionPlatformIconPurchase =>
    typia.random<IAuctionPlatformIconPurchase>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("iconPurchaseId")(() => typia.assert(props.iconPurchaseId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a calendar icon purchase permanently.
 *
 * Permanently delete a calendar icon purchase record by its unique identifier.
 * This removes user customization of calendar icons.
 *
 * Authorization checks prevent unauthorized deletion.
 *
 * No response body is returned upon successful deletion.
 *
 * This operation corresponds to the auction_platform_icon_purchases table in
 * the database schema.
 *
 * @param props.connection
 * @param props.iconPurchaseId Unique identifier of the icon purchase to delete
 * @path /auctionPlatform/member/iconPurchases/:iconPurchaseId
 * @accessor api.functional.auctionPlatform.member.iconPurchases.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the icon purchase to delete */
    iconPurchaseId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/auctionPlatform/member/iconPurchases/:iconPurchaseId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/auctionPlatform/member/iconPurchases/${encodeURIComponent(props.iconPurchaseId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("iconPurchaseId")(() => typia.assert(props.iconPurchaseId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
