import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

/**
 * Delete specific point balance record by ID.
 *
 * This operation permanently deletes the point balance record identified by the
 * provided pointBalanceId from the auction platform's point balances. The point
 * balance represents the allocated and used auction points for a team leader
 * within a specific auction room, crucial for managing bidding limits.
 *
 * Access is limited to authenticated members to prevent unauthorized
 * modifications. Deleting this record removes all information about the user's
 * point allocation and usage in the corresponding auction.
 *
 * The operation requires a valid UUID identifying the point balance record and
 * responds with no content upon successful deletion.
 *
 * @param props.connection
 * @param props.pointBalanceId Unique identifier of the point balance record to
 *   delete
 * @path /auctionPlatform/member/pointBalances/:pointBalanceId
 * @accessor api.functional.auctionPlatform.member.pointBalances.erasePointBalance
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erasePointBalance(
  connection: IConnection,
  props: erasePointBalance.Props,
): Promise<void> {
  return true === connection.simulate
    ? erasePointBalance.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erasePointBalance.METADATA,
          path: erasePointBalance.path(props),
          status: null,
        },
      );
}
export namespace erasePointBalance {
  export type Props = {
    /** Unique identifier of the point balance record to delete */
    pointBalanceId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/auctionPlatform/member/pointBalances/:pointBalanceId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/auctionPlatform/member/pointBalances/${encodeURIComponent(props.pointBalanceId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erasePointBalance.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erasePointBalance.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("pointBalanceId")(() => typia.assert(props.pointBalanceId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
