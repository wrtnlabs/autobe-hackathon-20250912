import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAuctionPlatformGuest } from "../../../../structures/IAuctionPlatformGuest";

/**
 * Create new guest account and issue temporary tokens
 * (auction_platform_guests).
 *
 * Creates a new guest account for unauthenticated users with limited access
 * rights. Stores guest email and optional nickname, with lifecycle timestamps.
 * Issues temporary JWT tokens to manage guest sessions and access levels.
 * Uniqueness of email is enforced to prevent duplicate guest registrations.
 *
 * This operation corresponds to the auction_platform_guests table, referencing
 * fields: email (unique), nickname (optional), created_at, updated_at,
 * deleted_at.
 *
 * Guest users cannot perform login as they do not authenticate with credentials
 * but can refresh tokens for continued access.
 *
 * Related: refresh operation to renew token access.
 *
 * Ensures security by restricting guest token scope to limited permissions
 * only.
 *
 * The endpoint is public and does not require authentication.
 *
 * It is part of the essential operations for the guest role kind.
 *
 * @param props.connection
 * @param props.body Information required to create a guest account
 * @setHeader token.access Authorization
 *
 * @path /auth/guest/join
 * @accessor api.functional.auth.guest.join.joinGuest
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function joinGuest(
  connection: IConnection,
  props: joinGuest.Props,
): Promise<joinGuest.Response> {
  const output: joinGuest.Response =
    true === connection.simulate
      ? joinGuest.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...joinGuest.METADATA,
            path: joinGuest.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace joinGuest {
  export type Props = {
    /** Information required to create a guest account */
    body: IAuctionPlatformGuest.ICreate;
  };
  export type Body = IAuctionPlatformGuest.ICreate;
  export type Response = IAuctionPlatformGuest.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/guest/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/guest/join";
  export const random = (): IAuctionPlatformGuest.IAuthorized =>
    typia.random<IAuctionPlatformGuest.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: joinGuest.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: joinGuest.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
