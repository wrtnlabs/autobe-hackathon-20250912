import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAuctionPlatformGuest } from "../../../../structures/IAuctionPlatformGuest";

/**
 * Refresh tokens to renew guest access (auction_platform_guests).
 *
 * Refreshes temporary access tokens for guest users by validating the provided
 * refresh token. Issues new access and refresh tokens with updated expirations.
 * Ensures session continuity for guests without requiring login credentials.
 *
 * References auction_platform_guests context for token validation and claims.
 *
 * Accessible only to authenticated guests holding valid refresh tokens.
 *
 * Related to the join operation for initial registration and token issuance.
 *
 * Security enforced by token validation and guest access scope limitations.
 *
 * Essential for maintaining guest session lifecycle.
 *
 * @param props.connection
 * @param props.body Refresh token information for guests
 * @setHeader token.access Authorization
 *
 * @path /auth/guest/refresh
 * @accessor api.functional.auth.guest.refresh.refreshGuest
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refreshGuest(
  connection: IConnection,
  props: refreshGuest.Props,
): Promise<refreshGuest.Response> {
  const output: refreshGuest.Response =
    true === connection.simulate
      ? refreshGuest.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refreshGuest.METADATA,
            path: refreshGuest.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refreshGuest {
  export type Props = {
    /** Refresh token information for guests */
    body: IAuctionPlatformGuest.IRefresh;
  };
  export type Body = IAuctionPlatformGuest.IRefresh;
  export type Response = IAuctionPlatformGuest.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/guest/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/guest/refresh";
  export const random = (): IAuctionPlatformGuest.IAuthorized =>
    typia.random<IAuctionPlatformGuest.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refreshGuest.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refreshGuest.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
