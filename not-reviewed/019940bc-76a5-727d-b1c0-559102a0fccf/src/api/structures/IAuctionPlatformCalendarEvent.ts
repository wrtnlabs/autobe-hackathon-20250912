import { tags } from "typia";

/**
 * Detailed information about a single auction calendar event.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAuctionPlatformCalendarEvent = {
  /** Unique identifier for the calendar event */
  id: string & tags.Format<"uuid">;

  /** Reference to the linked auction room */
  auction_platform_auction_room_id: string & tags.Format<"uuid">;

  /** Title or name of the calendar event */
  title: string & tags.MaxLength<255>;

  /** Mandatory start date/time in ISO 8601 format */
  start_at: string & tags.Format<"date-time">;

  /** Optional end date/time in ISO 8601 format; null if event ongoing */
  end_at?: (string & tags.Format<"date-time">) | null | undefined;

  /** Record creation timestamp */
  created_at: string & tags.Format<"date-time">;

  /** Last record update timestamp */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp, null if active */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IAuctionPlatformCalendarEvent {
  /** Properties required to create a new auction calendar event. */
  export type ICreate = {
    /** Reference to the linked auction room */
    auction_platform_auction_room_id: string & tags.Format<"uuid">;

    /** Title or name of the calendar event */
    title: string & tags.MaxLength<255>;

    /** Mandatory start date/time in ISO 8601 format */
    start_at: string & tags.Format<"date-time">;

    /** Optional end date/time in ISO 8601 format; null if event ongoing */
    end_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /** Properties allowed for updating an auction calendar event. */
  export type IUpdate = {
    /** Reference to the linked auction room */
    auction_platform_auction_room_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /** Title or name of the calendar event */
    title?: string | null | undefined;

    /** Mandatory start date/time in ISO 8601 format */
    start_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** Optional end date/time in ISO 8601 format; null if event ongoing */
    end_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
