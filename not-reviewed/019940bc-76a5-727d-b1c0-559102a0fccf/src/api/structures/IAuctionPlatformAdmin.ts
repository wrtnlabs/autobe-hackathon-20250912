import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Admin user entity with secure credentials and audit timestamps. Stores unique
 * email, hashed password, optional nickname, and soft deletion status.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAuctionPlatformAdmin = {
  /** Unique ID of the admin user. */
  id: string & tags.Format<"uuid">;

  /**
   * Admin's unique email address used for authentication and notifications.
   *
   * Must be a valid email format.
   */
  email: string;

  /**
   * Secure hashed password for administrator login.
   *
   * This is stored securely and should never be exposed in responses.
   */
  password_hash: string;

  /**
   * Admin display nickname for identification in admin tools and logs.
   *
   * Nullable, may be null if not set.
   */
  nickname?: string | null | undefined;

  /**
   * Timestamp when the admin record was created for auditing.
   *
   * ISO 8601 datetime format.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of last update on the admin record for audit tracking.
   *
   * ISO 8601 datetime format.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft deletion timestamp indicating admin deactivation; null if active.
   *
   * Nullable to represent active status. ISO 8601 datetime format or null.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IAuctionPlatformAdmin {
  /** Request body for creating a new admin user (registration). */
  export type ICreate = {
    /** Admin's unique email. */
    email: string & tags.Format<"email">;

    /** Plaintext password for registration. */
    password: string;

    /** Optional nickname for display. */
    nickname?: string | null | undefined;
  };

  /**
   * Login request for administrator user containing email and password for
   * authentication.
   */
  export type ILogin = {
    /** Admin email for login purpose */
    email: string;

    /** Admin password for login purpose */
    password: string;
  };

  /**
   * Request structure for refreshing administrator JWT tokens using a valid
   * refresh token.
   */
  export type IRefresh = {
    /** Refresh token string used to obtain new JWT tokens */
    refresh_token: string;
  };

  /** Authorization response containing JWT token for administrator user. */
  export type IAuthorized = {
    /** Unique identifier of the admin */
    id: string & tags.Format<"uuid">;

    /**
     * Admin's unique email address used for authentication and
     * notifications.
     *
     * Must be a valid email format.
     */
    email: string;

    /**
     * Secure hashed password for administrator login.
     *
     * This is stored securely and should never be exposed in responses.
     */
    password_hash: string;

    /**
     * Admin display nickname for identification in admin tools and logs.
     *
     * Nullable, may be null if not set.
     */
    nickname?: string | null | undefined;

    /**
     * Timestamp when the admin record was created for auditing.
     *
     * ISO 8601 datetime format.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp of last update on the admin record for audit tracking.
     *
     * ISO 8601 datetime format.
     */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Soft deletion timestamp indicating admin deactivation; null if
     * active.
     *
     * Nullable to represent active status. ISO 8601 datetime format or
     * null.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /** Request schema for filtering and paginating auction platform admin users. */
  export type IRequest = {
    /**
     * Search filter: optional partial or full match by email.
     *
     * Nullable for optional filtering.
     */
    email?: string | null | undefined;

    /**
     * Search filter: optional partial or full match by nickname.
     *
     * Nullable if no filter is applied.
     */
    nickname?: string | null | undefined;

    /** Optional paging: page number, unsigned 32-bit integer. */
    page?: number | null | undefined;

    /** Optional paging: number of records per page, unsigned 32-bit integer. */
    limit?: number | null | undefined;
  };

  /** Update schema for auction platform admin user profile. */
  export type IUpdate = {
    /**
     * Admin display nickname for identification in admin tools and logs.
     *
     * Nullable to allow removing or changing it.
     */
    nickname?: string | null | undefined;
  };

  /**
   * Summary view of an administrative user excluding sensitive authentication
   * data.
   *
   * Includes unique ID, email, optional nickname, and audit timestamps.
   *
   * Used for display in paginated lists and administrative dashboards.
   */
  export type ISummary = {
    /** Unique identifier of the administrator user */
    id: string & tags.Format<"uuid">;

    /** Administrator's unique email address */
    email: string;

    /** Admin display nickname for identification in admin tools and logs */
    nickname?: string | null | undefined;

    /** Timestamp when the admin record was created for auditing */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp of last update on the admin record for audit tracking */
    updated_at: string & tags.Format<"date-time">;
  };
}
