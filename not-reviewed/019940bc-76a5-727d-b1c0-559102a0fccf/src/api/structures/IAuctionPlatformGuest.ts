import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Guest user identities allowing limited view-only access without login
 * credentials; primarily tracked by email and nickname. Includes timestamps for
 * creation and soft deletion enabling audit and recovery.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAuctionPlatformGuest = {
  /** Primary Key unique identifier for the guest user. */
  id: string & tags.Format<"uuid">;

  /**
   * Guest user's email address for identification and notifications. Unique
   * to ensure no duplicate guest records.
   */
  email: string;

  /**
   * Guest display nickname visible on platform chats and leaderboards.
   * Nullable.
   */
  nickname?: string | null | undefined;

  /** Record creation timestamp for auditing purposes. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp for the latest update of the guest record. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft deletion timestamp; null if active. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IAuctionPlatformGuest {
  /**
   * Request body schema to create a guest user account with unique email and
   * optional nickname.
   *
   * Fields id, created_at, updated_at, and deleted_at are managed internally
   * and not provided in the request.
   */
  export type ICreate = {
    /**
     * Guest user's email address for identification and notifications.
     * Unique to ensure no duplicate guest records.
     */
    email: string;

    /** Guest display nickname visible on platform chats and leaderboards. */
    nickname?: string | null | undefined;
  };

  /**
   * Request body schema for refreshing guest user tokens using a valid
   * refresh token.
   */
  export type IRefresh = {
    /**
     * Refresh token used to obtain new access tokens. Required for token
     * renewal.
     */
    refresh_token: string;
  };

  /**
   * Authorization response containing JWT tokens for the guest user after
   * successful authentication or registration.
   */
  export type IAuthorized = {
    /** Unique identifier of the authenticated guest user. */
    id: string & tags.Format<"uuid">;

    /**
     * Guest user's email address for identification and notifications.
     * Unique to ensure no duplicate guest records.
     */
    email: string;

    /**
     * Guest display nickname visible on platform chats and leaderboards.
     * Nullable.
     */
    nickname?: string | null | undefined;

    /** Record creation timestamp for auditing purposes. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp for the latest update of the guest record. */
    updated_at: string & tags.Format<"date-time">;

    /** Soft deletion timestamp; null if active. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /** Search criteria and pagination parameters for filtering guest users. */
  export type IRequest = {
    /** Page number. */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /** Limitation of records per a page. */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Guest user's email address for identification and notifications.
     * Unique to ensure no duplicate guest records.
     */
    email?: (string & tags.Format<"email">) | null | undefined;

    /** Guest display nickname visible on platform chats and leaderboards. */
    nickname?: string | null | undefined;

    /** Sorting field name. */
    sort_by?: string | null | undefined;
  };

  /**
   * Request body to update existing guest user details such as email and
   * nickname.
   */
  export type IUpdate = {
    /**
     * Guest user's email address for identification and notifications.
     * Unique to ensure no duplicate guest records.
     */
    email?: string | undefined;

    /**
     * Guest display nickname visible on platform chats and leaderboards.
     * Nullable.
     */
    nickname?: string | null | undefined;
  };

  /**
   * Summary information for a guest user including unique identifier and
   * email. Nickname may be null.
   */
  export type ISummary = {
    /** Primary Key. */
    id: string & tags.Format<"uuid">;

    /**
     * Guest user's email address for identification and notifications.
     * Unique to ensure no duplicate guest records.
     */
    email: string;

    /** Guest display nickname visible on platform chats and leaderboards. */
    nickname?: string | null | undefined;
  };
}
