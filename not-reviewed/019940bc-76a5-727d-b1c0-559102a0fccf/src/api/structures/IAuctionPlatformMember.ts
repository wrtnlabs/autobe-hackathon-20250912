import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Registered members (team leaders) authorized to bid in auctions. Stores
 * authentication data including password hash and unique email. Maintains point
 * of contact and display nickname. Includes timestamps and soft deletion to
 * enable auditing and account lifecycle management.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAuctionPlatformMember = {
  /** Primary Key unique identifier for the member user. */
  id: string & tags.Format<"uuid">;

  /** Member's unique email address used for login and notifications. */
  email: string;

  /**
   * Hashed password for secure authentication processes. Not stored in
   * plaintext.
   */
  password_hash: string;

  /** Member's display nickname on platform and auction chats. Nullable. */
  nickname?: string | null | undefined;

  /** Account creation timestamp for audit trail. */
  created_at: string & tags.Format<"date-time">;

  /** Last update timestamp for account data. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft deletion timestamp indicating account deactivation; null if active. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IAuctionPlatformMember {
  /**
   * Request body schema for new member registration including email,
   * plaintext password, and optional nickname.
   *
   * The password field must be provided by the client in plaintext and will
   * be hashed by the server.
   */
  export type ICreate = {
    /** Member's unique email address used for login and notifications. */
    email: string;

    /**
     * Password in plaintext for initial registration, will be hashed by the
     * system.
     */
    password: string;

    /** Member's display nickname on platform and auction chats. */
    nickname?: string | null | undefined;
  };

  /**
   * Authorization response containing JWT tokens.
   *
   * Returned upon successful login or token refresh.
   */
  export type IAuthorized = {
    /** Member's unique identifier. */
    id: string & tags.Format<"uuid">;

    /** Member's unique email address used for login and notifications. */
    email: string;

    /**
     * Hashed password for secure authentication processes. Not stored in
     * plaintext.
     */
    password_hash: string;

    /** Member's display nickname on platform and auction chats. Nullable. */
    nickname?: string | null | undefined;

    /** Account creation timestamp for audit trail. */
    created_at: string & tags.Format<"date-time">;

    /** Last update timestamp for account data. */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Soft deletion timestamp indicating account deactivation; null if
     * active.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT access token string for authenticated API calls. */
    access_token?: string | undefined;

    /** Refresh token string allowing token renewal. */
    refresh_token?: string | undefined;

    /** Optional token expiration timestamp in ISO 8601 date-time. */
    expires_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /** Request body for member login operation. */
  export type ILogin = {
    /** Member's email address for authentication. */
    email: string & tags.Format<"email">;

    /** Plaintext password for authentication. */
    password: string;
  };

  /** Request body for member token refresh. */
  export type IRefresh = {
    /** Refresh token string for obtaining new access token. */
    refresh_token: string;
  };

  /** Request type for searching and paginating auction platform members. */
  export type IRequest = {
    /** Page number. */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /** Limitation of records per a page. */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /** Search keyword for member filtering. */
    search?: string | null | undefined;

    /** Sorting criteria. */
    sort?: string | null | undefined;
  };

  /** Request body for updating member user details; supports partial updates. */
  export type IUpdate = {
    /** Member's unique email address used for login and notifications. */
    email?: string | undefined;

    /**
     * Hashed password for secure authentication processes. Not stored in
     * plaintext.
     */
    password_hash?: string | undefined;

    /** Member's display nickname on platform and auction chats. Nullable. */
    nickname?: string | null | undefined;

    /**
     * Soft deletion timestamp indicating account deactivation; null if
     * active.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Summary information for a member user (team leader) with unique email and
   * display nickname.
   */
  export type ISummary = {
    /** Primary Key. */
    id: string & tags.Format<"uuid">;

    /** Member's unique email address used for login and notifications. */
    email: string;

    /** Member's display nickname on platform and auction chats. */
    nickname?: string | null | undefined;
  };
}
