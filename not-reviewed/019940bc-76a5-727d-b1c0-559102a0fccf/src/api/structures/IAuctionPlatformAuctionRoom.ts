import { tags } from "typia";

/**
 * Auction room information managed per streamer with schedule data and auction
 * lifecycle status. This entity tracks start/end times, status, and auditing
 * timestamps.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAuctionPlatformAuctionRoom = {
  /**
   * Primary Key.
   *
   * Unique identifier of the auction room in UUID format.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Name of the streamer who owns this auction room.
   *
   * Used to identify the auction room by streamer's unique name.
   */
  streamer_name: string;

  /**
   * Scheduled start time of the auction room.
   *
   * ISO 8601 date-time string representing when the auction begins.
   */
  start_time: string & tags.Format<"date-time">;

  /**
   * Optional scheduled end time of the auction room.
   *
   * ISO 8601 date-time string or null if no end time is specified.
   */
  end_time?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Status of the auction room.
   *
   * A value such as "open", "closed", "pending" representing auction
   * lifecycle state.
   */
  status: string;

  /**
   * Record creation timestamp.
   *
   * ISO 8601 date-time string when the record was created.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Record last updated timestamp.
   *
   * ISO 8601 date-time string when the record was last updated.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft delete timestamp for marking deletion.
   *
   * ISO 8601 date-time string or null if not deleted.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IAuctionPlatformAuctionRoom {
  /**
   * Request schema for filtering, searching, pagination and sorting auction
   * rooms.
   */
  export type IRequest = {
    /**
     * Filter by streamer name substring search.
     *
     * Nullable for optional filtering.
     */
    streamer_name?: string | null | undefined;

    /**
     * Filter by status substring search.
     *
     * Nullable for optional filtering.
     */
    status?: string | null | undefined;

    /**
     * Filter by start time minimum (inclusive).
     *
     * ISO 8601 date-time format. Nullable to allow no lower bound.
     */
    start_time_gte?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Filter by start time maximum (inclusive).
     *
     * ISO 8601 date-time format. Nullable to allow no upper bound.
     */
    start_time_lte?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Filter by end time minimum (inclusive).
     *
     * ISO 8601 date-time format. Nullable for optional filtering.
     */
    end_time_gte?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Filter by end time maximum (inclusive).
     *
     * ISO 8601 date-time format. Nullable.
     */
    end_time_lte?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Pagination parameters: page number.
     *
     * Unsigned 32-bit integer. Nullable.
     */
    page?: number | null | undefined;

    /**
     * Pagination parameters: number of records per page.
     *
     * Unsigned 32-bit integer. Nullable.
     */
    limit?: number | null | undefined;

    /**
     * Sort by multiple fields with direction - can be comma separated list.
     * Nullable. Example: "start_time:desc,status:asc"
     */
    sort?: string | null | undefined;
  };

  /** Request body for creating a new auction room. */
  export type ICreate = {
    /**
     * Name of the streamer who owns this auction room.
     *
     * Mandatory for creating a new auction room.
     */
    streamer_name: string;

    /**
     * Scheduled start time of the auction room.
     *
     * Mandatory ISO 8601 date-time string.
     */
    start_time: string & tags.Format<"date-time">;

    /**
     * Optional scheduled end time of the auction room.
     *
     * ISO 8601 date-time string or null if no end time is specified.
     */
    end_time?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Status of the auction room.
     *
     * Mandatory string state such as "open", "closed", or "pending".
     */
    status: string;
  };

  /** Request body for updating an auction room. */
  export type IUpdate = {
    /**
     * Name of the streamer who owns this auction room.
     *
     * Optional for update. If not provided, value remains unchanged.
     */
    streamer_name?: string | undefined;

    /**
     * Scheduled start time of the auction room.
     *
     * Optional ISO 8601 date-time string.
     */
    start_time?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Optional scheduled end time of the auction room.
     *
     * ISO 8601 date-time string or null.
     */
    end_time?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Status of the auction room.
     *
     * Optional string state such as "open", "closed", or "pending".
     */
    status?: string | undefined;
  };

  /**
   * Summary information of an auction room.
   *
   * Includes unique ID, streamer name, auction status, schedule times, and
   * last update time.
   *
   * Used for listing auctions with essential metadata.
   */
  export type ISummary = {
    /** Unique identifier of the auction room */
    id: string & tags.Format<"uuid">;

    /** Name of the streamer who owns this auction room */
    streamer_name: string;

    /** Scheduled start time of the auction room */
    start_time: string & tags.Format<"date-time">;

    /** Optional scheduled end time of the auction room */
    end_time?: (string & tags.Format<"date-time">) | null | undefined;

    /** Status of the auction room, e.g., open, closed, pending */
    status: string;

    /** Record last updated timestamp */
    updated_at: string & tags.Format<"date-time">;

    /** Soft delete timestamp for marking deletion */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
