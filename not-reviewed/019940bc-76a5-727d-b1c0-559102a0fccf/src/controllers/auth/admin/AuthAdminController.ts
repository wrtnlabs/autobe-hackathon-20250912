import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";

import { IAuctionPlatformAdmin } from "../../../api/structures/IAuctionPlatformAdmin";

@Controller("/auth/admin")
export class AuthAdminController {
  /**
   * Register new admin user and issue authorization tokens.
   *
   * Admin account registration creates new auction_platform_admins records
   * with email, hashed password, and optional nickname. JWT tokens are issued
   * upon success to facilitate secure admin access. Soft deletion via
   * deleted_at field allows account lifecycle management. Related operations
   * include admin login and token refresh processes.
   *
   * @param connection
   * @param body Admin registration request payload
   * @setHeader token.access Authorization
   *
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: IAuctionPlatformAdmin.ICreate,
  ): Promise<IAuctionPlatformAdmin.IAuthorized> {
    body;
    return typia.random<IAuctionPlatformAdmin.IAuthorized>();
  }

  /**
   * Authenticate admin user and issue authorization tokens.
   *
   * Admin login operation authenticates credentials of
   * auction_platform_admins users and issues JWT tokens upon success. The
   * operation ensures secure access control for administrative functions by
   * validated login and token issuance. It supports integration with admin
   * join registration and token refresh operations.
   *
   * @param connection
   * @param body Admin login credentials
   * @setHeader token.access Authorization
   *
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: IAuctionPlatformAdmin.ILogin,
  ): Promise<IAuctionPlatformAdmin.IAuthorized> {
    body;
    return typia.random<IAuctionPlatformAdmin.IAuthorized>();
  }

  /**
   * Refresh admin user authorization tokens for session continuation.
   *
   * Admin token refresh operation verifies refresh tokens and issues new JWT
   * tokens for admin session continuity. It ensures secure token lifecycle
   * management consistent with admin privileges. Related operations include
   * admin join for registration and login for authentication.
   *
   * @param connection
   * @param body Admin token refresh request payload
   * @setHeader token.access Authorization
   *
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: IAuctionPlatformAdmin.IRefresh,
  ): Promise<IAuctionPlatformAdmin.IAuthorized> {
    body;
    return typia.random<IAuctionPlatformAdmin.IAuthorized>();
  }
}
