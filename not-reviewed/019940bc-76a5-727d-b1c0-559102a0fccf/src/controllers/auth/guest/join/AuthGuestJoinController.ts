import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";

import { IAuctionPlatformGuest } from "../../../../api/structures/IAuctionPlatformGuest";

@Controller("/auth/guest/join")
export class AuthGuestJoinController {
  /**
   * Create new guest account and issue temporary tokens
   * (auction_platform_guests).
   *
   * Creates a new guest account for unauthenticated users with limited access
   * rights. Stores guest email and optional nickname, with lifecycle
   * timestamps. Issues temporary JWT tokens to manage guest sessions and
   * access levels. Uniqueness of email is enforced to prevent duplicate guest
   * registrations.
   *
   * This operation corresponds to the auction_platform_guests table,
   * referencing fields: email (unique), nickname (optional), created_at,
   * updated_at, deleted_at.
   *
   * Guest users cannot perform login as they do not authenticate with
   * credentials but can refresh tokens for continued access.
   *
   * Related: refresh operation to renew token access.
   *
   * Ensures security by restricting guest token scope to limited permissions
   * only.
   *
   * The endpoint is public and does not require authentication.
   *
   * It is part of the essential operations for the guest role kind.
   *
   * @param connection
   * @param body Information required to create a guest account
   * @setHeader token.access Authorization
   *
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post()
  public async joinGuest(
    @TypedBody()
    body: IAuctionPlatformGuest.ICreate,
  ): Promise<IAuctionPlatformGuest.IAuthorized> {
    body;
    return typia.random<IAuctionPlatformGuest.IAuthorized>();
  }
}
