import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";

import { IAuctionPlatformGuest } from "../../../../api/structures/IAuctionPlatformGuest";

@Controller("/auth/guest/refresh")
export class AuthGuestRefreshController {
  /**
   * Refresh tokens to renew guest access (auction_platform_guests).
   *
   * Refreshes temporary access tokens for guest users by validating the
   * provided refresh token. Issues new access and refresh tokens with updated
   * expirations. Ensures session continuity for guests without requiring
   * login credentials.
   *
   * References auction_platform_guests context for token validation and
   * claims.
   *
   * Accessible only to authenticated guests holding valid refresh tokens.
   *
   * Related to the join operation for initial registration and token
   * issuance.
   *
   * Security enforced by token validation and guest access scope limitations.
   *
   * Essential for maintaining guest session lifecycle.
   *
   * @param connection
   * @param body Refresh token information for guests
   * @setHeader token.access Authorization
   *
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post()
  public async refreshGuest(
    @TypedBody()
    body: IAuctionPlatformGuest.IRefresh,
  ): Promise<IAuctionPlatformGuest.IAuthorized> {
    body;
    return typia.random<IAuctionPlatformGuest.IAuthorized>();
  }
}
