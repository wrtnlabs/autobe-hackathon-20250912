import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";

import { IAuctionPlatformPageIAuctionPlatformIconPurchase } from "../../../api/structures/IAuctionPlatformPageIAuctionPlatformIconPurchase";
import { IAuctionPlatformIconPurchase } from "../../../api/structures/IAuctionPlatformIconPurchase";

@Controller("/auctionPlatform/iconPurchases")
export class AuctionplatformIconpurchasesController {
  /**
   * Search and retrieve paginated icon purchase records.
   *
   * Retrieve a filtered and paginated list of icon purchase records. Supports
   * advanced search conditions such as filtering by user, date ranges, or
   * specific icon codes.
   *
   * Pagination parameters allow clients to control page sizes, navigate
   * pages, and sort results.
   *
   * This operation connects with auction_platform_icon_purchases entities,
   * returning concise summary views optimized for list displays. It is useful
   * for administrative reporting and user history views.
   *
   * No authorization required as this is a public facing operation though
   * sensitive user filtering should be handled carefully in business logic.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for icon purchases
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Patch()
  public async searchIconPurchases(
    @TypedBody()
    body: IAuctionPlatformIconPurchase.IRequest,
  ): Promise<IAuctionPlatformPageIAuctionPlatformIconPurchase.ISummary> {
    body;
    return typia.random<IAuctionPlatformPageIAuctionPlatformIconPurchase.ISummary>();
  }

  /**
   * Retrieve an icon purchase record by ID.
   *
   * Fetch detailed information for a specific icon purchase by its ID.
   *
   * Provides complete purchase details including purchasing user, icon code,
   * points spent, and timestamps.
   *
   * This operation supports user or administrative interfaces requiring
   * detailed purchase views.
   *
   * The iconPurchaseId must be valid to avoid not found errors.
   *
   * @param connection
   * @param iconPurchaseId Unique identifier of the icon purchase
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Get(":iconPurchaseId")
  public async atIconPurchase(
    @TypedParam("iconPurchaseId")
    iconPurchaseId: string & tags.Format<"uuid">,
  ): Promise<IAuctionPlatformIconPurchase> {
    iconPurchaseId;
    return typia.random<IAuctionPlatformIconPurchase>();
  }
}
